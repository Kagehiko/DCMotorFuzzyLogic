   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "spi_master.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.SPI_MASTER_lReceiveIRQ,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	SPI_MASTER_lReceiveIRQ:
  25              	.LFB305:
  26              	 .file 1 "../Dave/Generated/SPI_MASTER/spi_master.c"
   1:../Dave/Generated/SPI_MASTER/spi_master.c **** /**
   2:../Dave/Generated/SPI_MASTER/spi_master.c ****  * @file spi_master.c
   3:../Dave/Generated/SPI_MASTER/spi_master.c ****  * @date 2016-10-26
   4:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
   5:../Dave/Generated/SPI_MASTER/spi_master.c ****  * NOTE:
   6:../Dave/Generated/SPI_MASTER/spi_master.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
   8:../Dave/Generated/SPI_MASTER/spi_master.c ****  * @cond
   9:../Dave/Generated/SPI_MASTER/spi_master.c ****  **************************************************************************************************
  10:../Dave/Generated/SPI_MASTER/spi_master.c ****  * SPI_MASTER v4.3.20 - Configures the properties of USIC channel to support SPI mode of communicat
  11:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  12:../Dave/Generated/SPI_MASTER/spi_master.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  13:../Dave/Generated/SPI_MASTER/spi_master.c ****  * All rights reserved.
  14:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  15:../Dave/Generated/SPI_MASTER/spi_master.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/SPI_MASTER/spi_master.c ****  * following conditions are met:
  17:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  18:../Dave/Generated/SPI_MASTER/spi_master.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/SPI_MASTER/spi_master.c ****  *   disclaimer.
  20:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  21:../Dave/Generated/SPI_MASTER/spi_master.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/SPI_MASTER/spi_master.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  24:../Dave/Generated/SPI_MASTER/spi_master.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/SPI_MASTER/spi_master.c ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  27:../Dave/Generated/SPI_MASTER/spi_master.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/SPI_MASTER/spi_master.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/SPI_MASTER/spi_master.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/SPI_MASTER/spi_master.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/SPI_MASTER/spi_master.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/SPI_MASTER/spi_master.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/SPI_MASTER/spi_master.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  35:../Dave/Generated/SPI_MASTER/spi_master.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/SPI_MASTER/spi_master.c ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/SPI_MASTER/spi_master.c ****  **************************************************************************************************
  38:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  39:../Dave/Generated/SPI_MASTER/spi_master.c ****  * Change History
  40:../Dave/Generated/SPI_MASTER/spi_master.c ****  * --------------
  41:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  42:../Dave/Generated/SPI_MASTER/spi_master.c ****  * 2015-02-16:
  43:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - Initial version<br>
  44:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  45:../Dave/Generated/SPI_MASTER/spi_master.c ****  * 2015-02-20:
  46:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - SPI_MASTER_SetMode() API is updated to return, error if mode change is not possible.<br>
  47:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  48:../Dave/Generated/SPI_MASTER/spi_master.c ****  * 2015-05-08:
  49:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - SPI_MASTER_SetBaudRate() and SPI_MASTER_Transfer() are added<br>
  50:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - "SPI_MASTER_OVERSAMPLING" macro is removed, since it is not being used<br>
  51:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - SPI_MASTER_lInit() prototype is moved to spi_master_conf.c file<br>
  52:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - All local APIs are made as static<br>
  53:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - Added SPI_MASTER_lPortModeSet() and SPI_MASTER_lPortModeReset() to support SPI_MASTER_SetB
  54:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - SPI_MASTER_lStd_RBUF_Flush() renamed as SPI_MASTER_lStd_RBUFFlush()<br>
  55:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - SPI_MASTER_lGetFIFOSize() is removed by replacing the functionality<br>
  56:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - In SPI_MASTER_Receive(), SPI_MASTER_Transmit() APIs a runtime condition check is added for
  57:../Dave/Generated/SPI_MASTER/spi_master.c ****  *       and length<br>
  58:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - In SPI_MASTER_lTransmitHandler() API, local call to FIFO fill is removed and replaced with
  59:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  60:../Dave/Generated/SPI_MASTER/spi_master.c ****  * 2015-06-20:
  61:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - For SPI_MASTER_Transfer(), SPI_MASTER_Receive(), SPI_MASTER_Transmit() APIs, the input dat
  62:../Dave/Generated/SPI_MASTER/spi_master.c ****  *       from 16-bit to 8-bit.
  63:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - Word count in Transmission and reception APIs, is updated according to the word length set
  64:../Dave/Generated/SPI_MASTER/spi_master.c ****  *       instead of data length.
  65:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - In SPI_MASTER_Transfer() API, a check is added to support full duplex mode only.
  66:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - SPI_MASTER_lFIFORead() local API signature is changed to accept number of bytes per word.
  67:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - word_length is moved from SPI_MASTER_CONFIG_t to SPI_MASTER_DYNAMIC_CONFIG_t, to support r
  68:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - Abort API are updated to return the status.
  69:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  70:../Dave/Generated/SPI_MASTER/spi_master.c ****  * 2015-07-07:
  71:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - DYNAMIC_CONFIG_t is renamed as RUNTIME_t
  72:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  73:../Dave/Generated/SPI_MASTER/spi_master.c ****  * 2015-09-30:
  74:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - SPI_MASTER_STATUS_MODE_MISMATCH is returned from the transmit and receive APIs
  75:../Dave/Generated/SPI_MASTER/spi_master.c ****  * 
  76:../Dave/Generated/SPI_MASTER/spi_master.c ****  * 2015-10-08:
  77:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - SPI_MASTER_lValidateModeChange() local API is added to chekc the mode change is vaild or n
  78:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - Abort APIs are updated.
  79:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  80:../Dave/Generated/SPI_MASTER/spi_master.c ****  * 2015-10-14:
  81:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - new variable "spi_master_config_mode" to store the actual mode generated during initialisa
  82:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - SPI_MASTER_lValidateModeChange() is updated to support full-duplex to half-duplex mode.
  83:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - XMC_USIC_CH_TriggerServiceRequest() is removed from the DMA transmit by adding during init
  84:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  85:../Dave/Generated/SPI_MASTER/spi_master.c ****  * 2015-12-17:
  86:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - Corrected transmission of unintended data during reception.
  87:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  88:../Dave/Generated/SPI_MASTER/spi_master.c ****  * 2016-04-07:
  89:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - memcpy() usage is eliminated.
  90:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - Usage of the XMC_SPI_Transmit() API is replaced with  XMC_USIC_CH_WriteToTBUFTCI(),
  91:../Dave/Generated/SPI_MASTER/spi_master.c ****  *       XMC_USIC_CH_TXFIFO_PutDataHPCMode() based on the mode selected to improve the performance.
  92:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  93:../Dave/Generated/SPI_MASTER/spi_master.c ****  * 2016-06-07:
  94:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - SPI_MASTER_Receive API in direct mode, corrected.
  95:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  96:../Dave/Generated/SPI_MASTER/spi_master.c ****  * 2016-10-26:
  97:../Dave/Generated/SPI_MASTER/spi_master.c ****  *     - Fix issue when using FIFO and high baudrates by setting the RX FIFO limit to half of the R
  98:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
  99:../Dave/Generated/SPI_MASTER/spi_master.c ****  * @endcond
 100:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
 101:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
 102:../Dave/Generated/SPI_MASTER/spi_master.c **** /**************************************************************************************************
 103:../Dave/Generated/SPI_MASTER/spi_master.c ****  * HEADER FILES
 104:../Dave/Generated/SPI_MASTER/spi_master.c ****  **************************************************************************************************
 105:../Dave/Generated/SPI_MASTER/spi_master.c **** #include "spi_master.h"
 106:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 107:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 108:../Dave/Generated/SPI_MASTER/spi_master.c **** /**************************************************************************************************
 109:../Dave/Generated/SPI_MASTER/spi_master.c ****  * MACROS
 110:../Dave/Generated/SPI_MASTER/spi_master.c ****  **************************************************************************************************
 111:../Dave/Generated/SPI_MASTER/spi_master.c **** #define SPI_MASTER_WORD_LENGTH_8_BIT             (8U) /* This is used to check while incrementing t
 112:../Dave/Generated/SPI_MASTER/spi_master.c **** #define SPI_MASTER_2_BYTES_PER_WORD              (2U) /* Word length is 16-bits */
 113:../Dave/Generated/SPI_MASTER/spi_master.c **** #define SPI_MASTER_1_BYTE_PER_WORD               (1U) /* Word length is 8-bits */
 114:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 115:../Dave/Generated/SPI_MASTER/spi_master.c **** #define SPI_MASTER_RECEIVE_INDICATION_FLAG       ((uint32_t)XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATI
 116:../Dave/Generated/SPI_MASTER/spi_master.c ****                                                   (uint32_t)XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECE
 117:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 118:../Dave/Generated/SPI_MASTER/spi_master.c **** #define SPI_MASTER_FIFO_RECEIVE_INDICATION_FLAG  ((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_STANDARD | \
 119:../Dave/Generated/SPI_MASTER/spi_master.c ****                                                   (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE)
 120:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 121:../Dave/Generated/SPI_MASTER/spi_master.c **** #define SPI_MASTER_RECEIVE_EVENT                 ((uint32_t)XMC_SPI_CH_EVENT_STANDARD_RECEIVE | \
 122:../Dave/Generated/SPI_MASTER/spi_master.c ****                                                   (uint32_t)XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE)
 123:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 124:../Dave/Generated/SPI_MASTER/spi_master.c **** #define SPI_MASTER_FIFO_RECEIVE_EVENT            ((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD 
 125:../Dave/Generated/SPI_MASTER/spi_master.c ****                                                   (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE
 126:../Dave/Generated/SPI_MASTER/spi_master.c **** /**************************************************************************************************
 127:../Dave/Generated/SPI_MASTER/spi_master.c ****  * LOCAL DATA
 128:../Dave/Generated/SPI_MASTER/spi_master.c **** ***************************************************************************************************
 129:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 130:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 131:../Dave/Generated/SPI_MASTER/spi_master.c **** /**************************************************************************************************
 132:../Dave/Generated/SPI_MASTER/spi_master.c ****  * LOCAL ROUTINES
 133:../Dave/Generated/SPI_MASTER/spi_master.c ****  **************************************************************************************************
 134:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
 135:../Dave/Generated/SPI_MASTER/spi_master.c **** /* Transmit interrupt handler for the APP */
 136:../Dave/Generated/SPI_MASTER/spi_master.c **** void SPI_MASTER_lTransmitHandler(const SPI_MASTER_t * const handle);
 137:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 138:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 139:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)
 140:../Dave/Generated/SPI_MASTER/spi_master.c **** static SPI_MASTER_STATUS_t SPI_MASTER_lReceiveIRQ(const SPI_MASTER_t *const handle, uint32_t count)
 141:../Dave/Generated/SPI_MASTER/spi_master.c **** /* This is used to reconfigure the FIFO settings dynamically */
 142:../Dave/Generated/SPI_MASTER/spi_master.c **** static void SPI_MASTER_lReconfigureRxFIFO(const SPI_MASTER_t * const handle, uint32_t data_size);
 143:../Dave/Generated/SPI_MASTER/spi_master.c **** /* Read data from FIFO */
 144:../Dave/Generated/SPI_MASTER/spi_master.c **** static void SPI_MASTER_lFIFORead(const SPI_MASTER_t * const handle, const uint32_t bytes_per_word);
 145:../Dave/Generated/SPI_MASTER/spi_master.c **** /* Receive interrupt handler for the APP */
 146:../Dave/Generated/SPI_MASTER/spi_master.c **** void SPI_MASTER_lReceiveHandler(const SPI_MASTER_t * const handle);
 147:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 148:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 149:../Dave/Generated/SPI_MASTER/spi_master.c **** #if(SPI_MASTER_DMA_RECEIVE_MODE == 1U)
 150:../Dave/Generated/SPI_MASTER/spi_master.c **** static SPI_MASTER_STATUS_t SPI_MASTER_lReceiveDMA(const SPI_MASTER_t *const handle, uint32_t count)
 151:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 152:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 153:../Dave/Generated/SPI_MASTER/spi_master.c **** #if(SPI_MASTER_DIRECT_TRANSMIT_MODE == 1U)
 154:../Dave/Generated/SPI_MASTER/spi_master.c **** static SPI_MASTER_STATUS_t SPI_MASTER_lStartTransmitPolling(const SPI_MASTER_t *const handle, uint8
 155:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 156:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 157:../Dave/Generated/SPI_MASTER/spi_master.c **** #if(SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
 158:../Dave/Generated/SPI_MASTER/spi_master.c **** static SPI_MASTER_STATUS_t SPI_MASTER_lStartReceivePolling(const SPI_MASTER_t *const handle, uint8_
 159:../Dave/Generated/SPI_MASTER/spi_master.c **** static SPI_MASTER_STATUS_t SPI_MASTER_lReceivePolling(const SPI_MASTER_t *const handle, uint32_t co
 160:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 161:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 162:../Dave/Generated/SPI_MASTER/spi_master.c **** #ifdef SPI_MASTER_PARITY_ERROR
 163:../Dave/Generated/SPI_MASTER/spi_master.c **** /* Protocol interrupt handler for the APP */
 164:../Dave/Generated/SPI_MASTER/spi_master.c **** void SPI_MASTER_lProtocolHandler(const SPI_MASTER_t * const handle);
 165:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 166:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 167:../Dave/Generated/SPI_MASTER/spi_master.c **** /* Flush RBUF0, RBUF1 */
 168:../Dave/Generated/SPI_MASTER/spi_master.c **** static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel);
 169:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 170:../Dave/Generated/SPI_MASTER/spi_master.c **** /* This is used to reconfigure the registers while changing the SPI mode dynamically */
 171:../Dave/Generated/SPI_MASTER/spi_master.c **** static void SPI_MASTER_lPortConfig(const SPI_MASTER_t* handle);
 172:../Dave/Generated/SPI_MASTER/spi_master.c **** /* Set the mode of the port pin according to the configuration */
 173:../Dave/Generated/SPI_MASTER/spi_master.c **** static void SPI_MASTER_lPortModeSet(const SPI_MASTER_t* handle);
 174:../Dave/Generated/SPI_MASTER/spi_master.c **** /* Set the mode of the port pin as input */
 175:../Dave/Generated/SPI_MASTER/spi_master.c **** static void SPI_MASTER_lPortModeReset(const SPI_MASTER_t* handle);
 176:../Dave/Generated/SPI_MASTER/spi_master.c **** /* Returns whether mode change is valid or not */
 177:../Dave/Generated/SPI_MASTER/spi_master.c **** static SPI_MASTER_STATUS_t SPI_MASTER_lValidateModeChange(const SPI_MASTER_t * handle, XMC_SPI_CH_M
 178:../Dave/Generated/SPI_MASTER/spi_master.c **** /**************************************************************************************************
 179:../Dave/Generated/SPI_MASTER/spi_master.c ****  * API IMPLEMENTATION
 180:../Dave/Generated/SPI_MASTER/spi_master.c ****  **************************************************************************************************
 181:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
 182:../Dave/Generated/SPI_MASTER/spi_master.c ****  * API to retrieve the version of the SPI_MASTER
 183:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
 184:../Dave/Generated/SPI_MASTER/spi_master.c **** DAVE_APP_VERSION_t SPI_MASTER_GetAppVersion()
 185:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 186:../Dave/Generated/SPI_MASTER/spi_master.c ****   DAVE_APP_VERSION_t version;
 187:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 188:../Dave/Generated/SPI_MASTER/spi_master.c ****   version.major = SPI_MASTER_MAJOR_VERSION;
 189:../Dave/Generated/SPI_MASTER/spi_master.c ****   version.minor = SPI_MASTER_MINOR_VERSION;
 190:../Dave/Generated/SPI_MASTER/spi_master.c ****   version.patch = SPI_MASTER_PATCH_VERSION;
 191:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 192:../Dave/Generated/SPI_MASTER/spi_master.c ****   return version;
 193:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 194:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 195:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
 196:../Dave/Generated/SPI_MASTER/spi_master.c ****  * This function initializes the SPI channel, based on UI configuration.
 197:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
 198:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
 199:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 200:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 201:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 202:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));
 203:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 204:../Dave/Generated/SPI_MASTER/spi_master.c ****   /* Configure the port registers and data input registers of SPI channel */
 205:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = handle->config->fptr_spi_master_config();
 206:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 207:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
 208:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 209:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 210:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
 211:../Dave/Generated/SPI_MASTER/spi_master.c ****  * Change the SPI mode of communication.
 212:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
 213:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_SetMode(SPI_MASTER_t* const handle,
 214:../Dave/Generated/SPI_MASTER/spi_master.c ****                                        const XMC_SPI_CH_MODE_t mode)
 215:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 216:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 217:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 218:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_ASSERT("SPI_MASTER_Configure:handle NULL" , (handle != NULL));
 219:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 220:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = SPI_MASTER_STATUS_SUCCESS;
 221:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 222:../Dave/Generated/SPI_MASTER/spi_master.c ****   if ((false == handle->runtime->tx_busy) && (false == handle->runtime->rx_busy))
 223:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 224:../Dave/Generated/SPI_MASTER/spi_master.c ****     if (handle->runtime->spi_master_mode != mode)
 225:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 226:../Dave/Generated/SPI_MASTER/spi_master.c ****       status =  SPI_MASTER_lValidateModeChange(handle, mode);
 227:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 228:../Dave/Generated/SPI_MASTER/spi_master.c ****       if (SPI_MASTER_STATUS_SUCCESS == status)
 229:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 230:../Dave/Generated/SPI_MASTER/spi_master.c ****         handle->runtime->spi_master_mode = mode;
 231:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 232:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* This changes the operating mode and related settings */
 233:../Dave/Generated/SPI_MASTER/spi_master.c ****         SPI_MASTER_lPortConfig(handle);
 234:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 235:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 236:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 237:../Dave/Generated/SPI_MASTER/spi_master.c ****   else
 238:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 239:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_STATUS_BUSY;
 240:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 241:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
 242:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 243:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 244:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
 245:../Dave/Generated/SPI_MASTER/spi_master.c ****  * Set the baud rate during runtime.
 246:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
 247:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_SetBaudRate(SPI_MASTER_t* const handle, const uint32_t baud_rate)
 248:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 249:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 250:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 251:../Dave/Generated/SPI_MASTER/spi_master.c ****   if ((false == handle->runtime->tx_busy) && (false == handle->runtime->rx_busy))
 252:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 253:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Stops the SPI channel */
 254:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = (SPI_MASTER_STATUS_t)XMC_SPI_CH_Stop(handle->channel);
 255:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 256:../Dave/Generated/SPI_MASTER/spi_master.c ****     if (SPI_MASTER_STATUS_SUCCESS == status)
 257:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 258:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Set all the pins as input */
 259:../Dave/Generated/SPI_MASTER/spi_master.c ****       SPI_MASTER_lPortModeReset(handle);
 260:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 261:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Update the new baud rate */
 262:../Dave/Generated/SPI_MASTER/spi_master.c ****       status = (SPI_MASTER_STATUS_t)XMC_SPI_CH_SetBaudrate(handle->channel, baud_rate);
 263:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 264:../Dave/Generated/SPI_MASTER/spi_master.c ****       if (SPI_MASTER_STATUS_SUCCESS == status)
 265:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 266:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Configure Leading/Trailing delay */
 267:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_SPI_CH_SetSlaveSelectDelay(handle->channel, (uint32_t)handle->config->leading_trailing_
 268:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 269:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 270:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Configure the clock polarity and clock delay */
 271:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_SPI_CH_ConfigureShiftClockOutput(handle->channel,
 272:../Dave/Generated/SPI_MASTER/spi_master.c ****                                            handle->config->shift_clk_passive_level,
 273:../Dave/Generated/SPI_MASTER/spi_master.c ****                                            XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
 274:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Start the SPI channel */
 275:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_SPI_CH_Start(handle->channel);
 276:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 277:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Set the mode of the according the generated configuration */
 278:../Dave/Generated/SPI_MASTER/spi_master.c ****       SPI_MASTER_lPortModeSet(handle);
 279:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 280:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 281:../Dave/Generated/SPI_MASTER/spi_master.c ****   else
 282:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 283:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_STATUS_BUSY;
 284:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 285:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 286:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
 287:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 288:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 289:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_
 290:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 291:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 292:../Dave/Generated/SPI_MASTER/spi_master.c ****   
 293:../Dave/Generated/SPI_MASTER/spi_master.c ****    status = SPI_MASTER_STATUS_FAILURE;
 294:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 295:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
 296:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 297:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 298:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_StartTransmitIRQ(handle, dataptr, count);
 299:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 300:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 301:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 302:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
 303:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 304:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 305:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_StartTransmitDMA(handle, dataptr, count);
 306:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 307:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 308:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 309:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_DIRECT_TRANSMIT_MODE == 1U)
 310:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DIRECT)
 311:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 312:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
 313:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 314:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 315:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 316:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
 317:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 318:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 319:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_Receive(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t
 320:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 321:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 322:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 323:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = SPI_MASTER_STATUS_FAILURE;
 324:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 325:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)
 326:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 327:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 328:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_StartReceiveIRQ(handle, dataptr, count);
 329:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 330:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 331:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 332:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
 333:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 334:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 335:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_StartReceiveDMA(handle, dataptr, count);
 336:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 337:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 338:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 339:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
 340:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DIRECT)
 341:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 342:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_lStartReceivePolling(handle, dataptr, count);
 343:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 344:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 345:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 346:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
 347:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 348:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 349:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
 350:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
 351:../Dave/Generated/SPI_MASTER/spi_master.c ****  * Transmit the number of data words specified.
 352:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
 353:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitIRQ(const SPI_MASTER_t *const handle, uint8_t* dataptr,
 354:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 355:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 356:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and
 357:../Dave/Generated/SPI_MASTER/spi_master.c ****                                                            Specify the number of bytes for the conf
 358:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_RUNTIME_t * runtime_handle;
 359:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 360:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_ASSERT("SPI_MASTER_StartTransmitIRQ:handle NULL" , (handle != NULL));
 361:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 362:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = SPI_MASTER_STATUS_MODE_MISMATCH;
 363:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle = handle->runtime;
 364:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 365:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 366:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 367:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Check whether SPI channel is free or not */
 368:../Dave/Generated/SPI_MASTER/spi_master.c ****     if ((dataptr != NULL) && (count > 0U))
 369:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 370:../Dave/Generated/SPI_MASTER/spi_master.c ****       status = SPI_MASTER_STATUS_BUSY;
 371:../Dave/Generated/SPI_MASTER/spi_master.c ****       /*Check data pointer is valid or not*/
 372:../Dave/Generated/SPI_MASTER/spi_master.c ****       if (false == runtime_handle->tx_busy)
 373:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 374:../Dave/Generated/SPI_MASTER/spi_master.c ****         if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 375:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 376:../Dave/Generated/SPI_MASTER/spi_master.c ****           bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 377:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 378:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 379:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Obtain the address of data, size of data */
 380:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data = dataptr;
 381:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 382:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Initialize to first index and set the busy flag */
 383:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_index = 0U;
 384:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_busy = true;
 385:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 386:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Enable the transmit buffer event */
 387:../Dave/Generated/SPI_MASTER/spi_master.c ****         if ((uint32_t)handle->config->tx_fifo_size > 0U)
 388:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 389:../Dave/Generated/SPI_MASTER/spi_master.c ****           /* Flush the Transmit FIFO */
 390:../Dave/Generated/SPI_MASTER/spi_master.c ****           XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 391:../Dave/Generated/SPI_MASTER/spi_master.c ****           XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_ST
 392:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 393:../Dave/Generated/SPI_MASTER/spi_master.c ****         else
 394:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 395:../Dave/Generated/SPI_MASTER/spi_master.c ****           XMC_USIC_CH_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 396:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 397:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 398:../Dave/Generated/SPI_MASTER/spi_master.c ****         status = SPI_MASTER_STATUS_SUCCESS;
 399:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 400:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Trigger the transmit buffer interrupt */
 401:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 402:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 403:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 404:../Dave/Generated/SPI_MASTER/spi_master.c ****     else
 405:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 406:../Dave/Generated/SPI_MASTER/spi_master.c ****       status = SPI_MASTER_STATUS_BUFFER_INVALID;
 407:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 408:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 409:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
 410:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 411:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 412:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 413:../Dave/Generated/SPI_MASTER/spi_master.c **** #if(SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
 414:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitDMA(const SPI_MASTER_t *const handle, uint8_t *data_ptr
 415:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 416:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 417:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_RUNTIME_t * runtime_handle;
 418:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint32_t dma_ctll;
 419:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint32_t mode;
 420:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 421:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_ASSERT("SPI_MASTER_StartTransmitDMA:handle NULL" , (handle != NULL));
 422:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 423:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = SPI_MASTER_STATUS_MODE_MISMATCH;
 424:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle = handle->runtime;
 425:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 426:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 427:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 428:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Check whether SPI channel is free or not */
 429:../Dave/Generated/SPI_MASTER/spi_master.c ****     if (false == runtime_handle->tx_busy)
 430:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 431:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Check data pointer is valid or not */
 432:../Dave/Generated/SPI_MASTER/spi_master.c ****       if ((data_ptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 433:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 434:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Obtain the address of data, size of data */
 435:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_count = block_size;
 436:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Initialize to first index and set the busy flag */
 437:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_index = 0U;
 438:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_busy = true;
 439:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 440:../Dave/Generated/SPI_MASTER/spi_master.c ****         if (runtime_handle->tx_data_dummy == true)
 441:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 442:../Dave/Generated/SPI_MASTER/spi_master.c ****           dma_ctll = (uint32_t)handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 443:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 444:../Dave/Generated/SPI_MASTER/spi_master.c ****           dma_ctll = (uint32_t)(dma_ctll & (uint32_t)(~(GPDMA0_CH_CTLL_SINC_Msk))) |
 445:../Dave/Generated/SPI_MASTER/spi_master.c ****                                ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE << GPDMA0_CH_CTLL
 446:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 447:../Dave/Generated/SPI_MASTER/spi_master.c ****           handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 448:../Dave/Generated/SPI_MASTER/spi_master.c ****           mode = (uint32_t)((uint32_t)handle->runtime->spi_master_mode & 0xfffbU);
 449:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 450:../Dave/Generated/SPI_MASTER/spi_master.c ****         else
 451:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 452:../Dave/Generated/SPI_MASTER/spi_master.c ****           runtime_handle->tx_data = data_ptr;
 453:../Dave/Generated/SPI_MASTER/spi_master.c ****           dma_ctll = handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 454:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 455:../Dave/Generated/SPI_MASTER/spi_master.c ****           dma_ctll = (uint32_t)(dma_ctll & (~GPDMA0_CH_CTLL_SINC_Msk)) |
 456:../Dave/Generated/SPI_MASTER/spi_master.c ****                                ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT << GPDMA0_CH_CTLL
 457:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 458:../Dave/Generated/SPI_MASTER/spi_master.c ****           handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 459:../Dave/Generated/SPI_MASTER/spi_master.c ****           mode = (uint32_t)handle->runtime->spi_master_mode;
 460:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 461:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 462:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Enable transmit event generation */
 463:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)XMC_SPI_CH_EVENT_RECEIVE_START);
 464:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 465:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_tx_number, block_size);
 466:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 467:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma, handle->dma_ch_tx_number, (uint32_t)ru
 468:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 469:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 470:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 471:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma,
 472:../Dave/Generated/SPI_MASTER/spi_master.c ****                                          handle->dma_ch_tx_number,
 473:../Dave/Generated/SPI_MASTER/spi_master.c ****                                          (uint32_t)&(handle->channel->TBUF[mode]));
 474:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 475:../Dave/Generated/SPI_MASTER/spi_master.c ****         status = SPI_MASTER_STATUS_SUCCESS;
 476:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 477:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_tx_number);
 478:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 479:../Dave/Generated/SPI_MASTER/spi_master.c ****       else
 480:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 481:../Dave/Generated/SPI_MASTER/spi_master.c ****         status = SPI_MASTER_STATUS_BUFFER_INVALID;
 482:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 483:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 484:../Dave/Generated/SPI_MASTER/spi_master.c ****     else
 485:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 486:../Dave/Generated/SPI_MASTER/spi_master.c ****       status = SPI_MASTER_STATUS_BUSY;
 487:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 488:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 489:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 490:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
 491:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 492:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 493:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 494:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_DIRECT_TRANSMIT_MODE == 1U)
 495:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_lStartTransmitPolling(const SPI_MASTER_t *const handle, uint8_t* dat
 496:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 497:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 498:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint16_t data;
 499:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD;; /* This is to support the word length 8 an
 500:../Dave/Generated/SPI_MASTER/spi_master.c ****                                                             Specify the number of bytes for the con
 501:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_RUNTIME_t * runtime_handle;
 502:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 503:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = SPI_MASTER_STATUS_BUSY;
 504:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle = handle->runtime;
 505:../Dave/Generated/SPI_MASTER/spi_master.c ****   data = 0U;
 506:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 507:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_ASSERT("SPI_MASTER_lStartTransmitPolling:handle NULL" , (handle != NULL));
 508:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 509:../Dave/Generated/SPI_MASTER/spi_master.c ****   /* Check whether SPI channel is free or not */
 510:../Dave/Generated/SPI_MASTER/spi_master.c ****   if ((dataptr != NULL) && (count > 0U))
 511:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 512:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Check data pointer is valid or not */
 513:../Dave/Generated/SPI_MASTER/spi_master.c ****     if (false == runtime_handle->tx_busy)
 514:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 515:../Dave/Generated/SPI_MASTER/spi_master.c ****       if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 516:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 517:../Dave/Generated/SPI_MASTER/spi_master.c ****         bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 518:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 519:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 520:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_busy = true;
 521:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Obtain the address of data, size of data */
 522:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_data = dataptr;
 523:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 524:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Initialize to first index and set the busy flag */
 525:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_data_index = 0U;
 526:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 527:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 528:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 529:../Dave/Generated/SPI_MASTER/spi_master.c ****       if ((uint32_t)handle->config->tx_fifo_size > 0U)
 530:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 531:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Flush the Transmit FIFO */
 532:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 533:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 534:../Dave/Generated/SPI_MASTER/spi_master.c ****         while (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 535:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 536:../Dave/Generated/SPI_MASTER/spi_master.c ****           while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 537:../Dave/Generated/SPI_MASTER/spi_master.c ****           {
 538:../Dave/Generated/SPI_MASTER/spi_master.c ****               /* Wait until FIFO is having space for next entry */
 539:../Dave/Generated/SPI_MASTER/spi_master.c ****           }
 540:../Dave/Generated/SPI_MASTER/spi_master.c ****           if (runtime_handle->tx_data_dummy == true)
 541:../Dave/Generated/SPI_MASTER/spi_master.c ****           {
 542:../Dave/Generated/SPI_MASTER/spi_master.c ****             XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->s
 543:../Dave/Generated/SPI_MASTER/spi_master.c ****           }
 544:../Dave/Generated/SPI_MASTER/spi_master.c ****           else
 545:../Dave/Generated/SPI_MASTER/spi_master.c ****           {
 546:../Dave/Generated/SPI_MASTER/spi_master.c ****             if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 547:../Dave/Generated/SPI_MASTER/spi_master.c ****             {
 548:../Dave/Generated/SPI_MASTER/spi_master.c ****               data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 549:../Dave/Generated/SPI_MASTER/spi_master.c ****             }
 550:../Dave/Generated/SPI_MASTER/spi_master.c ****             else
 551:../Dave/Generated/SPI_MASTER/spi_master.c ****             {
 552:../Dave/Generated/SPI_MASTER/spi_master.c ****               data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 553:../Dave/Generated/SPI_MASTER/spi_master.c ****             }
 554:../Dave/Generated/SPI_MASTER/spi_master.c ****             XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_
 555:../Dave/Generated/SPI_MASTER/spi_master.c ****           }
 556:../Dave/Generated/SPI_MASTER/spi_master.c ****           (runtime_handle->tx_data_index)+= bytes_per_word;
 557:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 558:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 559:../Dave/Generated/SPI_MASTER/spi_master.c ****       else
 560:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 561:../Dave/Generated/SPI_MASTER/spi_master.c ****         do
 562:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 563:../Dave/Generated/SPI_MASTER/spi_master.c ****           while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USI
 564:../Dave/Generated/SPI_MASTER/spi_master.c ****           {
 565:../Dave/Generated/SPI_MASTER/spi_master.c ****           }
 566:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 567:../Dave/Generated/SPI_MASTER/spi_master.c ****           if (runtime_handle->tx_data_dummy == true)
 568:../Dave/Generated/SPI_MASTER/spi_master.c ****           {
 569:../Dave/Generated/SPI_MASTER/spi_master.c ****             XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, runtime_handle->spi_master_mode);
 570:../Dave/Generated/SPI_MASTER/spi_master.c ****           }
 571:../Dave/Generated/SPI_MASTER/spi_master.c ****           else
 572:../Dave/Generated/SPI_MASTER/spi_master.c ****           {
 573:../Dave/Generated/SPI_MASTER/spi_master.c ****             if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 574:../Dave/Generated/SPI_MASTER/spi_master.c ****             {
 575:../Dave/Generated/SPI_MASTER/spi_master.c ****               data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 576:../Dave/Generated/SPI_MASTER/spi_master.c ****             }
 577:../Dave/Generated/SPI_MASTER/spi_master.c ****             else
 578:../Dave/Generated/SPI_MASTER/spi_master.c ****             {
 579:../Dave/Generated/SPI_MASTER/spi_master.c ****               data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 580:../Dave/Generated/SPI_MASTER/spi_master.c ****             }
 581:../Dave/Generated/SPI_MASTER/spi_master.c ****             XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, runtime_handle->spi_master_mode);
 582:../Dave/Generated/SPI_MASTER/spi_master.c ****           }
 583:../Dave/Generated/SPI_MASTER/spi_master.c ****           (runtime_handle->tx_data_index)+=bytes_per_word;
 584:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 585:../Dave/Generated/SPI_MASTER/spi_master.c ****           while ((XMC_SPI_CH_GetStatusFlag(handle->channel) & (uint32_t)XMC_SPI_CH_STATUS_FLAG_RECE
 586:../Dave/Generated/SPI_MASTER/spi_master.c ****           {
 587:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 588:../Dave/Generated/SPI_MASTER/spi_master.c ****           }
 589:../Dave/Generated/SPI_MASTER/spi_master.c ****           XMC_SPI_CH_ClearStatusFlag(handle->channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_RECEIVER_STA
 590:../Dave/Generated/SPI_MASTER/spi_master.c ****         } while(runtime_handle->tx_data_index < runtime_handle->tx_data_count);
 591:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 592:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 593:../Dave/Generated/SPI_MASTER/spi_master.c ****       while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH
 594:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 595:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 596:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 597:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_busy = false;
 598:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_data_count = 0U;
 599:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_data_index = 0U;
 600:../Dave/Generated/SPI_MASTER/spi_master.c ****       status = SPI_MASTER_STATUS_SUCCESS;
 601:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 602:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 603:../Dave/Generated/SPI_MASTER/spi_master.c ****   else
 604:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 605:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_STATUS_BUFFER_INVALID;
 606:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 607:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle->rx_data_dummy = true;
 608:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
 609:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 610:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 611:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 612:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
 613:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 614:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_lStartReceivePolling(const SPI_MASTER_t *const handle, uint8_t* data
 615:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 616:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 617:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 618:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_RUNTIME_t * runtime_handle;
 619:../Dave/Generated/SPI_MASTER/spi_master.c ****   static uint8_t dummy_data[2] = {0xFFU, 0xFFU};
 620:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 621:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_ASSERT("SPI_MASTER_lStartReceivePolling:handle NULL" , (handle != NULL));
 622:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 623:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = SPI_MASTER_STATUS_BUSY;
 624:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle = handle->runtime;
 625:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 626:../Dave/Generated/SPI_MASTER/spi_master.c ****   if ((dataptr != NULL) && (count > 0U))
 627:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 628:../Dave/Generated/SPI_MASTER/spi_master.c ****     /*Check data pointer is valid or not*/
 629:../Dave/Generated/SPI_MASTER/spi_master.c ****     if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 630:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 631:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_busy = true;
 632:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_data = dataptr;
 633:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_data = &dummy_data[0];
 634:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_data_dummy = true;
 635:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_data_dummy = false;
 636:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 637:../Dave/Generated/SPI_MASTER/spi_master.c ****       status = SPI_MASTER_lReceivePolling(handle, count);
 638:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 639:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_data_dummy = false;
 640:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_busy = false;
 641:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 642:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 643:../Dave/Generated/SPI_MASTER/spi_master.c ****   else
 644:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 645:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_STATUS_BUFFER_INVALID;
 646:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 647:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
 648:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 649:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 650:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 651:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 652:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 653:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)
 654:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
 655:../Dave/Generated/SPI_MASTER/spi_master.c ****  * Receive the specified the number of data words.
 656:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
 657:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_StartReceiveIRQ(const SPI_MASTER_t *const handle, uint8_t* dataptr, 
 658:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 659:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 660:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_RUNTIME_t * runtime_handle;
 661:../Dave/Generated/SPI_MASTER/spi_master.c ****   static uint8_t dummy_data[2] = {0xFFU, 0xFFU};
 662:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 663:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_ASSERT("SPI_MASTER_StartReceiveIRQ:handle NULL" , (handle != NULL));
 664:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 665:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = SPI_MASTER_STATUS_MODE_MISMATCH;
 666:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle = handle->runtime;
 667:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 668:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 669:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 670:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_STATUS_BUSY;
 671:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Check whether SPI channel is free or not */
 672:../Dave/Generated/SPI_MASTER/spi_master.c ****     if ((dataptr != NULL) && (count > 0U))
 673:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 674:../Dave/Generated/SPI_MASTER/spi_master.c ****       /*Check data pointer is valid or not*/
 675:../Dave/Generated/SPI_MASTER/spi_master.c ****       if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 676:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 677:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_busy = true;
 678:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data = dataptr;
 679:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data = &dummy_data[0];
 680:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_count = count;
 681:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_dummy = true;
 682:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data_dummy = false;
 683:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 684:../Dave/Generated/SPI_MASTER/spi_master.c ****         status = SPI_MASTER_lReceiveIRQ(handle, count);
 685:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 686:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 687:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 688:../Dave/Generated/SPI_MASTER/spi_master.c ****     else
 689:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 690:../Dave/Generated/SPI_MASTER/spi_master.c ****       status = SPI_MASTER_STATUS_BUFFER_INVALID;
 691:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 692:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 693:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
 694:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 695:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 696:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 697:../Dave/Generated/SPI_MASTER/spi_master.c **** #if(SPI_MASTER_DMA_RECEIVE_MODE == 1U)
 698:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_StartReceiveDMA(const SPI_MASTER_t  *const handle, uint8_t *dataptr,
 699:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 700:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 701:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_RUNTIME_t * runtime_handle;
 702:../Dave/Generated/SPI_MASTER/spi_master.c ****   static uint8_t dummy_data[2] = {0xFFU, 0xFFU};
 703:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 704:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_ASSERT("SPI_MASTER_StartReceiveDMA:handle NULL" , (handle != NULL));
 705:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 706:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = SPI_MASTER_STATUS_MODE_MISMATCH;
 707:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle = handle->runtime;
 708:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 709:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 710:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 711:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_STATUS_BUSY;
 712:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Check whether SPI channel is free or not */
 713:../Dave/Generated/SPI_MASTER/spi_master.c ****     if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 714:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 715:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Check data pointer is valid or not */
 716:../Dave/Generated/SPI_MASTER/spi_master.c ****       if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 717:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 718:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_busy = true;
 719:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data = dataptr;
 720:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data = &dummy_data[0];
 721:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_count = block_size;
 722:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_dummy = true;
 723:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data_dummy = false;
 724:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 725:../Dave/Generated/SPI_MASTER/spi_master.c ****         status = SPI_MASTER_lReceiveDMA(handle, block_size);
 726:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 727:../Dave/Generated/SPI_MASTER/spi_master.c ****       else
 728:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 729:../Dave/Generated/SPI_MASTER/spi_master.c ****         status = SPI_MASTER_STATUS_BUFFER_INVALID;
 730:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 731:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 732:../Dave/Generated/SPI_MASTER/spi_master.c ****     else
 733:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 734:../Dave/Generated/SPI_MASTER/spi_master.c ****       status = SPI_MASTER_STATUS_BUSY;
 735:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 736:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 737:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
 738:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 739:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 740:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 741:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
 742:../Dave/Generated/SPI_MASTER/spi_master.c ****  * Transmit and receive the data at the same time. This is supported for full duplex mode only.
 743:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
 744:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_Transfer(const SPI_MASTER_t *const handle,
 745:../Dave/Generated/SPI_MASTER/spi_master.c ****                                         uint8_t* tx_dataptr,
 746:../Dave/Generated/SPI_MASTER/spi_master.c ****                                         uint8_t* rx_dataptr,
 747:../Dave/Generated/SPI_MASTER/spi_master.c ****                                         uint32_t count)
 748:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 749:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 750:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_RUNTIME_t * runtime_handle;
 751:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 752:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_ASSERT("SPI_MASTER_Transfer:handle NULL" , (handle != NULL));
 753:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 754:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = SPI_MASTER_STATUS_BUSY;
 755:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle = handle->runtime;
 756:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 757:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (XMC_SPI_CH_MODE_STANDARD == runtime_handle->spi_master_mode)
 758:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 759:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Check whether SPI channel is free or not */
 760:../Dave/Generated/SPI_MASTER/spi_master.c ****     if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
 761:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 762:../Dave/Generated/SPI_MASTER/spi_master.c ****       /*Check data pointer is valid or not*/
 763:../Dave/Generated/SPI_MASTER/spi_master.c ****       if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 764:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 765:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_busy = true;
 766:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data = rx_dataptr;
 767:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data = tx_dataptr;
 768:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_count = count;
 769:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_dummy = false;
 770:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data_dummy = false;
 771:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 772:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)
 773:../Dave/Generated/SPI_MASTER/spi_master.c ****         if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 774:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 775:../Dave/Generated/SPI_MASTER/spi_master.c ****           status = SPI_MASTER_lReceiveIRQ(handle, count);
 776:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 777:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 778:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
 779:../Dave/Generated/SPI_MASTER/spi_master.c ****         if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 780:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 781:../Dave/Generated/SPI_MASTER/spi_master.c ****           status = SPI_MASTER_lReceiveDMA(handle, count);
 782:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 783:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 784:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
 785:../Dave/Generated/SPI_MASTER/spi_master.c ****         if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DIRECT)
 786:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 787:../Dave/Generated/SPI_MASTER/spi_master.c ****           status = SPI_MASTER_lReceivePolling(handle, count);
 788:../Dave/Generated/SPI_MASTER/spi_master.c ****           runtime_handle->rx_busy = false;
 789:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 790:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 791:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 792:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 793:../Dave/Generated/SPI_MASTER/spi_master.c ****     else
 794:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 795:../Dave/Generated/SPI_MASTER/spi_master.c ****       status = SPI_MASTER_STATUS_BUFFER_INVALID;
 796:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 797:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 798:../Dave/Generated/SPI_MASTER/spi_master.c ****   else
 799:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 800:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_STATUS_FAILURE;
 801:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 802:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 803:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
 804:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 805:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 806:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 807:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
 808:../Dave/Generated/SPI_MASTER/spi_master.c ****  * Aborts the ongoing data reception.
 809:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
 810:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_AbortReceive(const SPI_MASTER_t *const handle)
 811:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 812:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 813:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 814:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = SPI_MASTER_STATUS_FAILURE;
 815:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 816:../Dave/Generated/SPI_MASTER/spi_master.c ****   if ((handle->config->receive_mode != SPI_MASTER_TRANSFER_MODE_DIRECT) && (handle->runtime->rx_bus
 817:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 818:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Abort if any ongoing transmission w.r.t reception. */
 819:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_AbortTransmit(handle);
 820:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 821:../Dave/Generated/SPI_MASTER/spi_master.c ****     if (status == SPI_MASTER_STATUS_SUCCESS)
 822:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 823:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Reset the user buffer pointer to null */
 824:../Dave/Generated/SPI_MASTER/spi_master.c ****       handle->runtime->rx_busy = false;
 825:../Dave/Generated/SPI_MASTER/spi_master.c ****       handle->runtime->rx_data = NULL;
 826:../Dave/Generated/SPI_MASTER/spi_master.c ****       handle->runtime->tx_data_dummy = false;
 827:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Disable the receive interrupts */
 828:../Dave/Generated/SPI_MASTER/spi_master.c ****       if ((uint32_t)handle->config->rx_fifo_size > 0U)
 829:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 830:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 831:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 832:../Dave/Generated/SPI_MASTER/spi_master.c ****       else
 833:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 834:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
 835:../Dave/Generated/SPI_MASTER/spi_master.c ****         if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 836:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 837:../Dave/Generated/SPI_MASTER/spi_master.c ****           /* Disable the receive event */
 838:../Dave/Generated/SPI_MASTER/spi_master.c ****           if(XMC_DMA_CH_IsEnabled(handle->global_dma->dma, handle->dma_ch_rx_number))
 839:../Dave/Generated/SPI_MASTER/spi_master.c ****           {
 840:../Dave/Generated/SPI_MASTER/spi_master.c ****             XMC_DMA_CH_Disable(handle->global_dma->dma, handle->dma_ch_rx_number);
 841:../Dave/Generated/SPI_MASTER/spi_master.c ****             while(XMC_DMA_CH_IsEnabled(handle->global_dma->dma, handle->dma_ch_rx_number)==true)
 842:../Dave/Generated/SPI_MASTER/spi_master.c ****             {
 843:../Dave/Generated/SPI_MASTER/spi_master.c ****             }
 844:../Dave/Generated/SPI_MASTER/spi_master.c ****             XMC_SPI_CH_DisableEvent(handle->channel,
 845:../Dave/Generated/SPI_MASTER/spi_master.c ****             (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_A
 846:../Dave/Generated/SPI_MASTER/spi_master.c ****           }
 847:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 848:../Dave/Generated/SPI_MASTER/spi_master.c ****         else
 849:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 850:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 851:../Dave/Generated/SPI_MASTER/spi_master.c ****           XMC_SPI_CH_DisableEvent(handle->channel,
 852:../Dave/Generated/SPI_MASTER/spi_master.c ****             (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_A
 853:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 854:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 855:../Dave/Generated/SPI_MASTER/spi_master.c ****       status = SPI_MASTER_STATUS_SUCCESS;
 856:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 857:../Dave/Generated/SPI_MASTER/spi_master.c ****     else
 858:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 859:../Dave/Generated/SPI_MASTER/spi_master.c ****       status = SPI_MASTER_STATUS_FAILURE;
 860:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 861:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 862:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
 863:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 864:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 865:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
 866:../Dave/Generated/SPI_MASTER/spi_master.c ****  * Aborts the ongoing data transmission.
 867:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
 868:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_AbortTransmit(const SPI_MASTER_t *const handle)
 869:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 870:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 871:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 872:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = SPI_MASTER_STATUS_FAILURE;
 873:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 874:../Dave/Generated/SPI_MASTER/spi_master.c ****   if ((handle->config->transmit_mode != SPI_MASTER_TRANSFER_MODE_DIRECT) && (handle->runtime->tx_bu
 875:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 876:../Dave/Generated/SPI_MASTER/spi_master.c ****     /*Reset the user buffer pointer to null*/
 877:../Dave/Generated/SPI_MASTER/spi_master.c ****     handle->runtime->tx_busy = false;
 878:../Dave/Generated/SPI_MASTER/spi_master.c ****     handle->runtime->tx_data = NULL;
 879:../Dave/Generated/SPI_MASTER/spi_master.c ****     handle->runtime->tx_data_dummy = false;
 880:../Dave/Generated/SPI_MASTER/spi_master.c ****     /*Disable the transmit interrupts*/
 881:../Dave/Generated/SPI_MASTER/spi_master.c ****     if ((uint32_t)handle->config->tx_fifo_size > 0U)
 882:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 883:../Dave/Generated/SPI_MASTER/spi_master.c ****       /*Disable the transmit FIFO event*/
 884:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STAND
 885:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 886:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 887:../Dave/Generated/SPI_MASTER/spi_master.c ****     else
 888:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 889:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
 890:../Dave/Generated/SPI_MASTER/spi_master.c ****       if(handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 891:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 892:../Dave/Generated/SPI_MASTER/spi_master.c ****         /*Disable the standard transmit event*/
 893:../Dave/Generated/SPI_MASTER/spi_master.c ****         if(XMC_DMA_CH_IsEnabled(handle->global_dma->dma, handle->dma_ch_tx_number))
 894:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 895:../Dave/Generated/SPI_MASTER/spi_master.c ****           XMC_DMA_CH_Disable(handle->global_dma->dma, handle->dma_ch_tx_number);
 896:../Dave/Generated/SPI_MASTER/spi_master.c ****           while(XMC_DMA_CH_IsEnabled(handle->global_dma->dma, handle->dma_ch_tx_number)==true)
 897:../Dave/Generated/SPI_MASTER/spi_master.c ****           {
 898:../Dave/Generated/SPI_MASTER/spi_master.c ****           }
 899:../Dave/Generated/SPI_MASTER/spi_master.c ****           XMC_SPI_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 900:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 901:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 902:../Dave/Generated/SPI_MASTER/spi_master.c ****       else
 903:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 904:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 905:../Dave/Generated/SPI_MASTER/spi_master.c ****         /*Disable the standard transmit event*/
 906:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_SPI_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 907:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 908:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 909:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_STATUS_SUCCESS;
 910:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 911:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
 912:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 913:../Dave/Generated/SPI_MASTER/spi_master.c **** /**************************************************************************************************
 914:../Dave/Generated/SPI_MASTER/spi_master.c **** **                                                Private API definitions                          
 915:../Dave/Generated/SPI_MASTER/spi_master.c **** ***************************************************************************************************
 916:../Dave/Generated/SPI_MASTER/spi_master.c **** #if(SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
 917:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
 918:../Dave/Generated/SPI_MASTER/spi_master.c ****  * Transmit interrupt handler for the APP.
 919:../Dave/Generated/SPI_MASTER/spi_master.c ****  * This is a common interrupt handling function called for different instances of the APP.
 920:../Dave/Generated/SPI_MASTER/spi_master.c ****  *
 921:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
 922:../Dave/Generated/SPI_MASTER/spi_master.c **** void SPI_MASTER_lTransmitHandler(const SPI_MASTER_t * const handle)
 923:../Dave/Generated/SPI_MASTER/spi_master.c **** {
 924:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint16_t data; /* Data to be loaded into the TBUF */
 925:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and
 926:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 927:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 928:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 929:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 930:../Dave/Generated/SPI_MASTER/spi_master.c ****     bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 931:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 932:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 933:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 934:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 935:../Dave/Generated/SPI_MASTER/spi_master.c ****     data = 0U;
 936:../Dave/Generated/SPI_MASTER/spi_master.c ****     /*When Transmit FIFO is enabled*/
 937:../Dave/Generated/SPI_MASTER/spi_master.c ****     if ((uint32_t)handle->config->tx_fifo_size > 0U)
 938:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 939:../Dave/Generated/SPI_MASTER/spi_master.c ****       /*Fill the transmit FIFO */
 940:../Dave/Generated/SPI_MASTER/spi_master.c ****       while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 941:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 942:../Dave/Generated/SPI_MASTER/spi_master.c ****         if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 943:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 944:../Dave/Generated/SPI_MASTER/spi_master.c ****           /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
 945:../Dave/Generated/SPI_MASTER/spi_master.c ****           if (runtime_handle->tx_data_dummy == true)
 946:../Dave/Generated/SPI_MASTER/spi_master.c ****           {
 947:../Dave/Generated/SPI_MASTER/spi_master.c ****             XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->s
 948:../Dave/Generated/SPI_MASTER/spi_master.c ****           }
 949:../Dave/Generated/SPI_MASTER/spi_master.c ****           else
 950:../Dave/Generated/SPI_MASTER/spi_master.c ****           {
 951:../Dave/Generated/SPI_MASTER/spi_master.c ****             if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 952:../Dave/Generated/SPI_MASTER/spi_master.c ****             {
 953:../Dave/Generated/SPI_MASTER/spi_master.c ****               data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 954:../Dave/Generated/SPI_MASTER/spi_master.c ****             }
 955:../Dave/Generated/SPI_MASTER/spi_master.c ****             else
 956:../Dave/Generated/SPI_MASTER/spi_master.c ****             {
 957:../Dave/Generated/SPI_MASTER/spi_master.c ****               data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 958:../Dave/Generated/SPI_MASTER/spi_master.c ****             }
 959:../Dave/Generated/SPI_MASTER/spi_master.c ****             XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_
 960:../Dave/Generated/SPI_MASTER/spi_master.c ****           }
 961:../Dave/Generated/SPI_MASTER/spi_master.c ****           (runtime_handle->tx_data_index)+= bytes_per_word;
 962:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 963:../Dave/Generated/SPI_MASTER/spi_master.c ****         else
 964:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 965:../Dave/Generated/SPI_MASTER/spi_master.c ****           break;
 966:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 967:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 968:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 969:../Dave/Generated/SPI_MASTER/spi_master.c ****     else/*When Transmit FIFO is disabled*/
 970:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 971:../Dave/Generated/SPI_MASTER/spi_master.c ****       if (runtime_handle->tx_data_dummy == true)
 972:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 973:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_m
 974:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 975:../Dave/Generated/SPI_MASTER/spi_master.c ****       else
 976:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 977:../Dave/Generated/SPI_MASTER/spi_master.c ****         if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 978:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 979:../Dave/Generated/SPI_MASTER/spi_master.c ****           data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 980:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 981:../Dave/Generated/SPI_MASTER/spi_master.c ****         else
 982:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 983:../Dave/Generated/SPI_MASTER/spi_master.c ****           data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 984:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 985:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode
 986:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 987:../Dave/Generated/SPI_MASTER/spi_master.c ****       (runtime_handle->tx_data_index)+= bytes_per_word;
 988:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 989:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 990:../Dave/Generated/SPI_MASTER/spi_master.c ****   else
 991:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 992:../Dave/Generated/SPI_MASTER/spi_master.c ****     if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 993:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 994:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Clear the flag */
 995:../Dave/Generated/SPI_MASTER/spi_master.c ****       if ((uint32_t)handle->config->tx_fifo_size > 0U)
 996:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 997:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Clear the transmit FIFO event */
 998:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STA
 999:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1000:../Dave/Generated/SPI_MASTER/spi_master.c ****       else
1001:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1002:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Clear the standard transmit event */
1003:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
1004:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1005:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1006:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Wait for the transmit buffer to be free to ensure that all data is transmitted */
1007:../Dave/Generated/SPI_MASTER/spi_master.c ****       while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
1008:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1009:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1010:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1011:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1012:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* All data is transmitted */
1013:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_busy = false;
1014:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_data = NULL;
1015:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1016:../Dave/Generated/SPI_MASTER/spi_master.c ****       if ((handle->config->tx_cbhandler != NULL) && (runtime_handle->rx_busy == false))
1017:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1018:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Execute the callback function provided in the SPI_MASTER APP UI */
1019:../Dave/Generated/SPI_MASTER/spi_master.c ****         handle->config->tx_cbhandler();
1020:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1021:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1022:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1023:../Dave/Generated/SPI_MASTER/spi_master.c **** }
1024:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
1025:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1026:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)
1027:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1028:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_lReceiveIRQ(const SPI_MASTER_t *const handle, uint32_t count)
1029:../Dave/Generated/SPI_MASTER/spi_master.c **** {
  27              	 .loc 1 1029 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	.LVL0:
  32 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 24
  35              	 .cfi_offset 3,-24
  36              	 .cfi_offset 4,-20
  37              	 .cfi_offset 5,-16
  38              	 .cfi_offset 6,-12
  39              	 .cfi_offset 7,-8
  40              	 .cfi_offset 14,-4
  41              	 .loc 1 1029 0
  42 0002 0446     	 mov r4,r0
1030:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1031:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
1032:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_RUNTIME_t * runtime_handle;
1033:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD;; /* This is to support the word length 8 an
1034:../Dave/Generated/SPI_MASTER/spi_master.c ****                                                             Specify the number of bytes for the con
1035:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1036:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle = handle->runtime;
1037:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle->rx_data_index = 0U;
  43              	 .loc 1 1037 0
  44 0004 0020     	 movs r0,#0
  45              	.LVL1:
1036:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle->rx_data_index = 0U;
  46              	 .loc 1 1036 0
  47 0006 A568     	 ldr r5,[r4,#8]
  48              	.LVL2:
1038:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1039:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
1040:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1041:../Dave/Generated/SPI_MASTER/spi_master.c ****     bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
1042:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1043:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1044:../Dave/Generated/SPI_MASTER/spi_master.c ****   /* If no active reception in progress, obtain the address of data buffer and number of data bytes
1045:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);
1046:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1047:../Dave/Generated/SPI_MASTER/spi_master.c ****   /* Check if FIFO is enabled */
1048:../Dave/Generated/SPI_MASTER/spi_master.c ****   if ((uint32_t)handle->config->rx_fifo_size > 0U)
  49              	 .loc 1 1048 0
  50 0008 6268     	 ldr r2,[r4,#4]
1039:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
  51              	 .loc 1 1039 0
  52 000a 2B68     	 ldr r3,[r5]
  53              	 .loc 1 1048 0
  54 000c 92F87D20 	 ldrb r2,[r2,#125]
1049:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1050:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Clear the receive FIFO */
1051:../Dave/Generated/SPI_MASTER/spi_master.c ****     XMC_USIC_CH_RXFIFO_Flush(handle->channel);
  55              	 .loc 1 1051 0
  56 0010 2668     	 ldr r6,[r4]
1037:../Dave/Generated/SPI_MASTER/spi_master.c **** 
  57              	 .loc 1 1037 0
  58 0012 2861     	 str r0,[r5,#16]
  59              	.LVL3:
1039:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
  60              	 .loc 1 1039 0
  61 0014 082B     	 cmp r3,#8
  62 0016 94BF     	 ite ls
  63 0018 0023     	 movls r3,#0
  64 001a 0123     	 movhi r3,#1
1045:../Dave/Generated/SPI_MASTER/spi_master.c **** 
  65              	 .loc 1 1045 0
  66 001c 9940     	 lsls r1,r1,r3
  67              	.LVL4:
  68 001e E960     	 str r1,[r5,#12]
1048:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
  69              	 .loc 1 1048 0
  70 0020 02B3     	 cbz r2,.L2
  71              	.LVL5:
  72              	.LBB116:
  73              	.LBB117:
  74              	 .file 2 "C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc/xmc_usic.h"
   1:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
   2:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @file xmc_usic.h
   3:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @date 2017-02-10
   4:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
   5:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @cond
   6:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
   7:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMClib v2.1.16 - XMC Peripheral Driver Library 
   8:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
   9:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * All rights reserved.                        
  11:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *                                             
  12:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * following conditions are met:   
  14:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  15:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer.                        
  17:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  18:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  21:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  24:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *                                                                              
  32:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  **************************************************************************************************
  35:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
  36:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Change History
  37:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * --------------
  38:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
  39:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-02-20:
  40:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Initial draft<br>
  41:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Documentation improved <br>
  42:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
  43:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-05-08:
  44:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *      
  46:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-06-20:
  47:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
  49:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-17:
  50:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
  52:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-24:
  53:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
  56:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-25:
  57:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
  61:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-27:
  62:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
  66:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 2015-08-28:
  67:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
  70:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-03-09:
  71:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Optimization of write only registers
  72:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
  73:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 2016-04-10:
  74:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
  76:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 2017-02-10:
  77:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetShiftDirection() to allow selection of shift direction of the data wo
  78:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_GetCaptureTimerValue() and XMC_USIC_CH_SetFractionalDivider()
  79:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
  80:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @endcond
  81:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
  82:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
  83:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
  84:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #ifndef XMC_USIC_H
  85:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC_H
  86:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
  87:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * HEADER FILES
  88:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
  89:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
  90:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #include "xmc_common.h"
  91:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
  92:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
  93:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
  94:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
  95:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
  96:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
  97:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
  98:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @addtogroup USIC
  99:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
 100:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 101:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
 102:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
 103:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 104:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 105:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 106:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 107:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * communication protocols.
 108:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 109:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC driver features:
 110:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 111:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 112:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  friendly format.
 113:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 114:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 115:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 116:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 117:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 118:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @{
 119:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 120:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 121:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 122:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * MACROS
 123:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 124:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 125:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 126:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 127:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 128:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 129:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC1)
 130:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 131:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 132:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 133:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 134:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 135:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(USIC2)
 136:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 137:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 138:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 139:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 140:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 141:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 142:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 143:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 144:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 145:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 146:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 147:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 148:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 149:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 150:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 151:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 152:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 153:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 154:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc1_usic_map.h"
 155:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 156:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 157:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 158:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  #include "xmc4_usic_map.h"
 159:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 160:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 161:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 162:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * ENUMS
 163:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 164:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 165:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 166:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel driver status
 167:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 168:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 169:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 170:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 171:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 172:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 173:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 174:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 175:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 176:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel kernel mode
 177:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 178:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 179:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 180:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 181:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 182:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 183:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 184:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 185:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 186:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 187:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel operating mode
 188:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 189:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 190:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 191:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 192:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 193:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 194:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 195:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 196:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 197:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 198:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 199:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel inputs
 200:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 201:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 202:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 203:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 204:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 205:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 206:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 207:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 208:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 209:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 210:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 211:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 212:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 213:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 214:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 215:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 216:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 217:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 218:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 219:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 220:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 221:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel input combination mode
 222:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 223:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 224:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 225:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 226:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 227:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 228:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 229:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 230:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 231:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 232:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 233:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 234:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 235:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 236:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 237:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 238:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 239:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 240:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 241:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 242:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 243:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 244:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 245:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 246:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 247:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 248:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 249:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 250:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 251:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 252:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 253:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 254:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 255:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 256:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 257:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 258:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel events
 259:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 260:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 261:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 262:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 263:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 264:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 265:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 266:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 267:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 268:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 269:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 270:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 271:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 272:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel parity mode
 273:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 274:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 275:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 276:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 277:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 278:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 279:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 280:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 281:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 282:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data output mode
 283:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 284:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 285:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 286:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 287:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 288:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 289:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 290:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 291:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status
 292:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 293:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 294:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 295:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 296:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 297:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 298:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 299:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 300:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 301:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 302:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 303:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 304:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 305:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 306:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 307:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 308:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 309:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 310:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 311:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive buffer status
 312:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 313:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 314:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 315:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 316:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 317:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 318:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 319:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 320:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel output signal passive data level
 321:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 322:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 323:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 324:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 325:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 326:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 327:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 328:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 329:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO size
 330:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 331:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 332:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 333:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 334:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 335:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 336:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 337:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 338:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 339:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 340:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 341:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 342:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 343:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 344:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 345:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 346:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 347:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 348:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 349:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 350:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 351:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 352:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 353:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 354:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 355:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 356:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 357:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 358:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 359:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 360:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 361:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel transmit FIFO status
 362:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 363:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 364:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 365:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 366:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 367:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 368:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 369:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 370:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 371:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 372:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 373:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 374:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 375:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 376:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 377:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 378:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 379:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 380:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 381:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 382:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 383:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 384:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 385:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 386:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 387:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 388:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 389:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel receive FIFO status
 390:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 391:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 392:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 393:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 394:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 395:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 396:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 397:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 398:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 399:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 400:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 401:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 402:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 403:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 404:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 405:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 406:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 407:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 408:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 409:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 410:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 411:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 412:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 413:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 414:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 415:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 416:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 417:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 418:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 419:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 420:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 421:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 422:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 423:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 424:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 425:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 426:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 427:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 428:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 429:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 430:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 431:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 432:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 433:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 434:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 435:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 436:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 437:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 438:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 439:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 440:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 441:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 442:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 443:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 444:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 445:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 446:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 447:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * USIC channel shift direction.
 448:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** * Defines the shift direction of the data words for transmission and reception
 449:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
 450:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef enum XMC_USIC_CH_SHIFT_DIRECTION
 451:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 452:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_LSB_FIRST = 0x0UL, /**< Shift LSB first. The first data bit of a data
 453:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   XMC_USIC_CH_SHIFT_DIRECTION_MSB_FIRST = 0x1UL << USIC_CH_SCTR_SDIR_Msk /**< Shift MSB first. The 
 454:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_SHIFT_DIRECTION_t;
 455:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 456:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 457:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 458:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * DATA STRUCTURES
 459:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *******************************************************************************/
 460:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 461:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 462:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 463:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma push
 464:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma anon_unions
 465:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 466:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning 586
 467:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 468:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 469:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 470:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC module structure
 471:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 472:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 473:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 474:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 475:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 476:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * except for some registers.
 477:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 478:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 479:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 480:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 481:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 482:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 483:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 484:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 485:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 486:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 487:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 488:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 489:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 490:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 491:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 492:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 493:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 494:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 495:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 496:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 497:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 498:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 499:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 500:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   };
 501:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 502:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 503:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 504:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   union {
 505:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 506:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 507:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 508:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 509:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 510:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   };
 511:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 512:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 513:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 514:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 515:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 516:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 517:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 518:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 519:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 520:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 521:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 522:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 523:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 524:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 525:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 526:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 527:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 528:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 529:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 530:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 531:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 532:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** } XMC_USIC_CH_t;
 533:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 534:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 535:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 536:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(__CC_ARM)
 537:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma pop
 538:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #elif defined(__TASKING__)
 539:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   #pragma warning restore
 540:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 541:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 542:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /*******************************************************************************
 543:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * API PROTOTYPES
 544:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  ******************************************************************************/
 545:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 546:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #ifdef __cplusplus
 547:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** extern "C" {
 548:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 549:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 550:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 551:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 552:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 553:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 554:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 555:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 556:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 557:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 558:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 559:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 560:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 561:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 562:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 563:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 564:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 565:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 566:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 567:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   bool tmp;
 568:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 569:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 570:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 571:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 572:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 573:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 574:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 575:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** #endif
 576:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 577:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   return tmp;
 578:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 579:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 580:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /* Common APIs */
 581:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 582:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 583:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 584:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 585:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 586:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
 587:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 588:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 589:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 590:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 591:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 592:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 593:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 594:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 595:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 596:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 597:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 598:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 599:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 600:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 601:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 602:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 603:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 604:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * disabling sequence for the selected device.
 605:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 606:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 607:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 608:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 609:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 610:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 611:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 612:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 613:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 614:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 615:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 616:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 617:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 618:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 619:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 620:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 621:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 622:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 623:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 624:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 625:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 626:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 627:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 628:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 629:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 630:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 631:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 632:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 633:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 634:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 635:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 636:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 637:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 638:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 639:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 640:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 641:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 642:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 643:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 644:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 645:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 646:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 647:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 648:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 649:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 650:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 651:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 652:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 653:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 654:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * baudrate.
 655:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 656:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 657:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 658:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 659:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 660:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 661:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 662:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 663:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 664:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 665:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 666:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 667:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 668:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 669:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 670:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 671:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 672:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 673:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 674:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 675:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 676:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 677:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 678:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 679:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 680:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 681:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 		                                         const uint16_t pdiv,
 682:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 												 const uint32_t oversampling,
 683:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 684:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 685:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 686:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 687:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 688:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 689:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 690:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 691:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 692:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 693:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * </tr></table>
 694:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 695:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 696:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 697:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 698:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 699:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 700:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *  
 701:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 702:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 703:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 704:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 705:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 706:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 707:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 708:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 709:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 710:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 711:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 712:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 713:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 714:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 715:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 716:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 717:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 718:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 719:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 720:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 721:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 722:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 723:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 724:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 725:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 726:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 727:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 728:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 729:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 730:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 731:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 732:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 733:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 734:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 735:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 736:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 737:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 738:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * the selected data input line. \n\n
 739:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 740:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * This setting is used
 741:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * if the signals are directly derived from an input
 742:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 743:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 744:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 745:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 746:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 747:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 748:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 749:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 750:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 751:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 752:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 753:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 754:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 755:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 756:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 757:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 758:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 759:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 760:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 761:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 762:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 763:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 764:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 765:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 766:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 767:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 768:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 769:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 770:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 771:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 772:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 773:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 774:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 775:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 776:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 777:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 778:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 779:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 780:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 781:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 782:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 783:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 784:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 785:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 786:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 787:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 788:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 789:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 790:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 791:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 792:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 793:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 794:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 795:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 796:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 797:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 798:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 799:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 800:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 801:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 802:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 803:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 804:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 805:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 806:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 807:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 808:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 809:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 810:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 811:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 812:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 813:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 814:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 815:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 816:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 817:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 818:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 819:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 820:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 821:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 822:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 823:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 824:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 825:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 826:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 827:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 828:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 829:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 830:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 831:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 832:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 833:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 834:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 835:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 836:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 837:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 838:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 839:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 840:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 841:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 842:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 843:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 844:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 845:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 846:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 847:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 848:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 849:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 850:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 851:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 852:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 853:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 854:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 855:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 856:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 857:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 858:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 859:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 860:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 861:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 862:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 863:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 864:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 865:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 866:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 867:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 868:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 869:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 870:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 871:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 872:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 873:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 874:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 875:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 876:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 877:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 878:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 879:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 880:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 881:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 882:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 883:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 884:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 885:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 886:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 887:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 888:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 889:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 890:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 891:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 892:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 893:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 894:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 895:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 896:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 897:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 898:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 899:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 900:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 901:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 902:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 903:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 904:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 905:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 906:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 907:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 908:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 909:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 910:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 911:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 912:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 913:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 914:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
 915:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 916:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 917:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 918:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 919:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 920:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 921:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 922:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
 923:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 924:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 925:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 926:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
 927:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 928:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 929:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 930:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 931:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
 932:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
 933:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
 934:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 935:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
 936:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
 937:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 938:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 939:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 940:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 941:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 942:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
 943:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 944:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 945:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 946:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
 947:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 948:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 949:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
 950:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 951:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
 952:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 953:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
 954:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 955:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 956:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 957:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 958:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 959:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
 960:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
 961:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 962:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 963:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 964:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
 965:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
 966:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 967:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 968:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 969:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
 970:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 971:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
 972:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 973:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[0U] = data;
 974:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 975:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 976:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
 977:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 978:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 979:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
 980:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
 981:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
 982:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
 983:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 984:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
 985:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
 986:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
 987:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 988:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
 989:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 990:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
 991:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
 992:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
 993:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                              const uint16_t data,
 994:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                              const uint32_t transmit_control_information)
 995:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
 996:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
 997:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 998:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
 999:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1000:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1001:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1002:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1003:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
1004:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
1005:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1006:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1007:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1008:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1009:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1010:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1011:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1012:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1013:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1014:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1015:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1016:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1017:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1018:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1019:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1020:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1021:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1022:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1023:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
1024:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b Range: minimum= 1, maximum= 16. \n
1025:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *             e.g: For word length of 8, \a word_length should be provided as 8.
1026:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1027:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1028:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1029:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
1030:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
1031:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1032:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1033:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
1034:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1035:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetShiftDirection(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_
1036:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1037:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_SDIR_Msk)) | (uint32_t)shift_direction;
1038:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1039:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1040:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1041:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1042:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1043:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1044:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Captured counter value 
1045:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1046:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1047:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1048:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The value of the counter is captured if one of the trigger signals DX0T or DX1T are activated by
1049:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1050:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetCaptureTimerValue(const XMC_USIC_CH_t *const channel)
1051:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1052:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   return channel->CMTR;
1053:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1054:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1055:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1056:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1057:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1058:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  mode divider mode ::XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t \n
1059:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  step divider \n
1060:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL resulting divider = 1023 - step \n
1061:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *             \b XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL resulting divider = 1023 / step \n
1062:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1063:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1064:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1065:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1066:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The fractional divider generates its output frequency fFD by either dividing the input frequency
1067:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1068:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1069:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFractionalDivider(XMC_USIC_CH_t *const channel, const XMC_USIC_
1070:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1071:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FDR = mode | step;
1072:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1073:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1074:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1075:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1076:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1077:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1078:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1079:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1080:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1081:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1082:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1083:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Define the data frame length.\n\n
1084:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1085:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1086:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * has to be controlled explicitly. 
1087:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1088:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1089:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1090:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1091:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1092:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1093:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1094:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1095:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1096:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1097:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1098:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1099:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1100:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1101:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1102:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1103:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1104:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1105:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1106:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1107:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1108:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1109:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1110:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1111:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1112:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1113:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1114:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1115:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1116:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR |= event;
1117:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1118:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1119:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1120:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1121:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1122:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1123:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1124:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1125:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1126:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1127:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1128:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1129:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1130:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1131:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1132:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1133:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1134:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
1135:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1136:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1137:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1138:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1139:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1140:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1141:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1142:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1143:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1144:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1145:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1146:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request Service request number.\n
1147:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1148:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1149:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1150:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1151:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1152:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1153:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1154:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1155:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1156:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1157:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1158:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1159:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1160:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1161:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                          const uint32_t service_request);
1162:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1163:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1164:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1165:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1166:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1167:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1168:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1169:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1170:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1171:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1172:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1173:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1174:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1175:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1176:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1177:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1178:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1179:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1180:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1181:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
1182:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1183:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1184:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1185:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @brief API to get receive buffer status
1186:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1187:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1188:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1189:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1190:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1191:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1192:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1193:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1194:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1195:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1196:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1197:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1198:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1199:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * can be read from RBUF.
1200:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1201:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1202:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1203:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1204:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1205:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1206:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1207:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1208:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1209:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1210:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1211:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1212:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1213:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1214:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1215:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1216:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *                              
1217:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1218:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1219:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1220:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures data transmission. \n\n
1221:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1222:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1223:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1224:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1225:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1226:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1227:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1228:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1229:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1230:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1231:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1232:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1233:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1234:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1235:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1236:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1237:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1238:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1239:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1240:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1241:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1242:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1243:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1244:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1245:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1246:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1247:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1248:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1249:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1250:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1251:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1252:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1253:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1254:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1255:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1256:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1257:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1258:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1259:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1260:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1261:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1262:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1263:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * IN[x] register.
1264:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1265:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1266:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1267:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1268:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1269:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1270:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1271:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1272:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1273:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1274:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1275:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1276:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1277:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1278:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1279:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1280:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1281:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1282:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1283:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1284:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1285:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1286:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1287:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1288:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1289:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1290:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1291:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1292:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1293:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1294:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1295:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1296:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1297:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1298:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1299:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1300:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1301:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1302:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1303:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * for event driven transfer starts.
1304:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1305:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1306:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1307:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1308:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1309:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1310:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1311:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1312:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1313:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1314:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1315:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1316:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1317:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1318:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1319:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1320:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1321:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1322:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1323:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1324:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1325:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1326:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1327:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1328:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1329:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1330:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1331:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1332:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1333:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1334:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1335:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1336:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1337:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1338:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1339:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1340:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * generated if enabled. 
1341:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1342:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1343:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1344:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1345:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1346:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1347:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1348:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1349:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1350:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1351:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1352:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1353:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1354:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1355:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1356:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1357:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1358:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1359:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1360:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1361:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1362:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1363:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1364:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1365:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1366:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1367:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1368:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1369:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1370:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1371:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1372:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1373:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1374:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1375:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1376:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1377:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1378:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1379:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * configured passive level.
1380:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1381:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1382:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1383:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1384:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1385:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1386:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1387:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1388:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1389:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1390:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1391:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /* TX FIFO APIs */
1392:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1393:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1394:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1395:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1396:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1397:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1398:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1399:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1400:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1401:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1402:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1403:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1404:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1405:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1406:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1407:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1408:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1409:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1410:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1411:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1412:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1413:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1414:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1415:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1416:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1417:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1418:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1419:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1420:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1421:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1422:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1423:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1424:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1425:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1426:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1427:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1428:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1429:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1430:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1431:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1432:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1433:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1434:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1435:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1436:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1437:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1438:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1439:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1440:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1441:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1442:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1443:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1444:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1445:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1446:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1447:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1448:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1449:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1450:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1451:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1452:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1453:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1454:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1455:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1456:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1457:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1458:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1459:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1460:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1461:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR |= event;
1462:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1463:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1464:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1465:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1466:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1467:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1468:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1469:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1470:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1471:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1472:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1473:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1474:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1475:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1476:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1477:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1478:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1479:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1480:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1481:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1482:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1483:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1484:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1485:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1486:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1487:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1488:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1489:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1490:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1491:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1492:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1493:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1494:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1495:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1496:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1497:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1498:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1499:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1500:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1501:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1502:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1503:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1504:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1505:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1506:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1507:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1508:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1509:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1510:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1511:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1512:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1513:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1514:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1515:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1516:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1517:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1518:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1519:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1520:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1521:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1522:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1523:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1524:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1525:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1526:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1527:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1528:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1529:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1530:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1531:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[0] = data;
1532:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1533:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1534:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1535:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1536:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1537:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1538:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1539:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1540:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1541:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1542:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1543:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1544:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1545:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1546:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1547:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1548:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1549:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1550:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1551:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1552:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1553:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1554:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1555:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1556:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1557:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1558:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1559:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1560:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1561:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data Data to be transmitted.
1562:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1563:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1564:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1565:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1566:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1567:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1568:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1569:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1570:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1571:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1572:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1573:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1574:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1575:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1576:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint16_t data,
1577:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1578:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1579:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1580:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1581:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1582:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1583:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1584:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1585:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1586:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1587:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1588:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1589:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1590:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1591:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1592:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1593:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1594:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1595:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1596:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1597:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1598:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1599:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1600:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1601:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1602:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1603:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1604:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1605:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1606:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1607:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1608:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1609:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1610:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1611:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1612:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1613:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1614:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1615:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1616:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1617:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1618:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1619:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1620:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1621:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1622:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1623:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1624:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1625:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1626:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1627:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1628:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * FIFO empty flag is set.
1629:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1630:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1631:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1632:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1633:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1634:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1635:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1636:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1637:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1638:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1639:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1640:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1641:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1642:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1643:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1644:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1645:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1646:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1647:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level.
1648:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1649:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1650:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1651:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1652:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1653:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1654:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1655:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1656:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1657:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1658:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1659:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1660:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1661:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1662:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1663:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1664:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1665:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1666:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1667:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1668:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1669:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1670:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1671:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1672:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1673:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1674:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1675:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1676:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1677:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1678:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1679:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1680:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1681:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1682:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1683:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1684:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1685:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1686:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1687:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1688:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1689:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1690:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1691:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1692:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1693:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1694:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1695:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1696:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1697:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1698:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1699:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
1700:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1701:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1702:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1703:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1704:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1705:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1706:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1707:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1708:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1709:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1710:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1711:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1712:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1713:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1714:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1715:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1716:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1717:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1718:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1719:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1720:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1721:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1722:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1723:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1724:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1725:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** */
1726:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1727:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1728:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1729:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                   const uint32_t limit);
1730:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1731:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1732:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1733:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1734:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1735:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1736:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1737:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1738:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1739:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1740:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1741:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1742:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1743:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1744:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1745:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1746:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1747:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1748:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1749:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1750:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                             const uint32_t limit);
1751:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1752:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1753:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1754:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1755:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1756:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1757:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1758:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1759:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1760:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1761:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1762:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1763:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1764:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1765:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * must be enabled.
1766:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1767:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1768:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1769:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1770:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1771:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1772:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR |= event;
1773:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1774:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1775:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1776:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1777:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1778:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1779:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param event Events to be disabled. \n
1780:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1781:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1782:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1783:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1784:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1785:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1786:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1787:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1788:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1789:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1790:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1791:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1792:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1793:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1794:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1795:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1796:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
1797:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1798:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1799:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1800:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1801:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1802:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1803:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1804:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1805:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1806:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
1807:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1808:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1809:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1810:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1811:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1812:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1813:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1814:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1815:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1816:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1817:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1818:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1819:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1820:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1821:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1822:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1823:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1824:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1825:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                 const uint32_t service_request);
1826:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1827:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1828:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1829:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1830:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1831:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1832:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1833:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1834:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1835:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1836:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1837:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1838:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * until receive FIFO is empty.
1839:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1840:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1841:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1842:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1843:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1844:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1845:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1846:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1847:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1848:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1849:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1850:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1851:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1852:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1853:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1854:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1855:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1856:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1857:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1858:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1859:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1860:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1861:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1862:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
  75              	 .loc 2 1862 0
  76 0022 4FF48043 	 mov r3,#16384
  77 0026 C6F81831 	 str r3,[r6,#280]
  78              	.LVL6:
  79              	.LBE117:
  80              	.LBE116:
  81              	.LBB118:
  82              	.LBB119:
1052:../Dave/Generated/SPI_MASTER/spi_master.c ****     SPI_MASTER_lStdRBUFFlush(handle->channel);
1053:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1054:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Configure the FIFO trigger limit based on the required data size */
1055:../Dave/Generated/SPI_MASTER/spi_master.c ****     SPI_MASTER_lReconfigureRxFIFO(handle, runtime_handle->rx_data_count);
1056:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1057:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Enable the receive FIFO events */
1058:../Dave/Generated/SPI_MASTER/spi_master.c ****     XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
1059:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1060:../Dave/Generated/SPI_MASTER/spi_master.c ****   else
1061:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1062:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Flush the RBUF0 and RBUF1 */
1063:../Dave/Generated/SPI_MASTER/spi_master.c ****     SPI_MASTER_lStdRBUFFlush(handle->channel);
1064:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1065:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Enable the standard receive events */
1066:../Dave/Generated/SPI_MASTER/spi_master.c ****     XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
1067:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1068:../Dave/Generated/SPI_MASTER/spi_master.c ****   /* Call the transmit, to receive the data synchronously */
1069:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
1070:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1071:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
1072:../Dave/Generated/SPI_MASTER/spi_master.c **** }
1073:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1074:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
1075:../Dave/Generated/SPI_MASTER/spi_master.c ****  * Receive interrupt handler for the APP.
1076:../Dave/Generated/SPI_MASTER/spi_master.c ****  * This is a common interrupt handling function for different instances of the SPI_MASTER APP.
1077:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
1078:../Dave/Generated/SPI_MASTER/spi_master.c **** void SPI_MASTER_lReceiveHandler(const SPI_MASTER_t * const handle)
1079:../Dave/Generated/SPI_MASTER/spi_master.c **** {
1080:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint16_t data; /* Data to be loaded into the TBUF */
1081:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and
1082:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
1083:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1084:../Dave/Generated/SPI_MASTER/spi_master.c ****   data = 0U;
1085:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1086:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
1087:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1088:../Dave/Generated/SPI_MASTER/spi_master.c ****     bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
1089:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1090:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1091:../Dave/Generated/SPI_MASTER/spi_master.c ****   if ((uint32_t)handle->config->rx_fifo_size > 0U)
1092:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1093:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* read the FIFO */
1094:../Dave/Generated/SPI_MASTER/spi_master.c ****     SPI_MASTER_lFIFORead(handle, bytes_per_word);
1095:../Dave/Generated/SPI_MASTER/spi_master.c ****     /*Set the trigger limit if data still to be received*/
1096:../Dave/Generated/SPI_MASTER/spi_master.c ****     if ((runtime_handle->rx_data_count - runtime_handle->rx_data_index) <= ((uint32_t)0x01 << (hand
1097:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1098:../Dave/Generated/SPI_MASTER/spi_master.c ****       SPI_MASTER_lReconfigureRxFIFO(handle, \
1099:../Dave/Generated/SPI_MASTER/spi_master.c ****                                (uint32_t)(runtime_handle->rx_data_count - runtime_handle->rx_data_i
1100:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1101:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1102:../Dave/Generated/SPI_MASTER/spi_master.c ****   else
1103:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1104:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* When RxFIFO is disabled */
1105:../Dave/Generated/SPI_MASTER/spi_master.c ****     if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DA
1106:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1107:../Dave/Generated/SPI_MASTER/spi_master.c ****       if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
1108:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1109:../Dave/Generated/SPI_MASTER/spi_master.c ****         data = XMC_SPI_CH_GetReceivedData(handle->channel);
1110:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1111:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
1112:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1113:../Dave/Generated/SPI_MASTER/spi_master.c ****         if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
1114:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
1115:../Dave/Generated/SPI_MASTER/spi_master.c ****           runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >>
1116:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
1117:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1118:../Dave/Generated/SPI_MASTER/spi_master.c ****         (runtime_handle->rx_data_index)+= bytes_per_word;
1119:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1120:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1121:../Dave/Generated/SPI_MASTER/spi_master.c ****     if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DA
1122:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1123:../Dave/Generated/SPI_MASTER/spi_master.c ****       if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
1124:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1125:../Dave/Generated/SPI_MASTER/spi_master.c ****         data = XMC_SPI_CH_GetReceivedData(handle->channel);
1126:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1127:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
1128:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1129:../Dave/Generated/SPI_MASTER/spi_master.c ****         if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
1130:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
1131:../Dave/Generated/SPI_MASTER/spi_master.c ****           runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >>
1132:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
1133:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1134:../Dave/Generated/SPI_MASTER/spi_master.c ****         (runtime_handle->rx_data_index)+= bytes_per_word;
1135:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1136:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1137:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1138:../Dave/Generated/SPI_MASTER/spi_master.c ****     if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
1139:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1140:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Disable both standard receive and alternative receive FIFO events */
1141:../Dave/Generated/SPI_MASTER/spi_master.c ****       if ((uint32_t)handle->config->rx_fifo_size > 0U)
1142:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1143:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Enable the receive FIFO events */
1144:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
1145:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1146:../Dave/Generated/SPI_MASTER/spi_master.c ****       else
1147:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1148:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_SPI_CH_DisableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
1149:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1150:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Reception complete */
1151:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_busy = false;
1152:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_data_dummy = false;
1153:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_data_dummy = true;
1154:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_data = NULL;
1155:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1156:../Dave/Generated/SPI_MASTER/spi_master.c ****       if (handle->config->rx_cbhandler != NULL)
1157:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1158:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Execute the 'End of reception' callback function */
1159:../Dave/Generated/SPI_MASTER/spi_master.c ****         handle->config->rx_cbhandler();
1160:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1161:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1162:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1163:../Dave/Generated/SPI_MASTER/spi_master.c **** }
1164:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1165:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
1166:../Dave/Generated/SPI_MASTER/spi_master.c ****  * Read the data from FIFO until it becomes empty.
1167:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
1168:../Dave/Generated/SPI_MASTER/spi_master.c **** void SPI_MASTER_lFIFORead(const SPI_MASTER_t * const handle, const uint32_t bytes_per_word)
1169:../Dave/Generated/SPI_MASTER/spi_master.c **** {
1170:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_RUNTIME_t * runtime_handle;
1171:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint16_t data;
1172:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1173:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle = handle->runtime;
1174:../Dave/Generated/SPI_MASTER/spi_master.c ****   data = 0U;
1175:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1176:../Dave/Generated/SPI_MASTER/spi_master.c ****   /* When Receive FIFO is enabled*/
1177:../Dave/Generated/SPI_MASTER/spi_master.c ****   while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
1178:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1179:../Dave/Generated/SPI_MASTER/spi_master.c ****     if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
1180:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1181:../Dave/Generated/SPI_MASTER/spi_master.c ****       data = XMC_SPI_CH_GetReceivedData(handle->channel);
1182:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
1183:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1184:../Dave/Generated/SPI_MASTER/spi_master.c ****       if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
1185:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1186:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8
1187:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1188:../Dave/Generated/SPI_MASTER/spi_master.c ****       (runtime_handle->rx_data_index)+= bytes_per_word;
1189:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1190:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1191:../Dave/Generated/SPI_MASTER/spi_master.c ****     if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
1192:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1193:../Dave/Generated/SPI_MASTER/spi_master.c ****       /*Reception complete*/
1194:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_busy = false;
1195:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_data_dummy = false;
1196:../Dave/Generated/SPI_MASTER/spi_master.c ****       /*Disable both standard receive and alternative receive FIFO events*/
1197:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
1198:../Dave/Generated/SPI_MASTER/spi_master.c ****       if (handle->config->rx_cbhandler != NULL)
1199:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1200:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Execute the 'End of reception' callback function */
1201:../Dave/Generated/SPI_MASTER/spi_master.c ****         handle->config->rx_cbhandler();
1202:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1203:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
1204:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1205:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1206:../Dave/Generated/SPI_MASTER/spi_master.c **** }
1207:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1208:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
1209:../Dave/Generated/SPI_MASTER/spi_master.c ****  * This function configures the FIFO settings
1210:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
1211:../Dave/Generated/SPI_MASTER/spi_master.c **** static void SPI_MASTER_lReconfigureRxFIFO(const SPI_MASTER_t * const handle, uint32_t data_size)
1212:../Dave/Generated/SPI_MASTER/spi_master.c **** {
1213:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint32_t fifo_size;
1214:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint32_t ret_limit_val;
1215:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1216:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
1217:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1218:../Dave/Generated/SPI_MASTER/spi_master.c ****     fifo_size = (uint32_t)0x01 << handle->config->rx_fifo_size;
1219:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1220:../Dave/Generated/SPI_MASTER/spi_master.c ****     if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
1221:../Dave/Generated/SPI_MASTER/spi_master.c **** 	{
1222:../Dave/Generated/SPI_MASTER/spi_master.c **** 	  /* Data size is divided by 2, to change the trigger limit according the word length */
1223:../Dave/Generated/SPI_MASTER/spi_master.c **** 	  data_size = (uint32_t)data_size >> 1U;
1224:../Dave/Generated/SPI_MASTER/spi_master.c **** 	}
1225:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1226:../Dave/Generated/SPI_MASTER/spi_master.c **** 	/*If data size is more than FIFO size, configure the limit to the FIFO size*/
1227:../Dave/Generated/SPI_MASTER/spi_master.c **** 	if (data_size < (fifo_size >> 1))
1228:../Dave/Generated/SPI_MASTER/spi_master.c **** 	{
1229:../Dave/Generated/SPI_MASTER/spi_master.c **** 	  ret_limit_val = data_size - 1U;
1230:../Dave/Generated/SPI_MASTER/spi_master.c **** 	}
1231:../Dave/Generated/SPI_MASTER/spi_master.c **** 	else
1232:../Dave/Generated/SPI_MASTER/spi_master.c **** 	{
1233:../Dave/Generated/SPI_MASTER/spi_master.c **** 	  ret_limit_val = fifo_size >> 1;
1234:../Dave/Generated/SPI_MASTER/spi_master.c **** 	}
1235:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1236:../Dave/Generated/SPI_MASTER/spi_master.c **** 	/*Set the limit value*/
1237:../Dave/Generated/SPI_MASTER/spi_master.c **** 	XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, ret_limit_va
1238:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1239:../Dave/Generated/SPI_MASTER/spi_master.c **** }
1240:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
1241:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1242:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_DIRECT_RECEIVE_MODE == 1U)
1243:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_lReceivePolling(const SPI_MASTER_t *const handle, uint32_t count)
1244:../Dave/Generated/SPI_MASTER/spi_master.c **** {
1245:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_RUNTIME_t * runtime_handle;
1246:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and
1247:../Dave/Generated/SPI_MASTER/spi_master.c ****                                                            Specify the number of bytes for the conf
1248:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint16_t data;
1249:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1250:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle = handle->runtime;
1251:../Dave/Generated/SPI_MASTER/spi_master.c ****   data = 0U;
1252:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle->rx_data_index = 0U;
1253:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle->tx_data_index = 0U;
1254:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1255:../Dave/Generated/SPI_MASTER/spi_master.c ****   if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
1256:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1257:../Dave/Generated/SPI_MASTER/spi_master.c ****     bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
1258:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1259:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1260:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);
1261:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1262:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
1263:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1264:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Check if FIFO is enabled */
1265:../Dave/Generated/SPI_MASTER/spi_master.c ****   if ((uint32_t)handle->config->rx_fifo_size > 0U)
1266:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1267:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Clear the receive FIFO */
1268:../Dave/Generated/SPI_MASTER/spi_master.c ****     XMC_USIC_CH_RXFIFO_Flush(handle->channel);
1269:../Dave/Generated/SPI_MASTER/spi_master.c ****     SPI_MASTER_lStdRBUFFlush(handle->channel);
1270:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1271:../Dave/Generated/SPI_MASTER/spi_master.c ****     if (runtime_handle->tx_data_dummy == true)
1272:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1273:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_mas
1274:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1275:../Dave/Generated/SPI_MASTER/spi_master.c ****     else
1276:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1277:../Dave/Generated/SPI_MASTER/spi_master.c ****       if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
1278:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1279:../Dave/Generated/SPI_MASTER/spi_master.c ****         data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
1280:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1281:../Dave/Generated/SPI_MASTER/spi_master.c ****       else
1282:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1283:../Dave/Generated/SPI_MASTER/spi_master.c ****         data = runtime_handle->tx_data[runtime_handle->tx_data_index];
1284:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1285:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master
1286:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1287:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1288:../Dave/Generated/SPI_MASTER/spi_master.c ****     (runtime_handle->tx_data_index)+= bytes_per_word;
1289:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1290:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1291:../Dave/Generated/SPI_MASTER/spi_master.c ****     while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
1292:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1293:../Dave/Generated/SPI_MASTER/spi_master.c ****       if (runtime_handle->tx_data_dummy == true)
1294:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1295:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_m
1296:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1297:../Dave/Generated/SPI_MASTER/spi_master.c ****       else
1298:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1299:../Dave/Generated/SPI_MASTER/spi_master.c ****         if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
1300:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
1301:../Dave/Generated/SPI_MASTER/spi_master.c ****           data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
1302:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
1303:../Dave/Generated/SPI_MASTER/spi_master.c ****         else
1304:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
1305:../Dave/Generated/SPI_MASTER/spi_master.c ****           data = runtime_handle->tx_data[runtime_handle->tx_data_index];
1306:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
1307:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_mast
1308:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1309:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1310:../Dave/Generated/SPI_MASTER/spi_master.c ****       while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
1311:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1312:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1313:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1314:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1315:../Dave/Generated/SPI_MASTER/spi_master.c ****       data = XMC_SPI_CH_GetReceivedData(handle->channel);
1316:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1317:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
1318:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1319:../Dave/Generated/SPI_MASTER/spi_master.c ****       if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
1320:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1321:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8
1322:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1323:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1324:../Dave/Generated/SPI_MASTER/spi_master.c ****       (runtime_handle->rx_data_index)+= bytes_per_word;
1325:../Dave/Generated/SPI_MASTER/spi_master.c ****       (runtime_handle->tx_data_index)+= bytes_per_word;
1326:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1327:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1328:../Dave/Generated/SPI_MASTER/spi_master.c ****     while(XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == true)
1329:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1330:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1331:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1332:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1333:../Dave/Generated/SPI_MASTER/spi_master.c ****     data = XMC_SPI_CH_GetReceivedData(handle->channel);
1334:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1335:../Dave/Generated/SPI_MASTER/spi_master.c ****     runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
1336:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1337:../Dave/Generated/SPI_MASTER/spi_master.c ****     if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
1338:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1339:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
1340:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1341:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1342:../Dave/Generated/SPI_MASTER/spi_master.c ****     XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, SPI_MASTER_FIFO_RECEIVE_INDICATION_FLAG);
1343:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1344:../Dave/Generated/SPI_MASTER/spi_master.c ****   else
1345:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1346:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Flush the RBUF0 and RBUF1 */
1347:../Dave/Generated/SPI_MASTER/spi_master.c ****     SPI_MASTER_lStdRBUFFlush(handle->channel);
1348:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1349:../Dave/Generated/SPI_MASTER/spi_master.c ****     while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH_T
1350:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1351:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1352:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1353:../Dave/Generated/SPI_MASTER/spi_master.c ****     if (runtime_handle->tx_data_dummy == true)
1354:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1355:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mod
1356:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1357:../Dave/Generated/SPI_MASTER/spi_master.c ****     else
1358:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1359:../Dave/Generated/SPI_MASTER/spi_master.c ****       if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
1360:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1361:../Dave/Generated/SPI_MASTER/spi_master.c ****         data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
1362:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1363:../Dave/Generated/SPI_MASTER/spi_master.c ****       else
1364:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1365:../Dave/Generated/SPI_MASTER/spi_master.c ****         data = runtime_handle->tx_data[runtime_handle->tx_data_index];
1366:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1367:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
1368:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1369:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1370:../Dave/Generated/SPI_MASTER/spi_master.c ****     (runtime_handle->tx_data_index)+= bytes_per_word;
1371:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1372:../Dave/Generated/SPI_MASTER/spi_master.c ****     while (runtime_handle->tx_data_index < runtime_handle->rx_data_count)
1373:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1374:../Dave/Generated/SPI_MASTER/spi_master.c ****       while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == (uint32_t)XMC_USIC_CH
1375:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1376:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1377:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1378:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1379:../Dave/Generated/SPI_MASTER/spi_master.c ****       if (runtime_handle->tx_data_dummy == true)
1380:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1381:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_m
1382:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1383:../Dave/Generated/SPI_MASTER/spi_master.c ****       else
1384:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1385:../Dave/Generated/SPI_MASTER/spi_master.c ****         if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
1386:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
1387:../Dave/Generated/SPI_MASTER/spi_master.c ****           data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
1388:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
1389:../Dave/Generated/SPI_MASTER/spi_master.c ****         else
1390:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
1391:../Dave/Generated/SPI_MASTER/spi_master.c ****           data = runtime_handle->tx_data[runtime_handle->tx_data_index];
1392:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
1393:../Dave/Generated/SPI_MASTER/spi_master.c ****         XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode
1394:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1395:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1396:../Dave/Generated/SPI_MASTER/spi_master.c ****       while (XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) == 0U)
1397:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1398:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1399:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1400:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1401:../Dave/Generated/SPI_MASTER/spi_master.c ****       data = XMC_SPI_CH_GetReceivedData(handle->channel);
1402:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1403:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
1404:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1405:../Dave/Generated/SPI_MASTER/spi_master.c ****       if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
1406:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
1407:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8
1408:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
1409:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1410:../Dave/Generated/SPI_MASTER/spi_master.c ****       (runtime_handle->rx_data_index)+= bytes_per_word;
1411:../Dave/Generated/SPI_MASTER/spi_master.c ****       (runtime_handle->tx_data_index)+= bytes_per_word;
1412:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1413:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
1414:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1415:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1416:../Dave/Generated/SPI_MASTER/spi_master.c ****     while (XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) == 0U)
1417:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1418:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1419:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1420:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1421:../Dave/Generated/SPI_MASTER/spi_master.c ****     data = XMC_SPI_CH_GetReceivedData(handle->channel);
1422:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1423:../Dave/Generated/SPI_MASTER/spi_master.c ****     runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
1424:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1425:../Dave/Generated/SPI_MASTER/spi_master.c ****     if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
1426:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1427:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
1428:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1429:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1430:../Dave/Generated/SPI_MASTER/spi_master.c ****     XMC_SPI_CH_ClearStatusFlag(handle->channel, SPI_MASTER_RECEIVE_INDICATION_FLAG);
1431:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1432:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle->rx_data_count = 0U;
1433:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle->rx_data_index = 0U;
1434:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle->tx_data_index = 0U;
1435:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1436:../Dave/Generated/SPI_MASTER/spi_master.c ****   return SPI_MASTER_STATUS_SUCCESS;
1437:../Dave/Generated/SPI_MASTER/spi_master.c **** }
1438:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
1439:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1440:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
1441:../Dave/Generated/SPI_MASTER/spi_master.c **** SPI_MASTER_STATUS_t SPI_MASTER_lReceiveDMA(const SPI_MASTER_t *const handle, uint32_t block_size)
1442:../Dave/Generated/SPI_MASTER/spi_master.c **** {
1443:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
1444:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_RUNTIME_t * runtime_handle;
1445:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1446:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle = handle->runtime;
1447:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle->rx_data_index = 0U;
1448:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle->rx_data_count = (uint32_t)block_size;
1449:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1450:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_lStdRBUFFlush(handle->channel);
1451:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1452:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
1453:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1454:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_rx_number, runtime_handle->rx_dat
1455:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1456:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma,
1457:../Dave/Generated/SPI_MASTER/spi_master.c ****                               handle->dma_ch_rx_number,
1458:../Dave/Generated/SPI_MASTER/spi_master.c ****                               (uint32_t)&(handle->channel->RBUF));
1459:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1460:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma, handle->dma_ch_rx_number, (uint32_t)run
1461:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1462:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = SPI_MASTER_STATUS_SUCCESS;
1463:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1464:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_rx_number);
1465:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1466:../Dave/Generated/SPI_MASTER/spi_master.c ****   /* Call the transmit, to receive the data synchronously */
1467:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
1468:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1469:../Dave/Generated/SPI_MASTER/spi_master.c ****   return status;
1470:../Dave/Generated/SPI_MASTER/spi_master.c **** }
1471:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
1472:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1473:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
1474:../Dave/Generated/SPI_MASTER/spi_master.c ****  * Clears the receive buffers
1475:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
1476:../Dave/Generated/SPI_MASTER/spi_master.c **** static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
1477:../Dave/Generated/SPI_MASTER/spi_master.c **** {
1478:../Dave/Generated/SPI_MASTER/spi_master.c ****   /* Clear RBF0 */
1479:../Dave/Generated/SPI_MASTER/spi_master.c ****   (void)XMC_SPI_CH_GetReceivedData(channel);
  83              	 .loc 1 1479 0
  84 002a 3046     	 mov r0,r6
  85 002c FFF7FEFF 	 bl XMC_SPI_CH_GetReceivedData
  86              	.LVL7:
1480:../Dave/Generated/SPI_MASTER/spi_master.c ****   /* Clear RBF1 */
1481:../Dave/Generated/SPI_MASTER/spi_master.c ****   (void)XMC_SPI_CH_GetReceivedData(channel);
  87              	 .loc 1 1481 0
  88 0030 3046     	 mov r0,r6
  89 0032 FFF7FEFF 	 bl XMC_SPI_CH_GetReceivedData
  90              	.LVL8:
  91              	.LBE119:
  92              	.LBE118:
  93              	.LBB120:
  94              	.LBB121:
1216:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
  95              	 .loc 1 1216 0
  96 0036 6368     	 ldr r3,[r4,#4]
  97              	.LBE121:
  98              	.LBE120:
1055:../Dave/Generated/SPI_MASTER/spi_master.c **** 
  99              	 .loc 1 1055 0
 100 0038 E868     	 ldr r0,[r5,#12]
 101              	.LVL9:
 102              	.LBB124:
 103              	.LBB122:
1216:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 104              	 .loc 1 1216 0
 105 003a 93F87D10 	 ldrb r1,[r3,#125]
 106 003e 29B3     	 cbz r1,.L13
 107 0040 20B3     	 cbz r0,.L13
1220:../Dave/Generated/SPI_MASTER/spi_master.c **** 	{
 108              	 .loc 1 1220 0
 109 0042 A368     	 ldr r3,[r4,#8]
 110 0044 1B68     	 ldr r3,[r3]
1218:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 111              	 .loc 1 1218 0
 112 0046 0122     	 movs r2,#1
 113 0048 8A40     	 lsls r2,r2,r1
 114              	.LVL10:
1220:../Dave/Generated/SPI_MASTER/spi_master.c **** 	{
 115              	 .loc 1 1220 0
 116 004a 082B     	 cmp r3,#8
1223:../Dave/Generated/SPI_MASTER/spi_master.c **** 	}
 117              	 .loc 1 1223 0
 118 004c 88BF     	 it hi
 119 004e 4008     	 lsrhi r0,r0,#1
 120              	.LVL11:
1227:../Dave/Generated/SPI_MASTER/spi_master.c **** 	{
 121              	 .loc 1 1227 0
 122 0050 5208     	 lsrs r2,r2,#1
 123              	.LVL12:
 124 0052 8242     	 cmp r2,r0
1229:../Dave/Generated/SPI_MASTER/spi_master.c **** 	}
 125              	 .loc 1 1229 0
 126 0054 88BF     	 it hi
 127 0056 00F1FF32 	 addhi r2,r0,#-1
 128              	.LVL13:
1237:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 129              	 .loc 1 1237 0
 130 005a 2068     	 ldr r0,[r4]
 131              	.LVL14:
 132 005c FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit
 133              	.LVL15:
 134 0060 6168     	 ldr r1,[r4,#4]
 135 0062 14E0     	 b .L3
 136              	.LVL16:
 137              	.L2:
 138              	.LBE122:
 139              	.LBE124:
 140              	.LBB125:
 141              	.LBB126:
1479:../Dave/Generated/SPI_MASTER/spi_master.c ****   /* Clear RBF1 */
 142              	 .loc 1 1479 0
 143 0064 3046     	 mov r0,r6
 144 0066 FFF7FEFF 	 bl XMC_SPI_CH_GetReceivedData
 145              	.LVL17:
 146              	 .loc 1 1481 0
 147 006a 3046     	 mov r0,r6
 148 006c FFF7FEFF 	 bl XMC_SPI_CH_GetReceivedData
 149              	.LVL18:
 150              	.LBE126:
 151              	.LBE125:
1066:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 152              	 .loc 1 1066 0
 153 0070 2368     	 ldr r3,[r4]
 154              	.LVL19:
 155 0072 6168     	 ldr r1,[r4,#4]
 156              	.LBB127:
 157              	.LBB128:
1116:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 158              	 .loc 2 1116 0
 159 0074 1A6C     	 ldr r2,[r3,#64]
 160              	.LBE128:
 161              	.LBE127:
1069:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 162              	 .loc 1 1069 0
 163 0076 AE69     	 ldr r6,[r5,#24]
 164              	.LVL20:
 165 0078 6868     	 ldr r0,[r5,#4]
 166              	.LVL21:
 167              	.LBB130:
 168              	.LBB129:
1116:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 169              	 .loc 2 1116 0
 170 007a 42F44042 	 orr r2,r2,#49152
 171 007e 1A64     	 str r2,[r3,#64]
 172 0080 1A46     	 mov r2,r3
 173              	.LBE129:
 174              	.LBE130:
 175              	.LBB131:
 176              	.LBB132:
 296:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 177              	 .loc 1 296 0
 178 0082 91F88430 	 ldrb r3,[r1,#132]
 179              	.LVL22:
 180 0086 83B1     	 cbz r3,.L11
 181              	.LVL23:
 182              	.L20:
 293:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 183              	 .loc 1 293 0
 184 0088 0120     	 movs r0,#1
 185              	.LVL24:
 186              	.LBE132:
 187              	.LBE131:
1072:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 188              	 .loc 1 1072 0
 189 008a F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 190              	.LVL25:
 191              	.L13:
 192              	.LBB158:
 193              	.LBB123:
1216:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 194              	 .loc 1 1216 0
 195 008c 1946     	 mov r1,r3
 196              	.LVL26:
 197              	.L3:
 198              	.LBE123:
 199              	.LBE158:
1058:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 200              	 .loc 1 1058 0
 201 008e 2368     	 ldr r3,[r4]
 202              	.LVL27:
1069:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 203              	 .loc 1 1069 0
 204 0090 AE69     	 ldr r6,[r5,#24]
 205              	.LVL28:
 206              	.LBB159:
 207              	.LBB160:
1772:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 208              	 .loc 2 1772 0
 209 0092 D3F80C21 	 ldr r2,[r3,#268]
 210              	.LBE160:
 211              	.LBE159:
1069:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 212              	 .loc 1 1069 0
 213 0096 6868     	 ldr r0,[r5,#4]
 214              	.LVL29:
 215              	.LBB162:
 216              	.LBB161:
1772:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 217              	 .loc 2 1772 0
 218 0098 42F0C042 	 orr r2,r2,#1610612736
 219 009c C3F80C21 	 str r2,[r3,#268]
 220 00a0 1A46     	 mov r2,r3
 221              	.LBE161:
 222              	.LBE162:
 223              	.LBB163:
 224              	.LBB157:
 296:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 225              	 .loc 1 296 0
 226 00a2 91F88430 	 ldrb r3,[r1,#132]
 227              	.LVL30:
 228 00a6 002B     	 cmp r3,#0
 229 00a8 EED1     	 bne .L20
 230              	.LVL31:
 231              	.L11:
 232              	.LBB133:
 233              	.LBB134:
 363:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 234              	 .loc 1 363 0
 235 00aa A468     	 ldr r4,[r4,#8]
 236              	.LVL32:
 368:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 237              	 .loc 1 368 0
 238 00ac 06B1     	 cbz r6,.L18
 239 00ae 08B9     	 cbnz r0,.L21
 240              	.L18:
 406:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 241              	 .loc 1 406 0
 242 00b0 0320     	 movs r0,#3
 243              	.LVL33:
 244 00b2 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 245              	.LVL34:
 246              	.L21:
 372:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 247              	 .loc 1 372 0
 248 00b4 94F82030 	 ldrb r3,[r4,#32]
 249 00b8 03F0FF05 	 and r5,r3,#255
 250              	.LVL35:
 251 00bc 0BB1     	 cbz r3,.L22
 370:../Dave/Generated/SPI_MASTER/spi_master.c ****       /*Check data pointer is valid or not*/
 252              	 .loc 1 370 0
 253 00be 0220     	 movs r0,#2
 254              	.LVL36:
 255 00c0 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 256              	.LVL37:
 257              	.L22:
 374:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 258              	 .loc 1 374 0
 259 00c2 2368     	 ldr r3,[r4]
 387:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 260              	 .loc 1 387 0
 261 00c4 91F87C70 	 ldrb r7,[r1,#124]
 383:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_busy = true;
 262              	 .loc 1 383 0
 263 00c8 A560     	 str r5,[r4,#8]
 374:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 264              	 .loc 1 374 0
 265 00ca 082B     	 cmp r3,#8
 266 00cc 94BF     	 ite ls
 267 00ce 0023     	 movls r3,#0
 268 00d0 0123     	 movhi r3,#1
 269              	.LVL38:
 381:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Initialize to first index and set the busy flag */
 270              	 .loc 1 381 0
 271 00d2 9840     	 lsls r0,r0,r3
 272              	.LVL39:
 384:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 273              	 .loc 1 384 0
 274 00d4 0123     	 movs r3,#1
 380:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 275              	 .loc 1 380 0
 276 00d6 A661     	 str r6,[r4,#24]
 381:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Initialize to first index and set the busy flag */
 277              	 .loc 1 381 0
 278 00d8 6060     	 str r0,[r4,#4]
 384:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 279              	 .loc 1 384 0
 280 00da 84F82030 	 strb r3,[r4,#32]
 387:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 281              	 .loc 1 387 0
 282 00de D7B1     	 cbz r7,.L8
 283              	.LVL40:
 284              	.LBB135:
 285              	.LBB136:
1596:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 286              	 .loc 2 1596 0
 287 00e0 4FF40043 	 mov r3,#32768
 288 00e4 C2F81831 	 str r3,[r2,#280]
 289              	.LVL41:
 290              	.LBE136:
 291              	.LBE135:
 292              	.LBB137:
 293              	.LBB138:
1461:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 294              	 .loc 2 1461 0
 295 00e8 D2F80831 	 ldr r3,[r2,#264]
 296 00ec 43F08043 	 orr r3,r3,#1073741824
 297 00f0 C2F80831 	 str r3,[r2,#264]
 298              	.LVL42:
 299              	.L9:
 300              	.LBE138:
 301              	.LBE137:
 397:../Dave/Generated/SPI_MASTER/spi_master.c ****         status = SPI_MASTER_STATUS_SUCCESS;
 302              	 .loc 1 397 0
 303 00f4 207F     	 ldrb r0,[r4,#28]
 304              	.LVL43:
 305              	.LBB139:
 306              	.LBB140:
 307              	 .file 3 "C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc/xmc_spi.h"
   1:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
   2:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @file xmc_spi.h
   3:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @date 2016-05-20
   4:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
   5:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @cond
   6:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
   7:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMClib v2.1.16 - XMC Peripheral Driver Library 
   8:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
   9:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * All rights reserved.                        
  11:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *                                             
  12:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * following conditions are met:   
  14:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *                                                                              
  15:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * disclaimer.                        
  17:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 
  18:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 
  21:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *                                                                              
  24:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *                                                                              
  32:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
  35:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
  36:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Change History
  37:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * --------------
  38:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
  39:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-02-20:
  40:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Initial
  41:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *   
  42:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-05-20:
  43:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Documentation improved <br>
  44:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetSlaveSelectDelay(), XMC_SPI_CH_TriggerServiceRequest() and 
  45:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *       XMC_SPI_CH_SelectInterruptNodePointer() <br>
  46:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetInterwordDelaySCLK() <br>
  47:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
  48:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-06-20:
  49:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  50:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
  51:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-08-24:
  52:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_SPI_CH_DisableDelayCompensation()
  53:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *       XMC_SPI_CH_EnableDelayCompensation() <br>
  54:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
  55:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-08-27:
  56:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added APIs for external input for BRG configuration:XMC_SPI_CH_ConfigExternalInputSignalTo
  57:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
  58:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-09-01:
  59:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Modified XMC_SPI_CH_SetInputSource() for avoiding complete DXCR register overwriting. <br>
  60:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Modified XMC_SPI_CH_EVENT_t enum for supporting XMC_SPI_CH_EnableEvent() and XMC_SPI_CH_Di
  61:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *       for supporting multiple events configuration <br>
  62:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
  63:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 2015-09-08:
  64:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Adding API for configuring the receiving clock phase in the slave:XMC_SPI_CH_DataLatchedIn
  65:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
  66:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 2016-04-10:
  67:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added an API for configuring the transmit mode:XMC_SPI_CH_SetTransmitMode() <br>
  68:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
  69:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 2016-05-20:
  70:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_EnableDataTransmission() and XMC_SPI_CH_DisableDataTransmission()
  71:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 
  72:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @endcond 
  73:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
  74:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
  75:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
  76:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #ifndef XMC_SPI_H
  77:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI_H
  78:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
  79:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
  80:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * HEADER FILES
  81:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
  82:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #include "xmc_usic.h"
  83:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
  84:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
  85:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @addtogroup XMClib XMC Peripheral Library
  86:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @{
  87:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
  88:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
  89:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
  90:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @addtogroup SPI
  91:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @brief Synchronous serial channel driver for SPI-like communication.
  92:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 
  93:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * The SPI driver uses Universal Serial Interface Channel(USIC) module. 
  94:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * The USIC module supports multiple data lines for SPI communication. \n
  95:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Full duplex communication with 2 separate lines for transmission and reception.
  96:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Half duplex communication with 1 common line shared for transmission and reception.
  97:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Dual mode communication with 2 common lines shared for transmission and reception.
  98:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Quad mode communication with 4 common lines shared for transmission and reception.<br><br>
  99:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 100:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI driver provides structures, enumerations and APIs for configuring the USIC channel for SPI c
 101:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * and also for data transaction.<br>
 102:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI driver features:
 103:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Configuration structure XMC_SPI_CH_CONFIG_t and SPI initialization function XMC_SPI_CH_Init()
 104:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Allows configuration of protocol word and frame length using XMC_SPI_CH_SetWordLength(), XMC_
 105:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Allows manipulation of data frame at runtime using XMC_SPI_CH_EnableSOF(), XMC_SPI_CH_EnableE
 106:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  XMC_SPI_CH_EnableSlaveSelect(), XMC_SPI_CH_DisableSlaveSelect()
 107:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Provides APIs for transmitting data and receiving data using XMC_SPI_CH_Transmit(), XMC_SPI_C
 108:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Allows configuration of shift clock using XMC_SPI_CH_ConfigureShiftClockOutput()
 109:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * -# Provides enumeration of SPI protocol events using @ref XMC_SPI_CH_STATUS_FLAG_t
 110:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @{
 111:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 112:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 113:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 114:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * MACROS
 115:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 116:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 117:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #if defined(USIC0)
 118:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI0_CH0 XMC_USIC0_CH0 /**< SPI0 channel 0 base address */
 119:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI0_CH1 XMC_USIC0_CH1 /**< SPI0 channel 1 base address */
 120:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 121:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 122:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #if defined(USIC1)
 123:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI1_CH0 XMC_USIC1_CH0 /**< SPI1 channel 0 base address */
 124:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI1_CH1 XMC_USIC1_CH1 /**< SPI1 channel 1 base address */
 125:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 126:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 127:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #if defined(USIC2)
 128:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI2_CH0 XMC_USIC2_CH0 /**< SPI2 channel 0 base address */
 129:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #define XMC_SPI2_CH1 XMC_USIC2_CH1 /**< SPI2 channel 1 base address */
 130:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 131:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 132:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 133:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * ENUMS
 134:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 135:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 136:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 137:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines return status of SPI driver APIs
 138:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 139:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS
 140:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 141:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_OK,    /**< Status of the Module: OK */
 142:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_ERROR, /**< Status of the Module: ERROR */
 143:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_BUSY   /**< The Module is busy */
 144:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_STATUS_t;
 145:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 146:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines the SPI bus mode
 147:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 148:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BUS_MODE
 149:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 150:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_MASTER, /**< SPI Master */
 151:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_SLAVE   /**< SPI Slave */
 152:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_BUS_MODE_t;
 153:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 154:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 155:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines the Polarity of the slave select signals SELO[7:0] in relation to the master slave selec
 156:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 157:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SEL_MSLS_INV
 158:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 159:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_SAME_AS_MSLS = 0x0UL, /**< The SELO outputs have the same polarity as the MS
 160:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                   (active high) */
 161:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_INV_TO_MSLS = 0x1UL << USIC_CH_PCR_SSCMode_SELINV_Pos /**< The SELO outputs 
 162:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                   polarity to the M
 163:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                   (active low)*/
 164:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t;
 165:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 166:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 167:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines the Polarity of the data inputs.
 168:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 169:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_DATA_POLARITY
 170:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 171:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_DIRECT = 0x0UL, /**< The polarity of the data line is not inverted */
 172:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_INVERT = 0x1UL << USIC_CH_DX2CR_DPOL_Pos /**< The polarity of the data l
 173:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_DATA_POLARITY_t;
 174:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 175:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 176:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines Slave Select lines
 177:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 178:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SELECT
 179:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 180:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_0 = 1UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 0 */
 181:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_1 = 2UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 1 */
 182:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_2 = 4UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 2 */
 183:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_3 = 8UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 3 */
 184:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_4 = 16UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 4 */
 185:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_5 = 32UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 5 */
 186:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_6 = 64UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 6 */
 187:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_7 = 128UL << USIC_CH_PCR_SSCMode_SELO_Pos /**< Slave Select line 7 */
 188:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_SLAVE_SELECT_t;
 189:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 190:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 191:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines SPI specific events
 192:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 193:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_EVENT
 194:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 195:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 196:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 197:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 198:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 199:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 200:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 201:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 202:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 203:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_PARITY_ERROR = USIC_CH_PCR_SSCMode_PARIEN_Msk >> 13U,       /**< Parity error ev
 204:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_MSLS_CHANGE =  USIC_CH_PCR_SSCMode_MSLSIEN_Msk >> 13U,      /**< Master slave se
 205:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_DX2TIEN_ACTIVATED = USIC_CH_PCR_SSCMode_DX2TIEN_Msk >> 13U  /**< Slave select in
 206:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_EVENT_t;
 207:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 208:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 209:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines SPI event status
 210:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 211:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS_FLAG
 212:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 213:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS = USIC_CH_PSR_SSCMode_MSLS_Msk,                          /**< Status 
 214:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             select(
 215:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2S = USIC_CH_PSR_SSCMode_DX2S_Msk,                          /**< Status 
 216:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             input(D
 217:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS_EVENT_DETECTED = USIC_CH_PSR_SSCMode_MSLSEV_Msk,         /**< Status 
 218:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             output 
 219:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2T_EVENT_DETECTED = USIC_CH_PSR_SSCMode_DX2TEV_Msk,         /**< Status 
 220:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             input s
 221:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_PARITY_ERROR_EVENT_DETECTED = USIC_CH_PSR_SSCMode_PARERR_Msk, /**< Indicat
 222:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             parity 
 223:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_SSCMode_RSIF_Msk,     /**< Status 
 224:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             event *
 225:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_SSCMode_DLIF_Msk,          /**< Status 
 226:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_SSCMode_TSIF_Msk,      /**< Status
 227:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             event *
 228:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_SSCMode_TBIF_Msk,    /**< Status 
 229:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             event *
 230:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_RIF_Msk,             /**< Status 
 231:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_AIF_Msk, /**< Status 
 232:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             receive
 233:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_SSCMode_BRGIF_Msk/**< Status 
 234:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                                                             generat
 235:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_STATUS_FLAG_t;
 236:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 237:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 238:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines input frequency sources for slave select signal delay configuration.
 239:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 240:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY
 241:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 242:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPDIV = 0x0UL, /**< Output of PDIV divider: FPDIV */
 243:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPPP  = 0x1UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< P
 244:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FSCLK = 0x2UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< S
 245:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FMCLK = 0x3UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos  /**< M
 246:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_t;
 247:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 248:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 249:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Define data and clock input stages
 250:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 251:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT
 252:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 253:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN0 = 0UL,         /**< Data input stage 0 */ 
 254:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SCLKIN = 1UL, /**< Clock input stage */
 255:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SELIN = 2UL,  /**< Slave select input stage */
 256:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN1 = 3UL,         /**< Data input stage 1 */
 257:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN2 = 4UL,         /**< Data input stage 2 */
 258:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN3 = 5UL          /**< Data input stage 3 */
 259:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_INPUT_t;
 260:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 261:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 262:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Define SPI data transfer mode
 263:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 264:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_MODE
 265:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 266:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD = 0UL,            /**< SPI standard full duplex mode */ 
 267:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX = 4UL, /**< SPI standard half duplex mode */ 
 268:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_DUAL= 6UL,                 /**< SPI half duplex mode with dual data lines */ 
 269:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_MODE_QUAD= 7UL                  /**< SPI half duplex mode with quad data lines */
 270:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_MODE_t;
 271:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 272:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 273:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 274:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI Baudrate Generator shift clock passive level
 275:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 276:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 277:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 278:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 0, delay disabled */
 279:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 280:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 1, delay disabled */
 281:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 282:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 0, delay enabled */
 283:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 284:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   /**< Passive clock level 1, delay enabled */
 285:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 286:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 287:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 288:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 289:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI Baudrate Generator shift clock output
 290:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** */
 291:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT
 292:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 293:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,  /**< Baudrate 
 294:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1  = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1   /**< Clock obta
 295:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 296:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 297:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 298:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * SPI channel interrupt node pointers
 299:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 300:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INTERRUPT_NODE_POINTER
 301:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 302:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 303:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 304:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 305:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 306:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 307:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_INTERRUPT_NODE_POINTER_t;
 308:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 309:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 310:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * DATA STRUCTURES
 311:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** ***************************************************************************************************
 312:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 313:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 314:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Structure for initializing SPI channel.
 315:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 316:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** typedef struct XMC_SPI_CH_CONFIG
 317:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 318:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   uint32_t baudrate;							  /**< Module baud rate for communication */
 319:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_t bus_mode;                 /**< Bus mode: Master/Slave */
 320:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t selo_inversion; /**< Enable inversion of Slave select signal rela
 321:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                        MSLS signal  */
 322:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_PARITY_MODE_t parity_mode;          /**< Enable parity check for transmit and receive
 323:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** } XMC_SPI_CH_CONFIG_t;
 324:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 325:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**************************************************************************************************
 326:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * API PROTOTYPES
 327:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  **************************************************************************************************
 328:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 329:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #ifdef __cplusplus
 330:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** extern "C" {
 331:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 332:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 333:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 334:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 335:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param config pointer to constant SPI channel configuration data structure.\n
 336:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *               Refer data structure @ref XMC_SPI_CH_CONFIG_t for detail.
 337:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 338:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 339:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 340:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 341:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Initializes the selected SPI \a channel with the \a config structure.\n\n
 342:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Enable SPI channel by calling XMC_USIC_CH_Enable() and then configures
 343:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * <ul>
 344:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Baudrate,</li>
 345:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Passive data level as active high,</li>
 346:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Shift control signal as active high,</li>
 347:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Frame length as 64U,</li>
 348:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Word length as 8U,</li>
 349:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable Hardware port control mode,</li>
 350:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable transmission of data TDV(Transmit data valid) bit is set to 1,</li>
 351:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable invalidation of data in TBUF once loaded into shift register,</li>
 352:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Parity mode settings</li>
 353:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * </ul>
 354:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * And if master mode is selected,
 355:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * <ul>
 356:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enables MSLS signal generation,</li>
 357:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>configures slave selection as normal mode,</li>
 358:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Set polarity for the Slave signal,</li>
 359:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 360:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * </ul>
 361:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 362:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config);
 363:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 364:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 365:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 366:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 367:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 368:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 369:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 370:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the selected USIC channel to operate in SPI mode, by setting CCR.MODE bits.\n\n
 371:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * It should be executed after XMC_SPI_CH_Init() during initialization. By invoking XMC_SPI_CH_Stop
 372:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * to IDLE state. Call XMC_SPI_CH_Start() to set the SPI mode again, as needed later in the program
 373:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 374:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 375:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 376:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 377:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
 378:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 379:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   /* USIC channel in SPI mode */
 380:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 381:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 382:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 383:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 384:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 385:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 386:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for stopping is processed
 387:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the USIC channel is successfully put to IDLE mode. \n
 388:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_BUSY- If the USIC channel is busy transmitting data.
 389:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 390:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 391:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the selected SPI channel to IDLE mode, by clearing CCR.MODE bits.\n\n
 392:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * After calling XMC_SPI_CH_Stop, channel is IDLE mode. So no communication is supported. XMC_SPI_C
 393:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * invoked to start the communication again.
 394:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 395:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 396:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Start()
 397:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 398:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop(XMC_USIC_CH_t *const channel);
 399:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 400:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 401:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 402:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param rate Bus speed in bits per second
 403:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 404:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for setting baudrate is p
 405:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the baudrate is successfully changed. \n
 406:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_ERROR- If the new baudrate value is out of range.
 407:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 408:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 409:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Sets the bus speed in bits per second
 410:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 411:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 412:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 413:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 414:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 415:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 416:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 417:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 418:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param slave Slave select signal.\n
 419:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ref XMC_SPI_CH_SLAVE_SELECT_t for valid values.
 420:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 421:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 422:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 423:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 424:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Enable the selected slave signal by setting PCR.SELO bits.\n\n
 425:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Each slave is connected with one slave select signal. This is not configured in XMC_SPI_CH_Init(
 426:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() with required \a slave to to start the communication. After finis
 427:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * communication XMC_SPI_CH_DisableSlaveSelect() can be invoked to disable the slaves.
 428:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 429:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 430:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableSlaveSelect()
 431:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 432:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t sla
 433:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 434:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 435:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant ponter to XMC_USIC_CH_t, pointing to the USIC channel base address.
 436:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 437:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 438:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 439:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 440:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Disable all the slave signals by clearing PCR.SELO bits.\n\n
 441:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() has to be invoked to start the communication with the desired sla
 442:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 443:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 444:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect()
 445:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 446:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel);
 447:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 448:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 449:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 450:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 451:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 452:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 453:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 454:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 455:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 456:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. \n\n
 457:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * By enabling this the direction of the data pin is updated by hardware itself. Before transmittin
 458:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * mode to ensure the proper communication.
 459:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 460:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 461:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Transmit()
 462:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 463:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE
 464:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 465:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 308              	 .loc 3 465 0
 309 00f6 136C     	 ldr r3,[r2,#64]
 310              	.LBE140:
 311              	.LBE139:
 312              	.LBB144:
 313              	.LBB145:
1347:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 314              	 .loc 2 1347 0
 315 00f8 91F88940 	 ldrb r4,[r1,#137]
 316              	.LVL44:
 317              	.LBE145:
 318              	.LBE144:
 319              	.LBB149:
 320              	.LBB141:
 466:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 321              	 .loc 3 466 0
 322 00fc 8101     	 lsls r1,r0,#6
 323 00fe C9B2     	 uxtb r1,r1
 324              	.LBE141:
 325              	.LBE149:
 326              	.LBB150:
 327              	.LBB146:
1347:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 328              	 .loc 2 1347 0
 329 0100 4FF48030 	 mov r0,#65536
 330              	.LVL45:
 331              	.LBE146:
 332              	.LBE150:
 333              	.LBB151:
 334              	.LBB142:
 465:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 335              	 .loc 3 465 0
 336 0104 23F0C003 	 bic r3,r3,#192
 337 0108 0B43     	 orrs r3,r3,r1
 338              	.LBE142:
 339              	.LBE151:
 340              	.LBB152:
 341              	.LBB147:
1347:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 342              	 .loc 2 1347 0
 343 010a 00FA04F1 	 lsl r1,r0,r4
 344              	.LBE147:
 345              	.LBE152:
 346              	.LBB153:
 347              	.LBB143:
 465:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 348              	 .loc 3 465 0
 349 010e 1364     	 str r3,[r2,#64]
 350              	.LVL46:
 351              	.LBE143:
 352              	.LBE153:
 398:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 353              	 .loc 1 398 0
 354 0110 0020     	 movs r0,#0
 355              	.LBB154:
 356              	.LBB148:
1347:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 357              	 .loc 2 1347 0
 358 0112 9166     	 str r1,[r2,#104]
 359 0114 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 360              	.LVL47:
 361              	.L8:
 362              	.LBE148:
 363              	.LBE154:
 364              	.LBB155:
 365              	.LBB156:
1116:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 366              	 .loc 2 1116 0
 367 0116 136C     	 ldr r3,[r2,#64]
 368 0118 43F40053 	 orr r3,r3,#8192
 369 011c 1364     	 str r3,[r2,#64]
 370 011e E9E7     	 b .L9
 371              	.LBE156:
 372              	.LBE155:
 373              	.LBE134:
 374              	.LBE133:
 375              	.LBE157:
 376              	.LBE163:
 377              	 .cfi_endproc
 378              	.LFE305:
 380              	 .section .text.SPI_MASTER_GetAppVersion,"ax",%progbits
 381              	 .align 2
 382              	 .global SPI_MASTER_GetAppVersion
 383              	 .thumb
 384              	 .thumb_func
 386              	SPI_MASTER_GetAppVersion:
 387              	.LFB293:
 185:../Dave/Generated/SPI_MASTER/spi_master.c ****   DAVE_APP_VERSION_t version;
 388              	 .loc 1 185 0
 389              	 .cfi_startproc
 390              	 
 391              	 
 392              	 
 393              	.LVL48:
 192:../Dave/Generated/SPI_MASTER/spi_master.c **** }
 394              	 .loc 1 192 0
 395 0000 0423     	 movs r3,#4
 396 0002 0020     	 movs r0,#0
 397 0004 63F30700 	 bfi r0,r3,#0,#8
 398 0008 0323     	 movs r3,#3
 399 000a 63F30F20 	 bfi r0,r3,#8,#8
 400 000e 1423     	 movs r3,#20
 401 0010 63F31740 	 bfi r0,r3,#16,#8
 185:../Dave/Generated/SPI_MASTER/spi_master.c ****   DAVE_APP_VERSION_t version;
 402              	 .loc 1 185 0
 403 0014 82B0     	 sub sp,sp,#8
 404              	.LCFI1:
 405              	 .cfi_def_cfa_offset 8
 193:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 406              	 .loc 1 193 0
 407 0016 02B0     	 add sp,sp,#8
 408              	.LCFI2:
 409              	 .cfi_def_cfa_offset 0
 410              	 
 411 0018 7047     	 bx lr
 412              	 .cfi_endproc
 413              	.LFE293:
 415 001a 00BF     	 .section .text.SPI_MASTER_Init,"ax",%progbits
 416              	 .align 2
 417              	 .global SPI_MASTER_Init
 418              	 .thumb
 419              	 .thumb_func
 421              	SPI_MASTER_Init:
 422              	.LFB294:
 199:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 423              	 .loc 1 199 0
 424              	 .cfi_startproc
 425              	 
 426              	 
 427              	 
 428              	.LVL49:
 205:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 429              	 .loc 1 205 0
 430 0000 4368     	 ldr r3,[r0,#4]
 431 0002 5B68     	 ldr r3,[r3,#4]
 432 0004 1847     	 bx r3
 433              	.LVL50:
 434              	 .cfi_endproc
 435              	.LFE294:
 437 0006 00BF     	 .section .text.SPI_MASTER_SetMode,"ax",%progbits
 438              	 .align 2
 439              	 .global SPI_MASTER_SetMode
 440              	 .thumb
 441              	 .thumb_func
 443              	SPI_MASTER_SetMode:
 444              	.LFB295:
 215:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 445              	 .loc 1 215 0
 446              	 .cfi_startproc
 447              	 
 448              	 
 449              	.LVL51:
 222:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 450              	 .loc 1 222 0
 451 0000 8368     	 ldr r3,[r0,#8]
 452 0002 93F82020 	 ldrb r2,[r3,#32]
 215:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 453              	 .loc 1 215 0
 454 0006 70B5     	 push {r4,r5,r6,lr}
 455              	.LCFI3:
 456              	 .cfi_def_cfa_offset 16
 457              	 .cfi_offset 4,-16
 458              	 .cfi_offset 5,-12
 459              	 .cfi_offset 6,-8
 460              	 .cfi_offset 14,-4
 215:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 461              	 .loc 1 215 0
 462 0008 0446     	 mov r4,r0
 222:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 463              	 .loc 1 222 0
 464 000a 0AB1     	 cbz r2,.L46
 465              	.LVL52:
 466              	.L36:
 239:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 467              	 .loc 1 239 0
 468 000c 0220     	 movs r0,#2
 469 000e 70BD     	 pop {r4,r5,r6,pc}
 470              	.LVL53:
 471              	.L46:
 222:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 472              	 .loc 1 222 0 discriminator 1
 473 0010 DA7F     	 ldrb r2,[r3,#31]
 474 0012 02F0FF00 	 and r0,r2,#255
 475              	.LVL54:
 476 0016 002A     	 cmp r2,#0
 477 0018 F8D1     	 bne .L36
 224:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 478              	 .loc 1 224 0
 479 001a 1A7F     	 ldrb r2,[r3,#28]
 480 001c 8A42     	 cmp r2,r1
 481 001e 1BD0     	 beq .L44
 482 0020 6068     	 ldr r0,[r4,#4]
 483              	.LVL55:
 484              	.LBB180:
 485              	.LBB181:
1482:../Dave/Generated/SPI_MASTER/spi_master.c **** }
1483:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1484:../Dave/Generated/SPI_MASTER/spi_master.c **** #if (SPI_MASTER_PARITY_ERROR == 1U)
1485:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
1486:../Dave/Generated/SPI_MASTER/spi_master.c ****  * Protocol interrupt handling function.
1487:../Dave/Generated/SPI_MASTER/spi_master.c ****  * The function is common for different instances of the SPI_MASTER APP.
1488:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
1489:../Dave/Generated/SPI_MASTER/spi_master.c **** void SPI_MASTER_lProtocolHandler(const SPI_MASTER_t * const handle)
1490:../Dave/Generated/SPI_MASTER/spi_master.c **** {
1491:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint32_t psr_status;
1492:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1493:../Dave/Generated/SPI_MASTER/spi_master.c ****   psr_status = XMC_SPI_CH_GetStatusFlag(handle->channel);
1494:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1495:../Dave/Generated/SPI_MASTER/spi_master.c ****   /*Check for Parity detection error */
1496:../Dave/Generated/SPI_MASTER/spi_master.c ****   if ((handle->config->parity_cbhandler != NULL) && \
1497:../Dave/Generated/SPI_MASTER/spi_master.c ****                                            (psr_status & (uint32_t)XMC_SPI_CH_STATUS_FLAG_PARITY_ER
1498:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1499:../Dave/Generated/SPI_MASTER/spi_master.c ****     handle->config->parity_cbhandler();
1500:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1501:../Dave/Generated/SPI_MASTER/spi_master.c **** }
1502:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
1503:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1504:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
1505:../Dave/Generated/SPI_MASTER/spi_master.c ****  * This is used to reconfigure the registers while changing the SPI mode dynamically
1506:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
1507:../Dave/Generated/SPI_MASTER/spi_master.c **** static void SPI_MASTER_lPortConfig(const SPI_MASTER_t* handle)
1508:../Dave/Generated/SPI_MASTER/spi_master.c **** {
1509:../Dave/Generated/SPI_MASTER/spi_master.c ****   switch (handle->runtime->spi_master_mode)
1510:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1511:../Dave/Generated/SPI_MASTER/spi_master.c ****     case XMC_SPI_CH_MODE_STANDARD:
1512:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Configure the data input line selected */
1513:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_SPI_CH_SetInputSource(handle->channel, XMC_SPI_CH_INPUT_DIN0, (uint8_t)(handle->runtime->
1514:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Configure the pin as input */
1515:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_1_pin->port, handle->config->mosi_1_pin->pin, XMC_GPIO_
1516:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Disable the HW control of the PINs */
1517:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetHardwareControl(handle->config->mosi_0_pin->port,
1518:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   handle->config->mosi_0_pin->pin,
1519:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   XMC_GPIO_HWCTRL_DISABLED);
1520:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetHardwareControl(handle->config->mosi_1_pin->port,
1521:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   handle->config->mosi_1_pin->pin,
1522:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   XMC_GPIO_HWCTRL_DISABLED);
1523:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1524:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
1525:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1526:../Dave/Generated/SPI_MASTER/spi_master.c ****     case XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX:
1527:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Configure the data input line selected */
1528:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_SPI_CH_SetInputSource(handle->channel, XMC_SPI_CH_INPUT_DIN0, (uint8_t)(handle->runtime->
1529:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Disable the HW control of the PINs */
1530:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetHardwareControl(handle->config->mosi_0_pin->port,
1531:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   handle->config->mosi_0_pin->pin,
1532:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   XMC_GPIO_HWCTRL_DISABLED);
1533:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
1534:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1535:../Dave/Generated/SPI_MASTER/spi_master.c ****     case XMC_SPI_CH_MODE_DUAL:
1536:../Dave/Generated/SPI_MASTER/spi_master.c ****     case XMC_SPI_CH_MODE_QUAD:
1537:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Configure the data input line for loopback mode */
1538:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_SPI_CH_SetInputSource(handle->channel, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_G
1539:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Configure the pin as input */
1540:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
1541:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_1_pin->pin,
1542:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_1_pin_config->port_config.mode);
1543:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1544:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Configure the Hardware control mode selected for the pin */
1545:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetHardwareControl(handle->config->mosi_0_pin->port,
1546:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   handle->config->mosi_0_pin->pin,
1547:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   handle->config->mosi_0_pin_config->hw_control);
1548:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetHardwareControl(handle->config->mosi_1_pin->port,
1549:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   handle->config->mosi_1_pin->pin,
1550:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   handle->config->mosi_1_pin_config->hw_control);
1551:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
1552:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1553:../Dave/Generated/SPI_MASTER/spi_master.c ****     default:
1554:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
1555:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1556:../Dave/Generated/SPI_MASTER/spi_master.c **** }
1557:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1558:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
1559:../Dave/Generated/SPI_MASTER/spi_master.c ****  * This is used to reassign the mode for ports after updating the baud rate
1560:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
1561:../Dave/Generated/SPI_MASTER/spi_master.c **** static void SPI_MASTER_lPortModeSet(const SPI_MASTER_t* handle)
1562:../Dave/Generated/SPI_MASTER/spi_master.c **** {
1563:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint32_t ss_line;
1564:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1565:../Dave/Generated/SPI_MASTER/spi_master.c ****   /* Configure the ports with actual mode */
1566:../Dave/Generated/SPI_MASTER/spi_master.c ****   for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
1567:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1568:../Dave/Generated/SPI_MASTER/spi_master.c ****     XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
1569:../Dave/Generated/SPI_MASTER/spi_master.c ****                      handle->config->slave_select_pin[ss_line]->pin,
1570:../Dave/Generated/SPI_MASTER/spi_master.c ****                      handle->config->slave_select_pin_config[ss_line]->port_config.mode);
1571:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1572:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1573:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_GPIO_SetMode(handle->config->sclk_out_pin->port,
1574:../Dave/Generated/SPI_MASTER/spi_master.c ****                    handle->config->sclk_out_pin->pin,
1575:../Dave/Generated/SPI_MASTER/spi_master.c ****                    handle->config->sclk_out_pin_config->port_config.mode);
1576:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1577:../Dave/Generated/SPI_MASTER/spi_master.c ****   switch (handle->runtime->spi_master_mode)
1578:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1579:../Dave/Generated/SPI_MASTER/spi_master.c ****     case XMC_SPI_CH_MODE_STANDARD:
1580:../Dave/Generated/SPI_MASTER/spi_master.c ****     case XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX:
1581:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
1582:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_0_pin->pin,
1583:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_0_pin_config->port_config.mode);
1584:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
1585:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1586:../Dave/Generated/SPI_MASTER/spi_master.c ****     case XMC_SPI_CH_MODE_DUAL:
1587:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
1588:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_0_pin->pin,
1589:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_0_pin_config->port_config.mode);
1590:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
1591:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_1_pin->pin,
1592:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_1_pin_config->port_config.mode);
1593:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
1594:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1595:../Dave/Generated/SPI_MASTER/spi_master.c ****     case XMC_SPI_CH_MODE_QUAD:
1596:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_0_pin->port,
1597:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_0_pin->pin,
1598:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_0_pin_config->port_config.mode);
1599:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_1_pin->port,
1600:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_1_pin->pin,
1601:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_1_pin_config->port_config.mode);
1602:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_2_pin->port,
1603:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_2_pin->pin,
1604:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_2_pin_config->port_config.mode);
1605:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_3_pin->port,
1606:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_3_pin->pin,
1607:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_3_pin_config->port_config.mode);
1608:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
1609:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1610:../Dave/Generated/SPI_MASTER/spi_master.c ****     default:
1611:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
1612:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1613:../Dave/Generated/SPI_MASTER/spi_master.c **** }
1614:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1615:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
1616:../Dave/Generated/SPI_MASTER/spi_master.c ****  * This is used to make the ports as input during update of the baud rate, to avoid the noise in ou
1617:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
1618:../Dave/Generated/SPI_MASTER/spi_master.c **** static void SPI_MASTER_lPortModeReset(const SPI_MASTER_t* handle)
1619:../Dave/Generated/SPI_MASTER/spi_master.c **** {
1620:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint32_t ss_line;
1621:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1622:../Dave/Generated/SPI_MASTER/spi_master.c ****   /* Configure the ports as input */
1623:../Dave/Generated/SPI_MASTER/spi_master.c ****   for (ss_line = 0U; ss_line < handle->config->slave_select_lines; ss_line++)
1624:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1625:../Dave/Generated/SPI_MASTER/spi_master.c ****     XMC_GPIO_SetMode(handle->config->slave_select_pin[ss_line]->port,
1626:../Dave/Generated/SPI_MASTER/spi_master.c ****                      handle->config->slave_select_pin[ss_line]->pin,
1627:../Dave/Generated/SPI_MASTER/spi_master.c ****                      XMC_GPIO_MODE_INPUT_TRISTATE);
1628:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1629:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1630:../Dave/Generated/SPI_MASTER/spi_master.c ****   XMC_GPIO_SetMode(handle->config->sclk_out_pin->port, handle->config->sclk_out_pin->pin, XMC_GPIO_
1631:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1632:../Dave/Generated/SPI_MASTER/spi_master.c ****   switch (handle->runtime->spi_master_mode)
1633:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1634:../Dave/Generated/SPI_MASTER/spi_master.c ****     case XMC_SPI_CH_MODE_STANDARD:
1635:../Dave/Generated/SPI_MASTER/spi_master.c ****     case XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX:
1636:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_0_pin->port, handle->config->mosi_0_pin->pin, XMC_GPIO_
1637:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
1638:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1639:../Dave/Generated/SPI_MASTER/spi_master.c ****     case XMC_SPI_CH_MODE_DUAL:
1640:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_0_pin->port, handle->config->mosi_0_pin->pin, XMC_GPIO_
1641:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_1_pin->port, handle->config->mosi_1_pin->pin, XMC_GPIO_
1642:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
1643:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1644:../Dave/Generated/SPI_MASTER/spi_master.c ****     case XMC_SPI_CH_MODE_QUAD:
1645:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_0_pin->port, handle->config->mosi_0_pin->pin, XMC_GPIO_
1646:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_1_pin->port, handle->config->mosi_1_pin->pin, XMC_GPIO_
1647:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_2_pin->port, handle->config->mosi_2_pin->pin, XMC_GPIO_
1648:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_3_pin->port, handle->config->mosi_3_pin->pin, XMC_GPIO_
1649:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
1650:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1651:../Dave/Generated/SPI_MASTER/spi_master.c ****     default:
1652:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
1653:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1654:../Dave/Generated/SPI_MASTER/spi_master.c **** }
1655:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1656:../Dave/Generated/SPI_MASTER/spi_master.c **** /*
1657:../Dave/Generated/SPI_MASTER/spi_master.c ****  * This is used check whether the mode change is valid or not
1658:../Dave/Generated/SPI_MASTER/spi_master.c ****  */
1659:../Dave/Generated/SPI_MASTER/spi_master.c **** static SPI_MASTER_STATUS_t SPI_MASTER_lValidateModeChange(const SPI_MASTER_t * handle, XMC_SPI_CH_M
1660:../Dave/Generated/SPI_MASTER/spi_master.c **** {
1661:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
1662:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1663:../Dave/Generated/SPI_MASTER/spi_master.c ****   status = SPI_MASTER_STATUS_SUCCESS;
1664:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1665:../Dave/Generated/SPI_MASTER/spi_master.c ****   if ((handle->config->spi_master_config_mode == XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX) ||
 486              	 .loc 1 1665 0
 487 0022 90F88620 	 ldrb r2,[r0,#134]
 488 0026 042A     	 cmp r2,#4
 489 0028 14D0     	 beq .L42
 490 002a 9142     	 cmp r1,r2
 491 002c 12D8     	 bhi .L42
1666:../Dave/Generated/SPI_MASTER/spi_master.c ****       (handle->config->spi_master_config_mode < mode))
1667:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1668:../Dave/Generated/SPI_MASTER/spi_master.c ****     status = SPI_MASTER_STATUS_FAILURE;
1669:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1670:../Dave/Generated/SPI_MASTER/spi_master.c ****   else if (handle->config->spi_master_config_mode == XMC_SPI_CH_MODE_STANDARD)
 492              	 .loc 1 1670 0
 493 002e 002A     	 cmp r2,#0
 494 0030 73D1     	 bne .L28
1671:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1672:../Dave/Generated/SPI_MASTER/spi_master.c ****     if (XMC_SPI_CH_MODE_DUAL <= mode)
 495              	 .loc 1 1672 0
 496 0032 0529     	 cmp r1,#5
 497 0034 0ED8     	 bhi .L42
 498              	.L29:
 499              	.LVL56:
 500              	.LBE181:
 501              	.LBE180:
 230:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 502              	 .loc 1 230 0
 503 0036 1977     	 strb r1,[r3,#28]
 504              	.LVL57:
 505              	.LBB184:
 506              	.LBB185:
1509:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 507              	 .loc 1 1509 0
 508 0038 1A7F     	 ldrb r2,[r3,#28]
 509 003a 072A     	 cmp r2,#7
 510 003c 6BD8     	 bhi .L43
 511 003e DFE802F0 	 tbb [pc,r2]
 512              	.LVL58:
 513              	.L34:
 514 0042 47       	 .byte (.L31-.L34)/2
 515 0043 6A       	 .byte (.L43-.L34)/2
 516 0044 6A       	 .byte (.L43-.L34)/2
 517 0045 6A       	 .byte (.L43-.L34)/2
 518 0046 32       	 .byte (.L32-.L34)/2
 519 0047 6A       	 .byte (.L43-.L34)/2
 520 0048 0C       	 .byte (.L33-.L34)/2
 521 0049 0C       	 .byte (.L33-.L34)/2
 522              	 .p2align 1
 523              	.L30:
 524              	.LBE185:
 525              	.LBE184:
 526              	.LBB213:
 527              	.LBB182:
1673:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1674:../Dave/Generated/SPI_MASTER/spi_master.c ****       status = SPI_MASTER_STATUS_FAILURE;
1675:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1676:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
1677:../Dave/Generated/SPI_MASTER/spi_master.c ****   else
1678:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
1679:../Dave/Generated/SPI_MASTER/spi_master.c ****     if ((mode == XMC_SPI_CH_MODE_STANDARD) && (handle->runtime->dx0_input == SPI_MASTER_INPUT_INVAL
1680:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
1681:../Dave/Generated/SPI_MASTER/spi_master.c ****       status = SPI_MASTER_STATUS_FAILURE;
1682:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
1683:../Dave/Generated/SPI_MASTER/spi_master.c **** 
1684:../Dave/Generated/SPI_MASTER/spi_master.c ****     else if ((mode == XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX) && (handle->runtime->dx0_input_half_dupl
 528              	 .loc 1 1684 0
 529 004a 0429     	 cmp r1,#4
 530 004c F3D1     	 bne .L29
 531 004e 9A7F     	 ldrb r2,[r3,#30]
 532 0050 072A     	 cmp r2,#7
 533 0052 F0D1     	 bne .L29
 534              	.L42:
 535 0054 0120     	 movs r0,#1
 536 0056 70BD     	 pop {r4,r5,r6,pc}
 537              	.LVL59:
 538              	.L44:
 539              	.LBE182:
 540              	.LBE213:
 242:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 541              	 .loc 1 242 0
 542 0058 70BD     	 pop {r4,r5,r6,pc}
 543              	.LVL60:
 544              	.L33:
 545              	.LBB214:
 546              	.LBB212:
1538:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Configure the pin as input */
 547              	 .loc 1 1538 0
 548 005a 2168     	 ldr r1,[r4]
 549              	.LVL61:
1540:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_1_pin->pin,
 550              	 .loc 1 1540 0
 551 005c 0569     	 ldr r5,[r0,#16]
 552              	.LBB186:
 553              	.LBB187:
 467:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 468:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 469:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 470:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 471:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param data Data to be transmitted
 472:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 473:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 474:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 475:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 476:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 477:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 478:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Puts the data into FIFO, if FIFO mode is enabled or else into standard buffer, by setting the pr
 479:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. By enabling this the 
 480:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * pin is updated by hardware itself. TCI(Transmit Control Information) allows dynamic control of b
 481:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * and pin direction during data transfers by writing to SCTR.DSM and SCTR.HPCDIR bit fields. To su
 482:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * update, TCSR.HPCMD(Hardware Port control) will be enabled during the initialization using XMC_SP
 483:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 484:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 485:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 486:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Receive()
 487:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 488:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t
 489:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 490:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 491:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 492:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 493:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.      
 494:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 495:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 496:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 497:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 498:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Transmits a dummy data(FFFFH) to provide clock for slave and receives the data from the slave.\n
 499:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Receive() receives the data and places it into buffer based on the FIFO selection. Af
 500:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be invoked to read the data from the buffers.
 501:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 502:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 503:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedDaa()
 504:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 505:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Receive(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
 506:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 507:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   /* Transmit dummy data */
 508:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_SPI_CH_Transmit(channel, (uint16_t)0xffffU, (XMC_SPI_CH_MODE_t)((uint16_t)mode & 0xfffbU));
 509:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 510:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 511:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 512:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 513:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 514:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return uint16_t Data read from the receive buffer.
 515:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 516:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 517:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Reads data from the receive buffer based on the FIFO selection.\n\n
 518:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Invocation of XMC_SPI_CH_Receive() receives the data and place it into receive buffer. After rec
 519:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be used to read the data from the buffer.
 520:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 521:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 522:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Receive()
 523:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 524:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel);
 525:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 526:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 527:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 528:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 529:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 530:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 531:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 532:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the order of data transfer from LSB to MSB, by clearing SCTR.SDIR bit.\n\n
 533:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * This is typically based on the slave settings. Invoke XMC_SPI_CH_SetBitOrderLsbFirst() to set di
 534:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * the program.
 535:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 536:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 537:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderMsbFirst()
 538:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 539:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderLsbFirst(XMC_USIC_CH_t *const channel)
 540:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 541:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->SCTR &= (uint32_t)~USIC_CH_SCTR_SDIR_Msk;
 542:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 543:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 544:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 545:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 546:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 547:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 548:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 549:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 550:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the order of data transfer from MSB to LSB, by setting SCTR.SDIR bit.\n\n
 551:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * This is typically based on the slave settings. This is not set during XMC_SPI_CH_Init(). 
 552:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Invoke XMC_SPI_CH_SetBitOrderMsbFirst() to set direction as needed in the program.
 553:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 554:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 555:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderLsbFirst()
 556:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 557:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
 558:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 559:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 560:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 561:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 562:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 563:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 564:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param event Protocol events which have to be enabled.
 565:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 566:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *              as input.
 567:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 568:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 569:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 570:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 571:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Enables the SPI protocol specific events, by configuring PCR register.\n\n
 572:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Events can be enabled as needed using XMC_SPI_CH_EnableEvent(). 
 573:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEvent() can be used to disable the events.
 574:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 575:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 576:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEvent()
 577:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 578:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 579:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 580:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 581:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 582:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param event Protocol events which have to be disabled.
 583:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 584:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *              as input.
 585:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 586:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 587:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 588:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 589:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Disables the SPI protocol specific events, by configuring PCR register.\n\n
 590:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * After disabling the events, XMC_SPI_CH_EnableEvent() has to be invoked to re-enable the events.
 591:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 592:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 593:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableEvent()
 594:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 595:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 596:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 597:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 598:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 599:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 600:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return uint32_t Status of SPI protocol events.
 601:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 602:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 603:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Returns the status of the events, by reading PSR register.\n\n
 604:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * This indicates the status of the all the events, for SPI communication. 
 605:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 606:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 607:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_ClearStatusFlag()
 608:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 609:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 610:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 611:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   return channel->PSR_SSCMode;
 612:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 613:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 614:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 615:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 616:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param flag Protocol event status to be cleared for detection of next occurence.
 617:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_STATUS_FLAG_t for valid values. <b>OR</b> combinations of these 
 618:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *              as input.
 619:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 620:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 621:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 622:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Clears the events specified, by setting PSCR register.\n\n
 623:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * During communication the events occurred have to be cleared to detect their next occurence.\n
 624:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * e.g: During transmission Transmit buffer event occurs to indicating data word transfer has start
 625:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *       event has to be cleared after transmission of each data word. Otherwise next event cannot 
 626:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 627:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 628:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_GetStatusFlag()
 629:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 630:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
 631:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 632:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PSCR |= flag;
 633:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 634:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 635:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 636:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 637:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 638:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 639:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 640:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 641:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Enables the generation of Master clock by setting PCR.MCLK bit.\n\n
 642:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * This clock can be used as a clock reference for external devices. This is not enabled during ini
 643:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_Init(). Invoke XMC_SPI_CH_EnableMasterClock() to enable as needed in the program, or 
 644:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableMasterClock().
 645:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 646:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 647:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableMasterClock()
 648:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 649:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_EnableMasterClock(XMC_USIC_CH_t *const channel)
 650:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 651:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode |= (uint32_t)USIC_CH_PCR_SSCMode_MCLK_Msk;
 652:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 653:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 654:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 655:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 656:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 657:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 658:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 659:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 660:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Disables the generation of Master clock by clearing PCR.MCLK bit.\n\n
 661:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * This clock can be enabled by invoking XMC_SPI_CH_EnableMasterClock() as needed in the program.
 662:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 663:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 664:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableMasterClock()
 665:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 666:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DisableMasterClock(XMC_USIC_CH_t *const channel)
 667:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 668:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_MCLK_Msk;
 669:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 670:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #ifdef USIC_CH_PCR_SSCMode_SLPHSEL_Msk
 671:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 672:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 673:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 674:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 675:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 676:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 677:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Data bits are shifted out with the leading edge of the shift clock signal and latched in with th
 678:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 679:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 680:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DataLatchedInLeadingEdge()
 681:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 682:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DataLatchedInTrailingEdge(XMC_USIC_CH_t *const channel)
 683:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 684:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SLPHSEL_Msk;
 685:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 686:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 687:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 688:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 689:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 690:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 691:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 692:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 693:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * The first data bit is shifted out when the data shift unit receives a low to high transition fro
 694:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * stage. Subsequent bits are shifted out with the trailing edge of the shift clock signal. Data bi
 695:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * always latched in with the leading edge.
 696:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 697:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 698:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DataLatchedInTrailingEdge()
 699:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 700:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DataLatchedInLeadingEdge(XMC_USIC_CH_t *const channel)
 701:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 702:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode |= USIC_CH_PCR_SSCMode_SLPHSEL_Msk;
 703:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 704:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** #endif
 705:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 706:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 707:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 708:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 709:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 710:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 711:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Enables the delay after each word, by setting PCR.TIWEN bit.\n\n
 712:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * The inter word delay starts at the end of last SCLK cycle of data word. During this time no cloc
 713:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * generated and MSLS signal stays active. If inter word delay is not enabled, last data bit of a d
 714:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * followed by the first data bit of the next data word. This is not enabled in XMC_SPI_CH_Init(). 
 715:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableInterwordDelay() has to be invoked as needed in the program. And can be disable
 716:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableInterwordDelay().
 717:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 718:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 719:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableInterwordDelay()
 720:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 721:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_EnableInterwordDelay(XMC_USIC_CH_t *const channel)
 722:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 723:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode |= (uint32_t)USIC_CH_PCR_SSCMode_TIWEN_Msk;
 724:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 725:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 726:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 727:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 728:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 729:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 730:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 731:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 732:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Disables the delay after after each word, by clearing PCR.TIWEN bit.\n\n
 733:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * So the last data bit of a data word is directly followed by the first data bit of the next data 
 734:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * be enabled by invoking XMC_SPI_CH_EnableInterwordDelay().
 735:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 736:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 737:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableInterwordDelay()
 738:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 739:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DisableInterwordDelay(XMC_USIC_CH_t *const channel)
 740:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 741:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_TIWEN_Msk;
 742:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 743:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 744:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 745:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 746:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param tinterword_delay_ns delay in terms of nano seconds.
 747:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 748:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 749:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 750:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 751:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Configures the inter word delay by setting PCR.PCTQ1, PCR.DCTQ1 bit fields.\n\n
 752:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * The inter word delay is dependent on the peripheral clock. The maximum possible value is calcula
 753:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * below formula\n
 754:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *            Maximum inter word delay = ((1 + PCTQ1_max)(1 + DCTQ1_max)) / peripheral clock\n
 755:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *                                       where PCTQ1_max = 3 and DCTQ1_max = 31\n
 756:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * After configuring the inter word delay, this has to be enabled by invoking XMC_SPI_CH_EnableInte
 757:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 758:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 759:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableInterwordDelay(),XMC_SPI_CH_SetInterwordDelaySCLK()
 760:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 761:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** void XMC_SPI_CH_SetInterwordDelay(XMC_USIC_CH_t *const channel,uint32_t tinterword_delay_ns);
 762:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 763:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 764:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 765:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param sclk_period  in terms of clk cycles.
 766:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 767:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 768:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 769:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 770:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Configures the inter word delay by setting PCR.DCTQ1 bit fields.\n\n
 771:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * This delay is dependent on the peripheral clock. The maximum possible value supported by this AP
 772:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * is 32 clock cycles.
 773:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * After configuring the inter word delay, this has to be enabled by invoking XMC_SPI_CH_EnableInte
 774:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 775:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 776:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableInterwordDelay(),XMC_SPI_CH_EnableInterwordDelay()
 777:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 778:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetInterwordDelaySCLK(XMC_USIC_CH_t *const channel,uint32_t sclk_pe
 779:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 780:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode = (uint32_t)((channel->PCR_SSCMode) & (~(USIC_CH_PCR_SSCMode_DCTQ1_Msk |
 781:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                                 USIC_CH_PCR_SSCMode_PCTQ1_Msk |
 782:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                                 USIC_CH_PCR_SSCMode_CTQSEL1_Msk))) 
 783:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                          (((sclk_period - 1U) <<  USIC_CH_PCR_SSCMode_DCTQ1_Pos) |
 784:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                          (0x02U <<  USIC_CH_PCR_SSCMode_CTQSEL1_Pos));
 785:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 786:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 787:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 788:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 789:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param sclk_period delay in terms of sclk clock cycles.
 790:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 791:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 792:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 793:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 794:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Configures the leading/trailing delay by setting BRG.DCTQ bit field.\n\n
 795:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * This delay is dependent on the peripheral clock. The maximum possible value supported by this AP
 796:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * is 30 clock cycles.
 797:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 798:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 799:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_peri
 800:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 801:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 802:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 803:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 								   USIC_CH_BRG_PCTQ_Msk)) |
 804:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                  (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 805:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 806:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 807:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 808:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 809:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 810:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 811:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 812:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 813:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 814:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Configure to keep MSLS(Slave select signal) active even after finishing the current data frame,
 815:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * by setting PCR.FEM bit.\n\n
 816:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * This is typically used during the transmission of multi-data word frames, where there is possibi
 817:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * delivering the data. Frame end mode is enabled in XMC_SPI_CH_Init() during initialization. To di
 818:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableFEM() can be invoked as needed in the program.
 819:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 820:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 821:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableFEM()
 822:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 823:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_EnableFEM(XMC_USIC_CH_t *const channel)
 824:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 825:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode |= (uint32_t)USIC_CH_PCR_SSCMode_FEM_Msk;
 826:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 827:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 828:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 829:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 830:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 831:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 832:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 833:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 834:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Configure to disable the MSLS(Slave select signal) if the current data frame is considered as fi
 835:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * by setting PCR.FEM bit.\n\n
 836:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 837:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * When the last bit of a data word has been sent out and the transmit buffer TBUF does not contain
 838:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * considered as frame is ended and MSLS(Slave select signal) is disabled.
 839:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * 
 840:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 841:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableFEM()
 842:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 843:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DisableFEM(XMC_USIC_CH_t *const channel)
 844:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 845:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_FEM_Msk;
 846:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 847:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 848:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 849:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 850:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param passive_level polarity and delay of the selected shift clock.\n
 851:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *                      Refer @ref XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t for valid inputs.
 852:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param clock_output shift clock source.\n
 853:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *                     Refer @ref XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t for valid inputs.
 854:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 855:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 856:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 857:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 858:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Configures the shift clock source with the selected polarity and delay by setting BRG.SCLKOSEL a
 859:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * In Master mode operation, shift clock is generated by the internal baud rate generator. This SCL
 860:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * for external slave devices by SCLKOUT signal.\n
 861:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * In Slave mode, the signal is received from the external master. So the DX1(input) stage has to b
 862:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * The shift clock output(SCLKOUT) signal polarity can be set relative to SCLK, with the delay of h
 863:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * period. These settings are applicable only in master mode.
 864:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 865:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
 866:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                           const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_
 867:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                           const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t
 868:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 869:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passi
 870:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                        (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
 871:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 872:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 873:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 874:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 875:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  word_length Number of bits to be configured for a data word. \n
 876:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *         \b Range: 1 to 16.
 877:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 878:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 879:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 880:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description</b><br>
 881:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Defines the data word length.\n\n
 882:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
 883:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 884:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 885:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_SetFrameLength()
 886:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 887:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_leng
 888:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 889:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_SetWordLength(channel, word_length);
 890:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 891:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 892:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 893:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 894:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  frame_length Number of bits in a frame. \n
 895:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *                \b Range: 1 to 64. If the value 64 is configured, then the frame does not
 896:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *                automatically end. User should explicitly end the frame.
 897:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 898:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 899:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 900:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description</b><br>
 901:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Define the data frame length.\n\n
 902:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the number of bits to be serially transmitted in a frame.
 903:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * The frame length should be multiples of word length. If the value is set to 64, the frame does n
 904:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * automatically end. Use XMC_SPI_CH_DisableSlaveSelect() to end the frame after all the data
 905:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * is transmitted.
 906:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 907:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 908:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSele
 909:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 910:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_le
 911:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 912:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   XMC_USIC_CH_SetFrameLength(channel, frame_length);
 913:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 914:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 915:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 916:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 917:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 918:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 919:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 920:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description</b><br>
 921:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Configure the handling of start of frame through software, by setting TCSR.SOF bit.\n\n
 922:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * This can be used if the software handles the TBUF data without FIFO. If SOF is set, a valid cont
 923:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * considered as first word of a new frame by finishing the currently running frame. For software h
 924:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * it is recommended to configure TCSR.WLEMD as 0. This is not configured during initialization. XM
 925:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * can be called as needed in the program and can be disabled by XMC_SPI_CH_DisableSOF(). 
 926:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 927:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 928:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableSOF()
 929:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 930:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_EnableSOF(XMC_USIC_CH_t *const channel)
 931:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 932:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_SOF_Msk;
 933:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 934:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 935:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 936:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 937:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 938:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 939:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 940:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description</b><br>
 941:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Set the control of the handling start of frame through hardware, by clearing TCSR.SOF bit.\n\n
 942:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Typically this can be disabled, where the transmission control is done by the hardware.
 943:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 944:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 945:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSOF()
 946:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 947:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DisableSOF(XMC_USIC_CH_t *const channel)
 948:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 949:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_SOF_Msk;
 950:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 951:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 952:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 953:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 954:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 955:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 956:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 957:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description</b><br>
 958:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Configure the handling of end of frame through software, by setting TCSR.EOF bit.\n\n
 959:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * This can be used if the software handles the TBUF data without FIFO. If EOF is set, a valid cont
 960:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * considered as last word of a frame. After transfer of the last word, MSLS signal becomes inactiv
 961:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * handling of EOF bit, it is recommended to configure TCSR.WLEMD as 0. \n
 962:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \b Note: The API should be called before putting the last data word of the frame to TBUF.
 963:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 964:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 965:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEOF()
 966:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 967:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_EnableEOF(XMC_USIC_CH_t *const channel)
 968:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 969:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_EOF_Msk;
 970:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 971:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 972:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 973:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 974:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 975:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 976:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 977:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description</b><br>
 978:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Configure the handling of end of frame through hardware, by clearing TCSR.EOF bit.\n\n
 979:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Typically this can be disabled, where the transmission control is done by the hardware.
 980:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 981:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 982:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * XMC_SPI_CH_EnableEOF()
 983:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
 984:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DisableEOF(XMC_USIC_CH_t *const channel)
 985:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
 986:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_EOF_Msk;
 987:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 988:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 
 989:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** /**
 990:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 991:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  input SPI channel input stage.\n
 992:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *               Refer @ref XMC_SPI_CH_INPUT_t for valid values
 993:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @param  source Input source select for the input stage.
 994:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *                Range : [0 to 7]
 995:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 996:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * @return None
 997:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  *
 998:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * \par<b>Description</b><br>
 999:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Selects the data source for SPI input stage, by configuring DXCR.DSEL bits.\n\n
1000:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
1001:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * input stages like DX0CR, DX1CR etc. This is not done during initialization. This has to be confi
1002:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  * the SPI communication.
1003:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****  */
1004:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
1005:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                const XMC_SPI_CH_INPUT_t input,
1006:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                                                const uint8_t source)
1007:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** {
1008:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0
 554              	 .loc 3 1008 0
 555 005e CB69     	 ldr r3,[r1,#28]
 556              	.LVL62:
 557              	.LBE187:
 558              	.LBE186:
1540:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_1_pin->pin,
 559              	 .loc 1 1540 0
 560 0060 4269     	 ldr r2,[r0,#20]
 561 0062 2868     	 ldr r0,[r5]
 562 0064 1278     	 ldrb r2,[r2]
 563              	.LBB191:
 564              	.LBB190:
 565              	 .loc 3 1008 0
 566 0066 23F05003 	 bic r3,r3,#80
 567 006a 43F01003 	 orr r3,r3,#16
 568 006e CB61     	 str r3,[r1,#28]
 569              	.LVL63:
 570              	.LBB188:
 571              	.LBB189:
 707:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 572              	 .loc 2 707 0
 573 0070 CB69     	 ldr r3,[r1,#28]
 574 0072 23F00703 	 bic r3,r3,#7
 575 0076 43F00603 	 orr r3,r3,#6
 576 007a CB61     	 str r3,[r1,#28]
 577              	.LBE189:
 578              	.LBE188:
 579              	.LBE190:
 580              	.LBE191:
1540:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_1_pin->pin,
 581              	 .loc 1 1540 0
 582 007c 2979     	 ldrb r1,[r5,#4]
 583              	.LVL64:
 584 007e FFF7FEFF 	 bl XMC_GPIO_SetMode
 585              	.LVL65:
1545:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   handle->config->mosi_0_pin->pin,
 586              	 .loc 1 1545 0
 587 0082 6268     	 ldr r2,[r4,#4]
 588 0084 9368     	 ldr r3,[r2,#8]
 589 0086 D268     	 ldr r2,[r2,#12]
 590 0088 1868     	 ldr r0,[r3]
 591 008a 1979     	 ldrb r1,[r3,#4]
 592 008c 127B     	 ldrb r2,[r2,#12]
 593 008e FFF7FEFF 	 bl XMC_GPIO_SetHardwareControl
 594              	.LVL66:
1548:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   handle->config->mosi_1_pin->pin,
 595              	 .loc 1 1548 0
 596 0092 6268     	 ldr r2,[r4,#4]
 597 0094 1369     	 ldr r3,[r2,#16]
 598 0096 5269     	 ldr r2,[r2,#20]
 599 0098 1868     	 ldr r0,[r3]
 600 009a 127B     	 ldrb r2,[r2,#12]
 601 009c 1979     	 ldrb r1,[r3,#4]
 602 009e FFF7FEFF 	 bl XMC_GPIO_SetHardwareControl
 603              	.LVL67:
 604 00a2 0020     	 movs r0,#0
 605 00a4 70BD     	 pop {r4,r5,r6,pc}
 606              	.LVL68:
 607              	.L32:
1528:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Disable the HW control of the PINs */
 608              	 .loc 1 1528 0
 609 00a6 2168     	 ldr r1,[r4]
 610 00a8 9D7F     	 ldrb r5,[r3,#30]
 611              	.LVL69:
 612              	.LBB192:
 613              	.LBB193:
 614              	 .loc 3 1008 0
 615 00aa CA69     	 ldr r2,[r1,#28]
 616              	.LBE193:
 617              	.LBE192:
1530:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   handle->config->mosi_0_pin->pin,
 618              	 .loc 1 1530 0
 619 00ac 8468     	 ldr r4,[r0,#8]
 620              	.LVL70:
 621              	.LBB200:
 622              	.LBB198:
 623              	 .loc 3 1008 0
 624 00ae 22F05002 	 bic r2,r2,#80
 625 00b2 42F01002 	 orr r2,r2,#16
 626 00b6 CA61     	 str r2,[r1,#28]
 627              	.LVL71:
 628              	.LBB194:
 629              	.LBB195:
 707:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 630              	 .loc 2 707 0
 631 00b8 CB69     	 ldr r3,[r1,#28]
 632              	.LBE195:
 633              	.LBE194:
 634              	.LBE198:
 635              	.LBE200:
1530:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   handle->config->mosi_0_pin->pin,
 636              	 .loc 1 1530 0
 637 00ba 2068     	 ldr r0,[r4]
 638              	.LBB201:
 639              	.LBB199:
 640              	.LBB197:
 641              	.LBB196:
 707:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 642              	 .loc 2 707 0
 643 00bc 23F00703 	 bic r3,r3,#7
 644 00c0 2B43     	 orrs r3,r3,r5
 645 00c2 CB61     	 str r3,[r1,#28]
 646              	.LBE196:
 647              	.LBE197:
 648              	.LBE199:
 649              	.LBE201:
1530:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   handle->config->mosi_0_pin->pin,
 650              	 .loc 1 1530 0
 651 00c4 2179     	 ldrb r1,[r4,#4]
 652              	.LVL72:
 653 00c6 0022     	 movs r2,#0
 654 00c8 FFF7FEFF 	 bl XMC_GPIO_SetHardwareControl
 655              	.LVL73:
 656 00cc 0020     	 movs r0,#0
 657 00ce 70BD     	 pop {r4,r5,r6,pc}
 658              	.LVL74:
 659              	.L31:
1513:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Configure the pin as input */
 660              	 .loc 1 1513 0
 661 00d0 2168     	 ldr r1,[r4]
 662 00d2 5E7F     	 ldrb r6,[r3,#29]
 663              	.LVL75:
 664              	.LBB202:
 665              	.LBB203:
 666              	 .loc 3 1008 0
 667 00d4 CA69     	 ldr r2,[r1,#28]
 668              	.LBE203:
 669              	.LBE202:
1515:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Disable the HW control of the PINs */
 670              	 .loc 1 1515 0
 671 00d6 0569     	 ldr r5,[r0,#16]
 672              	.LBB210:
 673              	.LBB208:
 674              	 .loc 3 1008 0
 675 00d8 22F05002 	 bic r2,r2,#80
 676 00dc 42F01002 	 orr r2,r2,#16
 677 00e0 CA61     	 str r2,[r1,#28]
 678              	.LVL76:
 679              	.LBB204:
 680              	.LBB205:
 707:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 681              	 .loc 2 707 0
 682 00e2 CB69     	 ldr r3,[r1,#28]
 683              	.LBE205:
 684              	.LBE204:
 685              	.LBE208:
 686              	.LBE210:
1515:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Disable the HW control of the PINs */
 687              	 .loc 1 1515 0
 688 00e4 2868     	 ldr r0,[r5]
 689              	.LBB211:
 690              	.LBB209:
 691              	.LBB207:
 692              	.LBB206:
 707:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 693              	 .loc 2 707 0
 694 00e6 23F00703 	 bic r3,r3,#7
 695 00ea 3343     	 orrs r3,r3,r6
 696 00ec CB61     	 str r3,[r1,#28]
 697              	.LBE206:
 698              	.LBE207:
 699              	.LBE209:
 700              	.LBE211:
1515:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Disable the HW control of the PINs */
 701              	 .loc 1 1515 0
 702 00ee 2979     	 ldrb r1,[r5,#4]
 703              	.LVL77:
 704 00f0 0022     	 movs r2,#0
 705 00f2 FFF7FEFF 	 bl XMC_GPIO_SetMode
 706              	.LVL78:
1517:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   handle->config->mosi_0_pin->pin,
 707              	 .loc 1 1517 0
 708 00f6 6368     	 ldr r3,[r4,#4]
 709 00f8 9B68     	 ldr r3,[r3,#8]
 710 00fa 0022     	 movs r2,#0
 711 00fc 1868     	 ldr r0,[r3]
 712 00fe 1979     	 ldrb r1,[r3,#4]
 713 0100 FFF7FEFF 	 bl XMC_GPIO_SetHardwareControl
 714              	.LVL79:
1520:../Dave/Generated/SPI_MASTER/spi_master.c ****                                   handle->config->mosi_1_pin->pin,
 715              	 .loc 1 1520 0
 716 0104 6368     	 ldr r3,[r4,#4]
 717 0106 1B69     	 ldr r3,[r3,#16]
 718 0108 0022     	 movs r2,#0
 719 010a 1868     	 ldr r0,[r3]
 720 010c 1979     	 ldrb r1,[r3,#4]
 721 010e FFF7FEFF 	 bl XMC_GPIO_SetHardwareControl
 722              	.LVL80:
 723 0112 0020     	 movs r0,#0
 724 0114 70BD     	 pop {r4,r5,r6,pc}
 725              	.LVL81:
 726              	.L43:
1509:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 727              	 .loc 1 1509 0
 728 0116 0020     	 movs r0,#0
 729              	.LVL82:
 730 0118 70BD     	 pop {r4,r5,r6,pc}
 731              	.LVL83:
 732              	.L28:
 733              	.LBE212:
 734              	.LBE214:
 735              	.LBB215:
 736              	.LBB183:
1679:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 737              	 .loc 1 1679 0
 738 011a 0029     	 cmp r1,#0
 739 011c 95D1     	 bne .L30
 740 011e 5A7F     	 ldrb r2,[r3,#29]
 741 0120 072A     	 cmp r2,#7
 742 0122 88D1     	 bne .L29
 743 0124 96E7     	 b .L42
 744              	.LBE183:
 745              	.LBE215:
 746              	 .cfi_endproc
 747              	.LFE295:
 749 0126 00BF     	 .section .text.SPI_MASTER_SetBaudRate,"ax",%progbits
 750              	 .align 2
 751              	 .global SPI_MASTER_SetBaudRate
 752              	 .thumb
 753              	 .thumb_func
 755              	SPI_MASTER_SetBaudRate:
 756              	.LFB296:
 248:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 757              	 .loc 1 248 0
 758              	 .cfi_startproc
 759              	 
 760              	 
 761              	.LVL84:
 251:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 762              	 .loc 1 251 0
 763 0000 8368     	 ldr r3,[r0,#8]
 764 0002 93F82020 	 ldrb r2,[r3,#32]
 248:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 765              	 .loc 1 248 0
 766 0006 70B5     	 push {r4,r5,r6,lr}
 767              	.LCFI4:
 768              	 .cfi_def_cfa_offset 16
 769              	 .cfi_offset 4,-16
 770              	 .cfi_offset 5,-12
 771              	 .cfi_offset 6,-8
 772              	 .cfi_offset 14,-4
 251:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 773              	 .loc 1 251 0
 774 0008 12B1     	 cbz r2,.L73
 775              	.L65:
 283:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 776              	 .loc 1 283 0
 777 000a 0224     	 movs r4,#2
 778              	.LVL85:
 779              	.L48:
 287:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 780              	 .loc 1 287 0
 781 000c 2046     	 mov r0,r4
 782 000e 70BD     	 pop {r4,r5,r6,pc}
 783              	.LVL86:
 784              	.L73:
 251:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 785              	 .loc 1 251 0 discriminator 1
 786 0010 DB7F     	 ldrb r3,[r3,#31]
 787 0012 002B     	 cmp r3,#0
 788 0014 F9D1     	 bne .L65
 789 0016 0546     	 mov r5,r0
 254:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 790              	 .loc 1 254 0
 791 0018 0068     	 ldr r0,[r0]
 792              	.LVL87:
 793 001a 0E46     	 mov r6,r1
 794 001c FFF7FEFF 	 bl XMC_SPI_CH_Stop
 795              	.LVL88:
 256:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 796              	 .loc 1 256 0
 797 0020 0446     	 mov r4,r0
 798 0022 0028     	 cmp r0,#0
 799 0024 F2D1     	 bne .L48
 800              	.LVL89:
 801              	.LBB228:
 802              	.LBB229:
1623:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 803              	 .loc 1 1623 0
 804 0026 6B68     	 ldr r3,[r5,#4]
 805 0028 93F88720 	 ldrb r2,[r3,#135]
 806 002c 72B1     	 cbz r2,.L49
 807              	.LVL90:
 808              	.L50:
1625:../Dave/Generated/SPI_MASTER/spi_master.c ****                      handle->config->slave_select_pin[ss_line]->pin,
 809              	 .loc 1 1625 0
 810 002e 04F10C01 	 add r1,r4,#12
 811 0032 0022     	 movs r2,#0
 812 0034 53F82130 	 ldr r3,[r3,r1,lsl#2]
 813 0038 1868     	 ldr r0,[r3]
 814 003a 1979     	 ldrb r1,[r3,#4]
 815 003c FFF7FEFF 	 bl XMC_GPIO_SetMode
 816              	.LVL91:
1623:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 817              	 .loc 1 1623 0
 818 0040 6B68     	 ldr r3,[r5,#4]
 819 0042 93F88720 	 ldrb r2,[r3,#135]
 820 0046 0134     	 adds r4,r4,#1
 821              	.LVL92:
 822 0048 9442     	 cmp r4,r2
 823 004a F0D3     	 bcc .L50
 824              	.LVL93:
 825              	.L49:
1630:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 826              	 .loc 1 1630 0
 827 004c 9B6A     	 ldr r3,[r3,#40]
 828 004e 0022     	 movs r2,#0
 829 0050 1868     	 ldr r0,[r3]
 830 0052 1979     	 ldrb r1,[r3,#4]
 831 0054 FFF7FEFF 	 bl XMC_GPIO_SetMode
 832              	.LVL94:
1632:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 833              	 .loc 1 1632 0
 834 0058 AB68     	 ldr r3,[r5,#8]
 835 005a 1B7F     	 ldrb r3,[r3,#28]
 836 005c 072B     	 cmp r3,#7
 837 005e 25D8     	 bhi .L51
 838 0060 DFE813F0 	 tbh [pc,r3,lsl#1]
 839              	.L53:
 840 0064 B100     	 .2byte (.L52-.L53)/2
 841 0066 2400     	 .2byte (.L51-.L53)/2
 842 0068 2400     	 .2byte (.L51-.L53)/2
 843 006a 2400     	 .2byte (.L51-.L53)/2
 844 006c B100     	 .2byte (.L52-.L53)/2
 845 006e 2400     	 .2byte (.L51-.L53)/2
 846 0070 B900     	 .2byte (.L54-.L53)/2
 847 0072 0800     	 .2byte (.L55-.L53)/2
 848              	 .p2align 1
 849              	.L55:
1645:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_1_pin->port, handle->config->mosi_1_pin->pin, XMC_GPIO_
 850              	 .loc 1 1645 0
 851 0074 6B68     	 ldr r3,[r5,#4]
 852 0076 9B68     	 ldr r3,[r3,#8]
 853 0078 0022     	 movs r2,#0
 854 007a 1868     	 ldr r0,[r3]
 855 007c 1979     	 ldrb r1,[r3,#4]
 856 007e FFF7FEFF 	 bl XMC_GPIO_SetMode
 857              	.LVL95:
1646:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_2_pin->port, handle->config->mosi_2_pin->pin, XMC_GPIO_
 858              	 .loc 1 1646 0
 859 0082 6B68     	 ldr r3,[r5,#4]
 860 0084 1B69     	 ldr r3,[r3,#16]
 861 0086 0022     	 movs r2,#0
 862 0088 1868     	 ldr r0,[r3]
 863 008a 1979     	 ldrb r1,[r3,#4]
 864 008c FFF7FEFF 	 bl XMC_GPIO_SetMode
 865              	.LVL96:
1647:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_3_pin->port, handle->config->mosi_3_pin->pin, XMC_GPIO_
 866              	 .loc 1 1647 0
 867 0090 6B68     	 ldr r3,[r5,#4]
 868 0092 9B69     	 ldr r3,[r3,#24]
 869 0094 0022     	 movs r2,#0
 870 0096 1868     	 ldr r0,[r3]
 871 0098 1979     	 ldrb r1,[r3,#4]
 872 009a FFF7FEFF 	 bl XMC_GPIO_SetMode
 873              	.LVL97:
1648:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
 874              	 .loc 1 1648 0
 875 009e 6B68     	 ldr r3,[r5,#4]
 876 00a0 1B6A     	 ldr r3,[r3,#32]
 877 00a2 0022     	 movs r2,#0
 878 00a4 1868     	 ldr r0,[r3]
 879 00a6 1979     	 ldrb r1,[r3,#4]
 880 00a8 FFF7FEFF 	 bl XMC_GPIO_SetMode
 881              	.LVL98:
 882              	.L51:
 883              	.LBE229:
 884              	.LBE228:
 262:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 885              	 .loc 1 262 0
 886 00ac 3146     	 mov r1,r6
 887 00ae 2868     	 ldr r0,[r5]
 888 00b0 FFF7FEFF 	 bl XMC_SPI_CH_SetBaudrate
 889              	.LVL99:
 267:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 890              	 .loc 1 267 0
 891 00b4 95E80C00 	 ldmia r5,{r2,r3}
 264:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 892              	 .loc 1 264 0
 893 00b8 0446     	 mov r4,r0
 894 00ba 50B9     	 cbnz r0,.L57
 895              	.LVL100:
 896              	.LBB231:
 897              	.LBB232:
 802:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 								   USIC_CH_BRG_PCTQ_Msk)) |
 898              	 .loc 3 802 0
 899 00bc 5169     	 ldr r1,[r2,#20]
 900              	.LBE232:
 901              	.LBE231:
 267:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 902              	 .loc 1 267 0
 903 00be 93F88800 	 ldrb r0,[r3,#136]
 904              	.LVL101:
 905              	.LBB234:
 906              	.LBB233:
 802:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 								   USIC_CH_BRG_PCTQ_Msk)) |
 907              	 .loc 3 802 0
 908 00c2 21F4FE41 	 bic r1,r1,#32512
 909 00c6 41F48071 	 orr r1,r1,#256
 804:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 910              	 .loc 3 804 0
 911 00ca 0138     	 subs r0,r0,#1
 912              	.LVL102:
 803:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                  (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 913              	 .loc 3 803 0
 914 00cc 41EA8021 	 orr r1,r1,r0,lsl#10
 802:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** 								   USIC_CH_BRG_PCTQ_Msk)) |
 915              	 .loc 3 802 0
 916 00d0 5161     	 str r1,[r2,#20]
 917              	.LVL103:
 918              	.L57:
 919              	.LBE233:
 920              	.LBE234:
 921              	.LBB235:
 922              	.LBB236:
 923              	.LBB237:
1863:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1864:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1865:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1866:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1867:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1868:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1869:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
1870:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1871:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1872:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1873:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1874:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1875:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1876:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1877:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1878:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1879:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1880:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1881:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1882:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1883:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1884:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1885:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1886:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1887:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1888:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
1889:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1890:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1891:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1892:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1893:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1894:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1895:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1896:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1897:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1898:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1899:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1900:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1901:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1902:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1903:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1904:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1905:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1906:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1907:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return uint32_t Receive FIFO filling level. \n
1908:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= receive FIFO size.
1909:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1910:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1911:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO filling level. \n\n
1912:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * For every word received, the filling level is incremented. The API gives the value
1913:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * of this filling level. The filling level is decremented when the data is read out of the 
1914:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * receive FIFO.
1915:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1916:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1917:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1918:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1919:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1920:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1921:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_RBFLVL_Msk) >> USIC_CH_TRBSR_RBFLVL_Pos);
1922:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1923:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1924:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1925:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1926:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1927:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return Status of standard receive buffer, alternative receive buffer and receive buffer error e
1928:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1929:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1930:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1931:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1932:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Gets the receive FIFO events' status. \n\n
1933:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Gives the status of receive FIFO standard receive buffer event, alternative receive buffer event
1934:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The status bits are located at their bitpositions in the TRBSR register in the returned value.
1935:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * User can make use of the XMC_USIC_CH_RXFIFO_EVENT enumeration for checking the status of return 
1936:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1937:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
1938:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1939:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1940:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1941:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent()\n\n\n
1942:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1943:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1944:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1945:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_SRBI_Msk |
1946:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_RBERI_Msk |
1947:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                               USIC_CH_TRBSR_ARBI_Msk));
1948:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1949:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1950:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1951:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1952:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1953:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param  event Receive FIFO events to be cleared. \n
1954:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1955:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1956:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1957:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1958:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1959:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Clears the receive FIFO event flags in the status register. \n\n
1960:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1961:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1962:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EVENT enumeration can be used as input. Multiple events
1963:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1964:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * multiple event enumerations.
1965:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1966:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1967:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
1968:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1969:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1970:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                    const uint32_t event)
1971:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1972:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->TRBSCR = event;
1973:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1974:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1975:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1976:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1977:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1978:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1979:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1980:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1981:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Enables time measurement using the capture mode timer. \n\n
1982:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Time measurement is enabled by setting the timer enable flag in BRG register.
1983:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1984:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1985:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTimeMeasurement() \n\n\n
1986:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
1987:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTimeMeasurement(XMC_USIC_CH_t *const channel)
1988:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
1989:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG |= (uint32_t)USIC_CH_BRG_TMEN_Msk;
1990:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
1991:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
1992:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
1993:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1994:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1995:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
1996:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
1997:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
1998:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Disables time measurement using the capture mode timer. \n\n
1999:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Time measurement is disabled by clearing the timer enable flag in BRG register.
2000:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
2001:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2002:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTimeMeasurement() \n\n\n
2003:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
2004:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTimeMeasurement(XMC_USIC_CH_t *const channel)
2005:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
2006:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG &= (uint32_t)~USIC_CH_BRG_TMEN_Msk;
2007:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
2008:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
2009:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
2010:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2011:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2012:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the master clock output. \n
2013:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0, @ref XMC_USIC_CH_BRG_MASTER_CL
2014:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2015:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
2016:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2017:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode pin level for the master clock output. \n
2018:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
2019:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMclkOutputPassiveLevel(XMC_USIC_CH_t *const channel,
2020:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_MASTER_CLOCK_PASSI
2021:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
2022:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_MCLKCFG_Msk)) | (uint32_t)passive_level;
2023:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
2024:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
2025:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2026:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2027:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param passive_level Passive level for the clock output. \n
2028:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
2029:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
2030:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
2031:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED,
2032:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param clock_output Shift clock source selection. \n
2033:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 					\b Range: Use @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,
2034:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 								  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1
2035:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2036:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
2037:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2038:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the idle mode shift clock output level and selects the shift clock source. \n\n
2039:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Shift clock idle mode output level can be set to logic high or low. Shift clock output can be co
2040:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * delay of half shift clock period. Both the configurations are available as enumeration values de
2041:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t.
2042:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * This value should be configured based on the slave device requirement.
2043:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Shift clock source can be selected between internal clock(master) and external input(slave).
2044:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 
2045:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
2046:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
2047:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIV
2048:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
2049:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
2050:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 924              	 .loc 2 2050 0
 925 00d2 5069     	 ldr r0,[r2,#20]
2051:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
 926              	 .loc 2 2051 0
 927 00d4 D3F88010 	 ldr r1,[r3,#128]
2050:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
 928              	 .loc 2 2050 0
 929 00d8 20F05040 	 bic r0,r0,#-805306368
 930              	 .loc 2 2051 0
 931 00dc 0143     	 orrs r1,r1,r0
2050:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
 932              	 .loc 2 2050 0
 933 00de 5161     	 str r1,[r2,#20]
 934              	.LVL104:
 935              	.LBE237:
 936              	.LBE236:
 937              	.LBE235:
 938              	.LBB238:
 939              	.LBB239:
 940              	.LBB240:
2052:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                  (uint32_t)passive_level |
2053:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****                  (uint32_t)clock_output;
2054:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
2055:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** 
2056:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** /**
2057:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
2058:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
2059:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @param mode USIC channel operation mode. \n
2060:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_OPERATING_MODE_IDLE, @ref XMC_USIC_CH_OPERATING_MODE_SPI,
2061:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_UART, @ref XMC_USIC_CH_OPERATING_MODE_I2S,
2062:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_I2C.
2063:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * @return None
2064:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
2065:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Description</b><br>
2066:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * Sets the USIC channel operation mode.\n\n
2067:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * A USIC channel can support multiple serial communication protocols like UART, SPI, I2C and I2S.
2068:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * The API sets the input operation mode to the USIC channel.
2069:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  *
2070:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2071:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
2072:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****  */
2073:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_
2074:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** {
2075:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h ****   channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 941              	 .loc 2 2075 0
 942 00e0 116C     	 ldr r1,[r2,#64]
 943 00e2 21F00F01 	 bic r1,r1,#15
 944 00e6 41F00101 	 orr r1,r1,#1
 945 00ea 1164     	 str r1,[r2,#64]
 946              	.LVL105:
 947              	.LBE240:
 948              	.LBE239:
 949              	.LBE238:
 950              	.LBB241:
 951              	.LBB242:
1566:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 952              	 .loc 1 1566 0
 953 00ec 93F88720 	 ldrb r2,[r3,#135]
 954              	.LVL106:
 955 00f0 7AB1     	 cbz r2,.L58
 956 00f2 0026     	 movs r6,#0
 957              	.LVL107:
 958              	.L59:
 959 00f4 03EB8603 	 add r3,r3,r6,lsl#2
 960 00f8 0136     	 adds r6,r6,#1
 961              	.LVL108:
1568:../Dave/Generated/SPI_MASTER/spi_master.c ****                      handle->config->slave_select_pin[ss_line]->pin,
 962              	 .loc 1 1568 0
 963 00fa 196B     	 ldr r1,[r3,#48]
 964 00fc 1B6D     	 ldr r3,[r3,#80]
 965 00fe 0868     	 ldr r0,[r1]
 966 0100 1A78     	 ldrb r2,[r3]
 967 0102 0979     	 ldrb r1,[r1,#4]
 968 0104 FFF7FEFF 	 bl XMC_GPIO_SetMode
 969              	.LVL109:
1566:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 970              	 .loc 1 1566 0
 971 0108 6B68     	 ldr r3,[r5,#4]
 972 010a 93F88720 	 ldrb r2,[r3,#135]
 973 010e 9642     	 cmp r6,r2
 974 0110 F0D3     	 bcc .L59
 975              	.LVL110:
 976              	.L58:
1573:../Dave/Generated/SPI_MASTER/spi_master.c ****                    handle->config->sclk_out_pin->pin,
 977              	 .loc 1 1573 0
 978 0112 996A     	 ldr r1,[r3,#40]
 979 0114 DB6A     	 ldr r3,[r3,#44]
 980 0116 0868     	 ldr r0,[r1]
 981 0118 1A78     	 ldrb r2,[r3]
 982 011a 0979     	 ldrb r1,[r1,#4]
 983 011c FFF7FEFF 	 bl XMC_GPIO_SetMode
 984              	.LVL111:
1577:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 985              	 .loc 1 1577 0
 986 0120 AB68     	 ldr r3,[r5,#8]
 987 0122 1B7F     	 ldrb r3,[r3,#28]
 988 0124 072B     	 cmp r3,#7
 989 0126 3FF671AF 	 bhi .L48
 990 012a 01A2     	 adr r2,.L61
 991 012c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 992              	 .p2align 2
 993              	.L61:
 994 0130 B5010000 	 .word .L60+1
 995 0134 0D000000 	 .word .L48+1
 996 0138 0D000000 	 .word .L48+1
 997 013c 0D000000 	 .word .L48+1
 998 0140 B5010000 	 .word .L60+1
 999 0144 0D000000 	 .word .L48+1
 1000 0148 93010000 	 .word .L62+1
 1001 014c 51010000 	 .word .L63+1
 1002              	 .p2align 1
 1003              	.L63:
1596:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_0_pin->pin,
 1004              	 .loc 1 1596 0
 1005 0150 6A68     	 ldr r2,[r5,#4]
 1006 0152 9368     	 ldr r3,[r2,#8]
 1007 0154 D268     	 ldr r2,[r2,#12]
 1008 0156 1868     	 ldr r0,[r3]
 1009 0158 1979     	 ldrb r1,[r3,#4]
 1010 015a 1278     	 ldrb r2,[r2]
 1011 015c FFF7FEFF 	 bl XMC_GPIO_SetMode
 1012              	.LVL112:
1599:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_1_pin->pin,
 1013              	 .loc 1 1599 0
 1014 0160 6A68     	 ldr r2,[r5,#4]
 1015 0162 1369     	 ldr r3,[r2,#16]
 1016 0164 5269     	 ldr r2,[r2,#20]
 1017 0166 1868     	 ldr r0,[r3]
 1018 0168 1979     	 ldrb r1,[r3,#4]
 1019 016a 1278     	 ldrb r2,[r2]
 1020 016c FFF7FEFF 	 bl XMC_GPIO_SetMode
 1021              	.LVL113:
1602:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_2_pin->pin,
 1022              	 .loc 1 1602 0
 1023 0170 6A68     	 ldr r2,[r5,#4]
 1024 0172 9369     	 ldr r3,[r2,#24]
 1025 0174 D269     	 ldr r2,[r2,#28]
 1026 0176 1868     	 ldr r0,[r3]
 1027 0178 1979     	 ldrb r1,[r3,#4]
 1028 017a 1278     	 ldrb r2,[r2]
 1029 017c FFF7FEFF 	 bl XMC_GPIO_SetMode
 1030              	.LVL114:
1605:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_3_pin->pin,
 1031              	 .loc 1 1605 0
 1032 0180 6A68     	 ldr r2,[r5,#4]
 1033 0182 136A     	 ldr r3,[r2,#32]
 1034 0184 526A     	 ldr r2,[r2,#36]
 1035 0186 1868     	 ldr r0,[r3]
 1036 0188 1278     	 ldrb r2,[r2]
 1037 018a 1979     	 ldrb r1,[r3,#4]
 1038 018c FFF7FEFF 	 bl XMC_GPIO_SetMode
 1039              	.LVL115:
 1040 0190 3CE7     	 b .L48
 1041              	.L62:
1587:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_0_pin->pin,
 1042              	 .loc 1 1587 0
 1043 0192 6A68     	 ldr r2,[r5,#4]
 1044 0194 9368     	 ldr r3,[r2,#8]
 1045 0196 D268     	 ldr r2,[r2,#12]
 1046 0198 1868     	 ldr r0,[r3]
 1047 019a 1979     	 ldrb r1,[r3,#4]
 1048 019c 1278     	 ldrb r2,[r2]
 1049 019e FFF7FEFF 	 bl XMC_GPIO_SetMode
 1050              	.LVL116:
1590:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_1_pin->pin,
 1051              	 .loc 1 1590 0
 1052 01a2 6A68     	 ldr r2,[r5,#4]
 1053 01a4 1369     	 ldr r3,[r2,#16]
 1054 01a6 5269     	 ldr r2,[r2,#20]
 1055 01a8 1868     	 ldr r0,[r3]
 1056 01aa 1278     	 ldrb r2,[r2]
 1057 01ac 1979     	 ldrb r1,[r3,#4]
 1058 01ae FFF7FEFF 	 bl XMC_GPIO_SetMode
 1059              	.LVL117:
 1060 01b2 2BE7     	 b .L48
 1061              	.L60:
1581:../Dave/Generated/SPI_MASTER/spi_master.c ****                        handle->config->mosi_0_pin->pin,
 1062              	 .loc 1 1581 0
 1063 01b4 6A68     	 ldr r2,[r5,#4]
 1064 01b6 9368     	 ldr r3,[r2,#8]
 1065 01b8 D268     	 ldr r2,[r2,#12]
 1066 01ba 1868     	 ldr r0,[r3]
 1067 01bc 1278     	 ldrb r2,[r2]
 1068 01be 1979     	 ldrb r1,[r3,#4]
 1069 01c0 FFF7FEFF 	 bl XMC_GPIO_SetMode
 1070              	.LVL118:
 1071 01c4 22E7     	 b .L48
 1072              	.LVL119:
 1073              	.L52:
 1074              	.LBE242:
 1075              	.LBE241:
 1076              	.LBB243:
 1077              	.LBB230:
1636:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
 1078              	 .loc 1 1636 0
 1079 01c6 6B68     	 ldr r3,[r5,#4]
 1080 01c8 9B68     	 ldr r3,[r3,#8]
 1081 01ca 0022     	 movs r2,#0
 1082 01cc 1868     	 ldr r0,[r3]
 1083 01ce 1979     	 ldrb r1,[r3,#4]
 1084 01d0 FFF7FEFF 	 bl XMC_GPIO_SetMode
 1085              	.LVL120:
 1086 01d4 6AE7     	 b .L51
 1087              	.L54:
1640:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_GPIO_SetMode(handle->config->mosi_1_pin->port, handle->config->mosi_1_pin->pin, XMC_GPIO_
 1088              	 .loc 1 1640 0
 1089 01d6 6B68     	 ldr r3,[r5,#4]
 1090 01d8 9B68     	 ldr r3,[r3,#8]
 1091 01da 0022     	 movs r2,#0
 1092 01dc 1868     	 ldr r0,[r3]
 1093 01de 1979     	 ldrb r1,[r3,#4]
 1094 01e0 FFF7FEFF 	 bl XMC_GPIO_SetMode
 1095              	.LVL121:
1641:../Dave/Generated/SPI_MASTER/spi_master.c ****       break;
 1096              	 .loc 1 1641 0
 1097 01e4 6B68     	 ldr r3,[r5,#4]
 1098 01e6 1B69     	 ldr r3,[r3,#16]
 1099 01e8 0022     	 movs r2,#0
 1100 01ea 1868     	 ldr r0,[r3]
 1101 01ec 1979     	 ldrb r1,[r3,#4]
 1102 01ee FFF7FEFF 	 bl XMC_GPIO_SetMode
 1103              	.LVL122:
 1104 01f2 5BE7     	 b .L51
 1105              	.LBE230:
 1106              	.LBE243:
 1107              	 .cfi_endproc
 1108              	.LFE296:
 1110              	 .section .text.SPI_MASTER_Transmit,"ax",%progbits
 1111              	 .align 2
 1112              	 .global SPI_MASTER_Transmit
 1113              	 .thumb
 1114              	 .thumb_func
 1116              	SPI_MASTER_Transmit:
 1117              	.LFB297:
 290:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 1118              	 .loc 1 290 0
 1119              	 .cfi_startproc
 1120              	 
 1121              	 
 1122              	 
 1123              	.LVL123:
 296:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 1124              	 .loc 1 296 0
 1125 0000 4368     	 ldr r3,[r0,#4]
 290:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 1126              	 .loc 1 290 0
 1127 0002 F0B4     	 push {r4,r5,r6,r7}
 1128              	.LCFI5:
 1129              	 .cfi_def_cfa_offset 16
 1130              	 .cfi_offset 4,-16
 1131              	 .cfi_offset 5,-12
 1132              	 .cfi_offset 6,-8
 1133              	 .cfi_offset 7,-4
 296:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 1134              	 .loc 1 296 0
 1135 0004 93F88440 	 ldrb r4,[r3,#132]
 1136 0008 14B1     	 cbz r4,.L83
 293:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1137              	 .loc 1 293 0
 1138 000a 0120     	 movs r0,#1
 1139              	.LVL124:
 1140              	.L75:
 317:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1141              	 .loc 1 317 0
 1142 000c F0BC     	 pop {r4,r5,r6,r7}
 1143              	.LCFI6:
 1144              	 .cfi_remember_state
 1145              	 .cfi_restore 7
 1146              	 .cfi_restore 6
 1147              	 .cfi_restore 5
 1148              	 .cfi_restore 4
 1149              	 .cfi_def_cfa_offset 0
 1150 000e 7047     	 bx lr
 1151              	.LVL125:
 1152              	.L83:
 1153              	.LCFI7:
 1154              	 .cfi_restore_state
 1155              	.LBB256:
 1156              	.LBB257:
 363:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1157              	 .loc 1 363 0
 1158 0010 8468     	 ldr r4,[r0,#8]
 1159              	.LVL126:
 368:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 1160              	 .loc 1 368 0
 1161 0012 01B1     	 cbz r1,.L80
 1162 0014 12B9     	 cbnz r2,.L84
 1163              	.L80:
 406:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 1164              	 .loc 1 406 0
 1165 0016 0320     	 movs r0,#3
 1166              	.LVL127:
 1167              	.LBE257:
 1168              	.LBE256:
 317:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1169              	 .loc 1 317 0
 1170 0018 F0BC     	 pop {r4,r5,r6,r7}
 1171              	.LCFI8:
 1172              	 .cfi_remember_state
 1173              	 .cfi_restore 4
 1174              	 .cfi_restore 5
 1175              	 .cfi_restore 6
 1176              	 .cfi_restore 7
 1177              	 .cfi_def_cfa_offset 0
 1178              	.LVL128:
 1179 001a 7047     	 bx lr
 1180              	.LVL129:
 1181              	.L84:
 1182              	.LCFI9:
 1183              	 .cfi_restore_state
 1184              	.LBB281:
 1185              	.LBB280:
 372:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 1186              	 .loc 1 372 0
 1187 001c 94F82050 	 ldrb r5,[r4,#32]
 1188 0020 05F0FF06 	 and r6,r5,#255
 1189 0024 0DB1     	 cbz r5,.L85
 370:../Dave/Generated/SPI_MASTER/spi_master.c ****       /*Check data pointer is valid or not*/
 1190              	 .loc 1 370 0
 1191 0026 0220     	 movs r0,#2
 1192              	.LVL130:
 1193 0028 F0E7     	 b .L75
 1194              	.LVL131:
 1195              	.L85:
 374:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 1196              	 .loc 1 374 0
 1197 002a 2568     	 ldr r5,[r4]
 387:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 1198              	 .loc 1 387 0
 1199 002c 93F87C70 	 ldrb r7,[r3,#124]
 383:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_busy = true;
 1200              	 .loc 1 383 0
 1201 0030 A660     	 str r6,[r4,#8]
 374:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 1202              	 .loc 1 374 0
 1203 0032 082D     	 cmp r5,#8
 1204 0034 94BF     	 ite ls
 1205 0036 0025     	 movls r5,#0
 1206 0038 0125     	 movhi r5,#1
 1207              	.LVL132:
 381:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Initialize to first index and set the busy flag */
 1208              	 .loc 1 381 0
 1209 003a AA40     	 lsls r2,r2,r5
 1210              	.LVL133:
 384:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1211              	 .loc 1 384 0
 1212 003c 0125     	 movs r5,#1
 381:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Initialize to first index and set the busy flag */
 1213              	 .loc 1 381 0
 1214 003e 6260     	 str r2,[r4,#4]
 380:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 1215              	 .loc 1 380 0
 1216 0040 A161     	 str r1,[r4,#24]
 384:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1217              	 .loc 1 384 0
 1218 0042 84F82050 	 strb r5,[r4,#32]
 390:../Dave/Generated/SPI_MASTER/spi_master.c ****           XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_ST
 1219              	 .loc 1 390 0
 1220 0046 0268     	 ldr r2,[r0]
 387:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 1221              	 .loc 1 387 0
 1222 0048 CFB1     	 cbz r7,.L76
 1223              	.LVL134:
 1224              	.LBB258:
 1225              	.LBB259:
1596:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1226              	 .loc 2 1596 0
 1227 004a 4FF40041 	 mov r1,#32768
 1228              	.LVL135:
 1229 004e C2F81811 	 str r1,[r2,#280]
 1230              	.LVL136:
 1231              	.LBE259:
 1232              	.LBE258:
 1233              	.LBB260:
 1234              	.LBB261:
1461:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1235              	 .loc 2 1461 0
 1236 0052 D2F80811 	 ldr r1,[r2,#264]
 1237 0056 41F08041 	 orr r1,r1,#1073741824
 1238 005a C2F80811 	 str r1,[r2,#264]
 1239              	.LVL137:
 1240              	.L77:
 1241              	.LBE261:
 1242              	.LBE260:
 397:../Dave/Generated/SPI_MASTER/spi_master.c ****         status = SPI_MASTER_STATUS_SUCCESS;
 1243              	 .loc 1 397 0
 1244 005e 207F     	 ldrb r0,[r4,#28]
 1245              	.LVL138:
 1246              	.LBB262:
 1247              	.LBB263:
 465:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 1248              	 .loc 3 465 0
 1249 0060 116C     	 ldr r1,[r2,#64]
 1250              	.LBE263:
 1251              	.LBE262:
 1252              	.LBB267:
 1253              	.LBB268:
1347:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1254              	 .loc 2 1347 0
 1255 0062 93F88940 	 ldrb r4,[r3,#137]
 1256              	.LVL139:
 1257              	.LBE268:
 1258              	.LBE267:
 1259              	.LBB272:
 1260              	.LBB264:
 466:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 1261              	 .loc 3 466 0
 1262 0066 8301     	 lsls r3,r0,#6
 1263 0068 D8B2     	 uxtb r0,r3
 1264              	.LVL140:
 465:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 1265              	 .loc 3 465 0
 1266 006a 21F0C003 	 bic r3,r1,#192
 1267              	.LBE264:
 1268              	.LBE272:
 1269              	.LBB273:
 1270              	.LBB269:
1347:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1271              	 .loc 2 1347 0
 1272 006e 4FF48031 	 mov r1,#65536
 1273              	.LBE269:
 1274              	.LBE273:
 1275              	.LBB274:
 1276              	.LBB265:
 465:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 1277              	 .loc 3 465 0
 1278 0072 0343     	 orrs r3,r3,r0
 1279              	.LBE265:
 1280              	.LBE274:
 1281              	.LBB275:
 1282              	.LBB270:
1347:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1283              	 .loc 2 1347 0
 1284 0074 A140     	 lsls r1,r1,r4
 1285              	.LBE270:
 1286              	.LBE275:
 1287              	.LBB276:
 1288              	.LBB266:
 465:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 1289              	 .loc 3 465 0
 1290 0076 1364     	 str r3,[r2,#64]
 1291              	.LVL141:
 1292              	.LBE266:
 1293              	.LBE276:
 398:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1294              	 .loc 1 398 0
 1295 0078 0020     	 movs r0,#0
 1296              	.LBB277:
 1297              	.LBB271:
1347:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1298              	 .loc 2 1347 0
 1299 007a 9166     	 str r1,[r2,#104]
 1300              	.LVL142:
 1301 007c C6E7     	 b .L75
 1302              	.LVL143:
 1303              	.L76:
 1304              	.LBE271:
 1305              	.LBE277:
 1306              	.LBB278:
 1307              	.LBB279:
1116:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1308              	 .loc 2 1116 0
 1309 007e 116C     	 ldr r1,[r2,#64]
 1310              	.LVL144:
 1311 0080 41F40051 	 orr r1,r1,#8192
 1312 0084 1164     	 str r1,[r2,#64]
 1313 0086 EAE7     	 b .L77
 1314              	.LBE279:
 1315              	.LBE278:
 1316              	.LBE280:
 1317              	.LBE281:
 1318              	 .cfi_endproc
 1319              	.LFE297:
 1321              	 .section .text.SPI_MASTER_Receive,"ax",%progbits
 1322              	 .align 2
 1323              	 .global SPI_MASTER_Receive
 1324              	 .thumb
 1325              	 .thumb_func
 1327              	SPI_MASTER_Receive:
 1328              	.LFB298:
 320:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 1329              	 .loc 1 320 0
 1330              	 .cfi_startproc
 1331              	 
 1332              	 
 1333              	 
 1334              	.LVL145:
 1335 0000 70B4     	 push {r4,r5,r6}
 1336              	.LCFI10:
 1337              	 .cfi_def_cfa_offset 12
 1338              	 .cfi_offset 4,-12
 1339              	 .cfi_offset 5,-8
 1340              	 .cfi_offset 6,-4
 326:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 1341              	 .loc 1 326 0
 1342 0002 4468     	 ldr r4,[r0,#4]
 1343 0004 94F88540 	 ldrb r4,[r4,#133]
 1344 0008 14B1     	 cbz r4,.L94
 323:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1345              	 .loc 1 323 0
 1346 000a 0120     	 movs r0,#1
 1347              	.LVL146:
 1348              	.L87:
 347:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1349              	 .loc 1 347 0
 1350 000c 70BC     	 pop {r4,r5,r6}
 1351              	.LCFI11:
 1352              	 .cfi_remember_state
 1353              	 .cfi_restore 6
 1354              	 .cfi_restore 5
 1355              	 .cfi_restore 4
 1356              	 .cfi_def_cfa_offset 0
 1357 000e 7047     	 bx lr
 1358              	.LVL147:
 1359              	.L94:
 1360              	.LCFI12:
 1361              	 .cfi_restore_state
 1362              	.LBB284:
 1363              	.LBB285:
 666:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1364              	 .loc 1 666 0
 1365 0010 8368     	 ldr r3,[r0,#8]
 1366              	.LVL148:
 672:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 1367              	 .loc 1 672 0
 1368 0012 01B1     	 cbz r1,.L90
 1369 0014 12B9     	 cbnz r2,.L95
 1370              	.L90:
 690:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 1371              	 .loc 1 690 0
 1372 0016 0320     	 movs r0,#3
 1373              	.LVL149:
 1374              	.LBE285:
 1375              	.LBE284:
 347:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1376              	 .loc 1 347 0
 1377 0018 70BC     	 pop {r4,r5,r6}
 1378              	.LCFI13:
 1379              	 .cfi_remember_state
 1380              	 .cfi_restore 4
 1381              	 .cfi_restore 5
 1382              	 .cfi_restore 6
 1383              	 .cfi_def_cfa_offset 0
 1384 001a 7047     	 bx lr
 1385              	.LVL150:
 1386              	.L95:
 1387              	.LCFI14:
 1388              	 .cfi_restore_state
 1389              	.LBB288:
 1390              	.LBB286:
 675:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 1391              	 .loc 1 675 0
 1392 001c DC7F     	 ldrb r4,[r3,#31]
 1393 001e 0CB1     	 cbz r4,.L96
 1394              	.L92:
 670:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Check whether SPI channel is free or not */
 1395              	 .loc 1 670 0
 1396 0020 0220     	 movs r0,#2
 1397              	.LVL151:
 1398 0022 F3E7     	 b .L87
 1399              	.LVL152:
 1400              	.L96:
 675:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 1401              	 .loc 1 675 0
 1402 0024 93F82040 	 ldrb r4,[r3,#32]
 1403 0028 04F0FF05 	 and r5,r4,#255
 1404 002c 002C     	 cmp r4,#0
 1405 002e F7D1     	 bne .L92
 677:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data = dataptr;
 1406              	 .loc 1 677 0
 1407 0030 0124     	 movs r4,#1
 679:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_count = count;
 1408              	 .loc 1 679 0
 1409 0032 064E     	 ldr r6,.L97
 677:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data = dataptr;
 1410              	 .loc 1 677 0
 1411 0034 DC77     	 strb r4,[r3,#31]
 678:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data = &dummy_data[0];
 1412              	 .loc 1 678 0
 1413 0036 5961     	 str r1,[r3,#20]
 681:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data_dummy = false;
 1414              	 .loc 1 681 0
 1415 0038 83F82140 	 strb r4,[r3,#33]
 679:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_count = count;
 1416              	 .loc 1 679 0
 1417 003c 9E61     	 str r6,[r3,#24]
 682:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1418              	 .loc 1 682 0
 1419 003e 83F82250 	 strb r5,[r3,#34]
 680:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_dummy = true;
 1420              	 .loc 1 680 0
 1421 0042 5A60     	 str r2,[r3,#4]
 684:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1422              	 .loc 1 684 0
 1423 0044 1146     	 mov r1,r2
 1424              	.LVL153:
 1425              	.LBE286:
 1426              	.LBE288:
 347:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1427              	 .loc 1 347 0
 1428 0046 70BC     	 pop {r4,r5,r6}
 1429              	.LCFI15:
 1430              	 .cfi_restore 6
 1431              	 .cfi_restore 5
 1432              	 .cfi_restore 4
 1433              	 .cfi_def_cfa_offset 0
 1434              	.LBB289:
 1435              	.LBB287:
 684:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1436              	 .loc 1 684 0
 1437 0048 FFF7FEBF 	 b SPI_MASTER_lReceiveIRQ
 1438              	.LVL154:
 1439              	.L98:
 1440              	 .align 2
 1441              	.L97:
 1442 004c 00000000 	 .word .LANCHOR0
 1443              	.LBE287:
 1444              	.LBE289:
 1445              	 .cfi_endproc
 1446              	.LFE298:
 1448              	 .section .text.SPI_MASTER_StartTransmitIRQ,"ax",%progbits
 1449              	 .align 2
 1450              	 .global SPI_MASTER_StartTransmitIRQ
 1451              	 .thumb
 1452              	 .thumb_func
 1454              	SPI_MASTER_StartTransmitIRQ:
 1455              	.LFB299:
 354:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 1456              	 .loc 1 354 0
 1457              	 .cfi_startproc
 1458              	 
 1459              	 
 1460              	 
 1461              	.LVL155:
 365:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 1462              	 .loc 1 365 0
 1463 0000 4368     	 ldr r3,[r0,#4]
 354:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 1464              	 .loc 1 354 0
 1465 0002 F0B4     	 push {r4,r5,r6,r7}
 1466              	.LCFI16:
 1467              	 .cfi_def_cfa_offset 16
 1468              	 .cfi_offset 4,-16
 1469              	 .cfi_offset 5,-12
 1470              	 .cfi_offset 6,-8
 1471              	 .cfi_offset 7,-4
 365:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 1472              	 .loc 1 365 0
 1473 0004 93F88440 	 ldrb r4,[r3,#132]
 363:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1474              	 .loc 1 363 0
 1475 0008 8568     	 ldr r5,[r0,#8]
 1476              	.LVL156:
 365:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 1477              	 .loc 1 365 0
 1478 000a 14B1     	 cbz r4,.L108
 362:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle = handle->runtime;
 1479              	 .loc 1 362 0
 1480 000c 0420     	 movs r0,#4
 1481              	.LVL157:
 1482              	.L100:
 410:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 1483              	 .loc 1 410 0
 1484 000e F0BC     	 pop {r4,r5,r6,r7}
 1485              	.LCFI17:
 1486              	 .cfi_remember_state
 1487              	 .cfi_restore 7
 1488              	 .cfi_restore 6
 1489              	 .cfi_restore 5
 1490              	 .cfi_restore 4
 1491              	 .cfi_def_cfa_offset 0
 1492              	.LVL158:
 1493 0010 7047     	 bx lr
 1494              	.LVL159:
 1495              	.L108:
 1496              	.LCFI18:
 1497              	 .cfi_restore_state
 368:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 1498              	 .loc 1 368 0
 1499 0012 01B1     	 cbz r1,.L105
 368:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 1500              	 .loc 1 368 0 is_stmt 0 discriminator 1
 1501 0014 12B9     	 cbnz r2,.L109
 1502              	.L105:
 406:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 1503              	 .loc 1 406 0 is_stmt 1
 1504 0016 0320     	 movs r0,#3
 1505              	.LVL160:
 410:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 1506              	 .loc 1 410 0
 1507 0018 F0BC     	 pop {r4,r5,r6,r7}
 1508              	.LCFI19:
 1509              	 .cfi_remember_state
 1510              	 .cfi_restore 4
 1511              	 .cfi_restore 5
 1512              	 .cfi_restore 6
 1513              	 .cfi_restore 7
 1514              	 .cfi_def_cfa_offset 0
 1515              	.LVL161:
 1516 001a 7047     	 bx lr
 1517              	.LVL162:
 1518              	.L109:
 1519              	.LCFI20:
 1520              	 .cfi_restore_state
 372:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 1521              	 .loc 1 372 0
 1522 001c 95F82040 	 ldrb r4,[r5,#32]
 1523 0020 04F0FF06 	 and r6,r4,#255
 1524 0024 0CB1     	 cbz r4,.L110
 370:../Dave/Generated/SPI_MASTER/spi_master.c ****       /*Check data pointer is valid or not*/
 1525              	 .loc 1 370 0
 1526 0026 0220     	 movs r0,#2
 1527              	.LVL163:
 1528 0028 F1E7     	 b .L100
 1529              	.LVL164:
 1530              	.L110:
 374:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 1531              	 .loc 1 374 0
 1532 002a 2C68     	 ldr r4,[r5]
 387:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 1533              	 .loc 1 387 0
 1534 002c 93F87C70 	 ldrb r7,[r3,#124]
 383:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_busy = true;
 1535              	 .loc 1 383 0
 1536 0030 AE60     	 str r6,[r5,#8]
 374:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 1537              	 .loc 1 374 0
 1538 0032 082C     	 cmp r4,#8
 1539 0034 94BF     	 ite ls
 1540 0036 0024     	 movls r4,#0
 1541 0038 0124     	 movhi r4,#1
 1542              	.LVL165:
 381:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Initialize to first index and set the busy flag */
 1543              	 .loc 1 381 0
 1544 003a A240     	 lsls r2,r2,r4
 1545              	.LVL166:
 384:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1546              	 .loc 1 384 0
 1547 003c 0124     	 movs r4,#1
 381:../Dave/Generated/SPI_MASTER/spi_master.c ****         /* Initialize to first index and set the busy flag */
 1548              	 .loc 1 381 0
 1549 003e 6A60     	 str r2,[r5,#4]
 380:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 1550              	 .loc 1 380 0
 1551 0040 A961     	 str r1,[r5,#24]
 384:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1552              	 .loc 1 384 0
 1553 0042 85F82040 	 strb r4,[r5,#32]
 390:../Dave/Generated/SPI_MASTER/spi_master.c ****           XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_ST
 1554              	 .loc 1 390 0
 1555 0046 0268     	 ldr r2,[r0]
 387:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 1556              	 .loc 1 387 0
 1557 0048 CFB1     	 cbz r7,.L101
 1558              	.LVL167:
 1559              	.LBB290:
 1560              	.LBB291:
1596:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1561              	 .loc 2 1596 0
 1562 004a 4FF40041 	 mov r1,#32768
 1563              	.LVL168:
 1564 004e C2F81811 	 str r1,[r2,#280]
 1565              	.LVL169:
 1566              	.LBE291:
 1567              	.LBE290:
 1568              	.LBB292:
 1569              	.LBB293:
1461:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1570              	 .loc 2 1461 0
 1571 0052 D2F80811 	 ldr r1,[r2,#264]
 1572 0056 41F08041 	 orr r1,r1,#1073741824
 1573 005a C2F80811 	 str r1,[r2,#264]
 1574              	.LVL170:
 1575              	.L102:
 1576              	.LBE293:
 1577              	.LBE292:
 397:../Dave/Generated/SPI_MASTER/spi_master.c ****         status = SPI_MASTER_STATUS_SUCCESS;
 1578              	 .loc 1 397 0
 1579 005e 287F     	 ldrb r0,[r5,#28]
 1580              	.LVL171:
 1581              	.LBB294:
 1582              	.LBB295:
 465:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 1583              	 .loc 3 465 0
 1584 0060 116C     	 ldr r1,[r2,#64]
 1585              	.LBE295:
 1586              	.LBE294:
 1587              	.LBB299:
 1588              	.LBB300:
1347:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1589              	 .loc 2 1347 0
 1590 0062 93F88940 	 ldrb r4,[r3,#137]
 1591              	.LBE300:
 1592              	.LBE299:
 1593              	.LBB304:
 1594              	.LBB296:
 466:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h **** }
 1595              	 .loc 3 466 0
 1596 0066 8301     	 lsls r3,r0,#6
 1597 0068 D8B2     	 uxtb r0,r3
 1598              	.LVL172:
 465:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 1599              	 .loc 3 465 0
 1600 006a 21F0C003 	 bic r3,r1,#192
 1601              	.LBE296:
 1602              	.LBE304:
 1603              	.LBB305:
 1604              	.LBB301:
1347:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1605              	 .loc 2 1347 0
 1606 006e 4FF48031 	 mov r1,#65536
 1607              	.LBE301:
 1608              	.LBE305:
 1609              	.LBB306:
 1610              	.LBB297:
 465:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 1611              	 .loc 3 465 0
 1612 0072 0343     	 orrs r3,r3,r0
 1613              	.LBE297:
 1614              	.LBE306:
 1615              	.LBB307:
 1616              	.LBB302:
1347:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1617              	 .loc 2 1347 0
 1618 0074 A140     	 lsls r1,r1,r4
 1619              	.LBE302:
 1620              	.LBE307:
 1621              	.LBB308:
 1622              	.LBB298:
 465:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 1623              	 .loc 3 465 0
 1624 0076 1364     	 str r3,[r2,#64]
 1625              	.LVL173:
 1626              	.LBE298:
 1627              	.LBE308:
 398:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1628              	 .loc 1 398 0
 1629 0078 0020     	 movs r0,#0
 1630              	.LBB309:
 1631              	.LBB303:
1347:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1632              	 .loc 2 1347 0
 1633 007a 9166     	 str r1,[r2,#104]
 1634              	.LVL174:
 1635 007c C7E7     	 b .L100
 1636              	.LVL175:
 1637              	.L101:
 1638              	.LBE303:
 1639              	.LBE309:
 1640              	.LBB310:
 1641              	.LBB311:
1116:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1642              	 .loc 2 1116 0
 1643 007e 116C     	 ldr r1,[r2,#64]
 1644              	.LVL176:
 1645 0080 41F40051 	 orr r1,r1,#8192
 1646 0084 1164     	 str r1,[r2,#64]
 1647 0086 EAE7     	 b .L102
 1648              	.LBE311:
 1649              	.LBE310:
 1650              	 .cfi_endproc
 1651              	.LFE299:
 1653              	 .section .text.SPI_MASTER_StartReceiveIRQ,"ax",%progbits
 1654              	 .align 2
 1655              	 .global SPI_MASTER_StartReceiveIRQ
 1656              	 .thumb
 1657              	 .thumb_func
 1659              	SPI_MASTER_StartReceiveIRQ:
 1660              	.LFB300:
 658:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 1661              	 .loc 1 658 0
 1662              	 .cfi_startproc
 1663              	 
 1664              	 
 1665              	 
 1666              	.LVL177:
 1667 0000 70B4     	 push {r4,r5,r6}
 1668              	.LCFI21:
 1669              	 .cfi_def_cfa_offset 12
 1670              	 .cfi_offset 4,-12
 1671              	 .cfi_offset 5,-8
 1672              	 .cfi_offset 6,-4
 668:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 1673              	 .loc 1 668 0
 1674 0002 4468     	 ldr r4,[r0,#4]
 666:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1675              	 .loc 1 666 0
 1676 0004 8568     	 ldr r5,[r0,#8]
 1677              	.LVL178:
 668:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 1678              	 .loc 1 668 0
 1679 0006 94F88530 	 ldrb r3,[r4,#133]
 1680 000a 13B1     	 cbz r3,.L119
 665:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle = handle->runtime;
 1681              	 .loc 1 665 0
 1682 000c 0420     	 movs r0,#4
 1683              	.LVL179:
 1684              	.L112:
 694:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 1685              	 .loc 1 694 0
 1686 000e 70BC     	 pop {r4,r5,r6}
 1687              	.LCFI22:
 1688              	 .cfi_remember_state
 1689              	 .cfi_restore 6
 1690              	 .cfi_restore 5
 1691              	 .cfi_restore 4
 1692              	 .cfi_def_cfa_offset 0
 1693              	.LVL180:
 1694 0010 7047     	 bx lr
 1695              	.LVL181:
 1696              	.L119:
 1697              	.LCFI23:
 1698              	 .cfi_restore_state
 672:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 1699              	 .loc 1 672 0
 1700 0012 01B1     	 cbz r1,.L115
 672:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 1701              	 .loc 1 672 0 is_stmt 0 discriminator 1
 1702 0014 12B9     	 cbnz r2,.L120
 1703              	.L115:
 690:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 1704              	 .loc 1 690 0 is_stmt 1
 1705 0016 0320     	 movs r0,#3
 1706              	.LVL182:
 694:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 1707              	 .loc 1 694 0
 1708 0018 70BC     	 pop {r4,r5,r6}
 1709              	.LCFI24:
 1710              	 .cfi_remember_state
 1711              	 .cfi_restore 4
 1712              	 .cfi_restore 5
 1713              	 .cfi_restore 6
 1714              	 .cfi_def_cfa_offset 0
 1715              	.LVL183:
 1716 001a 7047     	 bx lr
 1717              	.LVL184:
 1718              	.L120:
 1719              	.LCFI25:
 1720              	 .cfi_restore_state
 675:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 1721              	 .loc 1 675 0
 1722 001c EB7F     	 ldrb r3,[r5,#31]
 1723 001e 0BB1     	 cbz r3,.L121
 1724              	.L117:
 670:../Dave/Generated/SPI_MASTER/spi_master.c ****     /* Check whether SPI channel is free or not */
 1725              	 .loc 1 670 0
 1726 0020 0220     	 movs r0,#2
 1727              	.LVL185:
 1728 0022 F4E7     	 b .L112
 1729              	.LVL186:
 1730              	.L121:
 675:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 1731              	 .loc 1 675 0 discriminator 1
 1732 0024 95F82030 	 ldrb r3,[r5,#32]
 1733 0028 03F0FF04 	 and r4,r3,#255
 1734 002c 002B     	 cmp r3,#0
 1735 002e F7D1     	 bne .L117
 677:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data = dataptr;
 1736              	 .loc 1 677 0
 1737 0030 0123     	 movs r3,#1
 679:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_count = count;
 1738              	 .loc 1 679 0
 1739 0032 064E     	 ldr r6,.L122
 677:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data = dataptr;
 1740              	 .loc 1 677 0
 1741 0034 EB77     	 strb r3,[r5,#31]
 678:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data = &dummy_data[0];
 1742              	 .loc 1 678 0
 1743 0036 6961     	 str r1,[r5,#20]
 681:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data_dummy = false;
 1744              	 .loc 1 681 0
 1745 0038 85F82130 	 strb r3,[r5,#33]
 680:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_dummy = true;
 1746              	 .loc 1 680 0
 1747 003c 6A60     	 str r2,[r5,#4]
 679:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_count = count;
 1748              	 .loc 1 679 0
 1749 003e AE61     	 str r6,[r5,#24]
 682:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1750              	 .loc 1 682 0
 1751 0040 85F82240 	 strb r4,[r5,#34]
 684:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1752              	 .loc 1 684 0
 1753 0044 1146     	 mov r1,r2
 1754              	.LVL187:
 694:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 1755              	 .loc 1 694 0
 1756 0046 70BC     	 pop {r4,r5,r6}
 1757              	.LCFI26:
 1758              	 .cfi_restore 6
 1759              	 .cfi_restore 5
 1760              	 .cfi_restore 4
 1761              	 .cfi_def_cfa_offset 0
 1762              	.LVL188:
 684:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1763              	 .loc 1 684 0
 1764 0048 FFF7FEBF 	 b SPI_MASTER_lReceiveIRQ
 1765              	.LVL189:
 1766              	.L123:
 1767              	 .align 2
 1768              	.L122:
 1769 004c 00000000 	 .word .LANCHOR0
 1770              	 .cfi_endproc
 1771              	.LFE300:
 1773              	 .section .text.SPI_MASTER_Transfer,"ax",%progbits
 1774              	 .align 2
 1775              	 .global SPI_MASTER_Transfer
 1776              	 .thumb
 1777              	 .thumb_func
 1779              	SPI_MASTER_Transfer:
 1780              	.LFB301:
 748:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 1781              	 .loc 1 748 0
 1782              	 .cfi_startproc
 1783              	 
 1784              	 
 1785              	 
 1786              	.LVL190:
 1787 0000 F0B4     	 push {r4,r5,r6,r7}
 1788              	.LCFI27:
 1789              	 .cfi_def_cfa_offset 16
 1790              	 .cfi_offset 4,-16
 1791              	 .cfi_offset 5,-12
 1792              	 .cfi_offset 6,-8
 1793              	 .cfi_offset 7,-4
 755:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1794              	 .loc 1 755 0
 1795 0002 8468     	 ldr r4,[r0,#8]
 1796              	.LVL191:
 757:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 1797              	 .loc 1 757 0
 1798 0004 267F     	 ldrb r6,[r4,#28]
 1799 0006 2EB9     	 cbnz r6,.L128
 760:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 1800              	 .loc 1 760 0
 1801 0008 09B1     	 cbz r1,.L131
 760:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 1802              	 .loc 1 760 0 is_stmt 0 discriminator 1
 1803 000a 02B1     	 cbz r2,.L131
 760:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 1804              	 .loc 1 760 0 discriminator 2
 1805 000c 2BB9     	 cbnz r3,.L133
 1806              	.L131:
 795:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 1807              	 .loc 1 795 0 is_stmt 1
 1808 000e 0320     	 movs r0,#3
 1809              	.LVL192:
 804:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1810              	 .loc 1 804 0
 1811 0010 F0BC     	 pop {r4,r5,r6,r7}
 1812              	.LCFI28:
 1813              	 .cfi_remember_state
 1814              	 .cfi_restore 7
 1815              	 .cfi_restore 6
 1816              	 .cfi_restore 5
 1817              	 .cfi_restore 4
 1818              	 .cfi_def_cfa_offset 0
 1819              	.LVL193:
 1820 0012 7047     	 bx lr
 1821              	.LVL194:
 1822              	.L128:
 1823              	.LCFI29:
 1824              	 .cfi_restore_state
 800:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 1825              	 .loc 1 800 0
 1826 0014 0120     	 movs r0,#1
 1827              	.LVL195:
 804:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1828              	 .loc 1 804 0
 1829 0016 F0BC     	 pop {r4,r5,r6,r7}
 1830              	.LCFI30:
 1831              	 .cfi_remember_state
 1832              	 .cfi_restore 4
 1833              	 .cfi_restore 5
 1834              	 .cfi_restore 6
 1835              	 .cfi_restore 7
 1836              	 .cfi_def_cfa_offset 0
 1837              	.LVL196:
 1838 0018 7047     	 bx lr
 1839              	.LVL197:
 1840              	.L133:
 1841              	.LCFI31:
 1842              	 .cfi_restore_state
 763:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 1843              	 .loc 1 763 0
 1844 001a E67F     	 ldrb r6,[r4,#31]
 1845 001c 16B1     	 cbz r6,.L126
 1846              	.LVL198:
 1847              	.L127:
 754:../Dave/Generated/SPI_MASTER/spi_master.c ****   runtime_handle = handle->runtime;
 1848              	 .loc 1 754 0
 1849 001e 0220     	 movs r0,#2
 1850              	.LVL199:
 804:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1851              	 .loc 1 804 0
 1852 0020 F0BC     	 pop {r4,r5,r6,r7}
 1853              	.LCFI32:
 1854              	 .cfi_remember_state
 1855              	 .cfi_restore 4
 1856              	 .cfi_restore 5
 1857              	 .cfi_restore 6
 1858              	 .cfi_restore 7
 1859              	 .cfi_def_cfa_offset 0
 1860              	.LVL200:
 1861 0022 7047     	 bx lr
 1862              	.LVL201:
 1863              	.L126:
 1864              	.LCFI33:
 1865              	 .cfi_restore_state
 763:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 1866              	 .loc 1 763 0 discriminator 1
 1867 0024 94F82060 	 ldrb r6,[r4,#32]
 1868 0028 06F0FF07 	 and r7,r6,#255
 1869 002c 002E     	 cmp r6,#0
 1870 002e F6D1     	 bne .L127
 773:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 1871              	 .loc 1 773 0
 1872 0030 4568     	 ldr r5,[r0,#4]
 766:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data = tx_dataptr;
 1873              	 .loc 1 766 0
 1874 0032 6261     	 str r2,[r4,#20]
 773:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 1875              	 .loc 1 773 0
 1876 0034 95F88520 	 ldrb r2,[r5,#133]
 1877              	.LVL202:
 767:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_count = count;
 1878              	 .loc 1 767 0
 1879 0038 A161     	 str r1,[r4,#24]
 765:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data = rx_dataptr;
 1880              	 .loc 1 765 0
 1881 003a 0121     	 movs r1,#1
 1882              	.LVL203:
 1883 003c E177     	 strb r1,[r4,#31]
 768:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->tx_data_dummy = false;
 1884              	 .loc 1 768 0
 1885 003e 6360     	 str r3,[r4,#4]
 769:../Dave/Generated/SPI_MASTER/spi_master.c ****         runtime_handle->rx_data_dummy = false;
 1886              	 .loc 1 769 0
 1887 0040 84F82170 	 strb r7,[r4,#33]
 770:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1888              	 .loc 1 770 0
 1889 0044 84F82270 	 strb r7,[r4,#34]
 773:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 1890              	 .loc 1 773 0
 1891 0048 002A     	 cmp r2,#0
 1892 004a E8D1     	 bne .L127
 775:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 1893              	 .loc 1 775 0
 1894 004c 1946     	 mov r1,r3
 804:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1895              	 .loc 1 804 0
 1896 004e F0BC     	 pop {r4,r5,r6,r7}
 1897              	.LCFI34:
 1898              	 .cfi_restore 7
 1899              	 .cfi_restore 6
 1900              	 .cfi_restore 5
 1901              	 .cfi_restore 4
 1902              	 .cfi_def_cfa_offset 0
 1903              	.LVL204:
 775:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 1904              	 .loc 1 775 0
 1905 0050 FFF7FEBF 	 b SPI_MASTER_lReceiveIRQ
 1906              	.LVL205:
 1907              	 .cfi_endproc
 1908              	.LFE301:
 1910              	 .section .text.SPI_MASTER_AbortReceive,"ax",%progbits
 1911              	 .align 2
 1912              	 .global SPI_MASTER_AbortReceive
 1913              	 .thumb
 1914              	 .thumb_func
 1916              	SPI_MASTER_AbortReceive:
 1917              	.LFB302:
 811:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 1918              	 .loc 1 811 0
 1919              	 .cfi_startproc
 1920              	 
 1921              	 
 1922              	.LVL206:
 816:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 1923              	 .loc 1 816 0
 1924 0000 4268     	 ldr r2,[r0,#4]
 811:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 1925              	 .loc 1 811 0
 1926 0002 38B5     	 push {r3,r4,r5,lr}
 1927              	.LCFI35:
 1928              	 .cfi_def_cfa_offset 16
 1929              	 .cfi_offset 3,-16
 1930              	 .cfi_offset 4,-12
 1931              	 .cfi_offset 5,-8
 1932              	 .cfi_offset 14,-4
 816:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 1933              	 .loc 1 816 0
 1934 0004 92F88530 	 ldrb r3,[r2,#133]
 1935 0008 022B     	 cmp r3,#2
 1936 000a 02D0     	 beq .L143
 816:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 1937              	 .loc 1 816 0 is_stmt 0 discriminator 1
 1938 000c 8368     	 ldr r3,[r0,#8]
 1939 000e D97F     	 ldrb r1,[r3,#31]
 1940 0010 09B9     	 cbnz r1,.L148
 1941              	.L143:
 814:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 1942              	 .loc 1 814 0 is_stmt 1
 1943 0012 0120     	 movs r0,#1
 1944              	.LVL207:
 1945 0014 38BD     	 pop {r3,r4,r5,pc}
 1946              	.LVL208:
 1947              	.L148:
 1948              	.LBB326:
 1949              	.LBB327:
 874:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 1950              	 .loc 1 874 0
 1951 0016 92F88410 	 ldrb r1,[r2,#132]
 1952 001a 0229     	 cmp r1,#2
 1953 001c F9D0     	 beq .L143
 1954 001e 93F82010 	 ldrb r1,[r3,#32]
 1955 0022 0029     	 cmp r1,#0
 1956 0024 F5D0     	 beq .L143
 1957 0026 0446     	 mov r4,r0
 881:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 1958              	 .loc 1 881 0
 1959 0028 92F87C00 	 ldrb r0,[r2,#124]
 1960              	.LVL209:
 877:../Dave/Generated/SPI_MASTER/spi_master.c ****     handle->runtime->tx_data = NULL;
 1961              	 .loc 1 877 0
 1962 002c 0021     	 movs r1,#0
 1963 002e 83F82010 	 strb r1,[r3,#32]
 878:../Dave/Generated/SPI_MASTER/spi_master.c ****     handle->runtime->tx_data_dummy = false;
 1964              	 .loc 1 878 0
 1965 0032 9961     	 str r1,[r3,#24]
 879:../Dave/Generated/SPI_MASTER/spi_master.c ****     /*Disable the transmit interrupts*/
 1966              	 .loc 1 879 0
 1967 0034 83F82110 	 strb r1,[r3,#33]
 881:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 1968              	 .loc 1 881 0
 1969 0038 10B3     	 cbz r0,.L136
 884:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 1970              	 .loc 1 884 0
 1971 003a 2168     	 ldr r1,[r4]
 1972              	.LVL210:
 1973              	.LBB328:
 1974              	.LBB329:
1483:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1975              	 .loc 2 1483 0
 1976 003c D1F80801 	 ldr r0,[r1,#264]
 1977              	.LBE329:
 1978              	.LBE328:
 1979              	.LBB331:
 1980              	.LBB332:
1596:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1981              	 .loc 2 1596 0
 1982 0040 4FF40045 	 mov r5,#32768
 1983              	.LBE332:
 1984              	.LBE331:
 1985              	.LBB334:
 1986              	.LBB330:
1483:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1987              	 .loc 2 1483 0
 1988 0044 20F08040 	 bic r0,r0,#1073741824
 1989 0048 C1F80801 	 str r0,[r1,#264]
 1990              	.LVL211:
 1991              	.LBE330:
 1992              	.LBE334:
 1993              	.LBB335:
 1994              	.LBB333:
1596:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 1995              	 .loc 2 1596 0
 1996 004c 0C46     	 mov r4,r1
 1997              	.LVL212:
 1998 004e C1F81851 	 str r5,[r1,#280]
 1999              	.LVL213:
 2000              	.L137:
 2001              	.LBE333:
 2002              	.LBE335:
 2003              	.LBE327:
 2004              	.LBE326:
 828:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2005              	 .loc 1 828 0
 2006 0052 92F87D50 	 ldrb r5,[r2,#125]
 824:../Dave/Generated/SPI_MASTER/spi_master.c ****       handle->runtime->rx_data = NULL;
 2007              	 .loc 1 824 0
 2008 0056 0022     	 movs r2,#0
 2009 0058 DA77     	 strb r2,[r3,#31]
 825:../Dave/Generated/SPI_MASTER/spi_master.c ****       handle->runtime->tx_data_dummy = false;
 2010              	 .loc 1 825 0
 2011 005a 5A61     	 str r2,[r3,#20]
 826:../Dave/Generated/SPI_MASTER/spi_master.c ****       /* Disable the receive interrupts */
 2012              	 .loc 1 826 0
 2013 005c 83F82120 	 strb r2,[r3,#33]
 828:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2014              	 .loc 1 828 0
 2015 0060 3DB1     	 cbz r5,.L149
 2016              	.LVL214:
 2017              	.LBB339:
 2018              	.LBB340:
1796:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2019              	 .loc 2 1796 0
 2020 0062 D4F80C31 	 ldr r3,[r4,#268]
 2021 0066 23F0C043 	 bic r3,r3,#1610612736
 2022              	.LBE340:
 2023              	.LBE339:
 855:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 2024              	 .loc 1 855 0
 2025 006a 1046     	 mov r0,r2
 2026              	.LBB342:
 2027              	.LBB341:
1796:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2028              	 .loc 2 1796 0
 2029 006c C4F80C31 	 str r3,[r4,#268]
 2030 0070 38BD     	 pop {r3,r4,r5,pc}
 2031              	.LVL215:
 2032              	.L149:
 2033              	.LBE341:
 2034              	.LBE342:
 851:../Dave/Generated/SPI_MASTER/spi_master.c ****             (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_A
 2035              	 .loc 1 851 0
 2036 0072 2046     	 mov r0,r4
 2037 0074 4FF44041 	 mov r1,#49152
 2038 0078 FFF7FEFF 	 bl XMC_SPI_CH_DisableEvent
 2039              	.LVL216:
 855:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 2040              	 .loc 1 855 0
 2041 007c 2846     	 mov r0,r5
 2042 007e 38BD     	 pop {r3,r4,r5,pc}
 2043              	.LVL217:
 2044              	.L136:
 2045              	.LBB343:
 2046              	.LBB338:
 2047              	.LBB336:
 2048              	.LBB337:
 906:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 2049              	 .loc 1 906 0
 2050 0080 2068     	 ldr r0,[r4]
 2051 0082 4FF40051 	 mov r1,#8192
 2052 0086 FFF7FEFF 	 bl XMC_SPI_CH_DisableEvent
 2053              	.LVL218:
 2054 008a A368     	 ldr r3,[r4,#8]
 2055 008c 6268     	 ldr r2,[r4,#4]
 2056 008e 2468     	 ldr r4,[r4]
 2057              	.LVL219:
 2058 0090 DFE7     	 b .L137
 2059              	.LBE337:
 2060              	.LBE336:
 2061              	.LBE338:
 2062              	.LBE343:
 2063              	 .cfi_endproc
 2064              	.LFE302:
 2066 0092 00BF     	 .section .text.SPI_MASTER_AbortTransmit,"ax",%progbits
 2067              	 .align 2
 2068              	 .global SPI_MASTER_AbortTransmit
 2069              	 .thumb
 2070              	 .thumb_func
 2072              	SPI_MASTER_AbortTransmit:
 2073              	.LFB303:
 869:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 2074              	 .loc 1 869 0
 2075              	 .cfi_startproc
 2076              	 
 2077              	 
 2078              	.LVL220:
 874:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 2079              	 .loc 1 874 0
 2080 0000 4368     	 ldr r3,[r0,#4]
 2081 0002 93F88420 	 ldrb r2,[r3,#132]
 2082 0006 022A     	 cmp r2,#2
 2083 0008 1AD0     	 beq .L154
 874:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 2084              	 .loc 1 874 0 is_stmt 0 discriminator 1
 2085 000a 8268     	 ldr r2,[r0,#8]
 2086 000c 92F82010 	 ldrb r1,[r2,#32]
 2087 0010 B1B1     	 cbz r1,.L154
 869:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_STATUS_t status;
 2088              	 .loc 1 869 0 is_stmt 1
 2089 0012 10B5     	 push {r4,lr}
 2090              	.LCFI36:
 2091              	 .cfi_def_cfa_offset 8
 2092              	 .cfi_offset 4,-8
 2093              	 .cfi_offset 14,-4
 881:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2094              	 .loc 1 881 0
 2095 0014 93F87C40 	 ldrb r4,[r3,#124]
 877:../Dave/Generated/SPI_MASTER/spi_master.c ****     handle->runtime->tx_data = NULL;
 2096              	 .loc 1 877 0
 2097 0018 0023     	 movs r3,#0
 2098 001a 82F82030 	 strb r3,[r2,#32]
 878:../Dave/Generated/SPI_MASTER/spi_master.c ****     handle->runtime->tx_data_dummy = false;
 2099              	 .loc 1 878 0
 2100 001e 9361     	 str r3,[r2,#24]
 879:../Dave/Generated/SPI_MASTER/spi_master.c ****     /*Disable the transmit interrupts*/
 2101              	 .loc 1 879 0
 2102 0020 82F82130 	 strb r3,[r2,#33]
 881:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2103              	 .loc 1 881 0
 2104 0024 74B1     	 cbz r4,.L152
 884:../Dave/Generated/SPI_MASTER/spi_master.c ****       XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 2105              	 .loc 1 884 0
 2106 0026 0268     	 ldr r2,[r0]
 2107              	.LVL221:
 2108              	.LBB354:
 2109              	.LBB355:
1483:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2110              	 .loc 2 1483 0
 2111 0028 D2F80811 	 ldr r1,[r2,#264]
 2112              	.LBE355:
 2113              	.LBE354:
 2114              	.LBB357:
 2115              	.LBB358:
1596:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2116              	 .loc 2 1596 0
 2117 002c 4FF40044 	 mov r4,#32768
 2118              	.LBE358:
 2119              	.LBE357:
 2120              	.LBB360:
 2121              	.LBB356:
1483:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2122              	 .loc 2 1483 0
 2123 0030 21F08041 	 bic r1,r1,#1073741824
 2124 0034 C2F80811 	 str r1,[r2,#264]
 2125              	.LVL222:
 2126              	.LBE356:
 2127              	.LBE360:
 909:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 2128              	 .loc 1 909 0
 2129 0038 1846     	 mov r0,r3
 2130              	.LVL223:
 2131              	.LBB361:
 2132              	.LBB359:
1596:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2133              	 .loc 2 1596 0
 2134 003a C2F81841 	 str r4,[r2,#280]
 2135 003e 10BD     	 pop {r4,pc}
 2136              	.LVL224:
 2137              	.L154:
 2138              	.LCFI37:
 2139              	 .cfi_def_cfa_offset 0
 2140              	 .cfi_restore 4
 2141              	 .cfi_restore 14
 2142              	.LBE359:
 2143              	.LBE361:
 872:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2144              	 .loc 1 872 0
 2145 0040 0120     	 movs r0,#1
 2146              	.LVL225:
 2147 0042 7047     	 bx lr
 2148              	.LVL226:
 2149              	.L152:
 2150              	.LCFI38:
 2151              	 .cfi_def_cfa_offset 8
 2152              	 .cfi_offset 4,-8
 2153              	 .cfi_offset 14,-4
 2154              	.LBB362:
 2155              	.LBB363:
 906:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 2156              	 .loc 1 906 0
 2157 0044 0068     	 ldr r0,[r0]
 2158              	.LVL227:
 2159 0046 4FF40051 	 mov r1,#8192
 2160 004a FFF7FEFF 	 bl XMC_SPI_CH_DisableEvent
 2161              	.LVL228:
 2162 004e 2046     	 mov r0,r4
 2163 0050 10BD     	 pop {r4,pc}
 2164              	.LBE363:
 2165              	.LBE362:
 2166              	 .cfi_endproc
 2167              	.LFE303:
 2169 0052 00BF     	 .section .text.SPI_MASTER_lTransmitHandler,"ax",%progbits
 2170              	 .align 2
 2171              	 .global SPI_MASTER_lTransmitHandler
 2172              	 .thumb
 2173              	 .thumb_func
 2175              	SPI_MASTER_lTransmitHandler:
 2176              	.LFB304:
 923:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint16_t data; /* Data to be loaded into the TBUF */
 2177              	 .loc 1 923 0
 2178              	 .cfi_startproc
 2179              	 
 2180              	 
 2181              	 
 2182              	.LVL229:
 926:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2183              	 .loc 1 926 0
 2184 0000 8368     	 ldr r3,[r0,#8]
 2185              	.LVL230:
 928:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 2186              	 .loc 1 928 0
 2187 0002 1968     	 ldr r1,[r3]
 933:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 2188              	 .loc 1 933 0
 2189 0004 9A68     	 ldr r2,[r3,#8]
 923:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint16_t data; /* Data to be loaded into the TBUF */
 2190              	 .loc 1 923 0
 2191 0006 70B4     	 push {r4,r5,r6}
 2192              	.LCFI39:
 2193              	 .cfi_def_cfa_offset 12
 2194              	 .cfi_offset 4,-12
 2195              	 .cfi_offset 5,-8
 2196              	 .cfi_offset 6,-4
 933:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 2197              	 .loc 1 933 0
 2198 0008 5C68     	 ldr r4,[r3,#4]
 930:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 2199              	 .loc 1 930 0
 2200 000a 0929     	 cmp r1,#9
 2201 000c 34BF     	 ite cc
 2202 000e 0125     	 movcc r5,#1
 2203 0010 0225     	 movcs r5,#2
 2204              	.LVL231:
 933:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 2205              	 .loc 1 933 0
 2206 0012 A242     	 cmp r2,r4
 2207 0014 2BD2     	 bcs .L159
 2208              	.LVL232:
 937:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2209              	 .loc 1 937 0
 2210 0016 4268     	 ldr r2,[r0,#4]
 2211 0018 92F87C20 	 ldrb r2,[r2,#124]
 2212 001c 002A     	 cmp r2,#0
 2213 001e 40D0     	 beq .L160
 940:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2214              	 .loc 1 940 0
 2215 0020 0168     	 ldr r1,[r0]
 2216              	.LVL233:
 2217              	.LBB364:
 2218              	.LBB365:
1615:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2219              	 .loc 2 1615 0
 2220 0022 D1F81421 	 ldr r2,[r1,#276]
 2221              	.LBE365:
 2222              	.LBE364:
 940:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2223              	 .loc 1 940 0
 2224 0026 D204     	 lsls r2,r2,#19
 2225 0028 4CD4     	 bmi .L157
 942:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 2226              	 .loc 1 942 0
 2227 002a 9A68     	 ldr r2,[r3,#8]
 2228 002c 9442     	 cmp r4,r2
 2229 002e 49D9     	 bls .L157
 2230 0030 022D     	 cmp r5,#2
 2231 0032 58D0     	 beq .L192
 2232              	.LBB368:
 2233              	.LBB369:
1579:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2234              	 .loc 2 1579 0
 2235 0034 4FF6FF75 	 movw r5,#65535
 2236              	.LVL234:
 2237 0038 10E0     	 b .L185
 2238              	.LVL235:
 2239              	.L193:
 2240              	.LBE369:
 2241              	.LBE368:
 957:../Dave/Generated/SPI_MASTER/spi_master.c ****             }
 2242              	 .loc 1 957 0
 2243 003a 9868     	 ldr r0,[r3,#8]
 2244              	.LVL236:
 959:../Dave/Generated/SPI_MASTER/spi_master.c ****           }
 2245              	 .loc 1 959 0
 2246 003c 1A7F     	 ldrb r2,[r3,#28]
 2247              	.LVL237:
 957:../Dave/Generated/SPI_MASTER/spi_master.c ****             }
 2248              	 .loc 1 957 0
 2249 003e 9E69     	 ldr r6,[r3,#24]
 2250              	.LBB373:
 2251              	.LBB374:
1579:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2252              	 .loc 2 1579 0
 2253 0040 6032     	 adds r2,r2,#96
 2254              	.LVL238:
 2255 0042 305C     	 ldrb r0,[r6,r0]
 2256              	.LVL239:
 2257 0044 41F82200 	 str r0,[r1,r2,lsl#2]
 2258              	.LVL240:
 2259              	.L166:
 2260              	.LBE374:
 2261              	.LBE373:
 961:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 2262              	 .loc 1 961 0
 2263 0048 9A68     	 ldr r2,[r3,#8]
 2264 004a 0132     	 adds r2,r2,#1
 2265 004c 9A60     	 str r2,[r3,#8]
 2266              	.LVL241:
 2267              	.LBB376:
 2268              	.LBB366:
1615:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2269              	 .loc 2 1615 0
 2270 004e D1F81421 	 ldr r2,[r1,#276]
 2271              	.LBE366:
 2272              	.LBE376:
 940:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2273              	 .loc 1 940 0
 2274 0052 D604     	 lsls r6,r2,#19
 2275 0054 36D4     	 bmi .L157
 942:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 2276              	 .loc 1 942 0
 2277 0056 9A68     	 ldr r2,[r3,#8]
 2278 0058 9442     	 cmp r4,r2
 2279 005a 33D9     	 bls .L157
 2280              	.LVL242:
 2281              	.L185:
 945:../Dave/Generated/SPI_MASTER/spi_master.c ****           {
 2282              	 .loc 1 945 0
 2283 005c 93F82120 	 ldrb r2,[r3,#33]
 2284 0060 002A     	 cmp r2,#0
 2285 0062 EAD0     	 beq .L193
 947:../Dave/Generated/SPI_MASTER/spi_master.c ****           }
 2286              	 .loc 1 947 0
 2287 0064 1A7F     	 ldrb r2,[r3,#28]
 2288              	.LVL243:
 2289              	.LBB377:
 2290              	.LBB370:
1579:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2291              	 .loc 2 1579 0
 2292 0066 6032     	 adds r2,r2,#96
 2293              	.LVL244:
 2294 0068 41F82250 	 str r5,[r1,r2,lsl#2]
 2295 006c ECE7     	 b .L166
 2296              	.LVL245:
 2297              	.L159:
 2298              	.LBE370:
 2299              	.LBE377:
 992:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2300              	 .loc 1 992 0
 2301 006e 0168     	 ldr r1,[r0]
 2302              	.LVL246:
 2303              	.LBB378:
 2304              	.LBB379:
1635:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2305              	 .loc 2 1635 0
 2306 0070 D1F81421 	 ldr r2,[r1,#276]
 2307              	.LBE379:
 2308              	.LBE378:
 992:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2309              	 .loc 1 992 0
 2310 0074 1405     	 lsls r4,r2,#20
 2311 0076 25D5     	 bpl .L157
 995:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2312              	 .loc 1 995 0
 2313 0078 4068     	 ldr r0,[r0,#4]
 2314              	.LVL247:
 2315 007a 90F87C20 	 ldrb r2,[r0,#124]
 2316 007e 1ABB     	 cbnz r2,.L194
 2317              	.LVL248:
 2318              	.LBB380:
 2319              	.LBB381:
1137:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2320              	 .loc 2 1137 0
 2321 0080 0A6C     	 ldr r2,[r1,#64]
 2322 0082 22F40052 	 bic r2,r2,#8192
 2323 0086 0A64     	 str r2,[r1,#64]
 2324              	.LVL249:
 2325              	.L177:
 2326              	.LBE381:
 2327              	.LBE380:
 2328              	.LBB382:
 2329              	.LBB383:
1181:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2330              	 .loc 2 1181 0 discriminator 1
 2331 0088 8A6B     	 ldr r2,[r1,#56]
 2332              	.LBE383:
 2333              	.LBE382:
1007:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2334              	 .loc 1 1007 0 discriminator 1
 2335 008a 1206     	 lsls r2,r2,#24
 2336 008c FCD4     	 bmi .L177
1016:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2337              	 .loc 1 1016 0
 2338 008e 016F     	 ldr r1,[r0,#112]
 2339              	.LVL250:
1013:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_data = NULL;
 2340              	 .loc 1 1013 0
 2341 0090 0022     	 movs r2,#0
 2342 0092 83F82020 	 strb r2,[r3,#32]
1014:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2343              	 .loc 1 1014 0
 2344 0096 9A61     	 str r2,[r3,#24]
1016:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2345              	 .loc 1 1016 0
 2346 0098 A1B1     	 cbz r1,.L157
1016:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2347              	 .loc 1 1016 0 is_stmt 0 discriminator 1
 2348 009a DB7F     	 ldrb r3,[r3,#31]
 2349              	.LVL251:
 2350 009c 93B9     	 cbnz r3,.L157
1023:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 2351              	 .loc 1 1023 0 is_stmt 1
 2352 009e 70BC     	 pop {r4,r5,r6}
 2353              	.LCFI40:
 2354              	 .cfi_remember_state
 2355              	 .cfi_restore 6
 2356              	 .cfi_restore 5
 2357              	 .cfi_restore 4
 2358              	 .cfi_def_cfa_offset 0
 2359              	.LVL252:
1019:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 2360              	 .loc 1 1019 0
 2361 00a0 0847     	 bx r1
 2362              	.LVL253:
 2363              	.L160:
 2364              	.LCFI41:
 2365              	 .cfi_restore_state
 971:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2366              	 .loc 1 971 0
 2367 00a2 93F82120 	 ldrb r2,[r3,#33]
 2368 00a6 B2B9     	 cbnz r2,.L195
 979:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 2369              	 .loc 1 979 0
 2370 00a8 9A68     	 ldr r2,[r3,#8]
 2371 00aa 9969     	 ldr r1,[r3,#24]
 977:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 2372              	 .loc 1 977 0
 2373 00ac 022D     	 cmp r5,#2
 979:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 2374              	 .loc 1 979 0
 2375 00ae 0CBF     	 ite eq
 2376 00b0 8C5A     	 ldrheq r4,[r1,r2]
 2377              	.LVL254:
 983:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 2378              	 .loc 1 983 0
 2379 00b2 8C5C     	 ldrbne r4,[r1,r2]
 2380              	.LVL255:
 985:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 2381              	 .loc 1 985 0
 2382 00b4 1A7F     	 ldrb r2,[r3,#28]
 2383 00b6 0168     	 ldr r1,[r0]
 2384              	.LVL256:
 2385              	.LBB384:
 2386              	.LBB385:
 996:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2387              	 .loc 2 996 0
 2388 00b8 2032     	 adds r2,r2,#32
 2389              	.LVL257:
 2390 00ba 41F82240 	 str r4,[r1,r2,lsl#2]
 2391              	.LVL258:
 2392              	.L172:
 2393              	.LBE385:
 2394              	.LBE384:
 987:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 2395              	 .loc 1 987 0
 2396 00be 9A68     	 ldr r2,[r3,#8]
 2397 00c0 1544     	 add r5,r5,r2
 2398              	.LVL259:
 2399 00c2 9D60     	 str r5,[r3,#8]
 2400              	.LVL260:
 2401              	.L157:
1023:../Dave/Generated/SPI_MASTER/spi_master.c **** #endif
 2402              	 .loc 1 1023 0
 2403 00c4 70BC     	 pop {r4,r5,r6}
 2404              	.LCFI42:
 2405              	 .cfi_remember_state
 2406              	 .cfi_restore 6
 2407              	 .cfi_restore 5
 2408              	 .cfi_restore 4
 2409              	 .cfi_def_cfa_offset 0
 2410 00c6 7047     	 bx lr
 2411              	.LVL261:
 2412              	.L194:
 2413              	.LCFI43:
 2414              	 .cfi_restore_state
 2415              	.LBB386:
 2416              	.LBB387:
1483:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2417              	 .loc 2 1483 0
 2418 00c8 D1F80821 	 ldr r2,[r1,#264]
 2419 00cc 22F08042 	 bic r2,r2,#1073741824
 2420 00d0 C1F80821 	 str r2,[r1,#264]
 2421 00d4 D8E7     	 b .L177
 2422              	.LVL262:
 2423              	.L195:
 2424              	.LBE387:
 2425              	.LBE386:
 973:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 2426              	 .loc 1 973 0
 2427 00d6 1A7F     	 ldrb r2,[r3,#28]
 2428 00d8 0168     	 ldr r1,[r0]
 2429              	.LVL263:
 2430              	.LBB388:
 2431              	.LBB389:
 996:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2432              	 .loc 2 996 0
 2433 00da 2032     	 adds r2,r2,#32
 2434              	.LVL264:
 2435 00dc 4FF6FF70 	 movw r0,#65535
 2436              	.LVL265:
 2437 00e0 41F82200 	 str r0,[r1,r2,lsl#2]
 2438 00e4 EBE7     	 b .L172
 2439              	.LVL266:
 2440              	.L192:
 2441              	.LBE389:
 2442              	.LBE388:
 2443              	.LBB390:
 2444              	.LBB371:
1579:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2445              	 .loc 2 1579 0
 2446 00e6 4FF6FF70 	 movw r0,#65535
 2447              	.LVL267:
 2448 00ea 10E0     	 b .L164
 2449              	.LVL268:
 2450              	.L168:
 2451              	.LBE371:
 2452              	.LBE390:
 953:../Dave/Generated/SPI_MASTER/spi_master.c ****             }
 2453              	 .loc 1 953 0
 2454 00ec 9D68     	 ldr r5,[r3,#8]
 2455              	.LVL269:
 959:../Dave/Generated/SPI_MASTER/spi_master.c ****           }
 2456              	 .loc 1 959 0
 2457 00ee 1A7F     	 ldrb r2,[r3,#28]
 2458              	.LVL270:
 953:../Dave/Generated/SPI_MASTER/spi_master.c ****             }
 2459              	 .loc 1 953 0
 2460 00f0 9E69     	 ldr r6,[r3,#24]
 2461              	.LBB391:
 2462              	.LBB375:
1579:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2463              	 .loc 2 1579 0
 2464 00f2 6032     	 adds r2,r2,#96
 2465              	.LVL271:
 2466 00f4 755B     	 ldrh r5,[r6,r5]
 2467              	.LVL272:
 2468 00f6 41F82250 	 str r5,[r1,r2,lsl#2]
 2469              	.LVL273:
 2470              	.L169:
 2471              	.LBE375:
 2472              	.LBE391:
 961:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 2473              	 .loc 1 961 0
 2474 00fa 9A68     	 ldr r2,[r3,#8]
 2475 00fc 0232     	 adds r2,r2,#2
 2476 00fe 9A60     	 str r2,[r3,#8]
 2477              	.LVL274:
 2478              	.LBB392:
 2479              	.LBB367:
1615:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2480              	 .loc 2 1615 0
 2481 0100 D1F81421 	 ldr r2,[r1,#276]
 2482              	.LBE367:
 2483              	.LBE392:
 940:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2484              	 .loc 1 940 0
 2485 0104 D504     	 lsls r5,r2,#19
 2486 0106 DDD4     	 bmi .L157
 942:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 2487              	 .loc 1 942 0
 2488 0108 9A68     	 ldr r2,[r3,#8]
 2489 010a 9442     	 cmp r4,r2
 2490 010c DAD9     	 bls .L157
 2491              	.LVL275:
 2492              	.L164:
 945:../Dave/Generated/SPI_MASTER/spi_master.c ****           {
 2493              	 .loc 1 945 0
 2494 010e 93F82120 	 ldrb r2,[r3,#33]
 2495 0112 002A     	 cmp r2,#0
 2496 0114 EAD0     	 beq .L168
 947:../Dave/Generated/SPI_MASTER/spi_master.c ****           }
 2497              	 .loc 1 947 0
 2498 0116 1A7F     	 ldrb r2,[r3,#28]
 2499              	.LVL276:
 2500              	.LBB393:
 2501              	.LBB372:
1579:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2502              	 .loc 2 1579 0
 2503 0118 6032     	 adds r2,r2,#96
 2504              	.LVL277:
 2505 011a 41F82200 	 str r0,[r1,r2,lsl#2]
 2506 011e ECE7     	 b .L169
 2507              	.LBE372:
 2508              	.LBE393:
 2509              	 .cfi_endproc
 2510              	.LFE304:
 2512              	 .section .text.SPI_MASTER_lReceiveHandler,"ax",%progbits
 2513              	 .align 2
 2514              	 .global SPI_MASTER_lReceiveHandler
 2515              	 .thumb
 2516              	 .thumb_func
 2518              	SPI_MASTER_lReceiveHandler:
 2519              	.LFB306:
1079:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint16_t data; /* Data to be loaded into the TBUF */
 2520              	 .loc 1 1079 0
 2521              	 .cfi_startproc
 2522              	 
 2523              	 
 2524              	.LVL278:
 2525 0000 70B5     	 push {r4,r5,r6,lr}
 2526              	.LCFI44:
 2527              	 .cfi_def_cfa_offset 16
 2528              	 .cfi_offset 4,-16
 2529              	 .cfi_offset 5,-12
 2530              	 .cfi_offset 6,-8
 2531              	 .cfi_offset 14,-4
1082:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2532              	 .loc 1 1082 0
 2533 0002 8468     	 ldr r4,[r0,#8]
 2534              	.LVL279:
1086:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 2535              	 .loc 1 1086 0
 2536 0004 2368     	 ldr r3,[r4]
 2537 0006 082B     	 cmp r3,#8
1079:../Dave/Generated/SPI_MASTER/spi_master.c ****   uint16_t data; /* Data to be loaded into the TBUF */
 2538              	 .loc 1 1079 0
 2539 0008 0546     	 mov r5,r0
1086:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 2540              	 .loc 1 1086 0
 2541 000a 1CD9     	 bls .L240
 2542              	.LVL280:
1091:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 2543              	 .loc 1 1091 0
 2544 000c 4368     	 ldr r3,[r0,#4]
 2545 000e 93F87D30 	 ldrb r3,[r3,#125]
 2546 0012 002B     	 cmp r3,#0
 2547 0014 59D1     	 bne .L219
1105:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2548              	 .loc 1 1105 0
 2549 0016 2868     	 ldr r0,[r5]
 2550              	.LVL281:
 2551              	.LBB408:
 2552              	.LBB409:
1205:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2553              	 .loc 2 1205 0
 2554 0018 036D     	 ldr r3,[r0,#80]
 2555              	.LBE409:
 2556              	.LBE408:
1105:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2557              	 .loc 1 1105 0
 2558 001a 9904     	 lsls r1,r3,#18
1088:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 2559              	 .loc 1 1088 0
 2560 001c 4FF00206 	 mov r6,#2
1105:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2561              	 .loc 1 1105 0
 2562 0020 1CD5     	 bpl .L241
 2563              	.LVL282:
 2564              	.L212:
1107:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2565              	 .loc 1 1107 0
 2566 0022 2269     	 ldr r2,[r4,#16]
 2567 0024 E368     	 ldr r3,[r4,#12]
 2568 0026 9A42     	 cmp r2,r3
 2569 0028 19D2     	 bcs .L213
1109:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2570              	 .loc 1 1109 0
 2571 002a FFF7FEFF 	 bl XMC_SPI_CH_GetReceivedData
 2572              	.LVL283:
1111:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2573              	 .loc 1 1111 0
 2574 002e 2369     	 ldr r3,[r4,#16]
 2575 0030 6269     	 ldr r2,[r4,#20]
1113:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 2576              	 .loc 1 1113 0
 2577 0032 022E     	 cmp r6,#2
1111:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2578              	 .loc 1 1111 0
 2579 0034 D054     	 strb r0,[r2,r3]
1113:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 2580              	 .loc 1 1113 0
 2581 0036 00F0B380 	 beq .L242
 2582              	.LVL284:
 2583              	.L214:
1118:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 2584              	 .loc 1 1118 0
 2585 003a 2269     	 ldr r2,[r4,#16]
 2586 003c 2868     	 ldr r0,[r5]
 2587 003e E368     	 ldr r3,[r4,#12]
 2588 0040 3244     	 add r2,r2,r6
 2589 0042 2261     	 str r2,[r4,#16]
 2590 0044 0BE0     	 b .L213
 2591              	.LVL285:
 2592              	.L240:
1091:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 2593              	 .loc 1 1091 0
 2594 0046 4368     	 ldr r3,[r0,#4]
 2595 0048 93F87D30 	 ldrb r3,[r3,#125]
 2596 004c 002B     	 cmp r3,#0
 2597 004e 59D1     	 bne .L221
1105:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2598              	 .loc 1 1105 0
 2599 0050 2868     	 ldr r0,[r5]
 2600              	.LVL286:
 2601              	.LBB411:
 2602              	.LBB410:
1205:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2603              	 .loc 2 1205 0
 2604 0052 036D     	 ldr r3,[r0,#80]
 2605              	.LBE410:
 2606              	.LBE411:
1105:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2607              	 .loc 1 1105 0
 2608 0054 9904     	 lsls r1,r3,#18
1081:../Dave/Generated/SPI_MASTER/spi_master.c ****   SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 2609              	 .loc 1 1081 0
 2610 0056 4FF00106 	 mov r6,#1
1105:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2611              	 .loc 1 1105 0
 2612 005a E2D4     	 bmi .L212
 2613              	.LVL287:
 2614              	.L241:
 2615 005c E368     	 ldr r3,[r4,#12]
 2616              	.LVL288:
 2617              	.L213:
 2618              	.LBB412:
 2619              	.LBB413:
1205:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2620              	 .loc 2 1205 0
 2621 005e 026D     	 ldr r2,[r0,#80]
 2622              	.LBE413:
 2623              	.LBE412:
1121:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2624              	 .loc 1 1121 0
 2625 0060 5204     	 lsls r2,r2,#17
 2626 0062 02D5     	 bpl .L215
1123:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2627              	 .loc 1 1123 0
 2628 0064 2269     	 ldr r2,[r4,#16]
 2629 0066 9A42     	 cmp r2,r3
 2630 0068 23D3     	 bcc .L243
 2631              	.LVL289:
 2632              	.L215:
1138:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2633              	 .loc 1 1138 0
 2634 006a 2269     	 ldr r2,[r4,#16]
 2635 006c 9A42     	 cmp r2,r3
 2636 006e 00D0     	 beq .L244
 2637              	.L196:
 2638 0070 70BD     	 pop {r4,r5,r6,pc}
 2639              	.LVL290:
 2640              	.L244:
1141:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2641              	 .loc 1 1141 0
 2642 0072 6B68     	 ldr r3,[r5,#4]
 2643 0074 93F87D20 	 ldrb r2,[r3,#125]
 2644 0078 A2B1     	 cbz r2,.L217
1144:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 2645              	 .loc 1 1144 0
 2646 007a 2968     	 ldr r1,[r5]
 2647              	.LVL291:
 2648              	.LBB414:
 2649              	.LBB415:
1796:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2650              	 .loc 2 1796 0
 2651 007c D1F80C21 	 ldr r2,[r1,#268]
 2652 0080 22F0C042 	 bic r2,r2,#1610612736
 2653 0084 C1F80C21 	 str r2,[r1,#268]
 2654              	.LVL292:
 2655              	.L218:
 2656              	.LBE415:
 2657              	.LBE414:
1156:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2658              	 .loc 1 1156 0
 2659 0088 5A6F     	 ldr r2,[r3,#116]
1153:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_data = NULL;
 2660              	 .loc 1 1153 0
 2661 008a 0121     	 movs r1,#1
1151:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_data_dummy = false;
 2662              	 .loc 1 1151 0
 2663 008c 0023     	 movs r3,#0
 2664 008e E377     	 strb r3,[r4,#31]
1154:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2665              	 .loc 1 1154 0
 2666 0090 6361     	 str r3,[r4,#20]
1152:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_data_dummy = true;
 2667              	 .loc 1 1152 0
 2668 0092 84F82130 	 strb r3,[r4,#33]
1153:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_data = NULL;
 2669              	 .loc 1 1153 0
 2670 0096 84F82210 	 strb r1,[r4,#34]
1156:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2671              	 .loc 1 1156 0
 2672 009a 002A     	 cmp r2,#0
 2673 009c E8D0     	 beq .L196
1163:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2674              	 .loc 1 1163 0
 2675 009e BDE87040 	 pop {r4,r5,r6,lr}
 2676              	.LCFI45:
 2677              	 .cfi_remember_state
 2678              	 .cfi_restore 14
 2679              	 .cfi_restore 6
 2680              	 .cfi_restore 5
 2681              	 .cfi_restore 4
 2682              	 .cfi_def_cfa_offset 0
 2683              	.LVL293:
1159:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 2684              	 .loc 1 1159 0
 2685 00a2 1047     	 bx r2
 2686              	.LVL294:
 2687              	.L217:
 2688              	.LCFI46:
 2689              	 .cfi_restore_state
1148:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 2690              	 .loc 1 1148 0
 2691 00a4 2868     	 ldr r0,[r5]
 2692 00a6 4FF44041 	 mov r1,#49152
 2693 00aa FFF7FEFF 	 bl XMC_SPI_CH_DisableEvent
 2694              	.LVL295:
 2695 00ae 6B68     	 ldr r3,[r5,#4]
 2696 00b0 EAE7     	 b .L218
 2697              	.LVL296:
 2698              	.L243:
1125:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2699              	 .loc 1 1125 0
 2700 00b2 FFF7FEFF 	 bl XMC_SPI_CH_GetReceivedData
 2701              	.LVL297:
1127:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2702              	 .loc 1 1127 0
 2703 00b6 2369     	 ldr r3,[r4,#16]
 2704 00b8 6269     	 ldr r2,[r4,#20]
1129:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 2705              	 .loc 1 1129 0
 2706 00ba 022E     	 cmp r6,#2
1127:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2707              	 .loc 1 1127 0
 2708 00bc D054     	 strb r0,[r2,r3]
1129:../Dave/Generated/SPI_MASTER/spi_master.c ****         {
 2709              	 .loc 1 1129 0
 2710 00be 75D0     	 beq .L245
 2711              	.LVL298:
 2712              	.L216:
1134:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 2713              	 .loc 1 1134 0
 2714 00c0 2269     	 ldr r2,[r4,#16]
 2715 00c2 E368     	 ldr r3,[r4,#12]
 2716 00c4 1644     	 add r6,r6,r2
 2717 00c6 2661     	 str r6,[r4,#16]
 2718 00c8 CFE7     	 b .L215
 2719              	.LVL299:
 2720              	.L219:
 2721 00ca E368     	 ldr r3,[r4,#12]
 2722 00cc 2868     	 ldr r0,[r5]
 2723              	.LVL300:
 2724 00ce 02E0     	 b .L200
 2725              	.LVL301:
 2726              	.L199:
 2727              	.LBB416:
 2728              	.LBB417:
1191:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2729              	 .loc 1 1191 0
 2730 00d0 2269     	 ldr r2,[r4,#16]
 2731 00d2 9A42     	 cmp r2,r3
 2732 00d4 30D0     	 beq .L204
 2733              	.L200:
 2734              	.LVL302:
 2735              	.LBB418:
 2736              	.LBB419:
1901:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2737              	 .loc 2 1901 0
 2738 00d6 D0F81421 	 ldr r2,[r0,#276]
 2739              	.LBE419:
 2740              	.LBE418:
1177:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 2741              	 .loc 1 1177 0
 2742 00da 1607     	 lsls r6,r2,#28
 2743 00dc 3DD4     	 bmi .L202
1179:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2744              	 .loc 1 1179 0
 2745 00de 2269     	 ldr r2,[r4,#16]
 2746 00e0 9A42     	 cmp r2,r3
 2747 00e2 F5D2     	 bcs .L199
1181:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 2748              	 .loc 1 1181 0
 2749 00e4 FFF7FEFF 	 bl XMC_SPI_CH_GetReceivedData
 2750              	.LVL303:
1182:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2751              	 .loc 1 1182 0
 2752 00e8 2369     	 ldr r3,[r4,#16]
 2753 00ea 6269     	 ldr r2,[r4,#20]
 2754 00ec D054     	 strb r0,[r2,r3]
1186:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 2755              	 .loc 1 1186 0
 2756 00ee 2369     	 ldr r3,[r4,#16]
 2757 00f0 6269     	 ldr r2,[r4,#20]
 2758 00f2 1344     	 add r3,r3,r2
 2759 00f4 000A     	 lsrs r0,r0,#8
 2760              	.LVL304:
 2761 00f6 5870     	 strb r0,[r3,#1]
1188:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 2762              	 .loc 1 1188 0
 2763 00f8 2269     	 ldr r2,[r4,#16]
 2764 00fa 2868     	 ldr r0,[r5]
 2765 00fc E368     	 ldr r3,[r4,#12]
 2766 00fe 0232     	 adds r2,r2,#2
 2767 0100 2261     	 str r2,[r4,#16]
 2768 0102 E5E7     	 b .L199
 2769              	.LVL305:
 2770              	.L221:
 2771 0104 E368     	 ldr r3,[r4,#12]
 2772 0106 2868     	 ldr r0,[r5]
 2773              	.LVL306:
 2774 0108 02E0     	 b .L205
 2775              	.LVL307:
 2776              	.L203:
1191:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2777              	 .loc 1 1191 0
 2778 010a 2269     	 ldr r2,[r4,#16]
 2779 010c 9A42     	 cmp r2,r3
 2780 010e 13D0     	 beq .L204
 2781              	.LVL308:
 2782              	.L205:
 2783              	.LBB421:
 2784              	.LBB420:
1901:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2785              	 .loc 2 1901 0
 2786 0110 D0F81421 	 ldr r2,[r0,#276]
 2787              	.LBE420:
 2788              	.LBE421:
1177:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 2789              	 .loc 1 1177 0
 2790 0114 1207     	 lsls r2,r2,#28
 2791 0116 20D4     	 bmi .L202
1179:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2792              	 .loc 1 1179 0
 2793 0118 2269     	 ldr r2,[r4,#16]
 2794 011a 9A42     	 cmp r2,r3
 2795 011c F5D2     	 bcs .L203
1181:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 2796              	 .loc 1 1181 0
 2797 011e FFF7FEFF 	 bl XMC_SPI_CH_GetReceivedData
 2798              	.LVL309:
1182:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2799              	 .loc 1 1182 0
 2800 0122 2369     	 ldr r3,[r4,#16]
 2801 0124 6269     	 ldr r2,[r4,#20]
 2802 0126 D054     	 strb r0,[r2,r3]
1188:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 2803              	 .loc 1 1188 0
 2804 0128 2269     	 ldr r2,[r4,#16]
 2805 012a 2868     	 ldr r0,[r5]
 2806              	.LVL310:
 2807 012c E368     	 ldr r3,[r4,#12]
 2808 012e 0132     	 adds r2,r2,#1
 2809 0130 2261     	 str r2,[r4,#16]
1191:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2810              	 .loc 1 1191 0
 2811 0132 2269     	 ldr r2,[r4,#16]
 2812 0134 9A42     	 cmp r2,r3
 2813 0136 EBD1     	 bne .L205
 2814              	.LVL311:
 2815              	.L204:
1194:../Dave/Generated/SPI_MASTER/spi_master.c ****       runtime_handle->tx_data_dummy = false;
 2816              	 .loc 1 1194 0
 2817 0138 0021     	 movs r1,#0
 2818 013a E177     	 strb r1,[r4,#31]
1198:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2819              	 .loc 1 1198 0
 2820 013c 6A68     	 ldr r2,[r5,#4]
1195:../Dave/Generated/SPI_MASTER/spi_master.c ****       /*Disable both standard receive and alternative receive FIFO events*/
 2821              	 .loc 1 1195 0
 2822 013e 84F82110 	 strb r1,[r4,#33]
 2823              	.LVL312:
 2824              	.LBB422:
 2825              	.LBB423:
1796:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2826              	 .loc 2 1796 0
 2827 0142 D0F80C11 	 ldr r1,[r0,#268]
 2828              	.LBE423:
 2829              	.LBE422:
1198:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2830              	 .loc 1 1198 0
 2831 0146 566F     	 ldr r6,[r2,#116]
 2832              	.LBB425:
 2833              	.LBB424:
1796:C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc\xmc_usic.h **** }
 2834              	 .loc 2 1796 0
 2835 0148 21F0C041 	 bic r1,r1,#1610612736
 2836 014c C0F80C11 	 str r1,[r0,#268]
 2837              	.LBE424:
 2838              	.LBE425:
1198:../Dave/Generated/SPI_MASTER/spi_master.c ****       {
 2839              	 .loc 1 1198 0
 2840 0150 26B1     	 cbz r6,.L201
1201:../Dave/Generated/SPI_MASTER/spi_master.c ****       }
 2841              	 .loc 1 1201 0
 2842 0152 B047     	 blx r6
 2843              	.LVL313:
 2844 0154 E368     	 ldr r3,[r4,#12]
 2845 0156 6A68     	 ldr r2,[r5,#4]
 2846 0158 00E0     	 b .L201
 2847              	.LVL314:
 2848              	.L202:
 2849 015a 6A68     	 ldr r2,[r5,#4]
 2850              	.LVL315:
 2851              	.L201:
 2852              	.LBE417:
 2853              	.LBE416:
1096:../Dave/Generated/SPI_MASTER/spi_master.c ****     {
 2854              	 .loc 1 1096 0
 2855 015c 92F87D10 	 ldrb r1,[r2,#125]
 2856 0160 2269     	 ldr r2,[r4,#16]
 2857 0162 4E1E     	 subs r6,r1,#1
 2858 0164 0120     	 movs r0,#1
 2859 0166 00FA06F6 	 lsl r6,r0,r6
 2860 016a 9A1A     	 subs r2,r3,r2
 2861 016c B242     	 cmp r2,r6
 2862 016e 3FF67FAF 	 bhi .L196
1099:../Dave/Generated/SPI_MASTER/spi_master.c ****     }
 2863              	 .loc 1 1099 0
 2864 0172 2269     	 ldr r2,[r4,#16]
 2865              	.LVL316:
 2866              	.LBB426:
 2867              	.LBB427:
1216:../Dave/Generated/SPI_MASTER/spi_master.c ****   {
 2868              	 .loc 1 1216 0
 2869 0174 0029     	 cmp r1,#0
 2870 0176 3FF47BAF 	 beq .L196
 2871 017a 9B1A     	 subs r3,r3,r2
 2872              	.LVL317:
 2873 017c 3FF478AF 	 beq .L196
1220:../Dave/Generated/SPI_MASTER/spi_master.c **** 	{
 2874              	 .loc 1 1220 0
 2875 0180 AA68     	 ldr r2,[r5,#8]
 2876 0182 1268     	 ldr r2,[r2]
1218:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2877              	 .loc 1 1218 0
 2878 0184 8840     	 lsls r0,r0,r1
 2879              	.LVL318:
1220:../Dave/Generated/SPI_MASTER/spi_master.c **** 	{
 2880              	 .loc 1 1220 0
 2881 0186 082A     	 cmp r2,#8
1223:../Dave/Generated/SPI_MASTER/spi_master.c **** 	}
 2882              	 .loc 1 1223 0
 2883 0188 88BF     	 it hi
 2884 018a 5B08     	 lsrhi r3,r3,#1
 2885              	.LVL319:
1227:../Dave/Generated/SPI_MASTER/spi_master.c **** 	{
 2886              	 .loc 1 1227 0
 2887 018c 4208     	 lsrs r2,r0,#1
 2888 018e 9A42     	 cmp r2,r3
1237:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 2889              	 .loc 1 1237 0
 2890 0190 2868     	 ldr r0,[r5]
 2891              	.LVL320:
1229:../Dave/Generated/SPI_MASTER/spi_master.c **** 	}
 2892              	 .loc 1 1229 0
 2893 0192 88BF     	 it hi
 2894 0194 03F1FF32 	 addhi r2,r3,#-1
 2895              	.LVL321:
 2896              	.LBE427:
 2897              	.LBE426:
1163:../Dave/Generated/SPI_MASTER/spi_master.c **** 
 2898              	 .loc 1 1163 0
 2899 0198 BDE87040 	 pop {r4,r5,r6,lr}
 2900              	.LCFI47:
 2901              	 .cfi_remember_state
 2902              	 .cfi_restore 14
 2903              	 .cfi_restore 6
 2904              	 .cfi_restore 5
 2905              	 .cfi_restore 4
 2906              	 .cfi_def_cfa_offset 0
 2907              	.LVL322:
 2908              	.LBB429:
 2909              	.LBB428:
1237:../Dave/Generated/SPI_MASTER/spi_master.c ****   }
 2910              	 .loc 1 1237 0
 2911 019c FFF7FEBF 	 b XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit
 2912              	.LVL323:
 2913              	.L242:
 2914              	.LCFI48:
 2915              	 .cfi_restore_state
 2916              	.LBE428:
 2917              	.LBE429:
1115:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 2918              	 .loc 1 1115 0
 2919 01a0 2369     	 ldr r3,[r4,#16]
 2920 01a2 6269     	 ldr r2,[r4,#20]
 2921 01a4 1344     	 add r3,r3,r2
 2922 01a6 000A     	 lsrs r0,r0,#8
 2923              	.LVL324:
 2924 01a8 5870     	 strb r0,[r3,#1]
 2925 01aa 46E7     	 b .L214
 2926              	.LVL325:
 2927              	.L245:
1131:../Dave/Generated/SPI_MASTER/spi_master.c ****         }
 2928              	 .loc 1 1131 0
 2929 01ac 2369     	 ldr r3,[r4,#16]
 2930 01ae 6269     	 ldr r2,[r4,#20]
 2931 01b0 1344     	 add r3,r3,r2
 2932 01b2 000A     	 lsrs r0,r0,#8
 2933              	.LVL326:
 2934 01b4 5870     	 strb r0,[r3,#1]
 2935 01b6 83E7     	 b .L216
 2936              	 .cfi_endproc
 2937              	.LFE306:
 2939              	 .section .data.dummy_data.8576,"aw",%progbits
 2940              	 .align 2
 2941              	 .set .LANCHOR0,.+0
 2944              	dummy_data.8576:
 2945 0000 FF       	 .byte -1
 2946 0001 FF       	 .byte -1
 2947 0002 0000     	 .text
 2948              	.Letext0:
 2949              	 .file 4 "c:\\dave 4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2950              	 .file 5 "c:\\dave 4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2951              	 .file 6 "C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc/xmc_gpio.h"
 2952              	 .file 7 "C:/Workspaces/Dave 4/CTPOT_test1/Libraries/XMCLib/inc/xmc4_gpio.h"
 2953              	 .file 8 "C:/Workspaces/Dave 4/CTPOT_test1/Dave/Generated/DAVE_Common.h"
 2954              	 .file 9 "../Dave/Generated/SPI_MASTER/spi_master.h"
 2955              	 .file 10 "C:/Workspaces/Dave 4/CTPOT_test1/Libraries/CMSIS/Include/core_cm4.h"
 2956              	 .file 11 "C:/Workspaces/Dave 4/CTPOT_test1/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 spi_master.c
    {standard input}:20     .text.SPI_MASTER_lReceiveIRQ:00000000 $t
    {standard input}:24     .text.SPI_MASTER_lReceiveIRQ:00000000 SPI_MASTER_lReceiveIRQ
    {standard input}:381    .text.SPI_MASTER_GetAppVersion:00000000 $t
    {standard input}:386    .text.SPI_MASTER_GetAppVersion:00000000 SPI_MASTER_GetAppVersion
    {standard input}:416    .text.SPI_MASTER_Init:00000000 $t
    {standard input}:421    .text.SPI_MASTER_Init:00000000 SPI_MASTER_Init
    {standard input}:438    .text.SPI_MASTER_SetMode:00000000 $t
    {standard input}:443    .text.SPI_MASTER_SetMode:00000000 SPI_MASTER_SetMode
    {standard input}:514    .text.SPI_MASTER_SetMode:00000042 $d
    {standard input}:522    .text.SPI_MASTER_SetMode:0000004a $t
    {standard input}:750    .text.SPI_MASTER_SetBaudRate:00000000 $t
    {standard input}:755    .text.SPI_MASTER_SetBaudRate:00000000 SPI_MASTER_SetBaudRate
    {standard input}:840    .text.SPI_MASTER_SetBaudRate:00000064 $d
    {standard input}:848    .text.SPI_MASTER_SetBaudRate:00000074 $t
    {standard input}:994    .text.SPI_MASTER_SetBaudRate:00000130 $d
    {standard input}:1002   .text.SPI_MASTER_SetBaudRate:00000150 $t
    {standard input}:1111   .text.SPI_MASTER_Transmit:00000000 $t
    {standard input}:1116   .text.SPI_MASTER_Transmit:00000000 SPI_MASTER_Transmit
    {standard input}:1322   .text.SPI_MASTER_Receive:00000000 $t
    {standard input}:1327   .text.SPI_MASTER_Receive:00000000 SPI_MASTER_Receive
    {standard input}:1442   .text.SPI_MASTER_Receive:0000004c $d
    {standard input}:1449   .text.SPI_MASTER_StartTransmitIRQ:00000000 $t
    {standard input}:1454   .text.SPI_MASTER_StartTransmitIRQ:00000000 SPI_MASTER_StartTransmitIRQ
    {standard input}:1654   .text.SPI_MASTER_StartReceiveIRQ:00000000 $t
    {standard input}:1659   .text.SPI_MASTER_StartReceiveIRQ:00000000 SPI_MASTER_StartReceiveIRQ
    {standard input}:1769   .text.SPI_MASTER_StartReceiveIRQ:0000004c $d
    {standard input}:1774   .text.SPI_MASTER_Transfer:00000000 $t
    {standard input}:1779   .text.SPI_MASTER_Transfer:00000000 SPI_MASTER_Transfer
    {standard input}:1911   .text.SPI_MASTER_AbortReceive:00000000 $t
    {standard input}:1916   .text.SPI_MASTER_AbortReceive:00000000 SPI_MASTER_AbortReceive
    {standard input}:2067   .text.SPI_MASTER_AbortTransmit:00000000 $t
    {standard input}:2072   .text.SPI_MASTER_AbortTransmit:00000000 SPI_MASTER_AbortTransmit
    {standard input}:2170   .text.SPI_MASTER_lTransmitHandler:00000000 $t
    {standard input}:2175   .text.SPI_MASTER_lTransmitHandler:00000000 SPI_MASTER_lTransmitHandler
    {standard input}:2513   .text.SPI_MASTER_lReceiveHandler:00000000 $t
    {standard input}:2518   .text.SPI_MASTER_lReceiveHandler:00000000 SPI_MASTER_lReceiveHandler
    {standard input}:2940   .data.dummy_data.8576:00000000 $d
    {standard input}:2944   .data.dummy_data.8576:00000000 dummy_data.8576
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SPI_CH_GetReceivedData
XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit
XMC_GPIO_SetMode
XMC_GPIO_SetHardwareControl
XMC_SPI_CH_Stop
XMC_SPI_CH_SetBaudrate
XMC_SPI_CH_DisableEvent
