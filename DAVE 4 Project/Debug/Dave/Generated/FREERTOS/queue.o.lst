   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "queue.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.unlikely.prvCopyDataToQueue,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	prvCopyDataToQueue:
  25              	.LFB150:
  26              	 .file 1 "../Dave/Generated/FREERTOS/queue.c"
   1:../Dave/Generated/FREERTOS/queue.c **** /*
   2:../Dave/Generated/FREERTOS/queue.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Dave/Generated/FREERTOS/queue.c ****     All rights reserved
   4:../Dave/Generated/FREERTOS/queue.c **** 
   5:../Dave/Generated/FREERTOS/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Dave/Generated/FREERTOS/queue.c **** 
   7:../Dave/Generated/FREERTOS/queue.c ****     This file is part of the FreeRTOS distribution.
   8:../Dave/Generated/FREERTOS/queue.c **** 
   9:../Dave/Generated/FREERTOS/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Dave/Generated/FREERTOS/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Dave/Generated/FREERTOS/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Dave/Generated/FREERTOS/queue.c **** 
  13:../Dave/Generated/FREERTOS/queue.c ****     ***************************************************************************
  14:../Dave/Generated/FREERTOS/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Dave/Generated/FREERTOS/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Dave/Generated/FREERTOS/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Dave/Generated/FREERTOS/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Dave/Generated/FREERTOS/queue.c ****     ***************************************************************************
  19:../Dave/Generated/FREERTOS/queue.c **** 
  20:../Dave/Generated/FREERTOS/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Dave/Generated/FREERTOS/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Dave/Generated/FREERTOS/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Dave/Generated/FREERTOS/queue.c ****     link: http://www.freertos.org/a00114.html
  24:../Dave/Generated/FREERTOS/queue.c **** 
  25:../Dave/Generated/FREERTOS/queue.c ****     ***************************************************************************
  26:../Dave/Generated/FREERTOS/queue.c ****      *                                                                       *
  27:../Dave/Generated/FREERTOS/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Dave/Generated/FREERTOS/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Dave/Generated/FREERTOS/queue.c ****      *    platform software that is more than just the market leader, it     *
  30:../Dave/Generated/FREERTOS/queue.c ****      *    is the industry's de facto standard.                               *
  31:../Dave/Generated/FREERTOS/queue.c ****      *                                                                       *
  32:../Dave/Generated/FREERTOS/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Dave/Generated/FREERTOS/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Dave/Generated/FREERTOS/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Dave/Generated/FREERTOS/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Dave/Generated/FREERTOS/queue.c ****      *                                                                       *
  37:../Dave/Generated/FREERTOS/queue.c ****     ***************************************************************************
  38:../Dave/Generated/FREERTOS/queue.c **** 
  39:../Dave/Generated/FREERTOS/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Dave/Generated/FREERTOS/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Dave/Generated/FREERTOS/queue.c ****     defined configASSERT()?
  42:../Dave/Generated/FREERTOS/queue.c **** 
  43:../Dave/Generated/FREERTOS/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Dave/Generated/FREERTOS/queue.c ****     embedded software for free we request you assist our global community by
  45:../Dave/Generated/FREERTOS/queue.c ****     participating in the support forum.
  46:../Dave/Generated/FREERTOS/queue.c **** 
  47:../Dave/Generated/FREERTOS/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Dave/Generated/FREERTOS/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Dave/Generated/FREERTOS/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Dave/Generated/FREERTOS/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Dave/Generated/FREERTOS/queue.c **** 
  52:../Dave/Generated/FREERTOS/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Dave/Generated/FREERTOS/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Dave/Generated/FREERTOS/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Dave/Generated/FREERTOS/queue.c **** 
  56:../Dave/Generated/FREERTOS/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Dave/Generated/FREERTOS/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Dave/Generated/FREERTOS/queue.c **** 
  59:../Dave/Generated/FREERTOS/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Dave/Generated/FREERTOS/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Dave/Generated/FREERTOS/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Dave/Generated/FREERTOS/queue.c **** 
  63:../Dave/Generated/FREERTOS/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Dave/Generated/FREERTOS/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Dave/Generated/FREERTOS/queue.c ****     mission critical applications that require provable dependability.
  66:../Dave/Generated/FREERTOS/queue.c **** 
  67:../Dave/Generated/FREERTOS/queue.c ****     1 tab == 4 spaces!
  68:../Dave/Generated/FREERTOS/queue.c **** */
  69:../Dave/Generated/FREERTOS/queue.c **** 
  70:../Dave/Generated/FREERTOS/queue.c **** #include <stdlib.h>
  71:../Dave/Generated/FREERTOS/queue.c **** #include <string.h>
  72:../Dave/Generated/FREERTOS/queue.c **** 
  73:../Dave/Generated/FREERTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:../Dave/Generated/FREERTOS/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:../Dave/Generated/FREERTOS/queue.c **** task.h is included from an application file. */
  76:../Dave/Generated/FREERTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:../Dave/Generated/FREERTOS/queue.c **** 
  78:../Dave/Generated/FREERTOS/queue.c **** #include "FreeRTOS.h"
  79:../Dave/Generated/FREERTOS/queue.c **** #include "task.h"
  80:../Dave/Generated/FREERTOS/queue.c **** #include "queue.h"
  81:../Dave/Generated/FREERTOS/queue.c **** 
  82:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:../Dave/Generated/FREERTOS/queue.c **** 	#include "croutine.h"
  84:../Dave/Generated/FREERTOS/queue.c **** #endif
  85:../Dave/Generated/FREERTOS/queue.c **** 
  86:../Dave/Generated/FREERTOS/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  87:../Dave/Generated/FREERTOS/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  88:../Dave/Generated/FREERTOS/queue.c **** header files above, but not in this file, in order to generate the correct
  89:../Dave/Generated/FREERTOS/queue.c **** privileged Vs unprivileged linkage and placement. */
  90:../Dave/Generated/FREERTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:../Dave/Generated/FREERTOS/queue.c **** 
  92:../Dave/Generated/FREERTOS/queue.c **** 
  93:../Dave/Generated/FREERTOS/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  94:../Dave/Generated/FREERTOS/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  95:../Dave/Generated/FREERTOS/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  96:../Dave/Generated/FREERTOS/queue.c **** 
  97:../Dave/Generated/FREERTOS/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:../Dave/Generated/FREERTOS/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:../Dave/Generated/FREERTOS/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:../Dave/Generated/FREERTOS/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:../Dave/Generated/FREERTOS/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:../Dave/Generated/FREERTOS/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:../Dave/Generated/FREERTOS/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:../Dave/Generated/FREERTOS/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:../Dave/Generated/FREERTOS/queue.c **** against the coding standard (although an exception to the standard has been
 106:../Dave/Generated/FREERTOS/queue.c **** permitted where the dual use also significantly changes the type of the
 107:../Dave/Generated/FREERTOS/queue.c **** structure member). */
 108:../Dave/Generated/FREERTOS/queue.c **** #define pxMutexHolder					pcTail
 109:../Dave/Generated/FREERTOS/queue.c **** #define uxQueueType						pcHead
 110:../Dave/Generated/FREERTOS/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:../Dave/Generated/FREERTOS/queue.c **** 
 112:../Dave/Generated/FREERTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:../Dave/Generated/FREERTOS/queue.c **** zero. */
 114:../Dave/Generated/FREERTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:../Dave/Generated/FREERTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:../Dave/Generated/FREERTOS/queue.c **** 
 117:../Dave/Generated/FREERTOS/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:../Dave/Generated/FREERTOS/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:../Dave/Generated/FREERTOS/queue.c **** 	performed just because a higher priority task has been woken. */
 120:../Dave/Generated/FREERTOS/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:../Dave/Generated/FREERTOS/queue.c **** #else
 122:../Dave/Generated/FREERTOS/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:../Dave/Generated/FREERTOS/queue.c **** #endif
 124:../Dave/Generated/FREERTOS/queue.c **** 
 125:../Dave/Generated/FREERTOS/queue.c **** /*
 126:../Dave/Generated/FREERTOS/queue.c ****  * Definition of the queue used by the scheduler.
 127:../Dave/Generated/FREERTOS/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:../Dave/Generated/FREERTOS/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:../Dave/Generated/FREERTOS/queue.c ****  */
 130:../Dave/Generated/FREERTOS/queue.c **** typedef struct QueueDefinition
 131:../Dave/Generated/FREERTOS/queue.c **** {
 132:../Dave/Generated/FREERTOS/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:../Dave/Generated/FREERTOS/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:../Dave/Generated/FREERTOS/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:../Dave/Generated/FREERTOS/queue.c **** 
 136:../Dave/Generated/FREERTOS/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:../Dave/Generated/FREERTOS/queue.c **** 	{
 138:../Dave/Generated/FREERTOS/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:../Dave/Generated/FREERTOS/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:../Dave/Generated/FREERTOS/queue.c **** 	} u;
 141:../Dave/Generated/FREERTOS/queue.c **** 
 142:../Dave/Generated/FREERTOS/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:../Dave/Generated/FREERTOS/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 144:../Dave/Generated/FREERTOS/queue.c **** 
 145:../Dave/Generated/FREERTOS/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:../Dave/Generated/FREERTOS/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 147:../Dave/Generated/FREERTOS/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:../Dave/Generated/FREERTOS/queue.c **** 
 149:../Dave/Generated/FREERTOS/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 150:../Dave/Generated/FREERTOS/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 151:../Dave/Generated/FREERTOS/queue.c **** 
 152:../Dave/Generated/FREERTOS/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 153:../Dave/Generated/FREERTOS/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 154:../Dave/Generated/FREERTOS/queue.c **** 	#endif
 155:../Dave/Generated/FREERTOS/queue.c **** 
 156:../Dave/Generated/FREERTOS/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 157:../Dave/Generated/FREERTOS/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 158:../Dave/Generated/FREERTOS/queue.c **** 	#endif
 159:../Dave/Generated/FREERTOS/queue.c **** 
 160:../Dave/Generated/FREERTOS/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 161:../Dave/Generated/FREERTOS/queue.c **** 		UBaseType_t uxQueueNumber;
 162:../Dave/Generated/FREERTOS/queue.c **** 		uint8_t ucQueueType;
 163:../Dave/Generated/FREERTOS/queue.c **** 	#endif
 164:../Dave/Generated/FREERTOS/queue.c **** 
 165:../Dave/Generated/FREERTOS/queue.c **** } xQUEUE;
 166:../Dave/Generated/FREERTOS/queue.c **** 
 167:../Dave/Generated/FREERTOS/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 168:../Dave/Generated/FREERTOS/queue.c **** name below to enable the use of older kernel aware debuggers. */
 169:../Dave/Generated/FREERTOS/queue.c **** typedef xQUEUE Queue_t;
 170:../Dave/Generated/FREERTOS/queue.c **** 
 171:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 172:../Dave/Generated/FREERTOS/queue.c **** 
 173:../Dave/Generated/FREERTOS/queue.c **** /*
 174:../Dave/Generated/FREERTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 175:../Dave/Generated/FREERTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 176:../Dave/Generated/FREERTOS/queue.c ****  */
 177:../Dave/Generated/FREERTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 178:../Dave/Generated/FREERTOS/queue.c **** 
 179:../Dave/Generated/FREERTOS/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 180:../Dave/Generated/FREERTOS/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 181:../Dave/Generated/FREERTOS/queue.c **** 	more user friendly. */
 182:../Dave/Generated/FREERTOS/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 183:../Dave/Generated/FREERTOS/queue.c **** 	{
 184:../Dave/Generated/FREERTOS/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 185:../Dave/Generated/FREERTOS/queue.c **** 		QueueHandle_t xHandle;
 186:../Dave/Generated/FREERTOS/queue.c **** 	} xQueueRegistryItem;
 187:../Dave/Generated/FREERTOS/queue.c **** 
 188:../Dave/Generated/FREERTOS/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 189:../Dave/Generated/FREERTOS/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 190:../Dave/Generated/FREERTOS/queue.c **** 	debuggers. */
 191:../Dave/Generated/FREERTOS/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 192:../Dave/Generated/FREERTOS/queue.c **** 
 193:../Dave/Generated/FREERTOS/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 194:../Dave/Generated/FREERTOS/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 195:../Dave/Generated/FREERTOS/queue.c **** 	array position being vacant. */
 196:../Dave/Generated/FREERTOS/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 197:../Dave/Generated/FREERTOS/queue.c **** 
 198:../Dave/Generated/FREERTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 199:../Dave/Generated/FREERTOS/queue.c **** 
 200:../Dave/Generated/FREERTOS/queue.c **** /*
 201:../Dave/Generated/FREERTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 202:../Dave/Generated/FREERTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 203:../Dave/Generated/FREERTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 204:../Dave/Generated/FREERTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 205:../Dave/Generated/FREERTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 206:../Dave/Generated/FREERTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 207:../Dave/Generated/FREERTOS/queue.c ****  */
 208:../Dave/Generated/FREERTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 209:../Dave/Generated/FREERTOS/queue.c **** 
 210:../Dave/Generated/FREERTOS/queue.c **** /*
 211:../Dave/Generated/FREERTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 212:../Dave/Generated/FREERTOS/queue.c ****  *
 213:../Dave/Generated/FREERTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 214:../Dave/Generated/FREERTOS/queue.c ****  */
 215:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 216:../Dave/Generated/FREERTOS/queue.c **** 
 217:../Dave/Generated/FREERTOS/queue.c **** /*
 218:../Dave/Generated/FREERTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 219:../Dave/Generated/FREERTOS/queue.c ****  *
 220:../Dave/Generated/FREERTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 221:../Dave/Generated/FREERTOS/queue.c ****  */
 222:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 223:../Dave/Generated/FREERTOS/queue.c **** 
 224:../Dave/Generated/FREERTOS/queue.c **** /*
 225:../Dave/Generated/FREERTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 226:../Dave/Generated/FREERTOS/queue.c ****  * back of the queue.
 227:../Dave/Generated/FREERTOS/queue.c ****  */
 228:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 229:../Dave/Generated/FREERTOS/queue.c **** 
 230:../Dave/Generated/FREERTOS/queue.c **** /*
 231:../Dave/Generated/FREERTOS/queue.c ****  * Copies an item out of a queue.
 232:../Dave/Generated/FREERTOS/queue.c ****  */
 233:../Dave/Generated/FREERTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 234:../Dave/Generated/FREERTOS/queue.c **** 
 235:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 236:../Dave/Generated/FREERTOS/queue.c **** 	/*
 237:../Dave/Generated/FREERTOS/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 238:../Dave/Generated/FREERTOS/queue.c **** 	 * the queue set that the queue contains data.
 239:../Dave/Generated/FREERTOS/queue.c **** 	 */
 240:../Dave/Generated/FREERTOS/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 241:../Dave/Generated/FREERTOS/queue.c **** #endif
 242:../Dave/Generated/FREERTOS/queue.c **** 
 243:../Dave/Generated/FREERTOS/queue.c **** /*
 244:../Dave/Generated/FREERTOS/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 245:../Dave/Generated/FREERTOS/queue.c ****  * dynamically to fill in the structure's members.
 246:../Dave/Generated/FREERTOS/queue.c ****  */
 247:../Dave/Generated/FREERTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 248:../Dave/Generated/FREERTOS/queue.c **** 
 249:../Dave/Generated/FREERTOS/queue.c **** /*
 250:../Dave/Generated/FREERTOS/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 251:../Dave/Generated/FREERTOS/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 252:../Dave/Generated/FREERTOS/queue.c ****  * as a mutex.
 253:../Dave/Generated/FREERTOS/queue.c ****  */
 254:../Dave/Generated/FREERTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
 255:../Dave/Generated/FREERTOS/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 256:../Dave/Generated/FREERTOS/queue.c **** #endif
 257:../Dave/Generated/FREERTOS/queue.c **** 
 258:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 259:../Dave/Generated/FREERTOS/queue.c **** 
 260:../Dave/Generated/FREERTOS/queue.c **** /*
 261:../Dave/Generated/FREERTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 262:../Dave/Generated/FREERTOS/queue.c ****  * accessing the queue event lists.
 263:../Dave/Generated/FREERTOS/queue.c ****  */
 264:../Dave/Generated/FREERTOS/queue.c **** #define prvLockQueue( pxQueue )								\
 265:../Dave/Generated/FREERTOS/queue.c **** 	taskENTER_CRITICAL();									\
 266:../Dave/Generated/FREERTOS/queue.c **** 	{														\
 267:../Dave/Generated/FREERTOS/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 268:../Dave/Generated/FREERTOS/queue.c **** 		{													\
 269:../Dave/Generated/FREERTOS/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 270:../Dave/Generated/FREERTOS/queue.c **** 		}													\
 271:../Dave/Generated/FREERTOS/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 272:../Dave/Generated/FREERTOS/queue.c **** 		{													\
 273:../Dave/Generated/FREERTOS/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 274:../Dave/Generated/FREERTOS/queue.c **** 		}													\
 275:../Dave/Generated/FREERTOS/queue.c **** 	}														\
 276:../Dave/Generated/FREERTOS/queue.c **** 	taskEXIT_CRITICAL()
 277:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 278:../Dave/Generated/FREERTOS/queue.c **** 
 279:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 280:../Dave/Generated/FREERTOS/queue.c **** {
 281:../Dave/Generated/FREERTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 282:../Dave/Generated/FREERTOS/queue.c **** 
 283:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( pxQueue );
 284:../Dave/Generated/FREERTOS/queue.c **** 
 285:../Dave/Generated/FREERTOS/queue.c **** 	taskENTER_CRITICAL();
 286:../Dave/Generated/FREERTOS/queue.c **** 	{
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 288:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 289:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 290:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 291:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 292:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 293:../Dave/Generated/FREERTOS/queue.c **** 
 294:../Dave/Generated/FREERTOS/queue.c **** 		if( xNewQueue == pdFALSE )
 295:../Dave/Generated/FREERTOS/queue.c **** 		{
 296:../Dave/Generated/FREERTOS/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 297:../Dave/Generated/FREERTOS/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 298:../Dave/Generated/FREERTOS/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 299:../Dave/Generated/FREERTOS/queue.c **** 			the queue, then one should be unblocked as after this function exits
 300:../Dave/Generated/FREERTOS/queue.c **** 			it will be possible to write to it. */
 301:../Dave/Generated/FREERTOS/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 302:../Dave/Generated/FREERTOS/queue.c **** 			{
 303:../Dave/Generated/FREERTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 304:../Dave/Generated/FREERTOS/queue.c **** 				{
 305:../Dave/Generated/FREERTOS/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 306:../Dave/Generated/FREERTOS/queue.c **** 				}
 307:../Dave/Generated/FREERTOS/queue.c **** 				else
 308:../Dave/Generated/FREERTOS/queue.c **** 				{
 309:../Dave/Generated/FREERTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 310:../Dave/Generated/FREERTOS/queue.c **** 				}
 311:../Dave/Generated/FREERTOS/queue.c **** 			}
 312:../Dave/Generated/FREERTOS/queue.c **** 			else
 313:../Dave/Generated/FREERTOS/queue.c **** 			{
 314:../Dave/Generated/FREERTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 315:../Dave/Generated/FREERTOS/queue.c **** 			}
 316:../Dave/Generated/FREERTOS/queue.c **** 		}
 317:../Dave/Generated/FREERTOS/queue.c **** 		else
 318:../Dave/Generated/FREERTOS/queue.c **** 		{
 319:../Dave/Generated/FREERTOS/queue.c **** 			/* Ensure the event queues start in the correct state. */
 320:../Dave/Generated/FREERTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 321:../Dave/Generated/FREERTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 322:../Dave/Generated/FREERTOS/queue.c **** 		}
 323:../Dave/Generated/FREERTOS/queue.c **** 	}
 324:../Dave/Generated/FREERTOS/queue.c **** 	taskEXIT_CRITICAL();
 325:../Dave/Generated/FREERTOS/queue.c **** 
 326:../Dave/Generated/FREERTOS/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 327:../Dave/Generated/FREERTOS/queue.c **** 	versions. */
 328:../Dave/Generated/FREERTOS/queue.c **** 	return pdPASS;
 329:../Dave/Generated/FREERTOS/queue.c **** }
 330:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 331:../Dave/Generated/FREERTOS/queue.c **** 
 332:../Dave/Generated/FREERTOS/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 333:../Dave/Generated/FREERTOS/queue.c **** 
 334:../Dave/Generated/FREERTOS/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 335:../Dave/Generated/FREERTOS/queue.c **** 	{
 336:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t *pxNewQueue;
 337:../Dave/Generated/FREERTOS/queue.c **** 
 338:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 339:../Dave/Generated/FREERTOS/queue.c **** 
 340:../Dave/Generated/FREERTOS/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 341:../Dave/Generated/FREERTOS/queue.c **** 		supplied. */
 342:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 343:../Dave/Generated/FREERTOS/queue.c **** 
 344:../Dave/Generated/FREERTOS/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 345:../Dave/Generated/FREERTOS/queue.c **** 		should not be provided if the item size is 0. */
 346:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 347:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 348:../Dave/Generated/FREERTOS/queue.c **** 
 349:../Dave/Generated/FREERTOS/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 350:../Dave/Generated/FREERTOS/queue.c **** 		{
 351:../Dave/Generated/FREERTOS/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 352:../Dave/Generated/FREERTOS/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 353:../Dave/Generated/FREERTOS/queue.c **** 			the real queue and semaphore structures. */
 354:../Dave/Generated/FREERTOS/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 355:../Dave/Generated/FREERTOS/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 356:../Dave/Generated/FREERTOS/queue.c **** 		}
 357:../Dave/Generated/FREERTOS/queue.c **** 		#endif /* configASSERT_DEFINED */
 358:../Dave/Generated/FREERTOS/queue.c **** 
 359:../Dave/Generated/FREERTOS/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 360:../Dave/Generated/FREERTOS/queue.c **** 		The address of a statically allocated storage area was also passed in
 361:../Dave/Generated/FREERTOS/queue.c **** 		but is already set. */
 362:../Dave/Generated/FREERTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 363:../Dave/Generated/FREERTOS/queue.c **** 
 364:../Dave/Generated/FREERTOS/queue.c **** 		if( pxNewQueue != NULL )
 365:../Dave/Generated/FREERTOS/queue.c **** 		{
 366:../Dave/Generated/FREERTOS/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:../Dave/Generated/FREERTOS/queue.c **** 			{
 368:../Dave/Generated/FREERTOS/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 369:../Dave/Generated/FREERTOS/queue.c **** 				note this queue was allocated statically in case the queue is
 370:../Dave/Generated/FREERTOS/queue.c **** 				later deleted. */
 371:../Dave/Generated/FREERTOS/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 372:../Dave/Generated/FREERTOS/queue.c **** 			}
 373:../Dave/Generated/FREERTOS/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 374:../Dave/Generated/FREERTOS/queue.c **** 
 375:../Dave/Generated/FREERTOS/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 376:../Dave/Generated/FREERTOS/queue.c **** 		}
 377:../Dave/Generated/FREERTOS/queue.c **** 
 378:../Dave/Generated/FREERTOS/queue.c **** 		return pxNewQueue;
 379:../Dave/Generated/FREERTOS/queue.c **** 	}
 380:../Dave/Generated/FREERTOS/queue.c **** 
 381:../Dave/Generated/FREERTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 382:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 383:../Dave/Generated/FREERTOS/queue.c **** 
 384:../Dave/Generated/FREERTOS/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 385:../Dave/Generated/FREERTOS/queue.c **** 
 386:../Dave/Generated/FREERTOS/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 387:../Dave/Generated/FREERTOS/queue.c **** 	{
 388:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t *pxNewQueue;
 389:../Dave/Generated/FREERTOS/queue.c **** 	size_t xQueueSizeInBytes;
 390:../Dave/Generated/FREERTOS/queue.c **** 	uint8_t *pucQueueStorage;
 391:../Dave/Generated/FREERTOS/queue.c **** 
 392:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 393:../Dave/Generated/FREERTOS/queue.c **** 
 394:../Dave/Generated/FREERTOS/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 395:../Dave/Generated/FREERTOS/queue.c **** 		{
 396:../Dave/Generated/FREERTOS/queue.c **** 			/* There is not going to be a queue storage area. */
 397:../Dave/Generated/FREERTOS/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 398:../Dave/Generated/FREERTOS/queue.c **** 		}
 399:../Dave/Generated/FREERTOS/queue.c **** 		else
 400:../Dave/Generated/FREERTOS/queue.c **** 		{
 401:../Dave/Generated/FREERTOS/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 402:../Dave/Generated/FREERTOS/queue.c **** 			can be in the queue at any time. */
 403:../Dave/Generated/FREERTOS/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 404:../Dave/Generated/FREERTOS/queue.c **** 		}
 405:../Dave/Generated/FREERTOS/queue.c **** 
 406:../Dave/Generated/FREERTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 407:../Dave/Generated/FREERTOS/queue.c **** 
 408:../Dave/Generated/FREERTOS/queue.c **** 		if( pxNewQueue != NULL )
 409:../Dave/Generated/FREERTOS/queue.c **** 		{
 410:../Dave/Generated/FREERTOS/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 411:../Dave/Generated/FREERTOS/queue.c **** 			storage area. */
 412:../Dave/Generated/FREERTOS/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 413:../Dave/Generated/FREERTOS/queue.c **** 
 414:../Dave/Generated/FREERTOS/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:../Dave/Generated/FREERTOS/queue.c **** 			{
 416:../Dave/Generated/FREERTOS/queue.c **** 				/* Queues can be created either statically or dynamically, so
 417:../Dave/Generated/FREERTOS/queue.c **** 				note this task was created dynamically in case it is later
 418:../Dave/Generated/FREERTOS/queue.c **** 				deleted. */
 419:../Dave/Generated/FREERTOS/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 420:../Dave/Generated/FREERTOS/queue.c **** 			}
 421:../Dave/Generated/FREERTOS/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 422:../Dave/Generated/FREERTOS/queue.c **** 
 423:../Dave/Generated/FREERTOS/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 424:../Dave/Generated/FREERTOS/queue.c **** 		}
 425:../Dave/Generated/FREERTOS/queue.c **** 
 426:../Dave/Generated/FREERTOS/queue.c **** 		return pxNewQueue;
 427:../Dave/Generated/FREERTOS/queue.c **** 	}
 428:../Dave/Generated/FREERTOS/queue.c **** 
 429:../Dave/Generated/FREERTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 430:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 431:../Dave/Generated/FREERTOS/queue.c **** 
 432:../Dave/Generated/FREERTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 433:../Dave/Generated/FREERTOS/queue.c **** {
 434:../Dave/Generated/FREERTOS/queue.c **** 	/* Remove compiler warnings about unused parameters should
 435:../Dave/Generated/FREERTOS/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 436:../Dave/Generated/FREERTOS/queue.c **** 	( void ) ucQueueType;
 437:../Dave/Generated/FREERTOS/queue.c **** 
 438:../Dave/Generated/FREERTOS/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 439:../Dave/Generated/FREERTOS/queue.c **** 	{
 440:../Dave/Generated/FREERTOS/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 441:../Dave/Generated/FREERTOS/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 442:../Dave/Generated/FREERTOS/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 443:../Dave/Generated/FREERTOS/queue.c **** 		value that is known to be within the memory map. */
 444:../Dave/Generated/FREERTOS/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 445:../Dave/Generated/FREERTOS/queue.c **** 	}
 446:../Dave/Generated/FREERTOS/queue.c **** 	else
 447:../Dave/Generated/FREERTOS/queue.c **** 	{
 448:../Dave/Generated/FREERTOS/queue.c **** 		/* Set the head to the start of the queue storage area. */
 449:../Dave/Generated/FREERTOS/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 450:../Dave/Generated/FREERTOS/queue.c **** 	}
 451:../Dave/Generated/FREERTOS/queue.c **** 
 452:../Dave/Generated/FREERTOS/queue.c **** 	/* Initialise the queue members as described where the queue type is
 453:../Dave/Generated/FREERTOS/queue.c **** 	defined. */
 454:../Dave/Generated/FREERTOS/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 455:../Dave/Generated/FREERTOS/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 456:../Dave/Generated/FREERTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 457:../Dave/Generated/FREERTOS/queue.c **** 
 458:../Dave/Generated/FREERTOS/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 459:../Dave/Generated/FREERTOS/queue.c **** 	{
 460:../Dave/Generated/FREERTOS/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 461:../Dave/Generated/FREERTOS/queue.c **** 	}
 462:../Dave/Generated/FREERTOS/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 463:../Dave/Generated/FREERTOS/queue.c **** 
 464:../Dave/Generated/FREERTOS/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 465:../Dave/Generated/FREERTOS/queue.c **** 	{
 466:../Dave/Generated/FREERTOS/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 467:../Dave/Generated/FREERTOS/queue.c **** 	}
 468:../Dave/Generated/FREERTOS/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 469:../Dave/Generated/FREERTOS/queue.c **** 
 470:../Dave/Generated/FREERTOS/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 471:../Dave/Generated/FREERTOS/queue.c **** }
 472:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 473:../Dave/Generated/FREERTOS/queue.c **** 
 474:../Dave/Generated/FREERTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
 475:../Dave/Generated/FREERTOS/queue.c **** 
 476:../Dave/Generated/FREERTOS/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 477:../Dave/Generated/FREERTOS/queue.c **** 	{
 478:../Dave/Generated/FREERTOS/queue.c **** 		if( pxNewQueue != NULL )
 479:../Dave/Generated/FREERTOS/queue.c **** 		{
 480:../Dave/Generated/FREERTOS/queue.c **** 			/* The queue create function will set all the queue structure members
 481:../Dave/Generated/FREERTOS/queue.c **** 			correctly for a generic queue, but this function is creating a
 482:../Dave/Generated/FREERTOS/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 483:../Dave/Generated/FREERTOS/queue.c **** 			in particular the information required for priority inheritance. */
 484:../Dave/Generated/FREERTOS/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 485:../Dave/Generated/FREERTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 486:../Dave/Generated/FREERTOS/queue.c **** 
 487:../Dave/Generated/FREERTOS/queue.c **** 			/* In case this is a recursive mutex. */
 488:../Dave/Generated/FREERTOS/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 489:../Dave/Generated/FREERTOS/queue.c **** 
 490:../Dave/Generated/FREERTOS/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 491:../Dave/Generated/FREERTOS/queue.c **** 
 492:../Dave/Generated/FREERTOS/queue.c **** 			/* Start with the semaphore in the expected state. */
 493:../Dave/Generated/FREERTOS/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 494:../Dave/Generated/FREERTOS/queue.c **** 		}
 495:../Dave/Generated/FREERTOS/queue.c **** 		else
 496:../Dave/Generated/FREERTOS/queue.c **** 		{
 497:../Dave/Generated/FREERTOS/queue.c **** 			traceCREATE_MUTEX_FAILED();
 498:../Dave/Generated/FREERTOS/queue.c **** 		}
 499:../Dave/Generated/FREERTOS/queue.c **** 	}
 500:../Dave/Generated/FREERTOS/queue.c **** 
 501:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_MUTEXES */
 502:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 503:../Dave/Generated/FREERTOS/queue.c **** 
 504:../Dave/Generated/FREERTOS/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 505:../Dave/Generated/FREERTOS/queue.c **** 
 506:../Dave/Generated/FREERTOS/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 507:../Dave/Generated/FREERTOS/queue.c **** 	{
 508:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t *pxNewQueue;
 509:../Dave/Generated/FREERTOS/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 510:../Dave/Generated/FREERTOS/queue.c **** 
 511:../Dave/Generated/FREERTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 512:../Dave/Generated/FREERTOS/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 513:../Dave/Generated/FREERTOS/queue.c **** 
 514:../Dave/Generated/FREERTOS/queue.c **** 		return pxNewQueue;
 515:../Dave/Generated/FREERTOS/queue.c **** 	}
 516:../Dave/Generated/FREERTOS/queue.c **** 
 517:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_MUTEXES */
 518:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 519:../Dave/Generated/FREERTOS/queue.c **** 
 520:../Dave/Generated/FREERTOS/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 521:../Dave/Generated/FREERTOS/queue.c **** 
 522:../Dave/Generated/FREERTOS/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 523:../Dave/Generated/FREERTOS/queue.c **** 	{
 524:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t *pxNewQueue;
 525:../Dave/Generated/FREERTOS/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 526:../Dave/Generated/FREERTOS/queue.c **** 
 527:../Dave/Generated/FREERTOS/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 528:../Dave/Generated/FREERTOS/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 529:../Dave/Generated/FREERTOS/queue.c **** 		( void ) ucQueueType;
 530:../Dave/Generated/FREERTOS/queue.c **** 
 531:../Dave/Generated/FREERTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 532:../Dave/Generated/FREERTOS/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 533:../Dave/Generated/FREERTOS/queue.c **** 
 534:../Dave/Generated/FREERTOS/queue.c **** 		return pxNewQueue;
 535:../Dave/Generated/FREERTOS/queue.c **** 	}
 536:../Dave/Generated/FREERTOS/queue.c **** 
 537:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_MUTEXES */
 538:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 539:../Dave/Generated/FREERTOS/queue.c **** 
 540:../Dave/Generated/FREERTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 541:../Dave/Generated/FREERTOS/queue.c **** 
 542:../Dave/Generated/FREERTOS/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 543:../Dave/Generated/FREERTOS/queue.c **** 	{
 544:../Dave/Generated/FREERTOS/queue.c **** 	void *pxReturn;
 545:../Dave/Generated/FREERTOS/queue.c **** 
 546:../Dave/Generated/FREERTOS/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 547:../Dave/Generated/FREERTOS/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 548:../Dave/Generated/FREERTOS/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 549:../Dave/Generated/FREERTOS/queue.c **** 		identity of the mutex holder, as the holder may change between the
 550:../Dave/Generated/FREERTOS/queue.c **** 		following critical section exiting and the function returning. */
 551:../Dave/Generated/FREERTOS/queue.c **** 		taskENTER_CRITICAL();
 552:../Dave/Generated/FREERTOS/queue.c **** 		{
 553:../Dave/Generated/FREERTOS/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 554:../Dave/Generated/FREERTOS/queue.c **** 			{
 555:../Dave/Generated/FREERTOS/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 556:../Dave/Generated/FREERTOS/queue.c **** 			}
 557:../Dave/Generated/FREERTOS/queue.c **** 			else
 558:../Dave/Generated/FREERTOS/queue.c **** 			{
 559:../Dave/Generated/FREERTOS/queue.c **** 				pxReturn = NULL;
 560:../Dave/Generated/FREERTOS/queue.c **** 			}
 561:../Dave/Generated/FREERTOS/queue.c **** 		}
 562:../Dave/Generated/FREERTOS/queue.c **** 		taskEXIT_CRITICAL();
 563:../Dave/Generated/FREERTOS/queue.c **** 
 564:../Dave/Generated/FREERTOS/queue.c **** 		return pxReturn;
 565:../Dave/Generated/FREERTOS/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 566:../Dave/Generated/FREERTOS/queue.c **** 
 567:../Dave/Generated/FREERTOS/queue.c **** #endif
 568:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 569:../Dave/Generated/FREERTOS/queue.c **** 
 570:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 571:../Dave/Generated/FREERTOS/queue.c **** 
 572:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 573:../Dave/Generated/FREERTOS/queue.c **** 	{
 574:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xReturn;
 575:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 576:../Dave/Generated/FREERTOS/queue.c **** 
 577:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( pxMutex );
 578:../Dave/Generated/FREERTOS/queue.c **** 
 579:../Dave/Generated/FREERTOS/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 580:../Dave/Generated/FREERTOS/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 581:../Dave/Generated/FREERTOS/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 582:../Dave/Generated/FREERTOS/queue.c **** 		this is the only condition we are interested in it does not matter if
 583:../Dave/Generated/FREERTOS/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 584:../Dave/Generated/FREERTOS/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 585:../Dave/Generated/FREERTOS/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 586:../Dave/Generated/FREERTOS/queue.c **** 		{
 587:../Dave/Generated/FREERTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 588:../Dave/Generated/FREERTOS/queue.c **** 
 589:../Dave/Generated/FREERTOS/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 590:../Dave/Generated/FREERTOS/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 591:../Dave/Generated/FREERTOS/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 592:../Dave/Generated/FREERTOS/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 593:../Dave/Generated/FREERTOS/queue.c **** 			uxRecursiveCallCount member. */
 594:../Dave/Generated/FREERTOS/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 595:../Dave/Generated/FREERTOS/queue.c **** 
 596:../Dave/Generated/FREERTOS/queue.c **** 			/* Has the recursive call count unwound to 0? */
 597:../Dave/Generated/FREERTOS/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 598:../Dave/Generated/FREERTOS/queue.c **** 			{
 599:../Dave/Generated/FREERTOS/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 600:../Dave/Generated/FREERTOS/queue.c **** 				task that might be waiting to access the mutex. */
 601:../Dave/Generated/FREERTOS/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 602:../Dave/Generated/FREERTOS/queue.c **** 			}
 603:../Dave/Generated/FREERTOS/queue.c **** 			else
 604:../Dave/Generated/FREERTOS/queue.c **** 			{
 605:../Dave/Generated/FREERTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 606:../Dave/Generated/FREERTOS/queue.c **** 			}
 607:../Dave/Generated/FREERTOS/queue.c **** 
 608:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdPASS;
 609:../Dave/Generated/FREERTOS/queue.c **** 		}
 610:../Dave/Generated/FREERTOS/queue.c **** 		else
 611:../Dave/Generated/FREERTOS/queue.c **** 		{
 612:../Dave/Generated/FREERTOS/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 613:../Dave/Generated/FREERTOS/queue.c **** 			holder. */
 614:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdFAIL;
 615:../Dave/Generated/FREERTOS/queue.c **** 
 616:../Dave/Generated/FREERTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 617:../Dave/Generated/FREERTOS/queue.c **** 		}
 618:../Dave/Generated/FREERTOS/queue.c **** 
 619:../Dave/Generated/FREERTOS/queue.c **** 		return xReturn;
 620:../Dave/Generated/FREERTOS/queue.c **** 	}
 621:../Dave/Generated/FREERTOS/queue.c **** 
 622:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 623:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 624:../Dave/Generated/FREERTOS/queue.c **** 
 625:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 626:../Dave/Generated/FREERTOS/queue.c **** 
 627:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 628:../Dave/Generated/FREERTOS/queue.c **** 	{
 629:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xReturn;
 630:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 631:../Dave/Generated/FREERTOS/queue.c **** 
 632:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( pxMutex );
 633:../Dave/Generated/FREERTOS/queue.c **** 
 634:../Dave/Generated/FREERTOS/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 635:../Dave/Generated/FREERTOS/queue.c **** 		xQueueGiveMutexRecursive(). */
 636:../Dave/Generated/FREERTOS/queue.c **** 
 637:../Dave/Generated/FREERTOS/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 638:../Dave/Generated/FREERTOS/queue.c **** 
 639:../Dave/Generated/FREERTOS/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 640:../Dave/Generated/FREERTOS/queue.c **** 		{
 641:../Dave/Generated/FREERTOS/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 642:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdPASS;
 643:../Dave/Generated/FREERTOS/queue.c **** 		}
 644:../Dave/Generated/FREERTOS/queue.c **** 		else
 645:../Dave/Generated/FREERTOS/queue.c **** 		{
 646:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 647:../Dave/Generated/FREERTOS/queue.c **** 
 648:../Dave/Generated/FREERTOS/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 649:../Dave/Generated/FREERTOS/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 650:../Dave/Generated/FREERTOS/queue.c **** 			before reaching here. */
 651:../Dave/Generated/FREERTOS/queue.c **** 			if( xReturn != pdFAIL )
 652:../Dave/Generated/FREERTOS/queue.c **** 			{
 653:../Dave/Generated/FREERTOS/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 654:../Dave/Generated/FREERTOS/queue.c **** 			}
 655:../Dave/Generated/FREERTOS/queue.c **** 			else
 656:../Dave/Generated/FREERTOS/queue.c **** 			{
 657:../Dave/Generated/FREERTOS/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 658:../Dave/Generated/FREERTOS/queue.c **** 			}
 659:../Dave/Generated/FREERTOS/queue.c **** 		}
 660:../Dave/Generated/FREERTOS/queue.c **** 
 661:../Dave/Generated/FREERTOS/queue.c **** 		return xReturn;
 662:../Dave/Generated/FREERTOS/queue.c **** 	}
 663:../Dave/Generated/FREERTOS/queue.c **** 
 664:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 665:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 666:../Dave/Generated/FREERTOS/queue.c **** 
 667:../Dave/Generated/FREERTOS/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 668:../Dave/Generated/FREERTOS/queue.c **** 
 669:../Dave/Generated/FREERTOS/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 670:../Dave/Generated/FREERTOS/queue.c **** 	{
 671:../Dave/Generated/FREERTOS/queue.c **** 	QueueHandle_t xHandle;
 672:../Dave/Generated/FREERTOS/queue.c **** 
 673:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( uxMaxCount != 0 );
 674:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 675:../Dave/Generated/FREERTOS/queue.c **** 
 676:../Dave/Generated/FREERTOS/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 677:../Dave/Generated/FREERTOS/queue.c **** 
 678:../Dave/Generated/FREERTOS/queue.c **** 		if( xHandle != NULL )
 679:../Dave/Generated/FREERTOS/queue.c **** 		{
 680:../Dave/Generated/FREERTOS/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 681:../Dave/Generated/FREERTOS/queue.c **** 
 682:../Dave/Generated/FREERTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 683:../Dave/Generated/FREERTOS/queue.c **** 		}
 684:../Dave/Generated/FREERTOS/queue.c **** 		else
 685:../Dave/Generated/FREERTOS/queue.c **** 		{
 686:../Dave/Generated/FREERTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 687:../Dave/Generated/FREERTOS/queue.c **** 		}
 688:../Dave/Generated/FREERTOS/queue.c **** 
 689:../Dave/Generated/FREERTOS/queue.c **** 		return xHandle;
 690:../Dave/Generated/FREERTOS/queue.c **** 	}
 691:../Dave/Generated/FREERTOS/queue.c **** 
 692:../Dave/Generated/FREERTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 693:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 694:../Dave/Generated/FREERTOS/queue.c **** 
 695:../Dave/Generated/FREERTOS/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 696:../Dave/Generated/FREERTOS/queue.c **** 
 697:../Dave/Generated/FREERTOS/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 698:../Dave/Generated/FREERTOS/queue.c **** 	{
 699:../Dave/Generated/FREERTOS/queue.c **** 	QueueHandle_t xHandle;
 700:../Dave/Generated/FREERTOS/queue.c **** 
 701:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( uxMaxCount != 0 );
 702:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 703:../Dave/Generated/FREERTOS/queue.c **** 
 704:../Dave/Generated/FREERTOS/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 705:../Dave/Generated/FREERTOS/queue.c **** 
 706:../Dave/Generated/FREERTOS/queue.c **** 		if( xHandle != NULL )
 707:../Dave/Generated/FREERTOS/queue.c **** 		{
 708:../Dave/Generated/FREERTOS/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 709:../Dave/Generated/FREERTOS/queue.c **** 
 710:../Dave/Generated/FREERTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 711:../Dave/Generated/FREERTOS/queue.c **** 		}
 712:../Dave/Generated/FREERTOS/queue.c **** 		else
 713:../Dave/Generated/FREERTOS/queue.c **** 		{
 714:../Dave/Generated/FREERTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 715:../Dave/Generated/FREERTOS/queue.c **** 		}
 716:../Dave/Generated/FREERTOS/queue.c **** 
 717:../Dave/Generated/FREERTOS/queue.c **** 		return xHandle;
 718:../Dave/Generated/FREERTOS/queue.c **** 	}
 719:../Dave/Generated/FREERTOS/queue.c **** 
 720:../Dave/Generated/FREERTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 721:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 722:../Dave/Generated/FREERTOS/queue.c **** 
 723:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 724:../Dave/Generated/FREERTOS/queue.c **** {
 725:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 726:../Dave/Generated/FREERTOS/queue.c **** TimeOut_t xTimeOut;
 727:../Dave/Generated/FREERTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 728:../Dave/Generated/FREERTOS/queue.c **** 
 729:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( pxQueue );
 730:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 731:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 732:../Dave/Generated/FREERTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 733:../Dave/Generated/FREERTOS/queue.c **** 	{
 734:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 735:../Dave/Generated/FREERTOS/queue.c **** 	}
 736:../Dave/Generated/FREERTOS/queue.c **** 	#endif
 737:../Dave/Generated/FREERTOS/queue.c **** 
 738:../Dave/Generated/FREERTOS/queue.c **** 
 739:../Dave/Generated/FREERTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 740:../Dave/Generated/FREERTOS/queue.c **** 	statements within the function itself.  This is done in the interest
 741:../Dave/Generated/FREERTOS/queue.c **** 	of execution time efficiency. */
 742:../Dave/Generated/FREERTOS/queue.c **** 	for( ;; )
 743:../Dave/Generated/FREERTOS/queue.c **** 	{
 744:../Dave/Generated/FREERTOS/queue.c **** 		taskENTER_CRITICAL();
 745:../Dave/Generated/FREERTOS/queue.c **** 		{
 746:../Dave/Generated/FREERTOS/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 747:../Dave/Generated/FREERTOS/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 748:../Dave/Generated/FREERTOS/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 749:../Dave/Generated/FREERTOS/queue.c **** 			queue is full. */
 750:../Dave/Generated/FREERTOS/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 751:../Dave/Generated/FREERTOS/queue.c **** 			{
 752:../Dave/Generated/FREERTOS/queue.c **** 				traceQUEUE_SEND( pxQueue );
 753:../Dave/Generated/FREERTOS/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 754:../Dave/Generated/FREERTOS/queue.c **** 
 755:../Dave/Generated/FREERTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 756:../Dave/Generated/FREERTOS/queue.c **** 				{
 757:../Dave/Generated/FREERTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 758:../Dave/Generated/FREERTOS/queue.c **** 					{
 759:../Dave/Generated/FREERTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 760:../Dave/Generated/FREERTOS/queue.c **** 						{
 761:../Dave/Generated/FREERTOS/queue.c **** 							/* The queue is a member of a queue set, and posting
 762:../Dave/Generated/FREERTOS/queue.c **** 							to the queue set caused a higher priority task to
 763:../Dave/Generated/FREERTOS/queue.c **** 							unblock. A context switch is required. */
 764:../Dave/Generated/FREERTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 765:../Dave/Generated/FREERTOS/queue.c **** 						}
 766:../Dave/Generated/FREERTOS/queue.c **** 						else
 767:../Dave/Generated/FREERTOS/queue.c **** 						{
 768:../Dave/Generated/FREERTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 769:../Dave/Generated/FREERTOS/queue.c **** 						}
 770:../Dave/Generated/FREERTOS/queue.c **** 					}
 771:../Dave/Generated/FREERTOS/queue.c **** 					else
 772:../Dave/Generated/FREERTOS/queue.c **** 					{
 773:../Dave/Generated/FREERTOS/queue.c **** 						/* If there was a task waiting for data to arrive on the
 774:../Dave/Generated/FREERTOS/queue.c **** 						queue then unblock it now. */
 775:../Dave/Generated/FREERTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 776:../Dave/Generated/FREERTOS/queue.c **** 						{
 777:../Dave/Generated/FREERTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 778:../Dave/Generated/FREERTOS/queue.c **** 							{
 779:../Dave/Generated/FREERTOS/queue.c **** 								/* The unblocked task has a priority higher than
 780:../Dave/Generated/FREERTOS/queue.c **** 								our own so yield immediately.  Yes it is ok to
 781:../Dave/Generated/FREERTOS/queue.c **** 								do this from within the critical section - the
 782:../Dave/Generated/FREERTOS/queue.c **** 								kernel takes care of that. */
 783:../Dave/Generated/FREERTOS/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 784:../Dave/Generated/FREERTOS/queue.c **** 							}
 785:../Dave/Generated/FREERTOS/queue.c **** 							else
 786:../Dave/Generated/FREERTOS/queue.c **** 							{
 787:../Dave/Generated/FREERTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 788:../Dave/Generated/FREERTOS/queue.c **** 							}
 789:../Dave/Generated/FREERTOS/queue.c **** 						}
 790:../Dave/Generated/FREERTOS/queue.c **** 						else if( xYieldRequired != pdFALSE )
 791:../Dave/Generated/FREERTOS/queue.c **** 						{
 792:../Dave/Generated/FREERTOS/queue.c **** 							/* This path is a special case that will only get
 793:../Dave/Generated/FREERTOS/queue.c **** 							executed if the task was holding multiple mutexes
 794:../Dave/Generated/FREERTOS/queue.c **** 							and the mutexes were given back in an order that is
 795:../Dave/Generated/FREERTOS/queue.c **** 							different to that in which they were taken. */
 796:../Dave/Generated/FREERTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 797:../Dave/Generated/FREERTOS/queue.c **** 						}
 798:../Dave/Generated/FREERTOS/queue.c **** 						else
 799:../Dave/Generated/FREERTOS/queue.c **** 						{
 800:../Dave/Generated/FREERTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 801:../Dave/Generated/FREERTOS/queue.c **** 						}
 802:../Dave/Generated/FREERTOS/queue.c **** 					}
 803:../Dave/Generated/FREERTOS/queue.c **** 				}
 804:../Dave/Generated/FREERTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 805:../Dave/Generated/FREERTOS/queue.c **** 				{
 806:../Dave/Generated/FREERTOS/queue.c **** 					/* If there was a task waiting for data to arrive on the
 807:../Dave/Generated/FREERTOS/queue.c **** 					queue then unblock it now. */
 808:../Dave/Generated/FREERTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 809:../Dave/Generated/FREERTOS/queue.c **** 					{
 810:../Dave/Generated/FREERTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 811:../Dave/Generated/FREERTOS/queue.c **** 						{
 812:../Dave/Generated/FREERTOS/queue.c **** 							/* The unblocked task has a priority higher than
 813:../Dave/Generated/FREERTOS/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 814:../Dave/Generated/FREERTOS/queue.c **** 							this from within the critical section - the kernel
 815:../Dave/Generated/FREERTOS/queue.c **** 							takes care of that. */
 816:../Dave/Generated/FREERTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 817:../Dave/Generated/FREERTOS/queue.c **** 						}
 818:../Dave/Generated/FREERTOS/queue.c **** 						else
 819:../Dave/Generated/FREERTOS/queue.c **** 						{
 820:../Dave/Generated/FREERTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 821:../Dave/Generated/FREERTOS/queue.c **** 						}
 822:../Dave/Generated/FREERTOS/queue.c **** 					}
 823:../Dave/Generated/FREERTOS/queue.c **** 					else if( xYieldRequired != pdFALSE )
 824:../Dave/Generated/FREERTOS/queue.c **** 					{
 825:../Dave/Generated/FREERTOS/queue.c **** 						/* This path is a special case that will only get
 826:../Dave/Generated/FREERTOS/queue.c **** 						executed if the task was holding multiple mutexes and
 827:../Dave/Generated/FREERTOS/queue.c **** 						the mutexes were given back in an order that is
 828:../Dave/Generated/FREERTOS/queue.c **** 						different to that in which they were taken. */
 829:../Dave/Generated/FREERTOS/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 830:../Dave/Generated/FREERTOS/queue.c **** 					}
 831:../Dave/Generated/FREERTOS/queue.c **** 					else
 832:../Dave/Generated/FREERTOS/queue.c **** 					{
 833:../Dave/Generated/FREERTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 834:../Dave/Generated/FREERTOS/queue.c **** 					}
 835:../Dave/Generated/FREERTOS/queue.c **** 				}
 836:../Dave/Generated/FREERTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 837:../Dave/Generated/FREERTOS/queue.c **** 
 838:../Dave/Generated/FREERTOS/queue.c **** 				taskEXIT_CRITICAL();
 839:../Dave/Generated/FREERTOS/queue.c **** 				return pdPASS;
 840:../Dave/Generated/FREERTOS/queue.c **** 			}
 841:../Dave/Generated/FREERTOS/queue.c **** 			else
 842:../Dave/Generated/FREERTOS/queue.c **** 			{
 843:../Dave/Generated/FREERTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 844:../Dave/Generated/FREERTOS/queue.c **** 				{
 845:../Dave/Generated/FREERTOS/queue.c **** 					/* The queue was full and no block time is specified (or
 846:../Dave/Generated/FREERTOS/queue.c **** 					the block time has expired) so leave now. */
 847:../Dave/Generated/FREERTOS/queue.c **** 					taskEXIT_CRITICAL();
 848:../Dave/Generated/FREERTOS/queue.c **** 
 849:../Dave/Generated/FREERTOS/queue.c **** 					/* Return to the original privilege level before exiting
 850:../Dave/Generated/FREERTOS/queue.c **** 					the function. */
 851:../Dave/Generated/FREERTOS/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 852:../Dave/Generated/FREERTOS/queue.c **** 					return errQUEUE_FULL;
 853:../Dave/Generated/FREERTOS/queue.c **** 				}
 854:../Dave/Generated/FREERTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 855:../Dave/Generated/FREERTOS/queue.c **** 				{
 856:../Dave/Generated/FREERTOS/queue.c **** 					/* The queue was full and a block time was specified so
 857:../Dave/Generated/FREERTOS/queue.c **** 					configure the timeout structure. */
 858:../Dave/Generated/FREERTOS/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 859:../Dave/Generated/FREERTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 860:../Dave/Generated/FREERTOS/queue.c **** 				}
 861:../Dave/Generated/FREERTOS/queue.c **** 				else
 862:../Dave/Generated/FREERTOS/queue.c **** 				{
 863:../Dave/Generated/FREERTOS/queue.c **** 					/* Entry time was already set. */
 864:../Dave/Generated/FREERTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 865:../Dave/Generated/FREERTOS/queue.c **** 				}
 866:../Dave/Generated/FREERTOS/queue.c **** 			}
 867:../Dave/Generated/FREERTOS/queue.c **** 		}
 868:../Dave/Generated/FREERTOS/queue.c **** 		taskEXIT_CRITICAL();
 869:../Dave/Generated/FREERTOS/queue.c **** 
 870:../Dave/Generated/FREERTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 871:../Dave/Generated/FREERTOS/queue.c **** 		now the critical section has been exited. */
 872:../Dave/Generated/FREERTOS/queue.c **** 
 873:../Dave/Generated/FREERTOS/queue.c **** 		vTaskSuspendAll();
 874:../Dave/Generated/FREERTOS/queue.c **** 		prvLockQueue( pxQueue );
 875:../Dave/Generated/FREERTOS/queue.c **** 
 876:../Dave/Generated/FREERTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 877:../Dave/Generated/FREERTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 878:../Dave/Generated/FREERTOS/queue.c **** 		{
 879:../Dave/Generated/FREERTOS/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 880:../Dave/Generated/FREERTOS/queue.c **** 			{
 881:../Dave/Generated/FREERTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 882:../Dave/Generated/FREERTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 883:../Dave/Generated/FREERTOS/queue.c **** 
 884:../Dave/Generated/FREERTOS/queue.c **** 				/* Unlocking the queue means queue events can effect the
 885:../Dave/Generated/FREERTOS/queue.c **** 				event list.  It is possible	that interrupts occurring now
 886:../Dave/Generated/FREERTOS/queue.c **** 				remove this task from the event	list again - but as the
 887:../Dave/Generated/FREERTOS/queue.c **** 				scheduler is suspended the task will go onto the pending
 888:../Dave/Generated/FREERTOS/queue.c **** 				ready last instead of the actual ready list. */
 889:../Dave/Generated/FREERTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 890:../Dave/Generated/FREERTOS/queue.c **** 
 891:../Dave/Generated/FREERTOS/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 892:../Dave/Generated/FREERTOS/queue.c **** 				ready list into the ready list - so it is feasible that this
 893:../Dave/Generated/FREERTOS/queue.c **** 				task is already in a ready list before it yields - in which
 894:../Dave/Generated/FREERTOS/queue.c **** 				case the yield will not cause a context switch unless there
 895:../Dave/Generated/FREERTOS/queue.c **** 				is also a higher priority task in the pending ready list. */
 896:../Dave/Generated/FREERTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 897:../Dave/Generated/FREERTOS/queue.c **** 				{
 898:../Dave/Generated/FREERTOS/queue.c **** 					portYIELD_WITHIN_API();
 899:../Dave/Generated/FREERTOS/queue.c **** 				}
 900:../Dave/Generated/FREERTOS/queue.c **** 			}
 901:../Dave/Generated/FREERTOS/queue.c **** 			else
 902:../Dave/Generated/FREERTOS/queue.c **** 			{
 903:../Dave/Generated/FREERTOS/queue.c **** 				/* Try again. */
 904:../Dave/Generated/FREERTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 905:../Dave/Generated/FREERTOS/queue.c **** 				( void ) xTaskResumeAll();
 906:../Dave/Generated/FREERTOS/queue.c **** 			}
 907:../Dave/Generated/FREERTOS/queue.c **** 		}
 908:../Dave/Generated/FREERTOS/queue.c **** 		else
 909:../Dave/Generated/FREERTOS/queue.c **** 		{
 910:../Dave/Generated/FREERTOS/queue.c **** 			/* The timeout has expired. */
 911:../Dave/Generated/FREERTOS/queue.c **** 			prvUnlockQueue( pxQueue );
 912:../Dave/Generated/FREERTOS/queue.c **** 			( void ) xTaskResumeAll();
 913:../Dave/Generated/FREERTOS/queue.c **** 
 914:../Dave/Generated/FREERTOS/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 915:../Dave/Generated/FREERTOS/queue.c **** 			return errQUEUE_FULL;
 916:../Dave/Generated/FREERTOS/queue.c **** 		}
 917:../Dave/Generated/FREERTOS/queue.c **** 	}
 918:../Dave/Generated/FREERTOS/queue.c **** }
 919:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 920:../Dave/Generated/FREERTOS/queue.c **** 
 921:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 922:../Dave/Generated/FREERTOS/queue.c **** {
 923:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn;
 924:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
 925:../Dave/Generated/FREERTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 926:../Dave/Generated/FREERTOS/queue.c **** 
 927:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( pxQueue );
 928:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 929:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 930:../Dave/Generated/FREERTOS/queue.c **** 
 931:../Dave/Generated/FREERTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 932:../Dave/Generated/FREERTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 933:../Dave/Generated/FREERTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 934:../Dave/Generated/FREERTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 935:../Dave/Generated/FREERTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 936:../Dave/Generated/FREERTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 937:../Dave/Generated/FREERTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 938:../Dave/Generated/FREERTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
 939:../Dave/Generated/FREERTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 940:../Dave/Generated/FREERTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 941:../Dave/Generated/FREERTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 942:../Dave/Generated/FREERTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 943:../Dave/Generated/FREERTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 944:../Dave/Generated/FREERTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 945:../Dave/Generated/FREERTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 946:../Dave/Generated/FREERTOS/queue.c **** 
 947:../Dave/Generated/FREERTOS/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 948:../Dave/Generated/FREERTOS/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 949:../Dave/Generated/FREERTOS/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 950:../Dave/Generated/FREERTOS/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 951:../Dave/Generated/FREERTOS/queue.c **** 	post). */
 952:../Dave/Generated/FREERTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 953:../Dave/Generated/FREERTOS/queue.c **** 	{
 954:../Dave/Generated/FREERTOS/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 955:../Dave/Generated/FREERTOS/queue.c **** 		{
 956:../Dave/Generated/FREERTOS/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 957:../Dave/Generated/FREERTOS/queue.c **** 
 958:../Dave/Generated/FREERTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 959:../Dave/Generated/FREERTOS/queue.c **** 
 960:../Dave/Generated/FREERTOS/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 961:../Dave/Generated/FREERTOS/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 962:../Dave/Generated/FREERTOS/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 963:../Dave/Generated/FREERTOS/queue.c **** 			called here even though the disinherit function does not check if
 964:../Dave/Generated/FREERTOS/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 965:../Dave/Generated/FREERTOS/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 966:../Dave/Generated/FREERTOS/queue.c **** 
 967:../Dave/Generated/FREERTOS/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 968:../Dave/Generated/FREERTOS/queue.c **** 			be done when the queue is unlocked later. */
 969:../Dave/Generated/FREERTOS/queue.c **** 			if( cTxLock == queueUNLOCKED )
 970:../Dave/Generated/FREERTOS/queue.c **** 			{
 971:../Dave/Generated/FREERTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 972:../Dave/Generated/FREERTOS/queue.c **** 				{
 973:../Dave/Generated/FREERTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 974:../Dave/Generated/FREERTOS/queue.c **** 					{
 975:../Dave/Generated/FREERTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 976:../Dave/Generated/FREERTOS/queue.c **** 						{
 977:../Dave/Generated/FREERTOS/queue.c **** 							/* The queue is a member of a queue set, and posting
 978:../Dave/Generated/FREERTOS/queue.c **** 							to the queue set caused a higher priority task to
 979:../Dave/Generated/FREERTOS/queue.c **** 							unblock.  A context switch is required. */
 980:../Dave/Generated/FREERTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 981:../Dave/Generated/FREERTOS/queue.c **** 							{
 982:../Dave/Generated/FREERTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 983:../Dave/Generated/FREERTOS/queue.c **** 							}
 984:../Dave/Generated/FREERTOS/queue.c **** 							else
 985:../Dave/Generated/FREERTOS/queue.c **** 							{
 986:../Dave/Generated/FREERTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 987:../Dave/Generated/FREERTOS/queue.c **** 							}
 988:../Dave/Generated/FREERTOS/queue.c **** 						}
 989:../Dave/Generated/FREERTOS/queue.c **** 						else
 990:../Dave/Generated/FREERTOS/queue.c **** 						{
 991:../Dave/Generated/FREERTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 992:../Dave/Generated/FREERTOS/queue.c **** 						}
 993:../Dave/Generated/FREERTOS/queue.c **** 					}
 994:../Dave/Generated/FREERTOS/queue.c **** 					else
 995:../Dave/Generated/FREERTOS/queue.c **** 					{
 996:../Dave/Generated/FREERTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 997:../Dave/Generated/FREERTOS/queue.c **** 						{
 998:../Dave/Generated/FREERTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 999:../Dave/Generated/FREERTOS/queue.c **** 							{
1000:../Dave/Generated/FREERTOS/queue.c **** 								/* The task waiting has a higher priority so
1001:../Dave/Generated/FREERTOS/queue.c **** 								record that a context switch is required. */
1002:../Dave/Generated/FREERTOS/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1003:../Dave/Generated/FREERTOS/queue.c **** 								{
1004:../Dave/Generated/FREERTOS/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1005:../Dave/Generated/FREERTOS/queue.c **** 								}
1006:../Dave/Generated/FREERTOS/queue.c **** 								else
1007:../Dave/Generated/FREERTOS/queue.c **** 								{
1008:../Dave/Generated/FREERTOS/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1009:../Dave/Generated/FREERTOS/queue.c **** 								}
1010:../Dave/Generated/FREERTOS/queue.c **** 							}
1011:../Dave/Generated/FREERTOS/queue.c **** 							else
1012:../Dave/Generated/FREERTOS/queue.c **** 							{
1013:../Dave/Generated/FREERTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1014:../Dave/Generated/FREERTOS/queue.c **** 							}
1015:../Dave/Generated/FREERTOS/queue.c **** 						}
1016:../Dave/Generated/FREERTOS/queue.c **** 						else
1017:../Dave/Generated/FREERTOS/queue.c **** 						{
1018:../Dave/Generated/FREERTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1019:../Dave/Generated/FREERTOS/queue.c **** 						}
1020:../Dave/Generated/FREERTOS/queue.c **** 					}
1021:../Dave/Generated/FREERTOS/queue.c **** 				}
1022:../Dave/Generated/FREERTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1023:../Dave/Generated/FREERTOS/queue.c **** 				{
1024:../Dave/Generated/FREERTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1025:../Dave/Generated/FREERTOS/queue.c **** 					{
1026:../Dave/Generated/FREERTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1027:../Dave/Generated/FREERTOS/queue.c **** 						{
1028:../Dave/Generated/FREERTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1029:../Dave/Generated/FREERTOS/queue.c **** 							context	switch is required. */
1030:../Dave/Generated/FREERTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1031:../Dave/Generated/FREERTOS/queue.c **** 							{
1032:../Dave/Generated/FREERTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1033:../Dave/Generated/FREERTOS/queue.c **** 							}
1034:../Dave/Generated/FREERTOS/queue.c **** 							else
1035:../Dave/Generated/FREERTOS/queue.c **** 							{
1036:../Dave/Generated/FREERTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1037:../Dave/Generated/FREERTOS/queue.c **** 							}
1038:../Dave/Generated/FREERTOS/queue.c **** 						}
1039:../Dave/Generated/FREERTOS/queue.c **** 						else
1040:../Dave/Generated/FREERTOS/queue.c **** 						{
1041:../Dave/Generated/FREERTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1042:../Dave/Generated/FREERTOS/queue.c **** 						}
1043:../Dave/Generated/FREERTOS/queue.c **** 					}
1044:../Dave/Generated/FREERTOS/queue.c **** 					else
1045:../Dave/Generated/FREERTOS/queue.c **** 					{
1046:../Dave/Generated/FREERTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1047:../Dave/Generated/FREERTOS/queue.c **** 					}
1048:../Dave/Generated/FREERTOS/queue.c **** 				}
1049:../Dave/Generated/FREERTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1050:../Dave/Generated/FREERTOS/queue.c **** 			}
1051:../Dave/Generated/FREERTOS/queue.c **** 			else
1052:../Dave/Generated/FREERTOS/queue.c **** 			{
1053:../Dave/Generated/FREERTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1054:../Dave/Generated/FREERTOS/queue.c **** 				knows that data was posted while it was locked. */
1055:../Dave/Generated/FREERTOS/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1056:../Dave/Generated/FREERTOS/queue.c **** 			}
1057:../Dave/Generated/FREERTOS/queue.c **** 
1058:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdPASS;
1059:../Dave/Generated/FREERTOS/queue.c **** 		}
1060:../Dave/Generated/FREERTOS/queue.c **** 		else
1061:../Dave/Generated/FREERTOS/queue.c **** 		{
1062:../Dave/Generated/FREERTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1063:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = errQUEUE_FULL;
1064:../Dave/Generated/FREERTOS/queue.c **** 		}
1065:../Dave/Generated/FREERTOS/queue.c **** 	}
1066:../Dave/Generated/FREERTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1067:../Dave/Generated/FREERTOS/queue.c **** 
1068:../Dave/Generated/FREERTOS/queue.c **** 	return xReturn;
1069:../Dave/Generated/FREERTOS/queue.c **** }
1070:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1071:../Dave/Generated/FREERTOS/queue.c **** 
1072:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1073:../Dave/Generated/FREERTOS/queue.c **** {
1074:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn;
1075:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1076:../Dave/Generated/FREERTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1077:../Dave/Generated/FREERTOS/queue.c **** 
1078:../Dave/Generated/FREERTOS/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1079:../Dave/Generated/FREERTOS/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1080:../Dave/Generated/FREERTOS/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1081:../Dave/Generated/FREERTOS/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1082:../Dave/Generated/FREERTOS/queue.c **** 	post). */
1083:../Dave/Generated/FREERTOS/queue.c **** 
1084:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( pxQueue );
1085:../Dave/Generated/FREERTOS/queue.c **** 
1086:../Dave/Generated/FREERTOS/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1087:../Dave/Generated/FREERTOS/queue.c **** 	if the item size is not 0. */
1088:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1089:../Dave/Generated/FREERTOS/queue.c **** 
1090:../Dave/Generated/FREERTOS/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1091:../Dave/Generated/FREERTOS/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1092:../Dave/Generated/FREERTOS/queue.c **** 	interrupts, only tasks. */
1093:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1094:../Dave/Generated/FREERTOS/queue.c **** 
1095:../Dave/Generated/FREERTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1096:../Dave/Generated/FREERTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1097:../Dave/Generated/FREERTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1098:../Dave/Generated/FREERTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1099:../Dave/Generated/FREERTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1100:../Dave/Generated/FREERTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1101:../Dave/Generated/FREERTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1102:../Dave/Generated/FREERTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1103:../Dave/Generated/FREERTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1104:../Dave/Generated/FREERTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1105:../Dave/Generated/FREERTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1106:../Dave/Generated/FREERTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1107:../Dave/Generated/FREERTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1108:../Dave/Generated/FREERTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1109:../Dave/Generated/FREERTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1110:../Dave/Generated/FREERTOS/queue.c **** 
1111:../Dave/Generated/FREERTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1112:../Dave/Generated/FREERTOS/queue.c **** 	{
1113:../Dave/Generated/FREERTOS/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1114:../Dave/Generated/FREERTOS/queue.c **** 
1115:../Dave/Generated/FREERTOS/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1116:../Dave/Generated/FREERTOS/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1117:../Dave/Generated/FREERTOS/queue.c **** 		space'. */
1118:../Dave/Generated/FREERTOS/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1119:../Dave/Generated/FREERTOS/queue.c **** 		{
1120:../Dave/Generated/FREERTOS/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1121:../Dave/Generated/FREERTOS/queue.c **** 
1122:../Dave/Generated/FREERTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1123:../Dave/Generated/FREERTOS/queue.c **** 
1124:../Dave/Generated/FREERTOS/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1125:../Dave/Generated/FREERTOS/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1126:../Dave/Generated/FREERTOS/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1127:../Dave/Generated/FREERTOS/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1128:../Dave/Generated/FREERTOS/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1129:../Dave/Generated/FREERTOS/queue.c **** 			messages (semaphores) available. */
1130:../Dave/Generated/FREERTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1131:../Dave/Generated/FREERTOS/queue.c **** 
1132:../Dave/Generated/FREERTOS/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1133:../Dave/Generated/FREERTOS/queue.c **** 			be done when the queue is unlocked later. */
1134:../Dave/Generated/FREERTOS/queue.c **** 			if( cTxLock == queueUNLOCKED )
1135:../Dave/Generated/FREERTOS/queue.c **** 			{
1136:../Dave/Generated/FREERTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1137:../Dave/Generated/FREERTOS/queue.c **** 				{
1138:../Dave/Generated/FREERTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1139:../Dave/Generated/FREERTOS/queue.c **** 					{
1140:../Dave/Generated/FREERTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1141:../Dave/Generated/FREERTOS/queue.c **** 						{
1142:../Dave/Generated/FREERTOS/queue.c **** 							/* The semaphore is a member of a queue set, and
1143:../Dave/Generated/FREERTOS/queue.c **** 							posting	to the queue set caused a higher priority
1144:../Dave/Generated/FREERTOS/queue.c **** 							task to	unblock.  A context switch is required. */
1145:../Dave/Generated/FREERTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1146:../Dave/Generated/FREERTOS/queue.c **** 							{
1147:../Dave/Generated/FREERTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1148:../Dave/Generated/FREERTOS/queue.c **** 							}
1149:../Dave/Generated/FREERTOS/queue.c **** 							else
1150:../Dave/Generated/FREERTOS/queue.c **** 							{
1151:../Dave/Generated/FREERTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1152:../Dave/Generated/FREERTOS/queue.c **** 							}
1153:../Dave/Generated/FREERTOS/queue.c **** 						}
1154:../Dave/Generated/FREERTOS/queue.c **** 						else
1155:../Dave/Generated/FREERTOS/queue.c **** 						{
1156:../Dave/Generated/FREERTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1157:../Dave/Generated/FREERTOS/queue.c **** 						}
1158:../Dave/Generated/FREERTOS/queue.c **** 					}
1159:../Dave/Generated/FREERTOS/queue.c **** 					else
1160:../Dave/Generated/FREERTOS/queue.c **** 					{
1161:../Dave/Generated/FREERTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1162:../Dave/Generated/FREERTOS/queue.c **** 						{
1163:../Dave/Generated/FREERTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1164:../Dave/Generated/FREERTOS/queue.c **** 							{
1165:../Dave/Generated/FREERTOS/queue.c **** 								/* The task waiting has a higher priority so
1166:../Dave/Generated/FREERTOS/queue.c **** 								record that a context switch is required. */
1167:../Dave/Generated/FREERTOS/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1168:../Dave/Generated/FREERTOS/queue.c **** 								{
1169:../Dave/Generated/FREERTOS/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1170:../Dave/Generated/FREERTOS/queue.c **** 								}
1171:../Dave/Generated/FREERTOS/queue.c **** 								else
1172:../Dave/Generated/FREERTOS/queue.c **** 								{
1173:../Dave/Generated/FREERTOS/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1174:../Dave/Generated/FREERTOS/queue.c **** 								}
1175:../Dave/Generated/FREERTOS/queue.c **** 							}
1176:../Dave/Generated/FREERTOS/queue.c **** 							else
1177:../Dave/Generated/FREERTOS/queue.c **** 							{
1178:../Dave/Generated/FREERTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1179:../Dave/Generated/FREERTOS/queue.c **** 							}
1180:../Dave/Generated/FREERTOS/queue.c **** 						}
1181:../Dave/Generated/FREERTOS/queue.c **** 						else
1182:../Dave/Generated/FREERTOS/queue.c **** 						{
1183:../Dave/Generated/FREERTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1184:../Dave/Generated/FREERTOS/queue.c **** 						}
1185:../Dave/Generated/FREERTOS/queue.c **** 					}
1186:../Dave/Generated/FREERTOS/queue.c **** 				}
1187:../Dave/Generated/FREERTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1188:../Dave/Generated/FREERTOS/queue.c **** 				{
1189:../Dave/Generated/FREERTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1190:../Dave/Generated/FREERTOS/queue.c **** 					{
1191:../Dave/Generated/FREERTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1192:../Dave/Generated/FREERTOS/queue.c **** 						{
1193:../Dave/Generated/FREERTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1194:../Dave/Generated/FREERTOS/queue.c **** 							context	switch is required. */
1195:../Dave/Generated/FREERTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1196:../Dave/Generated/FREERTOS/queue.c **** 							{
1197:../Dave/Generated/FREERTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1198:../Dave/Generated/FREERTOS/queue.c **** 							}
1199:../Dave/Generated/FREERTOS/queue.c **** 							else
1200:../Dave/Generated/FREERTOS/queue.c **** 							{
1201:../Dave/Generated/FREERTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1202:../Dave/Generated/FREERTOS/queue.c **** 							}
1203:../Dave/Generated/FREERTOS/queue.c **** 						}
1204:../Dave/Generated/FREERTOS/queue.c **** 						else
1205:../Dave/Generated/FREERTOS/queue.c **** 						{
1206:../Dave/Generated/FREERTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1207:../Dave/Generated/FREERTOS/queue.c **** 						}
1208:../Dave/Generated/FREERTOS/queue.c **** 					}
1209:../Dave/Generated/FREERTOS/queue.c **** 					else
1210:../Dave/Generated/FREERTOS/queue.c **** 					{
1211:../Dave/Generated/FREERTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1212:../Dave/Generated/FREERTOS/queue.c **** 					}
1213:../Dave/Generated/FREERTOS/queue.c **** 				}
1214:../Dave/Generated/FREERTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1215:../Dave/Generated/FREERTOS/queue.c **** 			}
1216:../Dave/Generated/FREERTOS/queue.c **** 			else
1217:../Dave/Generated/FREERTOS/queue.c **** 			{
1218:../Dave/Generated/FREERTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1219:../Dave/Generated/FREERTOS/queue.c **** 				knows that data was posted while it was locked. */
1220:../Dave/Generated/FREERTOS/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1221:../Dave/Generated/FREERTOS/queue.c **** 			}
1222:../Dave/Generated/FREERTOS/queue.c **** 
1223:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdPASS;
1224:../Dave/Generated/FREERTOS/queue.c **** 		}
1225:../Dave/Generated/FREERTOS/queue.c **** 		else
1226:../Dave/Generated/FREERTOS/queue.c **** 		{
1227:../Dave/Generated/FREERTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1228:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = errQUEUE_FULL;
1229:../Dave/Generated/FREERTOS/queue.c **** 		}
1230:../Dave/Generated/FREERTOS/queue.c **** 	}
1231:../Dave/Generated/FREERTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1232:../Dave/Generated/FREERTOS/queue.c **** 
1233:../Dave/Generated/FREERTOS/queue.c **** 	return xReturn;
1234:../Dave/Generated/FREERTOS/queue.c **** }
1235:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1236:../Dave/Generated/FREERTOS/queue.c **** 
1237:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1238:../Dave/Generated/FREERTOS/queue.c **** {
1239:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1240:../Dave/Generated/FREERTOS/queue.c **** TimeOut_t xTimeOut;
1241:../Dave/Generated/FREERTOS/queue.c **** int8_t *pcOriginalReadPosition;
1242:../Dave/Generated/FREERTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1243:../Dave/Generated/FREERTOS/queue.c **** 
1244:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( pxQueue );
1245:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1246:../Dave/Generated/FREERTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1247:../Dave/Generated/FREERTOS/queue.c **** 	{
1248:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1249:../Dave/Generated/FREERTOS/queue.c **** 	}
1250:../Dave/Generated/FREERTOS/queue.c **** 	#endif
1251:../Dave/Generated/FREERTOS/queue.c **** 
1252:../Dave/Generated/FREERTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1253:../Dave/Generated/FREERTOS/queue.c **** 	statements within the function itself.  This is done in the interest
1254:../Dave/Generated/FREERTOS/queue.c **** 	of execution time efficiency. */
1255:../Dave/Generated/FREERTOS/queue.c **** 
1256:../Dave/Generated/FREERTOS/queue.c **** 	for( ;; )
1257:../Dave/Generated/FREERTOS/queue.c **** 	{
1258:../Dave/Generated/FREERTOS/queue.c **** 		taskENTER_CRITICAL();
1259:../Dave/Generated/FREERTOS/queue.c **** 		{
1260:../Dave/Generated/FREERTOS/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1261:../Dave/Generated/FREERTOS/queue.c **** 
1262:../Dave/Generated/FREERTOS/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1263:../Dave/Generated/FREERTOS/queue.c **** 			must be the highest priority task wanting to access the queue. */
1264:../Dave/Generated/FREERTOS/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1265:../Dave/Generated/FREERTOS/queue.c **** 			{
1266:../Dave/Generated/FREERTOS/queue.c **** 				/* Remember the read position in case the queue is only being
1267:../Dave/Generated/FREERTOS/queue.c **** 				peeked. */
1268:../Dave/Generated/FREERTOS/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1269:../Dave/Generated/FREERTOS/queue.c **** 
1270:../Dave/Generated/FREERTOS/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1271:../Dave/Generated/FREERTOS/queue.c **** 
1272:../Dave/Generated/FREERTOS/queue.c **** 				if( xJustPeeking == pdFALSE )
1273:../Dave/Generated/FREERTOS/queue.c **** 				{
1274:../Dave/Generated/FREERTOS/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1275:../Dave/Generated/FREERTOS/queue.c **** 
1276:../Dave/Generated/FREERTOS/queue.c **** 					/* Actually removing data, not just peeking. */
1277:../Dave/Generated/FREERTOS/queue.c **** 					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1278:../Dave/Generated/FREERTOS/queue.c **** 
1279:../Dave/Generated/FREERTOS/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1280:../Dave/Generated/FREERTOS/queue.c **** 					{
1281:../Dave/Generated/FREERTOS/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1282:../Dave/Generated/FREERTOS/queue.c **** 						{
1283:../Dave/Generated/FREERTOS/queue.c **** 							/* Record the information required to implement
1284:../Dave/Generated/FREERTOS/queue.c **** 							priority inheritance should it become necessary. */
1285:../Dave/Generated/FREERTOS/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
1286:../Dave/Generated/FREERTOS/queue.c **** 						}
1287:../Dave/Generated/FREERTOS/queue.c **** 						else
1288:../Dave/Generated/FREERTOS/queue.c **** 						{
1289:../Dave/Generated/FREERTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1290:../Dave/Generated/FREERTOS/queue.c **** 						}
1291:../Dave/Generated/FREERTOS/queue.c **** 					}
1292:../Dave/Generated/FREERTOS/queue.c **** 					#endif /* configUSE_MUTEXES */
1293:../Dave/Generated/FREERTOS/queue.c **** 
1294:../Dave/Generated/FREERTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1295:../Dave/Generated/FREERTOS/queue.c **** 					{
1296:../Dave/Generated/FREERTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1297:../Dave/Generated/FREERTOS/queue.c **** 						{
1298:../Dave/Generated/FREERTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1299:../Dave/Generated/FREERTOS/queue.c **** 						}
1300:../Dave/Generated/FREERTOS/queue.c **** 						else
1301:../Dave/Generated/FREERTOS/queue.c **** 						{
1302:../Dave/Generated/FREERTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1303:../Dave/Generated/FREERTOS/queue.c **** 						}
1304:../Dave/Generated/FREERTOS/queue.c **** 					}
1305:../Dave/Generated/FREERTOS/queue.c **** 					else
1306:../Dave/Generated/FREERTOS/queue.c **** 					{
1307:../Dave/Generated/FREERTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1308:../Dave/Generated/FREERTOS/queue.c **** 					}
1309:../Dave/Generated/FREERTOS/queue.c **** 				}
1310:../Dave/Generated/FREERTOS/queue.c **** 				else
1311:../Dave/Generated/FREERTOS/queue.c **** 				{
1312:../Dave/Generated/FREERTOS/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1313:../Dave/Generated/FREERTOS/queue.c **** 
1314:../Dave/Generated/FREERTOS/queue.c **** 					/* The data is not being removed, so reset the read
1315:../Dave/Generated/FREERTOS/queue.c **** 					pointer. */
1316:../Dave/Generated/FREERTOS/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1317:../Dave/Generated/FREERTOS/queue.c **** 
1318:../Dave/Generated/FREERTOS/queue.c **** 					/* The data is being left in the queue, so see if there are
1319:../Dave/Generated/FREERTOS/queue.c **** 					any other tasks waiting for the data. */
1320:../Dave/Generated/FREERTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1321:../Dave/Generated/FREERTOS/queue.c **** 					{
1322:../Dave/Generated/FREERTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1323:../Dave/Generated/FREERTOS/queue.c **** 						{
1324:../Dave/Generated/FREERTOS/queue.c **** 							/* The task waiting has a higher priority than this task. */
1325:../Dave/Generated/FREERTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1326:../Dave/Generated/FREERTOS/queue.c **** 						}
1327:../Dave/Generated/FREERTOS/queue.c **** 						else
1328:../Dave/Generated/FREERTOS/queue.c **** 						{
1329:../Dave/Generated/FREERTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1330:../Dave/Generated/FREERTOS/queue.c **** 						}
1331:../Dave/Generated/FREERTOS/queue.c **** 					}
1332:../Dave/Generated/FREERTOS/queue.c **** 					else
1333:../Dave/Generated/FREERTOS/queue.c **** 					{
1334:../Dave/Generated/FREERTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1335:../Dave/Generated/FREERTOS/queue.c **** 					}
1336:../Dave/Generated/FREERTOS/queue.c **** 				}
1337:../Dave/Generated/FREERTOS/queue.c **** 
1338:../Dave/Generated/FREERTOS/queue.c **** 				taskEXIT_CRITICAL();
1339:../Dave/Generated/FREERTOS/queue.c **** 				return pdPASS;
1340:../Dave/Generated/FREERTOS/queue.c **** 			}
1341:../Dave/Generated/FREERTOS/queue.c **** 			else
1342:../Dave/Generated/FREERTOS/queue.c **** 			{
1343:../Dave/Generated/FREERTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1344:../Dave/Generated/FREERTOS/queue.c **** 				{
1345:../Dave/Generated/FREERTOS/queue.c **** 					/* The queue was empty and no block time is specified (or
1346:../Dave/Generated/FREERTOS/queue.c **** 					the block time has expired) so leave now. */
1347:../Dave/Generated/FREERTOS/queue.c **** 					taskEXIT_CRITICAL();
1348:../Dave/Generated/FREERTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1349:../Dave/Generated/FREERTOS/queue.c **** 					return errQUEUE_EMPTY;
1350:../Dave/Generated/FREERTOS/queue.c **** 				}
1351:../Dave/Generated/FREERTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1352:../Dave/Generated/FREERTOS/queue.c **** 				{
1353:../Dave/Generated/FREERTOS/queue.c **** 					/* The queue was empty and a block time was specified so
1354:../Dave/Generated/FREERTOS/queue.c **** 					configure the timeout structure. */
1355:../Dave/Generated/FREERTOS/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1356:../Dave/Generated/FREERTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
1357:../Dave/Generated/FREERTOS/queue.c **** 				}
1358:../Dave/Generated/FREERTOS/queue.c **** 				else
1359:../Dave/Generated/FREERTOS/queue.c **** 				{
1360:../Dave/Generated/FREERTOS/queue.c **** 					/* Entry time was already set. */
1361:../Dave/Generated/FREERTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1362:../Dave/Generated/FREERTOS/queue.c **** 				}
1363:../Dave/Generated/FREERTOS/queue.c **** 			}
1364:../Dave/Generated/FREERTOS/queue.c **** 		}
1365:../Dave/Generated/FREERTOS/queue.c **** 		taskEXIT_CRITICAL();
1366:../Dave/Generated/FREERTOS/queue.c **** 
1367:../Dave/Generated/FREERTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1368:../Dave/Generated/FREERTOS/queue.c **** 		now the critical section has been exited. */
1369:../Dave/Generated/FREERTOS/queue.c **** 
1370:../Dave/Generated/FREERTOS/queue.c **** 		vTaskSuspendAll();
1371:../Dave/Generated/FREERTOS/queue.c **** 		prvLockQueue( pxQueue );
1372:../Dave/Generated/FREERTOS/queue.c **** 
1373:../Dave/Generated/FREERTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1374:../Dave/Generated/FREERTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1375:../Dave/Generated/FREERTOS/queue.c **** 		{
1376:../Dave/Generated/FREERTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1377:../Dave/Generated/FREERTOS/queue.c **** 			{
1378:../Dave/Generated/FREERTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1379:../Dave/Generated/FREERTOS/queue.c **** 
1380:../Dave/Generated/FREERTOS/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1381:../Dave/Generated/FREERTOS/queue.c **** 				{
1382:../Dave/Generated/FREERTOS/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1383:../Dave/Generated/FREERTOS/queue.c **** 					{
1384:../Dave/Generated/FREERTOS/queue.c **** 						taskENTER_CRITICAL();
1385:../Dave/Generated/FREERTOS/queue.c **** 						{
1386:../Dave/Generated/FREERTOS/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1387:../Dave/Generated/FREERTOS/queue.c **** 						}
1388:../Dave/Generated/FREERTOS/queue.c **** 						taskEXIT_CRITICAL();
1389:../Dave/Generated/FREERTOS/queue.c **** 					}
1390:../Dave/Generated/FREERTOS/queue.c **** 					else
1391:../Dave/Generated/FREERTOS/queue.c **** 					{
1392:../Dave/Generated/FREERTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1393:../Dave/Generated/FREERTOS/queue.c **** 					}
1394:../Dave/Generated/FREERTOS/queue.c **** 				}
1395:../Dave/Generated/FREERTOS/queue.c **** 				#endif
1396:../Dave/Generated/FREERTOS/queue.c **** 
1397:../Dave/Generated/FREERTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1398:../Dave/Generated/FREERTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1399:../Dave/Generated/FREERTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1400:../Dave/Generated/FREERTOS/queue.c **** 				{
1401:../Dave/Generated/FREERTOS/queue.c **** 					portYIELD_WITHIN_API();
1402:../Dave/Generated/FREERTOS/queue.c **** 				}
1403:../Dave/Generated/FREERTOS/queue.c **** 				else
1404:../Dave/Generated/FREERTOS/queue.c **** 				{
1405:../Dave/Generated/FREERTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1406:../Dave/Generated/FREERTOS/queue.c **** 				}
1407:../Dave/Generated/FREERTOS/queue.c **** 			}
1408:../Dave/Generated/FREERTOS/queue.c **** 			else
1409:../Dave/Generated/FREERTOS/queue.c **** 			{
1410:../Dave/Generated/FREERTOS/queue.c **** 				/* Try again. */
1411:../Dave/Generated/FREERTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1412:../Dave/Generated/FREERTOS/queue.c **** 				( void ) xTaskResumeAll();
1413:../Dave/Generated/FREERTOS/queue.c **** 			}
1414:../Dave/Generated/FREERTOS/queue.c **** 		}
1415:../Dave/Generated/FREERTOS/queue.c **** 		else
1416:../Dave/Generated/FREERTOS/queue.c **** 		{
1417:../Dave/Generated/FREERTOS/queue.c **** 			prvUnlockQueue( pxQueue );
1418:../Dave/Generated/FREERTOS/queue.c **** 			( void ) xTaskResumeAll();
1419:../Dave/Generated/FREERTOS/queue.c **** 
1420:../Dave/Generated/FREERTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1421:../Dave/Generated/FREERTOS/queue.c **** 			{
1422:../Dave/Generated/FREERTOS/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1423:../Dave/Generated/FREERTOS/queue.c **** 				return errQUEUE_EMPTY;
1424:../Dave/Generated/FREERTOS/queue.c **** 			}
1425:../Dave/Generated/FREERTOS/queue.c **** 			else
1426:../Dave/Generated/FREERTOS/queue.c **** 			{
1427:../Dave/Generated/FREERTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1428:../Dave/Generated/FREERTOS/queue.c **** 			}
1429:../Dave/Generated/FREERTOS/queue.c **** 		}
1430:../Dave/Generated/FREERTOS/queue.c **** 	}
1431:../Dave/Generated/FREERTOS/queue.c **** }
1432:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1433:../Dave/Generated/FREERTOS/queue.c **** 
1434:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1435:../Dave/Generated/FREERTOS/queue.c **** {
1436:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn;
1437:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1438:../Dave/Generated/FREERTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1439:../Dave/Generated/FREERTOS/queue.c **** 
1440:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( pxQueue );
1441:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1442:../Dave/Generated/FREERTOS/queue.c **** 
1443:../Dave/Generated/FREERTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1444:../Dave/Generated/FREERTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1445:../Dave/Generated/FREERTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1446:../Dave/Generated/FREERTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1447:../Dave/Generated/FREERTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1448:../Dave/Generated/FREERTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1449:../Dave/Generated/FREERTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1450:../Dave/Generated/FREERTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1451:../Dave/Generated/FREERTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1452:../Dave/Generated/FREERTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1453:../Dave/Generated/FREERTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1454:../Dave/Generated/FREERTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1455:../Dave/Generated/FREERTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1456:../Dave/Generated/FREERTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1457:../Dave/Generated/FREERTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1458:../Dave/Generated/FREERTOS/queue.c **** 
1459:../Dave/Generated/FREERTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1460:../Dave/Generated/FREERTOS/queue.c **** 	{
1461:../Dave/Generated/FREERTOS/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1462:../Dave/Generated/FREERTOS/queue.c **** 
1463:../Dave/Generated/FREERTOS/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1464:../Dave/Generated/FREERTOS/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1465:../Dave/Generated/FREERTOS/queue.c **** 		{
1466:../Dave/Generated/FREERTOS/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1467:../Dave/Generated/FREERTOS/queue.c **** 
1468:../Dave/Generated/FREERTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1469:../Dave/Generated/FREERTOS/queue.c **** 
1470:../Dave/Generated/FREERTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1471:../Dave/Generated/FREERTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1472:../Dave/Generated/FREERTOS/queue.c **** 
1473:../Dave/Generated/FREERTOS/queue.c **** 			/* If the queue is locked the event list will not be modified.
1474:../Dave/Generated/FREERTOS/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1475:../Dave/Generated/FREERTOS/queue.c **** 			will know that an ISR has removed data while the queue was
1476:../Dave/Generated/FREERTOS/queue.c **** 			locked. */
1477:../Dave/Generated/FREERTOS/queue.c **** 			if( cRxLock == queueUNLOCKED )
1478:../Dave/Generated/FREERTOS/queue.c **** 			{
1479:../Dave/Generated/FREERTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1480:../Dave/Generated/FREERTOS/queue.c **** 				{
1481:../Dave/Generated/FREERTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1482:../Dave/Generated/FREERTOS/queue.c **** 					{
1483:../Dave/Generated/FREERTOS/queue.c **** 						/* The task waiting has a higher priority than us so
1484:../Dave/Generated/FREERTOS/queue.c **** 						force a context switch. */
1485:../Dave/Generated/FREERTOS/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1486:../Dave/Generated/FREERTOS/queue.c **** 						{
1487:../Dave/Generated/FREERTOS/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1488:../Dave/Generated/FREERTOS/queue.c **** 						}
1489:../Dave/Generated/FREERTOS/queue.c **** 						else
1490:../Dave/Generated/FREERTOS/queue.c **** 						{
1491:../Dave/Generated/FREERTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1492:../Dave/Generated/FREERTOS/queue.c **** 						}
1493:../Dave/Generated/FREERTOS/queue.c **** 					}
1494:../Dave/Generated/FREERTOS/queue.c **** 					else
1495:../Dave/Generated/FREERTOS/queue.c **** 					{
1496:../Dave/Generated/FREERTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1497:../Dave/Generated/FREERTOS/queue.c **** 					}
1498:../Dave/Generated/FREERTOS/queue.c **** 				}
1499:../Dave/Generated/FREERTOS/queue.c **** 				else
1500:../Dave/Generated/FREERTOS/queue.c **** 				{
1501:../Dave/Generated/FREERTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1502:../Dave/Generated/FREERTOS/queue.c **** 				}
1503:../Dave/Generated/FREERTOS/queue.c **** 			}
1504:../Dave/Generated/FREERTOS/queue.c **** 			else
1505:../Dave/Generated/FREERTOS/queue.c **** 			{
1506:../Dave/Generated/FREERTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1507:../Dave/Generated/FREERTOS/queue.c **** 				knows that data was removed while it was locked. */
1508:../Dave/Generated/FREERTOS/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1509:../Dave/Generated/FREERTOS/queue.c **** 			}
1510:../Dave/Generated/FREERTOS/queue.c **** 
1511:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdPASS;
1512:../Dave/Generated/FREERTOS/queue.c **** 		}
1513:../Dave/Generated/FREERTOS/queue.c **** 		else
1514:../Dave/Generated/FREERTOS/queue.c **** 		{
1515:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdFAIL;
1516:../Dave/Generated/FREERTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1517:../Dave/Generated/FREERTOS/queue.c **** 		}
1518:../Dave/Generated/FREERTOS/queue.c **** 	}
1519:../Dave/Generated/FREERTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1520:../Dave/Generated/FREERTOS/queue.c **** 
1521:../Dave/Generated/FREERTOS/queue.c **** 	return xReturn;
1522:../Dave/Generated/FREERTOS/queue.c **** }
1523:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1524:../Dave/Generated/FREERTOS/queue.c **** 
1525:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1526:../Dave/Generated/FREERTOS/queue.c **** {
1527:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn;
1528:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1529:../Dave/Generated/FREERTOS/queue.c **** int8_t *pcOriginalReadPosition;
1530:../Dave/Generated/FREERTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1531:../Dave/Generated/FREERTOS/queue.c **** 
1532:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( pxQueue );
1533:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1534:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1535:../Dave/Generated/FREERTOS/queue.c **** 
1536:../Dave/Generated/FREERTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1537:../Dave/Generated/FREERTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1538:../Dave/Generated/FREERTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1539:../Dave/Generated/FREERTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1540:../Dave/Generated/FREERTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1541:../Dave/Generated/FREERTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1542:../Dave/Generated/FREERTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1543:../Dave/Generated/FREERTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1544:../Dave/Generated/FREERTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1545:../Dave/Generated/FREERTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1546:../Dave/Generated/FREERTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1547:../Dave/Generated/FREERTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1548:../Dave/Generated/FREERTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1549:../Dave/Generated/FREERTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1550:../Dave/Generated/FREERTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1551:../Dave/Generated/FREERTOS/queue.c **** 
1552:../Dave/Generated/FREERTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1553:../Dave/Generated/FREERTOS/queue.c **** 	{
1554:../Dave/Generated/FREERTOS/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1555:../Dave/Generated/FREERTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1556:../Dave/Generated/FREERTOS/queue.c **** 		{
1557:../Dave/Generated/FREERTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1558:../Dave/Generated/FREERTOS/queue.c **** 
1559:../Dave/Generated/FREERTOS/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1560:../Dave/Generated/FREERTOS/queue.c **** 			actually being removed from the queue. */
1561:../Dave/Generated/FREERTOS/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1562:../Dave/Generated/FREERTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1563:../Dave/Generated/FREERTOS/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1564:../Dave/Generated/FREERTOS/queue.c **** 
1565:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdPASS;
1566:../Dave/Generated/FREERTOS/queue.c **** 		}
1567:../Dave/Generated/FREERTOS/queue.c **** 		else
1568:../Dave/Generated/FREERTOS/queue.c **** 		{
1569:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdFAIL;
1570:../Dave/Generated/FREERTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1571:../Dave/Generated/FREERTOS/queue.c **** 		}
1572:../Dave/Generated/FREERTOS/queue.c **** 	}
1573:../Dave/Generated/FREERTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1574:../Dave/Generated/FREERTOS/queue.c **** 
1575:../Dave/Generated/FREERTOS/queue.c **** 	return xReturn;
1576:../Dave/Generated/FREERTOS/queue.c **** }
1577:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1578:../Dave/Generated/FREERTOS/queue.c **** 
1579:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1580:../Dave/Generated/FREERTOS/queue.c **** {
1581:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxReturn;
1582:../Dave/Generated/FREERTOS/queue.c **** 
1583:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( xQueue );
1584:../Dave/Generated/FREERTOS/queue.c **** 
1585:../Dave/Generated/FREERTOS/queue.c **** 	taskENTER_CRITICAL();
1586:../Dave/Generated/FREERTOS/queue.c **** 	{
1587:../Dave/Generated/FREERTOS/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1588:../Dave/Generated/FREERTOS/queue.c **** 	}
1589:../Dave/Generated/FREERTOS/queue.c **** 	taskEXIT_CRITICAL();
1590:../Dave/Generated/FREERTOS/queue.c **** 
1591:../Dave/Generated/FREERTOS/queue.c **** 	return uxReturn;
1592:../Dave/Generated/FREERTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1593:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1594:../Dave/Generated/FREERTOS/queue.c **** 
1595:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1596:../Dave/Generated/FREERTOS/queue.c **** {
1597:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxReturn;
1598:../Dave/Generated/FREERTOS/queue.c **** Queue_t *pxQueue;
1599:../Dave/Generated/FREERTOS/queue.c **** 
1600:../Dave/Generated/FREERTOS/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1601:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( pxQueue );
1602:../Dave/Generated/FREERTOS/queue.c **** 
1603:../Dave/Generated/FREERTOS/queue.c **** 	taskENTER_CRITICAL();
1604:../Dave/Generated/FREERTOS/queue.c **** 	{
1605:../Dave/Generated/FREERTOS/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1606:../Dave/Generated/FREERTOS/queue.c **** 	}
1607:../Dave/Generated/FREERTOS/queue.c **** 	taskEXIT_CRITICAL();
1608:../Dave/Generated/FREERTOS/queue.c **** 
1609:../Dave/Generated/FREERTOS/queue.c **** 	return uxReturn;
1610:../Dave/Generated/FREERTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1611:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1612:../Dave/Generated/FREERTOS/queue.c **** 
1613:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1614:../Dave/Generated/FREERTOS/queue.c **** {
1615:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxReturn;
1616:../Dave/Generated/FREERTOS/queue.c **** 
1617:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( xQueue );
1618:../Dave/Generated/FREERTOS/queue.c **** 
1619:../Dave/Generated/FREERTOS/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1620:../Dave/Generated/FREERTOS/queue.c **** 
1621:../Dave/Generated/FREERTOS/queue.c **** 	return uxReturn;
1622:../Dave/Generated/FREERTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1623:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1624:../Dave/Generated/FREERTOS/queue.c **** 
1625:../Dave/Generated/FREERTOS/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1626:../Dave/Generated/FREERTOS/queue.c **** {
1627:../Dave/Generated/FREERTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1628:../Dave/Generated/FREERTOS/queue.c **** 
1629:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( pxQueue );
1630:../Dave/Generated/FREERTOS/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1631:../Dave/Generated/FREERTOS/queue.c **** 
1632:../Dave/Generated/FREERTOS/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1633:../Dave/Generated/FREERTOS/queue.c **** 	{
1634:../Dave/Generated/FREERTOS/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1635:../Dave/Generated/FREERTOS/queue.c **** 	}
1636:../Dave/Generated/FREERTOS/queue.c **** 	#endif
1637:../Dave/Generated/FREERTOS/queue.c **** 
1638:../Dave/Generated/FREERTOS/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1639:../Dave/Generated/FREERTOS/queue.c **** 	{
1640:../Dave/Generated/FREERTOS/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1641:../Dave/Generated/FREERTOS/queue.c **** 		again. */
1642:../Dave/Generated/FREERTOS/queue.c **** 		vPortFree( pxQueue );
1643:../Dave/Generated/FREERTOS/queue.c **** 	}
1644:../Dave/Generated/FREERTOS/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1645:../Dave/Generated/FREERTOS/queue.c **** 	{
1646:../Dave/Generated/FREERTOS/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1647:../Dave/Generated/FREERTOS/queue.c **** 		check before attempting to free the memory. */
1648:../Dave/Generated/FREERTOS/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1649:../Dave/Generated/FREERTOS/queue.c **** 		{
1650:../Dave/Generated/FREERTOS/queue.c **** 			vPortFree( pxQueue );
1651:../Dave/Generated/FREERTOS/queue.c **** 		}
1652:../Dave/Generated/FREERTOS/queue.c **** 		else
1653:../Dave/Generated/FREERTOS/queue.c **** 		{
1654:../Dave/Generated/FREERTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1655:../Dave/Generated/FREERTOS/queue.c **** 		}
1656:../Dave/Generated/FREERTOS/queue.c **** 	}
1657:../Dave/Generated/FREERTOS/queue.c **** 	#else
1658:../Dave/Generated/FREERTOS/queue.c **** 	{
1659:../Dave/Generated/FREERTOS/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1660:../Dave/Generated/FREERTOS/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1661:../Dave/Generated/FREERTOS/queue.c **** 		( void ) pxQueue;
1662:../Dave/Generated/FREERTOS/queue.c **** 	}
1663:../Dave/Generated/FREERTOS/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1664:../Dave/Generated/FREERTOS/queue.c **** }
1665:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1666:../Dave/Generated/FREERTOS/queue.c **** 
1667:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1668:../Dave/Generated/FREERTOS/queue.c **** 
1669:../Dave/Generated/FREERTOS/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1670:../Dave/Generated/FREERTOS/queue.c **** 	{
1671:../Dave/Generated/FREERTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1672:../Dave/Generated/FREERTOS/queue.c **** 	}
1673:../Dave/Generated/FREERTOS/queue.c **** 
1674:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1675:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1676:../Dave/Generated/FREERTOS/queue.c **** 
1677:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1678:../Dave/Generated/FREERTOS/queue.c **** 
1679:../Dave/Generated/FREERTOS/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1680:../Dave/Generated/FREERTOS/queue.c **** 	{
1681:../Dave/Generated/FREERTOS/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1682:../Dave/Generated/FREERTOS/queue.c **** 	}
1683:../Dave/Generated/FREERTOS/queue.c **** 
1684:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1685:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1686:../Dave/Generated/FREERTOS/queue.c **** 
1687:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1688:../Dave/Generated/FREERTOS/queue.c **** 
1689:../Dave/Generated/FREERTOS/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1690:../Dave/Generated/FREERTOS/queue.c **** 	{
1691:../Dave/Generated/FREERTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
1692:../Dave/Generated/FREERTOS/queue.c **** 	}
1693:../Dave/Generated/FREERTOS/queue.c **** 
1694:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1695:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1696:../Dave/Generated/FREERTOS/queue.c **** 
1697:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1698:../Dave/Generated/FREERTOS/queue.c **** {
  27              	 .loc 1 1698 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	.LVL0:
  32 0000 70B5     	 push {r4,r5,r6,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 16
  35              	 .cfi_offset 4,-16
  36              	 .cfi_offset 5,-12
  37              	 .cfi_offset 6,-8
  38              	 .cfi_offset 14,-4
  39              	 .loc 1 1698 0
  40 0002 1646     	 mov r6,r2
1699:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn = pdFALSE;
1700:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxMessagesWaiting;
1701:../Dave/Generated/FREERTOS/queue.c **** 
1702:../Dave/Generated/FREERTOS/queue.c **** 	/* This function is called from a critical section. */
1703:../Dave/Generated/FREERTOS/queue.c **** 
1704:../Dave/Generated/FREERTOS/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1705:../Dave/Generated/FREERTOS/queue.c **** 
1706:../Dave/Generated/FREERTOS/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  41              	 .loc 1 1706 0
  42 0004 026C     	 ldr r2,[r0,#64]
  43              	.LVL1:
1704:../Dave/Generated/FREERTOS/queue.c **** 
  44              	 .loc 1 1704 0
  45 0006 856B     	 ldr r5,[r0,#56]
  46              	.LVL2:
1698:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn = pdFALSE;
  47              	 .loc 1 1698 0
  48 0008 0446     	 mov r4,r0
  49              	 .loc 1 1706 0
  50 000a 32B9     	 cbnz r2,.L2
1707:../Dave/Generated/FREERTOS/queue.c **** 	{
1708:../Dave/Generated/FREERTOS/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1709:../Dave/Generated/FREERTOS/queue.c **** 		{
1710:../Dave/Generated/FREERTOS/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  51              	 .loc 1 1710 0
  52 000c 0668     	 ldr r6,[r0]
  53              	.LVL3:
  54 000e 3EBB     	 cbnz r6,.L6
1711:../Dave/Generated/FREERTOS/queue.c **** 			{
1712:../Dave/Generated/FREERTOS/queue.c **** 				/* The mutex is no longer being held. */
1713:../Dave/Generated/FREERTOS/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  55              	 .loc 1 1713 0
  56 0010 4068     	 ldr r0,[r0,#4]
  57              	.LVL4:
  58 0012 FFF7FEFF 	 bl xTaskPriorityDisinherit
  59              	.LVL5:
1714:../Dave/Generated/FREERTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
  60              	 .loc 1 1714 0
  61 0016 6660     	 str r6,[r4,#4]
  62 0018 29E0     	 b .L3
  63              	.LVL6:
  64              	.L2:
1715:../Dave/Generated/FREERTOS/queue.c **** 			}
1716:../Dave/Generated/FREERTOS/queue.c **** 			else
1717:../Dave/Generated/FREERTOS/queue.c **** 			{
1718:../Dave/Generated/FREERTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1719:../Dave/Generated/FREERTOS/queue.c **** 			}
1720:../Dave/Generated/FREERTOS/queue.c **** 		}
1721:../Dave/Generated/FREERTOS/queue.c **** 		#endif /* configUSE_MUTEXES */
1722:../Dave/Generated/FREERTOS/queue.c **** 	}
1723:../Dave/Generated/FREERTOS/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
  65              	 .loc 1 1723 0
  66 001a 6EB9     	 cbnz r6,.L4
1724:../Dave/Generated/FREERTOS/queue.c **** 	{
1725:../Dave/Generated/FREERTOS/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
  67              	 .loc 1 1725 0
  68 001c 8068     	 ldr r0,[r0,#8]
  69              	.LVL7:
  70 001e FFF7FEFF 	 bl memcpy
  71              	.LVL8:
1726:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  72              	 .loc 1 1726 0
  73 0022 A168     	 ldr r1,[r4,#8]
  74 0024 236C     	 ldr r3,[r4,#64]
1727:../Dave/Generated/FREERTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
  75              	 .loc 1 1727 0
  76 0026 6268     	 ldr r2,[r4,#4]
1726:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  77              	 .loc 1 1726 0
  78 0028 0B44     	 add r3,r3,r1
  79              	 .loc 1 1727 0
  80 002a 9342     	 cmp r3,r2
1726:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  81              	 .loc 1 1726 0
  82 002c A360     	 str r3,[r4,#8]
  83              	 .loc 1 1727 0
  84 002e 19D3     	 bcc .L7
1728:../Dave/Generated/FREERTOS/queue.c **** 		{
1729:../Dave/Generated/FREERTOS/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
  85              	 .loc 1 1729 0
  86 0030 2368     	 ldr r3,[r4]
  87 0032 A360     	 str r3,[r4,#8]
1699:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxMessagesWaiting;
  88              	 .loc 1 1699 0
  89 0034 3046     	 mov r0,r6
  90 0036 1AE0     	 b .L3
  91              	.LVL9:
  92              	.L4:
1730:../Dave/Generated/FREERTOS/queue.c **** 		}
1731:../Dave/Generated/FREERTOS/queue.c **** 		else
1732:../Dave/Generated/FREERTOS/queue.c **** 		{
1733:../Dave/Generated/FREERTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1734:../Dave/Generated/FREERTOS/queue.c **** 		}
1735:../Dave/Generated/FREERTOS/queue.c **** 	}
1736:../Dave/Generated/FREERTOS/queue.c **** 	else
1737:../Dave/Generated/FREERTOS/queue.c **** 	{
1738:../Dave/Generated/FREERTOS/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
  93              	 .loc 1 1738 0
  94 0038 C068     	 ldr r0,[r0,#12]
  95              	.LVL10:
  96 003a FFF7FEFF 	 bl memcpy
  97              	.LVL11:
1739:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  98              	 .loc 1 1739 0
  99 003e 236C     	 ldr r3,[r4,#64]
 100 0040 E268     	 ldr r2,[r4,#12]
1740:../Dave/Generated/FREERTOS/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 101              	 .loc 1 1740 0
 102 0042 2168     	 ldr r1,[r4]
1739:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 103              	 .loc 1 1739 0
 104 0044 5B42     	 negs r3,r3
 105 0046 1A44     	 add r2,r2,r3
 106              	 .loc 1 1740 0
 107 0048 8A42     	 cmp r2,r1
1739:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 108              	 .loc 1 1739 0
 109 004a E260     	 str r2,[r4,#12]
 110              	 .loc 1 1740 0
 111 004c 02D2     	 bcs .L5
1741:../Dave/Generated/FREERTOS/queue.c **** 		{
1742:../Dave/Generated/FREERTOS/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 112              	 .loc 1 1742 0
 113 004e 6268     	 ldr r2,[r4,#4]
 114 0050 1344     	 add r3,r3,r2
 115 0052 E360     	 str r3,[r4,#12]
 116              	.L5:
1743:../Dave/Generated/FREERTOS/queue.c **** 		}
1744:../Dave/Generated/FREERTOS/queue.c **** 		else
1745:../Dave/Generated/FREERTOS/queue.c **** 		{
1746:../Dave/Generated/FREERTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1747:../Dave/Generated/FREERTOS/queue.c **** 		}
1748:../Dave/Generated/FREERTOS/queue.c **** 
1749:../Dave/Generated/FREERTOS/queue.c **** 		if( xPosition == queueOVERWRITE )
 117              	 .loc 1 1749 0
 118 0054 022E     	 cmp r6,#2
 119 0056 07D1     	 bne .L8
1750:../Dave/Generated/FREERTOS/queue.c **** 		{
1751:../Dave/Generated/FREERTOS/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 120              	 .loc 1 1751 0
 121 0058 45B1     	 cbz r5,.L9
1752:../Dave/Generated/FREERTOS/queue.c **** 			{
1753:../Dave/Generated/FREERTOS/queue.c **** 				/* An item is not being added but overwritten, so subtract
1754:../Dave/Generated/FREERTOS/queue.c **** 				one from the recorded number of items in the queue so when
1755:../Dave/Generated/FREERTOS/queue.c **** 				one is added again below the number of recorded items remains
1756:../Dave/Generated/FREERTOS/queue.c **** 				correct. */
1757:../Dave/Generated/FREERTOS/queue.c **** 				--uxMessagesWaiting;
 122              	 .loc 1 1757 0
 123 005a 013D     	 subs r5,r5,#1
 124              	.LVL12:
1699:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 125              	 .loc 1 1699 0
 126 005c 0020     	 movs r0,#0
 127 005e 06E0     	 b .L3
 128              	.LVL13:
 129              	.L6:
 130 0060 1046     	 mov r0,r2
 131              	.LVL14:
 132 0062 04E0     	 b .L3
 133              	.LVL15:
 134              	.L7:
 135 0064 3046     	 mov r0,r6
 136 0066 02E0     	 b .L3
 137              	.L8:
 138 0068 0020     	 movs r0,#0
 139 006a 00E0     	 b .L3
 140              	.L9:
 141 006c 2846     	 mov r0,r5
 142              	.LVL16:
 143              	.L3:
1758:../Dave/Generated/FREERTOS/queue.c **** 			}
1759:../Dave/Generated/FREERTOS/queue.c **** 			else
1760:../Dave/Generated/FREERTOS/queue.c **** 			{
1761:../Dave/Generated/FREERTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1762:../Dave/Generated/FREERTOS/queue.c **** 			}
1763:../Dave/Generated/FREERTOS/queue.c **** 		}
1764:../Dave/Generated/FREERTOS/queue.c **** 		else
1765:../Dave/Generated/FREERTOS/queue.c **** 		{
1766:../Dave/Generated/FREERTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1767:../Dave/Generated/FREERTOS/queue.c **** 		}
1768:../Dave/Generated/FREERTOS/queue.c **** 	}
1769:../Dave/Generated/FREERTOS/queue.c **** 
1770:../Dave/Generated/FREERTOS/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 144              	 .loc 1 1770 0
 145 006e 0135     	 adds r5,r5,#1
 146              	.LVL17:
 147 0070 A563     	 str r5,[r4,#56]
1771:../Dave/Generated/FREERTOS/queue.c **** 
1772:../Dave/Generated/FREERTOS/queue.c **** 	return xReturn;
1773:../Dave/Generated/FREERTOS/queue.c **** }
 148              	 .loc 1 1773 0
 149 0072 70BD     	 pop {r4,r5,r6,pc}
 150              	 .cfi_endproc
 151              	.LFE150:
 153              	 .section .text.unlikely.prvCopyDataFromQueue,"ax",%progbits
 154              	 .align 2
 155              	 .thumb
 156              	 .thumb_func
 158              	prvCopyDataFromQueue:
 159              	.LFB151:
1774:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1775:../Dave/Generated/FREERTOS/queue.c **** 
1776:../Dave/Generated/FREERTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1777:../Dave/Generated/FREERTOS/queue.c **** {
 160              	 .loc 1 1777 0
 161              	 .cfi_startproc
 162              	 
 163              	 
 164              	 
 165              	.LVL18:
1778:../Dave/Generated/FREERTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 166              	 .loc 1 1778 0
 167 0000 026C     	 ldr r2,[r0,#64]
1777:../Dave/Generated/FREERTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 168              	 .loc 1 1777 0
 169 0002 0346     	 mov r3,r0
 170              	 .loc 1 1778 0
 171 0004 7AB1     	 cbz r2,.L16
1777:../Dave/Generated/FREERTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 172              	 .loc 1 1777 0
 173 0006 10B4     	 push {r4}
 174              	.LCFI1:
 175              	 .cfi_def_cfa_offset 4
 176              	 .cfi_offset 4,-4
1779:../Dave/Generated/FREERTOS/queue.c **** 	{
1780:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 177              	 .loc 1 1780 0
 178 0008 C468     	 ldr r4,[r0,#12]
1781:../Dave/Generated/FREERTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 179              	 .loc 1 1781 0
 180 000a 4068     	 ldr r0,[r0,#4]
 181              	.LVL19:
1780:../Dave/Generated/FREERTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 182              	 .loc 1 1780 0
 183 000c 1444     	 add r4,r4,r2
 184              	 .loc 1 1781 0
 185 000e 8442     	 cmp r4,r0
1782:../Dave/Generated/FREERTOS/queue.c **** 		{
1783:../Dave/Generated/FREERTOS/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 186              	 .loc 1 1783 0
 187 0010 28BF     	 it cs
 188 0012 1868     	 ldrcs r0,[r3]
1780:../Dave/Generated/FREERTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 189              	 .loc 1 1780 0
 190 0014 DC60     	 str r4,[r3,#12]
 191              	 .loc 1 1783 0
 192 0016 28BF     	 it cs
 193 0018 D860     	 strcs r0,[r3,#12]
1784:../Dave/Generated/FREERTOS/queue.c **** 		}
1785:../Dave/Generated/FREERTOS/queue.c **** 		else
1786:../Dave/Generated/FREERTOS/queue.c **** 		{
1787:../Dave/Generated/FREERTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1788:../Dave/Generated/FREERTOS/queue.c **** 		}
1789:../Dave/Generated/FREERTOS/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
1790:../Dave/Generated/FREERTOS/queue.c **** 	}
1791:../Dave/Generated/FREERTOS/queue.c **** }
 194              	 .loc 1 1791 0
 195 001a 5DF8044B 	 ldr r4,[sp],#4
 196              	.LCFI2:
 197              	 .cfi_restore 4
 198              	 .cfi_def_cfa_offset 0
1789:../Dave/Generated/FREERTOS/queue.c **** 	}
 199              	 .loc 1 1789 0
 200 001e 0846     	 mov r0,r1
 201 0020 D968     	 ldr r1,[r3,#12]
 202              	.LVL20:
 203 0022 FFF7FEBF 	 b memcpy
 204              	.LVL21:
 205              	.L16:
 206 0026 7047     	 bx lr
 207              	 .cfi_endproc
 208              	.LFE151:
 210              	 .section .text.unlikely.prvNotifyQueueSetContainer.part.0,"ax",%progbits
 211              	 .align 2
 212              	 .thumb
 213              	 .thumb_func
 215              	prvNotifyQueueSetContainer.part.0:
 216              	.LFB167:
1792:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1793:../Dave/Generated/FREERTOS/queue.c **** 
1794:../Dave/Generated/FREERTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1795:../Dave/Generated/FREERTOS/queue.c **** {
1796:../Dave/Generated/FREERTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1797:../Dave/Generated/FREERTOS/queue.c **** 
1798:../Dave/Generated/FREERTOS/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1799:../Dave/Generated/FREERTOS/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1800:../Dave/Generated/FREERTOS/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1801:../Dave/Generated/FREERTOS/queue.c **** 	updated. */
1802:../Dave/Generated/FREERTOS/queue.c **** 	taskENTER_CRITICAL();
1803:../Dave/Generated/FREERTOS/queue.c **** 	{
1804:../Dave/Generated/FREERTOS/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
1805:../Dave/Generated/FREERTOS/queue.c **** 
1806:../Dave/Generated/FREERTOS/queue.c **** 		/* See if data was added to the queue while it was locked. */
1807:../Dave/Generated/FREERTOS/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
1808:../Dave/Generated/FREERTOS/queue.c **** 		{
1809:../Dave/Generated/FREERTOS/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1810:../Dave/Generated/FREERTOS/queue.c **** 			blocked waiting for data to become available? */
1811:../Dave/Generated/FREERTOS/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1812:../Dave/Generated/FREERTOS/queue.c **** 			{
1813:../Dave/Generated/FREERTOS/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1814:../Dave/Generated/FREERTOS/queue.c **** 				{
1815:../Dave/Generated/FREERTOS/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1816:../Dave/Generated/FREERTOS/queue.c **** 					{
1817:../Dave/Generated/FREERTOS/queue.c **** 						/* The queue is a member of a queue set, and posting to
1818:../Dave/Generated/FREERTOS/queue.c **** 						the queue set caused a higher priority task to unblock.
1819:../Dave/Generated/FREERTOS/queue.c **** 						A context switch is required. */
1820:../Dave/Generated/FREERTOS/queue.c **** 						vTaskMissedYield();
1821:../Dave/Generated/FREERTOS/queue.c **** 					}
1822:../Dave/Generated/FREERTOS/queue.c **** 					else
1823:../Dave/Generated/FREERTOS/queue.c **** 					{
1824:../Dave/Generated/FREERTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1825:../Dave/Generated/FREERTOS/queue.c **** 					}
1826:../Dave/Generated/FREERTOS/queue.c **** 				}
1827:../Dave/Generated/FREERTOS/queue.c **** 				else
1828:../Dave/Generated/FREERTOS/queue.c **** 				{
1829:../Dave/Generated/FREERTOS/queue.c **** 					/* Tasks that are removed from the event list will get
1830:../Dave/Generated/FREERTOS/queue.c **** 					added to the pending ready list as the scheduler is still
1831:../Dave/Generated/FREERTOS/queue.c **** 					suspended. */
1832:../Dave/Generated/FREERTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1833:../Dave/Generated/FREERTOS/queue.c **** 					{
1834:../Dave/Generated/FREERTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1835:../Dave/Generated/FREERTOS/queue.c **** 						{
1836:../Dave/Generated/FREERTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1837:../Dave/Generated/FREERTOS/queue.c **** 							context	switch is required. */
1838:../Dave/Generated/FREERTOS/queue.c **** 							vTaskMissedYield();
1839:../Dave/Generated/FREERTOS/queue.c **** 						}
1840:../Dave/Generated/FREERTOS/queue.c **** 						else
1841:../Dave/Generated/FREERTOS/queue.c **** 						{
1842:../Dave/Generated/FREERTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:../Dave/Generated/FREERTOS/queue.c **** 						}
1844:../Dave/Generated/FREERTOS/queue.c **** 					}
1845:../Dave/Generated/FREERTOS/queue.c **** 					else
1846:../Dave/Generated/FREERTOS/queue.c **** 					{
1847:../Dave/Generated/FREERTOS/queue.c **** 						break;
1848:../Dave/Generated/FREERTOS/queue.c **** 					}
1849:../Dave/Generated/FREERTOS/queue.c **** 				}
1850:../Dave/Generated/FREERTOS/queue.c **** 			}
1851:../Dave/Generated/FREERTOS/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1852:../Dave/Generated/FREERTOS/queue.c **** 			{
1853:../Dave/Generated/FREERTOS/queue.c **** 				/* Tasks that are removed from the event list will get added to
1854:../Dave/Generated/FREERTOS/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1855:../Dave/Generated/FREERTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1856:../Dave/Generated/FREERTOS/queue.c **** 				{
1857:../Dave/Generated/FREERTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1858:../Dave/Generated/FREERTOS/queue.c **** 					{
1859:../Dave/Generated/FREERTOS/queue.c **** 						/* The task waiting has a higher priority so record that
1860:../Dave/Generated/FREERTOS/queue.c **** 						a context switch is required. */
1861:../Dave/Generated/FREERTOS/queue.c **** 						vTaskMissedYield();
1862:../Dave/Generated/FREERTOS/queue.c **** 					}
1863:../Dave/Generated/FREERTOS/queue.c **** 					else
1864:../Dave/Generated/FREERTOS/queue.c **** 					{
1865:../Dave/Generated/FREERTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1866:../Dave/Generated/FREERTOS/queue.c **** 					}
1867:../Dave/Generated/FREERTOS/queue.c **** 				}
1868:../Dave/Generated/FREERTOS/queue.c **** 				else
1869:../Dave/Generated/FREERTOS/queue.c **** 				{
1870:../Dave/Generated/FREERTOS/queue.c **** 					break;
1871:../Dave/Generated/FREERTOS/queue.c **** 				}
1872:../Dave/Generated/FREERTOS/queue.c **** 			}
1873:../Dave/Generated/FREERTOS/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1874:../Dave/Generated/FREERTOS/queue.c **** 
1875:../Dave/Generated/FREERTOS/queue.c **** 			--cTxLock;
1876:../Dave/Generated/FREERTOS/queue.c **** 		}
1877:../Dave/Generated/FREERTOS/queue.c **** 
1878:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
1879:../Dave/Generated/FREERTOS/queue.c **** 	}
1880:../Dave/Generated/FREERTOS/queue.c **** 	taskEXIT_CRITICAL();
1881:../Dave/Generated/FREERTOS/queue.c **** 
1882:../Dave/Generated/FREERTOS/queue.c **** 	/* Do the same for the Rx lock. */
1883:../Dave/Generated/FREERTOS/queue.c **** 	taskENTER_CRITICAL();
1884:../Dave/Generated/FREERTOS/queue.c **** 	{
1885:../Dave/Generated/FREERTOS/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
1886:../Dave/Generated/FREERTOS/queue.c **** 
1887:../Dave/Generated/FREERTOS/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
1888:../Dave/Generated/FREERTOS/queue.c **** 		{
1889:../Dave/Generated/FREERTOS/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1890:../Dave/Generated/FREERTOS/queue.c **** 			{
1891:../Dave/Generated/FREERTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1892:../Dave/Generated/FREERTOS/queue.c **** 				{
1893:../Dave/Generated/FREERTOS/queue.c **** 					vTaskMissedYield();
1894:../Dave/Generated/FREERTOS/queue.c **** 				}
1895:../Dave/Generated/FREERTOS/queue.c **** 				else
1896:../Dave/Generated/FREERTOS/queue.c **** 				{
1897:../Dave/Generated/FREERTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1898:../Dave/Generated/FREERTOS/queue.c **** 				}
1899:../Dave/Generated/FREERTOS/queue.c **** 
1900:../Dave/Generated/FREERTOS/queue.c **** 				--cRxLock;
1901:../Dave/Generated/FREERTOS/queue.c **** 			}
1902:../Dave/Generated/FREERTOS/queue.c **** 			else
1903:../Dave/Generated/FREERTOS/queue.c **** 			{
1904:../Dave/Generated/FREERTOS/queue.c **** 				break;
1905:../Dave/Generated/FREERTOS/queue.c **** 			}
1906:../Dave/Generated/FREERTOS/queue.c **** 		}
1907:../Dave/Generated/FREERTOS/queue.c **** 
1908:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
1909:../Dave/Generated/FREERTOS/queue.c **** 	}
1910:../Dave/Generated/FREERTOS/queue.c **** 	taskEXIT_CRITICAL();
1911:../Dave/Generated/FREERTOS/queue.c **** }
1912:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1913:../Dave/Generated/FREERTOS/queue.c **** 
1914:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1915:../Dave/Generated/FREERTOS/queue.c **** {
1916:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn;
1917:../Dave/Generated/FREERTOS/queue.c **** 
1918:../Dave/Generated/FREERTOS/queue.c **** 	taskENTER_CRITICAL();
1919:../Dave/Generated/FREERTOS/queue.c **** 	{
1920:../Dave/Generated/FREERTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1921:../Dave/Generated/FREERTOS/queue.c **** 		{
1922:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdTRUE;
1923:../Dave/Generated/FREERTOS/queue.c **** 		}
1924:../Dave/Generated/FREERTOS/queue.c **** 		else
1925:../Dave/Generated/FREERTOS/queue.c **** 		{
1926:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdFALSE;
1927:../Dave/Generated/FREERTOS/queue.c **** 		}
1928:../Dave/Generated/FREERTOS/queue.c **** 	}
1929:../Dave/Generated/FREERTOS/queue.c **** 	taskEXIT_CRITICAL();
1930:../Dave/Generated/FREERTOS/queue.c **** 
1931:../Dave/Generated/FREERTOS/queue.c **** 	return xReturn;
1932:../Dave/Generated/FREERTOS/queue.c **** }
1933:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1934:../Dave/Generated/FREERTOS/queue.c **** 
1935:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
1936:../Dave/Generated/FREERTOS/queue.c **** {
1937:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn;
1938:../Dave/Generated/FREERTOS/queue.c **** 
1939:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( xQueue );
1940:../Dave/Generated/FREERTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
1941:../Dave/Generated/FREERTOS/queue.c **** 	{
1942:../Dave/Generated/FREERTOS/queue.c **** 		xReturn = pdTRUE;
1943:../Dave/Generated/FREERTOS/queue.c **** 	}
1944:../Dave/Generated/FREERTOS/queue.c **** 	else
1945:../Dave/Generated/FREERTOS/queue.c **** 	{
1946:../Dave/Generated/FREERTOS/queue.c **** 		xReturn = pdFALSE;
1947:../Dave/Generated/FREERTOS/queue.c **** 	}
1948:../Dave/Generated/FREERTOS/queue.c **** 
1949:../Dave/Generated/FREERTOS/queue.c **** 	return xReturn;
1950:../Dave/Generated/FREERTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1951:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1952:../Dave/Generated/FREERTOS/queue.c **** 
1953:../Dave/Generated/FREERTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
1954:../Dave/Generated/FREERTOS/queue.c **** {
1955:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn;
1956:../Dave/Generated/FREERTOS/queue.c **** 
1957:../Dave/Generated/FREERTOS/queue.c **** 	taskENTER_CRITICAL();
1958:../Dave/Generated/FREERTOS/queue.c **** 	{
1959:../Dave/Generated/FREERTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1960:../Dave/Generated/FREERTOS/queue.c **** 		{
1961:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdTRUE;
1962:../Dave/Generated/FREERTOS/queue.c **** 		}
1963:../Dave/Generated/FREERTOS/queue.c **** 		else
1964:../Dave/Generated/FREERTOS/queue.c **** 		{
1965:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdFALSE;
1966:../Dave/Generated/FREERTOS/queue.c **** 		}
1967:../Dave/Generated/FREERTOS/queue.c **** 	}
1968:../Dave/Generated/FREERTOS/queue.c **** 	taskEXIT_CRITICAL();
1969:../Dave/Generated/FREERTOS/queue.c **** 
1970:../Dave/Generated/FREERTOS/queue.c **** 	return xReturn;
1971:../Dave/Generated/FREERTOS/queue.c **** }
1972:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1973:../Dave/Generated/FREERTOS/queue.c **** 
1974:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
1975:../Dave/Generated/FREERTOS/queue.c **** {
1976:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn;
1977:../Dave/Generated/FREERTOS/queue.c **** 
1978:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( xQueue );
1979:../Dave/Generated/FREERTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
1980:../Dave/Generated/FREERTOS/queue.c **** 	{
1981:../Dave/Generated/FREERTOS/queue.c **** 		xReturn = pdTRUE;
1982:../Dave/Generated/FREERTOS/queue.c **** 	}
1983:../Dave/Generated/FREERTOS/queue.c **** 	else
1984:../Dave/Generated/FREERTOS/queue.c **** 	{
1985:../Dave/Generated/FREERTOS/queue.c **** 		xReturn = pdFALSE;
1986:../Dave/Generated/FREERTOS/queue.c **** 	}
1987:../Dave/Generated/FREERTOS/queue.c **** 
1988:../Dave/Generated/FREERTOS/queue.c **** 	return xReturn;
1989:../Dave/Generated/FREERTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1990:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
1991:../Dave/Generated/FREERTOS/queue.c **** 
1992:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1993:../Dave/Generated/FREERTOS/queue.c **** 
1994:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
1995:../Dave/Generated/FREERTOS/queue.c **** 	{
1996:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xReturn;
1997:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1998:../Dave/Generated/FREERTOS/queue.c **** 
1999:../Dave/Generated/FREERTOS/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2000:../Dave/Generated/FREERTOS/queue.c **** 		is required to prevent an interrupt removing something from the queue
2001:../Dave/Generated/FREERTOS/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2002:../Dave/Generated/FREERTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2003:../Dave/Generated/FREERTOS/queue.c **** 		{
2004:../Dave/Generated/FREERTOS/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2005:../Dave/Generated/FREERTOS/queue.c **** 			{
2006:../Dave/Generated/FREERTOS/queue.c **** 				/* The queue is full - do we want to block or just leave without
2007:../Dave/Generated/FREERTOS/queue.c **** 				posting? */
2008:../Dave/Generated/FREERTOS/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2009:../Dave/Generated/FREERTOS/queue.c **** 				{
2010:../Dave/Generated/FREERTOS/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2011:../Dave/Generated/FREERTOS/queue.c **** 					return indicating that we need to block. */
2012:../Dave/Generated/FREERTOS/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2013:../Dave/Generated/FREERTOS/queue.c **** 					portENABLE_INTERRUPTS();
2014:../Dave/Generated/FREERTOS/queue.c **** 					return errQUEUE_BLOCKED;
2015:../Dave/Generated/FREERTOS/queue.c **** 				}
2016:../Dave/Generated/FREERTOS/queue.c **** 				else
2017:../Dave/Generated/FREERTOS/queue.c **** 				{
2018:../Dave/Generated/FREERTOS/queue.c **** 					portENABLE_INTERRUPTS();
2019:../Dave/Generated/FREERTOS/queue.c **** 					return errQUEUE_FULL;
2020:../Dave/Generated/FREERTOS/queue.c **** 				}
2021:../Dave/Generated/FREERTOS/queue.c **** 			}
2022:../Dave/Generated/FREERTOS/queue.c **** 		}
2023:../Dave/Generated/FREERTOS/queue.c **** 		portENABLE_INTERRUPTS();
2024:../Dave/Generated/FREERTOS/queue.c **** 
2025:../Dave/Generated/FREERTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2026:../Dave/Generated/FREERTOS/queue.c **** 		{
2027:../Dave/Generated/FREERTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2028:../Dave/Generated/FREERTOS/queue.c **** 			{
2029:../Dave/Generated/FREERTOS/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2030:../Dave/Generated/FREERTOS/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2031:../Dave/Generated/FREERTOS/queue.c **** 				xReturn = pdPASS;
2032:../Dave/Generated/FREERTOS/queue.c **** 
2033:../Dave/Generated/FREERTOS/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2034:../Dave/Generated/FREERTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2035:../Dave/Generated/FREERTOS/queue.c **** 				{
2036:../Dave/Generated/FREERTOS/queue.c **** 					/* In this instance the co-routine could be placed directly
2037:../Dave/Generated/FREERTOS/queue.c **** 					into the ready list as we are within a critical section.
2038:../Dave/Generated/FREERTOS/queue.c **** 					Instead the same pending ready list mechanism is used as if
2039:../Dave/Generated/FREERTOS/queue.c **** 					the event were caused from within an interrupt. */
2040:../Dave/Generated/FREERTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2041:../Dave/Generated/FREERTOS/queue.c **** 					{
2042:../Dave/Generated/FREERTOS/queue.c **** 						/* The co-routine waiting has a higher priority so record
2043:../Dave/Generated/FREERTOS/queue.c **** 						that a yield might be appropriate. */
2044:../Dave/Generated/FREERTOS/queue.c **** 						xReturn = errQUEUE_YIELD;
2045:../Dave/Generated/FREERTOS/queue.c **** 					}
2046:../Dave/Generated/FREERTOS/queue.c **** 					else
2047:../Dave/Generated/FREERTOS/queue.c **** 					{
2048:../Dave/Generated/FREERTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2049:../Dave/Generated/FREERTOS/queue.c **** 					}
2050:../Dave/Generated/FREERTOS/queue.c **** 				}
2051:../Dave/Generated/FREERTOS/queue.c **** 				else
2052:../Dave/Generated/FREERTOS/queue.c **** 				{
2053:../Dave/Generated/FREERTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2054:../Dave/Generated/FREERTOS/queue.c **** 				}
2055:../Dave/Generated/FREERTOS/queue.c **** 			}
2056:../Dave/Generated/FREERTOS/queue.c **** 			else
2057:../Dave/Generated/FREERTOS/queue.c **** 			{
2058:../Dave/Generated/FREERTOS/queue.c **** 				xReturn = errQUEUE_FULL;
2059:../Dave/Generated/FREERTOS/queue.c **** 			}
2060:../Dave/Generated/FREERTOS/queue.c **** 		}
2061:../Dave/Generated/FREERTOS/queue.c **** 		portENABLE_INTERRUPTS();
2062:../Dave/Generated/FREERTOS/queue.c **** 
2063:../Dave/Generated/FREERTOS/queue.c **** 		return xReturn;
2064:../Dave/Generated/FREERTOS/queue.c **** 	}
2065:../Dave/Generated/FREERTOS/queue.c **** 
2066:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2067:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2068:../Dave/Generated/FREERTOS/queue.c **** 
2069:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2070:../Dave/Generated/FREERTOS/queue.c **** 
2071:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2072:../Dave/Generated/FREERTOS/queue.c **** 	{
2073:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xReturn;
2074:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2075:../Dave/Generated/FREERTOS/queue.c **** 
2076:../Dave/Generated/FREERTOS/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2077:../Dave/Generated/FREERTOS/queue.c **** 		is required to prevent an interrupt adding something to the queue
2078:../Dave/Generated/FREERTOS/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2079:../Dave/Generated/FREERTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2080:../Dave/Generated/FREERTOS/queue.c **** 		{
2081:../Dave/Generated/FREERTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2082:../Dave/Generated/FREERTOS/queue.c **** 			{
2083:../Dave/Generated/FREERTOS/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2084:../Dave/Generated/FREERTOS/queue.c **** 				leave with nothing? */
2085:../Dave/Generated/FREERTOS/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2086:../Dave/Generated/FREERTOS/queue.c **** 				{
2087:../Dave/Generated/FREERTOS/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2088:../Dave/Generated/FREERTOS/queue.c **** 					indicating that we need to block. */
2089:../Dave/Generated/FREERTOS/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2090:../Dave/Generated/FREERTOS/queue.c **** 					portENABLE_INTERRUPTS();
2091:../Dave/Generated/FREERTOS/queue.c **** 					return errQUEUE_BLOCKED;
2092:../Dave/Generated/FREERTOS/queue.c **** 				}
2093:../Dave/Generated/FREERTOS/queue.c **** 				else
2094:../Dave/Generated/FREERTOS/queue.c **** 				{
2095:../Dave/Generated/FREERTOS/queue.c **** 					portENABLE_INTERRUPTS();
2096:../Dave/Generated/FREERTOS/queue.c **** 					return errQUEUE_FULL;
2097:../Dave/Generated/FREERTOS/queue.c **** 				}
2098:../Dave/Generated/FREERTOS/queue.c **** 			}
2099:../Dave/Generated/FREERTOS/queue.c **** 			else
2100:../Dave/Generated/FREERTOS/queue.c **** 			{
2101:../Dave/Generated/FREERTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2102:../Dave/Generated/FREERTOS/queue.c **** 			}
2103:../Dave/Generated/FREERTOS/queue.c **** 		}
2104:../Dave/Generated/FREERTOS/queue.c **** 		portENABLE_INTERRUPTS();
2105:../Dave/Generated/FREERTOS/queue.c **** 
2106:../Dave/Generated/FREERTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2107:../Dave/Generated/FREERTOS/queue.c **** 		{
2108:../Dave/Generated/FREERTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2109:../Dave/Generated/FREERTOS/queue.c **** 			{
2110:../Dave/Generated/FREERTOS/queue.c **** 				/* Data is available from the queue. */
2111:../Dave/Generated/FREERTOS/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2112:../Dave/Generated/FREERTOS/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2113:../Dave/Generated/FREERTOS/queue.c **** 				{
2114:../Dave/Generated/FREERTOS/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2115:../Dave/Generated/FREERTOS/queue.c **** 				}
2116:../Dave/Generated/FREERTOS/queue.c **** 				else
2117:../Dave/Generated/FREERTOS/queue.c **** 				{
2118:../Dave/Generated/FREERTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2119:../Dave/Generated/FREERTOS/queue.c **** 				}
2120:../Dave/Generated/FREERTOS/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2121:../Dave/Generated/FREERTOS/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2122:../Dave/Generated/FREERTOS/queue.c **** 
2123:../Dave/Generated/FREERTOS/queue.c **** 				xReturn = pdPASS;
2124:../Dave/Generated/FREERTOS/queue.c **** 
2125:../Dave/Generated/FREERTOS/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2126:../Dave/Generated/FREERTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2127:../Dave/Generated/FREERTOS/queue.c **** 				{
2128:../Dave/Generated/FREERTOS/queue.c **** 					/* In this instance the co-routine could be placed directly
2129:../Dave/Generated/FREERTOS/queue.c **** 					into the ready list as we are within a critical section.
2130:../Dave/Generated/FREERTOS/queue.c **** 					Instead the same pending ready list mechanism is used as if
2131:../Dave/Generated/FREERTOS/queue.c **** 					the event were caused from within an interrupt. */
2132:../Dave/Generated/FREERTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2133:../Dave/Generated/FREERTOS/queue.c **** 					{
2134:../Dave/Generated/FREERTOS/queue.c **** 						xReturn = errQUEUE_YIELD;
2135:../Dave/Generated/FREERTOS/queue.c **** 					}
2136:../Dave/Generated/FREERTOS/queue.c **** 					else
2137:../Dave/Generated/FREERTOS/queue.c **** 					{
2138:../Dave/Generated/FREERTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2139:../Dave/Generated/FREERTOS/queue.c **** 					}
2140:../Dave/Generated/FREERTOS/queue.c **** 				}
2141:../Dave/Generated/FREERTOS/queue.c **** 				else
2142:../Dave/Generated/FREERTOS/queue.c **** 				{
2143:../Dave/Generated/FREERTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2144:../Dave/Generated/FREERTOS/queue.c **** 				}
2145:../Dave/Generated/FREERTOS/queue.c **** 			}
2146:../Dave/Generated/FREERTOS/queue.c **** 			else
2147:../Dave/Generated/FREERTOS/queue.c **** 			{
2148:../Dave/Generated/FREERTOS/queue.c **** 				xReturn = pdFAIL;
2149:../Dave/Generated/FREERTOS/queue.c **** 			}
2150:../Dave/Generated/FREERTOS/queue.c **** 		}
2151:../Dave/Generated/FREERTOS/queue.c **** 		portENABLE_INTERRUPTS();
2152:../Dave/Generated/FREERTOS/queue.c **** 
2153:../Dave/Generated/FREERTOS/queue.c **** 		return xReturn;
2154:../Dave/Generated/FREERTOS/queue.c **** 	}
2155:../Dave/Generated/FREERTOS/queue.c **** 
2156:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2157:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2158:../Dave/Generated/FREERTOS/queue.c **** 
2159:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2160:../Dave/Generated/FREERTOS/queue.c **** 
2161:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2162:../Dave/Generated/FREERTOS/queue.c **** 	{
2163:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2164:../Dave/Generated/FREERTOS/queue.c **** 
2165:../Dave/Generated/FREERTOS/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2166:../Dave/Generated/FREERTOS/queue.c **** 		exit without doing anything. */
2167:../Dave/Generated/FREERTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2168:../Dave/Generated/FREERTOS/queue.c **** 		{
2169:../Dave/Generated/FREERTOS/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2170:../Dave/Generated/FREERTOS/queue.c **** 
2171:../Dave/Generated/FREERTOS/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2172:../Dave/Generated/FREERTOS/queue.c **** 			co-routine has not already been woken. */
2173:../Dave/Generated/FREERTOS/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2174:../Dave/Generated/FREERTOS/queue.c **** 			{
2175:../Dave/Generated/FREERTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2176:../Dave/Generated/FREERTOS/queue.c **** 				{
2177:../Dave/Generated/FREERTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2178:../Dave/Generated/FREERTOS/queue.c **** 					{
2179:../Dave/Generated/FREERTOS/queue.c **** 						return pdTRUE;
2180:../Dave/Generated/FREERTOS/queue.c **** 					}
2181:../Dave/Generated/FREERTOS/queue.c **** 					else
2182:../Dave/Generated/FREERTOS/queue.c **** 					{
2183:../Dave/Generated/FREERTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2184:../Dave/Generated/FREERTOS/queue.c **** 					}
2185:../Dave/Generated/FREERTOS/queue.c **** 				}
2186:../Dave/Generated/FREERTOS/queue.c **** 				else
2187:../Dave/Generated/FREERTOS/queue.c **** 				{
2188:../Dave/Generated/FREERTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2189:../Dave/Generated/FREERTOS/queue.c **** 				}
2190:../Dave/Generated/FREERTOS/queue.c **** 			}
2191:../Dave/Generated/FREERTOS/queue.c **** 			else
2192:../Dave/Generated/FREERTOS/queue.c **** 			{
2193:../Dave/Generated/FREERTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2194:../Dave/Generated/FREERTOS/queue.c **** 			}
2195:../Dave/Generated/FREERTOS/queue.c **** 		}
2196:../Dave/Generated/FREERTOS/queue.c **** 		else
2197:../Dave/Generated/FREERTOS/queue.c **** 		{
2198:../Dave/Generated/FREERTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2199:../Dave/Generated/FREERTOS/queue.c **** 		}
2200:../Dave/Generated/FREERTOS/queue.c **** 
2201:../Dave/Generated/FREERTOS/queue.c **** 		return xCoRoutinePreviouslyWoken;
2202:../Dave/Generated/FREERTOS/queue.c **** 	}
2203:../Dave/Generated/FREERTOS/queue.c **** 
2204:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2205:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2206:../Dave/Generated/FREERTOS/queue.c **** 
2207:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2208:../Dave/Generated/FREERTOS/queue.c **** 
2209:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2210:../Dave/Generated/FREERTOS/queue.c **** 	{
2211:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xReturn;
2212:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2213:../Dave/Generated/FREERTOS/queue.c **** 
2214:../Dave/Generated/FREERTOS/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2215:../Dave/Generated/FREERTOS/queue.c **** 		not then just leave without doing anything. */
2216:../Dave/Generated/FREERTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2217:../Dave/Generated/FREERTOS/queue.c **** 		{
2218:../Dave/Generated/FREERTOS/queue.c **** 			/* Copy the data from the queue. */
2219:../Dave/Generated/FREERTOS/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2220:../Dave/Generated/FREERTOS/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2221:../Dave/Generated/FREERTOS/queue.c **** 			{
2222:../Dave/Generated/FREERTOS/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2223:../Dave/Generated/FREERTOS/queue.c **** 			}
2224:../Dave/Generated/FREERTOS/queue.c **** 			else
2225:../Dave/Generated/FREERTOS/queue.c **** 			{
2226:../Dave/Generated/FREERTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2227:../Dave/Generated/FREERTOS/queue.c **** 			}
2228:../Dave/Generated/FREERTOS/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2229:../Dave/Generated/FREERTOS/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2230:../Dave/Generated/FREERTOS/queue.c **** 
2231:../Dave/Generated/FREERTOS/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2232:../Dave/Generated/FREERTOS/queue.c **** 			{
2233:../Dave/Generated/FREERTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2234:../Dave/Generated/FREERTOS/queue.c **** 				{
2235:../Dave/Generated/FREERTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2236:../Dave/Generated/FREERTOS/queue.c **** 					{
2237:../Dave/Generated/FREERTOS/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2238:../Dave/Generated/FREERTOS/queue.c **** 					}
2239:../Dave/Generated/FREERTOS/queue.c **** 					else
2240:../Dave/Generated/FREERTOS/queue.c **** 					{
2241:../Dave/Generated/FREERTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2242:../Dave/Generated/FREERTOS/queue.c **** 					}
2243:../Dave/Generated/FREERTOS/queue.c **** 				}
2244:../Dave/Generated/FREERTOS/queue.c **** 				else
2245:../Dave/Generated/FREERTOS/queue.c **** 				{
2246:../Dave/Generated/FREERTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2247:../Dave/Generated/FREERTOS/queue.c **** 				}
2248:../Dave/Generated/FREERTOS/queue.c **** 			}
2249:../Dave/Generated/FREERTOS/queue.c **** 			else
2250:../Dave/Generated/FREERTOS/queue.c **** 			{
2251:../Dave/Generated/FREERTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2252:../Dave/Generated/FREERTOS/queue.c **** 			}
2253:../Dave/Generated/FREERTOS/queue.c **** 
2254:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdPASS;
2255:../Dave/Generated/FREERTOS/queue.c **** 		}
2256:../Dave/Generated/FREERTOS/queue.c **** 		else
2257:../Dave/Generated/FREERTOS/queue.c **** 		{
2258:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdFAIL;
2259:../Dave/Generated/FREERTOS/queue.c **** 		}
2260:../Dave/Generated/FREERTOS/queue.c **** 
2261:../Dave/Generated/FREERTOS/queue.c **** 		return xReturn;
2262:../Dave/Generated/FREERTOS/queue.c **** 	}
2263:../Dave/Generated/FREERTOS/queue.c **** 
2264:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2265:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2266:../Dave/Generated/FREERTOS/queue.c **** 
2267:../Dave/Generated/FREERTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2268:../Dave/Generated/FREERTOS/queue.c **** 
2269:../Dave/Generated/FREERTOS/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2270:../Dave/Generated/FREERTOS/queue.c **** 	{
2271:../Dave/Generated/FREERTOS/queue.c **** 	UBaseType_t ux;
2272:../Dave/Generated/FREERTOS/queue.c **** 
2273:../Dave/Generated/FREERTOS/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2274:../Dave/Generated/FREERTOS/queue.c **** 		a free slot. */
2275:../Dave/Generated/FREERTOS/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2276:../Dave/Generated/FREERTOS/queue.c **** 		{
2277:../Dave/Generated/FREERTOS/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
2278:../Dave/Generated/FREERTOS/queue.c **** 			{
2279:../Dave/Generated/FREERTOS/queue.c **** 				/* Store the information on this queue. */
2280:../Dave/Generated/FREERTOS/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
2281:../Dave/Generated/FREERTOS/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
2282:../Dave/Generated/FREERTOS/queue.c **** 
2283:../Dave/Generated/FREERTOS/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2284:../Dave/Generated/FREERTOS/queue.c **** 				break;
2285:../Dave/Generated/FREERTOS/queue.c **** 			}
2286:../Dave/Generated/FREERTOS/queue.c **** 			else
2287:../Dave/Generated/FREERTOS/queue.c **** 			{
2288:../Dave/Generated/FREERTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2289:../Dave/Generated/FREERTOS/queue.c **** 			}
2290:../Dave/Generated/FREERTOS/queue.c **** 		}
2291:../Dave/Generated/FREERTOS/queue.c **** 	}
2292:../Dave/Generated/FREERTOS/queue.c **** 
2293:../Dave/Generated/FREERTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2294:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2295:../Dave/Generated/FREERTOS/queue.c **** 
2296:../Dave/Generated/FREERTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2297:../Dave/Generated/FREERTOS/queue.c **** 
2298:../Dave/Generated/FREERTOS/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2299:../Dave/Generated/FREERTOS/queue.c **** 	{
2300:../Dave/Generated/FREERTOS/queue.c **** 	UBaseType_t ux;
2301:../Dave/Generated/FREERTOS/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2302:../Dave/Generated/FREERTOS/queue.c **** 
2303:../Dave/Generated/FREERTOS/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2304:../Dave/Generated/FREERTOS/queue.c **** 		removing entries from the registry while it is being searched. */
2305:../Dave/Generated/FREERTOS/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2306:../Dave/Generated/FREERTOS/queue.c **** 		{
2307:../Dave/Generated/FREERTOS/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
2308:../Dave/Generated/FREERTOS/queue.c **** 			{
2309:../Dave/Generated/FREERTOS/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
2310:../Dave/Generated/FREERTOS/queue.c **** 				break;
2311:../Dave/Generated/FREERTOS/queue.c **** 			}
2312:../Dave/Generated/FREERTOS/queue.c **** 			else
2313:../Dave/Generated/FREERTOS/queue.c **** 			{
2314:../Dave/Generated/FREERTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2315:../Dave/Generated/FREERTOS/queue.c **** 			}
2316:../Dave/Generated/FREERTOS/queue.c **** 		}
2317:../Dave/Generated/FREERTOS/queue.c **** 
2318:../Dave/Generated/FREERTOS/queue.c **** 		return pcReturn;
2319:../Dave/Generated/FREERTOS/queue.c **** 	}
2320:../Dave/Generated/FREERTOS/queue.c **** 
2321:../Dave/Generated/FREERTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2322:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2323:../Dave/Generated/FREERTOS/queue.c **** 
2324:../Dave/Generated/FREERTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2325:../Dave/Generated/FREERTOS/queue.c **** 
2326:../Dave/Generated/FREERTOS/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2327:../Dave/Generated/FREERTOS/queue.c **** 	{
2328:../Dave/Generated/FREERTOS/queue.c **** 	UBaseType_t ux;
2329:../Dave/Generated/FREERTOS/queue.c **** 
2330:../Dave/Generated/FREERTOS/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2331:../Dave/Generated/FREERTOS/queue.c **** 		registry. */
2332:../Dave/Generated/FREERTOS/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2333:../Dave/Generated/FREERTOS/queue.c **** 		{
2334:../Dave/Generated/FREERTOS/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
2335:../Dave/Generated/FREERTOS/queue.c **** 			{
2336:../Dave/Generated/FREERTOS/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2337:../Dave/Generated/FREERTOS/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
2338:../Dave/Generated/FREERTOS/queue.c **** 
2339:../Dave/Generated/FREERTOS/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2340:../Dave/Generated/FREERTOS/queue.c **** 				appear in the registry twice if it is added, removed, then
2341:../Dave/Generated/FREERTOS/queue.c **** 				added again. */
2342:../Dave/Generated/FREERTOS/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
2343:../Dave/Generated/FREERTOS/queue.c **** 				break;
2344:../Dave/Generated/FREERTOS/queue.c **** 			}
2345:../Dave/Generated/FREERTOS/queue.c **** 			else
2346:../Dave/Generated/FREERTOS/queue.c **** 			{
2347:../Dave/Generated/FREERTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2348:../Dave/Generated/FREERTOS/queue.c **** 			}
2349:../Dave/Generated/FREERTOS/queue.c **** 		}
2350:../Dave/Generated/FREERTOS/queue.c **** 
2351:../Dave/Generated/FREERTOS/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2352:../Dave/Generated/FREERTOS/queue.c **** 
2353:../Dave/Generated/FREERTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2354:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2355:../Dave/Generated/FREERTOS/queue.c **** 
2356:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_TIMERS == 1 )
2357:../Dave/Generated/FREERTOS/queue.c **** 
2358:../Dave/Generated/FREERTOS/queue.c **** 	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType
2359:../Dave/Generated/FREERTOS/queue.c **** 	{
2360:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2361:../Dave/Generated/FREERTOS/queue.c **** 
2362:../Dave/Generated/FREERTOS/queue.c **** 		/* This function should not be called by application code hence the
2363:../Dave/Generated/FREERTOS/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2364:../Dave/Generated/FREERTOS/queue.c **** 		designed for use by kernel code, and has special calling requirements.
2365:../Dave/Generated/FREERTOS/queue.c **** 		It can result in vListInsert() being called on a list that can only
2366:../Dave/Generated/FREERTOS/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
2367:../Dave/Generated/FREERTOS/queue.c **** 		so it should be called with the scheduler locked and not from a critical
2368:../Dave/Generated/FREERTOS/queue.c **** 		section. */
2369:../Dave/Generated/FREERTOS/queue.c **** 
2370:../Dave/Generated/FREERTOS/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
2371:../Dave/Generated/FREERTOS/queue.c **** 		will not actually cause the task to block, just place it on a blocked
2372:../Dave/Generated/FREERTOS/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
2373:../Dave/Generated/FREERTOS/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
2374:../Dave/Generated/FREERTOS/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
2375:../Dave/Generated/FREERTOS/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
2376:../Dave/Generated/FREERTOS/queue.c **** 		prvLockQueue( pxQueue );
2377:../Dave/Generated/FREERTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
2378:../Dave/Generated/FREERTOS/queue.c **** 		{
2379:../Dave/Generated/FREERTOS/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
2380:../Dave/Generated/FREERTOS/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefi
2381:../Dave/Generated/FREERTOS/queue.c **** 		}
2382:../Dave/Generated/FREERTOS/queue.c **** 		else
2383:../Dave/Generated/FREERTOS/queue.c **** 		{
2384:../Dave/Generated/FREERTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2385:../Dave/Generated/FREERTOS/queue.c **** 		}
2386:../Dave/Generated/FREERTOS/queue.c **** 		prvUnlockQueue( pxQueue );
2387:../Dave/Generated/FREERTOS/queue.c **** 	}
2388:../Dave/Generated/FREERTOS/queue.c **** 
2389:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_TIMERS */
2390:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2391:../Dave/Generated/FREERTOS/queue.c **** 
2392:../Dave/Generated/FREERTOS/queue.c **** #if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
2393:../Dave/Generated/FREERTOS/queue.c **** 
2394:../Dave/Generated/FREERTOS/queue.c **** 	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
2395:../Dave/Generated/FREERTOS/queue.c **** 	{
2396:../Dave/Generated/FREERTOS/queue.c **** 	QueueSetHandle_t pxQueue;
2397:../Dave/Generated/FREERTOS/queue.c **** 
2398:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue = xQueueGenericCreate( uxEventQueueLength, sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
2399:../Dave/Generated/FREERTOS/queue.c **** 
2400:../Dave/Generated/FREERTOS/queue.c **** 		return pxQueue;
2401:../Dave/Generated/FREERTOS/queue.c **** 	}
2402:../Dave/Generated/FREERTOS/queue.c **** 
2403:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2404:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2405:../Dave/Generated/FREERTOS/queue.c **** 
2406:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2407:../Dave/Generated/FREERTOS/queue.c **** 
2408:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
2409:../Dave/Generated/FREERTOS/queue.c **** 	{
2410:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xReturn;
2411:../Dave/Generated/FREERTOS/queue.c **** 
2412:../Dave/Generated/FREERTOS/queue.c **** 		taskENTER_CRITICAL();
2413:../Dave/Generated/FREERTOS/queue.c **** 		{
2414:../Dave/Generated/FREERTOS/queue.c **** 			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
2415:../Dave/Generated/FREERTOS/queue.c **** 			{
2416:../Dave/Generated/FREERTOS/queue.c **** 				/* Cannot add a queue/semaphore to more than one queue set. */
2417:../Dave/Generated/FREERTOS/queue.c **** 				xReturn = pdFAIL;
2418:../Dave/Generated/FREERTOS/queue.c **** 			}
2419:../Dave/Generated/FREERTOS/queue.c **** 			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
2420:../Dave/Generated/FREERTOS/queue.c **** 			{
2421:../Dave/Generated/FREERTOS/queue.c **** 				/* Cannot add a queue/semaphore to a queue set if there are already
2422:../Dave/Generated/FREERTOS/queue.c **** 				items in the queue/semaphore. */
2423:../Dave/Generated/FREERTOS/queue.c **** 				xReturn = pdFAIL;
2424:../Dave/Generated/FREERTOS/queue.c **** 			}
2425:../Dave/Generated/FREERTOS/queue.c **** 			else
2426:../Dave/Generated/FREERTOS/queue.c **** 			{
2427:../Dave/Generated/FREERTOS/queue.c **** 				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
2428:../Dave/Generated/FREERTOS/queue.c **** 				xReturn = pdPASS;
2429:../Dave/Generated/FREERTOS/queue.c **** 			}
2430:../Dave/Generated/FREERTOS/queue.c **** 		}
2431:../Dave/Generated/FREERTOS/queue.c **** 		taskEXIT_CRITICAL();
2432:../Dave/Generated/FREERTOS/queue.c **** 
2433:../Dave/Generated/FREERTOS/queue.c **** 		return xReturn;
2434:../Dave/Generated/FREERTOS/queue.c **** 	}
2435:../Dave/Generated/FREERTOS/queue.c **** 
2436:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2437:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2438:../Dave/Generated/FREERTOS/queue.c **** 
2439:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2440:../Dave/Generated/FREERTOS/queue.c **** 
2441:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueS
2442:../Dave/Generated/FREERTOS/queue.c **** 	{
2443:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xReturn;
2444:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t * const pxQueueOrSemaphore = ( Queue_t * ) xQueueOrSemaphore;
2445:../Dave/Generated/FREERTOS/queue.c **** 
2446:../Dave/Generated/FREERTOS/queue.c **** 		if( pxQueueOrSemaphore->pxQueueSetContainer != xQueueSet )
2447:../Dave/Generated/FREERTOS/queue.c **** 		{
2448:../Dave/Generated/FREERTOS/queue.c **** 			/* The queue was not a member of the set. */
2449:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdFAIL;
2450:../Dave/Generated/FREERTOS/queue.c **** 		}
2451:../Dave/Generated/FREERTOS/queue.c **** 		else if( pxQueueOrSemaphore->uxMessagesWaiting != ( UBaseType_t ) 0 )
2452:../Dave/Generated/FREERTOS/queue.c **** 		{
2453:../Dave/Generated/FREERTOS/queue.c **** 			/* It is dangerous to remove a queue from a set when the queue is
2454:../Dave/Generated/FREERTOS/queue.c **** 			not empty because the queue set will still hold pending events for
2455:../Dave/Generated/FREERTOS/queue.c **** 			the queue. */
2456:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdFAIL;
2457:../Dave/Generated/FREERTOS/queue.c **** 		}
2458:../Dave/Generated/FREERTOS/queue.c **** 		else
2459:../Dave/Generated/FREERTOS/queue.c **** 		{
2460:../Dave/Generated/FREERTOS/queue.c **** 			taskENTER_CRITICAL();
2461:../Dave/Generated/FREERTOS/queue.c **** 			{
2462:../Dave/Generated/FREERTOS/queue.c **** 				/* The queue is no longer contained in the set. */
2463:../Dave/Generated/FREERTOS/queue.c **** 				pxQueueOrSemaphore->pxQueueSetContainer = NULL;
2464:../Dave/Generated/FREERTOS/queue.c **** 			}
2465:../Dave/Generated/FREERTOS/queue.c **** 			taskEXIT_CRITICAL();
2466:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdPASS;
2467:../Dave/Generated/FREERTOS/queue.c **** 		}
2468:../Dave/Generated/FREERTOS/queue.c **** 
2469:../Dave/Generated/FREERTOS/queue.c **** 		return xReturn;
2470:../Dave/Generated/FREERTOS/queue.c **** 	} /*lint !e818 xQueueSet could not be declared as pointing to const as it is a typedef. */
2471:../Dave/Generated/FREERTOS/queue.c **** 
2472:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2473:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2474:../Dave/Generated/FREERTOS/queue.c **** 
2475:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2476:../Dave/Generated/FREERTOS/queue.c **** 
2477:../Dave/Generated/FREERTOS/queue.c **** 	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToW
2478:../Dave/Generated/FREERTOS/queue.c **** 	{
2479:../Dave/Generated/FREERTOS/queue.c **** 	QueueSetMemberHandle_t xReturn = NULL;
2480:../Dave/Generated/FREERTOS/queue.c **** 
2481:../Dave/Generated/FREERTOS/queue.c **** 		( void ) xQueueGenericReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait, pdFALSE ); /*
2482:../Dave/Generated/FREERTOS/queue.c **** 		return xReturn;
2483:../Dave/Generated/FREERTOS/queue.c **** 	}
2484:../Dave/Generated/FREERTOS/queue.c **** 
2485:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2486:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2487:../Dave/Generated/FREERTOS/queue.c **** 
2488:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2489:../Dave/Generated/FREERTOS/queue.c **** 
2490:../Dave/Generated/FREERTOS/queue.c **** 	QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet )
2491:../Dave/Generated/FREERTOS/queue.c **** 	{
2492:../Dave/Generated/FREERTOS/queue.c **** 	QueueSetMemberHandle_t xReturn = NULL;
2493:../Dave/Generated/FREERTOS/queue.c **** 
2494:../Dave/Generated/FREERTOS/queue.c **** 		( void ) xQueueReceiveFromISR( ( QueueHandle_t ) xQueueSet, &xReturn, NULL ); /*lint !e961 Castin
2495:../Dave/Generated/FREERTOS/queue.c **** 		return xReturn;
2496:../Dave/Generated/FREERTOS/queue.c **** 	}
2497:../Dave/Generated/FREERTOS/queue.c **** 
2498:../Dave/Generated/FREERTOS/queue.c **** #endif /* configUSE_QUEUE_SETS */
2499:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
2500:../Dave/Generated/FREERTOS/queue.c **** 
2501:../Dave/Generated/FREERTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
2502:../Dave/Generated/FREERTOS/queue.c **** 
2503:../Dave/Generated/FREERTOS/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 217              	 .loc 1 2503 0
 218              	 .cfi_startproc
 219              	 
 220              	 
 221              	 
 222              	 
 223              	.LVL22:
 224              	.LBB116:
 225              	.LBB117:
 226              	 .file 2 "../Dave/Generated/FREERTOS/portmacro.h"
   1:../Dave/Generated/FREERTOS/portmacro.h **** /*
   2:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Dave/Generated/FREERTOS/portmacro.h ****     All rights reserved
   4:../Dave/Generated/FREERTOS/portmacro.h **** 
   5:../Dave/Generated/FREERTOS/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Dave/Generated/FREERTOS/portmacro.h **** 
   7:../Dave/Generated/FREERTOS/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../Dave/Generated/FREERTOS/portmacro.h **** 
   9:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Dave/Generated/FREERTOS/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Dave/Generated/FREERTOS/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Dave/Generated/FREERTOS/portmacro.h **** 
  13:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  14:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  19:../Dave/Generated/FREERTOS/portmacro.h **** 
  20:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Dave/Generated/FREERTOS/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Dave/Generated/FREERTOS/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Dave/Generated/FREERTOS/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../Dave/Generated/FREERTOS/portmacro.h **** 
  25:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  26:../Dave/Generated/FREERTOS/portmacro.h ****      *                                                                       *
  27:../Dave/Generated/FREERTOS/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Dave/Generated/FREERTOS/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Dave/Generated/FREERTOS/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../Dave/Generated/FREERTOS/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../Dave/Generated/FREERTOS/portmacro.h ****      *                                                                       *
  32:../Dave/Generated/FREERTOS/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Dave/Generated/FREERTOS/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Dave/Generated/FREERTOS/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../Dave/Generated/FREERTOS/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Dave/Generated/FREERTOS/portmacro.h ****      *                                                                       *
  37:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  38:../Dave/Generated/FREERTOS/portmacro.h **** 
  39:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Dave/Generated/FREERTOS/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Dave/Generated/FREERTOS/portmacro.h ****     defined configASSERT()?
  42:../Dave/Generated/FREERTOS/portmacro.h **** 
  43:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Dave/Generated/FREERTOS/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../Dave/Generated/FREERTOS/portmacro.h ****     participating in the support forum.
  46:../Dave/Generated/FREERTOS/portmacro.h **** 
  47:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Dave/Generated/FREERTOS/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Dave/Generated/FREERTOS/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Dave/Generated/FREERTOS/portmacro.h **** 
  52:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Dave/Generated/FREERTOS/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Dave/Generated/FREERTOS/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Dave/Generated/FREERTOS/portmacro.h **** 
  56:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Dave/Generated/FREERTOS/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Dave/Generated/FREERTOS/portmacro.h **** 
  59:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Dave/Generated/FREERTOS/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Dave/Generated/FREERTOS/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Dave/Generated/FREERTOS/portmacro.h **** 
  63:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Dave/Generated/FREERTOS/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../Dave/Generated/FREERTOS/portmacro.h ****     mission critical applications that require provable dependability.
  66:../Dave/Generated/FREERTOS/portmacro.h **** 
  67:../Dave/Generated/FREERTOS/portmacro.h ****     1 tab == 4 spaces!
  68:../Dave/Generated/FREERTOS/portmacro.h **** */
  69:../Dave/Generated/FREERTOS/portmacro.h **** #include "freertos_conf.h"
  70:../Dave/Generated/FREERTOS/portmacro.h **** 
  71:../Dave/Generated/FREERTOS/portmacro.h **** #if FREERTOS_MPU_SUPPORT == 0
  72:../Dave/Generated/FREERTOS/portmacro.h **** 
  73:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef PORTMACRO_H
  74:../Dave/Generated/FREERTOS/portmacro.h **** #define PORTMACRO_H
  75:../Dave/Generated/FREERTOS/portmacro.h **** 
  76:../Dave/Generated/FREERTOS/portmacro.h **** #ifdef __cplusplus
  77:../Dave/Generated/FREERTOS/portmacro.h **** extern "C" {
  78:../Dave/Generated/FREERTOS/portmacro.h **** #endif
  79:../Dave/Generated/FREERTOS/portmacro.h **** 
  80:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------
  81:../Dave/Generated/FREERTOS/portmacro.h ****  * Port specific definitions.
  82:../Dave/Generated/FREERTOS/portmacro.h ****  *
  83:../Dave/Generated/FREERTOS/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  84:../Dave/Generated/FREERTOS/portmacro.h ****  * given hardware and compiler.
  85:../Dave/Generated/FREERTOS/portmacro.h ****  *
  86:../Dave/Generated/FREERTOS/portmacro.h ****  * These settings should not be altered.
  87:../Dave/Generated/FREERTOS/portmacro.h ****  *-----------------------------------------------------------
  88:../Dave/Generated/FREERTOS/portmacro.h ****  */
  89:../Dave/Generated/FREERTOS/portmacro.h **** 
  90:../Dave/Generated/FREERTOS/portmacro.h **** #if defined( __GNUC__ )
  91:../Dave/Generated/FREERTOS/portmacro.h **** /* Type definitions. */
  92:../Dave/Generated/FREERTOS/portmacro.h **** #define portCHAR		char
  93:../Dave/Generated/FREERTOS/portmacro.h **** #define portFLOAT		float
  94:../Dave/Generated/FREERTOS/portmacro.h **** #define portDOUBLE		double
  95:../Dave/Generated/FREERTOS/portmacro.h **** #define portLONG		long
  96:../Dave/Generated/FREERTOS/portmacro.h **** #define portSHORT		short
  97:../Dave/Generated/FREERTOS/portmacro.h **** #define portSTACK_TYPE	uint32_t
  98:../Dave/Generated/FREERTOS/portmacro.h **** #define portBASE_TYPE	long
  99:../Dave/Generated/FREERTOS/portmacro.h **** 
 100:../Dave/Generated/FREERTOS/portmacro.h **** typedef portSTACK_TYPE StackType_t;
 101:../Dave/Generated/FREERTOS/portmacro.h **** typedef long BaseType_t;
 102:../Dave/Generated/FREERTOS/portmacro.h **** typedef unsigned long UBaseType_t;
 103:../Dave/Generated/FREERTOS/portmacro.h **** 
 104:../Dave/Generated/FREERTOS/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 105:../Dave/Generated/FREERTOS/portmacro.h **** 	typedef uint16_t TickType_t;
 106:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 107:../Dave/Generated/FREERTOS/portmacro.h **** #else
 108:../Dave/Generated/FREERTOS/portmacro.h **** 	typedef uint32_t TickType_t;
 109:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 110:../Dave/Generated/FREERTOS/portmacro.h **** 
 111:../Dave/Generated/FREERTOS/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 112:../Dave/Generated/FREERTOS/portmacro.h **** 	not need to be guarded with a critical section. */
 113:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 114:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 115:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 116:../Dave/Generated/FREERTOS/portmacro.h **** 
 117:../Dave/Generated/FREERTOS/portmacro.h **** /* Architecture specifics. */
 118:../Dave/Generated/FREERTOS/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 119:../Dave/Generated/FREERTOS/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 120:../Dave/Generated/FREERTOS/portmacro.h **** #define portBYTE_ALIGNMENT			8
 121:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 122:../Dave/Generated/FREERTOS/portmacro.h **** 
 123:../Dave/Generated/FREERTOS/portmacro.h **** /* Scheduler utilities. */
 124:../Dave/Generated/FREERTOS/portmacro.h **** #define portYIELD() 															\
 125:../Dave/Generated/FREERTOS/portmacro.h **** {																				\
 126:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 127:../Dave/Generated/FREERTOS/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 128:../Dave/Generated/FREERTOS/portmacro.h **** 																				\
 129:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 130:../Dave/Generated/FREERTOS/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 131:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile( "dsb" );													\
 132:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile( "isb" );													\
 133:../Dave/Generated/FREERTOS/portmacro.h **** }
 134:../Dave/Generated/FREERTOS/portmacro.h **** 
 135:../Dave/Generated/FREERTOS/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 136:../Dave/Generated/FREERTOS/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 137:../Dave/Generated/FREERTOS/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 138:../Dave/Generated/FREERTOS/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 139:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 140:../Dave/Generated/FREERTOS/portmacro.h **** 
 141:../Dave/Generated/FREERTOS/portmacro.h **** /* Critical section management. */
 142:../Dave/Generated/FREERTOS/portmacro.h **** extern void vPortEnterCritical( void );
 143:../Dave/Generated/FREERTOS/portmacro.h **** extern void vPortExitCritical( void );
 144:../Dave/Generated/FREERTOS/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 145:../Dave/Generated/FREERTOS/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 146:../Dave/Generated/FREERTOS/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 147:../Dave/Generated/FREERTOS/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 148:../Dave/Generated/FREERTOS/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 149:../Dave/Generated/FREERTOS/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 150:../Dave/Generated/FREERTOS/portmacro.h **** 
 151:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 152:../Dave/Generated/FREERTOS/portmacro.h **** 
 153:../Dave/Generated/FREERTOS/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 154:../Dave/Generated/FREERTOS/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 155:../Dave/Generated/FREERTOS/portmacro.h **** (which build with all the ports) will build. */
 156:../Dave/Generated/FREERTOS/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 157:../Dave/Generated/FREERTOS/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 158:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 159:../Dave/Generated/FREERTOS/portmacro.h **** 
 160:../Dave/Generated/FREERTOS/portmacro.h **** /* Tickless idle/low power functionality. */
 161:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 162:../Dave/Generated/FREERTOS/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 163:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 164:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 165:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 166:../Dave/Generated/FREERTOS/portmacro.h **** 
 167:../Dave/Generated/FREERTOS/portmacro.h **** /* Architecture specific optimisations. */
 168:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 169:../Dave/Generated/FREERTOS/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 170:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 171:../Dave/Generated/FREERTOS/portmacro.h **** 
 172:../Dave/Generated/FREERTOS/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 173:../Dave/Generated/FREERTOS/portmacro.h **** 
 174:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Generic helper function. */
 175:../Dave/Generated/FREERTOS/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 176:../Dave/Generated/FREERTOS/portmacro.h **** 	{
 177:../Dave/Generated/FREERTOS/portmacro.h **** 	uint8_t ucReturn;
 178:../Dave/Generated/FREERTOS/portmacro.h **** 
 179:../Dave/Generated/FREERTOS/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 180:../Dave/Generated/FREERTOS/portmacro.h **** 		return ucReturn;
 181:../Dave/Generated/FREERTOS/portmacro.h **** 	}
 182:../Dave/Generated/FREERTOS/portmacro.h **** 
 183:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Check the configuration. */
 184:../Dave/Generated/FREERTOS/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 185:../Dave/Generated/FREERTOS/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 186:../Dave/Generated/FREERTOS/portmacro.h **** 	#endif
 187:../Dave/Generated/FREERTOS/portmacro.h **** 
 188:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 189:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 190:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 191:../Dave/Generated/FREERTOS/portmacro.h **** 
 192:../Dave/Generated/FREERTOS/portmacro.h **** 	/*-----------------------------------------------------------*/
 193:../Dave/Generated/FREERTOS/portmacro.h **** 
 194:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 195:../Dave/Generated/FREERTOS/portmacro.h **** 
 196:../Dave/Generated/FREERTOS/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 197:../Dave/Generated/FREERTOS/portmacro.h **** 
 198:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 199:../Dave/Generated/FREERTOS/portmacro.h **** 
 200:../Dave/Generated/FREERTOS/portmacro.h **** #ifdef configASSERT
 201:../Dave/Generated/FREERTOS/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 202:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 203:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 204:../Dave/Generated/FREERTOS/portmacro.h **** 
 205:../Dave/Generated/FREERTOS/portmacro.h **** /* portNOP() is not required by this port. */
 206:../Dave/Generated/FREERTOS/portmacro.h **** #define portNOP()
 207:../Dave/Generated/FREERTOS/portmacro.h **** 
 208:../Dave/Generated/FREERTOS/portmacro.h **** #define portINLINE	__inline
 209:../Dave/Generated/FREERTOS/portmacro.h **** 
 210:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef portFORCE_INLINE
 211:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 212:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 213:../Dave/Generated/FREERTOS/portmacro.h **** 
 214:../Dave/Generated/FREERTOS/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 215:../Dave/Generated/FREERTOS/portmacro.h **** {
 216:../Dave/Generated/FREERTOS/portmacro.h **** uint32_t ulCurrentInterrupt;
 217:../Dave/Generated/FREERTOS/portmacro.h **** BaseType_t xReturn;
 218:../Dave/Generated/FREERTOS/portmacro.h **** 
 219:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 220:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 221:../Dave/Generated/FREERTOS/portmacro.h **** 
 222:../Dave/Generated/FREERTOS/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 223:../Dave/Generated/FREERTOS/portmacro.h **** 	{
 224:../Dave/Generated/FREERTOS/portmacro.h **** 		xReturn = pdFALSE;
 225:../Dave/Generated/FREERTOS/portmacro.h **** 	}
 226:../Dave/Generated/FREERTOS/portmacro.h **** 	else
 227:../Dave/Generated/FREERTOS/portmacro.h **** 	{
 228:../Dave/Generated/FREERTOS/portmacro.h **** 		xReturn = pdTRUE;
 229:../Dave/Generated/FREERTOS/portmacro.h **** 	}
 230:../Dave/Generated/FREERTOS/portmacro.h **** 
 231:../Dave/Generated/FREERTOS/portmacro.h **** 	return xReturn;
 232:../Dave/Generated/FREERTOS/portmacro.h **** }
 233:../Dave/Generated/FREERTOS/portmacro.h **** 
 234:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 235:../Dave/Generated/FREERTOS/portmacro.h **** 
 236:../Dave/Generated/FREERTOS/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 237:../Dave/Generated/FREERTOS/portmacro.h **** {
 238:../Dave/Generated/FREERTOS/portmacro.h **** uint32_t ulNewBASEPRI;
 239:../Dave/Generated/FREERTOS/portmacro.h **** 
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile
 227              	 .loc 2 240 0
 228              	
 229 0000 4FF0FC03 	 mov r3,#252
 230 0004 83F31188 	 msr basepri,r3
 231 0008 BFF36F8F 	 isb 
 232 000c BFF34F8F 	 dsb 
 233              	
 234              	
 235              	.LVL23:
 236              	 .thumb
 237              	.L18:
 238 0010 FEE7     	 b .L18
 239              	.LBE117:
 240              	.LBE116:
 241              	 .cfi_endproc
 242              	.LFE167:
 244 0012 00BF     	 .section .text.prvNotifyQueueSetContainer,"ax",%progbits
 245              	 .align 2
 246              	 .thumb
 247              	 .thumb_func
 249              	prvNotifyQueueSetContainer:
 250              	.LFB166:
2504:../Dave/Generated/FREERTOS/queue.c **** 	{
 251              	 .loc 1 2504 0
 252              	 .cfi_startproc
 253              	 
 254              	 
 255              	.LVL24:
 256 0000 70B5     	 push {r4,r5,r6,lr}
 257              	.LCFI3:
 258              	 .cfi_def_cfa_offset 16
 259              	 .cfi_offset 4,-16
 260              	 .cfi_offset 5,-12
 261              	 .cfi_offset 6,-8
 262              	 .cfi_offset 14,-4
2505:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 263              	 .loc 1 2505 0
 264 0002 846C     	 ldr r4,[r0,#72]
2504:../Dave/Generated/FREERTOS/queue.c **** 	{
 265              	 .loc 1 2504 0
 266 0004 82B0     	 sub sp,sp,#8
 267              	.LCFI4:
 268              	 .cfi_def_cfa_offset 24
2504:../Dave/Generated/FREERTOS/queue.c **** 	{
 269              	 .loc 1 2504 0
 270 0006 0190     	 str r0,[sp,#4]
 271              	.LVL25:
2506:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xReturn = pdFALSE;
2507:../Dave/Generated/FREERTOS/queue.c **** 
2508:../Dave/Generated/FREERTOS/queue.c **** 		/* This function must be called form a critical section. */
2509:../Dave/Generated/FREERTOS/queue.c **** 
2510:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( pxQueueSetContainer );
 272              	 .loc 1 2510 0
 273 0008 A4B1     	 cbz r4,.L32
 274 000a 0A46     	 mov r2,r1
2511:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 275              	 .loc 1 2511 0
 276 000c E36B     	 ldr r3,[r4,#60]
 277 000e A16B     	 ldr r1,[r4,#56]
 278              	.LVL26:
 279 0010 9942     	 cmp r1,r3
 280 0012 08D3     	 bcc .L21
 281              	.LBB121:
 282              	.LBB122:
 283              	 .loc 2 240 0
 284              	
 285 0014 4FF0FC03 	 mov r3,#252
 286 0018 83F31188 	 msr basepri,r3
 287 001c BFF36F8F 	 isb 
 288 0020 BFF34F8F 	 dsb 
 289              	
 290              	
 291              	.LVL27:
 292              	 .thumb
 293              	.L22:
 294              	.LBE122:
 295              	.LBE121:
 296              	 .loc 1 2511 0 discriminator 2
 297 0024 FEE7     	 b .L22
 298              	.L21:
2512:../Dave/Generated/FREERTOS/queue.c **** 
2513:../Dave/Generated/FREERTOS/queue.c **** 		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 299              	 .loc 1 2513 0
 300 0026 A16B     	 ldr r1,[r4,#56]
 301 0028 8B42     	 cmp r3,r1
 302 002a 05D8     	 bhi .L33
2506:../Dave/Generated/FREERTOS/queue.c **** 
 303              	 .loc 1 2506 0
 304 002c 0026     	 movs r6,#0
 305              	.LVL28:
 306              	.L23:
2514:../Dave/Generated/FREERTOS/queue.c **** 		{
2515:../Dave/Generated/FREERTOS/queue.c **** 			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
2516:../Dave/Generated/FREERTOS/queue.c **** 
2517:../Dave/Generated/FREERTOS/queue.c **** 			traceQUEUE_SEND( pxQueueSetContainer );
2518:../Dave/Generated/FREERTOS/queue.c **** 
2519:../Dave/Generated/FREERTOS/queue.c **** 			/* The data copied is the handle of the queue that contains data. */
2520:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
2521:../Dave/Generated/FREERTOS/queue.c **** 
2522:../Dave/Generated/FREERTOS/queue.c **** 			if( cTxLock == queueUNLOCKED )
2523:../Dave/Generated/FREERTOS/queue.c **** 			{
2524:../Dave/Generated/FREERTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
2525:../Dave/Generated/FREERTOS/queue.c **** 				{
2526:../Dave/Generated/FREERTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
2527:../Dave/Generated/FREERTOS/queue.c **** 					{
2528:../Dave/Generated/FREERTOS/queue.c **** 						/* The task waiting has a higher priority. */
2529:../Dave/Generated/FREERTOS/queue.c **** 						xReturn = pdTRUE;
2530:../Dave/Generated/FREERTOS/queue.c **** 					}
2531:../Dave/Generated/FREERTOS/queue.c **** 					else
2532:../Dave/Generated/FREERTOS/queue.c **** 					{
2533:../Dave/Generated/FREERTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2534:../Dave/Generated/FREERTOS/queue.c **** 					}
2535:../Dave/Generated/FREERTOS/queue.c **** 				}
2536:../Dave/Generated/FREERTOS/queue.c **** 				else
2537:../Dave/Generated/FREERTOS/queue.c **** 				{
2538:../Dave/Generated/FREERTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2539:../Dave/Generated/FREERTOS/queue.c **** 				}
2540:../Dave/Generated/FREERTOS/queue.c **** 			}
2541:../Dave/Generated/FREERTOS/queue.c **** 			else
2542:../Dave/Generated/FREERTOS/queue.c **** 			{
2543:../Dave/Generated/FREERTOS/queue.c **** 				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
2544:../Dave/Generated/FREERTOS/queue.c **** 			}
2545:../Dave/Generated/FREERTOS/queue.c **** 		}
2546:../Dave/Generated/FREERTOS/queue.c **** 		else
2547:../Dave/Generated/FREERTOS/queue.c **** 		{
2548:../Dave/Generated/FREERTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2549:../Dave/Generated/FREERTOS/queue.c **** 		}
2550:../Dave/Generated/FREERTOS/queue.c **** 
2551:../Dave/Generated/FREERTOS/queue.c **** 		return xReturn;
2552:../Dave/Generated/FREERTOS/queue.c **** 	}
 307              	 .loc 1 2552 0
 308 002e 3046     	 mov r0,r6
 309 0030 02B0     	 add sp,sp,#8
 310              	.LCFI5:
 311              	 .cfi_remember_state
 312              	 .cfi_def_cfa_offset 16
 313              	 
 314 0032 70BD     	 pop {r4,r5,r6,pc}
 315              	.LVL29:
 316              	.L32:
 317              	.LCFI6:
 318              	 .cfi_restore_state
 319 0034 FFF7FEFF 	 bl prvNotifyQueueSetContainer.part.0
 320              	.LVL30:
 321              	.L33:
 322              	.LBB123:
2515:../Dave/Generated/FREERTOS/queue.c **** 
 323              	 .loc 1 2515 0
 324 0038 94F84550 	 ldrb r5,[r4,#69]
2520:../Dave/Generated/FREERTOS/queue.c **** 
 325              	 .loc 1 2520 0
 326 003c 2046     	 mov r0,r4
 327              	.LVL31:
 328 003e 01A9     	 add r1,sp,#4
 329              	.LVL32:
 330 0040 FFF7FEFF 	 bl prvCopyDataToQueue
 331              	.LVL33:
2515:../Dave/Generated/FREERTOS/queue.c **** 
 332              	 .loc 1 2515 0
 333 0044 EDB2     	 uxtb r5,r5
 334              	.LVL34:
2522:../Dave/Generated/FREERTOS/queue.c **** 			{
 335              	 .loc 1 2522 0
 336 0046 FF2D     	 cmp r5,#255
2520:../Dave/Generated/FREERTOS/queue.c **** 
 337              	 .loc 1 2520 0
 338 0048 0646     	 mov r6,r0
 339              	.LVL35:
2522:../Dave/Generated/FREERTOS/queue.c **** 			{
 340              	 .loc 1 2522 0
 341 004a 06D0     	 beq .L34
2543:../Dave/Generated/FREERTOS/queue.c **** 			}
 342              	 .loc 1 2543 0
 343 004c 6B1C     	 adds r3,r5,#1
 344 004e DBB2     	 uxtb r3,r3
 345              	.LBE123:
 346              	 .loc 1 2552 0
 347 0050 3046     	 mov r0,r6
 348              	.LBB124:
2543:../Dave/Generated/FREERTOS/queue.c **** 			}
 349              	 .loc 1 2543 0
 350 0052 84F84530 	 strb r3,[r4,#69]
 351              	.LBE124:
 352              	 .loc 1 2552 0
 353 0056 02B0     	 add sp,sp,#8
 354              	.LCFI7:
 355              	 .cfi_remember_state
 356              	 .cfi_def_cfa_offset 16
 357              	 
 358 0058 70BD     	 pop {r4,r5,r6,pc}
 359              	.LVL36:
 360              	.L34:
 361              	.LCFI8:
 362              	 .cfi_restore_state
 363              	.LBB125:
2524:../Dave/Generated/FREERTOS/queue.c **** 				{
 364              	 .loc 1 2524 0
 365 005a 636A     	 ldr r3,[r4,#36]
 366 005c 002B     	 cmp r3,#0
 367 005e E6D0     	 beq .L23
2526:../Dave/Generated/FREERTOS/queue.c **** 					{
 368              	 .loc 1 2526 0
 369 0060 04F12400 	 add r0,r4,#36
 370              	.LVL37:
 371 0064 FFF7FEFF 	 bl xTaskRemoveFromEventList
 372              	.LVL38:
2529:../Dave/Generated/FREERTOS/queue.c **** 					}
 373              	 .loc 1 2529 0
 374 0068 0028     	 cmp r0,#0
 375 006a 18BF     	 it ne
 376 006c 0126     	 movne r6,#1
 377              	.LVL39:
 378              	.LBE125:
 379              	 .loc 1 2552 0
 380 006e 3046     	 mov r0,r6
 381 0070 02B0     	 add sp,sp,#8
 382              	.LCFI9:
 383              	 .cfi_def_cfa_offset 16
 384              	 
 385 0072 70BD     	 pop {r4,r5,r6,pc}
 386              	 .cfi_endproc
 387              	.LFE166:
 389              	 .section .text.unlikely.xQueueReceiveFromISR.part.2,"ax",%progbits
 390              	 .align 2
 391              	 .thumb
 392              	 .thumb_func
 394              	xQueueReceiveFromISR.part.2:
 395              	.LFB169:
1434:../Dave/Generated/FREERTOS/queue.c **** {
 396              	 .loc 1 1434 0
 397              	 .cfi_startproc
 398              	 
 399              	 
 400              	.LVL40:
 401 0000 2DE9F843 	 push {r3,r4,r5,r6,r7,r8,r9,lr}
 402              	.LCFI10:
 403              	 .cfi_def_cfa_offset 32
 404              	 .cfi_offset 3,-32
 405              	 .cfi_offset 4,-28
 406              	 .cfi_offset 5,-24
 407              	 .cfi_offset 6,-20
 408              	 .cfi_offset 7,-16
 409              	 .cfi_offset 8,-12
 410              	 .cfi_offset 9,-8
 411              	 .cfi_offset 14,-4
1434:../Dave/Generated/FREERTOS/queue.c **** {
 412              	 .loc 1 1434 0
 413 0004 0546     	 mov r5,r0
 414 0006 8946     	 mov r9,r1
 415 0008 9046     	 mov r8,r2
1457:../Dave/Generated/FREERTOS/queue.c **** 
 416              	 .loc 1 1457 0
 417 000a FFF7FEFF 	 bl vPortValidateInterruptPriority
 418              	.LVL41:
 419              	.LBB126:
 420              	.LBB127:
 241:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 242:../Dave/Generated/FREERTOS/portmacro.h **** 		"	mov %0, %1												\n"	\
 243:../Dave/Generated/FREERTOS/portmacro.h **** 		"	msr basepri, %0											\n" \
 244:../Dave/Generated/FREERTOS/portmacro.h **** 		"	isb														\n" \
 245:../Dave/Generated/FREERTOS/portmacro.h **** 		"	dsb														\n" \
 246:../Dave/Generated/FREERTOS/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 247:../Dave/Generated/FREERTOS/portmacro.h **** 	);
 248:../Dave/Generated/FREERTOS/portmacro.h **** }
 249:../Dave/Generated/FREERTOS/portmacro.h **** 
 250:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 251:../Dave/Generated/FREERTOS/portmacro.h **** 
 252:../Dave/Generated/FREERTOS/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 253:../Dave/Generated/FREERTOS/portmacro.h **** {
 254:../Dave/Generated/FREERTOS/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 255:../Dave/Generated/FREERTOS/portmacro.h **** 
 256:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile
 421              	 .loc 2 256 0
 422              	
 423 000e EFF31187 	 mrs r7,basepri
 424 0012 4FF0FC03 	 mov r3,#252
 425 0016 83F31188 	 msr basepri,r3
 426 001a BFF36F8F 	 isb 
 427 001e BFF34F8F 	 dsb 
 428              	
 429              	
 430              	.LVL42:
 431              	 .thumb
 432              	.LBE127:
 433              	.LBE126:
 434              	.LBB128:
1461:../Dave/Generated/FREERTOS/queue.c **** 
 435              	 .loc 1 1461 0
 436 0022 AC6B     	 ldr r4,[r5,#56]
 437              	.LVL43:
1464:../Dave/Generated/FREERTOS/queue.c **** 		{
 438              	 .loc 1 1464 0
 439 0024 F4B1     	 cbz r4,.L40
 440              	.LBB129:
1466:../Dave/Generated/FREERTOS/queue.c **** 
 441              	 .loc 1 1466 0
 442 0026 95F84460 	 ldrb r6,[r5,#68]
1470:../Dave/Generated/FREERTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 443              	 .loc 1 1470 0
 444 002a 4946     	 mov r1,r9
 445 002c 2846     	 mov r0,r5
1466:../Dave/Generated/FREERTOS/queue.c **** 
 446              	 .loc 1 1466 0
 447 002e F6B2     	 uxtb r6,r6
 448              	.LVL44:
1470:../Dave/Generated/FREERTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 449              	 .loc 1 1470 0
 450 0030 FFF7FEFF 	 bl prvCopyDataFromQueue
 451              	.LVL45:
1471:../Dave/Generated/FREERTOS/queue.c **** 
 452              	 .loc 1 1471 0
 453 0034 013C     	 subs r4,r4,#1
 454              	.LVL46:
1477:../Dave/Generated/FREERTOS/queue.c **** 			{
 455              	 .loc 1 1477 0
 456 0036 FF2E     	 cmp r6,#255
1471:../Dave/Generated/FREERTOS/queue.c **** 
 457              	 .loc 1 1471 0
 458 0038 AC63     	 str r4,[r5,#56]
1477:../Dave/Generated/FREERTOS/queue.c **** 			{
 459              	 .loc 1 1477 0
 460 003a 0DD1     	 bne .L37
1479:../Dave/Generated/FREERTOS/queue.c **** 				{
 461              	 .loc 1 1479 0
 462 003c 2B69     	 ldr r3,[r5,#16]
 463 003e 7BB1     	 cbz r3,.L48
1481:../Dave/Generated/FREERTOS/queue.c **** 					{
 464              	 .loc 1 1481 0
 465 0040 05F11000 	 add r0,r5,#16
 466 0044 FFF7FEFF 	 bl xTaskRemoveFromEventList
 467              	.LVL47:
 468 0048 50B1     	 cbz r0,.L48
1485:../Dave/Generated/FREERTOS/queue.c **** 						{
 469              	 .loc 1 1485 0
 470 004a B8F1000F 	 cmp r8,#0
 471 004e 07D0     	 beq .L48
1487:../Dave/Generated/FREERTOS/queue.c **** 						}
 472              	 .loc 1 1487 0
 473 0050 0120     	 movs r0,#1
 474 0052 C8F80000 	 str r0,[r8]
 475 0056 06E0     	 b .L36
 476              	.L37:
1508:../Dave/Generated/FREERTOS/queue.c **** 			}
 477              	 .loc 1 1508 0
 478 0058 0136     	 adds r6,r6,#1
 479              	.LVL48:
 480 005a F6B2     	 uxtb r6,r6
 481              	.LVL49:
 482 005c 85F84460 	 strb r6,[r5,#68]
 483              	.L48:
1511:../Dave/Generated/FREERTOS/queue.c **** 		}
 484              	 .loc 1 1511 0
 485 0060 0120     	 movs r0,#1
 486 0062 00E0     	 b .L36
 487              	.LVL50:
 488              	.L40:
 489              	.LBE129:
1515:../Dave/Generated/FREERTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 490              	 .loc 1 1515 0
 491 0064 2046     	 mov r0,r4
 492              	.LVL51:
 493              	.L36:
 494              	.LBE128:
 495              	.LBB130:
 496              	.LBB131:
 257:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 258:../Dave/Generated/FREERTOS/portmacro.h **** 		"	mrs %0, basepri											\n" \
 259:../Dave/Generated/FREERTOS/portmacro.h **** 		"	mov %1, %2												\n"	\
 260:../Dave/Generated/FREERTOS/portmacro.h **** 		"	msr basepri, %1											\n" \
 261:../Dave/Generated/FREERTOS/portmacro.h **** 		"	isb														\n" \
 262:../Dave/Generated/FREERTOS/portmacro.h **** 		"	dsb														\n" \
 263:../Dave/Generated/FREERTOS/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 264:../Dave/Generated/FREERTOS/portmacro.h **** 	);
 265:../Dave/Generated/FREERTOS/portmacro.h **** 
 266:../Dave/Generated/FREERTOS/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 267:../Dave/Generated/FREERTOS/portmacro.h **** 	warnings. */
 268:../Dave/Generated/FREERTOS/portmacro.h **** 	return ulOriginalBASEPRI;
 269:../Dave/Generated/FREERTOS/portmacro.h **** }
 270:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 271:../Dave/Generated/FREERTOS/portmacro.h **** 
 272:../Dave/Generated/FREERTOS/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 273:../Dave/Generated/FREERTOS/portmacro.h **** {
 274:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile
 497              	 .loc 2 274 0
 498              	
 499 0066 87F31188 	 msr basepri,r7
 500              	
 501              	 .thumb
 502              	.LBE131:
 503              	.LBE130:
1522:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 504              	 .loc 1 1522 0
 505 006a BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 506              	 .cfi_endproc
 507              	.LFE169:
 509 006e 00BF     	 .section .text.prvUnlockQueue,"ax",%progbits
 510              	 .align 2
 511              	 .thumb
 512              	 .thumb_func
 514              	prvUnlockQueue:
 515              	.LFB152:
1795:../Dave/Generated/FREERTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 516              	 .loc 1 1795 0
 517              	 .cfi_startproc
 518              	 
 519              	 
 520              	.LVL52:
 521 0000 2DE9F043 	 push {r4,r5,r6,r7,r8,r9,lr}
 522              	.LCFI11:
 523              	 .cfi_def_cfa_offset 28
 524              	 .cfi_offset 4,-28
 525              	 .cfi_offset 5,-24
 526              	 .cfi_offset 6,-20
 527              	 .cfi_offset 7,-16
 528              	 .cfi_offset 8,-12
 529              	 .cfi_offset 9,-8
 530              	 .cfi_offset 14,-4
 531 0004 0446     	 mov r4,r0
 532 0006 83B0     	 sub sp,sp,#12
 533              	.LCFI12:
 534              	 .cfi_def_cfa_offset 40
1802:../Dave/Generated/FREERTOS/queue.c **** 	{
 535              	 .loc 1 1802 0
 536 0008 FFF7FEFF 	 bl vPortEnterCritical
 537              	.LVL53:
 538              	.LBB139:
1804:../Dave/Generated/FREERTOS/queue.c **** 
 539              	 .loc 1 1804 0
 540 000c 94F84570 	 ldrb r7,[r4,#69]
 541 0010 FFB2     	 uxtb r7,r7
 542              	.LVL54:
1807:../Dave/Generated/FREERTOS/queue.c **** 		{
 543              	 .loc 1 1807 0
 544 0012 7BB2     	 sxtb r3,r7
 545 0014 002B     	 cmp r3,#0
1834:../Dave/Generated/FREERTOS/queue.c **** 						{
 546              	 .loc 1 1834 0
 547 0016 C8BF     	 it gt
 548 0018 04F12408 	 addgt r8,r4,#36
1807:../Dave/Generated/FREERTOS/queue.c **** 		{
 549              	 .loc 1 1807 0
 550 001c 18DD     	 ble .L65
 551              	.L66:
1813:../Dave/Generated/FREERTOS/queue.c **** 				{
 552              	 .loc 1 1813 0
 553 001e A56C     	 ldr r5,[r4,#72]
 554 0020 002D     	 cmp r5,#0
 555 0022 3CD0     	 beq .L53
 556              	.LBB140:
 557              	.LBB141:
2511:../Dave/Generated/FREERTOS/queue.c **** 
 558              	 .loc 1 2511 0
 559 0024 AA6B     	 ldr r2,[r5,#56]
 560 0026 EB6B     	 ldr r3,[r5,#60]
 561 0028 0194     	 str r4,[sp,#4]
 562              	.LVL55:
 563 002a 9A42     	 cmp r2,r3
 564 002c 08D3     	 bcc .L54
 565              	.LVL56:
 566              	.LBB142:
 567              	.LBB143:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 568              	 .loc 2 240 0
 569              	
 570 002e 4FF0FC03 	 mov r3,#252
 571 0032 83F31188 	 msr basepri,r3
 572 0036 BFF36F8F 	 isb 
 573 003a BFF34F8F 	 dsb 
 574              	
 575              	
 576              	.LVL57:
 577              	 .thumb
 578              	.L55:
 579 003e FEE7     	 b .L55
 580              	.L54:
 581              	.LBE143:
 582              	.LBE142:
2513:../Dave/Generated/FREERTOS/queue.c **** 		{
 583              	 .loc 1 2513 0
 584 0040 AA6B     	 ldr r2,[r5,#56]
 585 0042 9342     	 cmp r3,r2
 586 0044 36D8     	 bhi .L88
 587              	.LVL58:
 588              	.L57:
 589 0046 7B1E     	 subs r3,r7,#1
 590 0048 DBB2     	 uxtb r3,r3
 591 004a DFB2     	 uxtb r7,r3
 592              	.LVL59:
 593              	.LBE141:
 594              	.LBE140:
1807:../Dave/Generated/FREERTOS/queue.c **** 		{
 595              	 .loc 1 1807 0
 596 004c 002B     	 cmp r3,#0
 597 004e E6D1     	 bne .L66
 598              	.L65:
1878:../Dave/Generated/FREERTOS/queue.c **** 	}
 599              	 .loc 1 1878 0
 600 0050 FF23     	 movs r3,#255
 601 0052 84F84530 	 strb r3,[r4,#69]
 602              	.LBE139:
1880:../Dave/Generated/FREERTOS/queue.c **** 
 603              	 .loc 1 1880 0
 604 0056 FFF7FEFF 	 bl vPortExitCritical
 605              	.LVL60:
1883:../Dave/Generated/FREERTOS/queue.c **** 	{
 606              	 .loc 1 1883 0
 607 005a FFF7FEFF 	 bl vPortEnterCritical
 608              	.LVL61:
 609              	.LBB150:
1885:../Dave/Generated/FREERTOS/queue.c **** 
 610              	 .loc 1 1885 0
 611 005e 94F84450 	 ldrb r5,[r4,#68]
 612 0062 EDB2     	 uxtb r5,r5
 613              	.LVL62:
1887:../Dave/Generated/FREERTOS/queue.c **** 		{
 614              	 .loc 1 1887 0
 615 0064 6BB2     	 sxtb r3,r5
 616 0066 002B     	 cmp r3,#0
 617 0068 11DD     	 ble .L52
1889:../Dave/Generated/FREERTOS/queue.c **** 			{
 618              	 .loc 1 1889 0
 619 006a 2369     	 ldr r3,[r4,#16]
 620 006c 7BB1     	 cbz r3,.L52
 621 006e 04F11006 	 add r6,r4,#16
 622 0072 01E0     	 b .L67
 623              	.L69:
 624 0074 2369     	 ldr r3,[r4,#16]
 625 0076 53B1     	 cbz r3,.L52
 626              	.L67:
1891:../Dave/Generated/FREERTOS/queue.c **** 				{
 627              	 .loc 1 1891 0
 628 0078 3046     	 mov r0,r6
 629 007a FFF7FEFF 	 bl xTaskRemoveFromEventList
 630              	.LVL63:
 631 007e 08B1     	 cbz r0,.L68
1893:../Dave/Generated/FREERTOS/queue.c **** 				}
 632              	 .loc 1 1893 0
 633 0080 FFF7FEFF 	 bl vTaskMissedYield
 634              	.LVL64:
 635              	.L68:
 636 0084 013D     	 subs r5,r5,#1
 637              	.LVL65:
 638 0086 EBB2     	 uxtb r3,r5
 639 0088 DDB2     	 uxtb r5,r3
 640              	.LVL66:
1887:../Dave/Generated/FREERTOS/queue.c **** 		{
 641              	 .loc 1 1887 0
 642 008a 002B     	 cmp r3,#0
 643 008c F2D1     	 bne .L69
 644              	.L52:
1908:../Dave/Generated/FREERTOS/queue.c **** 	}
 645              	 .loc 1 1908 0
 646 008e FF23     	 movs r3,#255
 647 0090 84F84430 	 strb r3,[r4,#68]
 648              	.LBE150:
1910:../Dave/Generated/FREERTOS/queue.c **** }
 649              	 .loc 1 1910 0
 650 0094 FFF7FEFF 	 bl vPortExitCritical
 651              	.LVL67:
1911:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 652              	 .loc 1 1911 0
 653 0098 03B0     	 add sp,sp,#12
 654              	.LCFI13:
 655              	 .cfi_remember_state
 656              	 .cfi_def_cfa_offset 28
 657              	 
 658 009a BDE8F083 	 pop {r4,r5,r6,r7,r8,r9,pc}
 659              	.LVL68:
 660              	.L53:
 661              	.LCFI14:
 662              	 .cfi_restore_state
 663              	.LBB151:
1832:../Dave/Generated/FREERTOS/queue.c **** 					{
 664              	 .loc 1 1832 0
 665 009e 636A     	 ldr r3,[r4,#36]
 666 00a0 002B     	 cmp r3,#0
 667 00a2 D5D0     	 beq .L65
1834:../Dave/Generated/FREERTOS/queue.c **** 						{
 668              	 .loc 1 1834 0
 669 00a4 4046     	 mov r0,r8
 670 00a6 FFF7FEFF 	 bl xTaskRemoveFromEventList
 671              	.LVL69:
 672 00aa 0028     	 cmp r0,#0
 673 00ac CBD0     	 beq .L57
 674              	.L62:
1820:../Dave/Generated/FREERTOS/queue.c **** 					}
 675              	 .loc 1 1820 0
 676 00ae FFF7FEFF 	 bl vTaskMissedYield
 677              	.LVL70:
 678 00b2 C8E7     	 b .L57
 679              	.LVL71:
 680              	.L88:
 681              	.LBB148:
 682              	.LBB146:
 683              	.LBB144:
2515:../Dave/Generated/FREERTOS/queue.c **** 
 684              	 .loc 1 2515 0
 685 00b4 95F84560 	 ldrb r6,[r5,#69]
2520:../Dave/Generated/FREERTOS/queue.c **** 
 686              	 .loc 1 2520 0
 687 00b8 2846     	 mov r0,r5
 688 00ba 01A9     	 add r1,sp,#4
 689 00bc 0022     	 movs r2,#0
 690 00be FFF7FEFF 	 bl prvCopyDataToQueue
 691              	.LVL72:
2515:../Dave/Generated/FREERTOS/queue.c **** 
 692              	 .loc 1 2515 0
 693 00c2 F6B2     	 uxtb r6,r6
 694              	.LVL73:
2522:../Dave/Generated/FREERTOS/queue.c **** 			{
 695              	 .loc 1 2522 0
 696 00c4 FF2E     	 cmp r6,#255
2520:../Dave/Generated/FREERTOS/queue.c **** 
 697              	 .loc 1 2520 0
 698 00c6 8146     	 mov r9,r0
 699              	.LVL74:
2522:../Dave/Generated/FREERTOS/queue.c **** 			{
 700              	 .loc 1 2522 0
 701 00c8 07D0     	 beq .L89
2543:../Dave/Generated/FREERTOS/queue.c **** 			}
 702              	 .loc 1 2543 0
 703 00ca 731C     	 adds r3,r6,#1
 704 00cc DBB2     	 uxtb r3,r3
 705 00ce 85F84530 	 strb r3,[r5,#69]
 706              	.LVL75:
 707              	.L60:
 708              	.LBE144:
 709              	.LBE146:
 710              	.LBE148:
1815:../Dave/Generated/FREERTOS/queue.c **** 					{
 711              	 .loc 1 1815 0
 712 00d2 B9F1000F 	 cmp r9,#0
 713 00d6 EAD1     	 bne .L62
 714 00d8 B5E7     	 b .L57
 715              	.LVL76:
 716              	.L89:
 717              	.LBB149:
 718              	.LBB147:
 719              	.LBB145:
2524:../Dave/Generated/FREERTOS/queue.c **** 				{
 720              	 .loc 1 2524 0
 721 00da 6B6A     	 ldr r3,[r5,#36]
 722 00dc 002B     	 cmp r3,#0
 723 00de F8D0     	 beq .L60
2526:../Dave/Generated/FREERTOS/queue.c **** 					{
 724              	 .loc 1 2526 0
 725 00e0 05F12400 	 add r0,r5,#36
 726              	.LVL77:
 727 00e4 FFF7FEFF 	 bl xTaskRemoveFromEventList
 728              	.LVL78:
 729 00e8 0028     	 cmp r0,#0
 730 00ea F2D0     	 beq .L60
 731 00ec DFE7     	 b .L62
 732              	.LBE145:
 733              	.LBE147:
 734              	.LBE149:
 735              	.LBE151:
 736              	 .cfi_endproc
 737              	.LFE152:
 739 00ee 00BF     	 .section .text.xQueueGenericReset,"ax",%progbits
 740              	 .align 2
 741              	 .global xQueueGenericReset
 742              	 .thumb
 743              	 .thumb_func
 745              	xQueueGenericReset:
 746              	.LFB128:
 280:../Dave/Generated/FREERTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 747              	 .loc 1 280 0
 748              	 .cfi_startproc
 749              	 
 750              	 
 751              	.LVL79:
 752 0000 38B5     	 push {r3,r4,r5,lr}
 753              	.LCFI15:
 754              	 .cfi_def_cfa_offset 16
 755              	 .cfi_offset 3,-16
 756              	 .cfi_offset 4,-12
 757              	 .cfi_offset 5,-8
 758              	 .cfi_offset 14,-4
 283:../Dave/Generated/FREERTOS/queue.c **** 
 759              	 .loc 1 283 0
 760 0002 E0B1     	 cbz r0,.L101
 761 0004 0446     	 mov r4,r0
 762 0006 0D46     	 mov r5,r1
 285:../Dave/Generated/FREERTOS/queue.c **** 	{
 763              	 .loc 1 285 0
 764 0008 FFF7FEFF 	 bl vPortEnterCritical
 765              	.LVL80:
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 766              	 .loc 1 287 0
 767 000c 226C     	 ldr r2,[r4,#64]
 768 000e E36B     	 ldr r3,[r4,#60]
 769 0010 2168     	 ldr r1,[r4]
 289:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 770              	 .loc 1 289 0
 771 0012 A160     	 str r1,[r4,#8]
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 772              	 .loc 1 287 0
 773 0014 03FB02F3 	 mul r3,r3,r2
 290:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 774              	 .loc 1 290 0
 775 0018 9A1A     	 subs r2,r3,r2
 776 001a 0A44     	 add r2,r2,r1
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 777              	 .loc 1 287 0
 778 001c 0B44     	 add r3,r3,r1
 288:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 779              	 .loc 1 288 0
 780 001e 0020     	 movs r0,#0
 291:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 781              	 .loc 1 291 0
 782 0020 FF21     	 movs r1,#255
 288:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 783              	 .loc 1 288 0
 784 0022 A063     	 str r0,[r4,#56]
 290:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 785              	 .loc 1 290 0
 786 0024 E260     	 str r2,[r4,#12]
 291:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 787              	 .loc 1 291 0
 788 0026 84F84410 	 strb r1,[r4,#68]
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 789              	 .loc 1 287 0
 790 002a 6360     	 str r3,[r4,#4]
 292:../Dave/Generated/FREERTOS/queue.c **** 
 791              	 .loc 1 292 0
 792 002c 84F84510 	 strb r1,[r4,#69]
 294:../Dave/Generated/FREERTOS/queue.c **** 		{
 793              	 .loc 1 294 0
 794 0030 05BB     	 cbnz r5,.L93
 301:../Dave/Generated/FREERTOS/queue.c **** 			{
 795              	 .loc 1 301 0
 796 0032 2369     	 ldr r3,[r4,#16]
 797 0034 63B9     	 cbnz r3,.L102
 798              	.L95:
 324:../Dave/Generated/FREERTOS/queue.c **** 
 799              	 .loc 1 324 0
 800 0036 FFF7FEFF 	 bl vPortExitCritical
 801              	.LVL81:
 329:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 802              	 .loc 1 329 0
 803 003a 0120     	 movs r0,#1
 804 003c 38BD     	 pop {r3,r4,r5,pc}
 805              	.LVL82:
 806              	.L101:
 807              	.LBB156:
 808              	.LBB157:
 809              	.LBB158:
 810              	.LBB159:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 811              	 .loc 2 240 0
 812              	
 813 003e 4FF0FC03 	 mov r3,#252
 814 0042 83F31188 	 msr basepri,r3
 815 0046 BFF36F8F 	 isb 
 816 004a BFF34F8F 	 dsb 
 817              	
 818              	
 819              	.LVL83:
 820              	 .thumb
 821              	.L92:
 822 004e FEE7     	 b .L92
 823              	.LVL84:
 824              	.L102:
 825              	.LBE159:
 826              	.LBE158:
 827              	.LBE157:
 828              	.LBE156:
 303:../Dave/Generated/FREERTOS/queue.c **** 				{
 829              	 .loc 1 303 0
 830 0050 04F11000 	 add r0,r4,#16
 831 0054 FFF7FEFF 	 bl xTaskRemoveFromEventList
 832              	.LVL85:
 833 0058 0028     	 cmp r0,#0
 834 005a ECD0     	 beq .L95
 305:../Dave/Generated/FREERTOS/queue.c **** 				}
 835              	 .loc 1 305 0
 836 005c 0B4B     	 ldr r3,.L103
 837 005e 4FF08052 	 mov r2,#268435456
 838 0062 1A60     	 str r2,[r3]
 839              	
 840 0064 BFF34F8F 	 dsb
 841              	
 842              	
 843 0068 BFF36F8F 	 isb
 844              	
 324:../Dave/Generated/FREERTOS/queue.c **** 
 845              	 .loc 1 324 0
 846              	 .thumb
 847 006c FFF7FEFF 	 bl vPortExitCritical
 848              	.LVL86:
 329:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 849              	 .loc 1 329 0
 850 0070 0120     	 movs r0,#1
 851 0072 38BD     	 pop {r3,r4,r5,pc}
 852              	.LVL87:
 853              	.L93:
 320:../Dave/Generated/FREERTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 854              	 .loc 1 320 0
 855 0074 04F11000 	 add r0,r4,#16
 856 0078 FFF7FEFF 	 bl vListInitialise
 857              	.LVL88:
 321:../Dave/Generated/FREERTOS/queue.c **** 		}
 858              	 .loc 1 321 0
 859 007c 04F12400 	 add r0,r4,#36
 860 0080 FFF7FEFF 	 bl vListInitialise
 861              	.LVL89:
 324:../Dave/Generated/FREERTOS/queue.c **** 
 862              	 .loc 1 324 0
 863 0084 FFF7FEFF 	 bl vPortExitCritical
 864              	.LVL90:
 329:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 865              	 .loc 1 329 0
 866 0088 0120     	 movs r0,#1
 867 008a 38BD     	 pop {r3,r4,r5,pc}
 868              	.LVL91:
 869              	.L104:
 870              	 .align 2
 871              	.L103:
 872 008c 04ED00E0 	 .word -536810236
 873              	 .cfi_endproc
 874              	.LFE128:
 876              	 .section .text.xQueueGenericCreate,"ax",%progbits
 877              	 .align 2
 878              	 .global xQueueGenericCreate
 879              	 .thumb
 880              	 .thumb_func
 882              	xQueueGenericCreate:
 883              	.LFB129:
 387:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t *pxNewQueue;
 884              	 .loc 1 387 0
 885              	 .cfi_startproc
 886              	 
 887              	 
 888              	.LVL92:
 889 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 890              	.LCFI16:
 891              	 .cfi_def_cfa_offset 24
 892              	 .cfi_offset 3,-24
 893              	 .cfi_offset 4,-20
 894              	 .cfi_offset 5,-16
 895              	 .cfi_offset 6,-12
 896              	 .cfi_offset 7,-8
 897              	 .cfi_offset 14,-4
 392:../Dave/Generated/FREERTOS/queue.c **** 
 898              	 .loc 1 392 0
 899 0002 0646     	 mov r6,r0
 900 0004 40B9     	 cbnz r0,.L106
 901              	.LBB174:
 902              	.LBB175:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 903              	 .loc 2 240 0
 904              	
 905 0006 4FF0FC03 	 mov r3,#252
 906 000a 83F31188 	 msr basepri,r3
 907 000e BFF36F8F 	 isb 
 908 0012 BFF34F8F 	 dsb 
 909              	
 910              	
 911              	.LVL93:
 912              	 .thumb
 913              	.L107:
 914              	.LBE175:
 915              	.LBE174:
 392:../Dave/Generated/FREERTOS/queue.c **** 
 916              	 .loc 1 392 0 discriminator 1
 917 0016 FEE7     	 b .L107
 918              	.L106:
 919 0018 0F46     	 mov r7,r1
 920 001a 1546     	 mov r5,r2
 394:../Dave/Generated/FREERTOS/queue.c **** 		{
 921              	 .loc 1 394 0
 922 001c 51B1     	 cbz r1,.L108
 923              	.LVL94:
 403:../Dave/Generated/FREERTOS/queue.c **** 		}
 924              	 .loc 1 403 0
 925 001e 01FB00F0 	 mul r0,r1,r0
 926              	.LVL95:
 406:../Dave/Generated/FREERTOS/queue.c **** 
 927              	 .loc 1 406 0
 928 0022 5430     	 adds r0,r0,#84
 929              	.LVL96:
 930 0024 FFF7FEFF 	 bl pvPortMalloc
 931              	.LVL97:
 408:../Dave/Generated/FREERTOS/queue.c **** 		{
 932              	 .loc 1 408 0
 933 0028 0446     	 mov r4,r0
 412:../Dave/Generated/FREERTOS/queue.c **** 
 934              	 .loc 1 412 0
 935 002a 00F15403 	 add r3,r0,#84
 408:../Dave/Generated/FREERTOS/queue.c **** 		{
 936              	 .loc 1 408 0
 937 002e 38B9     	 cbnz r0,.L111
 427:../Dave/Generated/FREERTOS/queue.c **** 
 938              	 .loc 1 427 0
 939 0030 2046     	 mov r0,r4
 940 0032 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 941              	.LVL98:
 942              	.L108:
 406:../Dave/Generated/FREERTOS/queue.c **** 
 943              	 .loc 1 406 0
 944 0034 5420     	 movs r0,#84
 945              	.LVL99:
 946 0036 FFF7FEFF 	 bl pvPortMalloc
 947              	.LVL100:
 408:../Dave/Generated/FREERTOS/queue.c **** 		{
 948              	 .loc 1 408 0
 949 003a 0446     	 mov r4,r0
 950 003c 0346     	 mov r3,r0
 951 003e 18B3     	 cbz r0,.L113
 952              	.LVL101:
 953              	.L111:
 954 0040 2360     	 str r3,[r4]
 955              	.LBB176:
 956              	.LBB177:
 454:../Dave/Generated/FREERTOS/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 957              	 .loc 1 454 0
 958 0042 E663     	 str r6,[r4,#60]
 455:../Dave/Generated/FREERTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 959              	 .loc 1 455 0
 960 0044 2764     	 str r7,[r4,#64]
 961              	.LVL102:
 962              	.LBB178:
 963              	.LBB179:
 285:../Dave/Generated/FREERTOS/queue.c **** 	{
 964              	 .loc 1 285 0
 965 0046 FFF7FEFF 	 bl vPortEnterCritical
 966              	.LVL103:
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 967              	 .loc 1 287 0
 968 004a 226C     	 ldr r2,[r4,#64]
 969 004c E36B     	 ldr r3,[r4,#60]
 970 004e 2168     	 ldr r1,[r4]
 289:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 971              	 .loc 1 289 0
 972 0050 A160     	 str r1,[r4,#8]
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 973              	 .loc 1 287 0
 974 0052 03FB02F3 	 mul r3,r3,r2
 290:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 975              	 .loc 1 290 0
 976 0056 9A1A     	 subs r2,r3,r2
 977 0058 0A44     	 add r2,r2,r1
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 978              	 .loc 1 287 0
 979 005a 0B44     	 add r3,r3,r1
 288:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 980              	 .loc 1 288 0
 981 005c 0026     	 movs r6,#0
 982              	.LVL104:
 291:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 983              	 .loc 1 291 0
 984 005e FF21     	 movs r1,#255
 290:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 985              	 .loc 1 290 0
 986 0060 E260     	 str r2,[r4,#12]
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 987              	 .loc 1 287 0
 988 0062 6360     	 str r3,[r4,#4]
 288:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 989              	 .loc 1 288 0
 990 0064 A663     	 str r6,[r4,#56]
 320:../Dave/Generated/FREERTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 991              	 .loc 1 320 0
 992 0066 04F11000 	 add r0,r4,#16
 291:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 993              	 .loc 1 291 0
 994 006a 84F84410 	 strb r1,[r4,#68]
 292:../Dave/Generated/FREERTOS/queue.c **** 
 995              	 .loc 1 292 0
 996 006e 84F84510 	 strb r1,[r4,#69]
 320:../Dave/Generated/FREERTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 997              	 .loc 1 320 0
 998 0072 FFF7FEFF 	 bl vListInitialise
 999              	.LVL105:
 321:../Dave/Generated/FREERTOS/queue.c **** 		}
 1000              	 .loc 1 321 0
 1001 0076 04F12400 	 add r0,r4,#36
 1002 007a FFF7FEFF 	 bl vListInitialise
 1003              	.LVL106:
 324:../Dave/Generated/FREERTOS/queue.c **** 
 1004              	 .loc 1 324 0
 1005 007e FFF7FEFF 	 bl vPortExitCritical
 1006              	.LVL107:
 1007              	.LBE179:
 1008              	.LBE178:
 466:../Dave/Generated/FREERTOS/queue.c **** 	}
 1009              	 .loc 1 466 0
 1010 0082 A664     	 str r6,[r4,#72]
 460:../Dave/Generated/FREERTOS/queue.c **** 	}
 1011              	 .loc 1 460 0
 1012 0084 84F85050 	 strb r5,[r4,#80]
 1013              	.LVL108:
 1014              	.L113:
 1015              	.LBE177:
 1016              	.LBE176:
 427:../Dave/Generated/FREERTOS/queue.c **** 
 1017              	 .loc 1 427 0
 1018 0088 2046     	 mov r0,r4
 1019 008a F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1020              	 .cfi_endproc
 1021              	.LFE129:
 1023              	 .section .text.xQueueCreateMutex,"ax",%progbits
 1024              	 .align 2
 1025              	 .global xQueueCreateMutex
 1026              	 .thumb
 1027              	 .thumb_func
 1029              	xQueueCreateMutex:
 1030              	.LFB132:
 507:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t *pxNewQueue;
 1031              	 .loc 1 507 0
 1032              	 .cfi_startproc
 1033              	 
 1034              	 
 1035              	.LVL109:
 1036 0000 2DE9F043 	 push {r4,r5,r6,r7,r8,r9,lr}
 1037              	.LCFI17:
 1038              	 .cfi_def_cfa_offset 28
 1039              	 .cfi_offset 4,-28
 1040              	 .cfi_offset 5,-24
 1041              	 .cfi_offset 6,-20
 1042              	 .cfi_offset 7,-16
 1043              	 .cfi_offset 8,-12
 1044              	 .cfi_offset 9,-8
 1045              	 .cfi_offset 14,-4
 1046 0004 0746     	 mov r7,r0
 1047              	.LVL110:
 1048 0006 85B0     	 sub sp,sp,#20
 1049              	.LCFI18:
 1050              	 .cfi_def_cfa_offset 48
 1051              	.LBB206:
 1052              	.LBB207:
 406:../Dave/Generated/FREERTOS/queue.c **** 
 1053              	 .loc 1 406 0
 1054 0008 5420     	 movs r0,#84
 1055              	.LVL111:
 1056 000a FFF7FEFF 	 bl pvPortMalloc
 1057              	.LVL112:
 408:../Dave/Generated/FREERTOS/queue.c **** 		{
 1058              	 .loc 1 408 0
 1059 000e 0446     	 mov r4,r0
 1060 0010 0028     	 cmp r0,#0
 1061 0012 00F09780 	 beq .L146
 1062              	.LVL113:
 1063              	.LBB208:
 1064              	.LBB209:
 455:../Dave/Generated/FREERTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 1065              	 .loc 1 455 0
 1066 0016 0026     	 movs r6,#0
 454:../Dave/Generated/FREERTOS/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 1067              	 .loc 1 454 0
 1068 0018 0123     	 movs r3,#1
 444:../Dave/Generated/FREERTOS/queue.c **** 	}
 1069              	 .loc 1 444 0
 1070 001a 2060     	 str r0,[r4]
 454:../Dave/Generated/FREERTOS/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 1071              	 .loc 1 454 0
 1072 001c C363     	 str r3,[r0,#60]
 455:../Dave/Generated/FREERTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 1073              	 .loc 1 455 0
 1074 001e 0664     	 str r6,[r0,#64]
 1075              	.LVL114:
 1076              	.LBB210:
 1077              	.LBB211:
 285:../Dave/Generated/FREERTOS/queue.c **** 	{
 1078              	 .loc 1 285 0
 1079 0020 FFF7FEFF 	 bl vPortEnterCritical
 1080              	.LVL115:
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 1081              	 .loc 1 287 0
 1082 0024 226C     	 ldr r2,[r4,#64]
 1083 0026 E36B     	 ldr r3,[r4,#60]
 1084 0028 2168     	 ldr r1,[r4]
 288:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 1085              	 .loc 1 288 0
 1086 002a A663     	 str r6,[r4,#56]
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 1087              	 .loc 1 287 0
 1088 002c 03FB02F3 	 mul r3,r3,r2
 290:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 1089              	 .loc 1 290 0
 1090 0030 9A1A     	 subs r2,r3,r2
 1091 0032 0A44     	 add r2,r2,r1
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 1092              	 .loc 1 287 0
 1093 0034 0B44     	 add r3,r3,r1
 291:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 1094              	 .loc 1 291 0
 1095 0036 FF25     	 movs r5,#255
 320:../Dave/Generated/FREERTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 1096              	 .loc 1 320 0
 1097 0038 04F11008 	 add r8,r4,#16
 290:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 1098              	 .loc 1 290 0
 1099 003c E260     	 str r2,[r4,#12]
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 1100              	 .loc 1 287 0
 1101 003e 6360     	 str r3,[r4,#4]
 289:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 1102              	 .loc 1 289 0
 1103 0040 A160     	 str r1,[r4,#8]
 291:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 1104              	 .loc 1 291 0
 1105 0042 84F84450 	 strb r5,[r4,#68]
 320:../Dave/Generated/FREERTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 1106              	 .loc 1 320 0
 1107 0046 4046     	 mov r0,r8
 292:../Dave/Generated/FREERTOS/queue.c **** 
 1108              	 .loc 1 292 0
 1109 0048 84F84550 	 strb r5,[r4,#69]
 321:../Dave/Generated/FREERTOS/queue.c **** 		}
 1110              	 .loc 1 321 0
 1111 004c 04F12409 	 add r9,r4,#36
 320:../Dave/Generated/FREERTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 1112              	 .loc 1 320 0
 1113 0050 FFF7FEFF 	 bl vListInitialise
 1114              	.LVL116:
 321:../Dave/Generated/FREERTOS/queue.c **** 		}
 1115              	 .loc 1 321 0
 1116 0054 4846     	 mov r0,r9
 1117 0056 FFF7FEFF 	 bl vListInitialise
 1118              	.LVL117:
 324:../Dave/Generated/FREERTOS/queue.c **** 
 1119              	 .loc 1 324 0
 1120 005a FFF7FEFF 	 bl vPortExitCritical
 1121              	.LVL118:
 1122              	.LBE211:
 1123              	.LBE210:
 1124              	.LBE209:
 1125              	.LBE208:
 1126              	.LBE207:
 1127              	.LBE206:
 1128              	.LBB218:
 1129              	.LBB219:
 1130              	.LBB220:
 1131              	.LBB221:
 730:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1132              	 .loc 1 730 0
 1133 005e 256C     	 ldr r5,[r4,#64]
 1134              	.LBE221:
 1135              	.LBE220:
 485:../Dave/Generated/FREERTOS/queue.c **** 
 1136              	 .loc 1 485 0
 1137 0060 2660     	 str r6,[r4]
 1138              	.LBE219:
 1139              	.LBE218:
 1140              	.LBB240:
 1141              	.LBB216:
 1142              	.LBB214:
 1143              	.LBB212:
 466:../Dave/Generated/FREERTOS/queue.c **** 	}
 1144              	 .loc 1 466 0
 1145 0062 A664     	 str r6,[r4,#72]
 1146              	.LVL119:
 1147              	.LBE212:
 1148              	.LBE214:
 1149              	.LBE216:
 1150              	.LBE240:
 1151              	.LBB241:
 1152              	.LBB236:
 484:../Dave/Generated/FREERTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1153              	 .loc 1 484 0
 1154 0064 6660     	 str r6,[r4,#4]
 488:../Dave/Generated/FREERTOS/queue.c **** 
 1155              	 .loc 1 488 0
 1156 0066 E660     	 str r6,[r4,#12]
 1157              	.LVL120:
 1158 0068 0196     	 str r6,[sp,#4]
 1159              	.LVL121:
 1160              	.LBE236:
 1161              	.LBE241:
 1162              	.LBB242:
 1163              	.LBB217:
 1164              	.LBB215:
 1165              	.LBB213:
 460:../Dave/Generated/FREERTOS/queue.c **** 	}
 1166              	 .loc 1 460 0
 1167 006a 84F85070 	 strb r7,[r4,#80]
 1168              	.LBE213:
 1169              	.LBE215:
 1170              	.LBE217:
 1171              	.LBE242:
 1172              	.LBB243:
 1173              	.LBB237:
 1174              	.LBB233:
 1175              	.LBB230:
 730:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1176              	 .loc 1 730 0
 1177 006e 002D     	 cmp r5,#0
 1178 0070 6CD1     	 bne .L167
 734:../Dave/Generated/FREERTOS/queue.c **** 	}
 1179              	 .loc 1 734 0
 1180 0072 FFF7FEFF 	 bl xTaskGetSchedulerState
 1181              	.LVL122:
 1182 0076 10B9     	 cbnz r0,.L121
 1183 0078 019D     	 ldr r5,[sp,#4]
 1184 007a 002D     	 cmp r5,#0
 1185 007c 78D1     	 bne .L168
 1186              	.L121:
 898:../Dave/Generated/FREERTOS/queue.c **** 				}
 1187              	 .loc 1 898 0
 1188 007e 464F     	 ldr r7,.L171
 1189              	.LVL123:
 874:../Dave/Generated/FREERTOS/queue.c **** 
 1190              	 .loc 1 874 0
 1191 0080 0026     	 movs r6,#0
 1192              	.LVL124:
 1193 0082 07E0     	 b .L158
 1194              	.LVL125:
 1195              	.L159:
 1196              	.LBB222:
 1197              	.LBB223:
1968:../Dave/Generated/FREERTOS/queue.c **** 
 1198              	 .loc 1 1968 0
 1199 0084 FFF7FEFF 	 bl vPortExitCritical
 1200              	.LVL126:
 1201              	.LBE223:
 1202              	.LBE222:
 904:../Dave/Generated/FREERTOS/queue.c **** 				( void ) xTaskResumeAll();
 1203              	 .loc 1 904 0
 1204 0088 2046     	 mov r0,r4
 1205 008a FFF7FEFF 	 bl prvUnlockQueue
 1206              	.LVL127:
 905:../Dave/Generated/FREERTOS/queue.c **** 			}
 1207              	 .loc 1 905 0
 1208 008e FFF7FEFF 	 bl xTaskResumeAll
 1209              	.LVL128:
 1210              	.L137:
 1211 0092 0125     	 movs r5,#1
 1212              	.LVL129:
 1213              	.L158:
 744:../Dave/Generated/FREERTOS/queue.c **** 		{
 1214              	 .loc 1 744 0
 1215 0094 FFF7FEFF 	 bl vPortEnterCritical
 1216              	.LVL130:
 750:../Dave/Generated/FREERTOS/queue.c **** 			{
 1217              	 .loc 1 750 0
 1218 0098 A26B     	 ldr r2,[r4,#56]
 1219 009a E36B     	 ldr r3,[r4,#60]
 1220 009c 9A42     	 cmp r2,r3
 1221 009e 3BD3     	 bcc .L169
 843:../Dave/Generated/FREERTOS/queue.c **** 				{
 1222              	 .loc 1 843 0
 1223 00a0 019B     	 ldr r3,[sp,#4]
 1224 00a2 002B     	 cmp r3,#0
 1225 00a4 4CD0     	 beq .L127
 854:../Dave/Generated/FREERTOS/queue.c **** 				{
 1226              	 .loc 1 854 0
 1227 00a6 15B9     	 cbnz r5,.L131
 858:../Dave/Generated/FREERTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 1228              	 .loc 1 858 0
 1229 00a8 02A8     	 add r0,sp,#8
 1230 00aa FFF7FEFF 	 bl vTaskSetTimeOutState
 1231              	.LVL131:
 1232              	.L131:
 868:../Dave/Generated/FREERTOS/queue.c **** 
 1233              	 .loc 1 868 0
 1234 00ae FFF7FEFF 	 bl vPortExitCritical
 1235              	.LVL132:
 873:../Dave/Generated/FREERTOS/queue.c **** 		prvLockQueue( pxQueue );
 1236              	 .loc 1 873 0
 1237 00b2 FFF7FEFF 	 bl vTaskSuspendAll
 1238              	.LVL133:
 874:../Dave/Generated/FREERTOS/queue.c **** 
 1239              	 .loc 1 874 0
 1240 00b6 FFF7FEFF 	 bl vPortEnterCritical
 1241              	.LVL134:
 1242 00ba 94F84430 	 ldrb r3,[r4,#68]
 1243 00be FF2B     	 cmp r3,#255
 1244 00c0 08BF     	 it eq
 1245 00c2 84F84460 	 strbeq r6,[r4,#68]
 1246 00c6 94F84530 	 ldrb r3,[r4,#69]
 1247 00ca FF2B     	 cmp r3,#255
 1248 00cc 08BF     	 it eq
 1249 00ce 84F84560 	 strbeq r6,[r4,#69]
 1250 00d2 FFF7FEFF 	 bl vPortExitCritical
 1251              	.LVL135:
 877:../Dave/Generated/FREERTOS/queue.c **** 		{
 1252              	 .loc 1 877 0
 1253 00d6 02A8     	 add r0,sp,#8
 1254 00d8 01A9     	 add r1,sp,#4
 1255              	.LVL136:
 1256 00da FFF7FEFF 	 bl xTaskCheckForTimeOut
 1257              	.LVL137:
 1258 00de 0028     	 cmp r0,#0
 1259 00e0 3DD1     	 bne .L134
 1260              	.LVL138:
 1261              	.LBB225:
 1262              	.LBB224:
1957:../Dave/Generated/FREERTOS/queue.c **** 	{
 1263              	 .loc 1 1957 0
 1264 00e2 FFF7FEFF 	 bl vPortEnterCritical
 1265              	.LVL139:
1959:../Dave/Generated/FREERTOS/queue.c **** 		{
 1266              	 .loc 1 1959 0
 1267 00e6 A26B     	 ldr r2,[r4,#56]
 1268 00e8 E36B     	 ldr r3,[r4,#60]
 1269 00ea 9A42     	 cmp r2,r3
 1270 00ec CAD1     	 bne .L159
 1271              	.LVL140:
1968:../Dave/Generated/FREERTOS/queue.c **** 
 1272              	 .loc 1 1968 0
 1273 00ee FFF7FEFF 	 bl vPortExitCritical
 1274              	.LVL141:
 1275              	.LBE224:
 1276              	.LBE225:
 882:../Dave/Generated/FREERTOS/queue.c **** 
 1277              	 .loc 1 882 0
 1278 00f2 4046     	 mov r0,r8
 1279 00f4 0199     	 ldr r1,[sp,#4]
 1280 00f6 FFF7FEFF 	 bl vTaskPlaceOnEventList
 1281              	.LVL142:
 889:../Dave/Generated/FREERTOS/queue.c **** 
 1282              	 .loc 1 889 0
 1283 00fa 2046     	 mov r0,r4
 1284 00fc FFF7FEFF 	 bl prvUnlockQueue
 1285              	.LVL143:
 896:../Dave/Generated/FREERTOS/queue.c **** 				{
 1286              	 .loc 1 896 0
 1287 0100 FFF7FEFF 	 bl xTaskResumeAll
 1288              	.LVL144:
 1289 0104 0028     	 cmp r0,#0
 1290 0106 C4D1     	 bne .L137
 898:../Dave/Generated/FREERTOS/queue.c **** 				}
 1291              	 .loc 1 898 0
 1292 0108 4FF08053 	 mov r3,#268435456
 1293 010c 3B60     	 str r3,[r7]
 1294              	
 1295 010e BFF34F8F 	 dsb
 1296              	
 1297              	
 1298 0112 BFF36F8F 	 isb
 1299              	
 1300              	 .thumb
 1301 0116 BCE7     	 b .L137
 1302              	.LVL145:
 1303              	.L169:
 753:../Dave/Generated/FREERTOS/queue.c **** 
 1304              	 .loc 1 753 0
 1305 0118 0021     	 movs r1,#0
 1306 011a 0A46     	 mov r2,r1
 1307 011c 2046     	 mov r0,r4
 1308 011e FFF7FEFF 	 bl prvCopyDataToQueue
 1309              	.LVL146:
 757:../Dave/Generated/FREERTOS/queue.c **** 					{
 1310              	 .loc 1 757 0
 1311 0122 A36C     	 ldr r3,[r4,#72]
 1312 0124 6BB3     	 cbz r3,.L125
 759:../Dave/Generated/FREERTOS/queue.c **** 						{
 1313              	 .loc 1 759 0
 1314 0126 2046     	 mov r0,r4
 1315              	.LVL147:
 1316 0128 0021     	 movs r1,#0
 1317 012a FFF7FEFF 	 bl prvNotifyQueueSetContainer
 1318              	.LVL148:
 1319 012e 38B1     	 cbz r0,.L127
 1320              	.L162:
 796:../Dave/Generated/FREERTOS/queue.c **** 						}
 1321              	 .loc 1 796 0
 1322 0130 194B     	 ldr r3,.L171
 1323 0132 4FF08052 	 mov r2,#268435456
 1324 0136 1A60     	 str r2,[r3]
 1325              	
 1326 0138 BFF34F8F 	 dsb
 1327              	
 1328              	
 1329 013c BFF36F8F 	 isb
 1330              	
 1331              	 .thumb
 1332              	.L127:
 838:../Dave/Generated/FREERTOS/queue.c **** 				return pdPASS;
 1333              	 .loc 1 838 0
 1334 0140 FFF7FEFF 	 bl vPortExitCritical
 1335              	.LVL149:
 1336              	.L146:
 1337              	.LBE230:
 1338              	.LBE233:
 1339              	.LBE237:
 1340              	.LBE243:
 515:../Dave/Generated/FREERTOS/queue.c **** 
 1341              	 .loc 1 515 0
 1342 0144 2046     	 mov r0,r4
 1343 0146 05B0     	 add sp,sp,#20
 1344              	.LCFI19:
 1345              	 .cfi_remember_state
 1346              	 .cfi_def_cfa_offset 28
 1347              	 
 1348 0148 BDE8F083 	 pop {r4,r5,r6,r7,r8,r9,pc}
 1349              	.LVL150:
 1350              	.L167:
 1351              	.LCFI20:
 1352              	 .cfi_restore_state
 1353              	.LBB244:
 1354              	.LBB238:
 1355              	.LBB234:
 1356              	.LBB231:
 1357              	.LBB226:
 1358              	.LBB227:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1359              	 .loc 2 240 0
 1360              	
 1361 014c 4FF0FC03 	 mov r3,#252
 1362 0150 83F31188 	 msr basepri,r3
 1363 0154 BFF36F8F 	 isb 
 1364 0158 BFF34F8F 	 dsb 
 1365              	
 1366              	
 1367              	.LVL151:
 1368              	 .thumb
 1369              	.L120:
 1370 015c FEE7     	 b .L120
 1371              	.LVL152:
 1372              	.L134:
 1373              	.LBE227:
 1374              	.LBE226:
 911:../Dave/Generated/FREERTOS/queue.c **** 			( void ) xTaskResumeAll();
 1375              	 .loc 1 911 0
 1376 015e 2046     	 mov r0,r4
 1377 0160 FFF7FEFF 	 bl prvUnlockQueue
 1378              	.LVL153:
 912:../Dave/Generated/FREERTOS/queue.c **** 
 1379              	 .loc 1 912 0
 1380 0164 FFF7FEFF 	 bl xTaskResumeAll
 1381              	.LVL154:
 1382              	.LBE231:
 1383              	.LBE234:
 1384              	.LBE238:
 1385              	.LBE244:
 515:../Dave/Generated/FREERTOS/queue.c **** 
 1386              	 .loc 1 515 0
 1387 0168 2046     	 mov r0,r4
 1388 016a 05B0     	 add sp,sp,#20
 1389              	.LCFI21:
 1390              	 .cfi_remember_state
 1391              	 .cfi_def_cfa_offset 28
 1392              	 
 1393 016c BDE8F083 	 pop {r4,r5,r6,r7,r8,r9,pc}
 1394              	.LVL155:
 1395              	.L168:
 1396              	.LCFI22:
 1397              	 .cfi_restore_state
 1398              	.LBB245:
 1399              	.LBB239:
 1400              	.LBB235:
 1401              	.LBB232:
 1402              	.LBB228:
 1403              	.LBB229:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1404              	 .loc 2 240 0
 1405              	
 1406 0170 4FF0FC03 	 mov r3,#252
 1407 0174 83F31188 	 msr basepri,r3
 1408 0178 BFF36F8F 	 isb 
 1409 017c BFF34F8F 	 dsb 
 1410              	
 1411              	
 1412              	.LVL156:
 1413              	 .thumb
 1414              	.L123:
 1415 0180 FEE7     	 b .L123
 1416              	.LVL157:
 1417              	.L125:
 1418              	.LBE229:
 1419              	.LBE228:
 775:../Dave/Generated/FREERTOS/queue.c **** 						{
 1420              	 .loc 1 775 0
 1421 0182 636A     	 ldr r3,[r4,#36]
 1422 0184 13B9     	 cbnz r3,.L170
 790:../Dave/Generated/FREERTOS/queue.c **** 						{
 1423              	 .loc 1 790 0
 1424 0186 0028     	 cmp r0,#0
 1425 0188 D2D1     	 bne .L162
 1426 018a D9E7     	 b .L127
 1427              	.L170:
 777:../Dave/Generated/FREERTOS/queue.c **** 							{
 1428              	 .loc 1 777 0
 1429 018c 4846     	 mov r0,r9
 1430              	.LVL158:
 1431 018e FFF7FEFF 	 bl xTaskRemoveFromEventList
 1432              	.LVL159:
 1433 0192 0028     	 cmp r0,#0
 1434 0194 CCD1     	 bne .L162
 1435 0196 D3E7     	 b .L127
 1436              	.L172:
 1437              	 .align 2
 1438              	.L171:
 1439 0198 04ED00E0 	 .word -536810236
 1440              	.LBE232:
 1441              	.LBE235:
 1442              	.LBE239:
 1443              	.LBE245:
 1444              	 .cfi_endproc
 1445              	.LFE132:
 1447              	 .section .text.xQueueGetMutexHolder,"ax",%progbits
 1448              	 .align 2
 1449              	 .global xQueueGetMutexHolder
 1450              	 .thumb
 1451              	 .thumb_func
 1453              	xQueueGetMutexHolder:
 1454              	.LFB133:
 543:../Dave/Generated/FREERTOS/queue.c **** 	void *pxReturn;
 1455              	 .loc 1 543 0
 1456              	 .cfi_startproc
 1457              	 
 1458              	 
 1459              	.LVL160:
 1460 0000 10B5     	 push {r4,lr}
 1461              	.LCFI23:
 1462              	 .cfi_def_cfa_offset 8
 1463              	 .cfi_offset 4,-8
 1464              	 .cfi_offset 14,-4
 543:../Dave/Generated/FREERTOS/queue.c **** 	void *pxReturn;
 1465              	 .loc 1 543 0
 1466 0002 0446     	 mov r4,r0
 551:../Dave/Generated/FREERTOS/queue.c **** 		{
 1467              	 .loc 1 551 0
 1468 0004 FFF7FEFF 	 bl vPortEnterCritical
 1469              	.LVL161:
 553:../Dave/Generated/FREERTOS/queue.c **** 			{
 1470              	 .loc 1 553 0
 1471 0008 2368     	 ldr r3,[r4]
 1472 000a 23B9     	 cbnz r3,.L175
 555:../Dave/Generated/FREERTOS/queue.c **** 			}
 1473              	 .loc 1 555 0
 1474 000c 6468     	 ldr r4,[r4,#4]
 1475              	.LVL162:
 562:../Dave/Generated/FREERTOS/queue.c **** 
 1476              	 .loc 1 562 0
 1477 000e FFF7FEFF 	 bl vPortExitCritical
 1478              	.LVL163:
 565:../Dave/Generated/FREERTOS/queue.c **** 
 1479              	 .loc 1 565 0
 1480 0012 2046     	 mov r0,r4
 1481 0014 10BD     	 pop {r4,pc}
 1482              	.LVL164:
 1483              	.L175:
 559:../Dave/Generated/FREERTOS/queue.c **** 			}
 1484              	 .loc 1 559 0
 1485 0016 0024     	 movs r4,#0
 1486              	.LVL165:
 562:../Dave/Generated/FREERTOS/queue.c **** 
 1487              	 .loc 1 562 0
 1488 0018 FFF7FEFF 	 bl vPortExitCritical
 1489              	.LVL166:
 565:../Dave/Generated/FREERTOS/queue.c **** 
 1490              	 .loc 1 565 0
 1491 001c 2046     	 mov r0,r4
 1492 001e 10BD     	 pop {r4,pc}
 1493              	 .cfi_endproc
 1494              	.LFE133:
 1496              	 .section .text.xQueueCreateCountingSemaphore,"ax",%progbits
 1497              	 .align 2
 1498              	 .global xQueueCreateCountingSemaphore
 1499              	 .thumb
 1500              	 .thumb_func
 1502              	xQueueCreateCountingSemaphore:
 1503              	.LFB136:
 698:../Dave/Generated/FREERTOS/queue.c **** 	QueueHandle_t xHandle;
 1504              	 .loc 1 698 0
 1505              	 .cfi_startproc
 1506              	 
 1507              	 
 1508              	.LVL167:
 701:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 1509              	 .loc 1 701 0
 1510 0000 40B9     	 cbnz r0,.L178
 1511              	.LBB246:
 1512              	.LBB247:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1513              	 .loc 2 240 0
 1514              	
 1515 0002 4FF0FC03 	 mov r3,#252
 1516 0006 83F31188 	 msr basepri,r3
 1517 000a BFF36F8F 	 isb 
 1518 000e BFF34F8F 	 dsb 
 1519              	
 1520              	
 1521              	.LVL168:
 1522              	 .thumb
 1523              	.L179:
 1524              	.LBE247:
 1525              	.LBE246:
 701:../Dave/Generated/FREERTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 1526              	 .loc 1 701 0 discriminator 1
 1527 0012 FEE7     	 b .L179
 1528              	.L178:
 702:../Dave/Generated/FREERTOS/queue.c **** 
 1529              	 .loc 1 702 0
 1530 0014 8842     	 cmp r0,r1
 1531 0016 08D2     	 bcs .L180
 1532              	.LBB248:
 1533              	.LBB249:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1534              	 .loc 2 240 0
 1535              	
 1536 0018 4FF0FC03 	 mov r3,#252
 1537 001c 83F31188 	 msr basepri,r3
 1538 0020 BFF36F8F 	 isb 
 1539 0024 BFF34F8F 	 dsb 
 1540              	
 1541              	
 1542              	.LVL169:
 1543              	 .thumb
 1544              	.L181:
 1545              	.LBE249:
 1546              	.LBE248:
 702:../Dave/Generated/FREERTOS/queue.c **** 
 1547              	 .loc 1 702 0 discriminator 2
 1548 0028 FEE7     	 b .L181
 1549              	.L180:
 698:../Dave/Generated/FREERTOS/queue.c **** 	QueueHandle_t xHandle;
 1550              	 .loc 1 698 0
 1551 002a 10B5     	 push {r4,lr}
 1552              	.LCFI24:
 1553              	 .cfi_def_cfa_offset 8
 1554              	 .cfi_offset 4,-8
 1555              	 .cfi_offset 14,-4
 704:../Dave/Generated/FREERTOS/queue.c **** 
 1556              	 .loc 1 704 0
 1557 002c 0222     	 movs r2,#2
 1558 002e 0C46     	 mov r4,r1
 1559 0030 0021     	 movs r1,#0
 1560              	.LVL170:
 1561 0032 FFF7FEFF 	 bl xQueueGenericCreate
 1562              	.LVL171:
 706:../Dave/Generated/FREERTOS/queue.c **** 		{
 1563              	 .loc 1 706 0
 1564 0036 00B1     	 cbz r0,.L182
 708:../Dave/Generated/FREERTOS/queue.c **** 
 1565              	 .loc 1 708 0
 1566 0038 8463     	 str r4,[r0,#56]
 1567              	.L182:
 718:../Dave/Generated/FREERTOS/queue.c **** 
 1568              	 .loc 1 718 0
 1569 003a 10BD     	 pop {r4,pc}
 1570              	 .cfi_endproc
 1571              	.LFE136:
 1573              	 .section .text.xQueueGenericSend,"ax",%progbits
 1574              	 .align 2
 1575              	 .global xQueueGenericSend
 1576              	 .thumb
 1577              	 .thumb_func
 1579              	xQueueGenericSend:
 1580              	.LFB137:
 724:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 1581              	 .loc 1 724 0
 1582              	 .cfi_startproc
 1583              	 
 1584              	 
 1585              	.LVL172:
 1586 0000 2DE9F047 	 push {r4,r5,r6,r7,r8,r9,r10,lr}
 1587              	.LCFI25:
 1588              	 .cfi_def_cfa_offset 32
 1589              	 .cfi_offset 4,-32
 1590              	 .cfi_offset 5,-28
 1591              	 .cfi_offset 6,-24
 1592              	 .cfi_offset 7,-20
 1593              	 .cfi_offset 8,-16
 1594              	 .cfi_offset 9,-12
 1595              	 .cfi_offset 10,-8
 1596              	 .cfi_offset 14,-4
 1597 0004 84B0     	 sub sp,sp,#16
 1598              	.LCFI26:
 1599              	 .cfi_def_cfa_offset 48
 724:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 1600              	 .loc 1 724 0
 1601 0006 0192     	 str r2,[sp,#4]
 729:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1602              	 .loc 1 729 0
 1603 0008 0028     	 cmp r0,#0
 1604 000a 00F0BE80 	 beq .L248
 730:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1605              	 .loc 1 730 0
 1606 000e 0029     	 cmp r1,#0
 1607 0010 00F0AE80 	 beq .L249
 1608              	.LVL173:
 1609              	.L190:
 731:../Dave/Generated/FREERTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1610              	 .loc 1 731 0
 1611 0014 022B     	 cmp r3,#2
 1612 0016 00F09E80 	 beq .L250
 1613              	.L193:
 1614 001a 0446     	 mov r4,r0
 1615 001c 1E46     	 mov r6,r3
 1616 001e 8846     	 mov r8,r1
 734:../Dave/Generated/FREERTOS/queue.c **** 	}
 1617              	 .loc 1 734 0
 1618 0020 FFF7FEFF 	 bl xTaskGetSchedulerState
 1619              	.LVL174:
 1620 0024 50B9     	 cbnz r0,.L219
 734:../Dave/Generated/FREERTOS/queue.c **** 	}
 1621              	 .loc 1 734 0 is_stmt 0 discriminator 2
 1622 0026 019F     	 ldr r7,[sp,#4]
 1623 0028 4FB1     	 cbz r7,.L196
 1624              	.LBB250:
 1625              	.LBB251:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1626              	 .loc 2 240 0 is_stmt 1
 1627              	
 1628 002a 4FF0FC03 	 mov r3,#252
 1629 002e 83F31188 	 msr basepri,r3
 1630 0032 BFF36F8F 	 isb 
 1631 0036 BFF34F8F 	 dsb 
 1632              	
 1633              	
 1634              	.LVL175:
 1635              	 .thumb
 1636              	.L198:
 1637              	.LBE251:
 1638              	.LBE250:
 734:../Dave/Generated/FREERTOS/queue.c **** 	}
 1639              	 .loc 1 734 0 discriminator 4
 1640 003a FEE7     	 b .L198
 1641              	.L219:
 1642 003c 0027     	 movs r7,#0
 1643              	.L196:
 744:../Dave/Generated/FREERTOS/queue.c **** 		{
 1644              	 .loc 1 744 0
 1645 003e FFF7FEFF 	 bl vPortEnterCritical
 1646              	.LVL176:
 750:../Dave/Generated/FREERTOS/queue.c **** 			{
 1647              	 .loc 1 750 0
 1648 0042 A26B     	 ldr r2,[r4,#56]
 1649 0044 E36B     	 ldr r3,[r4,#60]
 898:../Dave/Generated/FREERTOS/queue.c **** 				}
 1650              	 .loc 1 898 0
 1651 0046 DFF854A1 	 ldr r10,.L256
 750:../Dave/Generated/FREERTOS/queue.c **** 			{
 1652              	 .loc 1 750 0
 1653 004a 9A42     	 cmp r2,r3
 874:../Dave/Generated/FREERTOS/queue.c **** 
 1654              	 .loc 1 874 0
 1655 004c 4FF00009 	 mov r9,#0
 1656              	.LVL177:
 750:../Dave/Generated/FREERTOS/queue.c **** 			{
 1657              	 .loc 1 750 0
 1658 0050 4AD2     	 bcs .L251
 1659              	.L199:
 753:../Dave/Generated/FREERTOS/queue.c **** 
 1660              	 .loc 1 753 0
 1661 0052 4146     	 mov r1,r8
 1662 0054 2046     	 mov r0,r4
 1663 0056 3246     	 mov r2,r6
 1664 0058 FFF7FEFF 	 bl prvCopyDataToQueue
 1665              	.LVL178:
 757:../Dave/Generated/FREERTOS/queue.c **** 					{
 1666              	 .loc 1 757 0
 1667 005c A36C     	 ldr r3,[r4,#72]
 1668 005e 002B     	 cmp r3,#0
 1669 0060 66D0     	 beq .L201
 759:../Dave/Generated/FREERTOS/queue.c **** 						{
 1670              	 .loc 1 759 0
 1671 0062 2046     	 mov r0,r4
 1672              	.LVL179:
 1673 0064 3146     	 mov r1,r6
 1674 0066 FFF7FEFF 	 bl prvNotifyQueueSetContainer
 1675              	.LVL180:
 1676 006a 38B1     	 cbz r0,.L203
 1677              	.L242:
 796:../Dave/Generated/FREERTOS/queue.c **** 						}
 1678              	 .loc 1 796 0
 1679 006c 4B4B     	 ldr r3,.L256
 1680 006e 4FF08052 	 mov r2,#268435456
 1681 0072 1A60     	 str r2,[r3]
 1682              	
 1683 0074 BFF34F8F 	 dsb
 1684              	
 1685              	
 1686 0078 BFF36F8F 	 isb
 1687              	
 1688              	 .thumb
 1689              	.L203:
 838:../Dave/Generated/FREERTOS/queue.c **** 				return pdPASS;
 1690              	 .loc 1 838 0
 1691 007c FFF7FEFF 	 bl vPortExitCritical
 1692              	.LVL181:
 839:../Dave/Generated/FREERTOS/queue.c **** 			}
 1693              	 .loc 1 839 0
 1694 0080 0120     	 movs r0,#1
 1695 0082 52E0     	 b .L237
 1696              	.L254:
 858:../Dave/Generated/FREERTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 1697              	 .loc 1 858 0
 1698 0084 02A8     	 add r0,sp,#8
 1699 0086 FFF7FEFF 	 bl vTaskSetTimeOutState
 1700              	.LVL182:
 1701              	.L208:
 868:../Dave/Generated/FREERTOS/queue.c **** 
 1702              	 .loc 1 868 0
 1703 008a FFF7FEFF 	 bl vPortExitCritical
 1704              	.LVL183:
 873:../Dave/Generated/FREERTOS/queue.c **** 		prvLockQueue( pxQueue );
 1705              	 .loc 1 873 0
 1706 008e FFF7FEFF 	 bl vTaskSuspendAll
 1707              	.LVL184:
 874:../Dave/Generated/FREERTOS/queue.c **** 
 1708              	 .loc 1 874 0
 1709 0092 FFF7FEFF 	 bl vPortEnterCritical
 1710              	.LVL185:
 1711 0096 94F84430 	 ldrb r3,[r4,#68]
 1712 009a FF2B     	 cmp r3,#255
 1713 009c 08BF     	 it eq
 1714 009e 84F84490 	 strbeq r9,[r4,#68]
 1715 00a2 94F84530 	 ldrb r3,[r4,#69]
 1716 00a6 FF2B     	 cmp r3,#255
 1717 00a8 08BF     	 it eq
 1718 00aa 84F84590 	 strbeq r9,[r4,#69]
 1719 00ae FFF7FEFF 	 bl vPortExitCritical
 1720              	.LVL186:
 877:../Dave/Generated/FREERTOS/queue.c **** 		{
 1721              	 .loc 1 877 0
 1722 00b2 02A8     	 add r0,sp,#8
 1723 00b4 01A9     	 add r1,sp,#4
 1724              	.LVL187:
 1725 00b6 FFF7FEFF 	 bl xTaskCheckForTimeOut
 1726              	.LVL188:
 1727 00ba 0028     	 cmp r0,#0
 1728 00bc 3DD1     	 bne .L211
 1729              	.LVL189:
 1730              	.LBB252:
 1731              	.LBB253:
1957:../Dave/Generated/FREERTOS/queue.c **** 	{
 1732              	 .loc 1 1957 0
 1733 00be FFF7FEFF 	 bl vPortEnterCritical
 1734              	.LVL190:
1959:../Dave/Generated/FREERTOS/queue.c **** 		{
 1735              	 .loc 1 1959 0
 1736 00c2 A26B     	 ldr r2,[r4,#56]
 1737 00c4 E36B     	 ldr r3,[r4,#60]
 1738 00c6 9A42     	 cmp r2,r3
 1739 00c8 15D0     	 beq .L252
 1740              	.LVL191:
1968:../Dave/Generated/FREERTOS/queue.c **** 
 1741              	 .loc 1 1968 0
 1742 00ca FFF7FEFF 	 bl vPortExitCritical
 1743              	.LVL192:
 1744              	.LBE253:
 1745              	.LBE252:
 904:../Dave/Generated/FREERTOS/queue.c **** 				( void ) xTaskResumeAll();
 1746              	 .loc 1 904 0
 1747 00ce 2046     	 mov r0,r4
 1748 00d0 FFF7FEFF 	 bl prvUnlockQueue
 1749              	.LVL193:
 905:../Dave/Generated/FREERTOS/queue.c **** 			}
 1750              	 .loc 1 905 0
 1751 00d4 FFF7FEFF 	 bl xTaskResumeAll
 1752              	.LVL194:
 1753              	.L214:
 744:../Dave/Generated/FREERTOS/queue.c **** 		{
 1754              	 .loc 1 744 0
 1755 00d8 FFF7FEFF 	 bl vPortEnterCritical
 1756              	.LVL195:
 750:../Dave/Generated/FREERTOS/queue.c **** 			{
 1757              	 .loc 1 750 0
 1758 00dc A26B     	 ldr r2,[r4,#56]
 1759 00de E36B     	 ldr r3,[r4,#60]
 1760 00e0 9A42     	 cmp r2,r3
 1761 00e2 4FF00107 	 mov r7,#1
 1762              	.LVL196:
 1763 00e6 B4D3     	 bcc .L199
 1764              	.LVL197:
 1765              	.L251:
 750:../Dave/Generated/FREERTOS/queue.c **** 			{
 1766              	 .loc 1 750 0 is_stmt 0 discriminator 1
 1767 00e8 022E     	 cmp r6,#2
 1768 00ea B2D0     	 beq .L199
 843:../Dave/Generated/FREERTOS/queue.c **** 				{
 1769              	 .loc 1 843 0 is_stmt 1
 1770 00ec 019D     	 ldr r5,[sp,#4]
 1771 00ee CDB1     	 cbz r5,.L253
 854:../Dave/Generated/FREERTOS/queue.c **** 				{
 1772              	 .loc 1 854 0
 1773 00f0 002F     	 cmp r7,#0
 1774 00f2 CAD1     	 bne .L208
 1775 00f4 C6E7     	 b .L254
 1776              	.LVL198:
 1777              	.L252:
 1778              	.LBB255:
 1779              	.LBB254:
1968:../Dave/Generated/FREERTOS/queue.c **** 
 1780              	 .loc 1 1968 0
 1781 00f6 FFF7FEFF 	 bl vPortExitCritical
 1782              	.LVL199:
 1783              	.LBE254:
 1784              	.LBE255:
 882:../Dave/Generated/FREERTOS/queue.c **** 
 1785              	 .loc 1 882 0
 1786 00fa 04F11000 	 add r0,r4,#16
 1787 00fe 0199     	 ldr r1,[sp,#4]
 1788 0100 FFF7FEFF 	 bl vTaskPlaceOnEventList
 1789              	.LVL200:
 889:../Dave/Generated/FREERTOS/queue.c **** 
 1790              	 .loc 1 889 0
 1791 0104 2046     	 mov r0,r4
 1792 0106 FFF7FEFF 	 bl prvUnlockQueue
 1793              	.LVL201:
 896:../Dave/Generated/FREERTOS/queue.c **** 				{
 1794              	 .loc 1 896 0
 1795 010a FFF7FEFF 	 bl xTaskResumeAll
 1796              	.LVL202:
 1797 010e 0028     	 cmp r0,#0
 1798 0110 E2D1     	 bne .L214
 898:../Dave/Generated/FREERTOS/queue.c **** 				}
 1799              	 .loc 1 898 0
 1800 0112 4FF08053 	 mov r3,#268435456
 1801 0116 CAF80030 	 str r3,[r10]
 1802              	
 1803 011a BFF34F8F 	 dsb
 1804              	
 1805              	
 1806 011e BFF36F8F 	 isb
 1807              	
 1808              	 .thumb
 1809 0122 D9E7     	 b .L214
 1810              	.LVL203:
 1811              	.L253:
 847:../Dave/Generated/FREERTOS/queue.c **** 
 1812              	 .loc 1 847 0
 1813 0124 FFF7FEFF 	 bl vPortExitCritical
 1814              	.LVL204:
 852:../Dave/Generated/FREERTOS/queue.c **** 				}
 1815              	 .loc 1 852 0
 1816 0128 2846     	 mov r0,r5
 1817              	.LVL205:
 1818              	.L237:
 918:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 1819              	 .loc 1 918 0
 1820 012a 04B0     	 add sp,sp,#16
 1821              	.LCFI27:
 1822              	 .cfi_remember_state
 1823              	 .cfi_def_cfa_offset 32
 1824              	 
 1825 012c BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 1826              	.LVL206:
 1827              	.L201:
 1828              	.LCFI28:
 1829              	 .cfi_restore_state
 775:../Dave/Generated/FREERTOS/queue.c **** 						{
 1830              	 .loc 1 775 0
 1831 0130 636A     	 ldr r3,[r4,#36]
 1832 0132 4BB9     	 cbnz r3,.L255
 790:../Dave/Generated/FREERTOS/queue.c **** 						{
 1833              	 .loc 1 790 0
 1834 0134 0028     	 cmp r0,#0
 1835 0136 99D1     	 bne .L242
 1836 0138 A0E7     	 b .L203
 1837              	.LVL207:
 1838              	.L211:
 911:../Dave/Generated/FREERTOS/queue.c **** 			( void ) xTaskResumeAll();
 1839              	 .loc 1 911 0
 1840 013a 2046     	 mov r0,r4
 1841 013c FFF7FEFF 	 bl prvUnlockQueue
 1842              	.LVL208:
 912:../Dave/Generated/FREERTOS/queue.c **** 
 1843              	 .loc 1 912 0
 1844 0140 FFF7FEFF 	 bl xTaskResumeAll
 1845              	.LVL209:
 915:../Dave/Generated/FREERTOS/queue.c **** 		}
 1846              	 .loc 1 915 0
 1847 0144 0020     	 movs r0,#0
 1848 0146 F0E7     	 b .L237
 1849              	.LVL210:
 1850              	.L255:
 777:../Dave/Generated/FREERTOS/queue.c **** 							{
 1851              	 .loc 1 777 0
 1852 0148 04F12400 	 add r0,r4,#36
 1853              	.LVL211:
 1854 014c FFF7FEFF 	 bl xTaskRemoveFromEventList
 1855              	.LVL212:
 1856 0150 0028     	 cmp r0,#0
 1857 0152 8BD1     	 bne .L242
 1858 0154 92E7     	 b .L203
 1859              	.LVL213:
 1860              	.L250:
 731:../Dave/Generated/FREERTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1861              	 .loc 1 731 0 discriminator 2
 1862 0156 C26B     	 ldr r2,[r0,#60]
 1863 0158 012A     	 cmp r2,#1
 1864 015a 3FF45EAF 	 beq .L193
 1865              	.LBB256:
 1866              	.LBB257:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1867              	 .loc 2 240 0
 1868              	
 1869 015e 4FF0FC03 	 mov r3,#252
 1870 0162 83F31188 	 msr basepri,r3
 1871 0166 BFF36F8F 	 isb 
 1872 016a BFF34F8F 	 dsb 
 1873              	
 1874              	
 1875              	.LVL214:
 1876              	 .thumb
 1877              	.L195:
 1878              	.LBE257:
 1879              	.LBE256:
 731:../Dave/Generated/FREERTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1880              	 .loc 1 731 0 discriminator 3
 1881 016e FEE7     	 b .L195
 1882              	.LVL215:
 1883              	.L249:
 730:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1884              	 .loc 1 730 0 discriminator 2
 1885 0170 026C     	 ldr r2,[r0,#64]
 1886              	.LVL216:
 1887 0172 002A     	 cmp r2,#0
 1888 0174 3FF44EAF 	 beq .L190
 1889              	.LBB258:
 1890              	.LBB259:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1891              	 .loc 2 240 0
 1892              	
 1893 0178 4FF0FC03 	 mov r3,#252
 1894 017c 83F31188 	 msr basepri,r3
 1895 0180 BFF36F8F 	 isb 
 1896 0184 BFF34F8F 	 dsb 
 1897              	
 1898              	
 1899              	.LVL217:
 1900              	 .thumb
 1901              	.L192:
 1902              	.LBE259:
 1903              	.LBE258:
 730:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1904              	 .loc 1 730 0 discriminator 2
 1905 0188 FEE7     	 b .L192
 1906              	.LVL218:
 1907              	.L248:
 1908              	.LBB260:
 1909              	.LBB261:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1910              	 .loc 2 240 0
 1911              	
 1912 018a 4FF0FC03 	 mov r3,#252
 1913 018e 83F31188 	 msr basepri,r3
 1914 0192 BFF36F8F 	 isb 
 1915 0196 BFF34F8F 	 dsb 
 1916              	
 1917              	
 1918              	.LVL219:
 1919              	 .thumb
 1920              	.L189:
 1921              	.LBE261:
 1922              	.LBE260:
 729:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1923              	 .loc 1 729 0 discriminator 1
 1924 019a FEE7     	 b .L189
 1925              	.L257:
 1926              	 .align 2
 1927              	.L256:
 1928 019c 04ED00E0 	 .word -536810236
 1929              	 .cfi_endproc
 1930              	.LFE137:
 1932              	 .section .text.xQueueGiveMutexRecursive,"ax",%progbits
 1933              	 .align 2
 1934              	 .global xQueueGiveMutexRecursive
 1935              	 .thumb
 1936              	 .thumb_func
 1938              	xQueueGiveMutexRecursive:
 1939              	.LFB134:
 573:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xReturn;
 1940              	 .loc 1 573 0
 1941              	 .cfi_startproc
 1942              	 
 1943              	 
 1944              	.LVL220:
 1945 0000 38B5     	 push {r3,r4,r5,lr}
 1946              	.LCFI29:
 1947              	 .cfi_def_cfa_offset 16
 1948              	 .cfi_offset 3,-16
 1949              	 .cfi_offset 4,-12
 1950              	 .cfi_offset 5,-8
 1951              	 .cfi_offset 14,-4
 577:../Dave/Generated/FREERTOS/queue.c **** 
 1952              	 .loc 1 577 0
 1953 0002 38B1     	 cbz r0,.L265
 585:../Dave/Generated/FREERTOS/queue.c **** 		{
 1954              	 .loc 1 585 0
 1955 0004 4568     	 ldr r5,[r0,#4]
 1956 0006 0446     	 mov r4,r0
 1957 0008 FFF7FEFF 	 bl xTaskGetCurrentTaskHandle
 1958              	.LVL221:
 1959 000c 8542     	 cmp r5,r0
 1960 000e 0AD0     	 beq .L266
 614:../Dave/Generated/FREERTOS/queue.c **** 
 1961              	 .loc 1 614 0
 1962 0010 0020     	 movs r0,#0
 1963 0012 38BD     	 pop {r3,r4,r5,pc}
 1964              	.LVL222:
 1965              	.L265:
 1966              	.LBB262:
 1967              	.LBB263:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1968              	 .loc 2 240 0
 1969              	
 1970 0014 4FF0FC03 	 mov r3,#252
 1971 0018 83F31188 	 msr basepri,r3
 1972 001c BFF36F8F 	 isb 
 1973 0020 BFF34F8F 	 dsb 
 1974              	
 1975              	
 1976              	.LVL223:
 1977              	 .thumb
 1978              	.L260:
 1979              	.LBE263:
 1980              	.LBE262:
 577:../Dave/Generated/FREERTOS/queue.c **** 
 1981              	 .loc 1 577 0 discriminator 1
 1982 0024 FEE7     	 b .L260
 1983              	.LVL224:
 1984              	.L266:
 594:../Dave/Generated/FREERTOS/queue.c **** 
 1985              	 .loc 1 594 0
 1986 0026 E168     	 ldr r1,[r4,#12]
 1987 0028 0139     	 subs r1,r1,#1
 1988 002a E160     	 str r1,[r4,#12]
 597:../Dave/Generated/FREERTOS/queue.c **** 			{
 1989              	 .loc 1 597 0
 1990 002c 09B1     	 cbz r1,.L267
 608:../Dave/Generated/FREERTOS/queue.c **** 		}
 1991              	 .loc 1 608 0
 1992 002e 0120     	 movs r0,#1
 1993              	.LVL225:
 620:../Dave/Generated/FREERTOS/queue.c **** 
 1994              	 .loc 1 620 0
 1995 0030 38BD     	 pop {r3,r4,r5,pc}
 1996              	.LVL226:
 1997              	.L267:
 601:../Dave/Generated/FREERTOS/queue.c **** 			}
 1998              	 .loc 1 601 0
 1999 0032 2046     	 mov r0,r4
 2000 0034 0A46     	 mov r2,r1
 2001 0036 0B46     	 mov r3,r1
 2002 0038 FFF7FEFF 	 bl xQueueGenericSend
 2003              	.LVL227:
 608:../Dave/Generated/FREERTOS/queue.c **** 		}
 2004              	 .loc 1 608 0
 2005 003c 0120     	 movs r0,#1
 2006 003e 38BD     	 pop {r3,r4,r5,pc}
 2007              	 .cfi_endproc
 2008              	.LFE134:
 2010              	 .section .text.xQueueGenericSendFromISR,"ax",%progbits
 2011              	 .align 2
 2012              	 .global xQueueGenericSendFromISR
 2013              	 .thumb
 2014              	 .thumb_func
 2016              	xQueueGenericSendFromISR:
 2017              	.LFB138:
 922:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn;
 2018              	 .loc 1 922 0
 2019              	 .cfi_startproc
 2020              	 
 2021              	 
 2022              	.LVL228:
 2023 0000 2DE9F843 	 push {r3,r4,r5,r6,r7,r8,r9,lr}
 2024              	.LCFI30:
 2025              	 .cfi_def_cfa_offset 32
 2026              	 .cfi_offset 3,-32
 2027              	 .cfi_offset 4,-28
 2028              	 .cfi_offset 5,-24
 2029              	 .cfi_offset 6,-20
 2030              	 .cfi_offset 7,-16
 2031              	 .cfi_offset 8,-12
 2032              	 .cfi_offset 9,-8
 2033              	 .cfi_offset 14,-4
 927:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2034              	 .loc 1 927 0
 2035 0004 F0B1     	 cbz r0,.L307
 928:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 2036              	 .loc 1 928 0
 2037 0006 0029     	 cmp r1,#0
 2038 0008 41D0     	 beq .L308
 2039              	.L271:
 929:../Dave/Generated/FREERTOS/queue.c **** 
 2040              	 .loc 1 929 0
 2041 000a 022B     	 cmp r3,#2
 2042 000c 33D0     	 beq .L309
 2043              	.L274:
 2044 000e 0446     	 mov r4,r0
 2045 0010 1F46     	 mov r7,r3
 2046 0012 9046     	 mov r8,r2
 2047 0014 8946     	 mov r9,r1
 945:../Dave/Generated/FREERTOS/queue.c **** 
 2048              	 .loc 1 945 0
 2049 0016 FFF7FEFF 	 bl vPortValidateInterruptPriority
 2050              	.LVL229:
 2051              	.LBB264:
 2052              	.LBB265:
 256:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2053              	 .loc 2 256 0
 2054              	
 2055 001a EFF31186 	 mrs r6,basepri
 2056 001e 4FF0FC03 	 mov r3,#252
 2057 0022 83F31188 	 msr basepri,r3
 2058 0026 BFF36F8F 	 isb 
 2059 002a BFF34F8F 	 dsb 
 2060              	
 2061              	
 2062              	.LVL230:
 2063              	 .thumb
 2064              	.LBE265:
 2065              	.LBE264:
 954:../Dave/Generated/FREERTOS/queue.c **** 		{
 2066              	 .loc 1 954 0
 2067 002e A26B     	 ldr r2,[r4,#56]
 2068 0030 E36B     	 ldr r3,[r4,#60]
 2069 0032 9A42     	 cmp r2,r3
 2070 0034 0FD3     	 bcc .L283
 954:../Dave/Generated/FREERTOS/queue.c **** 		{
 2071              	 .loc 1 954 0 is_stmt 0 discriminator 1
 2072 0036 022F     	 cmp r7,#2
 2073 0038 0DD0     	 beq .L283
1063:../Dave/Generated/FREERTOS/queue.c **** 		}
 2074              	 .loc 1 1063 0 is_stmt 1
 2075 003a 0020     	 movs r0,#0
 2076              	.L277:
 2077              	.LVL231:
 2078              	.LBB266:
 2079              	.LBB267:
 2080              	 .loc 2 274 0
 2081              	
 2082 003c 86F31188 	 msr basepri,r6
 2083              	
 2084              	 .thumb
 2085              	.LBE267:
 2086              	.LBE266:
1069:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 2087              	 .loc 1 1069 0
 2088 0040 BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 2089              	.LVL232:
 2090              	.L307:
 2091              	.LBB268:
 2092              	.LBB269:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2093              	 .loc 2 240 0
 2094              	
 2095 0044 4FF0FC03 	 mov r3,#252
 2096 0048 83F31188 	 msr basepri,r3
 2097 004c BFF36F8F 	 isb 
 2098 0050 BFF34F8F 	 dsb 
 2099              	
 2100              	
 2101              	.LVL233:
 2102              	 .thumb
 2103              	.L270:
 2104              	.LBE269:
 2105              	.LBE268:
 927:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2106              	 .loc 1 927 0 discriminator 1
 2107 0054 FEE7     	 b .L270
 2108              	.LVL234:
 2109              	.L283:
 2110              	.LBB270:
 956:../Dave/Generated/FREERTOS/queue.c **** 
 2111              	 .loc 1 956 0
 2112 0056 94F84550 	 ldrb r5,[r4,#69]
 965:../Dave/Generated/FREERTOS/queue.c **** 
 2113              	 .loc 1 965 0
 2114 005a 4946     	 mov r1,r9
 956:../Dave/Generated/FREERTOS/queue.c **** 
 2115              	 .loc 1 956 0
 2116 005c EDB2     	 uxtb r5,r5
 2117              	.LVL235:
 965:../Dave/Generated/FREERTOS/queue.c **** 
 2118              	 .loc 1 965 0
 2119 005e 2046     	 mov r0,r4
 2120 0060 3A46     	 mov r2,r7
 2121 0062 FFF7FEFF 	 bl prvCopyDataToQueue
 2122              	.LVL236:
 969:../Dave/Generated/FREERTOS/queue.c **** 			{
 2123              	 .loc 1 969 0
 2124 0066 FF2D     	 cmp r5,#255
 2125 0068 1DD0     	 beq .L310
1055:../Dave/Generated/FREERTOS/queue.c **** 			}
 2126              	 .loc 1 1055 0
 2127 006a 6B1C     	 adds r3,r5,#1
 2128 006c DBB2     	 uxtb r3,r3
 2129 006e 84F84530 	 strb r3,[r4,#69]
 2130              	.L304:
1058:../Dave/Generated/FREERTOS/queue.c **** 		}
 2131              	 .loc 1 1058 0
 2132 0072 0120     	 movs r0,#1
 2133 0074 E2E7     	 b .L277
 2134              	.LVL237:
 2135              	.L309:
 2136              	.LBE270:
 929:../Dave/Generated/FREERTOS/queue.c **** 
 2137              	 .loc 1 929 0 discriminator 2
 2138 0076 C46B     	 ldr r4,[r0,#60]
 2139 0078 012C     	 cmp r4,#1
 2140 007a C8D0     	 beq .L274
 2141              	.LBB271:
 2142              	.LBB272:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2143              	 .loc 2 240 0
 2144              	
 2145 007c 4FF0FC03 	 mov r3,#252
 2146 0080 83F31188 	 msr basepri,r3
 2147 0084 BFF36F8F 	 isb 
 2148 0088 BFF34F8F 	 dsb 
 2149              	
 2150              	
 2151              	.LVL238:
 2152              	 .thumb
 2153              	.L276:
 2154              	.LBE272:
 2155              	.LBE271:
 929:../Dave/Generated/FREERTOS/queue.c **** 
 2156              	 .loc 1 929 0 discriminator 3
 2157 008c FEE7     	 b .L276
 2158              	.LVL239:
 2159              	.L308:
 928:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 2160              	 .loc 1 928 0 discriminator 2
 2161 008e 046C     	 ldr r4,[r0,#64]
 2162 0090 002C     	 cmp r4,#0
 2163 0092 BAD0     	 beq .L271
 2164              	.LBB273:
 2165              	.LBB274:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2166              	 .loc 2 240 0
 2167              	
 2168 0094 4FF0FC03 	 mov r3,#252
 2169 0098 83F31188 	 msr basepri,r3
 2170 009c BFF36F8F 	 isb 
 2171 00a0 BFF34F8F 	 dsb 
 2172              	
 2173              	
 2174              	.LVL240:
 2175              	 .thumb
 2176              	.L273:
 2177              	.LBE274:
 2178              	.LBE273:
 928:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 2179              	 .loc 1 928 0 discriminator 2
 2180 00a4 FEE7     	 b .L273
 2181              	.LVL241:
 2182              	.L310:
 2183              	.LBB275:
 973:../Dave/Generated/FREERTOS/queue.c **** 					{
 2184              	 .loc 1 973 0
 2185 00a6 A36C     	 ldr r3,[r4,#72]
 2186 00a8 63B1     	 cbz r3,.L279
 975:../Dave/Generated/FREERTOS/queue.c **** 						{
 2187              	 .loc 1 975 0
 2188 00aa 2046     	 mov r0,r4
 2189 00ac 3946     	 mov r1,r7
 2190 00ae FFF7FEFF 	 bl prvNotifyQueueSetContainer
 2191              	.LVL242:
 2192 00b2 0028     	 cmp r0,#0
 2193 00b4 DDD0     	 beq .L304
 2194              	.L280:
 980:../Dave/Generated/FREERTOS/queue.c **** 							{
 2195              	 .loc 1 980 0
 2196 00b6 B8F1000F 	 cmp r8,#0
 2197 00ba DAD0     	 beq .L304
 982:../Dave/Generated/FREERTOS/queue.c **** 							}
 2198              	 .loc 1 982 0
 2199 00bc 0120     	 movs r0,#1
 2200 00be C8F80000 	 str r0,[r8]
 2201 00c2 BBE7     	 b .L277
 2202              	.L279:
 996:../Dave/Generated/FREERTOS/queue.c **** 						{
 2203              	 .loc 1 996 0
 2204 00c4 636A     	 ldr r3,[r4,#36]
 2205 00c6 002B     	 cmp r3,#0
 2206 00c8 D3D0     	 beq .L304
 998:../Dave/Generated/FREERTOS/queue.c **** 							{
 2207              	 .loc 1 998 0
 2208 00ca 04F12400 	 add r0,r4,#36
 2209 00ce FFF7FEFF 	 bl xTaskRemoveFromEventList
 2210              	.LVL243:
 2211 00d2 0028     	 cmp r0,#0
 2212 00d4 EFD1     	 bne .L280
 2213 00d6 CCE7     	 b .L304
 2214              	.LBE275:
 2215              	 .cfi_endproc
 2216              	.LFE138:
 2218              	 .section .text.xQueueGiveFromISR,"ax",%progbits
 2219              	 .align 2
 2220              	 .global xQueueGiveFromISR
 2221              	 .thumb
 2222              	 .thumb_func
 2224              	xQueueGiveFromISR:
 2225              	.LFB139:
1073:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn;
 2226              	 .loc 1 1073 0
 2227              	 .cfi_startproc
 2228              	 
 2229              	 
 2230              	.LVL244:
 2231 0000 70B5     	 push {r4,r5,r6,lr}
 2232              	.LCFI31:
 2233              	 .cfi_def_cfa_offset 16
 2234              	 .cfi_offset 4,-16
 2235              	 .cfi_offset 5,-12
 2236              	 .cfi_offset 6,-8
 2237              	 .cfi_offset 14,-4
1084:../Dave/Generated/FREERTOS/queue.c **** 
 2238              	 .loc 1 1084 0
 2239 0002 70B3     	 cbz r0,.L338
1088:../Dave/Generated/FREERTOS/queue.c **** 
 2240              	 .loc 1 1088 0
 2241 0004 036C     	 ldr r3,[r0,#64]
 2242 0006 43B1     	 cbz r3,.L314
 2243              	.LBB276:
 2244              	.LBB277:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2245              	 .loc 2 240 0
 2246              	
 2247 0008 4FF0FC03 	 mov r3,#252
 2248 000c 83F31188 	 msr basepri,r3
 2249 0010 BFF36F8F 	 isb 
 2250 0014 BFF34F8F 	 dsb 
 2251              	
 2252              	
 2253              	.LVL245:
 2254              	 .thumb
 2255              	.L315:
 2256              	.LBE277:
 2257              	.LBE276:
1088:../Dave/Generated/FREERTOS/queue.c **** 
 2258              	 .loc 1 1088 0 discriminator 2
 2259 0018 FEE7     	 b .L315
 2260              	.L314:
1093:../Dave/Generated/FREERTOS/queue.c **** 
 2261              	 .loc 1 1093 0
 2262 001a 0368     	 ldr r3,[r0]
 2263 001c 002B     	 cmp r3,#0
 2264 001e 38D0     	 beq .L339
 2265              	.L316:
 2266 0020 0446     	 mov r4,r0
 2267 0022 0E46     	 mov r6,r1
1109:../Dave/Generated/FREERTOS/queue.c **** 
 2268              	 .loc 1 1109 0
 2269 0024 FFF7FEFF 	 bl vPortValidateInterruptPriority
 2270              	.LVL246:
 2271              	.LBB278:
 2272              	.LBB279:
 256:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2273              	 .loc 2 256 0
 2274              	
 2275 0028 EFF31185 	 mrs r5,basepri
 2276 002c 4FF0FC03 	 mov r3,#252
 2277 0030 83F31188 	 msr basepri,r3
 2278 0034 BFF36F8F 	 isb 
 2279 0038 BFF34F8F 	 dsb 
 2280              	
 2281              	
 2282              	.LVL247:
 2283              	 .thumb
 2284              	.LBE279:
 2285              	.LBE278:
 2286              	.LBB280:
1113:../Dave/Generated/FREERTOS/queue.c **** 
 2287              	 .loc 1 1113 0
 2288 003c A26B     	 ldr r2,[r4,#56]
 2289              	.LVL248:
1118:../Dave/Generated/FREERTOS/queue.c **** 		{
 2290              	 .loc 1 1118 0
 2291 003e E36B     	 ldr r3,[r4,#60]
 2292 0040 9A42     	 cmp r2,r3
 2293 0042 24D2     	 bcs .L340
 2294              	.LBB281:
1120:../Dave/Generated/FREERTOS/queue.c **** 
 2295              	 .loc 1 1120 0
 2296 0044 94F84530 	 ldrb r3,[r4,#69]
 2297 0048 DBB2     	 uxtb r3,r3
 2298              	.LVL249:
1130:../Dave/Generated/FREERTOS/queue.c **** 
 2299              	 .loc 1 1130 0
 2300 004a 0132     	 adds r2,r2,#1
 2301              	.LVL250:
1134:../Dave/Generated/FREERTOS/queue.c **** 			{
 2302              	 .loc 1 1134 0
 2303 004c FF2B     	 cmp r3,#255
1130:../Dave/Generated/FREERTOS/queue.c **** 
 2304              	 .loc 1 1130 0
 2305 004e A263     	 str r2,[r4,#56]
1134:../Dave/Generated/FREERTOS/queue.c **** 			{
 2306              	 .loc 1 1134 0
 2307 0050 10D0     	 beq .L341
1220:../Dave/Generated/FREERTOS/queue.c **** 			}
 2308              	 .loc 1 1220 0
 2309 0052 0133     	 adds r3,r3,#1
 2310              	.LVL251:
 2311 0054 DBB2     	 uxtb r3,r3
 2312              	.LVL252:
 2313 0056 84F84530 	 strb r3,[r4,#69]
 2314              	.LVL253:
 2315              	.L337:
1223:../Dave/Generated/FREERTOS/queue.c **** 		}
 2316              	 .loc 1 1223 0
 2317 005a 0120     	 movs r0,#1
 2318              	.L322:
 2319              	.LVL254:
 2320              	.LBE281:
 2321              	.LBE280:
 2322              	.LBB284:
 2323              	.LBB285:
 2324              	 .loc 2 274 0
 2325              	
 2326 005c 85F31188 	 msr basepri,r5
 2327              	
 2328              	 .thumb
 2329              	.LBE285:
 2330              	.LBE284:
1234:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 2331              	 .loc 1 1234 0
 2332 0060 70BD     	 pop {r4,r5,r6,pc}
 2333              	.LVL255:
 2334              	.L338:
 2335              	.LBB286:
 2336              	.LBB287:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2337              	 .loc 2 240 0
 2338              	
 2339 0062 4FF0FC03 	 mov r3,#252
 2340 0066 83F31188 	 msr basepri,r3
 2341 006a BFF36F8F 	 isb 
 2342 006e BFF34F8F 	 dsb 
 2343              	
 2344              	
 2345              	.LVL256:
 2346              	 .thumb
 2347              	.L313:
 2348              	.LBE287:
 2349              	.LBE286:
1084:../Dave/Generated/FREERTOS/queue.c **** 
 2350              	 .loc 1 1084 0 discriminator 1
 2351 0072 FEE7     	 b .L313
 2352              	.LVL257:
 2353              	.L341:
 2354              	.LBB288:
 2355              	.LBB282:
1138:../Dave/Generated/FREERTOS/queue.c **** 					{
 2356              	 .loc 1 1138 0
 2357 0074 A36C     	 ldr r3,[r4,#72]
 2358              	.LVL258:
 2359 0076 C3B1     	 cbz r3,.L320
1140:../Dave/Generated/FREERTOS/queue.c **** 						{
 2360              	 .loc 1 1140 0
 2361 0078 2046     	 mov r0,r4
 2362 007a 0021     	 movs r1,#0
 2363 007c FFF7FEFF 	 bl prvNotifyQueueSetContainer
 2364              	.LVL259:
 2365 0080 0028     	 cmp r0,#0
 2366 0082 EAD0     	 beq .L337
 2367              	.L321:
1145:../Dave/Generated/FREERTOS/queue.c **** 							{
 2368              	 .loc 1 1145 0
 2369 0084 002E     	 cmp r6,#0
 2370 0086 E8D0     	 beq .L337
1147:../Dave/Generated/FREERTOS/queue.c **** 							}
 2371              	 .loc 1 1147 0
 2372 0088 0120     	 movs r0,#1
 2373 008a 3060     	 str r0,[r6]
 2374 008c E6E7     	 b .L322
 2375              	.LVL260:
 2376              	.L340:
 2377              	.LBE282:
1228:../Dave/Generated/FREERTOS/queue.c **** 		}
 2378              	 .loc 1 1228 0
 2379 008e 0020     	 movs r0,#0
 2380 0090 E4E7     	 b .L322
 2381              	.LVL261:
 2382              	.L339:
 2383              	.LBE288:
1093:../Dave/Generated/FREERTOS/queue.c **** 
 2384              	 .loc 1 1093 0 discriminator 2
 2385 0092 4368     	 ldr r3,[r0,#4]
 2386 0094 002B     	 cmp r3,#0
 2387 0096 C3D0     	 beq .L316
 2388              	.LBB289:
 2389              	.LBB290:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2390              	 .loc 2 240 0
 2391              	
 2392 0098 4FF0FC03 	 mov r3,#252
 2393 009c 83F31188 	 msr basepri,r3
 2394 00a0 BFF36F8F 	 isb 
 2395 00a4 BFF34F8F 	 dsb 
 2396              	
 2397              	
 2398              	.LVL262:
 2399              	 .thumb
 2400              	.L318:
 2401              	.LBE290:
 2402              	.LBE289:
1093:../Dave/Generated/FREERTOS/queue.c **** 
 2403              	 .loc 1 1093 0 discriminator 3
 2404 00a8 FEE7     	 b .L318
 2405              	.LVL263:
 2406              	.L320:
 2407              	.LBB291:
 2408              	.LBB283:
1161:../Dave/Generated/FREERTOS/queue.c **** 						{
 2409              	 .loc 1 1161 0
 2410 00aa 636A     	 ldr r3,[r4,#36]
 2411 00ac 002B     	 cmp r3,#0
 2412 00ae D4D0     	 beq .L337
1163:../Dave/Generated/FREERTOS/queue.c **** 							{
 2413              	 .loc 1 1163 0
 2414 00b0 04F12400 	 add r0,r4,#36
 2415 00b4 FFF7FEFF 	 bl xTaskRemoveFromEventList
 2416              	.LVL264:
 2417 00b8 0028     	 cmp r0,#0
 2418 00ba E3D1     	 bne .L321
 2419 00bc CDE7     	 b .L337
 2420              	.LBE283:
 2421              	.LBE291:
 2422              	 .cfi_endproc
 2423              	.LFE139:
 2425 00be 00BF     	 .section .text.xQueueGenericReceive,"ax",%progbits
 2426              	 .align 2
 2427              	 .global xQueueGenericReceive
 2428              	 .thumb
 2429              	 .thumb_func
 2431              	xQueueGenericReceive:
 2432              	.LFB140:
1238:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2433              	 .loc 1 1238 0
 2434              	 .cfi_startproc
 2435              	 
 2436              	 
 2437              	.LVL265:
 2438 0000 2DE9F047 	 push {r4,r5,r6,r7,r8,r9,r10,lr}
 2439              	.LCFI32:
 2440              	 .cfi_def_cfa_offset 32
 2441              	 .cfi_offset 4,-32
 2442              	 .cfi_offset 5,-28
 2443              	 .cfi_offset 6,-24
 2444              	 .cfi_offset 7,-20
 2445              	 .cfi_offset 8,-16
 2446              	 .cfi_offset 9,-12
 2447              	 .cfi_offset 10,-8
 2448              	 .cfi_offset 14,-4
 2449 0004 84B0     	 sub sp,sp,#16
 2450              	.LCFI33:
 2451              	 .cfi_def_cfa_offset 48
1238:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2452              	 .loc 1 1238 0
 2453 0006 0192     	 str r2,[sp,#4]
1244:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2454              	 .loc 1 1244 0
 2455 0008 0028     	 cmp r0,#0
 2456 000a 00F0C480 	 beq .L403
1245:../Dave/Generated/FREERTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 2457              	 .loc 1 1245 0
 2458 000e 0029     	 cmp r1,#0
 2459 0010 00F08C80 	 beq .L404
 2460              	.LVL266:
 2461              	.L345:
 2462 0014 0446     	 mov r4,r0
 2463 0016 9846     	 mov r8,r3
 2464 0018 0F46     	 mov r7,r1
1248:../Dave/Generated/FREERTOS/queue.c **** 	}
 2465              	 .loc 1 1248 0
 2466 001a FFF7FEFF 	 bl xTaskGetSchedulerState
 2467              	.LVL267:
 2468 001e 50B9     	 cbnz r0,.L372
1248:../Dave/Generated/FREERTOS/queue.c **** 	}
 2469              	 .loc 1 1248 0 is_stmt 0 discriminator 2
 2470 0020 019D     	 ldr r5,[sp,#4]
 2471 0022 4DB1     	 cbz r5,.L348
 2472              	.LBB292:
 2473              	.LBB293:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2474              	 .loc 2 240 0 is_stmt 1
 2475              	
 2476 0024 4FF0FC03 	 mov r3,#252
 2477 0028 83F31188 	 msr basepri,r3
 2478 002c BFF36F8F 	 isb 
 2479 0030 BFF34F8F 	 dsb 
 2480              	
 2481              	
 2482              	.LVL268:
 2483              	 .thumb
 2484              	.L350:
 2485              	.LBE293:
 2486              	.LBE292:
1248:../Dave/Generated/FREERTOS/queue.c **** 	}
 2487              	 .loc 1 1248 0 discriminator 3
 2488 0034 FEE7     	 b .L350
 2489              	.L372:
 2490 0036 0025     	 movs r5,#0
 2491              	.L348:
 2492              	.LVL269:
1258:../Dave/Generated/FREERTOS/queue.c **** 		{
 2493              	 .loc 1 1258 0
 2494 0038 FFF7FEFF 	 bl vPortEnterCritical
 2495              	.LVL270:
 2496              	.LBB294:
1260:../Dave/Generated/FREERTOS/queue.c **** 
 2497              	 .loc 1 1260 0
 2498 003c A66B     	 ldr r6,[r4,#56]
 2499              	.LVL271:
 2500              	.LBE294:
1401:../Dave/Generated/FREERTOS/queue.c **** 				}
 2501              	 .loc 1 1401 0
 2502 003e DFF868A1 	 ldr r10,.L410
1371:../Dave/Generated/FREERTOS/queue.c **** 
 2503              	 .loc 1 1371 0
 2504 0042 4FF00009 	 mov r9,#0
 2505              	.LBB295:
1264:../Dave/Generated/FREERTOS/queue.c **** 			{
 2506              	 .loc 1 1264 0
 2507 0046 002E     	 cmp r6,#0
 2508 0048 44D1     	 bne .L405
 2509              	.L351:
1343:../Dave/Generated/FREERTOS/queue.c **** 				{
 2510              	 .loc 1 1343 0
 2511 004a 019B     	 ldr r3,[sp,#4]
 2512 004c 002B     	 cmp r3,#0
 2513 004e 00F08280 	 beq .L366
1351:../Dave/Generated/FREERTOS/queue.c **** 				{
 2514              	 .loc 1 1351 0
 2515 0052 15B9     	 cbnz r5,.L359
1355:../Dave/Generated/FREERTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 2516              	 .loc 1 1355 0
 2517 0054 02A8     	 add r0,sp,#8
 2518 0056 FFF7FEFF 	 bl vTaskSetTimeOutState
 2519              	.LVL272:
 2520              	.L359:
 2521              	.LBE295:
1365:../Dave/Generated/FREERTOS/queue.c **** 
 2522              	 .loc 1 1365 0
 2523 005a FFF7FEFF 	 bl vPortExitCritical
 2524              	.LVL273:
1370:../Dave/Generated/FREERTOS/queue.c **** 		prvLockQueue( pxQueue );
 2525              	 .loc 1 1370 0
 2526 005e FFF7FEFF 	 bl vTaskSuspendAll
 2527              	.LVL274:
1371:../Dave/Generated/FREERTOS/queue.c **** 
 2528              	 .loc 1 1371 0
 2529 0062 FFF7FEFF 	 bl vPortEnterCritical
 2530              	.LVL275:
 2531 0066 94F84430 	 ldrb r3,[r4,#68]
 2532 006a FF2B     	 cmp r3,#255
 2533 006c 08BF     	 it eq
 2534 006e 84F84490 	 strbeq r9,[r4,#68]
 2535 0072 94F84530 	 ldrb r3,[r4,#69]
 2536 0076 FF2B     	 cmp r3,#255
 2537 0078 08BF     	 it eq
 2538 007a 84F84590 	 strbeq r9,[r4,#69]
 2539 007e FFF7FEFF 	 bl vPortExitCritical
 2540              	.LVL276:
1374:../Dave/Generated/FREERTOS/queue.c **** 		{
 2541              	 .loc 1 1374 0
 2542 0082 02A8     	 add r0,sp,#8
 2543 0084 01A9     	 add r1,sp,#4
 2544              	.LVL277:
 2545 0086 FFF7FEFF 	 bl xTaskCheckForTimeOut
 2546              	.LVL278:
 2547 008a 0028     	 cmp r0,#0
 2548 008c 41D1     	 bne .L362
 2549              	.LVL279:
 2550              	.LBB296:
 2551              	.LBB297:
1918:../Dave/Generated/FREERTOS/queue.c **** 	{
 2552              	 .loc 1 1918 0
 2553 008e FFF7FEFF 	 bl vPortEnterCritical
 2554              	.LVL280:
1920:../Dave/Generated/FREERTOS/queue.c **** 		{
 2555              	 .loc 1 1920 0
 2556 0092 A36B     	 ldr r3,[r4,#56]
 2557 0094 002B     	 cmp r3,#0
 2558 0096 33D1     	 bne .L406
 2559              	.LVL281:
1929:../Dave/Generated/FREERTOS/queue.c **** 
 2560              	 .loc 1 1929 0
 2561 0098 FFF7FEFF 	 bl vPortExitCritical
 2562              	.LVL282:
 2563              	.LBE297:
 2564              	.LBE296:
1382:../Dave/Generated/FREERTOS/queue.c **** 					{
 2565              	 .loc 1 1382 0
 2566 009c 2368     	 ldr r3,[r4]
 2567 009e 002B     	 cmp r3,#0
 2568 00a0 51D0     	 beq .L407
 2569              	.L370:
1397:../Dave/Generated/FREERTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 2570              	 .loc 1 1397 0
 2571 00a2 04F12400 	 add r0,r4,#36
 2572 00a6 0199     	 ldr r1,[sp,#4]
 2573 00a8 FFF7FEFF 	 bl vTaskPlaceOnEventList
 2574              	.LVL283:
1398:../Dave/Generated/FREERTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2575              	 .loc 1 1398 0
 2576 00ac 2046     	 mov r0,r4
 2577 00ae FFF7FEFF 	 bl prvUnlockQueue
 2578              	.LVL284:
1399:../Dave/Generated/FREERTOS/queue.c **** 				{
 2579              	 .loc 1 1399 0
 2580 00b2 FFF7FEFF 	 bl xTaskResumeAll
 2581              	.LVL285:
 2582 00b6 38B9     	 cbnz r0,.L365
1401:../Dave/Generated/FREERTOS/queue.c **** 				}
 2583              	 .loc 1 1401 0
 2584 00b8 4FF08053 	 mov r3,#268435456
 2585 00bc CAF80030 	 str r3,[r10]
 2586              	
 2587 00c0 BFF34F8F 	 dsb
 2588              	
 2589              	
 2590 00c4 BFF36F8F 	 isb
 2591              	
 2592              	 .thumb
 2593              	.L365:
 2594 00c8 0125     	 movs r5,#1
 2595              	.LVL286:
 2596              	.L409:
1258:../Dave/Generated/FREERTOS/queue.c **** 		{
 2597              	 .loc 1 1258 0
 2598 00ca FFF7FEFF 	 bl vPortEnterCritical
 2599              	.LVL287:
 2600              	.LBB299:
1260:../Dave/Generated/FREERTOS/queue.c **** 
 2601              	 .loc 1 1260 0
 2602 00ce A66B     	 ldr r6,[r4,#56]
 2603              	.LVL288:
1264:../Dave/Generated/FREERTOS/queue.c **** 			{
 2604              	 .loc 1 1264 0
 2605 00d0 002E     	 cmp r6,#0
 2606 00d2 BAD0     	 beq .L351
 2607              	.L405:
1270:../Dave/Generated/FREERTOS/queue.c **** 
 2608              	 .loc 1 1270 0
 2609 00d4 3946     	 mov r1,r7
 2610 00d6 2046     	 mov r0,r4
1268:../Dave/Generated/FREERTOS/queue.c **** 
 2611              	 .loc 1 1268 0
 2612 00d8 E568     	 ldr r5,[r4,#12]
 2613              	.LVL289:
1270:../Dave/Generated/FREERTOS/queue.c **** 
 2614              	 .loc 1 1270 0
 2615 00da FFF7FEFF 	 bl prvCopyDataFromQueue
 2616              	.LVL290:
1272:../Dave/Generated/FREERTOS/queue.c **** 				{
 2617              	 .loc 1 1272 0
 2618 00de B8F1000F 	 cmp r8,#0
 2619 00e2 3ED1     	 bne .L352
1281:../Dave/Generated/FREERTOS/queue.c **** 						{
 2620              	 .loc 1 1281 0
 2621 00e4 2368     	 ldr r3,[r4]
1277:../Dave/Generated/FREERTOS/queue.c **** 
 2622              	 .loc 1 1277 0
 2623 00e6 013E     	 subs r6,r6,#1
 2624              	.LVL291:
 2625 00e8 A663     	 str r6,[r4,#56]
1281:../Dave/Generated/FREERTOS/queue.c **** 						{
 2626              	 .loc 1 1281 0
 2627 00ea 13B9     	 cbnz r3,.L353
1285:../Dave/Generated/FREERTOS/queue.c **** 						}
 2628              	 .loc 1 1285 0
 2629 00ec FFF7FEFF 	 bl pvTaskIncrementMutexHeldCount
 2630              	.LVL292:
 2631 00f0 6060     	 str r0,[r4,#4]
 2632              	.L353:
1294:../Dave/Generated/FREERTOS/queue.c **** 					{
 2633              	 .loc 1 1294 0
 2634 00f2 2369     	 ldr r3,[r4,#16]
 2635 00f4 002B     	 cmp r3,#0
 2636 00f6 47D1     	 bne .L408
 2637              	.LVL293:
 2638              	.L355:
1338:../Dave/Generated/FREERTOS/queue.c **** 				return pdPASS;
 2639              	 .loc 1 1338 0
 2640 00f8 FFF7FEFF 	 bl vPortExitCritical
 2641              	.LVL294:
1339:../Dave/Generated/FREERTOS/queue.c **** 			}
 2642              	 .loc 1 1339 0
 2643 00fc 0120     	 movs r0,#1
 2644 00fe 2DE0     	 b .L392
 2645              	.LVL295:
 2646              	.L406:
 2647              	.LBE299:
 2648              	.LBB300:
 2649              	.LBB298:
1929:../Dave/Generated/FREERTOS/queue.c **** 
 2650              	 .loc 1 1929 0
 2651 0100 FFF7FEFF 	 bl vPortExitCritical
 2652              	.LVL296:
 2653              	.LBE298:
 2654              	.LBE300:
1411:../Dave/Generated/FREERTOS/queue.c **** 				( void ) xTaskResumeAll();
 2655              	 .loc 1 1411 0
 2656 0104 2046     	 mov r0,r4
 2657 0106 FFF7FEFF 	 bl prvUnlockQueue
 2658              	.LVL297:
 2659 010a 0125     	 movs r5,#1
1412:../Dave/Generated/FREERTOS/queue.c **** 			}
 2660              	 .loc 1 1412 0
 2661 010c FFF7FEFF 	 bl xTaskResumeAll
 2662              	.LVL298:
 2663 0110 DBE7     	 b .L409
 2664              	.LVL299:
 2665              	.L362:
1417:../Dave/Generated/FREERTOS/queue.c **** 			( void ) xTaskResumeAll();
 2666              	 .loc 1 1417 0
 2667 0112 2046     	 mov r0,r4
 2668 0114 FFF7FEFF 	 bl prvUnlockQueue
 2669              	.LVL300:
1418:../Dave/Generated/FREERTOS/queue.c **** 
 2670              	 .loc 1 1418 0
 2671 0118 FFF7FEFF 	 bl xTaskResumeAll
 2672              	.LVL301:
 2673              	.LBB301:
 2674              	.LBB302:
1918:../Dave/Generated/FREERTOS/queue.c **** 	{
 2675              	 .loc 1 1918 0
 2676 011c FFF7FEFF 	 bl vPortEnterCritical
 2677              	.LVL302:
1920:../Dave/Generated/FREERTOS/queue.c **** 		{
 2678              	 .loc 1 1920 0
 2679 0120 A36B     	 ldr r3,[r4,#56]
 2680 0122 C3B1     	 cbz r3,.L366
 2681              	.LVL303:
1929:../Dave/Generated/FREERTOS/queue.c **** 
 2682              	 .loc 1 1929 0
 2683 0124 FFF7FEFF 	 bl vPortExitCritical
 2684              	.LVL304:
 2685 0128 0125     	 movs r5,#1
 2686 012a CEE7     	 b .L409
 2687              	.LVL305:
 2688              	.L404:
 2689              	.LBE302:
 2690              	.LBE301:
1245:../Dave/Generated/FREERTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 2691              	 .loc 1 1245 0 discriminator 2
 2692 012c 026C     	 ldr r2,[r0,#64]
 2693              	.LVL306:
 2694 012e 002A     	 cmp r2,#0
 2695 0130 3FF470AF 	 beq .L345
 2696              	.LBB303:
 2697              	.LBB304:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2698              	 .loc 2 240 0
 2699              	
 2700 0134 4FF0FC03 	 mov r3,#252
 2701 0138 83F31188 	 msr basepri,r3
 2702 013c BFF36F8F 	 isb 
 2703 0140 BFF34F8F 	 dsb 
 2704              	
 2705              	
 2706              	.LVL307:
 2707              	 .thumb
 2708              	.L347:
 2709              	.LBE304:
 2710              	.LBE303:
1245:../Dave/Generated/FREERTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 2711              	 .loc 1 1245 0 discriminator 2
 2712 0144 FEE7     	 b .L347
 2713              	.LVL308:
 2714              	.L407:
1384:../Dave/Generated/FREERTOS/queue.c **** 						{
 2715              	 .loc 1 1384 0
 2716 0146 FFF7FEFF 	 bl vPortEnterCritical
 2717              	.LVL309:
1386:../Dave/Generated/FREERTOS/queue.c **** 						}
 2718              	 .loc 1 1386 0
 2719 014a 6068     	 ldr r0,[r4,#4]
 2720 014c FFF7FEFF 	 bl vTaskPriorityInherit
 2721              	.LVL310:
1388:../Dave/Generated/FREERTOS/queue.c **** 					}
 2722              	 .loc 1 1388 0
 2723 0150 FFF7FEFF 	 bl vPortExitCritical
 2724              	.LVL311:
 2725 0154 A5E7     	 b .L370
 2726              	.LVL312:
 2727              	.L366:
 2728              	.LBB305:
1347:../Dave/Generated/FREERTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 2729              	 .loc 1 1347 0
 2730 0156 FFF7FEFF 	 bl vPortExitCritical
 2731              	.LVL313:
1349:../Dave/Generated/FREERTOS/queue.c **** 				}
 2732              	 .loc 1 1349 0
 2733 015a 0020     	 movs r0,#0
 2734              	.LVL314:
 2735              	.L392:
 2736              	.LBE305:
1431:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 2737              	 .loc 1 1431 0
 2738 015c 04B0     	 add sp,sp,#16
 2739              	.LCFI34:
 2740              	 .cfi_remember_state
 2741              	 .cfi_def_cfa_offset 32
 2742              	 
 2743 015e BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 2744              	.LVL315:
 2745              	.L352:
 2746              	.LCFI35:
 2747              	 .cfi_restore_state
 2748              	.LBB306:
1320:../Dave/Generated/FREERTOS/queue.c **** 					{
 2749              	 .loc 1 1320 0
 2750 0162 636A     	 ldr r3,[r4,#36]
1316:../Dave/Generated/FREERTOS/queue.c **** 
 2751              	 .loc 1 1316 0
 2752 0164 E560     	 str r5,[r4,#12]
1320:../Dave/Generated/FREERTOS/queue.c **** 					{
 2753              	 .loc 1 1320 0
 2754 0166 002B     	 cmp r3,#0
 2755 0168 C6D0     	 beq .L355
1322:../Dave/Generated/FREERTOS/queue.c **** 						{
 2756              	 .loc 1 1322 0
 2757 016a 04F12400 	 add r0,r4,#36
 2758 016e FFF7FEFF 	 bl xTaskRemoveFromEventList
 2759              	.LVL316:
 2760 0172 0028     	 cmp r0,#0
 2761 0174 C0D0     	 beq .L355
 2762              	.LVL317:
 2763              	.L397:
1325:../Dave/Generated/FREERTOS/queue.c **** 						}
 2764              	 .loc 1 1325 0
 2765 0176 0C4B     	 ldr r3,.L410
 2766 0178 4FF08052 	 mov r2,#268435456
 2767 017c 1A60     	 str r2,[r3]
 2768              	
 2769 017e BFF34F8F 	 dsb
 2770              	
 2771              	
 2772 0182 BFF36F8F 	 isb
 2773              	
 2774              	 .thumb
 2775 0186 B7E7     	 b .L355
 2776              	.LVL318:
 2777              	.L408:
1296:../Dave/Generated/FREERTOS/queue.c **** 						{
 2778              	 .loc 1 1296 0
 2779 0188 04F11000 	 add r0,r4,#16
 2780 018c FFF7FEFF 	 bl xTaskRemoveFromEventList
 2781              	.LVL319:
 2782 0190 0028     	 cmp r0,#0
 2783 0192 F0D1     	 bne .L397
 2784 0194 B0E7     	 b .L355
 2785              	.LVL320:
 2786              	.L403:
 2787              	.LBE306:
 2788              	.LBB307:
 2789              	.LBB308:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2790              	 .loc 2 240 0
 2791              	
 2792 0196 4FF0FC03 	 mov r3,#252
 2793 019a 83F31188 	 msr basepri,r3
 2794 019e BFF36F8F 	 isb 
 2795 01a2 BFF34F8F 	 dsb 
 2796              	
 2797              	
 2798              	.LVL321:
 2799              	 .thumb
 2800              	.L344:
 2801              	.LBE308:
 2802              	.LBE307:
1244:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2803              	 .loc 1 1244 0 discriminator 1
 2804 01a6 FEE7     	 b .L344
 2805              	.L411:
 2806              	 .align 2
 2807              	.L410:
 2808 01a8 04ED00E0 	 .word -536810236
 2809              	 .cfi_endproc
 2810              	.LFE140:
 2812              	 .section .text.xQueueTakeMutexRecursive,"ax",%progbits
 2813              	 .align 2
 2814              	 .global xQueueTakeMutexRecursive
 2815              	 .thumb
 2816              	 .thumb_func
 2818              	xQueueTakeMutexRecursive:
 2819              	.LFB135:
 628:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xReturn;
 2820              	 .loc 1 628 0
 2821              	 .cfi_startproc
 2822              	 
 2823              	 
 2824              	.LVL322:
 632:../Dave/Generated/FREERTOS/queue.c **** 
 2825              	 .loc 1 632 0
 2826 0000 B8B1     	 cbz r0,.L421
 628:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xReturn;
 2827              	 .loc 1 628 0
 2828 0002 70B5     	 push {r4,r5,r6,lr}
 2829              	.LCFI36:
 2830              	 .cfi_def_cfa_offset 16
 2831              	 .cfi_offset 4,-16
 2832              	 .cfi_offset 5,-12
 2833              	 .cfi_offset 6,-8
 2834              	 .cfi_offset 14,-4
 639:../Dave/Generated/FREERTOS/queue.c **** 		{
 2835              	 .loc 1 639 0
 2836 0004 4668     	 ldr r6,[r0,#4]
 2837 0006 0446     	 mov r4,r0
 2838 0008 0D46     	 mov r5,r1
 2839 000a FFF7FEFF 	 bl xTaskGetCurrentTaskHandle
 2840              	.LVL323:
 2841 000e 8642     	 cmp r6,r0
 2842 0010 0AD0     	 beq .L422
 646:../Dave/Generated/FREERTOS/queue.c **** 
 2843              	 .loc 1 646 0
 2844 0012 0021     	 movs r1,#0
 2845 0014 2A46     	 mov r2,r5
 2846 0016 0B46     	 mov r3,r1
 2847 0018 2046     	 mov r0,r4
 2848 001a FFF7FEFF 	 bl xQueueGenericReceive
 2849              	.LVL324:
 651:../Dave/Generated/FREERTOS/queue.c **** 			{
 2850              	 .loc 1 651 0
 2851 001e 10B1     	 cbz r0,.L416
 653:../Dave/Generated/FREERTOS/queue.c **** 			}
 2852              	 .loc 1 653 0
 2853 0020 E368     	 ldr r3,[r4,#12]
 2854 0022 0133     	 adds r3,r3,#1
 2855 0024 E360     	 str r3,[r4,#12]
 2856              	.L416:
 662:../Dave/Generated/FREERTOS/queue.c **** 
 2857              	 .loc 1 662 0
 2858 0026 70BD     	 pop {r4,r5,r6,pc}
 2859              	.LVL325:
 2860              	.L422:
 641:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdPASS;
 2861              	 .loc 1 641 0
 2862 0028 E368     	 ldr r3,[r4,#12]
 2863 002a 0133     	 adds r3,r3,#1
 2864 002c E360     	 str r3,[r4,#12]
 2865              	.LVL326:
 642:../Dave/Generated/FREERTOS/queue.c **** 		}
 2866              	 .loc 1 642 0
 2867 002e 0120     	 movs r0,#1
 2868 0030 70BD     	 pop {r4,r5,r6,pc}
 2869              	.LVL327:
 2870              	.L421:
 2871              	.LCFI37:
 2872              	 .cfi_def_cfa_offset 0
 2873              	 .cfi_restore 4
 2874              	 .cfi_restore 5
 2875              	 .cfi_restore 6
 2876              	 .cfi_restore 14
 2877              	.LBB309:
 2878              	.LBB310:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2879              	 .loc 2 240 0
 2880              	
 2881 0032 4FF0FC03 	 mov r3,#252
 2882 0036 83F31188 	 msr basepri,r3
 2883 003a BFF36F8F 	 isb 
 2884 003e BFF34F8F 	 dsb 
 2885              	
 2886              	
 2887              	.LVL328:
 2888              	 .thumb
 2889              	.L414:
 2890              	.LBE310:
 2891              	.LBE309:
 632:../Dave/Generated/FREERTOS/queue.c **** 
 2892              	 .loc 1 632 0 discriminator 1
 2893 0042 FEE7     	 b .L414
 2894              	 .cfi_endproc
 2895              	.LFE135:
 2897              	 .section .text.xQueueReceiveFromISR,"ax",%progbits
 2898              	 .align 2
 2899              	 .global xQueueReceiveFromISR
 2900              	 .thumb
 2901              	 .thumb_func
 2903              	xQueueReceiveFromISR:
 2904              	.LFB141:
1435:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn;
 2905              	 .loc 1 1435 0
 2906              	 .cfi_startproc
 2907              	 
 2908              	 
 2909              	 
 2910              	.LVL329:
1440:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2911              	 .loc 1 1440 0
 2912 0000 10B1     	 cbz r0,.L434
1441:../Dave/Generated/FREERTOS/queue.c **** 
 2913              	 .loc 1 1441 0
 2914 0002 51B1     	 cbz r1,.L435
 2915              	.L426:
 2916 0004 FFF7FEBF 	 b xQueueReceiveFromISR.part.2
 2917              	.LVL330:
 2918              	.L434:
 2919              	.LBB315:
 2920              	.LBB316:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2921              	 .loc 2 240 0
 2922              	
 2923 0008 4FF0FC03 	 mov r3,#252
 2924 000c 83F31188 	 msr basepri,r3
 2925 0010 BFF36F8F 	 isb 
 2926 0014 BFF34F8F 	 dsb 
 2927              	
 2928              	
 2929              	.LVL331:
 2930              	 .thumb
 2931              	.L425:
 2932              	.LBE316:
 2933              	.LBE315:
1440:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2934              	 .loc 1 1440 0 discriminator 1
 2935 0018 FEE7     	 b .L425
 2936              	.L435:
1441:../Dave/Generated/FREERTOS/queue.c **** 
 2937              	 .loc 1 1441 0 discriminator 2
 2938 001a 036C     	 ldr r3,[r0,#64]
 2939 001c 002B     	 cmp r3,#0
 2940 001e F1D0     	 beq .L426
 2941              	.LBB317:
 2942              	.LBB318:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2943              	 .loc 2 240 0
 2944              	
 2945 0020 4FF0FC03 	 mov r3,#252
 2946 0024 83F31188 	 msr basepri,r3
 2947 0028 BFF36F8F 	 isb 
 2948 002c BFF34F8F 	 dsb 
 2949              	
 2950              	
 2951              	.LVL332:
 2952              	 .thumb
 2953              	.L428:
 2954              	.LBE318:
 2955              	.LBE317:
1441:../Dave/Generated/FREERTOS/queue.c **** 
 2956              	 .loc 1 1441 0 discriminator 2
 2957 0030 FEE7     	 b .L428
 2958              	 .cfi_endproc
 2959              	.LFE141:
 2961 0032 00BF     	 .section .text.xQueuePeekFromISR,"ax",%progbits
 2962              	 .align 2
 2963              	 .global xQueuePeekFromISR
 2964              	 .thumb
 2965              	 .thumb_func
 2967              	xQueuePeekFromISR:
 2968              	.LFB142:
1526:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn;
 2969              	 .loc 1 1526 0
 2970              	 .cfi_startproc
 2971              	 
 2972              	 
 2973              	.LVL333:
1532:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2974              	 .loc 1 1532 0
 2975 0000 F8B1     	 cbz r0,.L459
1534:../Dave/Generated/FREERTOS/queue.c **** 
 2976              	 .loc 1 1534 0
 2977 0002 036C     	 ldr r3,[r0,#64]
1533:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2978              	 .loc 1 1533 0
 2979 0004 71B3     	 cbz r1,.L460
1534:../Dave/Generated/FREERTOS/queue.c **** 
 2980              	 .loc 1 1534 0
 2981 0006 43B9     	 cbnz r3,.L461
 2982              	.L440:
 2983              	.LBB319:
 2984              	.LBB320:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2985              	 .loc 2 240 0
 2986              	
 2987 0008 4FF0FC03 	 mov r3,#252
 2988 000c 83F31188 	 msr basepri,r3
 2989 0010 BFF36F8F 	 isb 
 2990 0014 BFF34F8F 	 dsb 
 2991              	
 2992              	
 2993              	.LVL334:
 2994              	 .thumb
 2995              	.L443:
 2996              	.LBE320:
 2997              	.LBE319:
1534:../Dave/Generated/FREERTOS/queue.c **** 
 2998              	 .loc 1 1534 0 discriminator 3
 2999 0018 FEE7     	 b .L443
 3000              	.L461:
1526:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn;
 3001              	 .loc 1 1526 0
 3002 001a 70B5     	 push {r4,r5,r6,lr}
 3003              	.LCFI38:
 3004              	 .cfi_def_cfa_offset 16
 3005              	 .cfi_offset 4,-16
 3006              	 .cfi_offset 5,-12
 3007              	 .cfi_offset 6,-8
 3008              	 .cfi_offset 14,-4
 3009 001c 0446     	 mov r4,r0
 3010 001e 0D46     	 mov r5,r1
1550:../Dave/Generated/FREERTOS/queue.c **** 
 3011              	 .loc 1 1550 0
 3012 0020 FFF7FEFF 	 bl vPortValidateInterruptPriority
 3013              	.LVL335:
 3014              	.LBB321:
 3015              	.LBB322:
 256:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 3016              	 .loc 2 256 0
 3017              	
 3018 0024 EFF31186 	 mrs r6,basepri
 3019 0028 4FF0FC03 	 mov r3,#252
 3020 002c 83F31188 	 msr basepri,r3
 3021 0030 BFF36F8F 	 isb 
 3022 0034 BFF34F8F 	 dsb 
 3023              	
 3024              	
 3025              	.LVL336:
 3026              	 .thumb
 3027              	.LBE322:
 3028              	.LBE321:
1555:../Dave/Generated/FREERTOS/queue.c **** 		{
 3029              	 .loc 1 1555 0
 3030 0038 A06B     	 ldr r0,[r4,#56]
 3031 003a 58B9     	 cbnz r0,.L458
 3032              	.LVL337:
 3033              	.L444:
 3034              	.LBB323:
 3035              	.LBB324:
 3036              	 .loc 2 274 0
 3037              	
 3038 003c 86F31188 	 msr basepri,r6
 3039              	
 3040              	 .thumb
 3041              	.LBE324:
 3042              	.LBE323:
1576:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 3043              	 .loc 1 1576 0
 3044 0040 70BD     	 pop {r4,r5,r6,pc}
 3045              	.LVL338:
 3046              	.L459:
 3047              	.LCFI39:
 3048              	 .cfi_def_cfa_offset 0
 3049              	 .cfi_restore 4
 3050              	 .cfi_restore 5
 3051              	 .cfi_restore 6
 3052              	 .cfi_restore 14
 3053              	.LBB325:
 3054              	.LBB326:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 3055              	 .loc 2 240 0
 3056              	
 3057 0042 4FF0FC03 	 mov r3,#252
 3058 0046 83F31188 	 msr basepri,r3
 3059 004a BFF36F8F 	 isb 
 3060 004e BFF34F8F 	 dsb 
 3061              	
 3062              	
 3063              	.LVL339:
 3064              	 .thumb
 3065              	.L438:
 3066              	.LBE326:
 3067              	.LBE325:
1532:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3068              	 .loc 1 1532 0 discriminator 1
 3069 0052 FEE7     	 b .L438
 3070              	.LVL340:
 3071              	.L458:
 3072              	.LCFI40:
 3073              	 .cfi_def_cfa_offset 16
 3074              	 .cfi_offset 4,-16
 3075              	 .cfi_offset 5,-12
 3076              	 .cfi_offset 6,-8
 3077              	 .cfi_offset 14,-4
1562:../Dave/Generated/FREERTOS/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 3078              	 .loc 1 1562 0
 3079 0054 2946     	 mov r1,r5
 3080 0056 2046     	 mov r0,r4
1561:../Dave/Generated/FREERTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 3081              	 .loc 1 1561 0
 3082 0058 E568     	 ldr r5,[r4,#12]
 3083              	.LVL341:
1562:../Dave/Generated/FREERTOS/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 3084              	 .loc 1 1562 0
 3085 005a FFF7FEFF 	 bl prvCopyDataFromQueue
 3086              	.LVL342:
1563:../Dave/Generated/FREERTOS/queue.c **** 
 3087              	 .loc 1 1563 0
 3088 005e E560     	 str r5,[r4,#12]
 3089              	.LVL343:
1565:../Dave/Generated/FREERTOS/queue.c **** 		}
 3090              	 .loc 1 1565 0
 3091 0060 0120     	 movs r0,#1
 3092 0062 EBE7     	 b .L444
 3093              	.LVL344:
 3094              	.L460:
 3095              	.LCFI41:
 3096              	 .cfi_def_cfa_offset 0
 3097              	 .cfi_restore 4
 3098              	 .cfi_restore 5
 3099              	 .cfi_restore 6
 3100              	 .cfi_restore 14
1533:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3101              	 .loc 1 1533 0 discriminator 2
 3102 0064 002B     	 cmp r3,#0
 3103 0066 CFD0     	 beq .L440
 3104              	.LBB327:
 3105              	.LBB328:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 3106              	 .loc 2 240 0
 3107              	
 3108 0068 4FF0FC03 	 mov r3,#252
 3109 006c 83F31188 	 msr basepri,r3
 3110 0070 BFF36F8F 	 isb 
 3111 0074 BFF34F8F 	 dsb 
 3112              	
 3113              	
 3114              	.LVL345:
 3115              	 .thumb
 3116              	.L442:
 3117              	.LBE328:
 3118              	.LBE327:
1533:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3119              	 .loc 1 1533 0 discriminator 2
 3120 0078 FEE7     	 b .L442
 3121              	 .cfi_endproc
 3122              	.LFE142:
 3124 007a 00BF     	 .section .text.uxQueueMessagesWaiting,"ax",%progbits
 3125              	 .align 2
 3126              	 .global uxQueueMessagesWaiting
 3127              	 .thumb
 3128              	 .thumb_func
 3130              	uxQueueMessagesWaiting:
 3131              	.LFB143:
1580:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxReturn;
 3132              	 .loc 1 1580 0
 3133              	 .cfi_startproc
 3134              	 
 3135              	 
 3136              	.LVL346:
1583:../Dave/Generated/FREERTOS/queue.c **** 
 3137              	 .loc 1 1583 0
 3138 0000 40B1     	 cbz r0,.L466
1580:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxReturn;
 3139              	 .loc 1 1580 0
 3140 0002 10B5     	 push {r4,lr}
 3141              	.LCFI42:
 3142              	 .cfi_def_cfa_offset 8
 3143              	 .cfi_offset 4,-8
 3144              	 .cfi_offset 14,-4
 3145 0004 0446     	 mov r4,r0
1585:../Dave/Generated/FREERTOS/queue.c **** 	{
 3146              	 .loc 1 1585 0
 3147 0006 FFF7FEFF 	 bl vPortEnterCritical
 3148              	.LVL347:
1587:../Dave/Generated/FREERTOS/queue.c **** 	}
 3149              	 .loc 1 1587 0
 3150 000a A46B     	 ldr r4,[r4,#56]
 3151              	.LVL348:
1589:../Dave/Generated/FREERTOS/queue.c **** 
 3152              	 .loc 1 1589 0
 3153 000c FFF7FEFF 	 bl vPortExitCritical
 3154              	.LVL349:
1592:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 3155              	 .loc 1 1592 0
 3156 0010 2046     	 mov r0,r4
 3157 0012 10BD     	 pop {r4,pc}
 3158              	.LVL350:
 3159              	.L466:
 3160              	.LCFI43:
 3161              	 .cfi_def_cfa_offset 0
 3162              	 .cfi_restore 4
 3163              	 .cfi_restore 14
 3164              	.LBB329:
 3165              	.LBB330:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 3166              	 .loc 2 240 0
 3167              	
 3168 0014 4FF0FC03 	 mov r3,#252
 3169 0018 83F31188 	 msr basepri,r3
 3170 001c BFF36F8F 	 isb 
 3171 0020 BFF34F8F 	 dsb 
 3172              	
 3173              	
 3174              	.LVL351:
 3175              	 .thumb
 3176              	.L464:
 3177              	.LBE330:
 3178              	.LBE329:
1583:../Dave/Generated/FREERTOS/queue.c **** 
 3179              	 .loc 1 1583 0 discriminator 1
 3180 0024 FEE7     	 b .L464
 3181              	 .cfi_endproc
 3182              	.LFE143:
 3184 0026 00BF     	 .section .text.uxQueueSpacesAvailable,"ax",%progbits
 3185              	 .align 2
 3186              	 .global uxQueueSpacesAvailable
 3187              	 .thumb
 3188              	 .thumb_func
 3190              	uxQueueSpacesAvailable:
 3191              	.LFB144:
1596:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxReturn;
 3192              	 .loc 1 1596 0
 3193              	 .cfi_startproc
 3194              	 
 3195              	 
 3196              	.LVL352:
1601:../Dave/Generated/FREERTOS/queue.c **** 
 3197              	 .loc 1 1601 0
 3198 0000 50B1     	 cbz r0,.L471
1596:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxReturn;
 3199              	 .loc 1 1596 0
 3200 0002 10B5     	 push {r4,lr}
 3201              	.LCFI44:
 3202              	 .cfi_def_cfa_offset 8
 3203              	 .cfi_offset 4,-8
 3204              	 .cfi_offset 14,-4
 3205 0004 0446     	 mov r4,r0
1603:../Dave/Generated/FREERTOS/queue.c **** 	{
 3206              	 .loc 1 1603 0
 3207 0006 FFF7FEFF 	 bl vPortEnterCritical
 3208              	.LVL353:
1605:../Dave/Generated/FREERTOS/queue.c **** 	}
 3209              	 .loc 1 1605 0
 3210 000a A26B     	 ldr r2,[r4,#56]
 3211 000c E36B     	 ldr r3,[r4,#60]
 3212 000e 9C1A     	 subs r4,r3,r2
 3213              	.LVL354:
1607:../Dave/Generated/FREERTOS/queue.c **** 
 3214              	 .loc 1 1607 0
 3215 0010 FFF7FEFF 	 bl vPortExitCritical
 3216              	.LVL355:
1610:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 3217              	 .loc 1 1610 0
 3218 0014 2046     	 mov r0,r4
 3219 0016 10BD     	 pop {r4,pc}
 3220              	.LVL356:
 3221              	.L471:
 3222              	.LCFI45:
 3223              	 .cfi_def_cfa_offset 0
 3224              	 .cfi_restore 4
 3225              	 .cfi_restore 14
 3226              	.LBB331:
 3227              	.LBB332:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 3228              	 .loc 2 240 0
 3229              	
 3230 0018 4FF0FC03 	 mov r3,#252
 3231 001c 83F31188 	 msr basepri,r3
 3232 0020 BFF36F8F 	 isb 
 3233 0024 BFF34F8F 	 dsb 
 3234              	
 3235              	
 3236              	.LVL357:
 3237              	 .thumb
 3238              	.L469:
 3239              	.LBE332:
 3240              	.LBE331:
1601:../Dave/Generated/FREERTOS/queue.c **** 
 3241              	 .loc 1 1601 0 discriminator 1
 3242 0028 FEE7     	 b .L469
 3243              	 .cfi_endproc
 3244              	.LFE144:
 3246 002a 00BF     	 .section .text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 3247              	 .align 2
 3248              	 .global uxQueueMessagesWaitingFromISR
 3249              	 .thumb
 3250              	 .thumb_func
 3252              	uxQueueMessagesWaitingFromISR:
 3253              	.LFB145:
1614:../Dave/Generated/FREERTOS/queue.c **** UBaseType_t uxReturn;
 3254              	 .loc 1 1614 0
 3255              	 .cfi_startproc
 3256              	 
 3257              	 
 3258              	 
 3259              	.LVL358:
1617:../Dave/Generated/FREERTOS/queue.c **** 
 3260              	 .loc 1 1617 0
 3261 0000 08B1     	 cbz r0,.L475
1619:../Dave/Generated/FREERTOS/queue.c **** 
 3262              	 .loc 1 1619 0
 3263 0002 806B     	 ldr r0,[r0,#56]
 3264              	.LVL359:
1622:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 3265              	 .loc 1 1622 0
 3266 0004 7047     	 bx lr
 3267              	.LVL360:
 3268              	.L475:
 3269              	.LBB333:
 3270              	.LBB334:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 3271              	 .loc 2 240 0
 3272              	
 3273 0006 4FF0FC03 	 mov r3,#252
 3274 000a 83F31188 	 msr basepri,r3
 3275 000e BFF36F8F 	 isb 
 3276 0012 BFF34F8F 	 dsb 
 3277              	
 3278              	
 3279              	.LVL361:
 3280              	 .thumb
 3281              	.L474:
 3282              	.LBE334:
 3283              	.LBE333:
1617:../Dave/Generated/FREERTOS/queue.c **** 
 3284              	 .loc 1 1617 0 discriminator 1
 3285 0016 FEE7     	 b .L474
 3286              	 .cfi_endproc
 3287              	.LFE145:
 3289              	 .section .text.vQueueDelete,"ax",%progbits
 3290              	 .align 2
 3291              	 .global vQueueDelete
 3292              	 .thumb
 3293              	 .thumb_func
 3295              	vQueueDelete:
 3296              	.LFB146:
1626:../Dave/Generated/FREERTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 3297              	 .loc 1 1626 0
 3298              	 .cfi_startproc
 3299              	 
 3300              	 
 3301              	 
 3302              	.LVL362:
 3303 0000 10B4     	 push {r4}
 3304              	.LCFI46:
 3305              	 .cfi_def_cfa_offset 4
 3306              	 .cfi_offset 4,-4
1629:../Dave/Generated/FREERTOS/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3307              	 .loc 1 1629 0
 3308 0002 F0B1     	 cbz r0,.L489
 3309              	.LVL363:
 3310              	.LBB335:
 3311              	.LBB336:
2334:../Dave/Generated/FREERTOS/queue.c **** 			{
 3312              	 .loc 1 2334 0
 3313 0004 314B     	 ldr r3,.L491
 3314 0006 5A68     	 ldr r2,[r3,#4]
 3315 0008 9042     	 cmp r0,r2
 3316 000a 2ED0     	 beq .L481
 3317              	.LVL364:
 3318 000c DA68     	 ldr r2,[r3,#12]
 3319 000e 9042     	 cmp r0,r2
 3320 0010 33D0     	 beq .L482
 3321              	.LVL365:
 3322 0012 5A69     	 ldr r2,[r3,#20]
 3323 0014 9042     	 cmp r0,r2
 3324 0016 38D0     	 beq .L483
 3325              	.LVL366:
 3326 0018 DA69     	 ldr r2,[r3,#28]
 3327 001a 9042     	 cmp r0,r2
 3328 001c 3DD0     	 beq .L484
 3329              	.LVL367:
 3330 001e 5A6A     	 ldr r2,[r3,#36]
 3331 0020 9042     	 cmp r0,r2
 3332 0022 42D0     	 beq .L485
 3333              	.LVL368:
 3334 0024 DA6A     	 ldr r2,[r3,#44]
 3335 0026 9042     	 cmp r0,r2
 3336 0028 47D0     	 beq .L486
 3337              	.LVL369:
 3338 002a 5A6B     	 ldr r2,[r3,#52]
 3339 002c 9042     	 cmp r0,r2
 3340 002e 11D0     	 beq .L487
 3341              	.LVL370:
 3342 0030 DA6B     	 ldr r2,[r3,#60]
 3343 0032 9042     	 cmp r0,r2
2332:../Dave/Generated/FREERTOS/queue.c **** 		{
 3344              	 .loc 1 2332 0
 3345 0034 08BF     	 it eq
 3346 0036 0722     	 moveq r2,#7
2334:../Dave/Generated/FREERTOS/queue.c **** 			{
 3347              	 .loc 1 2334 0
 3348 0038 0DD0     	 beq .L479
 3349              	.LBE336:
 3350              	.LBE335:
1664:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 3351              	 .loc 1 1664 0
 3352 003a 5DF8044B 	 ldr r4,[sp],#4
 3353              	.LCFI47:
 3354              	 .cfi_remember_state
 3355              	 .cfi_restore 4
 3356              	 .cfi_def_cfa_offset 0
1642:../Dave/Generated/FREERTOS/queue.c **** 	}
 3357              	 .loc 1 1642 0
 3358 003e FFF7FEBF 	 b vPortFree
 3359              	.LVL371:
 3360              	.L489:
 3361              	.LCFI48:
 3362              	 .cfi_restore_state
 3363              	.LBB339:
 3364              	.LBB340:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 3365              	 .loc 2 240 0
 3366              	
 3367 0042 4FF0FC03 	 mov r3,#252
 3368 0046 83F31188 	 msr basepri,r3
 3369 004a BFF36F8F 	 isb 
 3370 004e BFF34F8F 	 dsb 
 3371              	
 3372              	
 3373              	.LVL372:
 3374              	 .thumb
 3375              	.L478:
 3376              	.LBE340:
 3377              	.LBE339:
1629:../Dave/Generated/FREERTOS/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3378              	 .loc 1 1629 0 discriminator 1
 3379 0052 FEE7     	 b .L478
 3380              	.LVL373:
 3381              	.L487:
 3382              	.LBB341:
 3383              	.LBB337:
2332:../Dave/Generated/FREERTOS/queue.c **** 		{
 3384              	 .loc 1 2332 0
 3385 0054 0622     	 movs r2,#6
 3386              	.LVL374:
 3387              	.L479:
2337:../Dave/Generated/FREERTOS/queue.c **** 
 3388              	 .loc 1 2337 0
 3389 0056 0021     	 movs r1,#0
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3390              	 .loc 1 2342 0
 3391 0058 03EBC204 	 add r4,r3,r2,lsl#3
2337:../Dave/Generated/FREERTOS/queue.c **** 
 3392              	 .loc 1 2337 0
 3393 005c 43F83210 	 str r1,[r3,r2,lsl#3]
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3394              	 .loc 1 2342 0
 3395 0060 6160     	 str r1,[r4,#4]
 3396              	.L490:
 3397              	.LBE337:
 3398              	.LBE341:
1664:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 3399              	 .loc 1 1664 0
 3400 0062 5DF8044B 	 ldr r4,[sp],#4
 3401              	.LCFI49:
 3402              	 .cfi_remember_state
 3403              	 .cfi_restore 4
 3404              	 .cfi_def_cfa_offset 0
1642:../Dave/Generated/FREERTOS/queue.c **** 	}
 3405              	 .loc 1 1642 0
 3406 0066 FFF7FEBF 	 b vPortFree
 3407              	.LVL375:
 3408              	.L481:
 3409              	.LCFI50:
 3410              	 .cfi_restore_state
 3411              	.LBB342:
 3412              	.LBB338:
2334:../Dave/Generated/FREERTOS/queue.c **** 			{
 3413              	 .loc 1 2334 0
 3414 006a 0022     	 movs r2,#0
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3415              	 .loc 1 2342 0
 3416 006c 03EBC204 	 add r4,r3,r2,lsl#3
2337:../Dave/Generated/FREERTOS/queue.c **** 
 3417              	 .loc 1 2337 0
 3418 0070 0021     	 movs r1,#0
 3419 0072 43F83210 	 str r1,[r3,r2,lsl#3]
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3420              	 .loc 1 2342 0
 3421 0076 6160     	 str r1,[r4,#4]
 3422 0078 F3E7     	 b .L490
 3423              	.LVL376:
 3424              	.L482:
2332:../Dave/Generated/FREERTOS/queue.c **** 		{
 3425              	 .loc 1 2332 0
 3426 007a 0122     	 movs r2,#1
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3427              	 .loc 1 2342 0
 3428 007c 03EBC204 	 add r4,r3,r2,lsl#3
2337:../Dave/Generated/FREERTOS/queue.c **** 
 3429              	 .loc 1 2337 0
 3430 0080 0021     	 movs r1,#0
 3431 0082 43F83210 	 str r1,[r3,r2,lsl#3]
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3432              	 .loc 1 2342 0
 3433 0086 6160     	 str r1,[r4,#4]
 3434 0088 EBE7     	 b .L490
 3435              	.LVL377:
 3436              	.L483:
2332:../Dave/Generated/FREERTOS/queue.c **** 		{
 3437              	 .loc 1 2332 0
 3438 008a 0222     	 movs r2,#2
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3439              	 .loc 1 2342 0
 3440 008c 03EBC204 	 add r4,r3,r2,lsl#3
2337:../Dave/Generated/FREERTOS/queue.c **** 
 3441              	 .loc 1 2337 0
 3442 0090 0021     	 movs r1,#0
 3443 0092 43F83210 	 str r1,[r3,r2,lsl#3]
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3444              	 .loc 1 2342 0
 3445 0096 6160     	 str r1,[r4,#4]
 3446 0098 E3E7     	 b .L490
 3447              	.LVL378:
 3448              	.L484:
2332:../Dave/Generated/FREERTOS/queue.c **** 		{
 3449              	 .loc 1 2332 0
 3450 009a 0322     	 movs r2,#3
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3451              	 .loc 1 2342 0
 3452 009c 03EBC204 	 add r4,r3,r2,lsl#3
2337:../Dave/Generated/FREERTOS/queue.c **** 
 3453              	 .loc 1 2337 0
 3454 00a0 0021     	 movs r1,#0
 3455 00a2 43F83210 	 str r1,[r3,r2,lsl#3]
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3456              	 .loc 1 2342 0
 3457 00a6 6160     	 str r1,[r4,#4]
 3458 00a8 DBE7     	 b .L490
 3459              	.LVL379:
 3460              	.L485:
2332:../Dave/Generated/FREERTOS/queue.c **** 		{
 3461              	 .loc 1 2332 0
 3462 00aa 0422     	 movs r2,#4
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3463              	 .loc 1 2342 0
 3464 00ac 03EBC204 	 add r4,r3,r2,lsl#3
2337:../Dave/Generated/FREERTOS/queue.c **** 
 3465              	 .loc 1 2337 0
 3466 00b0 0021     	 movs r1,#0
 3467 00b2 43F83210 	 str r1,[r3,r2,lsl#3]
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3468              	 .loc 1 2342 0
 3469 00b6 6160     	 str r1,[r4,#4]
 3470 00b8 D3E7     	 b .L490
 3471              	.LVL380:
 3472              	.L486:
2332:../Dave/Generated/FREERTOS/queue.c **** 		{
 3473              	 .loc 1 2332 0
 3474 00ba 0522     	 movs r2,#5
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3475              	 .loc 1 2342 0
 3476 00bc 03EBC204 	 add r4,r3,r2,lsl#3
2337:../Dave/Generated/FREERTOS/queue.c **** 
 3477              	 .loc 1 2337 0
 3478 00c0 0021     	 movs r1,#0
 3479 00c2 43F83210 	 str r1,[r3,r2,lsl#3]
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3480              	 .loc 1 2342 0
 3481 00c6 6160     	 str r1,[r4,#4]
 3482 00c8 CBE7     	 b .L490
 3483              	.L492:
 3484 00ca 00BF     	 .align 2
 3485              	.L491:
 3486 00cc 00000000 	 .word xQueueRegistry
 3487              	.LBE338:
 3488              	.LBE342:
 3489              	 .cfi_endproc
 3490              	.LFE146:
 3492              	 .section .text.uxQueueGetQueueNumber,"ax",%progbits
 3493              	 .align 2
 3494              	 .global uxQueueGetQueueNumber
 3495              	 .thumb
 3496              	 .thumb_func
 3498              	uxQueueGetQueueNumber:
 3499              	.LFB147:
1670:../Dave/Generated/FREERTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 3500              	 .loc 1 1670 0
 3501              	 .cfi_startproc
 3502              	 
 3503              	 
 3504              	 
 3505              	.LVL381:
1672:../Dave/Generated/FREERTOS/queue.c **** 
 3506              	 .loc 1 1672 0
 3507 0000 C06C     	 ldr r0,[r0,#76]
 3508              	.LVL382:
 3509 0002 7047     	 bx lr
 3510              	 .cfi_endproc
 3511              	.LFE147:
 3513              	 .section .text.vQueueSetQueueNumber,"ax",%progbits
 3514              	 .align 2
 3515              	 .global vQueueSetQueueNumber
 3516              	 .thumb
 3517              	 .thumb_func
 3519              	vQueueSetQueueNumber:
 3520              	.LFB148:
1680:../Dave/Generated/FREERTOS/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 3521              	 .loc 1 1680 0
 3522              	 .cfi_startproc
 3523              	 
 3524              	 
 3525              	 
 3526              	.LVL383:
1681:../Dave/Generated/FREERTOS/queue.c **** 	}
 3527              	 .loc 1 1681 0
 3528 0000 C164     	 str r1,[r0,#76]
 3529 0002 7047     	 bx lr
 3530              	 .cfi_endproc
 3531              	.LFE148:
 3533              	 .section .text.ucQueueGetQueueType,"ax",%progbits
 3534              	 .align 2
 3535              	 .global ucQueueGetQueueType
 3536              	 .thumb
 3537              	 .thumb_func
 3539              	ucQueueGetQueueType:
 3540              	.LFB149:
1690:../Dave/Generated/FREERTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
 3541              	 .loc 1 1690 0
 3542              	 .cfi_startproc
 3543              	 
 3544              	 
 3545              	 
 3546              	.LVL384:
1692:../Dave/Generated/FREERTOS/queue.c **** 
 3547              	 .loc 1 1692 0
 3548 0000 90F85000 	 ldrb r0,[r0,#80]
 3549              	.LVL385:
 3550 0004 7047     	 bx lr
 3551              	 .cfi_endproc
 3552              	.LFE149:
 3554 0006 00BF     	 .section .text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 3555              	 .align 2
 3556              	 .global xQueueIsQueueEmptyFromISR
 3557              	 .thumb
 3558              	 .thumb_func
 3560              	xQueueIsQueueEmptyFromISR:
 3561              	.LFB154:
1936:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn;
 3562              	 .loc 1 1936 0
 3563              	 .cfi_startproc
 3564              	 
 3565              	 
 3566              	 
 3567              	.LVL386:
1939:../Dave/Generated/FREERTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3568              	 .loc 1 1939 0
 3569 0000 20B1     	 cbz r0,.L499
1940:../Dave/Generated/FREERTOS/queue.c **** 	{
 3570              	 .loc 1 1940 0
 3571 0002 806B     	 ldr r0,[r0,#56]
 3572              	.LVL387:
1950:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 3573              	 .loc 1 1950 0
 3574 0004 B0FA80F0 	 clz r0,r0
 3575              	.LVL388:
 3576 0008 4009     	 lsrs r0,r0,#5
 3577 000a 7047     	 bx lr
 3578              	.LVL389:
 3579              	.L499:
 3580              	.LBB343:
 3581              	.LBB344:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 3582              	 .loc 2 240 0
 3583              	
 3584 000c 4FF0FC03 	 mov r3,#252
 3585 0010 83F31188 	 msr basepri,r3
 3586 0014 BFF36F8F 	 isb 
 3587 0018 BFF34F8F 	 dsb 
 3588              	
 3589              	
 3590              	.LVL390:
 3591              	 .thumb
 3592              	.L498:
 3593              	.LBE344:
 3594              	.LBE343:
1939:../Dave/Generated/FREERTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3595              	 .loc 1 1939 0 discriminator 1
 3596 001c FEE7     	 b .L498
 3597              	 .cfi_endproc
 3598              	.LFE154:
 3600 001e 00BF     	 .section .text.xQueueIsQueueFullFromISR,"ax",%progbits
 3601              	 .align 2
 3602              	 .global xQueueIsQueueFullFromISR
 3603              	 .thumb
 3604              	 .thumb_func
 3606              	xQueueIsQueueFullFromISR:
 3607              	.LFB156:
1975:../Dave/Generated/FREERTOS/queue.c **** BaseType_t xReturn;
 3608              	 .loc 1 1975 0
 3609              	 .cfi_startproc
 3610              	 
 3611              	 
 3612              	 
 3613              	.LVL391:
1978:../Dave/Generated/FREERTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 3614              	 .loc 1 1978 0
 3615 0000 30B1     	 cbz r0,.L503
1979:../Dave/Generated/FREERTOS/queue.c **** 	{
 3616              	 .loc 1 1979 0
 3617 0002 826B     	 ldr r2,[r0,#56]
 3618              	.LVL392:
 3619 0004 C06B     	 ldr r0,[r0,#60]
 3620              	.LVL393:
1989:../Dave/Generated/FREERTOS/queue.c **** /*-----------------------------------------------------------*/
 3621              	 .loc 1 1989 0
 3622 0006 101A     	 subs r0,r2,r0
 3623              	.LVL394:
 3624 0008 B0FA80F0 	 clz r0,r0
 3625 000c 4009     	 lsrs r0,r0,#5
 3626 000e 7047     	 bx lr
 3627              	.LVL395:
 3628              	.L503:
 3629              	.LBB345:
 3630              	.LBB346:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 3631              	 .loc 2 240 0
 3632              	
 3633 0010 4FF0FC03 	 mov r3,#252
 3634 0014 83F31188 	 msr basepri,r3
 3635 0018 BFF36F8F 	 isb 
 3636 001c BFF34F8F 	 dsb 
 3637              	
 3638              	
 3639              	.LVL396:
 3640              	 .thumb
 3641              	.L502:
 3642              	.LBE346:
 3643              	.LBE345:
1978:../Dave/Generated/FREERTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 3644              	 .loc 1 1978 0 discriminator 1
 3645 0020 FEE7     	 b .L502
 3646              	 .cfi_endproc
 3647              	.LFE156:
 3649 0022 00BF     	 .section .text.vQueueAddToRegistry,"ax",%progbits
 3650              	 .align 2
 3651              	 .global vQueueAddToRegistry
 3652              	 .thumb
 3653              	 .thumb_func
 3655              	vQueueAddToRegistry:
 3656              	.LFB157:
2270:../Dave/Generated/FREERTOS/queue.c **** 	UBaseType_t ux;
 3657              	 .loc 1 2270 0
 3658              	 .cfi_startproc
 3659              	 
 3660              	 
 3661              	 
 3662              	.LVL397:
2277:../Dave/Generated/FREERTOS/queue.c **** 			{
 3663              	 .loc 1 2277 0
 3664 0000 144B     	 ldr r3,.L516
 3665 0002 1A68     	 ldr r2,[r3]
2270:../Dave/Generated/FREERTOS/queue.c **** 	UBaseType_t ux;
 3666              	 .loc 1 2270 0
 3667 0004 10B4     	 push {r4}
 3668              	.LCFI51:
 3669              	 .cfi_def_cfa_offset 4
 3670              	 .cfi_offset 4,-4
2277:../Dave/Generated/FREERTOS/queue.c **** 			{
 3671              	 .loc 1 2277 0
 3672 0006 8AB1     	 cbz r2,.L505
 3673              	.LVL398:
 3674 0008 9A68     	 ldr r2,[r3,#8]
 3675 000a BAB1     	 cbz r2,.L508
 3676              	.LVL399:
 3677 000c 1A69     	 ldr r2,[r3,#16]
 3678 000e BAB1     	 cbz r2,.L509
 3679              	.LVL400:
 3680 0010 9A69     	 ldr r2,[r3,#24]
 3681 0012 BAB1     	 cbz r2,.L510
 3682              	.LVL401:
 3683 0014 1A6A     	 ldr r2,[r3,#32]
 3684 0016 BAB1     	 cbz r2,.L511
 3685              	.LVL402:
 3686 0018 9A6A     	 ldr r2,[r3,#40]
 3687 001a BAB1     	 cbz r2,.L512
 3688              	.LVL403:
 3689 001c 1A6B     	 ldr r2,[r3,#48]
 3690 001e 22B1     	 cbz r2,.L513
 3691              	.LVL404:
 3692 0020 9A6B     	 ldr r2,[r3,#56]
 3693 0022 AAB1     	 cbz r2,.L515
2291:../Dave/Generated/FREERTOS/queue.c **** 
 3694              	 .loc 1 2291 0
 3695 0024 5DF8044B 	 ldr r4,[sp],#4
 3696              	.LCFI52:
 3697              	 .cfi_remember_state
 3698              	 .cfi_restore 4
 3699              	 .cfi_def_cfa_offset 0
 3700 0028 7047     	 bx lr
 3701              	.LVL405:
 3702              	.L513:
 3703              	.LCFI53:
 3704              	 .cfi_restore_state
2275:../Dave/Generated/FREERTOS/queue.c **** 		{
 3705              	 .loc 1 2275 0
 3706 002a 0622     	 movs r2,#6
 3707              	.LVL406:
 3708              	.L505:
2281:../Dave/Generated/FREERTOS/queue.c **** 
 3709              	 .loc 1 2281 0
 3710 002c 03EBC204 	 add r4,r3,r2,lsl#3
2280:../Dave/Generated/FREERTOS/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 3711              	 .loc 1 2280 0
 3712 0030 43F83210 	 str r1,[r3,r2,lsl#3]
2281:../Dave/Generated/FREERTOS/queue.c **** 
 3713              	 .loc 1 2281 0
 3714 0034 6060     	 str r0,[r4,#4]
2291:../Dave/Generated/FREERTOS/queue.c **** 
 3715              	 .loc 1 2291 0
 3716 0036 5DF8044B 	 ldr r4,[sp],#4
 3717              	.LCFI54:
 3718              	 .cfi_remember_state
 3719              	 .cfi_restore 4
 3720              	 .cfi_def_cfa_offset 0
 3721 003a 7047     	 bx lr
 3722              	.LVL407:
 3723              	.L508:
 3724              	.LCFI55:
 3725              	 .cfi_restore_state
2275:../Dave/Generated/FREERTOS/queue.c **** 		{
 3726              	 .loc 1 2275 0
 3727 003c 0122     	 movs r2,#1
 3728 003e F5E7     	 b .L505
 3729              	.LVL408:
 3730              	.L509:
 3731 0040 0222     	 movs r2,#2
 3732 0042 F3E7     	 b .L505
 3733              	.LVL409:
 3734              	.L510:
 3735 0044 0322     	 movs r2,#3
 3736 0046 F1E7     	 b .L505
 3737              	.LVL410:
 3738              	.L511:
 3739 0048 0422     	 movs r2,#4
 3740 004a EFE7     	 b .L505
 3741              	.LVL411:
 3742              	.L512:
 3743 004c 0522     	 movs r2,#5
 3744 004e EDE7     	 b .L505
 3745              	.LVL412:
 3746              	.L515:
 3747 0050 0722     	 movs r2,#7
 3748 0052 EBE7     	 b .L505
 3749              	.L517:
 3750              	 .align 2
 3751              	.L516:
 3752 0054 00000000 	 .word xQueueRegistry
 3753              	 .cfi_endproc
 3754              	.LFE157:
 3756              	 .section .text.pcQueueGetName,"ax",%progbits
 3757              	 .align 2
 3758              	 .global pcQueueGetName
 3759              	 .thumb
 3760              	 .thumb_func
 3762              	pcQueueGetName:
 3763              	.LFB158:
2299:../Dave/Generated/FREERTOS/queue.c **** 	UBaseType_t ux;
 3764              	 .loc 1 2299 0
 3765              	 .cfi_startproc
 3766              	 
 3767              	 
 3768              	 
 3769              	.LVL413:
2307:../Dave/Generated/FREERTOS/queue.c **** 			{
 3770              	 .loc 1 2307 0
 3771 0000 164B     	 ldr r3,.L530
 3772 0002 5A68     	 ldr r2,[r3,#4]
 3773 0004 8242     	 cmp r2,r0
 3774 0006 1CD0     	 beq .L521
 3775              	.LVL414:
 3776 0008 DA68     	 ldr r2,[r3,#12]
 3777 000a 8242     	 cmp r2,r0
 3778 000c 1BD0     	 beq .L522
 3779              	.LVL415:
 3780 000e 5A69     	 ldr r2,[r3,#20]
 3781 0010 8242     	 cmp r2,r0
 3782 0012 1AD0     	 beq .L523
 3783              	.LVL416:
 3784 0014 DA69     	 ldr r2,[r3,#28]
 3785 0016 8242     	 cmp r2,r0
 3786 0018 19D0     	 beq .L524
 3787              	.LVL417:
 3788 001a 5A6A     	 ldr r2,[r3,#36]
 3789 001c 8242     	 cmp r2,r0
 3790 001e 18D0     	 beq .L525
 3791              	.LVL418:
 3792 0020 DA6A     	 ldr r2,[r3,#44]
 3793 0022 8242     	 cmp r2,r0
 3794 0024 17D0     	 beq .L526
 3795              	.LVL419:
 3796 0026 5A6B     	 ldr r2,[r3,#52]
 3797 0028 8242     	 cmp r2,r0
 3798 002a 06D0     	 beq .L527
 3799              	.LVL420:
 3800 002c DA6B     	 ldr r2,[r3,#60]
 3801 002e 8242     	 cmp r2,r0
2305:../Dave/Generated/FREERTOS/queue.c **** 		{
 3802              	 .loc 1 2305 0
 3803 0030 08BF     	 it eq
 3804 0032 0722     	 moveq r2,#7
2307:../Dave/Generated/FREERTOS/queue.c **** 			{
 3805              	 .loc 1 2307 0
 3806 0034 02D0     	 beq .L519
2301:../Dave/Generated/FREERTOS/queue.c **** 
 3807              	 .loc 1 2301 0
 3808 0036 0020     	 movs r0,#0
 3809              	.LVL421:
2319:../Dave/Generated/FREERTOS/queue.c **** 
 3810              	 .loc 1 2319 0
 3811 0038 7047     	 bx lr
 3812              	.LVL422:
 3813              	.L527:
2305:../Dave/Generated/FREERTOS/queue.c **** 		{
 3814              	 .loc 1 2305 0
 3815 003a 0622     	 movs r2,#6
 3816              	.LVL423:
 3817              	.L519:
2309:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3818              	 .loc 1 2309 0
 3819 003c 53F83200 	 ldr r0,[r3,r2,lsl#3]
 3820              	.LVL424:
2310:../Dave/Generated/FREERTOS/queue.c **** 			}
 3821              	 .loc 1 2310 0
 3822 0040 7047     	 bx lr
 3823              	.LVL425:
 3824              	.L521:
2305:../Dave/Generated/FREERTOS/queue.c **** 		{
 3825              	 .loc 1 2305 0
 3826 0042 0022     	 movs r2,#0
 3827 0044 FAE7     	 b .L519
 3828              	.LVL426:
 3829              	.L522:
 3830 0046 0122     	 movs r2,#1
 3831 0048 F8E7     	 b .L519
 3832              	.LVL427:
 3833              	.L523:
 3834 004a 0222     	 movs r2,#2
 3835 004c F6E7     	 b .L519
 3836              	.LVL428:
 3837              	.L524:
 3838 004e 0322     	 movs r2,#3
 3839 0050 F4E7     	 b .L519
 3840              	.LVL429:
 3841              	.L525:
 3842 0052 0422     	 movs r2,#4
 3843 0054 F2E7     	 b .L519
 3844              	.LVL430:
 3845              	.L526:
 3846 0056 0522     	 movs r2,#5
 3847 0058 F0E7     	 b .L519
 3848              	.L531:
 3849 005a 00BF     	 .align 2
 3850              	.L530:
 3851 005c 00000000 	 .word xQueueRegistry
 3852              	 .cfi_endproc
 3853              	.LFE158:
 3855              	 .section .text.vQueueUnregisterQueue,"ax",%progbits
 3856              	 .align 2
 3857              	 .global vQueueUnregisterQueue
 3858              	 .thumb
 3859              	 .thumb_func
 3861              	vQueueUnregisterQueue:
 3862              	.LFB159:
2327:../Dave/Generated/FREERTOS/queue.c **** 	UBaseType_t ux;
 3863              	 .loc 1 2327 0
 3864              	 .cfi_startproc
 3865              	 
 3866              	 
 3867              	 
 3868              	.LVL431:
2334:../Dave/Generated/FREERTOS/queue.c **** 			{
 3869              	 .loc 1 2334 0
 3870 0000 174B     	 ldr r3,.L542
 3871 0002 5A68     	 ldr r2,[r3,#4]
 3872 0004 8242     	 cmp r2,r0
 3873 0006 1FD0     	 beq .L535
 3874              	.LVL432:
 3875 0008 DA68     	 ldr r2,[r3,#12]
 3876 000a 8242     	 cmp r2,r0
 3877 000c 1ED0     	 beq .L536
 3878              	.LVL433:
 3879 000e 5A69     	 ldr r2,[r3,#20]
 3880 0010 8242     	 cmp r2,r0
 3881 0012 1DD0     	 beq .L537
 3882              	.LVL434:
 3883 0014 DA69     	 ldr r2,[r3,#28]
 3884 0016 8242     	 cmp r2,r0
 3885 0018 1CD0     	 beq .L538
 3886              	.LVL435:
 3887 001a 5A6A     	 ldr r2,[r3,#36]
 3888 001c 8242     	 cmp r2,r0
 3889 001e 1BD0     	 beq .L539
 3890              	.LVL436:
 3891 0020 DA6A     	 ldr r2,[r3,#44]
 3892 0022 8242     	 cmp r2,r0
 3893 0024 1AD0     	 beq .L540
 3894              	.LVL437:
 3895 0026 5A6B     	 ldr r2,[r3,#52]
 3896 0028 8242     	 cmp r2,r0
 3897 002a 05D0     	 beq .L541
 3898              	.LVL438:
 3899 002c DA6B     	 ldr r2,[r3,#60]
 3900 002e 8242     	 cmp r2,r0
2332:../Dave/Generated/FREERTOS/queue.c **** 		{
 3901              	 .loc 1 2332 0
 3902 0030 08BF     	 it eq
 3903 0032 0722     	 moveq r2,#7
2334:../Dave/Generated/FREERTOS/queue.c **** 			{
 3904              	 .loc 1 2334 0
 3905 0034 01D0     	 beq .L533
 3906 0036 7047     	 bx lr
 3907              	.LVL439:
 3908              	.L541:
2332:../Dave/Generated/FREERTOS/queue.c **** 		{
 3909              	 .loc 1 2332 0
 3910 0038 0622     	 movs r2,#6
 3911              	.LVL440:
 3912              	.L533:
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3913              	 .loc 1 2342 0
 3914 003a 03EBC200 	 add r0,r3,r2,lsl#3
 3915              	.LVL441:
2337:../Dave/Generated/FREERTOS/queue.c **** 
 3916              	 .loc 1 2337 0
 3917 003e 0021     	 movs r1,#0
 3918 0040 43F83210 	 str r1,[r3,r2,lsl#3]
2342:../Dave/Generated/FREERTOS/queue.c **** 				break;
 3919              	 .loc 1 2342 0
 3920 0044 4160     	 str r1,[r0,#4]
 3921 0046 7047     	 bx lr
 3922              	.LVL442:
 3923              	.L535:
2332:../Dave/Generated/FREERTOS/queue.c **** 		{
 3924              	 .loc 1 2332 0
 3925 0048 0022     	 movs r2,#0
 3926 004a F6E7     	 b .L533
 3927              	.LVL443:
 3928              	.L536:
 3929 004c 0122     	 movs r2,#1
 3930 004e F4E7     	 b .L533
 3931              	.LVL444:
 3932              	.L537:
 3933 0050 0222     	 movs r2,#2
 3934 0052 F2E7     	 b .L533
 3935              	.LVL445:
 3936              	.L538:
 3937 0054 0322     	 movs r2,#3
 3938 0056 F0E7     	 b .L533
 3939              	.LVL446:
 3940              	.L539:
 3941 0058 0422     	 movs r2,#4
 3942 005a EEE7     	 b .L533
 3943              	.LVL447:
 3944              	.L540:
 3945 005c 0522     	 movs r2,#5
 3946 005e ECE7     	 b .L533
 3947              	.L543:
 3948              	 .align 2
 3949              	.L542:
 3950 0060 00000000 	 .word xQueueRegistry
 3951              	 .cfi_endproc
 3952              	.LFE159:
 3954              	 .section .text.vQueueWaitForMessageRestricted,"ax",%progbits
 3955              	 .align 2
 3956              	 .global vQueueWaitForMessageRestricted
 3957              	 .thumb
 3958              	 .thumb_func
 3960              	vQueueWaitForMessageRestricted:
 3961              	.LFB160:
2359:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 3962              	 .loc 1 2359 0
 3963              	 .cfi_startproc
 3964              	 
 3965              	 
 3966              	.LVL448:
 3967 0000 70B5     	 push {r4,r5,r6,lr}
 3968              	.LCFI56:
 3969              	 .cfi_def_cfa_offset 16
 3970              	 .cfi_offset 4,-16
 3971              	 .cfi_offset 5,-12
 3972              	 .cfi_offset 6,-8
 3973              	 .cfi_offset 14,-4
2359:../Dave/Generated/FREERTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 3974              	 .loc 1 2359 0
 3975 0002 0446     	 mov r4,r0
 3976              	.LVL449:
 3977 0004 0E46     	 mov r6,r1
 3978 0006 1546     	 mov r5,r2
2376:../Dave/Generated/FREERTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3979              	 .loc 1 2376 0
 3980 0008 FFF7FEFF 	 bl vPortEnterCritical
 3981              	.LVL450:
 3982 000c 94F84430 	 ldrb r3,[r4,#68]
 3983 0010 FF2B     	 cmp r3,#255
 3984 0012 04BF     	 itt eq
 3985 0014 0023     	 moveq r3,#0
 3986 0016 84F84430 	 strbeq r3,[r4,#68]
 3987 001a 94F84530 	 ldrb r3,[r4,#69]
 3988 001e FF2B     	 cmp r3,#255
 3989 0020 04BF     	 itt eq
 3990 0022 0023     	 moveq r3,#0
 3991 0024 84F84530 	 strbeq r3,[r4,#69]
 3992 0028 FFF7FEFF 	 bl vPortExitCritical
 3993              	.LVL451:
2377:../Dave/Generated/FREERTOS/queue.c **** 		{
 3994              	 .loc 1 2377 0
 3995 002c A36B     	 ldr r3,[r4,#56]
 3996 002e 2BB9     	 cbnz r3,.L547
2380:../Dave/Generated/FREERTOS/queue.c **** 		}
 3997              	 .loc 1 2380 0
 3998 0030 3146     	 mov r1,r6
 3999 0032 2A46     	 mov r2,r5
 4000 0034 04F12400 	 add r0,r4,#36
 4001 0038 FFF7FEFF 	 bl vTaskPlaceOnEventListRestricted
 4002              	.LVL452:
 4003              	.L547:
2386:../Dave/Generated/FREERTOS/queue.c **** 	}
 4004              	 .loc 1 2386 0
 4005 003c 2046     	 mov r0,r4
2387:../Dave/Generated/FREERTOS/queue.c **** 
 4006              	 .loc 1 2387 0
 4007 003e BDE87040 	 pop {r4,r5,r6,lr}
 4008              	.LCFI57:
 4009              	 .cfi_restore 14
 4010              	 .cfi_restore 6
 4011              	 .cfi_restore 5
 4012              	 .cfi_restore 4
 4013              	 .cfi_def_cfa_offset 0
 4014              	.LVL453:
2386:../Dave/Generated/FREERTOS/queue.c **** 	}
 4015              	 .loc 1 2386 0
 4016 0042 FFF7FEBF 	 b prvUnlockQueue
 4017              	.LVL454:
 4018              	 .cfi_endproc
 4019              	.LFE160:
 4021 0046 00BF     	 .section .text.xQueueCreateSet,"ax",%progbits
 4022              	 .align 2
 4023              	 .global xQueueCreateSet
 4024              	 .thumb
 4025              	 .thumb_func
 4027              	xQueueCreateSet:
 4028              	.LFB161:
2395:../Dave/Generated/FREERTOS/queue.c **** 	QueueSetHandle_t pxQueue;
 4029              	 .loc 1 2395 0
 4030              	 .cfi_startproc
 4031              	 
 4032              	 
 4033              	.LVL455:
 4034 0000 38B5     	 push {r3,r4,r5,lr}
 4035              	.LCFI58:
 4036              	 .cfi_def_cfa_offset 16
 4037              	 .cfi_offset 3,-16
 4038              	 .cfi_offset 4,-12
 4039              	 .cfi_offset 5,-8
 4040              	 .cfi_offset 14,-4
 4041              	.LBB359:
 4042              	.LBB360:
 392:../Dave/Generated/FREERTOS/queue.c **** 
 4043              	 .loc 1 392 0
 4044 0002 40B9     	 cbnz r0,.L550
 4045              	.LBB361:
 4046              	.LBB362:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 4047              	 .loc 2 240 0
 4048              	
 4049 0004 4FF0FC03 	 mov r3,#252
 4050 0008 83F31188 	 msr basepri,r3
 4051 000c BFF36F8F 	 isb 
 4052 0010 BFF34F8F 	 dsb 
 4053              	
 4054              	
 4055              	.LVL456:
 4056              	 .thumb
 4057              	.L551:
 4058 0014 FEE7     	 b .L551
 4059              	.L550:
 4060              	.LVL457:
 4061 0016 0546     	 mov r5,r0
 4062              	.LBE362:
 4063              	.LBE361:
 403:../Dave/Generated/FREERTOS/queue.c **** 		}
 4064              	 .loc 1 403 0
 4065 0018 8000     	 lsls r0,r0,#2
 4066              	.LVL458:
 406:../Dave/Generated/FREERTOS/queue.c **** 
 4067              	 .loc 1 406 0
 4068 001a 5430     	 adds r0,r0,#84
 4069              	.LVL459:
 4070 001c FFF7FEFF 	 bl pvPortMalloc
 4071              	.LVL460:
 408:../Dave/Generated/FREERTOS/queue.c **** 		{
 4072              	 .loc 1 408 0
 4073 0020 0446     	 mov r4,r0
 4074 0022 30B3     	 cbz r0,.L552
 4075              	.LVL461:
 412:../Dave/Generated/FREERTOS/queue.c **** 
 4076              	 .loc 1 412 0
 4077 0024 00F15402 	 add r2,r0,#84
 4078              	.LVL462:
 4079              	.LBB363:
 4080              	.LBB364:
 455:../Dave/Generated/FREERTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 4081              	 .loc 1 455 0
 4082 0028 0423     	 movs r3,#4
 454:../Dave/Generated/FREERTOS/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 4083              	 .loc 1 454 0
 4084 002a C563     	 str r5,[r0,#60]
 449:../Dave/Generated/FREERTOS/queue.c **** 	}
 4085              	 .loc 1 449 0
 4086 002c 0260     	 str r2,[r0]
 455:../Dave/Generated/FREERTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 4087              	 .loc 1 455 0
 4088 002e 0364     	 str r3,[r0,#64]
 4089              	.LVL463:
 4090              	.LBB365:
 4091              	.LBB366:
 285:../Dave/Generated/FREERTOS/queue.c **** 	{
 4092              	 .loc 1 285 0
 4093 0030 FFF7FEFF 	 bl vPortEnterCritical
 4094              	.LVL464:
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 4095              	 .loc 1 287 0
 4096 0034 226C     	 ldr r2,[r4,#64]
 4097 0036 E36B     	 ldr r3,[r4,#60]
 4098 0038 2168     	 ldr r1,[r4]
 289:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 4099              	 .loc 1 289 0
 4100 003a A160     	 str r1,[r4,#8]
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 4101              	 .loc 1 287 0
 4102 003c 03FB02F3 	 mul r3,r3,r2
 290:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 4103              	 .loc 1 290 0
 4104 0040 9A1A     	 subs r2,r3,r2
 4105 0042 0A44     	 add r2,r2,r1
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 4106              	 .loc 1 287 0
 4107 0044 0B44     	 add r3,r3,r1
 288:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 4108              	 .loc 1 288 0
 4109 0046 0025     	 movs r5,#0
 4110              	.LVL465:
 291:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 4111              	 .loc 1 291 0
 4112 0048 FF21     	 movs r1,#255
 290:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 4113              	 .loc 1 290 0
 4114 004a E260     	 str r2,[r4,#12]
 287:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 4115              	 .loc 1 287 0
 4116 004c 6360     	 str r3,[r4,#4]
 288:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 4117              	 .loc 1 288 0
 4118 004e A563     	 str r5,[r4,#56]
 320:../Dave/Generated/FREERTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 4119              	 .loc 1 320 0
 4120 0050 04F11000 	 add r0,r4,#16
 291:../Dave/Generated/FREERTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 4121              	 .loc 1 291 0
 4122 0054 84F84410 	 strb r1,[r4,#68]
 292:../Dave/Generated/FREERTOS/queue.c **** 
 4123              	 .loc 1 292 0
 4124 0058 84F84510 	 strb r1,[r4,#69]
 320:../Dave/Generated/FREERTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 4125              	 .loc 1 320 0
 4126 005c FFF7FEFF 	 bl vListInitialise
 4127              	.LVL466:
 321:../Dave/Generated/FREERTOS/queue.c **** 		}
 4128              	 .loc 1 321 0
 4129 0060 04F12400 	 add r0,r4,#36
 4130 0064 FFF7FEFF 	 bl vListInitialise
 4131              	.LVL467:
 324:../Dave/Generated/FREERTOS/queue.c **** 
 4132              	 .loc 1 324 0
 4133 0068 FFF7FEFF 	 bl vPortExitCritical
 4134              	.LVL468:
 4135              	.LBE366:
 4136              	.LBE365:
 460:../Dave/Generated/FREERTOS/queue.c **** 	}
 4137              	 .loc 1 460 0
 4138 006c 84F85050 	 strb r5,[r4,#80]
 466:../Dave/Generated/FREERTOS/queue.c **** 	}
 4139              	 .loc 1 466 0
 4140 0070 A564     	 str r5,[r4,#72]
 4141              	.LVL469:
 4142              	.L552:
 4143              	.LBE364:
 4144              	.LBE363:
 4145              	.LBE360:
 4146              	.LBE359:
2401:../Dave/Generated/FREERTOS/queue.c **** 
 4147              	 .loc 1 2401 0
 4148 0072 2046     	 mov r0,r4
 4149 0074 38BD     	 pop {r3,r4,r5,pc}
 4150              	 .cfi_endproc
 4151              	.LFE161:
 4153 0076 00BF     	 .section .text.xQueueAddToSet,"ax",%progbits
 4154              	 .align 2
 4155              	 .global xQueueAddToSet
 4156              	 .thumb
 4157              	 .thumb_func
 4159              	xQueueAddToSet:
 4160              	.LFB162:
2409:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xReturn;
 4161              	 .loc 1 2409 0
 4162              	 .cfi_startproc
 4163              	 
 4164              	 
 4165              	.LVL470:
 4166 0000 38B5     	 push {r3,r4,r5,lr}
 4167              	.LCFI59:
 4168              	 .cfi_def_cfa_offset 16
 4169              	 .cfi_offset 3,-16
 4170              	 .cfi_offset 4,-12
 4171              	 .cfi_offset 5,-8
 4172              	 .cfi_offset 14,-4
2409:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xReturn;
 4173              	 .loc 1 2409 0
 4174 0002 0446     	 mov r4,r0
 4175 0004 0D46     	 mov r5,r1
2412:../Dave/Generated/FREERTOS/queue.c **** 		{
 4176              	 .loc 1 2412 0
 4177 0006 FFF7FEFF 	 bl vPortEnterCritical
 4178              	.LVL471:
2414:../Dave/Generated/FREERTOS/queue.c **** 			{
 4179              	 .loc 1 2414 0
 4180 000a A36C     	 ldr r3,[r4,#72]
 4181 000c 23B1     	 cbz r3,.L562
2417:../Dave/Generated/FREERTOS/queue.c **** 			}
 4182              	 .loc 1 2417 0
 4183 000e 0024     	 movs r4,#0
 4184              	.LVL472:
 4185              	.L558:
2431:../Dave/Generated/FREERTOS/queue.c **** 
 4186              	 .loc 1 2431 0
 4187 0010 FFF7FEFF 	 bl vPortExitCritical
 4188              	.LVL473:
2434:../Dave/Generated/FREERTOS/queue.c **** 
 4189              	 .loc 1 2434 0
 4190 0014 2046     	 mov r0,r4
 4191 0016 38BD     	 pop {r3,r4,r5,pc}
 4192              	.LVL474:
 4193              	.L562:
2419:../Dave/Generated/FREERTOS/queue.c **** 			{
 4194              	 .loc 1 2419 0
 4195 0018 A26B     	 ldr r2,[r4,#56]
 4196 001a 2AB9     	 cbnz r2,.L560
2427:../Dave/Generated/FREERTOS/queue.c **** 				xReturn = pdPASS;
 4197              	 .loc 1 2427 0
 4198 001c A564     	 str r5,[r4,#72]
 4199              	.LVL475:
2428:../Dave/Generated/FREERTOS/queue.c **** 			}
 4200              	 .loc 1 2428 0
 4201 001e 0124     	 movs r4,#1
 4202              	.LVL476:
2431:../Dave/Generated/FREERTOS/queue.c **** 
 4203              	 .loc 1 2431 0
 4204 0020 FFF7FEFF 	 bl vPortExitCritical
 4205              	.LVL477:
2434:../Dave/Generated/FREERTOS/queue.c **** 
 4206              	 .loc 1 2434 0
 4207 0024 2046     	 mov r0,r4
 4208 0026 38BD     	 pop {r3,r4,r5,pc}
 4209              	.LVL478:
 4210              	.L560:
2417:../Dave/Generated/FREERTOS/queue.c **** 			}
 4211              	 .loc 1 2417 0
 4212 0028 1C46     	 mov r4,r3
 4213              	.LVL479:
 4214 002a F1E7     	 b .L558
 4215              	 .cfi_endproc
 4216              	.LFE162:
 4218              	 .section .text.xQueueRemoveFromSet,"ax",%progbits
 4219              	 .align 2
 4220              	 .global xQueueRemoveFromSet
 4221              	 .thumb
 4222              	 .thumb_func
 4224              	xQueueRemoveFromSet:
 4225              	.LFB163:
2442:../Dave/Generated/FREERTOS/queue.c **** 	BaseType_t xReturn;
 4226              	 .loc 1 2442 0
 4227              	 .cfi_startproc
 4228              	 
 4229              	 
 4230              	.LVL480:
 4231 0000 38B5     	 push {r3,r4,r5,lr}
 4232              	.LCFI60:
 4233              	 .cfi_def_cfa_offset 16
 4234              	 .cfi_offset 3,-16
 4235              	 .cfi_offset 4,-12
 4236              	 .cfi_offset 5,-8
 4237              	 .cfi_offset 14,-4
2446:../Dave/Generated/FREERTOS/queue.c **** 		{
 4238              	 .loc 1 2446 0
 4239 0002 836C     	 ldr r3,[r0,#72]
 4240 0004 8B42     	 cmp r3,r1
 4241 0006 01D0     	 beq .L568
 4242              	.L566:
2449:../Dave/Generated/FREERTOS/queue.c **** 		}
 4243              	 .loc 1 2449 0
 4244 0008 0020     	 movs r0,#0
 4245              	.LVL481:
2470:../Dave/Generated/FREERTOS/queue.c **** 
 4246              	 .loc 1 2470 0
 4247 000a 38BD     	 pop {r3,r4,r5,pc}
 4248              	.LVL482:
 4249              	.L568:
2451:../Dave/Generated/FREERTOS/queue.c **** 		{
 4250              	 .loc 1 2451 0
 4251 000c 856B     	 ldr r5,[r0,#56]
 4252 000e 002D     	 cmp r5,#0
 4253 0010 FAD1     	 bne .L566
 4254 0012 0446     	 mov r4,r0
2460:../Dave/Generated/FREERTOS/queue.c **** 			{
 4255              	 .loc 1 2460 0
 4256 0014 FFF7FEFF 	 bl vPortEnterCritical
 4257              	.LVL483:
2463:../Dave/Generated/FREERTOS/queue.c **** 			}
 4258              	 .loc 1 2463 0
 4259 0018 A564     	 str r5,[r4,#72]
2465:../Dave/Generated/FREERTOS/queue.c **** 			xReturn = pdPASS;
 4260              	 .loc 1 2465 0
 4261 001a FFF7FEFF 	 bl vPortExitCritical
 4262              	.LVL484:
2466:../Dave/Generated/FREERTOS/queue.c **** 		}
 4263              	 .loc 1 2466 0
 4264 001e 0120     	 movs r0,#1
 4265 0020 38BD     	 pop {r3,r4,r5,pc}
 4266              	 .cfi_endproc
 4267              	.LFE163:
 4269 0022 00BF     	 .section .text.xQueueSelectFromSet,"ax",%progbits
 4270              	 .align 2
 4271              	 .global xQueueSelectFromSet
 4272              	 .thumb
 4273              	 .thumb_func
 4275              	xQueueSelectFromSet:
 4276              	.LFB164:
2478:../Dave/Generated/FREERTOS/queue.c **** 	QueueSetMemberHandle_t xReturn = NULL;
 4277              	 .loc 1 2478 0
 4278              	 .cfi_startproc
 4279              	 
 4280              	 
 4281              	.LVL485:
 4282 0000 10B5     	 push {r4,lr}
 4283              	.LCFI61:
 4284              	 .cfi_def_cfa_offset 8
 4285              	 .cfi_offset 4,-8
 4286              	 .cfi_offset 14,-4
 4287 0002 82B0     	 sub sp,sp,#8
 4288              	.LCFI62:
 4289              	 .cfi_def_cfa_offset 16
2479:../Dave/Generated/FREERTOS/queue.c **** 
 4290              	 .loc 1 2479 0
 4291 0004 02AC     	 add r4,sp,#8
 4292 0006 0023     	 movs r3,#0
 4293 0008 44F8043D 	 str r3,[r4,#-4]!
2478:../Dave/Generated/FREERTOS/queue.c **** 	QueueSetMemberHandle_t xReturn = NULL;
 4294              	 .loc 1 2478 0
 4295 000c 0A46     	 mov r2,r1
2481:../Dave/Generated/FREERTOS/queue.c **** 		return xReturn;
 4296              	 .loc 1 2481 0
 4297 000e 2146     	 mov r1,r4
 4298              	.LVL486:
 4299 0010 FFF7FEFF 	 bl xQueueGenericReceive
 4300              	.LVL487:
2483:../Dave/Generated/FREERTOS/queue.c **** 
 4301              	 .loc 1 2483 0
 4302 0014 0198     	 ldr r0,[sp,#4]
 4303 0016 02B0     	 add sp,sp,#8
 4304              	.LCFI63:
 4305              	 .cfi_def_cfa_offset 8
 4306              	 
 4307 0018 10BD     	 pop {r4,pc}
 4308              	 .cfi_endproc
 4309              	.LFE164:
 4311 001a 00BF     	 .section .text.xQueueSelectFromSetFromISR,"ax",%progbits
 4312              	 .align 2
 4313              	 .global xQueueSelectFromSetFromISR
 4314              	 .thumb
 4315              	 .thumb_func
 4317              	xQueueSelectFromSetFromISR:
 4318              	.LFB165:
2491:../Dave/Generated/FREERTOS/queue.c **** 	QueueSetMemberHandle_t xReturn = NULL;
 4319              	 .loc 1 2491 0
 4320              	 .cfi_startproc
 4321              	 
 4322              	 
 4323              	.LVL488:
 4324 0000 00B5     	 push {lr}
 4325              	.LCFI64:
 4326              	 .cfi_def_cfa_offset 4
 4327              	 .cfi_offset 14,-4
 4328 0002 83B0     	 sub sp,sp,#12
 4329              	.LCFI65:
 4330              	 .cfi_def_cfa_offset 16
2492:../Dave/Generated/FREERTOS/queue.c **** 
 4331              	 .loc 1 2492 0
 4332 0004 0022     	 movs r2,#0
 4333 0006 0192     	 str r2,[sp,#4]
 4334              	.LVL489:
 4335              	.LBB373:
 4336              	.LBB374:
1440:../Dave/Generated/FREERTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 4337              	 .loc 1 1440 0
 4338 0008 30B1     	 cbz r0,.L575
 4339 000a 01A9     	 add r1,sp,#4
 4340              	.LVL490:
 4341 000c FFF7FEFF 	 bl xQueueReceiveFromISR.part.2
 4342              	.LVL491:
 4343              	.LBE374:
 4344              	.LBE373:
2496:../Dave/Generated/FREERTOS/queue.c **** 
 4345              	 .loc 1 2496 0
 4346 0010 0198     	 ldr r0,[sp,#4]
 4347 0012 03B0     	 add sp,sp,#12
 4348              	.LCFI66:
 4349              	 .cfi_remember_state
 4350              	 .cfi_def_cfa_offset 4
 4351              	 
 4352 0014 5DF804FB 	 ldr pc,[sp],#4
 4353              	.LVL492:
 4354              	.L575:
 4355              	.LCFI67:
 4356              	 .cfi_restore_state
 4357              	.LBB378:
 4358              	.LBB377:
 4359              	.LBB375:
 4360              	.LBB376:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 4361              	 .loc 2 240 0
 4362              	
 4363 0018 4FF0FC03 	 mov r3,#252
 4364 001c 83F31188 	 msr basepri,r3
 4365 0020 BFF36F8F 	 isb 
 4366 0024 BFF34F8F 	 dsb 
 4367              	
 4368              	
 4369              	.LVL493:
 4370              	 .thumb
 4371              	.L573:
 4372 0028 FEE7     	 b .L573
 4373              	.LBE376:
 4374              	.LBE375:
 4375              	.LBE377:
 4376              	.LBE378:
 4377              	 .cfi_endproc
 4378              	.LFE165:
 4380              	 .comm xQueueRegistry,64,4
 4381 002a 00BF     	 .text
 4382              	.Letext0:
 4383              	 .file 3 "c:\\dave 4\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 4384              	 .file 4 "c:\\dave 4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 4385              	 .file 5 "c:\\dave 4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 4386              	 .file 6 "../Dave/Generated/FREERTOS/list.h"
 4387              	 .file 7 "../Dave/Generated/FREERTOS/task.h"
 4388              	 .file 8 "../Dave/Generated/FREERTOS/queue.h"
 4389              	 .file 9 "C:/Workspaces/Dave 4/CTPOT_test1/Libraries/CMSIS/Include/core_cm4.h"
 4390              	 .file 10 "../Dave/Generated/FREERTOS/portable.h"
DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
    {standard input}:20     .text.unlikely.prvCopyDataToQueue:00000000 $t
    {standard input}:24     .text.unlikely.prvCopyDataToQueue:00000000 prvCopyDataToQueue
    {standard input}:154    .text.unlikely.prvCopyDataFromQueue:00000000 $t
    {standard input}:158    .text.unlikely.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
    {standard input}:211    .text.unlikely.prvNotifyQueueSetContainer.part.0:00000000 $t
    {standard input}:215    .text.unlikely.prvNotifyQueueSetContainer.part.0:00000000 prvNotifyQueueSetContainer.part.0
    {standard input}:245    .text.prvNotifyQueueSetContainer:00000000 $t
    {standard input}:249    .text.prvNotifyQueueSetContainer:00000000 prvNotifyQueueSetContainer
    {standard input}:390    .text.unlikely.xQueueReceiveFromISR.part.2:00000000 $t
    {standard input}:394    .text.unlikely.xQueueReceiveFromISR.part.2:00000000 xQueueReceiveFromISR.part.2
    {standard input}:510    .text.prvUnlockQueue:00000000 $t
    {standard input}:514    .text.prvUnlockQueue:00000000 prvUnlockQueue
    {standard input}:740    .text.xQueueGenericReset:00000000 $t
    {standard input}:745    .text.xQueueGenericReset:00000000 xQueueGenericReset
    {standard input}:872    .text.xQueueGenericReset:0000008c $d
    {standard input}:877    .text.xQueueGenericCreate:00000000 $t
    {standard input}:882    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
    {standard input}:1024   .text.xQueueCreateMutex:00000000 $t
    {standard input}:1029   .text.xQueueCreateMutex:00000000 xQueueCreateMutex
    {standard input}:1439   .text.xQueueCreateMutex:00000198 $d
    {standard input}:1448   .text.xQueueGetMutexHolder:00000000 $t
    {standard input}:1453   .text.xQueueGetMutexHolder:00000000 xQueueGetMutexHolder
    {standard input}:1497   .text.xQueueCreateCountingSemaphore:00000000 $t
    {standard input}:1502   .text.xQueueCreateCountingSemaphore:00000000 xQueueCreateCountingSemaphore
    {standard input}:1574   .text.xQueueGenericSend:00000000 $t
    {standard input}:1579   .text.xQueueGenericSend:00000000 xQueueGenericSend
    {standard input}:1928   .text.xQueueGenericSend:0000019c $d
    {standard input}:1933   .text.xQueueGiveMutexRecursive:00000000 $t
    {standard input}:1938   .text.xQueueGiveMutexRecursive:00000000 xQueueGiveMutexRecursive
    {standard input}:2011   .text.xQueueGenericSendFromISR:00000000 $t
    {standard input}:2016   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
    {standard input}:2219   .text.xQueueGiveFromISR:00000000 $t
    {standard input}:2224   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
    {standard input}:2426   .text.xQueueGenericReceive:00000000 $t
    {standard input}:2431   .text.xQueueGenericReceive:00000000 xQueueGenericReceive
    {standard input}:2808   .text.xQueueGenericReceive:000001a8 $d
    {standard input}:2813   .text.xQueueTakeMutexRecursive:00000000 $t
    {standard input}:2818   .text.xQueueTakeMutexRecursive:00000000 xQueueTakeMutexRecursive
    {standard input}:2898   .text.xQueueReceiveFromISR:00000000 $t
    {standard input}:2903   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
    {standard input}:2962   .text.xQueuePeekFromISR:00000000 $t
    {standard input}:2967   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
    {standard input}:3125   .text.uxQueueMessagesWaiting:00000000 $t
    {standard input}:3130   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
    {standard input}:3185   .text.uxQueueSpacesAvailable:00000000 $t
    {standard input}:3190   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
    {standard input}:3247   .text.uxQueueMessagesWaitingFromISR:00000000 $t
    {standard input}:3252   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
    {standard input}:3290   .text.vQueueDelete:00000000 $t
    {standard input}:3295   .text.vQueueDelete:00000000 vQueueDelete
    {standard input}:3486   .text.vQueueDelete:000000cc $d
                            *COM*:00000040 xQueueRegistry
    {standard input}:3493   .text.uxQueueGetQueueNumber:00000000 $t
    {standard input}:3498   .text.uxQueueGetQueueNumber:00000000 uxQueueGetQueueNumber
    {standard input}:3514   .text.vQueueSetQueueNumber:00000000 $t
    {standard input}:3519   .text.vQueueSetQueueNumber:00000000 vQueueSetQueueNumber
    {standard input}:3534   .text.ucQueueGetQueueType:00000000 $t
    {standard input}:3539   .text.ucQueueGetQueueType:00000000 ucQueueGetQueueType
    {standard input}:3555   .text.xQueueIsQueueEmptyFromISR:00000000 $t
    {standard input}:3560   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
    {standard input}:3601   .text.xQueueIsQueueFullFromISR:00000000 $t
    {standard input}:3606   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
    {standard input}:3650   .text.vQueueAddToRegistry:00000000 $t
    {standard input}:3655   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
    {standard input}:3752   .text.vQueueAddToRegistry:00000054 $d
    {standard input}:3757   .text.pcQueueGetName:00000000 $t
    {standard input}:3762   .text.pcQueueGetName:00000000 pcQueueGetName
    {standard input}:3851   .text.pcQueueGetName:0000005c $d
    {standard input}:3856   .text.vQueueUnregisterQueue:00000000 $t
    {standard input}:3861   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
    {standard input}:3950   .text.vQueueUnregisterQueue:00000060 $d
    {standard input}:3955   .text.vQueueWaitForMessageRestricted:00000000 $t
    {standard input}:3960   .text.vQueueWaitForMessageRestricted:00000000 vQueueWaitForMessageRestricted
    {standard input}:4022   .text.xQueueCreateSet:00000000 $t
    {standard input}:4027   .text.xQueueCreateSet:00000000 xQueueCreateSet
    {standard input}:4154   .text.xQueueAddToSet:00000000 $t
    {standard input}:4159   .text.xQueueAddToSet:00000000 xQueueAddToSet
    {standard input}:4219   .text.xQueueRemoveFromSet:00000000 $t
    {standard input}:4224   .text.xQueueRemoveFromSet:00000000 xQueueRemoveFromSet
    {standard input}:4270   .text.xQueueSelectFromSet:00000000 $t
    {standard input}:4275   .text.xQueueSelectFromSet:00000000 xQueueSelectFromSet
    {standard input}:4312   .text.xQueueSelectFromSetFromISR:00000000 $t
    {standard input}:4317   .text.xQueueSelectFromSetFromISR:00000000 xQueueSelectFromSetFromISR
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vPortValidateInterruptPriority
vPortEnterCritical
vPortExitCritical
vTaskMissedYield
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
xTaskResumeAll
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskGetCurrentTaskHandle
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
vPortFree
vTaskPlaceOnEventListRestricted
