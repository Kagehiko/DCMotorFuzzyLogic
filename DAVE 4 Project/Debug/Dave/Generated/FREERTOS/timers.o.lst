   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "timers.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.prvSwitchTimerLists,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	prvSwitchTimerLists:
  25              	.LFB143:
  26              	 .file 1 "../Dave/Generated/FREERTOS/timers.c"
   1:../Dave/Generated/FREERTOS/timers.c **** /*
   2:../Dave/Generated/FREERTOS/timers.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Dave/Generated/FREERTOS/timers.c ****     All rights reserved
   4:../Dave/Generated/FREERTOS/timers.c **** 
   5:../Dave/Generated/FREERTOS/timers.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Dave/Generated/FREERTOS/timers.c **** 
   7:../Dave/Generated/FREERTOS/timers.c ****     This file is part of the FreeRTOS distribution.
   8:../Dave/Generated/FREERTOS/timers.c **** 
   9:../Dave/Generated/FREERTOS/timers.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Dave/Generated/FREERTOS/timers.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Dave/Generated/FREERTOS/timers.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Dave/Generated/FREERTOS/timers.c **** 
  13:../Dave/Generated/FREERTOS/timers.c ****     ***************************************************************************
  14:../Dave/Generated/FREERTOS/timers.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Dave/Generated/FREERTOS/timers.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Dave/Generated/FREERTOS/timers.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Dave/Generated/FREERTOS/timers.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Dave/Generated/FREERTOS/timers.c ****     ***************************************************************************
  19:../Dave/Generated/FREERTOS/timers.c **** 
  20:../Dave/Generated/FREERTOS/timers.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Dave/Generated/FREERTOS/timers.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Dave/Generated/FREERTOS/timers.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Dave/Generated/FREERTOS/timers.c ****     link: http://www.freertos.org/a00114.html
  24:../Dave/Generated/FREERTOS/timers.c **** 
  25:../Dave/Generated/FREERTOS/timers.c ****     ***************************************************************************
  26:../Dave/Generated/FREERTOS/timers.c ****      *                                                                       *
  27:../Dave/Generated/FREERTOS/timers.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Dave/Generated/FREERTOS/timers.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Dave/Generated/FREERTOS/timers.c ****      *    platform software that is more than just the market leader, it     *
  30:../Dave/Generated/FREERTOS/timers.c ****      *    is the industry's de facto standard.                               *
  31:../Dave/Generated/FREERTOS/timers.c ****      *                                                                       *
  32:../Dave/Generated/FREERTOS/timers.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Dave/Generated/FREERTOS/timers.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Dave/Generated/FREERTOS/timers.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Dave/Generated/FREERTOS/timers.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Dave/Generated/FREERTOS/timers.c ****      *                                                                       *
  37:../Dave/Generated/FREERTOS/timers.c ****     ***************************************************************************
  38:../Dave/Generated/FREERTOS/timers.c **** 
  39:../Dave/Generated/FREERTOS/timers.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Dave/Generated/FREERTOS/timers.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Dave/Generated/FREERTOS/timers.c ****     defined configASSERT()?
  42:../Dave/Generated/FREERTOS/timers.c **** 
  43:../Dave/Generated/FREERTOS/timers.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Dave/Generated/FREERTOS/timers.c ****     embedded software for free we request you assist our global community by
  45:../Dave/Generated/FREERTOS/timers.c ****     participating in the support forum.
  46:../Dave/Generated/FREERTOS/timers.c **** 
  47:../Dave/Generated/FREERTOS/timers.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Dave/Generated/FREERTOS/timers.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Dave/Generated/FREERTOS/timers.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Dave/Generated/FREERTOS/timers.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Dave/Generated/FREERTOS/timers.c **** 
  52:../Dave/Generated/FREERTOS/timers.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Dave/Generated/FREERTOS/timers.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Dave/Generated/FREERTOS/timers.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Dave/Generated/FREERTOS/timers.c **** 
  56:../Dave/Generated/FREERTOS/timers.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Dave/Generated/FREERTOS/timers.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Dave/Generated/FREERTOS/timers.c **** 
  59:../Dave/Generated/FREERTOS/timers.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Dave/Generated/FREERTOS/timers.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Dave/Generated/FREERTOS/timers.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Dave/Generated/FREERTOS/timers.c **** 
  63:../Dave/Generated/FREERTOS/timers.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Dave/Generated/FREERTOS/timers.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Dave/Generated/FREERTOS/timers.c ****     mission critical applications that require provable dependability.
  66:../Dave/Generated/FREERTOS/timers.c **** 
  67:../Dave/Generated/FREERTOS/timers.c ****     1 tab == 4 spaces!
  68:../Dave/Generated/FREERTOS/timers.c **** */
  69:../Dave/Generated/FREERTOS/timers.c **** 
  70:../Dave/Generated/FREERTOS/timers.c **** /* Standard includes. */
  71:../Dave/Generated/FREERTOS/timers.c **** #include <stdlib.h>
  72:../Dave/Generated/FREERTOS/timers.c **** 
  73:../Dave/Generated/FREERTOS/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:../Dave/Generated/FREERTOS/timers.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:../Dave/Generated/FREERTOS/timers.c **** task.h is included from an application file. */
  76:../Dave/Generated/FREERTOS/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:../Dave/Generated/FREERTOS/timers.c **** 
  78:../Dave/Generated/FREERTOS/timers.c **** #include "FreeRTOS.h"
  79:../Dave/Generated/FREERTOS/timers.c **** #include "task.h"
  80:../Dave/Generated/FREERTOS/timers.c **** #include "queue.h"
  81:../Dave/Generated/FREERTOS/timers.c **** #include "timers.h"
  82:../Dave/Generated/FREERTOS/timers.c **** 
  83:../Dave/Generated/FREERTOS/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  84:../Dave/Generated/FREERTOS/timers.c **** 	#error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function available.
  85:../Dave/Generated/FREERTOS/timers.c **** #endif
  86:../Dave/Generated/FREERTOS/timers.c **** 
  87:../Dave/Generated/FREERTOS/timers.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  88:../Dave/Generated/FREERTOS/timers.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  89:../Dave/Generated/FREERTOS/timers.c **** header files above, but not in this file, in order to generate the correct
  90:../Dave/Generated/FREERTOS/timers.c **** privileged Vs unprivileged linkage and placement. */
  91:../Dave/Generated/FREERTOS/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  92:../Dave/Generated/FREERTOS/timers.c **** 
  93:../Dave/Generated/FREERTOS/timers.c **** 
  94:../Dave/Generated/FREERTOS/timers.c **** /* This entire source file will be skipped if the application is not configured
  95:../Dave/Generated/FREERTOS/timers.c **** to include software timer functionality.  This #if is closed at the very bottom
  96:../Dave/Generated/FREERTOS/timers.c **** of this file.  If you want to include software timer functionality then ensure
  97:../Dave/Generated/FREERTOS/timers.c **** configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  98:../Dave/Generated/FREERTOS/timers.c **** #if ( configUSE_TIMERS == 1 )
  99:../Dave/Generated/FREERTOS/timers.c **** 
 100:../Dave/Generated/FREERTOS/timers.c **** /* Misc definitions. */
 101:../Dave/Generated/FREERTOS/timers.c **** #define tmrNO_DELAY		( TickType_t ) 0U
 102:../Dave/Generated/FREERTOS/timers.c **** 
 103:../Dave/Generated/FREERTOS/timers.c **** /* The definition of the timers themselves. */
 104:../Dave/Generated/FREERTOS/timers.c **** typedef struct tmrTimerControl
 105:../Dave/Generated/FREERTOS/timers.c **** {
 106:../Dave/Generated/FREERTOS/timers.c **** 	const char				*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included simpl
 107:../Dave/Generated/FREERTOS/timers.c **** 	ListItem_t				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for e
 108:../Dave/Generated/FREERTOS/timers.c **** 	TickType_t				xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
 109:../Dave/Generated/FREERTOS/timers.c **** 	UBaseType_t				uxAutoReload;		/*<< Set to pdTRUE if the timer should be automatically restarted on
 110:../Dave/Generated/FREERTOS/timers.c **** 	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified 
 111:../Dave/Generated/FREERTOS/timers.c **** 	TimerCallbackFunction_t	pxCallbackFunction;	/*<< The function that will be called when the timer e
 112:../Dave/Generated/FREERTOS/timers.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 113:../Dave/Generated/FREERTOS/timers.c **** 		UBaseType_t			uxTimerNumber;		/*<< An ID assigned by trace tools such as FreeRTOS+Trace */
 114:../Dave/Generated/FREERTOS/timers.c **** 	#endif
 115:../Dave/Generated/FREERTOS/timers.c **** 
 116:../Dave/Generated/FREERTOS/timers.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 117:../Dave/Generated/FREERTOS/timers.c **** 		uint8_t 			ucStaticallyAllocated; /*<< Set to pdTRUE if the timer was created statically so no at
 118:../Dave/Generated/FREERTOS/timers.c **** 	#endif
 119:../Dave/Generated/FREERTOS/timers.c **** } xTIMER;
 120:../Dave/Generated/FREERTOS/timers.c **** 
 121:../Dave/Generated/FREERTOS/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
 122:../Dave/Generated/FREERTOS/timers.c **** name below to enable the use of older kernel aware debuggers. */
 123:../Dave/Generated/FREERTOS/timers.c **** typedef xTIMER Timer_t;
 124:../Dave/Generated/FREERTOS/timers.c **** 
 125:../Dave/Generated/FREERTOS/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
 126:../Dave/Generated/FREERTOS/timers.c **** Two types of message can be queued - messages that manipulate a software timer,
 127:../Dave/Generated/FREERTOS/timers.c **** and messages that request the execution of a non-timer related callback.  The
 128:../Dave/Generated/FREERTOS/timers.c **** two message types are defined in two separate structures, xTimerParametersType
 129:../Dave/Generated/FREERTOS/timers.c **** and xCallbackParametersType respectively. */
 130:../Dave/Generated/FREERTOS/timers.c **** typedef struct tmrTimerParameters
 131:../Dave/Generated/FREERTOS/timers.c **** {
 132:../Dave/Generated/FREERTOS/timers.c **** 	TickType_t			xMessageValue;		/*<< An optional value used by a subset of commands, for example, whe
 133:../Dave/Generated/FREERTOS/timers.c **** 	Timer_t *			pxTimer;			/*<< The timer to which the command will be applied. */
 134:../Dave/Generated/FREERTOS/timers.c **** } TimerParameter_t;
 135:../Dave/Generated/FREERTOS/timers.c **** 
 136:../Dave/Generated/FREERTOS/timers.c **** 
 137:../Dave/Generated/FREERTOS/timers.c **** typedef struct tmrCallbackParameters
 138:../Dave/Generated/FREERTOS/timers.c **** {
 139:../Dave/Generated/FREERTOS/timers.c **** 	PendedFunction_t	pxCallbackFunction;	/* << The callback function to execute. */
 140:../Dave/Generated/FREERTOS/timers.c **** 	void *pvParameter1;						/* << The value that will be used as the callback functions first paramet
 141:../Dave/Generated/FREERTOS/timers.c **** 	uint32_t ulParameter2;					/* << The value that will be used as the callback functions second para
 142:../Dave/Generated/FREERTOS/timers.c **** } CallbackParameters_t;
 143:../Dave/Generated/FREERTOS/timers.c **** 
 144:../Dave/Generated/FREERTOS/timers.c **** /* The structure that contains the two message types, along with an identifier
 145:../Dave/Generated/FREERTOS/timers.c **** that is used to determine which message type is valid. */
 146:../Dave/Generated/FREERTOS/timers.c **** typedef struct tmrTimerQueueMessage
 147:../Dave/Generated/FREERTOS/timers.c **** {
 148:../Dave/Generated/FREERTOS/timers.c **** 	BaseType_t			xMessageID;			/*<< The command being sent to the timer service task. */
 149:../Dave/Generated/FREERTOS/timers.c **** 	union
 150:../Dave/Generated/FREERTOS/timers.c **** 	{
 151:../Dave/Generated/FREERTOS/timers.c **** 		TimerParameter_t xTimerParameters;
 152:../Dave/Generated/FREERTOS/timers.c **** 
 153:../Dave/Generated/FREERTOS/timers.c **** 		/* Don't include xCallbackParameters if it is not going to be used as
 154:../Dave/Generated/FREERTOS/timers.c **** 		it makes the structure (and therefore the timer queue) larger. */
 155:../Dave/Generated/FREERTOS/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 156:../Dave/Generated/FREERTOS/timers.c **** 			CallbackParameters_t xCallbackParameters;
 157:../Dave/Generated/FREERTOS/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 158:../Dave/Generated/FREERTOS/timers.c **** 	} u;
 159:../Dave/Generated/FREERTOS/timers.c **** } DaemonTaskMessage_t;
 160:../Dave/Generated/FREERTOS/timers.c **** 
 161:../Dave/Generated/FREERTOS/timers.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 162:../Dave/Generated/FREERTOS/timers.c **** static variables must be declared volatile. */
 163:../Dave/Generated/FREERTOS/timers.c **** 
 164:../Dave/Generated/FREERTOS/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 165:../Dave/Generated/FREERTOS/timers.c **** time order, with the nearest expiry time at the front of the list.  Only the
 166:../Dave/Generated/FREERTOS/timers.c **** timer service task is allowed to access these lists. */
 167:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList1;
 168:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList2;
 169:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static List_t *pxCurrentTimerList;
 170:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static List_t *pxOverflowTimerList;
 171:../Dave/Generated/FREERTOS/timers.c **** 
 172:../Dave/Generated/FREERTOS/timers.c **** /* A queue that is used to send commands to the timer service task. */
 173:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 174:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 175:../Dave/Generated/FREERTOS/timers.c **** 
 176:../Dave/Generated/FREERTOS/timers.c **** /*lint +e956 */
 177:../Dave/Generated/FREERTOS/timers.c **** 
 178:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 179:../Dave/Generated/FREERTOS/timers.c **** 
 180:../Dave/Generated/FREERTOS/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 181:../Dave/Generated/FREERTOS/timers.c **** 
 182:../Dave/Generated/FREERTOS/timers.c **** 	/* If static allocation is supported then the application must provide the
 183:../Dave/Generated/FREERTOS/timers.c **** 	following callback function - which enables the application to optionally
 184:../Dave/Generated/FREERTOS/timers.c **** 	provide the memory that will be used by the timer task as the task's stack
 185:../Dave/Generated/FREERTOS/timers.c **** 	and TCB. */
 186:../Dave/Generated/FREERTOS/timers.c **** 	extern void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **pp
 187:../Dave/Generated/FREERTOS/timers.c **** 
 188:../Dave/Generated/FREERTOS/timers.c **** #endif
 189:../Dave/Generated/FREERTOS/timers.c **** 
 190:../Dave/Generated/FREERTOS/timers.c **** /*
 191:../Dave/Generated/FREERTOS/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 192:../Dave/Generated/FREERTOS/timers.c ****  * been initialised already.
 193:../Dave/Generated/FREERTOS/timers.c ****  */
 194:../Dave/Generated/FREERTOS/timers.c **** static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 195:../Dave/Generated/FREERTOS/timers.c **** 
 196:../Dave/Generated/FREERTOS/timers.c **** /*
 197:../Dave/Generated/FREERTOS/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 198:../Dave/Generated/FREERTOS/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 199:../Dave/Generated/FREERTOS/timers.c ****  * xTimerQueue queue.
 200:../Dave/Generated/FREERTOS/timers.c ****  */
 201:../Dave/Generated/FREERTOS/timers.c **** static void prvTimerTask( void *pvParameters ) PRIVILEGED_FUNCTION;
 202:../Dave/Generated/FREERTOS/timers.c **** 
 203:../Dave/Generated/FREERTOS/timers.c **** /*
 204:../Dave/Generated/FREERTOS/timers.c ****  * Called by the timer service task to interpret and process a command it
 205:../Dave/Generated/FREERTOS/timers.c ****  * received on the timer queue.
 206:../Dave/Generated/FREERTOS/timers.c ****  */
 207:../Dave/Generated/FREERTOS/timers.c **** static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 208:../Dave/Generated/FREERTOS/timers.c **** 
 209:../Dave/Generated/FREERTOS/timers.c **** /*
 210:../Dave/Generated/FREERTOS/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 211:../Dave/Generated/FREERTOS/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 212:../Dave/Generated/FREERTOS/timers.c ****  */
 213:../Dave/Generated/FREERTOS/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 214:../Dave/Generated/FREERTOS/timers.c **** 
 215:../Dave/Generated/FREERTOS/timers.c **** /*
 216:../Dave/Generated/FREERTOS/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 217:../Dave/Generated/FREERTOS/timers.c ****  * auto reload timer, then call its callback.
 218:../Dave/Generated/FREERTOS/timers.c ****  */
 219:../Dave/Generated/FREERTOS/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow ) P
 220:../Dave/Generated/FREERTOS/timers.c **** 
 221:../Dave/Generated/FREERTOS/timers.c **** /*
 222:../Dave/Generated/FREERTOS/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 223:../Dave/Generated/FREERTOS/timers.c ****  * current timer list does not still reference some timers.
 224:../Dave/Generated/FREERTOS/timers.c ****  */
 225:../Dave/Generated/FREERTOS/timers.c **** static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 226:../Dave/Generated/FREERTOS/timers.c **** 
 227:../Dave/Generated/FREERTOS/timers.c **** /*
 228:../Dave/Generated/FREERTOS/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 229:../Dave/Generated/FREERTOS/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 230:../Dave/Generated/FREERTOS/timers.c ****  */
 231:../Dave/Generated/FREERTOS/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FUNCTI
 232:../Dave/Generated/FREERTOS/timers.c **** 
 233:../Dave/Generated/FREERTOS/timers.c **** /*
 234:../Dave/Generated/FREERTOS/timers.c ****  * If the timer list contains any active timers then return the expire time of
 235:../Dave/Generated/FREERTOS/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 236:../Dave/Generated/FREERTOS/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 237:../Dave/Generated/FREERTOS/timers.c ****  * to pdTRUE.
 238:../Dave/Generated/FREERTOS/timers.c ****  */
 239:../Dave/Generated/FREERTOS/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION;
 240:../Dave/Generated/FREERTOS/timers.c **** 
 241:../Dave/Generated/FREERTOS/timers.c **** /*
 242:../Dave/Generated/FREERTOS/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 243:../Dave/Generated/FREERTOS/timers.c ****  * until either a timer does expire or a command is received.
 244:../Dave/Generated/FREERTOS/timers.c ****  */
 245:../Dave/Generated/FREERTOS/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 246:../Dave/Generated/FREERTOS/timers.c **** 
 247:../Dave/Generated/FREERTOS/timers.c **** /*
 248:../Dave/Generated/FREERTOS/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 249:../Dave/Generated/FREERTOS/timers.c ****  * dynamically to fill in the structure's members.
 250:../Dave/Generated/FREERTOS/timers.c ****  */
 251:../Dave/Generated/FREERTOS/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,
 252:../Dave/Generated/FREERTOS/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 253:../Dave/Generated/FREERTOS/timers.c **** 									const UBaseType_t uxAutoReload,
 254:../Dave/Generated/FREERTOS/timers.c **** 									void * const pvTimerID,
 255:../Dave/Generated/FREERTOS/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 256:../Dave/Generated/FREERTOS/timers.c **** 									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed
 257:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 258:../Dave/Generated/FREERTOS/timers.c **** 
 259:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerCreateTimerTask( void )
 260:../Dave/Generated/FREERTOS/timers.c **** {
 261:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xReturn = pdFAIL;
 262:../Dave/Generated/FREERTOS/timers.c **** 
 263:../Dave/Generated/FREERTOS/timers.c **** 	/* This function is called when the scheduler is started if
 264:../Dave/Generated/FREERTOS/timers.c **** 	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 265:../Dave/Generated/FREERTOS/timers.c **** 	timer service task has been created/initialised.  If timers have already
 266:../Dave/Generated/FREERTOS/timers.c **** 	been created then the initialisation will already have been performed. */
 267:../Dave/Generated/FREERTOS/timers.c **** 	prvCheckForValidListAndQueue();
 268:../Dave/Generated/FREERTOS/timers.c **** 
 269:../Dave/Generated/FREERTOS/timers.c **** 	if( xTimerQueue != NULL )
 270:../Dave/Generated/FREERTOS/timers.c **** 	{
 271:../Dave/Generated/FREERTOS/timers.c **** 		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 272:../Dave/Generated/FREERTOS/timers.c **** 		{
 273:../Dave/Generated/FREERTOS/timers.c **** 			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 274:../Dave/Generated/FREERTOS/timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 275:../Dave/Generated/FREERTOS/timers.c **** 			uint32_t ulTimerTaskStackSize;
 276:../Dave/Generated/FREERTOS/timers.c **** 
 277:../Dave/Generated/FREERTOS/timers.c **** 			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStac
 278:../Dave/Generated/FREERTOS/timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 279:../Dave/Generated/FREERTOS/timers.c **** 													"Tmr Svc",
 280:../Dave/Generated/FREERTOS/timers.c **** 													ulTimerTaskStackSize,
 281:../Dave/Generated/FREERTOS/timers.c **** 													NULL,
 282:../Dave/Generated/FREERTOS/timers.c **** 													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 283:../Dave/Generated/FREERTOS/timers.c **** 													pxTimerTaskStackBuffer,
 284:../Dave/Generated/FREERTOS/timers.c **** 													pxTimerTaskTCBBuffer );
 285:../Dave/Generated/FREERTOS/timers.c **** 
 286:../Dave/Generated/FREERTOS/timers.c **** 			if( xTimerTaskHandle != NULL )
 287:../Dave/Generated/FREERTOS/timers.c **** 			{
 288:../Dave/Generated/FREERTOS/timers.c **** 				xReturn = pdPASS;
 289:../Dave/Generated/FREERTOS/timers.c **** 			}
 290:../Dave/Generated/FREERTOS/timers.c **** 		}
 291:../Dave/Generated/FREERTOS/timers.c **** 		#else
 292:../Dave/Generated/FREERTOS/timers.c **** 		{
 293:../Dave/Generated/FREERTOS/timers.c **** 			xReturn = xTaskCreate(	prvTimerTask,
 294:../Dave/Generated/FREERTOS/timers.c **** 									"Tmr Svc",
 295:../Dave/Generated/FREERTOS/timers.c **** 									configTIMER_TASK_STACK_DEPTH,
 296:../Dave/Generated/FREERTOS/timers.c **** 									NULL,
 297:../Dave/Generated/FREERTOS/timers.c **** 									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 298:../Dave/Generated/FREERTOS/timers.c **** 									&xTimerTaskHandle );
 299:../Dave/Generated/FREERTOS/timers.c **** 		}
 300:../Dave/Generated/FREERTOS/timers.c **** 		#endif /* configSUPPORT_STATIC_ALLOCATION */
 301:../Dave/Generated/FREERTOS/timers.c **** 	}
 302:../Dave/Generated/FREERTOS/timers.c **** 	else
 303:../Dave/Generated/FREERTOS/timers.c **** 	{
 304:../Dave/Generated/FREERTOS/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 305:../Dave/Generated/FREERTOS/timers.c **** 	}
 306:../Dave/Generated/FREERTOS/timers.c **** 
 307:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xReturn );
 308:../Dave/Generated/FREERTOS/timers.c **** 	return xReturn;
 309:../Dave/Generated/FREERTOS/timers.c **** }
 310:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 311:../Dave/Generated/FREERTOS/timers.c **** 
 312:../Dave/Generated/FREERTOS/timers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 313:../Dave/Generated/FREERTOS/timers.c **** 
 314:../Dave/Generated/FREERTOS/timers.c **** 	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
 315:../Dave/Generated/FREERTOS/timers.c **** 								const TickType_t xTimerPeriodInTicks,
 316:../Dave/Generated/FREERTOS/timers.c **** 								const UBaseType_t uxAutoReload,
 317:../Dave/Generated/FREERTOS/timers.c **** 								void * const pvTimerID,
 318:../Dave/Generated/FREERTOS/timers.c **** 								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowe
 319:../Dave/Generated/FREERTOS/timers.c **** 	{
 320:../Dave/Generated/FREERTOS/timers.c **** 	Timer_t *pxNewTimer;
 321:../Dave/Generated/FREERTOS/timers.c **** 
 322:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 323:../Dave/Generated/FREERTOS/timers.c **** 
 324:../Dave/Generated/FREERTOS/timers.c **** 		if( pxNewTimer != NULL )
 325:../Dave/Generated/FREERTOS/timers.c **** 		{
 326:../Dave/Generated/FREERTOS/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 327:../Dave/Generated/FREERTOS/timers.c **** 
 328:../Dave/Generated/FREERTOS/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 329:../Dave/Generated/FREERTOS/timers.c **** 			{
 330:../Dave/Generated/FREERTOS/timers.c **** 				/* Timers can be created statically or dynamically, so note this
 331:../Dave/Generated/FREERTOS/timers.c **** 				timer was created dynamically in case the timer is later
 332:../Dave/Generated/FREERTOS/timers.c **** 				deleted. */
 333:../Dave/Generated/FREERTOS/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 334:../Dave/Generated/FREERTOS/timers.c **** 			}
 335:../Dave/Generated/FREERTOS/timers.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 336:../Dave/Generated/FREERTOS/timers.c **** 		}
 337:../Dave/Generated/FREERTOS/timers.c **** 
 338:../Dave/Generated/FREERTOS/timers.c **** 		return pxNewTimer;
 339:../Dave/Generated/FREERTOS/timers.c **** 	}
 340:../Dave/Generated/FREERTOS/timers.c **** 
 341:../Dave/Generated/FREERTOS/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 342:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 343:../Dave/Generated/FREERTOS/timers.c **** 
 344:../Dave/Generated/FREERTOS/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 345:../Dave/Generated/FREERTOS/timers.c **** 
 346:../Dave/Generated/FREERTOS/timers.c **** 	TimerHandle_t xTimerCreateStatic(	const char * const pcTimerName,
 347:../Dave/Generated/FREERTOS/timers.c **** 										const TickType_t xTimerPeriodInTicks,
 348:../Dave/Generated/FREERTOS/timers.c **** 										const UBaseType_t uxAutoReload,
 349:../Dave/Generated/FREERTOS/timers.c **** 										void * const pvTimerID,
 350:../Dave/Generated/FREERTOS/timers.c **** 										TimerCallbackFunction_t pxCallbackFunction,
 351:../Dave/Generated/FREERTOS/timers.c **** 										StaticTimer_t *pxTimerBuffer ) /*lint !e971 Unqualified char types are allowed for string
 352:../Dave/Generated/FREERTOS/timers.c **** 	{
 353:../Dave/Generated/FREERTOS/timers.c **** 	Timer_t *pxNewTimer;
 354:../Dave/Generated/FREERTOS/timers.c **** 
 355:../Dave/Generated/FREERTOS/timers.c **** 		#if( configASSERT_DEFINED == 1 )
 356:../Dave/Generated/FREERTOS/timers.c **** 		{
 357:../Dave/Generated/FREERTOS/timers.c **** 			/* Sanity check that the size of the structure used to declare a
 358:../Dave/Generated/FREERTOS/timers.c **** 			variable of type StaticTimer_t equals the size of the real timer
 359:../Dave/Generated/FREERTOS/timers.c **** 			structures. */
 360:../Dave/Generated/FREERTOS/timers.c **** 			volatile size_t xSize = sizeof( StaticTimer_t );
 361:../Dave/Generated/FREERTOS/timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 362:../Dave/Generated/FREERTOS/timers.c **** 		}
 363:../Dave/Generated/FREERTOS/timers.c **** 		#endif /* configASSERT_DEFINED */
 364:../Dave/Generated/FREERTOS/timers.c **** 
 365:../Dave/Generated/FREERTOS/timers.c **** 		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 366:../Dave/Generated/FREERTOS/timers.c **** 		configASSERT( pxTimerBuffer );
 367:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are d
 368:../Dave/Generated/FREERTOS/timers.c **** 
 369:../Dave/Generated/FREERTOS/timers.c **** 		if( pxNewTimer != NULL )
 370:../Dave/Generated/FREERTOS/timers.c **** 		{
 371:../Dave/Generated/FREERTOS/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 372:../Dave/Generated/FREERTOS/timers.c **** 
 373:../Dave/Generated/FREERTOS/timers.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 374:../Dave/Generated/FREERTOS/timers.c **** 			{
 375:../Dave/Generated/FREERTOS/timers.c **** 				/* Timers can be created statically or dynamically so note this
 376:../Dave/Generated/FREERTOS/timers.c **** 				timer was created statically in case it is later deleted. */
 377:../Dave/Generated/FREERTOS/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 378:../Dave/Generated/FREERTOS/timers.c **** 			}
 379:../Dave/Generated/FREERTOS/timers.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 380:../Dave/Generated/FREERTOS/timers.c **** 		}
 381:../Dave/Generated/FREERTOS/timers.c **** 
 382:../Dave/Generated/FREERTOS/timers.c **** 		return pxNewTimer;
 383:../Dave/Generated/FREERTOS/timers.c **** 	}
 384:../Dave/Generated/FREERTOS/timers.c **** 
 385:../Dave/Generated/FREERTOS/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 386:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 387:../Dave/Generated/FREERTOS/timers.c **** 
 388:../Dave/Generated/FREERTOS/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,
 389:../Dave/Generated/FREERTOS/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 390:../Dave/Generated/FREERTOS/timers.c **** 									const UBaseType_t uxAutoReload,
 391:../Dave/Generated/FREERTOS/timers.c **** 									void * const pvTimerID,
 392:../Dave/Generated/FREERTOS/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 393:../Dave/Generated/FREERTOS/timers.c **** 									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and sing
 394:../Dave/Generated/FREERTOS/timers.c **** {
 395:../Dave/Generated/FREERTOS/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 396:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 397:../Dave/Generated/FREERTOS/timers.c **** 
 398:../Dave/Generated/FREERTOS/timers.c **** 	if( pxNewTimer != NULL )
 399:../Dave/Generated/FREERTOS/timers.c **** 	{
 400:../Dave/Generated/FREERTOS/timers.c **** 		/* Ensure the infrastructure used by the timer service task has been
 401:../Dave/Generated/FREERTOS/timers.c **** 		created/initialised. */
 402:../Dave/Generated/FREERTOS/timers.c **** 		prvCheckForValidListAndQueue();
 403:../Dave/Generated/FREERTOS/timers.c **** 
 404:../Dave/Generated/FREERTOS/timers.c **** 		/* Initialise the timer structure members using the function
 405:../Dave/Generated/FREERTOS/timers.c **** 		parameters. */
 406:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->pcTimerName = pcTimerName;
 407:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 408:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 409:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 410:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 411:../Dave/Generated/FREERTOS/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 412:../Dave/Generated/FREERTOS/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 413:../Dave/Generated/FREERTOS/timers.c **** 	}
 414:../Dave/Generated/FREERTOS/timers.c **** }
 415:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 416:../Dave/Generated/FREERTOS/timers.c **** 
 417:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_
 418:../Dave/Generated/FREERTOS/timers.c **** {
 419:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xReturn = pdFAIL;
 420:../Dave/Generated/FREERTOS/timers.c **** DaemonTaskMessage_t xMessage;
 421:../Dave/Generated/FREERTOS/timers.c **** 
 422:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 423:../Dave/Generated/FREERTOS/timers.c **** 
 424:../Dave/Generated/FREERTOS/timers.c **** 	/* Send a message to the timer service task to perform a particular action
 425:../Dave/Generated/FREERTOS/timers.c **** 	on a particular timer definition. */
 426:../Dave/Generated/FREERTOS/timers.c **** 	if( xTimerQueue != NULL )
 427:../Dave/Generated/FREERTOS/timers.c **** 	{
 428:../Dave/Generated/FREERTOS/timers.c **** 		/* Send a command to the timer service task to start the xTimer timer. */
 429:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.xMessageID = xCommandID;
 430:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 431:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 432:../Dave/Generated/FREERTOS/timers.c **** 
 433:../Dave/Generated/FREERTOS/timers.c **** 		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 434:../Dave/Generated/FREERTOS/timers.c **** 		{
 435:../Dave/Generated/FREERTOS/timers.c **** 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 436:../Dave/Generated/FREERTOS/timers.c **** 			{
 437:../Dave/Generated/FREERTOS/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 438:../Dave/Generated/FREERTOS/timers.c **** 			}
 439:../Dave/Generated/FREERTOS/timers.c **** 			else
 440:../Dave/Generated/FREERTOS/timers.c **** 			{
 441:../Dave/Generated/FREERTOS/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 442:../Dave/Generated/FREERTOS/timers.c **** 			}
 443:../Dave/Generated/FREERTOS/timers.c **** 		}
 444:../Dave/Generated/FREERTOS/timers.c **** 		else
 445:../Dave/Generated/FREERTOS/timers.c **** 		{
 446:../Dave/Generated/FREERTOS/timers.c **** 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 447:../Dave/Generated/FREERTOS/timers.c **** 		}
 448:../Dave/Generated/FREERTOS/timers.c **** 
 449:../Dave/Generated/FREERTOS/timers.c **** 		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 450:../Dave/Generated/FREERTOS/timers.c **** 	}
 451:../Dave/Generated/FREERTOS/timers.c **** 	else
 452:../Dave/Generated/FREERTOS/timers.c **** 	{
 453:../Dave/Generated/FREERTOS/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 454:../Dave/Generated/FREERTOS/timers.c **** 	}
 455:../Dave/Generated/FREERTOS/timers.c **** 
 456:../Dave/Generated/FREERTOS/timers.c **** 	return xReturn;
 457:../Dave/Generated/FREERTOS/timers.c **** }
 458:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 459:../Dave/Generated/FREERTOS/timers.c **** 
 460:../Dave/Generated/FREERTOS/timers.c **** TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 461:../Dave/Generated/FREERTOS/timers.c **** {
 462:../Dave/Generated/FREERTOS/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 463:../Dave/Generated/FREERTOS/timers.c **** 	started, then xTimerTaskHandle will be NULL. */
 464:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( ( xTimerTaskHandle != NULL ) );
 465:../Dave/Generated/FREERTOS/timers.c **** 	return xTimerTaskHandle;
 466:../Dave/Generated/FREERTOS/timers.c **** }
 467:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 468:../Dave/Generated/FREERTOS/timers.c **** 
 469:../Dave/Generated/FREERTOS/timers.c **** TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 470:../Dave/Generated/FREERTOS/timers.c **** {
 471:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 472:../Dave/Generated/FREERTOS/timers.c **** 
 473:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 474:../Dave/Generated/FREERTOS/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 475:../Dave/Generated/FREERTOS/timers.c **** }
 476:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 477:../Dave/Generated/FREERTOS/timers.c **** 
 478:../Dave/Generated/FREERTOS/timers.c **** TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 479:../Dave/Generated/FREERTOS/timers.c **** {
 480:../Dave/Generated/FREERTOS/timers.c **** Timer_t * pxTimer = ( Timer_t * ) xTimer;
 481:../Dave/Generated/FREERTOS/timers.c **** TickType_t xReturn;
 482:../Dave/Generated/FREERTOS/timers.c **** 
 483:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 484:../Dave/Generated/FREERTOS/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 485:../Dave/Generated/FREERTOS/timers.c **** 	return xReturn;
 486:../Dave/Generated/FREERTOS/timers.c **** }
 487:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 488:../Dave/Generated/FREERTOS/timers.c **** 
 489:../Dave/Generated/FREERTOS/timers.c **** const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed
 490:../Dave/Generated/FREERTOS/timers.c **** {
 491:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 492:../Dave/Generated/FREERTOS/timers.c **** 
 493:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 494:../Dave/Generated/FREERTOS/timers.c **** 	return pxTimer->pcTimerName;
 495:../Dave/Generated/FREERTOS/timers.c **** }
 496:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 497:../Dave/Generated/FREERTOS/timers.c **** 
 498:../Dave/Generated/FREERTOS/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
 499:../Dave/Generated/FREERTOS/timers.c **** {
 500:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xResult;
 501:../Dave/Generated/FREERTOS/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 502:../Dave/Generated/FREERTOS/timers.c **** 
 503:../Dave/Generated/FREERTOS/timers.c **** 	/* Remove the timer from the list of active timers.  A check has already
 504:../Dave/Generated/FREERTOS/timers.c **** 	been performed to ensure the list is not empty. */
 505:../Dave/Generated/FREERTOS/timers.c **** 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 506:../Dave/Generated/FREERTOS/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 507:../Dave/Generated/FREERTOS/timers.c **** 
 508:../Dave/Generated/FREERTOS/timers.c **** 	/* If the timer is an auto reload timer then calculate the next
 509:../Dave/Generated/FREERTOS/timers.c **** 	expiry time and re-insert the timer in the list of active timers. */
 510:../Dave/Generated/FREERTOS/timers.c **** 	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 511:../Dave/Generated/FREERTOS/timers.c **** 	{
 512:../Dave/Generated/FREERTOS/timers.c **** 		/* The timer is inserted into a list using a time relative to anything
 513:../Dave/Generated/FREERTOS/timers.c **** 		other than the current time.  It will therefore be inserted into the
 514:../Dave/Generated/FREERTOS/timers.c **** 		correct list relative to the time this task thinks it is now. */
 515:../Dave/Generated/FREERTOS/timers.c **** 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTim
 516:../Dave/Generated/FREERTOS/timers.c **** 		{
 517:../Dave/Generated/FREERTOS/timers.c **** 			/* The timer expired before it was added to the active timer
 518:../Dave/Generated/FREERTOS/timers.c **** 			list.  Reload it now.  */
 519:../Dave/Generated/FREERTOS/timers.c **** 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmr
 520:../Dave/Generated/FREERTOS/timers.c **** 			configASSERT( xResult );
 521:../Dave/Generated/FREERTOS/timers.c **** 			( void ) xResult;
 522:../Dave/Generated/FREERTOS/timers.c **** 		}
 523:../Dave/Generated/FREERTOS/timers.c **** 		else
 524:../Dave/Generated/FREERTOS/timers.c **** 		{
 525:../Dave/Generated/FREERTOS/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 526:../Dave/Generated/FREERTOS/timers.c **** 		}
 527:../Dave/Generated/FREERTOS/timers.c **** 	}
 528:../Dave/Generated/FREERTOS/timers.c **** 	else
 529:../Dave/Generated/FREERTOS/timers.c **** 	{
 530:../Dave/Generated/FREERTOS/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 531:../Dave/Generated/FREERTOS/timers.c **** 	}
 532:../Dave/Generated/FREERTOS/timers.c **** 
 533:../Dave/Generated/FREERTOS/timers.c **** 	/* Call the timer callback. */
 534:../Dave/Generated/FREERTOS/timers.c **** 	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 535:../Dave/Generated/FREERTOS/timers.c **** }
 536:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 537:../Dave/Generated/FREERTOS/timers.c **** 
 538:../Dave/Generated/FREERTOS/timers.c **** static void prvTimerTask( void *pvParameters )
 539:../Dave/Generated/FREERTOS/timers.c **** {
 540:../Dave/Generated/FREERTOS/timers.c **** TickType_t xNextExpireTime;
 541:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xListWasEmpty;
 542:../Dave/Generated/FREERTOS/timers.c **** 
 543:../Dave/Generated/FREERTOS/timers.c **** 	/* Just to avoid compiler warnings. */
 544:../Dave/Generated/FREERTOS/timers.c **** 	( void ) pvParameters;
 545:../Dave/Generated/FREERTOS/timers.c **** 
 546:../Dave/Generated/FREERTOS/timers.c **** 	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 547:../Dave/Generated/FREERTOS/timers.c **** 	{
 548:../Dave/Generated/FREERTOS/timers.c **** 		extern void vApplicationDaemonTaskStartupHook( void );
 549:../Dave/Generated/FREERTOS/timers.c **** 
 550:../Dave/Generated/FREERTOS/timers.c **** 		/* Allow the application writer to execute some code in the context of
 551:../Dave/Generated/FREERTOS/timers.c **** 		this task at the point the task starts executing.  This is useful if the
 552:../Dave/Generated/FREERTOS/timers.c **** 		application includes initialisation code that would benefit from
 553:../Dave/Generated/FREERTOS/timers.c **** 		executing after the scheduler has been started. */
 554:../Dave/Generated/FREERTOS/timers.c **** 		vApplicationDaemonTaskStartupHook();
 555:../Dave/Generated/FREERTOS/timers.c **** 	}
 556:../Dave/Generated/FREERTOS/timers.c **** 	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 557:../Dave/Generated/FREERTOS/timers.c **** 
 558:../Dave/Generated/FREERTOS/timers.c **** 	for( ;; )
 559:../Dave/Generated/FREERTOS/timers.c **** 	{
 560:../Dave/Generated/FREERTOS/timers.c **** 		/* Query the timers list to see if it contains any timers, and if so,
 561:../Dave/Generated/FREERTOS/timers.c **** 		obtain the time at which the next timer will expire. */
 562:../Dave/Generated/FREERTOS/timers.c **** 		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 563:../Dave/Generated/FREERTOS/timers.c **** 
 564:../Dave/Generated/FREERTOS/timers.c **** 		/* If a timer has expired, process it.  Otherwise, block this task
 565:../Dave/Generated/FREERTOS/timers.c **** 		until either a timer does expire, or a command is received. */
 566:../Dave/Generated/FREERTOS/timers.c **** 		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 567:../Dave/Generated/FREERTOS/timers.c **** 
 568:../Dave/Generated/FREERTOS/timers.c **** 		/* Empty the command queue. */
 569:../Dave/Generated/FREERTOS/timers.c **** 		prvProcessReceivedCommands();
 570:../Dave/Generated/FREERTOS/timers.c **** 	}
 571:../Dave/Generated/FREERTOS/timers.c **** }
 572:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 573:../Dave/Generated/FREERTOS/timers.c **** 
 574:../Dave/Generated/FREERTOS/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 575:../Dave/Generated/FREERTOS/timers.c **** {
 576:../Dave/Generated/FREERTOS/timers.c **** TickType_t xTimeNow;
 577:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerListsWereSwitched;
 578:../Dave/Generated/FREERTOS/timers.c **** 
 579:../Dave/Generated/FREERTOS/timers.c **** 	vTaskSuspendAll();
 580:../Dave/Generated/FREERTOS/timers.c **** 	{
 581:../Dave/Generated/FREERTOS/timers.c **** 		/* Obtain the time now to make an assessment as to whether the timer
 582:../Dave/Generated/FREERTOS/timers.c **** 		has expired or not.  If obtaining the time causes the lists to switch
 583:../Dave/Generated/FREERTOS/timers.c **** 		then don't process this timer as any timers that remained in the list
 584:../Dave/Generated/FREERTOS/timers.c **** 		when the lists were switched will have been processed within the
 585:../Dave/Generated/FREERTOS/timers.c **** 		prvSampleTimeNow() function. */
 586:../Dave/Generated/FREERTOS/timers.c **** 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 587:../Dave/Generated/FREERTOS/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 588:../Dave/Generated/FREERTOS/timers.c **** 		{
 589:../Dave/Generated/FREERTOS/timers.c **** 			/* The tick count has not overflowed, has the timer expired? */
 590:../Dave/Generated/FREERTOS/timers.c **** 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 591:../Dave/Generated/FREERTOS/timers.c **** 			{
 592:../Dave/Generated/FREERTOS/timers.c **** 				( void ) xTaskResumeAll();
 593:../Dave/Generated/FREERTOS/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 594:../Dave/Generated/FREERTOS/timers.c **** 			}
 595:../Dave/Generated/FREERTOS/timers.c **** 			else
 596:../Dave/Generated/FREERTOS/timers.c **** 			{
 597:../Dave/Generated/FREERTOS/timers.c **** 				/* The tick count has not overflowed, and the next expire
 598:../Dave/Generated/FREERTOS/timers.c **** 				time has not been reached yet.  This task should therefore
 599:../Dave/Generated/FREERTOS/timers.c **** 				block to wait for the next expire time or a command to be
 600:../Dave/Generated/FREERTOS/timers.c **** 				received - whichever comes first.  The following line cannot
 601:../Dave/Generated/FREERTOS/timers.c **** 				be reached unless xNextExpireTime > xTimeNow, except in the
 602:../Dave/Generated/FREERTOS/timers.c **** 				case when the current timer list is empty. */
 603:../Dave/Generated/FREERTOS/timers.c **** 				if( xListWasEmpty != pdFALSE )
 604:../Dave/Generated/FREERTOS/timers.c **** 				{
 605:../Dave/Generated/FREERTOS/timers.c **** 					/* The current timer list is empty - is the overflow list
 606:../Dave/Generated/FREERTOS/timers.c **** 					also empty? */
 607:../Dave/Generated/FREERTOS/timers.c **** 					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 608:../Dave/Generated/FREERTOS/timers.c **** 				}
 609:../Dave/Generated/FREERTOS/timers.c **** 
 610:../Dave/Generated/FREERTOS/timers.c **** 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 611:../Dave/Generated/FREERTOS/timers.c **** 
 612:../Dave/Generated/FREERTOS/timers.c **** 				if( xTaskResumeAll() == pdFALSE )
 613:../Dave/Generated/FREERTOS/timers.c **** 				{
 614:../Dave/Generated/FREERTOS/timers.c **** 					/* Yield to wait for either a command to arrive, or the
 615:../Dave/Generated/FREERTOS/timers.c **** 					block time to expire.  If a command arrived between the
 616:../Dave/Generated/FREERTOS/timers.c **** 					critical section being exited and this yield then the yield
 617:../Dave/Generated/FREERTOS/timers.c **** 					will not cause the task to block. */
 618:../Dave/Generated/FREERTOS/timers.c **** 					portYIELD_WITHIN_API();
 619:../Dave/Generated/FREERTOS/timers.c **** 				}
 620:../Dave/Generated/FREERTOS/timers.c **** 				else
 621:../Dave/Generated/FREERTOS/timers.c **** 				{
 622:../Dave/Generated/FREERTOS/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 623:../Dave/Generated/FREERTOS/timers.c **** 				}
 624:../Dave/Generated/FREERTOS/timers.c **** 			}
 625:../Dave/Generated/FREERTOS/timers.c **** 		}
 626:../Dave/Generated/FREERTOS/timers.c **** 		else
 627:../Dave/Generated/FREERTOS/timers.c **** 		{
 628:../Dave/Generated/FREERTOS/timers.c **** 			( void ) xTaskResumeAll();
 629:../Dave/Generated/FREERTOS/timers.c **** 		}
 630:../Dave/Generated/FREERTOS/timers.c **** 	}
 631:../Dave/Generated/FREERTOS/timers.c **** }
 632:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 633:../Dave/Generated/FREERTOS/timers.c **** 
 634:../Dave/Generated/FREERTOS/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 635:../Dave/Generated/FREERTOS/timers.c **** {
 636:../Dave/Generated/FREERTOS/timers.c **** TickType_t xNextExpireTime;
 637:../Dave/Generated/FREERTOS/timers.c **** 
 638:../Dave/Generated/FREERTOS/timers.c **** 	/* Timers are listed in expiry time order, with the head of the list
 639:../Dave/Generated/FREERTOS/timers.c **** 	referencing the task that will expire first.  Obtain the time at which
 640:../Dave/Generated/FREERTOS/timers.c **** 	the timer with the nearest expiry time will expire.  If there are no
 641:../Dave/Generated/FREERTOS/timers.c **** 	active timers then just set the next expire time to 0.  That will cause
 642:../Dave/Generated/FREERTOS/timers.c **** 	this task to unblock when the tick count overflows, at which point the
 643:../Dave/Generated/FREERTOS/timers.c **** 	timer lists will be switched and the next expiry time can be
 644:../Dave/Generated/FREERTOS/timers.c **** 	re-assessed.  */
 645:../Dave/Generated/FREERTOS/timers.c **** 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 646:../Dave/Generated/FREERTOS/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
 647:../Dave/Generated/FREERTOS/timers.c **** 	{
 648:../Dave/Generated/FREERTOS/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 649:../Dave/Generated/FREERTOS/timers.c **** 	}
 650:../Dave/Generated/FREERTOS/timers.c **** 	else
 651:../Dave/Generated/FREERTOS/timers.c **** 	{
 652:../Dave/Generated/FREERTOS/timers.c **** 		/* Ensure the task unblocks when the tick count rolls over. */
 653:../Dave/Generated/FREERTOS/timers.c **** 		xNextExpireTime = ( TickType_t ) 0U;
 654:../Dave/Generated/FREERTOS/timers.c **** 	}
 655:../Dave/Generated/FREERTOS/timers.c **** 
 656:../Dave/Generated/FREERTOS/timers.c **** 	return xNextExpireTime;
 657:../Dave/Generated/FREERTOS/timers.c **** }
 658:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 659:../Dave/Generated/FREERTOS/timers.c **** 
 660:../Dave/Generated/FREERTOS/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 661:../Dave/Generated/FREERTOS/timers.c **** {
 662:../Dave/Generated/FREERTOS/timers.c **** TickType_t xTimeNow;
 663:../Dave/Generated/FREERTOS/timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 664:../Dave/Generated/FREERTOS/timers.c **** 
 665:../Dave/Generated/FREERTOS/timers.c **** 	xTimeNow = xTaskGetTickCount();
 666:../Dave/Generated/FREERTOS/timers.c **** 
 667:../Dave/Generated/FREERTOS/timers.c **** 	if( xTimeNow < xLastTime )
 668:../Dave/Generated/FREERTOS/timers.c **** 	{
 669:../Dave/Generated/FREERTOS/timers.c **** 		prvSwitchTimerLists();
 670:../Dave/Generated/FREERTOS/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 671:../Dave/Generated/FREERTOS/timers.c **** 	}
 672:../Dave/Generated/FREERTOS/timers.c **** 	else
 673:../Dave/Generated/FREERTOS/timers.c **** 	{
 674:../Dave/Generated/FREERTOS/timers.c **** 		*pxTimerListsWereSwitched = pdFALSE;
 675:../Dave/Generated/FREERTOS/timers.c **** 	}
 676:../Dave/Generated/FREERTOS/timers.c **** 
 677:../Dave/Generated/FREERTOS/timers.c **** 	xLastTime = xTimeNow;
 678:../Dave/Generated/FREERTOS/timers.c **** 
 679:../Dave/Generated/FREERTOS/timers.c **** 	return xTimeNow;
 680:../Dave/Generated/FREERTOS/timers.c **** }
 681:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 682:../Dave/Generated/FREERTOS/timers.c **** 
 683:../Dave/Generated/FREERTOS/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 684:../Dave/Generated/FREERTOS/timers.c **** {
 685:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xProcessTimerNow = pdFALSE;
 686:../Dave/Generated/FREERTOS/timers.c **** 
 687:../Dave/Generated/FREERTOS/timers.c **** 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 688:../Dave/Generated/FREERTOS/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 689:../Dave/Generated/FREERTOS/timers.c **** 
 690:../Dave/Generated/FREERTOS/timers.c **** 	if( xNextExpiryTime <= xTimeNow )
 691:../Dave/Generated/FREERTOS/timers.c **** 	{
 692:../Dave/Generated/FREERTOS/timers.c **** 		/* Has the expiry time elapsed between the command to start/reset a
 693:../Dave/Generated/FREERTOS/timers.c **** 		timer was issued, and the time the command was processed? */
 694:../Dave/Generated/FREERTOS/timers.c **** 		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961
 695:../Dave/Generated/FREERTOS/timers.c **** 		{
 696:../Dave/Generated/FREERTOS/timers.c **** 			/* The time between a command being issued and the command being
 697:../Dave/Generated/FREERTOS/timers.c **** 			processed actually exceeds the timers period.  */
 698:../Dave/Generated/FREERTOS/timers.c **** 			xProcessTimerNow = pdTRUE;
 699:../Dave/Generated/FREERTOS/timers.c **** 		}
 700:../Dave/Generated/FREERTOS/timers.c **** 		else
 701:../Dave/Generated/FREERTOS/timers.c **** 		{
 702:../Dave/Generated/FREERTOS/timers.c **** 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 703:../Dave/Generated/FREERTOS/timers.c **** 		}
 704:../Dave/Generated/FREERTOS/timers.c **** 	}
 705:../Dave/Generated/FREERTOS/timers.c **** 	else
 706:../Dave/Generated/FREERTOS/timers.c **** 	{
 707:../Dave/Generated/FREERTOS/timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 708:../Dave/Generated/FREERTOS/timers.c **** 		{
 709:../Dave/Generated/FREERTOS/timers.c **** 			/* If, since the command was issued, the tick count has overflowed
 710:../Dave/Generated/FREERTOS/timers.c **** 			but the expiry time has not, then the timer must have already passed
 711:../Dave/Generated/FREERTOS/timers.c **** 			its expiry time and should be processed immediately. */
 712:../Dave/Generated/FREERTOS/timers.c **** 			xProcessTimerNow = pdTRUE;
 713:../Dave/Generated/FREERTOS/timers.c **** 		}
 714:../Dave/Generated/FREERTOS/timers.c **** 		else
 715:../Dave/Generated/FREERTOS/timers.c **** 		{
 716:../Dave/Generated/FREERTOS/timers.c **** 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 717:../Dave/Generated/FREERTOS/timers.c **** 		}
 718:../Dave/Generated/FREERTOS/timers.c **** 	}
 719:../Dave/Generated/FREERTOS/timers.c **** 
 720:../Dave/Generated/FREERTOS/timers.c **** 	return xProcessTimerNow;
 721:../Dave/Generated/FREERTOS/timers.c **** }
 722:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 723:../Dave/Generated/FREERTOS/timers.c **** 
 724:../Dave/Generated/FREERTOS/timers.c **** static void	prvProcessReceivedCommands( void )
 725:../Dave/Generated/FREERTOS/timers.c **** {
 726:../Dave/Generated/FREERTOS/timers.c **** DaemonTaskMessage_t xMessage;
 727:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer;
 728:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 729:../Dave/Generated/FREERTOS/timers.c **** TickType_t xTimeNow;
 730:../Dave/Generated/FREERTOS/timers.c **** 
 731:../Dave/Generated/FREERTOS/timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 732:../Dave/Generated/FREERTOS/timers.c **** 	{
 733:../Dave/Generated/FREERTOS/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 734:../Dave/Generated/FREERTOS/timers.c **** 		{
 735:../Dave/Generated/FREERTOS/timers.c **** 			/* Negative commands are pended function calls rather than timer
 736:../Dave/Generated/FREERTOS/timers.c **** 			commands. */
 737:../Dave/Generated/FREERTOS/timers.c **** 			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 738:../Dave/Generated/FREERTOS/timers.c **** 			{
 739:../Dave/Generated/FREERTOS/timers.c **** 				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 740:../Dave/Generated/FREERTOS/timers.c **** 
 741:../Dave/Generated/FREERTOS/timers.c **** 				/* The timer uses the xCallbackParameters member to request a
 742:../Dave/Generated/FREERTOS/timers.c **** 				callback be executed.  Check the callback is not NULL. */
 743:../Dave/Generated/FREERTOS/timers.c **** 				configASSERT( pxCallback );
 744:../Dave/Generated/FREERTOS/timers.c **** 
 745:../Dave/Generated/FREERTOS/timers.c **** 				/* Call the function. */
 746:../Dave/Generated/FREERTOS/timers.c **** 				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 747:../Dave/Generated/FREERTOS/timers.c **** 			}
 748:../Dave/Generated/FREERTOS/timers.c **** 			else
 749:../Dave/Generated/FREERTOS/timers.c **** 			{
 750:../Dave/Generated/FREERTOS/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 751:../Dave/Generated/FREERTOS/timers.c **** 			}
 752:../Dave/Generated/FREERTOS/timers.c **** 		}
 753:../Dave/Generated/FREERTOS/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 754:../Dave/Generated/FREERTOS/timers.c **** 
 755:../Dave/Generated/FREERTOS/timers.c **** 		/* Commands that are positive are timer commands rather than pended
 756:../Dave/Generated/FREERTOS/timers.c **** 		function calls. */
 757:../Dave/Generated/FREERTOS/timers.c **** 		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 758:../Dave/Generated/FREERTOS/timers.c **** 		{
 759:../Dave/Generated/FREERTOS/timers.c **** 			/* The messages uses the xTimerParameters member to work on a
 760:../Dave/Generated/FREERTOS/timers.c **** 			software timer. */
 761:../Dave/Generated/FREERTOS/timers.c **** 			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 762:../Dave/Generated/FREERTOS/timers.c **** 
 763:../Dave/Generated/FREERTOS/timers.c **** 			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 764:../Dave/Generated/FREERTOS/timers.c **** 			{
 765:../Dave/Generated/FREERTOS/timers.c **** 				/* The timer is in a list, remove it. */
 766:../Dave/Generated/FREERTOS/timers.c **** 				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 767:../Dave/Generated/FREERTOS/timers.c **** 			}
 768:../Dave/Generated/FREERTOS/timers.c **** 			else
 769:../Dave/Generated/FREERTOS/timers.c **** 			{
 770:../Dave/Generated/FREERTOS/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 771:../Dave/Generated/FREERTOS/timers.c **** 			}
 772:../Dave/Generated/FREERTOS/timers.c **** 
 773:../Dave/Generated/FREERTOS/timers.c **** 			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageV
 774:../Dave/Generated/FREERTOS/timers.c **** 
 775:../Dave/Generated/FREERTOS/timers.c **** 			/* In this case the xTimerListsWereSwitched parameter is not used, but
 776:../Dave/Generated/FREERTOS/timers.c **** 			it must be present in the function call.  prvSampleTimeNow() must be
 777:../Dave/Generated/FREERTOS/timers.c **** 			called after the message is received from xTimerQueue so there is no
 778:../Dave/Generated/FREERTOS/timers.c **** 			possibility of a higher priority task adding a message to the message
 779:../Dave/Generated/FREERTOS/timers.c **** 			queue with a time that is ahead of the timer daemon task (because it
 780:../Dave/Generated/FREERTOS/timers.c **** 			pre-empted the timer daemon task after the xTimeNow value was set). */
 781:../Dave/Generated/FREERTOS/timers.c **** 			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 782:../Dave/Generated/FREERTOS/timers.c **** 
 783:../Dave/Generated/FREERTOS/timers.c **** 			switch( xMessage.xMessageID )
 784:../Dave/Generated/FREERTOS/timers.c **** 			{
 785:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_START :
 786:../Dave/Generated/FREERTOS/timers.c **** 			    case tmrCOMMAND_START_FROM_ISR :
 787:../Dave/Generated/FREERTOS/timers.c **** 			    case tmrCOMMAND_RESET :
 788:../Dave/Generated/FREERTOS/timers.c **** 			    case tmrCOMMAND_RESET_FROM_ISR :
 789:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_START_DONT_TRACE :
 790:../Dave/Generated/FREERTOS/timers.c **** 					/* Start or restart a timer. */
 791:../Dave/Generated/FREERTOS/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 792:../Dave/Generated/FREERTOS/timers.c **** 					{
 793:../Dave/Generated/FREERTOS/timers.c **** 						/* The timer expired before it was added to the active
 794:../Dave/Generated/FREERTOS/timers.c **** 						timer list.  Process it now. */
 795:../Dave/Generated/FREERTOS/timers.c **** 						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 796:../Dave/Generated/FREERTOS/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 797:../Dave/Generated/FREERTOS/timers.c **** 
 798:../Dave/Generated/FREERTOS/timers.c **** 						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 799:../Dave/Generated/FREERTOS/timers.c **** 						{
 800:../Dave/Generated/FREERTOS/timers.c **** 							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParam
 801:../Dave/Generated/FREERTOS/timers.c **** 							configASSERT( xResult );
 802:../Dave/Generated/FREERTOS/timers.c **** 							( void ) xResult;
 803:../Dave/Generated/FREERTOS/timers.c **** 						}
 804:../Dave/Generated/FREERTOS/timers.c **** 						else
 805:../Dave/Generated/FREERTOS/timers.c **** 						{
 806:../Dave/Generated/FREERTOS/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 807:../Dave/Generated/FREERTOS/timers.c **** 						}
 808:../Dave/Generated/FREERTOS/timers.c **** 					}
 809:../Dave/Generated/FREERTOS/timers.c **** 					else
 810:../Dave/Generated/FREERTOS/timers.c **** 					{
 811:../Dave/Generated/FREERTOS/timers.c **** 						mtCOVERAGE_TEST_MARKER();
 812:../Dave/Generated/FREERTOS/timers.c **** 					}
 813:../Dave/Generated/FREERTOS/timers.c **** 					break;
 814:../Dave/Generated/FREERTOS/timers.c **** 
 815:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_STOP :
 816:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_STOP_FROM_ISR :
 817:../Dave/Generated/FREERTOS/timers.c **** 					/* The timer has already been removed from the active list.
 818:../Dave/Generated/FREERTOS/timers.c **** 					There is nothing to do here. */
 819:../Dave/Generated/FREERTOS/timers.c **** 					break;
 820:../Dave/Generated/FREERTOS/timers.c **** 
 821:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD :
 822:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
 823:../Dave/Generated/FREERTOS/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 824:../Dave/Generated/FREERTOS/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 825:../Dave/Generated/FREERTOS/timers.c **** 
 826:../Dave/Generated/FREERTOS/timers.c **** 					/* The new period does not really have a reference, and can
 827:../Dave/Generated/FREERTOS/timers.c **** 					be longer or shorter than the old one.  The command time is
 828:../Dave/Generated/FREERTOS/timers.c **** 					therefore set to the current time, and as the period cannot
 829:../Dave/Generated/FREERTOS/timers.c **** 					be zero the next expiry time can only be in the future,
 830:../Dave/Generated/FREERTOS/timers.c **** 					meaning (unlike for the xTimerStart() case above) there is
 831:../Dave/Generated/FREERTOS/timers.c **** 					no fail case that needs to be handled here. */
 832:../Dave/Generated/FREERTOS/timers.c **** 					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTi
 833:../Dave/Generated/FREERTOS/timers.c **** 					break;
 834:../Dave/Generated/FREERTOS/timers.c **** 
 835:../Dave/Generated/FREERTOS/timers.c **** 				case tmrCOMMAND_DELETE :
 836:../Dave/Generated/FREERTOS/timers.c **** 					/* The timer has already been removed from the active list,
 837:../Dave/Generated/FREERTOS/timers.c **** 					just free up the memory if the memory was dynamically
 838:../Dave/Generated/FREERTOS/timers.c **** 					allocated. */
 839:../Dave/Generated/FREERTOS/timers.c **** 					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 840:../Dave/Generated/FREERTOS/timers.c **** 					{
 841:../Dave/Generated/FREERTOS/timers.c **** 						/* The timer can only have been allocated dynamically -
 842:../Dave/Generated/FREERTOS/timers.c **** 						free it again. */
 843:../Dave/Generated/FREERTOS/timers.c **** 						vPortFree( pxTimer );
 844:../Dave/Generated/FREERTOS/timers.c **** 					}
 845:../Dave/Generated/FREERTOS/timers.c **** 					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 846:../Dave/Generated/FREERTOS/timers.c **** 					{
 847:../Dave/Generated/FREERTOS/timers.c **** 						/* The timer could have been allocated statically or
 848:../Dave/Generated/FREERTOS/timers.c **** 						dynamically, so check before attempting to free the
 849:../Dave/Generated/FREERTOS/timers.c **** 						memory. */
 850:../Dave/Generated/FREERTOS/timers.c **** 						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 851:../Dave/Generated/FREERTOS/timers.c **** 						{
 852:../Dave/Generated/FREERTOS/timers.c **** 							vPortFree( pxTimer );
 853:../Dave/Generated/FREERTOS/timers.c **** 						}
 854:../Dave/Generated/FREERTOS/timers.c **** 						else
 855:../Dave/Generated/FREERTOS/timers.c **** 						{
 856:../Dave/Generated/FREERTOS/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 857:../Dave/Generated/FREERTOS/timers.c **** 						}
 858:../Dave/Generated/FREERTOS/timers.c **** 					}
 859:../Dave/Generated/FREERTOS/timers.c **** 					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 860:../Dave/Generated/FREERTOS/timers.c **** 					break;
 861:../Dave/Generated/FREERTOS/timers.c **** 
 862:../Dave/Generated/FREERTOS/timers.c **** 				default	:
 863:../Dave/Generated/FREERTOS/timers.c **** 					/* Don't expect to get here. */
 864:../Dave/Generated/FREERTOS/timers.c **** 					break;
 865:../Dave/Generated/FREERTOS/timers.c **** 			}
 866:../Dave/Generated/FREERTOS/timers.c **** 		}
 867:../Dave/Generated/FREERTOS/timers.c **** 	}
 868:../Dave/Generated/FREERTOS/timers.c **** }
 869:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 870:../Dave/Generated/FREERTOS/timers.c **** 
 871:../Dave/Generated/FREERTOS/timers.c **** static void prvSwitchTimerLists( void )
 872:../Dave/Generated/FREERTOS/timers.c **** {
  27              	 .loc 1 872 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31 0000 2DE9F047 	 push {r4,r5,r6,r7,r8,r9,r10,lr}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 32
  34              	 .cfi_offset 4,-32
  35              	 .cfi_offset 5,-28
  36              	 .cfi_offset 6,-24
  37              	 .cfi_offset 7,-20
  38              	 .cfi_offset 8,-16
  39              	 .cfi_offset 9,-12
  40              	 .cfi_offset 10,-8
  41              	 .cfi_offset 14,-4
  42 0004 224D     	 ldr r5,.L18
  43              	.LBB47:
  44              	.LBB48:
 426:../Dave/Generated/FREERTOS/timers.c **** 	{
  45              	 .loc 1 426 0
  46 0006 234E     	 ldr r6,.L18+4
  47              	.LBE48:
  48              	.LBE47:
  49              	 .loc 1 872 0
  50 0008 84B0     	 sub sp,sp,#16
  51              	.LCFI1:
  52              	 .cfi_def_cfa_offset 48
 873:../Dave/Generated/FREERTOS/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 874:../Dave/Generated/FREERTOS/timers.c **** List_t *pxTemp;
 875:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer;
 876:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xResult;
 877:../Dave/Generated/FREERTOS/timers.c **** 
 878:../Dave/Generated/FREERTOS/timers.c **** 	/* The tick count has overflowed.  The timer lists must be switched.
 879:../Dave/Generated/FREERTOS/timers.c **** 	If there are any timers still referenced from the current timer list
 880:../Dave/Generated/FREERTOS/timers.c **** 	then they must have expired and should be processed before the lists
 881:../Dave/Generated/FREERTOS/timers.c **** 	are switched. */
 882:../Dave/Generated/FREERTOS/timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  53              	 .loc 1 882 0
  54 000a A846     	 mov r8,r5
  55              	.LBB51:
  56              	.LBB49:
 429:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  57              	 .loc 1 429 0
  58 000c 4FF0000A 	 mov r10,#0
  59              	.LBE49:
  60              	.LBE51:
  61              	 .loc 1 882 0
  62 0010 0DE0     	 b .L3
  63              	.L8:
 883:../Dave/Generated/FREERTOS/timers.c **** 	{
 884:../Dave/Generated/FREERTOS/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  64              	 .loc 1 884 0
  65 0012 DB68     	 ldr r3,[r3,#12]
 885:../Dave/Generated/FREERTOS/timers.c **** 
 886:../Dave/Generated/FREERTOS/timers.c **** 		/* Remove the timer from the list. */
 887:../Dave/Generated/FREERTOS/timers.c **** 		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  66              	 .loc 1 887 0
  67 0014 DC68     	 ldr r4,[r3,#12]
 884:../Dave/Generated/FREERTOS/timers.c **** 
  68              	 .loc 1 884 0
  69 0016 1F68     	 ldr r7,[r3]
  70              	.LVL0:
 888:../Dave/Generated/FREERTOS/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  71              	 .loc 1 888 0
  72 0018 04F10409 	 add r9,r4,#4
  73 001c 4846     	 mov r0,r9
  74 001e FFF7FEFF 	 bl uxListRemove
  75              	.LVL1:
 889:../Dave/Generated/FREERTOS/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 890:../Dave/Generated/FREERTOS/timers.c **** 
 891:../Dave/Generated/FREERTOS/timers.c **** 		/* Execute its callback, then send a command to restart the timer if
 892:../Dave/Generated/FREERTOS/timers.c **** 		it is an auto-reload timer.  It cannot be restarted here as the lists
 893:../Dave/Generated/FREERTOS/timers.c **** 		have not yet been switched. */
 894:../Dave/Generated/FREERTOS/timers.c **** 		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  76              	 .loc 1 894 0
  77 0022 636A     	 ldr r3,[r4,#36]
  78 0024 2046     	 mov r0,r4
  79 0026 9847     	 blx r3
  80              	.LVL2:
 895:../Dave/Generated/FREERTOS/timers.c **** 
 896:../Dave/Generated/FREERTOS/timers.c **** 		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  81              	 .loc 1 896 0
  82 0028 E369     	 ldr r3,[r4,#28]
  83 002a 012B     	 cmp r3,#1
  84 002c 0BD0     	 beq .L16
  85              	.LVL3:
  86              	.L3:
 882:../Dave/Generated/FREERTOS/timers.c **** 	{
  87              	 .loc 1 882 0
  88 002e 2B68     	 ldr r3,[r5]
  89 0030 1749     	 ldr r1,.L18
  90 0032 1A68     	 ldr r2,[r3]
  91 0034 002A     	 cmp r2,#0
  92 0036 ECD1     	 bne .L8
  93              	.LVL4:
 897:../Dave/Generated/FREERTOS/timers.c **** 		{
 898:../Dave/Generated/FREERTOS/timers.c **** 			/* Calculate the reload value, and if the reload value results in
 899:../Dave/Generated/FREERTOS/timers.c **** 			the timer going into the same timer list then it has already expired
 900:../Dave/Generated/FREERTOS/timers.c **** 			and the timer should be re-inserted into the current list so it is
 901:../Dave/Generated/FREERTOS/timers.c **** 			processed again within this loop.  Otherwise a command should be sent
 902:../Dave/Generated/FREERTOS/timers.c **** 			to restart the timer to ensure it is only inserted into a list after
 903:../Dave/Generated/FREERTOS/timers.c **** 			the lists have been swapped. */
 904:../Dave/Generated/FREERTOS/timers.c **** 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 905:../Dave/Generated/FREERTOS/timers.c **** 			if( xReloadTime > xNextExpireTime )
 906:../Dave/Generated/FREERTOS/timers.c **** 			{
 907:../Dave/Generated/FREERTOS/timers.c **** 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 908:../Dave/Generated/FREERTOS/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 909:../Dave/Generated/FREERTOS/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 910:../Dave/Generated/FREERTOS/timers.c **** 			}
 911:../Dave/Generated/FREERTOS/timers.c **** 			else
 912:../Dave/Generated/FREERTOS/timers.c **** 			{
 913:../Dave/Generated/FREERTOS/timers.c **** 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tm
 914:../Dave/Generated/FREERTOS/timers.c **** 				configASSERT( xResult );
 915:../Dave/Generated/FREERTOS/timers.c **** 				( void ) xResult;
 916:../Dave/Generated/FREERTOS/timers.c **** 			}
 917:../Dave/Generated/FREERTOS/timers.c **** 		}
 918:../Dave/Generated/FREERTOS/timers.c **** 		else
 919:../Dave/Generated/FREERTOS/timers.c **** 		{
 920:../Dave/Generated/FREERTOS/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 921:../Dave/Generated/FREERTOS/timers.c **** 		}
 922:../Dave/Generated/FREERTOS/timers.c **** 	}
 923:../Dave/Generated/FREERTOS/timers.c **** 
 924:../Dave/Generated/FREERTOS/timers.c **** 	pxTemp = pxCurrentTimerList;
 925:../Dave/Generated/FREERTOS/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
  94              	 .loc 1 925 0
  95 0038 174A     	 ldr r2,.L18+8
  96 003a 1068     	 ldr r0,[r2]
  97 003c 0860     	 str r0,[r1]
 926:../Dave/Generated/FREERTOS/timers.c **** 	pxOverflowTimerList = pxTemp;
  98              	 .loc 1 926 0
  99 003e 1360     	 str r3,[r2]
 927:../Dave/Generated/FREERTOS/timers.c **** }
 100              	 .loc 1 927 0
 101 0040 04B0     	 add sp,sp,#16
 102              	.LCFI2:
 103              	 .cfi_remember_state
 104              	 .cfi_def_cfa_offset 32
 105              	 
 106 0042 BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 107              	.LVL5:
 108              	.L16:
 109              	.LCFI3:
 110              	 .cfi_restore_state
 904:../Dave/Generated/FREERTOS/timers.c **** 			if( xReloadTime > xNextExpireTime )
 111              	 .loc 1 904 0
 112 0046 A369     	 ldr r3,[r4,#24]
 113 0048 3B44     	 add r3,r3,r7
 114              	.LVL6:
 905:../Dave/Generated/FREERTOS/timers.c **** 			{
 115              	 .loc 1 905 0
 116 004a BB42     	 cmp r3,r7
 909:../Dave/Generated/FREERTOS/timers.c **** 			}
 117              	 .loc 1 909 0
 118 004c 4946     	 mov r1,r9
 905:../Dave/Generated/FREERTOS/timers.c **** 			{
 119              	 .loc 1 905 0
 120 004e 18D8     	 bhi .L17
 121              	.LBB52:
 122              	.LBB50:
 426:../Dave/Generated/FREERTOS/timers.c **** 	{
 123              	 .loc 1 426 0
 124 0050 3368     	 ldr r3,[r6]
 125              	.LVL7:
 126 0052 6BB1     	 cbz r3,.L9
 429:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 127              	 .loc 1 429 0
 128 0054 CDF800A0 	 str r10,[sp]
 430:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 129              	 .loc 1 430 0
 130 0058 0197     	 str r7,[sp,#4]
 431:../Dave/Generated/FREERTOS/timers.c **** 
 131              	 .loc 1 431 0
 132 005a 0294     	 str r4,[sp,#8]
 435:../Dave/Generated/FREERTOS/timers.c **** 			{
 133              	 .loc 1 435 0
 134 005c FFF7FEFF 	 bl xTaskGetSchedulerState
 135              	.LVL8:
 437:../Dave/Generated/FREERTOS/timers.c **** 			}
 136              	 .loc 1 437 0
 137 0060 0022     	 movs r2,#0
 138 0062 1346     	 mov r3,r2
 139 0064 3068     	 ldr r0,[r6]
 140 0066 6946     	 mov r1,sp
 141 0068 FFF7FEFF 	 bl xQueueGenericSend
 142              	.LVL9:
 143              	.LBE50:
 144              	.LBE52:
 914:../Dave/Generated/FREERTOS/timers.c **** 				( void ) xResult;
 145              	 .loc 1 914 0
 146 006c 0028     	 cmp r0,#0
 147 006e DED1     	 bne .L3
 148              	.LVL10:
 149              	.L9:
 150              	.LBB53:
 151              	.LBB54:
 152              	 .file 2 "../Dave/Generated/FREERTOS/portmacro.h"
   1:../Dave/Generated/FREERTOS/portmacro.h **** /*
   2:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Dave/Generated/FREERTOS/portmacro.h ****     All rights reserved
   4:../Dave/Generated/FREERTOS/portmacro.h **** 
   5:../Dave/Generated/FREERTOS/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Dave/Generated/FREERTOS/portmacro.h **** 
   7:../Dave/Generated/FREERTOS/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../Dave/Generated/FREERTOS/portmacro.h **** 
   9:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Dave/Generated/FREERTOS/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Dave/Generated/FREERTOS/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Dave/Generated/FREERTOS/portmacro.h **** 
  13:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  14:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  19:../Dave/Generated/FREERTOS/portmacro.h **** 
  20:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Dave/Generated/FREERTOS/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Dave/Generated/FREERTOS/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Dave/Generated/FREERTOS/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../Dave/Generated/FREERTOS/portmacro.h **** 
  25:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  26:../Dave/Generated/FREERTOS/portmacro.h ****      *                                                                       *
  27:../Dave/Generated/FREERTOS/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Dave/Generated/FREERTOS/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Dave/Generated/FREERTOS/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../Dave/Generated/FREERTOS/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../Dave/Generated/FREERTOS/portmacro.h ****      *                                                                       *
  32:../Dave/Generated/FREERTOS/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Dave/Generated/FREERTOS/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Dave/Generated/FREERTOS/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../Dave/Generated/FREERTOS/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Dave/Generated/FREERTOS/portmacro.h ****      *                                                                       *
  37:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  38:../Dave/Generated/FREERTOS/portmacro.h **** 
  39:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Dave/Generated/FREERTOS/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Dave/Generated/FREERTOS/portmacro.h ****     defined configASSERT()?
  42:../Dave/Generated/FREERTOS/portmacro.h **** 
  43:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Dave/Generated/FREERTOS/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../Dave/Generated/FREERTOS/portmacro.h ****     participating in the support forum.
  46:../Dave/Generated/FREERTOS/portmacro.h **** 
  47:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Dave/Generated/FREERTOS/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Dave/Generated/FREERTOS/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Dave/Generated/FREERTOS/portmacro.h **** 
  52:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Dave/Generated/FREERTOS/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Dave/Generated/FREERTOS/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Dave/Generated/FREERTOS/portmacro.h **** 
  56:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Dave/Generated/FREERTOS/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Dave/Generated/FREERTOS/portmacro.h **** 
  59:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Dave/Generated/FREERTOS/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Dave/Generated/FREERTOS/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Dave/Generated/FREERTOS/portmacro.h **** 
  63:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Dave/Generated/FREERTOS/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../Dave/Generated/FREERTOS/portmacro.h ****     mission critical applications that require provable dependability.
  66:../Dave/Generated/FREERTOS/portmacro.h **** 
  67:../Dave/Generated/FREERTOS/portmacro.h ****     1 tab == 4 spaces!
  68:../Dave/Generated/FREERTOS/portmacro.h **** */
  69:../Dave/Generated/FREERTOS/portmacro.h **** #include "freertos_conf.h"
  70:../Dave/Generated/FREERTOS/portmacro.h **** 
  71:../Dave/Generated/FREERTOS/portmacro.h **** #if FREERTOS_MPU_SUPPORT == 0
  72:../Dave/Generated/FREERTOS/portmacro.h **** 
  73:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef PORTMACRO_H
  74:../Dave/Generated/FREERTOS/portmacro.h **** #define PORTMACRO_H
  75:../Dave/Generated/FREERTOS/portmacro.h **** 
  76:../Dave/Generated/FREERTOS/portmacro.h **** #ifdef __cplusplus
  77:../Dave/Generated/FREERTOS/portmacro.h **** extern "C" {
  78:../Dave/Generated/FREERTOS/portmacro.h **** #endif
  79:../Dave/Generated/FREERTOS/portmacro.h **** 
  80:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------
  81:../Dave/Generated/FREERTOS/portmacro.h ****  * Port specific definitions.
  82:../Dave/Generated/FREERTOS/portmacro.h ****  *
  83:../Dave/Generated/FREERTOS/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  84:../Dave/Generated/FREERTOS/portmacro.h ****  * given hardware and compiler.
  85:../Dave/Generated/FREERTOS/portmacro.h ****  *
  86:../Dave/Generated/FREERTOS/portmacro.h ****  * These settings should not be altered.
  87:../Dave/Generated/FREERTOS/portmacro.h ****  *-----------------------------------------------------------
  88:../Dave/Generated/FREERTOS/portmacro.h ****  */
  89:../Dave/Generated/FREERTOS/portmacro.h **** 
  90:../Dave/Generated/FREERTOS/portmacro.h **** #if defined( __GNUC__ )
  91:../Dave/Generated/FREERTOS/portmacro.h **** /* Type definitions. */
  92:../Dave/Generated/FREERTOS/portmacro.h **** #define portCHAR		char
  93:../Dave/Generated/FREERTOS/portmacro.h **** #define portFLOAT		float
  94:../Dave/Generated/FREERTOS/portmacro.h **** #define portDOUBLE		double
  95:../Dave/Generated/FREERTOS/portmacro.h **** #define portLONG		long
  96:../Dave/Generated/FREERTOS/portmacro.h **** #define portSHORT		short
  97:../Dave/Generated/FREERTOS/portmacro.h **** #define portSTACK_TYPE	uint32_t
  98:../Dave/Generated/FREERTOS/portmacro.h **** #define portBASE_TYPE	long
  99:../Dave/Generated/FREERTOS/portmacro.h **** 
 100:../Dave/Generated/FREERTOS/portmacro.h **** typedef portSTACK_TYPE StackType_t;
 101:../Dave/Generated/FREERTOS/portmacro.h **** typedef long BaseType_t;
 102:../Dave/Generated/FREERTOS/portmacro.h **** typedef unsigned long UBaseType_t;
 103:../Dave/Generated/FREERTOS/portmacro.h **** 
 104:../Dave/Generated/FREERTOS/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 105:../Dave/Generated/FREERTOS/portmacro.h **** 	typedef uint16_t TickType_t;
 106:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 107:../Dave/Generated/FREERTOS/portmacro.h **** #else
 108:../Dave/Generated/FREERTOS/portmacro.h **** 	typedef uint32_t TickType_t;
 109:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 110:../Dave/Generated/FREERTOS/portmacro.h **** 
 111:../Dave/Generated/FREERTOS/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 112:../Dave/Generated/FREERTOS/portmacro.h **** 	not need to be guarded with a critical section. */
 113:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 114:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 115:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 116:../Dave/Generated/FREERTOS/portmacro.h **** 
 117:../Dave/Generated/FREERTOS/portmacro.h **** /* Architecture specifics. */
 118:../Dave/Generated/FREERTOS/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 119:../Dave/Generated/FREERTOS/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 120:../Dave/Generated/FREERTOS/portmacro.h **** #define portBYTE_ALIGNMENT			8
 121:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 122:../Dave/Generated/FREERTOS/portmacro.h **** 
 123:../Dave/Generated/FREERTOS/portmacro.h **** /* Scheduler utilities. */
 124:../Dave/Generated/FREERTOS/portmacro.h **** #define portYIELD() 															\
 125:../Dave/Generated/FREERTOS/portmacro.h **** {																				\
 126:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 127:../Dave/Generated/FREERTOS/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 128:../Dave/Generated/FREERTOS/portmacro.h **** 																				\
 129:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 130:../Dave/Generated/FREERTOS/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 131:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile( "dsb" );													\
 132:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile( "isb" );													\
 133:../Dave/Generated/FREERTOS/portmacro.h **** }
 134:../Dave/Generated/FREERTOS/portmacro.h **** 
 135:../Dave/Generated/FREERTOS/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 136:../Dave/Generated/FREERTOS/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 137:../Dave/Generated/FREERTOS/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 138:../Dave/Generated/FREERTOS/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 139:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 140:../Dave/Generated/FREERTOS/portmacro.h **** 
 141:../Dave/Generated/FREERTOS/portmacro.h **** /* Critical section management. */
 142:../Dave/Generated/FREERTOS/portmacro.h **** extern void vPortEnterCritical( void );
 143:../Dave/Generated/FREERTOS/portmacro.h **** extern void vPortExitCritical( void );
 144:../Dave/Generated/FREERTOS/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 145:../Dave/Generated/FREERTOS/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 146:../Dave/Generated/FREERTOS/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 147:../Dave/Generated/FREERTOS/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 148:../Dave/Generated/FREERTOS/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 149:../Dave/Generated/FREERTOS/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 150:../Dave/Generated/FREERTOS/portmacro.h **** 
 151:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 152:../Dave/Generated/FREERTOS/portmacro.h **** 
 153:../Dave/Generated/FREERTOS/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 154:../Dave/Generated/FREERTOS/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 155:../Dave/Generated/FREERTOS/portmacro.h **** (which build with all the ports) will build. */
 156:../Dave/Generated/FREERTOS/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 157:../Dave/Generated/FREERTOS/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 158:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 159:../Dave/Generated/FREERTOS/portmacro.h **** 
 160:../Dave/Generated/FREERTOS/portmacro.h **** /* Tickless idle/low power functionality. */
 161:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 162:../Dave/Generated/FREERTOS/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 163:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 164:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 165:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 166:../Dave/Generated/FREERTOS/portmacro.h **** 
 167:../Dave/Generated/FREERTOS/portmacro.h **** /* Architecture specific optimisations. */
 168:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 169:../Dave/Generated/FREERTOS/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 170:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 171:../Dave/Generated/FREERTOS/portmacro.h **** 
 172:../Dave/Generated/FREERTOS/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 173:../Dave/Generated/FREERTOS/portmacro.h **** 
 174:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Generic helper function. */
 175:../Dave/Generated/FREERTOS/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 176:../Dave/Generated/FREERTOS/portmacro.h **** 	{
 177:../Dave/Generated/FREERTOS/portmacro.h **** 	uint8_t ucReturn;
 178:../Dave/Generated/FREERTOS/portmacro.h **** 
 179:../Dave/Generated/FREERTOS/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 180:../Dave/Generated/FREERTOS/portmacro.h **** 		return ucReturn;
 181:../Dave/Generated/FREERTOS/portmacro.h **** 	}
 182:../Dave/Generated/FREERTOS/portmacro.h **** 
 183:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Check the configuration. */
 184:../Dave/Generated/FREERTOS/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 185:../Dave/Generated/FREERTOS/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 186:../Dave/Generated/FREERTOS/portmacro.h **** 	#endif
 187:../Dave/Generated/FREERTOS/portmacro.h **** 
 188:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 189:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 190:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 191:../Dave/Generated/FREERTOS/portmacro.h **** 
 192:../Dave/Generated/FREERTOS/portmacro.h **** 	/*-----------------------------------------------------------*/
 193:../Dave/Generated/FREERTOS/portmacro.h **** 
 194:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 195:../Dave/Generated/FREERTOS/portmacro.h **** 
 196:../Dave/Generated/FREERTOS/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 197:../Dave/Generated/FREERTOS/portmacro.h **** 
 198:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 199:../Dave/Generated/FREERTOS/portmacro.h **** 
 200:../Dave/Generated/FREERTOS/portmacro.h **** #ifdef configASSERT
 201:../Dave/Generated/FREERTOS/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 202:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 203:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 204:../Dave/Generated/FREERTOS/portmacro.h **** 
 205:../Dave/Generated/FREERTOS/portmacro.h **** /* portNOP() is not required by this port. */
 206:../Dave/Generated/FREERTOS/portmacro.h **** #define portNOP()
 207:../Dave/Generated/FREERTOS/portmacro.h **** 
 208:../Dave/Generated/FREERTOS/portmacro.h **** #define portINLINE	__inline
 209:../Dave/Generated/FREERTOS/portmacro.h **** 
 210:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef portFORCE_INLINE
 211:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 212:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 213:../Dave/Generated/FREERTOS/portmacro.h **** 
 214:../Dave/Generated/FREERTOS/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 215:../Dave/Generated/FREERTOS/portmacro.h **** {
 216:../Dave/Generated/FREERTOS/portmacro.h **** uint32_t ulCurrentInterrupt;
 217:../Dave/Generated/FREERTOS/portmacro.h **** BaseType_t xReturn;
 218:../Dave/Generated/FREERTOS/portmacro.h **** 
 219:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 220:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 221:../Dave/Generated/FREERTOS/portmacro.h **** 
 222:../Dave/Generated/FREERTOS/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 223:../Dave/Generated/FREERTOS/portmacro.h **** 	{
 224:../Dave/Generated/FREERTOS/portmacro.h **** 		xReturn = pdFALSE;
 225:../Dave/Generated/FREERTOS/portmacro.h **** 	}
 226:../Dave/Generated/FREERTOS/portmacro.h **** 	else
 227:../Dave/Generated/FREERTOS/portmacro.h **** 	{
 228:../Dave/Generated/FREERTOS/portmacro.h **** 		xReturn = pdTRUE;
 229:../Dave/Generated/FREERTOS/portmacro.h **** 	}
 230:../Dave/Generated/FREERTOS/portmacro.h **** 
 231:../Dave/Generated/FREERTOS/portmacro.h **** 	return xReturn;
 232:../Dave/Generated/FREERTOS/portmacro.h **** }
 233:../Dave/Generated/FREERTOS/portmacro.h **** 
 234:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 235:../Dave/Generated/FREERTOS/portmacro.h **** 
 236:../Dave/Generated/FREERTOS/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 237:../Dave/Generated/FREERTOS/portmacro.h **** {
 238:../Dave/Generated/FREERTOS/portmacro.h **** uint32_t ulNewBASEPRI;
 239:../Dave/Generated/FREERTOS/portmacro.h **** 
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile
 153              	 .loc 2 240 0
 154              	
 155 0070 4FF0FC03 	 mov r3,#252
 156 0074 83F31188 	 msr basepri,r3
 157 0078 BFF36F8F 	 isb 
 158 007c BFF34F8F 	 dsb 
 159              	
 160              	
 161              	.LVL11:
 162              	 .thumb
 163              	.L7:
 164              	.LBE54:
 165              	.LBE53:
 914:../Dave/Generated/FREERTOS/timers.c **** 				( void ) xResult;
 166              	 .loc 1 914 0 discriminator 1
 167 0080 FEE7     	 b .L7
 168              	.LVL12:
 169              	.L17:
 907:../Dave/Generated/FREERTOS/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 170              	 .loc 1 907 0
 171 0082 6360     	 str r3,[r4,#4]
 908:../Dave/Generated/FREERTOS/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 172              	 .loc 1 908 0
 173 0084 2461     	 str r4,[r4,#16]
 909:../Dave/Generated/FREERTOS/timers.c **** 			}
 174              	 .loc 1 909 0
 175 0086 D8F80000 	 ldr r0,[r8]
 176 008a FFF7FEFF 	 bl vListInsert
 177              	.LVL13:
 178 008e CEE7     	 b .L3
 179              	.L19:
 180              	 .align 2
 181              	.L18:
 182 0090 00000000 	 .word .LANCHOR0
 183 0094 00000000 	 .word .LANCHOR1
 184 0098 00000000 	 .word .LANCHOR2
 185              	 .cfi_endproc
 186              	.LFE143:
 188              	 .section .text.xTimerCreateTimerTask,"ax",%progbits
 189              	 .align 2
 190              	 .global xTimerCreateTimerTask
 191              	 .thumb
 192              	 .thumb_func
 194              	xTimerCreateTimerTask:
 195              	.LFB128:
 260:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xReturn = pdFAIL;
 196              	 .loc 1 260 0
 197              	 .cfi_startproc
 198              	 
 199              	 
 200              	.LVL14:
 201 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 202              	.LCFI4:
 203              	 .cfi_def_cfa_offset 20
 204              	 .cfi_offset 4,-20
 205              	 .cfi_offset 5,-16
 206              	 .cfi_offset 6,-12
 207              	 .cfi_offset 7,-8
 208              	 .cfi_offset 14,-4
 209              	.LBB59:
 210              	.LBB60:
 928:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 929:../Dave/Generated/FREERTOS/timers.c **** 
 930:../Dave/Generated/FREERTOS/timers.c **** static void prvCheckForValidListAndQueue( void )
 931:../Dave/Generated/FREERTOS/timers.c **** {
 932:../Dave/Generated/FREERTOS/timers.c **** 	/* Check that the list from which active timers are referenced, and the
 933:../Dave/Generated/FREERTOS/timers.c **** 	queue used to communicate with the timer service, have been
 934:../Dave/Generated/FREERTOS/timers.c **** 	initialised. */
 935:../Dave/Generated/FREERTOS/timers.c **** 	taskENTER_CRITICAL();
 936:../Dave/Generated/FREERTOS/timers.c **** 	{
 937:../Dave/Generated/FREERTOS/timers.c **** 		if( xTimerQueue == NULL )
 211              	 .loc 1 937 0
 212 0002 1C4C     	 ldr r4,.L35
 213              	.LBE60:
 214              	.LBE59:
 260:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xReturn = pdFAIL;
 215              	 .loc 1 260 0
 216 0004 83B0     	 sub sp,sp,#12
 217              	.LCFI5:
 218              	 .cfi_def_cfa_offset 32
 219              	.LBB63:
 220              	.LBB61:
 935:../Dave/Generated/FREERTOS/timers.c **** 	{
 221              	 .loc 1 935 0
 222 0006 FFF7FEFF 	 bl vPortEnterCritical
 223              	.LVL15:
 224              	 .loc 1 937 0
 225 000a 2668     	 ldr r6,[r4]
 226 000c D6B1     	 cbz r6,.L34
 227              	.L22:
 938:../Dave/Generated/FREERTOS/timers.c **** 		{
 939:../Dave/Generated/FREERTOS/timers.c **** 			vListInitialise( &xActiveTimerList1 );
 940:../Dave/Generated/FREERTOS/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 941:../Dave/Generated/FREERTOS/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 942:../Dave/Generated/FREERTOS/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 943:../Dave/Generated/FREERTOS/timers.c **** 
 944:../Dave/Generated/FREERTOS/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 945:../Dave/Generated/FREERTOS/timers.c **** 			{
 946:../Dave/Generated/FREERTOS/timers.c **** 				/* The timer queue is allocated statically in case
 947:../Dave/Generated/FREERTOS/timers.c **** 				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 948:../Dave/Generated/FREERTOS/timers.c **** 				static StaticQueue_t xStaticTimerQueue;
 949:../Dave/Generated/FREERTOS/timers.c **** 				static uint8_t ucStaticTimerQueueStorage[ configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_
 950:../Dave/Generated/FREERTOS/timers.c **** 
 951:../Dave/Generated/FREERTOS/timers.c **** 				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskM
 952:../Dave/Generated/FREERTOS/timers.c **** 			}
 953:../Dave/Generated/FREERTOS/timers.c **** 			#else
 954:../Dave/Generated/FREERTOS/timers.c **** 			{
 955:../Dave/Generated/FREERTOS/timers.c **** 				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage
 956:../Dave/Generated/FREERTOS/timers.c **** 			}
 957:../Dave/Generated/FREERTOS/timers.c **** 			#endif
 958:../Dave/Generated/FREERTOS/timers.c **** 
 959:../Dave/Generated/FREERTOS/timers.c **** 			#if ( configQUEUE_REGISTRY_SIZE > 0 )
 960:../Dave/Generated/FREERTOS/timers.c **** 			{
 961:../Dave/Generated/FREERTOS/timers.c **** 				if( xTimerQueue != NULL )
 962:../Dave/Generated/FREERTOS/timers.c **** 				{
 963:../Dave/Generated/FREERTOS/timers.c **** 					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 964:../Dave/Generated/FREERTOS/timers.c **** 				}
 965:../Dave/Generated/FREERTOS/timers.c **** 				else
 966:../Dave/Generated/FREERTOS/timers.c **** 				{
 967:../Dave/Generated/FREERTOS/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 968:../Dave/Generated/FREERTOS/timers.c **** 				}
 969:../Dave/Generated/FREERTOS/timers.c **** 			}
 970:../Dave/Generated/FREERTOS/timers.c **** 			#endif /* configQUEUE_REGISTRY_SIZE */
 971:../Dave/Generated/FREERTOS/timers.c **** 		}
 972:../Dave/Generated/FREERTOS/timers.c **** 		else
 973:../Dave/Generated/FREERTOS/timers.c **** 		{
 974:../Dave/Generated/FREERTOS/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 975:../Dave/Generated/FREERTOS/timers.c **** 		}
 976:../Dave/Generated/FREERTOS/timers.c **** 	}
 977:../Dave/Generated/FREERTOS/timers.c **** 	taskEXIT_CRITICAL();
 228              	 .loc 1 977 0
 229 000e FFF7FEFF 	 bl vPortExitCritical
 230              	.LVL16:
 231              	.LBE61:
 232              	.LBE63:
 269:../Dave/Generated/FREERTOS/timers.c **** 	{
 233              	 .loc 1 269 0
 234 0012 2368     	 ldr r3,[r4]
 235 0014 6BB1     	 cbz r3,.L24
 293:../Dave/Generated/FREERTOS/timers.c **** 									"Tmr Svc",
 236              	 .loc 1 293 0
 237 0016 184B     	 ldr r3,.L35+4
 238 0018 1848     	 ldr r0,.L35+8
 239 001a 1949     	 ldr r1,.L35+12
 240 001c 0222     	 movs r2,#2
 241 001e 8DE80C00 	 stmia sp,{r2,r3}
 242 0022 4FF48272 	 mov r2,#260
 243 0026 0023     	 movs r3,#0
 244 0028 FFF7FEFF 	 bl xTaskCreate
 245              	.LVL17:
 307:../Dave/Generated/FREERTOS/timers.c **** 	return xReturn;
 246              	 .loc 1 307 0
 247 002c 08B1     	 cbz r0,.L24
 309:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 248              	 .loc 1 309 0
 249 002e 03B0     	 add sp,sp,#12
 250              	.LCFI6:
 251              	 .cfi_remember_state
 252              	 .cfi_def_cfa_offset 20
 253              	 
 254 0030 F0BD     	 pop {r4,r5,r6,r7,pc}
 255              	.LVL18:
 256              	.L24:
 257              	.LCFI7:
 258              	 .cfi_restore_state
 259              	.LBB64:
 260              	.LBB65:
 261              	 .loc 2 240 0
 262              	
 263 0032 4FF0FC03 	 mov r3,#252
 264 0036 83F31188 	 msr basepri,r3
 265 003a BFF36F8F 	 isb 
 266 003e BFF34F8F 	 dsb 
 267              	
 268              	
 269              	.LVL19:
 270              	 .thumb
 271              	.L26:
 272              	.LBE65:
 273              	.LBE64:
 307:../Dave/Generated/FREERTOS/timers.c **** 	return xReturn;
 274              	 .loc 1 307 0 discriminator 1
 275 0042 FEE7     	 b .L26
 276              	.LVL20:
 277              	.L34:
 278              	.LBB66:
 279              	.LBB62:
 939:../Dave/Generated/FREERTOS/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 280              	 .loc 1 939 0
 281 0044 0F4F     	 ldr r7,.L35+16
 940:../Dave/Generated/FREERTOS/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 282              	 .loc 1 940 0
 283 0046 104D     	 ldr r5,.L35+20
 939:../Dave/Generated/FREERTOS/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 284              	 .loc 1 939 0
 285 0048 3846     	 mov r0,r7
 286 004a FFF7FEFF 	 bl vListInitialise
 287              	.LVL21:
 940:../Dave/Generated/FREERTOS/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 288              	 .loc 1 940 0
 289 004e 2846     	 mov r0,r5
 290 0050 FFF7FEFF 	 bl vListInitialise
 291              	.LVL22:
 941:../Dave/Generated/FREERTOS/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 292              	 .loc 1 941 0
 293 0054 0D4A     	 ldr r2,.L35+24
 942:../Dave/Generated/FREERTOS/timers.c **** 
 294              	 .loc 1 942 0
 295 0056 0E4B     	 ldr r3,.L35+28
 941:../Dave/Generated/FREERTOS/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 296              	 .loc 1 941 0
 297 0058 1760     	 str r7,[r2]
 955:../Dave/Generated/FREERTOS/timers.c **** 			}
 298              	 .loc 1 955 0
 299 005a 0520     	 movs r0,#5
 300 005c 3246     	 mov r2,r6
 301 005e 1021     	 movs r1,#16
 942:../Dave/Generated/FREERTOS/timers.c **** 
 302              	 .loc 1 942 0
 303 0060 1D60     	 str r5,[r3]
 955:../Dave/Generated/FREERTOS/timers.c **** 			}
 304              	 .loc 1 955 0
 305 0062 FFF7FEFF 	 bl xQueueGenericCreate
 306              	.LVL23:
 307 0066 2060     	 str r0,[r4]
 961:../Dave/Generated/FREERTOS/timers.c **** 				{
 308              	 .loc 1 961 0
 309 0068 0028     	 cmp r0,#0
 310 006a D0D0     	 beq .L22
 963:../Dave/Generated/FREERTOS/timers.c **** 				}
 311              	 .loc 1 963 0
 312 006c 0949     	 ldr r1,.L35+32
 313 006e FFF7FEFF 	 bl vQueueAddToRegistry
 314              	.LVL24:
 315 0072 CCE7     	 b .L22
 316              	.L36:
 317              	 .align 2
 318              	.L35:
 319 0074 00000000 	 .word .LANCHOR1
 320 0078 00000000 	 .word .LANCHOR5
 321 007c 00000000 	 .word prvTimerTask
 322 0080 08000000 	 .word .LC1
 323 0084 00000000 	 .word .LANCHOR3
 324 0088 00000000 	 .word .LANCHOR4
 325 008c 00000000 	 .word .LANCHOR0
 326 0090 00000000 	 .word .LANCHOR2
 327 0094 00000000 	 .word .LC0
 328              	.LBE62:
 329              	.LBE66:
 330              	 .cfi_endproc
 331              	.LFE128:
 333              	 .section .text.xTimerCreate,"ax",%progbits
 334              	 .align 2
 335              	 .global xTimerCreate
 336              	 .thumb
 337              	 .thumb_func
 339              	xTimerCreate:
 340              	.LFB129:
 319:../Dave/Generated/FREERTOS/timers.c **** 	Timer_t *pxNewTimer;
 341              	 .loc 1 319 0
 342              	 .cfi_startproc
 343              	 
 344              	 
 345              	.LVL25:
 346 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
 347              	.LCFI8:
 348              	 .cfi_def_cfa_offset 36
 349              	 .cfi_offset 4,-36
 350              	 .cfi_offset 5,-32
 351              	 .cfi_offset 6,-28
 352              	 .cfi_offset 7,-24
 353              	 .cfi_offset 8,-20
 354              	 .cfi_offset 9,-16
 355              	 .cfi_offset 10,-12
 356              	 .cfi_offset 11,-8
 357              	 .cfi_offset 14,-4
 358 0004 8246     	 mov r10,r0
 359 0006 83B0     	 sub sp,sp,#12
 360              	.LCFI9:
 361              	 .cfi_def_cfa_offset 48
 322:../Dave/Generated/FREERTOS/timers.c **** 
 362              	 .loc 1 322 0
 363 0008 2C20     	 movs r0,#44
 364              	.LVL26:
 319:../Dave/Generated/FREERTOS/timers.c **** 	Timer_t *pxNewTimer;
 365              	 .loc 1 319 0
 366 000a 0D46     	 mov r5,r1
 367 000c 9146     	 mov r9,r2
 368 000e 1E46     	 mov r6,r3
 322:../Dave/Generated/FREERTOS/timers.c **** 
 369              	 .loc 1 322 0
 370 0010 FFF7FEFF 	 bl pvPortMalloc
 371              	.LVL27:
 324:../Dave/Generated/FREERTOS/timers.c **** 		{
 372              	 .loc 1 324 0
 373 0014 0446     	 mov r4,r0
 374 0016 F0B1     	 cbz r0,.L38
 375              	.LVL28:
 376              	.LBB73:
 377              	.LBB74:
 396:../Dave/Generated/FREERTOS/timers.c **** 
 378              	 .loc 1 396 0
 379 0018 45B9     	 cbnz r5,.L39
 380              	.LBB75:
 381              	.LBB76:
 382              	 .loc 2 240 0
 383              	
 384 001a 4FF0FC03 	 mov r3,#252
 385 001e 83F31188 	 msr basepri,r3
 386 0022 BFF36F8F 	 isb 
 387 0026 BFF34F8F 	 dsb 
 388              	
 389              	
 390              	.LVL29:
 391              	 .thumb
 392              	.L40:
 393 002a FEE7     	 b .L40
 394              	.L39:
 395              	.LBE76:
 396              	.LBE75:
 397              	.LBB77:
 398              	.LBB78:
 937:../Dave/Generated/FREERTOS/timers.c **** 		{
 399              	 .loc 1 937 0
 400 002c 1A4F     	 ldr r7,.L52
 935:../Dave/Generated/FREERTOS/timers.c **** 	{
 401              	 .loc 1 935 0
 402 002e FFF7FEFF 	 bl vPortEnterCritical
 403              	.LVL30:
 937:../Dave/Generated/FREERTOS/timers.c **** 		{
 404              	 .loc 1 937 0
 405 0032 D7F80080 	 ldr r8,[r7]
 406 0036 B8F1000F 	 cmp r8,#0
 407 003a 10D0     	 beq .L51
 408              	.L42:
 409              	 .loc 1 977 0
 410 003c FFF7FEFF 	 bl vPortExitCritical
 411              	.LVL31:
 412              	.LBE78:
 413              	.LBE77:
 410:../Dave/Generated/FREERTOS/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 414              	 .loc 1 410 0
 415 0040 0C9B     	 ldr r3,[sp,#48]
 406:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 416              	 .loc 1 406 0
 417 0042 C4F800A0 	 str r10,[r4]
 407:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 418              	 .loc 1 407 0
 419 0046 A561     	 str r5,[r4,#24]
 408:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 420              	 .loc 1 408 0
 421 0048 C4F81C90 	 str r9,[r4,#28]
 409:../Dave/Generated/FREERTOS/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 422              	 .loc 1 409 0
 423 004c 2662     	 str r6,[r4,#32]
 410:../Dave/Generated/FREERTOS/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 424              	 .loc 1 410 0
 425 004e 6362     	 str r3,[r4,#36]
 411:../Dave/Generated/FREERTOS/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 426              	 .loc 1 411 0
 427 0050 201D     	 adds r0,r4,#4
 428 0052 FFF7FEFF 	 bl vListInitialiseItem
 429              	.LVL32:
 430              	.L38:
 431              	.LBE74:
 432              	.LBE73:
 339:../Dave/Generated/FREERTOS/timers.c **** 
 433              	 .loc 1 339 0
 434 0056 2046     	 mov r0,r4
 435 0058 03B0     	 add sp,sp,#12
 436              	.LCFI10:
 437              	 .cfi_remember_state
 438              	 .cfi_def_cfa_offset 36
 439              	 
 440 005a BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 441              	.LVL33:
 442              	.L51:
 443              	.LCFI11:
 444              	 .cfi_restore_state
 445              	.LBB82:
 446              	.LBB81:
 447              	.LBB80:
 448              	.LBB79:
 939:../Dave/Generated/FREERTOS/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 449              	 .loc 1 939 0
 450 005e 0F4B     	 ldr r3,.L52+4
 940:../Dave/Generated/FREERTOS/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 451              	 .loc 1 940 0
 452 0060 DFF844B0 	 ldr fp,.L52+16
 939:../Dave/Generated/FREERTOS/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 453              	 .loc 1 939 0
 454 0064 0193     	 str r3,[sp,#4]
 455 0066 1846     	 mov r0,r3
 456 0068 FFF7FEFF 	 bl vListInitialise
 457              	.LVL34:
 940:../Dave/Generated/FREERTOS/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 458              	 .loc 1 940 0
 459 006c 5846     	 mov r0,fp
 460 006e FFF7FEFF 	 bl vListInitialise
 461              	.LVL35:
 941:../Dave/Generated/FREERTOS/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 462              	 .loc 1 941 0
 463 0072 0B49     	 ldr r1,.L52+8
 942:../Dave/Generated/FREERTOS/timers.c **** 
 464              	 .loc 1 942 0
 465 0074 DFF834E0 	 ldr lr,.L52+20
 941:../Dave/Generated/FREERTOS/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 466              	 .loc 1 941 0
 467 0078 019B     	 ldr r3,[sp,#4]
 468 007a 0B60     	 str r3,[r1]
 955:../Dave/Generated/FREERTOS/timers.c **** 			}
 469              	 .loc 1 955 0
 470 007c 4246     	 mov r2,r8
 471 007e 0520     	 movs r0,#5
 472 0080 1021     	 movs r1,#16
 942:../Dave/Generated/FREERTOS/timers.c **** 
 473              	 .loc 1 942 0
 474 0082 CEF800B0 	 str fp,[lr]
 955:../Dave/Generated/FREERTOS/timers.c **** 			}
 475              	 .loc 1 955 0
 476 0086 FFF7FEFF 	 bl xQueueGenericCreate
 477              	.LVL36:
 478 008a 3860     	 str r0,[r7]
 961:../Dave/Generated/FREERTOS/timers.c **** 				{
 479              	 .loc 1 961 0
 480 008c 0028     	 cmp r0,#0
 481 008e D5D0     	 beq .L42
 963:../Dave/Generated/FREERTOS/timers.c **** 				}
 482              	 .loc 1 963 0
 483 0090 0449     	 ldr r1,.L52+12
 484 0092 FFF7FEFF 	 bl vQueueAddToRegistry
 485              	.LVL37:
 486 0096 D1E7     	 b .L42
 487              	.L53:
 488              	 .align 2
 489              	.L52:
 490 0098 00000000 	 .word .LANCHOR1
 491 009c 00000000 	 .word .LANCHOR3
 492 00a0 00000000 	 .word .LANCHOR0
 493 00a4 00000000 	 .word .LC0
 494 00a8 00000000 	 .word .LANCHOR4
 495 00ac 00000000 	 .word .LANCHOR2
 496              	.LBE79:
 497              	.LBE80:
 498              	.LBE81:
 499              	.LBE82:
 500              	 .cfi_endproc
 501              	.LFE129:
 503              	 .section .text.xTimerGenericCommand,"ax",%progbits
 504              	 .align 2
 505              	 .global xTimerGenericCommand
 506              	 .thumb
 507              	 .thumb_func
 509              	xTimerGenericCommand:
 510              	.LFB131:
 418:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xReturn = pdFAIL;
 511              	 .loc 1 418 0
 512              	 .cfi_startproc
 513              	 
 514              	 
 515              	.LVL38:
 516 0000 70B5     	 push {r4,r5,r6,lr}
 517              	.LCFI12:
 518              	 .cfi_def_cfa_offset 16
 519              	 .cfi_offset 4,-16
 520              	 .cfi_offset 5,-12
 521              	 .cfi_offset 6,-8
 522              	 .cfi_offset 14,-4
 422:../Dave/Generated/FREERTOS/timers.c **** 
 523              	 .loc 1 422 0
 524 0002 0446     	 mov r4,r0
 418:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xReturn = pdFAIL;
 525              	 .loc 1 418 0
 526 0004 84B0     	 sub sp,sp,#16
 527              	.LCFI13:
 528              	 .cfi_def_cfa_offset 32
 529              	.LVL39:
 422:../Dave/Generated/FREERTOS/timers.c **** 
 530              	 .loc 1 422 0
 531 0006 20B3     	 cbz r0,.L62
 426:../Dave/Generated/FREERTOS/timers.c **** 	{
 532              	 .loc 1 426 0
 533 0008 164D     	 ldr r5,.L64
 534 000a 2868     	 ldr r0,[r5]
 535              	.LVL40:
 536 000c 88B1     	 cbz r0,.L57
 537 000e 1646     	 mov r6,r2
 433:../Dave/Generated/FREERTOS/timers.c **** 		{
 538              	 .loc 1 433 0
 539 0010 0529     	 cmp r1,#5
 540 0012 1A46     	 mov r2,r3
 541              	.LVL41:
 542 0014 0B46     	 mov r3,r1
 543              	.LVL42:
 430:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 544              	 .loc 1 430 0
 545 0016 8DE84800 	 stmia sp,{r3,r6}
 431:../Dave/Generated/FREERTOS/timers.c **** 
 546              	 .loc 1 431 0
 547 001a 0294     	 str r4,[sp,#8]
 433:../Dave/Generated/FREERTOS/timers.c **** 		{
 548              	 .loc 1 433 0
 549 001c 0BDC     	 bgt .L58
 435:../Dave/Generated/FREERTOS/timers.c **** 			{
 550              	 .loc 1 435 0
 551 001e FFF7FEFF 	 bl xTaskGetSchedulerState
 552              	.LVL43:
 553 0022 0228     	 cmp r0,#2
 554 0024 0DD0     	 beq .L63
 441:../Dave/Generated/FREERTOS/timers.c **** 			}
 555              	 .loc 1 441 0
 556 0026 0022     	 movs r2,#0
 557 0028 2868     	 ldr r0,[r5]
 558 002a 1346     	 mov r3,r2
 559 002c 6946     	 mov r1,sp
 560 002e FFF7FEFF 	 bl xQueueGenericSend
 561              	.LVL44:
 562              	.L57:
 457:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 563              	 .loc 1 457 0
 564 0032 04B0     	 add sp,sp,#16
 565              	.LCFI14:
 566              	 .cfi_remember_state
 567              	 .cfi_def_cfa_offset 16
 568              	 
 569 0034 70BD     	 pop {r4,r5,r6,pc}
 570              	.LVL45:
 571              	.L58:
 572              	.LCFI15:
 573              	 .cfi_restore_state
 446:../Dave/Generated/FREERTOS/timers.c **** 		}
 574              	 .loc 1 446 0
 575 0036 6946     	 mov r1,sp
 576              	.LVL46:
 577 0038 0023     	 movs r3,#0
 578              	.LVL47:
 579 003a FFF7FEFF 	 bl xQueueGenericSendFromISR
 580              	.LVL48:
 457:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 581              	 .loc 1 457 0
 582 003e 04B0     	 add sp,sp,#16
 583              	.LCFI16:
 584              	 .cfi_remember_state
 585              	 .cfi_def_cfa_offset 16
 586              	 
 587 0040 70BD     	 pop {r4,r5,r6,pc}
 588              	.LVL49:
 589              	.L63:
 590              	.LCFI17:
 591              	 .cfi_restore_state
 437:../Dave/Generated/FREERTOS/timers.c **** 			}
 592              	 .loc 1 437 0
 593 0042 2868     	 ldr r0,[r5]
 594 0044 089A     	 ldr r2,[sp,#32]
 595 0046 6946     	 mov r1,sp
 596 0048 0023     	 movs r3,#0
 597 004a FFF7FEFF 	 bl xQueueGenericSend
 598              	.LVL50:
 457:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 599              	 .loc 1 457 0
 600 004e 04B0     	 add sp,sp,#16
 601              	.LCFI18:
 602              	 .cfi_remember_state
 603              	 .cfi_def_cfa_offset 16
 604              	 
 605 0050 70BD     	 pop {r4,r5,r6,pc}
 606              	.LVL51:
 607              	.L62:
 608              	.LCFI19:
 609              	 .cfi_restore_state
 610              	.LBB87:
 611              	.LBB88:
 612              	.LBB89:
 613              	.LBB90:
 614              	 .loc 2 240 0
 615              	
 616 0052 4FF0FC03 	 mov r3,#252
 617 0056 83F31188 	 msr basepri,r3
 618 005a BFF36F8F 	 isb 
 619 005e BFF34F8F 	 dsb 
 620              	
 621              	
 622              	.LVL52:
 623              	 .thumb
 624              	.L56:
 625 0062 FEE7     	 b .L56
 626              	.L65:
 627              	 .align 2
 628              	.L64:
 629 0064 00000000 	 .word .LANCHOR1
 630              	.LBE90:
 631              	.LBE89:
 632              	.LBE88:
 633              	.LBE87:
 634              	 .cfi_endproc
 635              	.LFE131:
 637              	 .section .text.prvTimerTask,"ax",%progbits
 638              	 .align 2
 639              	 .thumb
 640              	 .thumb_func
 642              	prvTimerTask:
 643              	.LFB137:
 539:../Dave/Generated/FREERTOS/timers.c **** TickType_t xNextExpireTime;
 644              	 .loc 1 539 0
 645              	 .cfi_startproc
 646              	 
 647              	 
 648              	.LVL53:
 649 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
 650              	.LCFI20:
 651              	 .cfi_def_cfa_offset 36
 652              	 .cfi_offset 4,-36
 653              	 .cfi_offset 5,-32
 654              	 .cfi_offset 6,-28
 655              	 .cfi_offset 7,-24
 656              	 .cfi_offset 8,-20
 657              	 .cfi_offset 9,-16
 658              	 .cfi_offset 10,-12
 659              	 .cfi_offset 11,-8
 660              	 .cfi_offset 14,-4
 661 0004 8B4D     	 ldr r5,.L118
 662 0006 DFF83C82 	 ldr r8,.L118+16
 663 000a 8B4C     	 ldr r4,.L118+4
 664 000c 89B0     	 sub sp,sp,#36
 665              	.LCFI21:
 666              	 .cfi_def_cfa_offset 72
 667              	.LBB128:
 668              	.LBB129:
 669              	.LBB130:
 670              	.LBB131:
 667:../Dave/Generated/FREERTOS/timers.c **** 	{
 671              	 .loc 1 667 0
 672 000e AA46     	 mov r10,r5
 673              	.LVL54:
 674              	.L99:
 675              	.LBE131:
 676              	.LBE130:
 677              	.LBE129:
 678              	.LBE128:
 679              	.LBB165:
 680              	.LBB166:
 645:../Dave/Generated/FREERTOS/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
 681              	 .loc 1 645 0 discriminator 1
 682 0010 8A4B     	 ldr r3,.L118+8
 683 0012 1B68     	 ldr r3,[r3]
 684              	.LVL55:
 646:../Dave/Generated/FREERTOS/timers.c **** 	{
 685              	 .loc 1 646 0 discriminator 1
 686 0014 1E68     	 ldr r6,[r3]
 687 0016 002E     	 cmp r6,#0
 688 0018 53D0     	 beq .L67
 648:../Dave/Generated/FREERTOS/timers.c **** 	}
 689              	 .loc 1 648 0
 690 001a DB68     	 ldr r3,[r3,#12]
 691              	.LVL56:
 692 001c D3F800B0 	 ldr fp,[r3]
 693              	.LVL57:
 694              	.LBE166:
 695              	.LBE165:
 696              	.LBB168:
 697              	.LBB160:
 579:../Dave/Generated/FREERTOS/timers.c **** 	{
 698              	 .loc 1 579 0
 699 0020 FFF7FEFF 	 bl vTaskSuspendAll
 700              	.LVL58:
 701              	.LBB137:
 702              	.LBB132:
 665:../Dave/Generated/FREERTOS/timers.c **** 
 703              	 .loc 1 665 0
 704 0024 FFF7FEFF 	 bl xTaskGetTickCount
 705              	.LVL59:
 667:../Dave/Generated/FREERTOS/timers.c **** 	{
 706              	 .loc 1 667 0
 707 0028 2B68     	 ldr r3,[r5]
 708 002a 8342     	 cmp r3,r0
 665:../Dave/Generated/FREERTOS/timers.c **** 
 709              	 .loc 1 665 0
 710 002c 8146     	 mov r9,r0
 711              	.LVL60:
 667:../Dave/Generated/FREERTOS/timers.c **** 	{
 712              	 .loc 1 667 0
 713 002e 5AD8     	 bhi .L68
 714              	.LVL61:
 715              	.LBE132:
 716              	.LBE137:
 590:../Dave/Generated/FREERTOS/timers.c **** 			{
 717              	 .loc 1 590 0
 718 0030 8345     	 cmp fp,r0
 719              	.LBB138:
 720              	.LBB133:
 677:../Dave/Generated/FREERTOS/timers.c **** 
 721              	 .loc 1 677 0
 722 0032 CAF80000 	 str r0,[r10]
 723              	.LBE133:
 724              	.LBE138:
 590:../Dave/Generated/FREERTOS/timers.c **** 			{
 725              	 .loc 1 590 0
 726 0036 62D9     	 bls .L107
 727 0038 0022     	 movs r2,#0
 728              	.LVL62:
 729              	.L100:
 610:../Dave/Generated/FREERTOS/timers.c **** 
 730              	 .loc 1 610 0
 731 003a C9EB0B01 	 rsb r1,r9,fp
 732 003e 2068     	 ldr r0,[r4]
 733              	.LVL63:
 734 0040 FFF7FEFF 	 bl vQueueWaitForMessageRestricted
 735              	.LVL64:
 612:../Dave/Generated/FREERTOS/timers.c **** 				{
 736              	 .loc 1 612 0
 737 0044 FFF7FEFF 	 bl xTaskResumeAll
 738              	.LVL65:
 739 0048 38B9     	 cbnz r0,.L71
 618:../Dave/Generated/FREERTOS/timers.c **** 				}
 740              	 .loc 1 618 0
 741 004a 7D4A     	 ldr r2,.L118+12
 742 004c 4FF08053 	 mov r3,#268435456
 743 0050 1360     	 str r3,[r2]
 744              	
 745 0052 BFF34F8F 	 dsb
 746              	
 747              	
 748 0056 BFF36F8F 	 isb
 749              	
 750              	.LVL66:
 751              	 .thumb
 752              	.L71:
 753 005a 0126     	 movs r6,#1
 754              	.LBE160:
 755              	.LBE168:
 756              	.LBB169:
 757              	.LBB170:
 731:../Dave/Generated/FREERTOS/timers.c **** 	{
 758              	 .loc 1 731 0
 759 005c 4FF00009 	 mov r9,#0
 760              	.L82:
 761 0060 0022     	 movs r2,#0
 762 0062 1346     	 mov r3,r2
 763 0064 2068     	 ldr r0,[r4]
 764 0066 04A9     	 add r1,sp,#16
 765 0068 FFF7FEFF 	 bl xQueueGenericReceive
 766              	.LVL67:
 767 006c 0028     	 cmp r0,#0
 768 006e CFD0     	 beq .L99
 737:../Dave/Generated/FREERTOS/timers.c **** 			{
 769              	 .loc 1 737 0
 770 0070 049B     	 ldr r3,[sp,#16]
 771 0072 002B     	 cmp r3,#0
 772 0074 1DDB     	 blt .L78
 773              	.L81:
 761:../Dave/Generated/FREERTOS/timers.c **** 
 774              	 .loc 1 761 0
 775 0076 069F     	 ldr r7,[sp,#24]
 776              	.LVL68:
 763:../Dave/Generated/FREERTOS/timers.c **** 			{
 777              	 .loc 1 763 0
 778 0078 7A69     	 ldr r2,[r7,#20]
 779 007a 12B1     	 cbz r2,.L80
 766:../Dave/Generated/FREERTOS/timers.c **** 			}
 780              	 .loc 1 766 0
 781 007c 381D     	 adds r0,r7,#4
 782 007e FFF7FEFF 	 bl uxListRemove
 783              	.LVL69:
 784              	.L80:
 785              	.LBB171:
 786              	.LBB172:
 665:../Dave/Generated/FREERTOS/timers.c **** 
 787              	 .loc 1 665 0
 788 0082 FFF7FEFF 	 bl xTaskGetTickCount
 789              	.LVL70:
 667:../Dave/Generated/FREERTOS/timers.c **** 	{
 790              	 .loc 1 667 0
 791 0086 2A68     	 ldr r2,[r5]
 792 0088 9042     	 cmp r0,r2
 793 008a 33D3     	 bcc .L113
 794              	.LVL71:
 795              	.L83:
 796 008c 049A     	 ldr r2,[sp,#16]
 677:../Dave/Generated/FREERTOS/timers.c **** 
 797              	 .loc 1 677 0
 798 008e 2860     	 str r0,[r5]
 799 0090 092A     	 cmp r2,#9
 800 0092 E5D8     	 bhi .L82
 801 0094 06FA02F2 	 lsl r2,r6,r2
 802 0098 12F4047F 	 tst r2,#528
 803 009c 71D1     	 bne .L85
 804 009e 12F0C70F 	 tst r2,#199
 805 00a2 40F08180 	 bne .L86
 806 00a6 9306     	 lsls r3,r2,#26
 807 00a8 DAD5     	 bpl .L82
 808              	.LBE172:
 809              	.LBE171:
 843:../Dave/Generated/FREERTOS/timers.c **** 					}
 810              	 .loc 1 843 0
 811 00aa 3846     	 mov r0,r7
 812 00ac FFF7FEFF 	 bl vPortFree
 813              	.LVL72:
 814 00b0 D6E7     	 b .L82
 815              	.LVL73:
 816              	.L78:
 817              	.LBB174:
 746:../Dave/Generated/FREERTOS/timers.c **** 			}
 818              	 .loc 1 746 0
 819 00b2 059B     	 ldr r3,[sp,#20]
 820 00b4 0698     	 ldr r0,[sp,#24]
 821 00b6 0799     	 ldr r1,[sp,#28]
 822 00b8 9847     	 blx r3
 823              	.LVL74:
 824              	.LBE174:
 757:../Dave/Generated/FREERTOS/timers.c **** 		{
 825              	 .loc 1 757 0
 826 00ba 049B     	 ldr r3,[sp,#16]
 827 00bc 002B     	 cmp r3,#0
 828 00be CFDB     	 blt .L82
 829 00c0 D9E7     	 b .L81
 830              	.LVL75:
 831              	.L67:
 832              	.LBE170:
 833              	.LBE169:
 834              	.LBB195:
 835              	.LBB161:
 579:../Dave/Generated/FREERTOS/timers.c **** 	{
 836              	 .loc 1 579 0
 837 00c2 FFF7FEFF 	 bl vTaskSuspendAll
 838              	.LVL76:
 839              	.LBB139:
 840              	.LBB134:
 665:../Dave/Generated/FREERTOS/timers.c **** 
 841              	 .loc 1 665 0
 842 00c6 FFF7FEFF 	 bl xTaskGetTickCount
 843              	.LVL77:
 667:../Dave/Generated/FREERTOS/timers.c **** 	{
 844              	 .loc 1 667 0
 845 00ca 2B68     	 ldr r3,[r5]
 846 00cc 9842     	 cmp r0,r3
 665:../Dave/Generated/FREERTOS/timers.c **** 
 847              	 .loc 1 665 0
 848 00ce 8146     	 mov r9,r0
 849              	.LVL78:
 667:../Dave/Generated/FREERTOS/timers.c **** 	{
 850              	 .loc 1 667 0
 851 00d0 09D3     	 bcc .L68
 852              	.LVL79:
 853              	.LBE134:
 854              	.LBE139:
 607:../Dave/Generated/FREERTOS/timers.c **** 				}
 855              	 .loc 1 607 0
 856 00d2 D8F80030 	 ldr r3,[r8]
 857              	.LBB140:
 858              	.LBB135:
 677:../Dave/Generated/FREERTOS/timers.c **** 
 859              	 .loc 1 677 0
 860 00d6 CAF80000 	 str r0,[r10]
 861              	.LBE135:
 862              	.LBE140:
 607:../Dave/Generated/FREERTOS/timers.c **** 				}
 863              	 .loc 1 607 0
 864 00da 1A68     	 ldr r2,[r3]
 865 00dc B2FA82F2 	 clz r2,r2
 866              	.LBE161:
 867              	.LBE195:
 868              	.LBB196:
 869              	.LBB167:
 653:../Dave/Generated/FREERTOS/timers.c **** 	}
 870              	 .loc 1 653 0
 871 00e0 B346     	 mov fp,r6
 872              	.LBE167:
 873              	.LBE196:
 874              	.LBB197:
 875              	.LBB162:
 607:../Dave/Generated/FREERTOS/timers.c **** 				}
 876              	 .loc 1 607 0
 877 00e2 5209     	 lsrs r2,r2,#5
 878              	.LVL80:
 879 00e4 A9E7     	 b .L100
 880              	.LVL81:
 881              	.L68:
 882              	.LBB141:
 883              	.LBB136:
 669:../Dave/Generated/FREERTOS/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 884              	 .loc 1 669 0
 885 00e6 FFF7FEFF 	 bl prvSwitchTimerLists
 886              	.LVL82:
 677:../Dave/Generated/FREERTOS/timers.c **** 
 887              	 .loc 1 677 0
 888 00ea C5F80090 	 str r9,[r5]
 889              	.LBE136:
 890              	.LBE141:
 628:../Dave/Generated/FREERTOS/timers.c **** 		}
 891              	 .loc 1 628 0
 892 00ee FFF7FEFF 	 bl xTaskResumeAll
 893              	.LVL83:
 894 00f2 B2E7     	 b .L71
 895              	.LVL84:
 896              	.L113:
 897 00f4 0390     	 str r0,[sp,#12]
 898              	.LBE162:
 899              	.LBE197:
 900              	.LBB198:
 901              	.LBB192:
 902              	.LBB175:
 903              	.LBB173:
 669:../Dave/Generated/FREERTOS/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 904              	 .loc 1 669 0
 905 00f6 FFF7FEFF 	 bl prvSwitchTimerLists
 906              	.LVL85:
 907 00fa 0398     	 ldr r0,[sp,#12]
 908              	.LVL86:
 909 00fc C6E7     	 b .L83
 910              	.LVL87:
 911              	.L107:
 912              	.LBE173:
 913              	.LBE175:
 914              	.LBE192:
 915              	.LBE198:
 916              	.LBB199:
 917              	.LBB163:
 592:../Dave/Generated/FREERTOS/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 918              	 .loc 1 592 0
 919 00fe FFF7FEFF 	 bl xTaskResumeAll
 920              	.LVL88:
 921              	.LBB142:
 922              	.LBB143:
 501:../Dave/Generated/FREERTOS/timers.c **** 
 923              	 .loc 1 501 0
 924 0102 4E4B     	 ldr r3,.L118+8
 925 0104 1B68     	 ldr r3,[r3]
 926 0106 DB68     	 ldr r3,[r3,#12]
 927 0108 DE68     	 ldr r6,[r3,#12]
 928              	.LVL89:
 505:../Dave/Generated/FREERTOS/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 929              	 .loc 1 505 0
 930 010a 311D     	 adds r1,r6,#4
 931 010c 0846     	 mov r0,r1
 932 010e 0391     	 str r1,[sp,#12]
 933 0110 FFF7FEFF 	 bl uxListRemove
 934              	.LVL90:
 510:../Dave/Generated/FREERTOS/timers.c **** 	{
 935              	 .loc 1 510 0
 936 0114 F269     	 ldr r2,[r6,#28]
 937 0116 0399     	 ldr r1,[sp,#12]
 938 0118 012A     	 cmp r2,#1
 939 011a 03D0     	 beq .L114
 940              	.LVL91:
 941              	.L103:
 534:../Dave/Generated/FREERTOS/timers.c **** }
 942              	 .loc 1 534 0
 943 011c 736A     	 ldr r3,[r6,#36]
 944 011e 3046     	 mov r0,r6
 945 0120 9847     	 blx r3
 946              	.LVL92:
 947 0122 9AE7     	 b .L71
 948              	.LVL93:
 949              	.L114:
 515:../Dave/Generated/FREERTOS/timers.c **** 		{
 950              	 .loc 1 515 0
 951 0124 B269     	 ldr r2,[r6,#24]
 952              	.LBB144:
 953              	.LBB145:
 688:../Dave/Generated/FREERTOS/timers.c **** 
 954              	 .loc 1 688 0
 955 0126 3661     	 str r6,[r6,#16]
 956              	.LBE145:
 957              	.LBE144:
 515:../Dave/Generated/FREERTOS/timers.c **** 		{
 958              	 .loc 1 515 0
 959 0128 0BEB0200 	 add r0,fp,r2
 960              	.LVL94:
 961              	.LBB151:
 962              	.LBB148:
 690:../Dave/Generated/FREERTOS/timers.c **** 	{
 963              	 .loc 1 690 0
 964 012c 4845     	 cmp r0,r9
 687:../Dave/Generated/FREERTOS/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 965              	 .loc 1 687 0
 966 012e 7060     	 str r0,[r6,#4]
 690:../Dave/Generated/FREERTOS/timers.c **** 	{
 967              	 .loc 1 690 0
 968 0130 22D8     	 bhi .L73
 694:../Dave/Generated/FREERTOS/timers.c **** 		{
 969              	 .loc 1 694 0
 970 0132 CBEB0909 	 rsb r9,fp,r9
 971              	.LVL95:
 972 0136 4A45     	 cmp r2,r9
 973 0138 5DD8     	 bhi .L115
 974              	.LVL96:
 975              	.LBE148:
 976              	.LBE151:
 977              	.LBB152:
 978              	.LBB153:
 426:../Dave/Generated/FREERTOS/timers.c **** 	{
 979              	 .loc 1 426 0
 980 013a 2268     	 ldr r2,[r4]
 981              	.LVL97:
 982 013c 3E4B     	 ldr r3,.L118+4
 983 013e 92B1     	 cbz r2,.L104
 429:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 984              	 .loc 1 429 0
 985 0140 4FF00009 	 mov r9,#0
 986 0144 0393     	 str r3,[sp,#12]
 430:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 987              	 .loc 1 430 0
 988 0146 CDF814B0 	 str fp,[sp,#20]
 989              	.LVL98:
 431:../Dave/Generated/FREERTOS/timers.c **** 
 990              	 .loc 1 431 0
 991 014a 0696     	 str r6,[sp,#24]
 429:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 992              	 .loc 1 429 0
 993 014c CDF81090 	 str r9,[sp,#16]
 435:../Dave/Generated/FREERTOS/timers.c **** 			{
 994              	 .loc 1 435 0
 995 0150 FFF7FEFF 	 bl xTaskGetSchedulerState
 996              	.LVL99:
 437:../Dave/Generated/FREERTOS/timers.c **** 			}
 997              	 .loc 1 437 0
 998 0154 039B     	 ldr r3,[sp,#12]
 999 0156 4A46     	 mov r2,r9
 1000 0158 1868     	 ldr r0,[r3]
 1001 015a 04A9     	 add r1,sp,#16
 1002 015c 4B46     	 mov r3,r9
 1003 015e FFF7FEFF 	 bl xQueueGenericSend
 1004              	.LVL100:
 1005              	.LBE153:
 1006              	.LBE152:
 520:../Dave/Generated/FREERTOS/timers.c **** 			( void ) xResult;
 1007              	 .loc 1 520 0
 1008 0162 0028     	 cmp r0,#0
 1009 0164 DAD1     	 bne .L103
 1010              	.LVL101:
 1011              	.L104:
 1012              	.LBB154:
 1013              	.LBB155:
 1014              	 .loc 2 240 0
 1015              	
 1016 0166 4FF0FC03 	 mov r3,#252
 1017 016a 83F31188 	 msr basepri,r3
 1018 016e BFF36F8F 	 isb 
 1019 0172 BFF34F8F 	 dsb 
 1020              	
 1021              	
 1022              	.LVL102:
 1023              	 .thumb
 1024              	.L76:
 1025 0176 FEE7     	 b .L76
 1026              	.LVL103:
 1027              	.L73:
 1028              	.LBE155:
 1029              	.LBE154:
 1030              	.LBB156:
 1031              	.LBB149:
 716:../Dave/Generated/FREERTOS/timers.c **** 		}
 1032              	 .loc 1 716 0
 1033 0178 304B     	 ldr r3,.L118+8
 1034 017a 1868     	 ldr r0,[r3]
 1035 017c FFF7FEFF 	 bl vListInsert
 1036              	.LVL104:
 1037 0180 CCE7     	 b .L103
 1038              	.LVL105:
 1039              	.L85:
 1040              	.LBE149:
 1041              	.LBE156:
 1042              	.LBE143:
 1043              	.LBE142:
 1044              	.LBE163:
 1045              	.LBE199:
 1046              	.LBB200:
 1047              	.LBB193:
 823:../Dave/Generated/FREERTOS/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1048              	 .loc 1 823 0
 1049 0182 059A     	 ldr r2,[sp,#20]
 1050 0184 BA61     	 str r2,[r7,#24]
 824:../Dave/Generated/FREERTOS/timers.c **** 
 1051              	 .loc 1 824 0
 1052 0186 002A     	 cmp r2,#0
 1053 0188 4AD0     	 beq .L116
 832:../Dave/Generated/FREERTOS/timers.c **** 					break;
 1054              	 .loc 1 832 0
 1055 018a 0244     	 add r2,r2,r0
 1056              	.LVL106:
 1057              	.LBB176:
 1058              	.LBB177:
 690:../Dave/Generated/FREERTOS/timers.c **** 	{
 1059              	 .loc 1 690 0
 1060 018c 8242     	 cmp r2,r0
 716:../Dave/Generated/FREERTOS/timers.c **** 		}
 1061              	 .loc 1 716 0
 1062 018e 88BF     	 it hi
 1063 0190 2A4B     	 ldrhi r3,.L118+8
 687:../Dave/Generated/FREERTOS/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1064              	 .loc 1 687 0
 1065 0192 7A60     	 str r2,[r7,#4]
 688:../Dave/Generated/FREERTOS/timers.c **** 
 1066              	 .loc 1 688 0
 1067 0194 3F61     	 str r7,[r7,#16]
 1068              	.LBB178:
 1069              	.LBB179:
 702:../Dave/Generated/FREERTOS/timers.c **** 		}
 1070              	 .loc 1 702 0
 1071 0196 07F10401 	 add r1,r7,#4
 1072 019a 94BF     	 ite ls
 1073 019c D8F80000 	 ldrls r0,[r8]
 1074              	.LBE179:
 1075              	.LBE178:
 716:../Dave/Generated/FREERTOS/timers.c **** 		}
 1076              	 .loc 1 716 0
 1077 01a0 1868     	 ldrhi r0,[r3]
 1078 01a2 FFF7FEFF 	 bl vListInsert
 1079              	.LVL107:
 1080 01a6 5BE7     	 b .L82
 1081              	.LVL108:
 1082              	.L86:
 1083              	.LBE177:
 1084              	.LBE176:
 791:../Dave/Generated/FREERTOS/timers.c **** 					{
 1085              	 .loc 1 791 0
 1086 01a8 059A     	 ldr r2,[sp,#20]
 1087 01aa BB69     	 ldr r3,[r7,#24]
 1088              	.LBB180:
 1089              	.LBB181:
 688:../Dave/Generated/FREERTOS/timers.c **** 
 1090              	 .loc 1 688 0
 1091 01ac 3F61     	 str r7,[r7,#16]
 1092              	.LBE181:
 1093              	.LBE180:
 791:../Dave/Generated/FREERTOS/timers.c **** 					{
 1094              	 .loc 1 791 0
 1095 01ae 9918     	 adds r1,r3,r2
 1096              	.LVL109:
 1097              	.LBB186:
 1098              	.LBB184:
 690:../Dave/Generated/FREERTOS/timers.c **** 	{
 1099              	 .loc 1 690 0
 1100 01b0 8142     	 cmp r1,r0
 687:../Dave/Generated/FREERTOS/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1101              	 .loc 1 687 0
 1102 01b2 7960     	 str r1,[r7,#4]
 690:../Dave/Generated/FREERTOS/timers.c **** 	{
 1103              	 .loc 1 690 0
 1104 01b4 24D8     	 bhi .L88
 694:../Dave/Generated/FREERTOS/timers.c **** 		{
 1105              	 .loc 1 694 0
 1106 01b6 821A     	 subs r2,r0,r2
 1107              	.LVL110:
 1108 01b8 9342     	 cmp r3,r2
 1109 01ba 2BD8     	 bhi .L117
 1110              	.L89:
 1111              	.LVL111:
 1112              	.LBE184:
 1113              	.LBE186:
 795:../Dave/Generated/FREERTOS/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 1114              	 .loc 1 795 0
 1115 01bc 7A6A     	 ldr r2,[r7,#36]
 1116 01be 3846     	 mov r0,r7
 1117 01c0 9047     	 blx r2
 1118              	.LVL112:
 798:../Dave/Generated/FREERTOS/timers.c **** 						{
 1119              	 .loc 1 798 0
 1120 01c2 FA69     	 ldr r2,[r7,#28]
 1121 01c4 012A     	 cmp r2,#1
 1122 01c6 7FF44BAF 	 bne .L82
 800:../Dave/Generated/FREERTOS/timers.c **** 							configASSERT( xResult );
 1123              	 .loc 1 800 0
 1124 01ca BB69     	 ldr r3,[r7,#24]
 1125 01cc 059A     	 ldr r2,[sp,#20]
 1126 01ce CDF80090 	 str r9,[sp]
 1127 01d2 0021     	 movs r1,#0
 1128 01d4 1A44     	 add r2,r2,r3
 1129 01d6 3846     	 mov r0,r7
 1130 01d8 0B46     	 mov r3,r1
 1131 01da FFF7FEFF 	 bl xTimerGenericCommand
 1132              	.LVL113:
 801:../Dave/Generated/FREERTOS/timers.c **** 							( void ) xResult;
 1133              	 .loc 1 801 0
 1134 01de 0028     	 cmp r0,#0
 1135 01e0 7FF43EAF 	 bne .L82
 1136              	.LBB187:
 1137              	.LBB188:
 1138              	 .loc 2 240 0
 1139              	
 1140 01e4 4FF0FC03 	 mov r3,#252
 1141 01e8 83F31188 	 msr basepri,r3
 1142 01ec BFF36F8F 	 isb 
 1143 01f0 BFF34F8F 	 dsb 
 1144              	
 1145              	
 1146              	.LVL114:
 1147              	 .thumb
 1148              	.L94:
 1149 01f4 FEE7     	 b .L94
 1150              	.LVL115:
 1151              	.L115:
 1152              	.LBE188:
 1153              	.LBE187:
 1154              	.LBE193:
 1155              	.LBE200:
 1156              	.LBB201:
 1157              	.LBB164:
 1158              	.LBB159:
 1159              	.LBB158:
 1160              	.LBB157:
 1161              	.LBB150:
 1162              	.LBB146:
 1163              	.LBB147:
 702:../Dave/Generated/FREERTOS/timers.c **** 		}
 1164              	 .loc 1 702 0
 1165 01f6 D8F80000 	 ldr r0,[r8]
 1166 01fa FFF7FEFF 	 bl vListInsert
 1167              	.LVL116:
 1168 01fe 8DE7     	 b .L103
 1169              	.LVL117:
 1170              	.L88:
 1171              	.LBE147:
 1172              	.LBE146:
 1173              	.LBE150:
 1174              	.LBE157:
 1175              	.LBE158:
 1176              	.LBE159:
 1177              	.LBE164:
 1178              	.LBE201:
 1179              	.LBB202:
 1180              	.LBB194:
 1181              	.LBB189:
 1182              	.LBB185:
 707:../Dave/Generated/FREERTOS/timers.c **** 		{
 1183              	 .loc 1 707 0
 1184 0200 8242     	 cmp r2,r0
 1185 0202 01D9     	 bls .L91
 1186 0204 8A42     	 cmp r2,r1
 1187 0206 D9D9     	 bls .L89
 1188              	.L91:
 716:../Dave/Generated/FREERTOS/timers.c **** 		}
 1189              	 .loc 1 716 0
 1190 0208 0C4B     	 ldr r3,.L118+8
 1191              	.LVL118:
 1192 020a 391D     	 adds r1,r7,#4
 1193 020c 1868     	 ldr r0,[r3]
 1194 020e FFF7FEFF 	 bl vListInsert
 1195              	.LVL119:
 1196 0212 25E7     	 b .L82
 1197              	.L117:
 1198              	.LVL120:
 1199              	.LBB182:
 1200              	.LBB183:
 702:../Dave/Generated/FREERTOS/timers.c **** 		}
 1201              	 .loc 1 702 0
 1202 0214 391D     	 adds r1,r7,#4
 1203 0216 D8F80000 	 ldr r0,[r8]
 1204 021a FFF7FEFF 	 bl vListInsert
 1205              	.LVL121:
 1206 021e 1FE7     	 b .L82
 1207              	.LVL122:
 1208              	.L116:
 1209              	.LBE183:
 1210              	.LBE182:
 1211              	.LBE185:
 1212              	.LBE189:
 1213              	.LBB190:
 1214              	.LBB191:
 1215              	 .loc 2 240 0
 1216              	
 1217 0220 4FF0FC03 	 mov r3,#252
 1218 0224 83F31188 	 msr basepri,r3
 1219 0228 BFF36F8F 	 isb 
 1220 022c BFF34F8F 	 dsb 
 1221              	
 1222              	
 1223              	.LVL123:
 1224              	 .thumb
 1225              	.L96:
 1226 0230 FEE7     	 b .L96
 1227              	.L119:
 1228 0232 00BF     	 .align 2
 1229              	.L118:
 1230 0234 00000000 	 .word .LANCHOR6
 1231 0238 00000000 	 .word .LANCHOR1
 1232 023c 00000000 	 .word .LANCHOR0
 1233 0240 04ED00E0 	 .word -536810236
 1234 0244 00000000 	 .word .LANCHOR2
 1235              	.LBE191:
 1236              	.LBE190:
 1237              	.LBE194:
 1238              	.LBE202:
 1239              	 .cfi_endproc
 1240              	.LFE137:
 1242              	 .section .text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 1243              	 .align 2
 1244              	 .global xTimerGetTimerDaemonTaskHandle
 1245              	 .thumb
 1246              	 .thumb_func
 1248              	xTimerGetTimerDaemonTaskHandle:
 1249              	.LFB132:
 461:../Dave/Generated/FREERTOS/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 1250              	 .loc 1 461 0
 1251              	 .cfi_startproc
 1252              	 
 1253              	 
 1254              	 
 464:../Dave/Generated/FREERTOS/timers.c **** 	return xTimerTaskHandle;
 1255              	 .loc 1 464 0
 1256 0000 064B     	 ldr r3,.L124
 1257 0002 1868     	 ldr r0,[r3]
 1258 0004 00B1     	 cbz r0,.L123
 466:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 1259              	 .loc 1 466 0
 1260 0006 7047     	 bx lr
 1261              	.L123:
 1262              	.LBB203:
 1263              	.LBB204:
 1264              	 .loc 2 240 0
 1265              	
 1266 0008 4FF0FC03 	 mov r3,#252
 1267 000c 83F31188 	 msr basepri,r3
 1268 0010 BFF36F8F 	 isb 
 1269 0014 BFF34F8F 	 dsb 
 1270              	
 1271              	
 1272              	.LVL124:
 1273              	 .thumb
 1274              	.L122:
 1275              	.LBE204:
 1276              	.LBE203:
 464:../Dave/Generated/FREERTOS/timers.c **** 	return xTimerTaskHandle;
 1277              	 .loc 1 464 0 discriminator 1
 1278 0018 FEE7     	 b .L122
 1279              	.L125:
 1280 001a 00BF     	 .align 2
 1281              	.L124:
 1282 001c 00000000 	 .word .LANCHOR5
 1283              	 .cfi_endproc
 1284              	.LFE132:
 1286              	 .section .text.xTimerGetPeriod,"ax",%progbits
 1287              	 .align 2
 1288              	 .global xTimerGetPeriod
 1289              	 .thumb
 1290              	 .thumb_func
 1292              	xTimerGetPeriod:
 1293              	.LFB133:
 470:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 1294              	 .loc 1 470 0
 1295              	 .cfi_startproc
 1296              	 
 1297              	 
 1298              	 
 1299              	.LVL125:
 473:../Dave/Generated/FREERTOS/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 1300              	 .loc 1 473 0
 1301 0000 08B1     	 cbz r0,.L129
 475:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 1302              	 .loc 1 475 0
 1303 0002 8069     	 ldr r0,[r0,#24]
 1304              	.LVL126:
 1305 0004 7047     	 bx lr
 1306              	.LVL127:
 1307              	.L129:
 1308              	.LBB205:
 1309              	.LBB206:
 1310              	 .loc 2 240 0
 1311              	
 1312 0006 4FF0FC03 	 mov r3,#252
 1313 000a 83F31188 	 msr basepri,r3
 1314 000e BFF36F8F 	 isb 
 1315 0012 BFF34F8F 	 dsb 
 1316              	
 1317              	
 1318              	.LVL128:
 1319              	 .thumb
 1320              	.L128:
 1321              	.LBE206:
 1322              	.LBE205:
 473:../Dave/Generated/FREERTOS/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 1323              	 .loc 1 473 0 discriminator 1
 1324 0016 FEE7     	 b .L128
 1325              	 .cfi_endproc
 1326              	.LFE133:
 1328              	 .section .text.xTimerGetExpiryTime,"ax",%progbits
 1329              	 .align 2
 1330              	 .global xTimerGetExpiryTime
 1331              	 .thumb
 1332              	 .thumb_func
 1334              	xTimerGetExpiryTime:
 1335              	.LFB134:
 479:../Dave/Generated/FREERTOS/timers.c **** Timer_t * pxTimer = ( Timer_t * ) xTimer;
 1336              	 .loc 1 479 0
 1337              	 .cfi_startproc
 1338              	 
 1339              	 
 1340              	 
 1341              	.LVL129:
 483:../Dave/Generated/FREERTOS/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1342              	 .loc 1 483 0
 1343 0000 08B1     	 cbz r0,.L133
 1344              	.LVL130:
 486:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 1345              	 .loc 1 486 0
 1346 0002 4068     	 ldr r0,[r0,#4]
 1347              	.LVL131:
 1348 0004 7047     	 bx lr
 1349              	.LVL132:
 1350              	.L133:
 1351              	.LBB207:
 1352              	.LBB208:
 1353              	 .loc 2 240 0
 1354              	
 1355 0006 4FF0FC03 	 mov r3,#252
 1356 000a 83F31188 	 msr basepri,r3
 1357 000e BFF36F8F 	 isb 
 1358 0012 BFF34F8F 	 dsb 
 1359              	
 1360              	
 1361              	.LVL133:
 1362              	 .thumb
 1363              	.L132:
 1364              	.LBE208:
 1365              	.LBE207:
 483:../Dave/Generated/FREERTOS/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1366              	 .loc 1 483 0 discriminator 1
 1367 0016 FEE7     	 b .L132
 1368              	 .cfi_endproc
 1369              	.LFE134:
 1371              	 .section .text.pcTimerGetName,"ax",%progbits
 1372              	 .align 2
 1373              	 .global pcTimerGetName
 1374              	 .thumb
 1375              	 .thumb_func
 1377              	pcTimerGetName:
 1378              	.LFB135:
 490:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 1379              	 .loc 1 490 0
 1380              	 .cfi_startproc
 1381              	 
 1382              	 
 1383              	 
 1384              	.LVL134:
 493:../Dave/Generated/FREERTOS/timers.c **** 	return pxTimer->pcTimerName;
 1385              	 .loc 1 493 0
 1386 0000 08B1     	 cbz r0,.L137
 495:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 1387              	 .loc 1 495 0
 1388 0002 0068     	 ldr r0,[r0]
 1389              	.LVL135:
 1390 0004 7047     	 bx lr
 1391              	.LVL136:
 1392              	.L137:
 1393              	.LBB209:
 1394              	.LBB210:
 1395              	 .loc 2 240 0
 1396              	
 1397 0006 4FF0FC03 	 mov r3,#252
 1398 000a 83F31188 	 msr basepri,r3
 1399 000e BFF36F8F 	 isb 
 1400 0012 BFF34F8F 	 dsb 
 1401              	
 1402              	
 1403              	.LVL137:
 1404              	 .thumb
 1405              	.L136:
 1406              	.LBE210:
 1407              	.LBE209:
 493:../Dave/Generated/FREERTOS/timers.c **** 	return pxTimer->pcTimerName;
 1408              	 .loc 1 493 0 discriminator 1
 1409 0016 FEE7     	 b .L136
 1410              	 .cfi_endproc
 1411              	.LFE135:
 1413              	 .section .text.xTimerIsTimerActive,"ax",%progbits
 1414              	 .align 2
 1415              	 .global xTimerIsTimerActive
 1416              	 .thumb
 1417              	 .thumb_func
 1419              	xTimerIsTimerActive:
 1420              	.LFB145:
 978:../Dave/Generated/FREERTOS/timers.c **** }
 979:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
 980:../Dave/Generated/FREERTOS/timers.c **** 
 981:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
 982:../Dave/Generated/FREERTOS/timers.c **** {
 1421              	 .loc 1 982 0
 1422              	 .cfi_startproc
 1423              	 
 1424              	 
 1425              	.LVL138:
 983:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerIsInActiveList;
 984:../Dave/Generated/FREERTOS/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 985:../Dave/Generated/FREERTOS/timers.c **** 
 986:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 1426              	 .loc 1 986 0
 1427 0000 58B1     	 cbz r0,.L142
 982:../Dave/Generated/FREERTOS/timers.c **** BaseType_t xTimerIsInActiveList;
 1428              	 .loc 1 982 0
 1429 0002 10B5     	 push {r4,lr}
 1430              	.LCFI22:
 1431              	 .cfi_def_cfa_offset 8
 1432              	 .cfi_offset 4,-8
 1433              	 .cfi_offset 14,-4
 1434 0004 0446     	 mov r4,r0
 987:../Dave/Generated/FREERTOS/timers.c **** 
 988:../Dave/Generated/FREERTOS/timers.c **** 	/* Is the timer in the list of active timers? */
 989:../Dave/Generated/FREERTOS/timers.c **** 	taskENTER_CRITICAL();
 1435              	 .loc 1 989 0
 1436 0006 FFF7FEFF 	 bl vPortEnterCritical
 1437              	.LVL139:
 990:../Dave/Generated/FREERTOS/timers.c **** 	{
 991:../Dave/Generated/FREERTOS/timers.c **** 		/* Checking to see if it is in the NULL list in effect checks to see if
 992:../Dave/Generated/FREERTOS/timers.c **** 		it is referenced from either the current or the overflow timer lists in
 993:../Dave/Generated/FREERTOS/timers.c **** 		one go, but the logic has to be reversed, hence the '!'. */
 994:../Dave/Generated/FREERTOS/timers.c **** 		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListIte
 1438              	 .loc 1 994 0
 1439 000a 6469     	 ldr r4,[r4,#20]
 1440              	.LVL140:
 1441 000c 0034     	 adds r4,r4,#0
 1442 000e 18BF     	 it ne
 1443 0010 0124     	 movne r4,#1
 1444              	.LVL141:
 995:../Dave/Generated/FREERTOS/timers.c **** 	}
 996:../Dave/Generated/FREERTOS/timers.c **** 	taskEXIT_CRITICAL();
 1445              	 .loc 1 996 0
 1446 0012 FFF7FEFF 	 bl vPortExitCritical
 1447              	.LVL142:
 997:../Dave/Generated/FREERTOS/timers.c **** 
 998:../Dave/Generated/FREERTOS/timers.c **** 	return xTimerIsInActiveList;
 999:../Dave/Generated/FREERTOS/timers.c **** } /*lint !e818 Can't be pointer to const due to the typedef. */
 1448              	 .loc 1 999 0
 1449 0016 2046     	 mov r0,r4
 1450 0018 10BD     	 pop {r4,pc}
 1451              	.LVL143:
 1452              	.L142:
 1453              	.LCFI23:
 1454              	 .cfi_def_cfa_offset 0
 1455              	 .cfi_restore 4
 1456              	 .cfi_restore 14
 1457              	.LBB211:
 1458              	.LBB212:
 1459              	 .loc 2 240 0
 1460              	
 1461 001a 4FF0FC03 	 mov r3,#252
 1462 001e 83F31188 	 msr basepri,r3
 1463 0022 BFF36F8F 	 isb 
 1464 0026 BFF34F8F 	 dsb 
 1465              	
 1466              	
 1467              	.LVL144:
 1468              	 .thumb
 1469              	.L140:
 1470              	.LBE212:
 1471              	.LBE211:
 986:../Dave/Generated/FREERTOS/timers.c **** 
 1472              	 .loc 1 986 0 discriminator 1
 1473 002a FEE7     	 b .L140
 1474              	 .cfi_endproc
 1475              	.LFE145:
 1477              	 .section .text.pvTimerGetTimerID,"ax",%progbits
 1478              	 .align 2
 1479              	 .global pvTimerGetTimerID
 1480              	 .thumb
 1481              	 .thumb_func
 1483              	pvTimerGetTimerID:
 1484              	.LFB146:
1000:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1001:../Dave/Generated/FREERTOS/timers.c **** 
1002:../Dave/Generated/FREERTOS/timers.c **** void *pvTimerGetTimerID( const TimerHandle_t xTimer )
1003:../Dave/Generated/FREERTOS/timers.c **** {
 1485              	 .loc 1 1003 0
 1486              	 .cfi_startproc
 1487              	 
 1488              	 
 1489              	.LVL145:
1004:../Dave/Generated/FREERTOS/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
1005:../Dave/Generated/FREERTOS/timers.c **** void *pvReturn;
1006:../Dave/Generated/FREERTOS/timers.c **** 
1007:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 1490              	 .loc 1 1007 0
 1491 0000 40B1     	 cbz r0,.L147
1003:../Dave/Generated/FREERTOS/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 1492              	 .loc 1 1003 0
 1493 0002 10B5     	 push {r4,lr}
 1494              	.LCFI24:
 1495              	 .cfi_def_cfa_offset 8
 1496              	 .cfi_offset 4,-8
 1497              	 .cfi_offset 14,-4
 1498 0004 0446     	 mov r4,r0
1008:../Dave/Generated/FREERTOS/timers.c **** 
1009:../Dave/Generated/FREERTOS/timers.c **** 	taskENTER_CRITICAL();
 1499              	 .loc 1 1009 0
 1500 0006 FFF7FEFF 	 bl vPortEnterCritical
 1501              	.LVL146:
1010:../Dave/Generated/FREERTOS/timers.c **** 	{
1011:../Dave/Generated/FREERTOS/timers.c **** 		pvReturn = pxTimer->pvTimerID;
 1502              	 .loc 1 1011 0
 1503 000a 246A     	 ldr r4,[r4,#32]
 1504              	.LVL147:
1012:../Dave/Generated/FREERTOS/timers.c **** 	}
1013:../Dave/Generated/FREERTOS/timers.c **** 	taskEXIT_CRITICAL();
 1505              	 .loc 1 1013 0
 1506 000c FFF7FEFF 	 bl vPortExitCritical
 1507              	.LVL148:
1014:../Dave/Generated/FREERTOS/timers.c **** 
1015:../Dave/Generated/FREERTOS/timers.c **** 	return pvReturn;
1016:../Dave/Generated/FREERTOS/timers.c **** }
 1508              	 .loc 1 1016 0
 1509 0010 2046     	 mov r0,r4
 1510 0012 10BD     	 pop {r4,pc}
 1511              	.LVL149:
 1512              	.L147:
 1513              	.LCFI25:
 1514              	 .cfi_def_cfa_offset 0
 1515              	 .cfi_restore 4
 1516              	 .cfi_restore 14
 1517              	.LBB213:
 1518              	.LBB214:
 1519              	 .loc 2 240 0
 1520              	
 1521 0014 4FF0FC03 	 mov r3,#252
 1522 0018 83F31188 	 msr basepri,r3
 1523 001c BFF36F8F 	 isb 
 1524 0020 BFF34F8F 	 dsb 
 1525              	
 1526              	
 1527              	.LVL150:
 1528              	 .thumb
 1529              	.L145:
 1530              	.LBE214:
 1531              	.LBE213:
1007:../Dave/Generated/FREERTOS/timers.c **** 
 1532              	 .loc 1 1007 0 discriminator 1
 1533 0024 FEE7     	 b .L145
 1534              	 .cfi_endproc
 1535              	.LFE146:
 1537 0026 00BF     	 .section .text.vTimerSetTimerID,"ax",%progbits
 1538              	 .align 2
 1539              	 .global vTimerSetTimerID
 1540              	 .thumb
 1541              	 .thumb_func
 1543              	vTimerSetTimerID:
 1544              	.LFB147:
1017:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1018:../Dave/Generated/FREERTOS/timers.c **** 
1019:../Dave/Generated/FREERTOS/timers.c **** void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
1020:../Dave/Generated/FREERTOS/timers.c **** {
 1545              	 .loc 1 1020 0
 1546              	 .cfi_startproc
 1547              	 
 1548              	 
 1549              	.LVL151:
 1550 0000 38B5     	 push {r3,r4,r5,lr}
 1551              	.LCFI26:
 1552              	 .cfi_def_cfa_offset 16
 1553              	 .cfi_offset 3,-16
 1554              	 .cfi_offset 4,-12
 1555              	 .cfi_offset 5,-8
 1556              	 .cfi_offset 14,-4
1021:../Dave/Generated/FREERTOS/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
1022:../Dave/Generated/FREERTOS/timers.c **** 
1023:../Dave/Generated/FREERTOS/timers.c **** 	configASSERT( xTimer );
 1557              	 .loc 1 1023 0
 1558 0002 40B1     	 cbz r0,.L152
 1559 0004 0446     	 mov r4,r0
 1560 0006 0D46     	 mov r5,r1
1024:../Dave/Generated/FREERTOS/timers.c **** 
1025:../Dave/Generated/FREERTOS/timers.c **** 	taskENTER_CRITICAL();
 1561              	 .loc 1 1025 0
 1562 0008 FFF7FEFF 	 bl vPortEnterCritical
 1563              	.LVL152:
1026:../Dave/Generated/FREERTOS/timers.c **** 	{
1027:../Dave/Generated/FREERTOS/timers.c **** 		pxTimer->pvTimerID = pvNewID;
 1564              	 .loc 1 1027 0
 1565 000c 2562     	 str r5,[r4,#32]
1028:../Dave/Generated/FREERTOS/timers.c **** 	}
1029:../Dave/Generated/FREERTOS/timers.c **** 	taskEXIT_CRITICAL();
1030:../Dave/Generated/FREERTOS/timers.c **** }
 1566              	 .loc 1 1030 0
 1567 000e BDE83840 	 pop {r3,r4,r5,lr}
 1568              	.LCFI27:
 1569              	 .cfi_remember_state
 1570              	 .cfi_restore 14
 1571              	 .cfi_restore 5
 1572              	 .cfi_restore 4
 1573              	 .cfi_restore 3
 1574              	 .cfi_def_cfa_offset 0
 1575              	.LVL153:
1029:../Dave/Generated/FREERTOS/timers.c **** }
 1576              	 .loc 1 1029 0
 1577 0012 FFF7FEBF 	 b vPortExitCritical
 1578              	.LVL154:
 1579              	.L152:
 1580              	.LCFI28:
 1581              	 .cfi_restore_state
 1582              	.LBB215:
 1583              	.LBB216:
 1584              	 .loc 2 240 0
 1585              	
 1586 0016 4FF0FC03 	 mov r3,#252
 1587 001a 83F31188 	 msr basepri,r3
 1588 001e BFF36F8F 	 isb 
 1589 0022 BFF34F8F 	 dsb 
 1590              	
 1591              	
 1592              	.LVL155:
 1593              	 .thumb
 1594              	.L150:
 1595              	.LBE216:
 1596              	.LBE215:
1023:../Dave/Generated/FREERTOS/timers.c **** 
 1597              	 .loc 1 1023 0 discriminator 1
 1598 0026 FEE7     	 b .L150
 1599              	 .cfi_endproc
 1600              	.LFE147:
 1602              	 .section .text.xTimerPendFunctionCallFromISR,"ax",%progbits
 1603              	 .align 2
 1604              	 .global xTimerPendFunctionCallFromISR
 1605              	 .thumb
 1606              	 .thumb_func
 1608              	xTimerPendFunctionCallFromISR:
 1609              	.LFB148:
1031:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1032:../Dave/Generated/FREERTOS/timers.c **** 
1033:../Dave/Generated/FREERTOS/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
1034:../Dave/Generated/FREERTOS/timers.c **** 
1035:../Dave/Generated/FREERTOS/timers.c **** 	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, ui
1036:../Dave/Generated/FREERTOS/timers.c **** 	{
 1610              	 .loc 1 1036 0
 1611              	 .cfi_startproc
 1612              	 
 1613              	 
 1614              	.LVL156:
 1615 0000 10B5     	 push {r4,lr}
 1616              	.LCFI29:
 1617              	 .cfi_def_cfa_offset 8
 1618              	 .cfi_offset 4,-8
 1619              	 .cfi_offset 14,-4
1037:../Dave/Generated/FREERTOS/timers.c **** 	DaemonTaskMessage_t xMessage;
1038:../Dave/Generated/FREERTOS/timers.c **** 	BaseType_t xReturn;
1039:../Dave/Generated/FREERTOS/timers.c **** 
1040:../Dave/Generated/FREERTOS/timers.c **** 		/* Complete the message with the function parameters and post it to the
1041:../Dave/Generated/FREERTOS/timers.c **** 		daemon task. */
1042:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
1043:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
1044:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
1045:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
1046:../Dave/Generated/FREERTOS/timers.c **** 
1047:../Dave/Generated/FREERTOS/timers.c **** 		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 1620              	 .loc 1 1047 0
 1621 0002 084C     	 ldr r4,.L155
1036:../Dave/Generated/FREERTOS/timers.c **** 	DaemonTaskMessage_t xMessage;
 1622              	 .loc 1 1036 0
 1623 0004 84B0     	 sub sp,sp,#16
 1624              	.LCFI30:
 1625              	 .cfi_def_cfa_offset 24
1045:../Dave/Generated/FREERTOS/timers.c **** 
 1626              	 .loc 1 1045 0
 1627 0006 0392     	 str r2,[sp,#12]
1043:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 1628              	 .loc 1 1043 0
 1629 0008 0190     	 str r0,[sp,#4]
1044:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1630              	 .loc 1 1044 0
 1631 000a 0291     	 str r1,[sp,#8]
 1632              	 .loc 1 1047 0
 1633 000c 1A46     	 mov r2,r3
 1634              	.LVL157:
 1635 000e 2068     	 ldr r0,[r4]
 1636              	.LVL158:
 1637 0010 6946     	 mov r1,sp
 1638              	.LVL159:
1042:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1639              	 .loc 1 1042 0
 1640 0012 6FF00104 	 mvn r4,#1
 1641              	 .loc 1 1047 0
 1642 0016 0023     	 movs r3,#0
 1643              	.LVL160:
1042:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1644              	 .loc 1 1042 0
 1645 0018 0094     	 str r4,[sp]
 1646              	 .loc 1 1047 0
 1647 001a FFF7FEFF 	 bl xQueueGenericSendFromISR
 1648              	.LVL161:
1048:../Dave/Generated/FREERTOS/timers.c **** 
1049:../Dave/Generated/FREERTOS/timers.c **** 		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1050:../Dave/Generated/FREERTOS/timers.c **** 
1051:../Dave/Generated/FREERTOS/timers.c **** 		return xReturn;
1052:../Dave/Generated/FREERTOS/timers.c **** 	}
 1649              	 .loc 1 1052 0
 1650 001e 04B0     	 add sp,sp,#16
 1651              	.LCFI31:
 1652              	 .cfi_def_cfa_offset 8
 1653              	 
 1654 0020 10BD     	 pop {r4,pc}
 1655              	.L156:
 1656 0022 00BF     	 .align 2
 1657              	.L155:
 1658 0024 00000000 	 .word .LANCHOR1
 1659              	 .cfi_endproc
 1660              	.LFE148:
 1662              	 .section .text.xTimerPendFunctionCall,"ax",%progbits
 1663              	 .align 2
 1664              	 .global xTimerPendFunctionCall
 1665              	 .thumb
 1666              	 .thumb_func
 1668              	xTimerPendFunctionCall:
 1669              	.LFB149:
1053:../Dave/Generated/FREERTOS/timers.c **** 
1054:../Dave/Generated/FREERTOS/timers.c **** #endif /* INCLUDE_xTimerPendFunctionCall */
1055:../Dave/Generated/FREERTOS/timers.c **** /*-----------------------------------------------------------*/
1056:../Dave/Generated/FREERTOS/timers.c **** 
1057:../Dave/Generated/FREERTOS/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
1058:../Dave/Generated/FREERTOS/timers.c **** 
1059:../Dave/Generated/FREERTOS/timers.c **** 	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t 
1060:../Dave/Generated/FREERTOS/timers.c **** 	{
 1670              	 .loc 1 1060 0
 1671              	 .cfi_startproc
 1672              	 
 1673              	 
 1674              	.LVL162:
 1675 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 1676              	.LCFI32:
 1677              	 .cfi_def_cfa_offset 20
 1678              	 .cfi_offset 4,-20
 1679              	 .cfi_offset 5,-16
 1680              	 .cfi_offset 6,-12
 1681              	 .cfi_offset 7,-8
 1682              	 .cfi_offset 14,-4
1061:../Dave/Generated/FREERTOS/timers.c **** 	DaemonTaskMessage_t xMessage;
1062:../Dave/Generated/FREERTOS/timers.c **** 	BaseType_t xReturn;
1063:../Dave/Generated/FREERTOS/timers.c **** 
1064:../Dave/Generated/FREERTOS/timers.c **** 		/* This function can only be called after a timer has been created or
1065:../Dave/Generated/FREERTOS/timers.c **** 		after the scheduler has been started because, until then, the timer
1066:../Dave/Generated/FREERTOS/timers.c **** 		queue does not exist. */
1067:../Dave/Generated/FREERTOS/timers.c **** 		configASSERT( xTimerQueue );
 1683              	 .loc 1 1067 0
 1684 0002 0F4C     	 ldr r4,.L162
 1685 0004 2768     	 ldr r7,[r4]
1060:../Dave/Generated/FREERTOS/timers.c **** 	DaemonTaskMessage_t xMessage;
 1686              	 .loc 1 1060 0
 1687 0006 85B0     	 sub sp,sp,#20
 1688              	.LCFI33:
 1689              	 .cfi_def_cfa_offset 40
 1690              	 .loc 1 1067 0
 1691 0008 87B1     	 cbz r7,.L161
 1692 000a 1446     	 mov r4,r2
 1693 000c 0D46     	 mov r5,r1
 1694 000e 1A46     	 mov r2,r3
 1695              	.LVL163:
 1696 0010 0646     	 mov r6,r0
1068:../Dave/Generated/FREERTOS/timers.c **** 
1069:../Dave/Generated/FREERTOS/timers.c **** 		/* Complete the message with the function parameters and post it to the
1070:../Dave/Generated/FREERTOS/timers.c **** 		daemon task. */
1071:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
1072:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
1073:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
1074:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
1075:../Dave/Generated/FREERTOS/timers.c **** 
1076:../Dave/Generated/FREERTOS/timers.c **** 		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 1697              	 .loc 1 1076 0
 1698 0012 6946     	 mov r1,sp
 1699              	.LVL164:
 1700 0014 3846     	 mov r0,r7
 1701              	.LVL165:
 1702 0016 0023     	 movs r3,#0
 1703              	.LVL166:
1071:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1704              	 .loc 1 1071 0
 1705 0018 4FF0FF37 	 mov r7,#-1
1072:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 1706              	 .loc 1 1072 0
 1707 001c 0196     	 str r6,[sp,#4]
1073:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1708              	 .loc 1 1073 0
 1709 001e 0295     	 str r5,[sp,#8]
1074:../Dave/Generated/FREERTOS/timers.c **** 
 1710              	 .loc 1 1074 0
 1711 0020 0394     	 str r4,[sp,#12]
1071:../Dave/Generated/FREERTOS/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1712              	 .loc 1 1071 0
 1713 0022 0097     	 str r7,[sp]
 1714              	 .loc 1 1076 0
 1715 0024 FFF7FEFF 	 bl xQueueGenericSend
 1716              	.LVL167:
1077:../Dave/Generated/FREERTOS/timers.c **** 
1078:../Dave/Generated/FREERTOS/timers.c **** 		tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1079:../Dave/Generated/FREERTOS/timers.c **** 
1080:../Dave/Generated/FREERTOS/timers.c **** 		return xReturn;
1081:../Dave/Generated/FREERTOS/timers.c **** 	}
 1717              	 .loc 1 1081 0
 1718 0028 05B0     	 add sp,sp,#20
 1719              	.LCFI34:
 1720              	 .cfi_remember_state
 1721              	 .cfi_def_cfa_offset 20
 1722              	 
 1723 002a F0BD     	 pop {r4,r5,r6,r7,pc}
 1724              	.LVL168:
 1725              	.L161:
 1726              	.LCFI35:
 1727              	 .cfi_restore_state
 1728              	.LBB217:
 1729              	.LBB218:
 1730              	 .loc 2 240 0
 1731              	
 1732 002c 4FF0FC03 	 mov r3,#252
 1733 0030 83F31188 	 msr basepri,r3
 1734 0034 BFF36F8F 	 isb 
 1735 0038 BFF34F8F 	 dsb 
 1736              	
 1737              	
 1738              	.LVL169:
 1739              	 .thumb
 1740              	.L159:
 1741              	.LBE218:
 1742              	.LBE217:
1067:../Dave/Generated/FREERTOS/timers.c **** 
 1743              	 .loc 1 1067 0 discriminator 1
 1744 003c FEE7     	 b .L159
 1745              	.L163:
 1746 003e 00BF     	 .align 2
 1747              	.L162:
 1748 0040 00000000 	 .word .LANCHOR1
 1749              	 .cfi_endproc
 1750              	.LFE149:
 1752              	 .section .bss.pxCurrentTimerList,"aw",%nobits
 1753              	 .align 2
 1754              	 .set .LANCHOR0,.+0
 1757              	pxCurrentTimerList:
 1758 0000 00000000 	 .space 4
 1759              	 .section .bss.xActiveTimerList1,"aw",%nobits
 1760              	 .align 2
 1761              	 .set .LANCHOR3,.+0
 1764              	xActiveTimerList1:
 1765 0000 00000000 	 .space 20
 1765      00000000 
 1765      00000000 
 1765      00000000 
 1765      00000000 
 1766              	 .section .bss.xActiveTimerList2,"aw",%nobits
 1767              	 .align 2
 1768              	 .set .LANCHOR4,.+0
 1771              	xActiveTimerList2:
 1772 0000 00000000 	 .space 20
 1772      00000000 
 1772      00000000 
 1772      00000000 
 1772      00000000 
 1773              	 .section .rodata.str1.4,"aMS",%progbits,1
 1774              	 .align 2
 1775              	.LC0:
 1776 0000 546D7251 	 .ascii "TmrQ\000"
 1776      00
 1777 0005 000000   	 .space 3
 1778              	.LC1:
 1779 0008 546D7220 	 .ascii "Tmr Svc\000"
 1779      53766300 
 1780              	 .section .bss.xTimerQueue,"aw",%nobits
 1781              	 .align 2
 1782              	 .set .LANCHOR1,.+0
 1785              	xTimerQueue:
 1786 0000 00000000 	 .space 4
 1787              	 .section .bss.pxOverflowTimerList,"aw",%nobits
 1788              	 .align 2
 1789              	 .set .LANCHOR2,.+0
 1792              	pxOverflowTimerList:
 1793 0000 00000000 	 .space 4
 1794              	 .section .bss.xTimerTaskHandle,"aw",%nobits
 1795              	 .align 2
 1796              	 .set .LANCHOR5,.+0
 1799              	xTimerTaskHandle:
 1800 0000 00000000 	 .space 4
 1801              	 .section .bss.xLastTime.7645,"aw",%nobits
 1802              	 .align 2
 1803              	 .set .LANCHOR6,.+0
 1806              	xLastTime.7645:
 1807 0000 00000000 	 .space 4
 1808              	 .text
 1809              	.Letext0:
 1810              	 .file 3 "c:\\dave 4\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 1811              	 .file 4 "c:\\dave 4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1812              	 .file 5 "c:\\dave 4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1813              	 .file 6 "../Dave/Generated/FREERTOS/projdefs.h"
 1814              	 .file 7 "../Dave/Generated/FREERTOS/list.h"
 1815              	 .file 8 "../Dave/Generated/FREERTOS/task.h"
 1816              	 .file 9 "../Dave/Generated/FREERTOS/queue.h"
 1817              	 .file 10 "../Dave/Generated/FREERTOS/timers.h"
 1818              	 .file 11 "../Dave/Generated/FREERTOS/portable.h"
 1819              	 .file 12 "C:/Workspaces/Dave 4/CTPOT_test1/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 timers.c
    {standard input}:20     .text.prvSwitchTimerLists:00000000 $t
    {standard input}:24     .text.prvSwitchTimerLists:00000000 prvSwitchTimerLists
    {standard input}:182    .text.prvSwitchTimerLists:00000090 $d
    {standard input}:189    .text.xTimerCreateTimerTask:00000000 $t
    {standard input}:194    .text.xTimerCreateTimerTask:00000000 xTimerCreateTimerTask
    {standard input}:319    .text.xTimerCreateTimerTask:00000074 $d
    {standard input}:642    .text.prvTimerTask:00000000 prvTimerTask
    {standard input}:334    .text.xTimerCreate:00000000 $t
    {standard input}:339    .text.xTimerCreate:00000000 xTimerCreate
    {standard input}:490    .text.xTimerCreate:00000098 $d
    {standard input}:504    .text.xTimerGenericCommand:00000000 $t
    {standard input}:509    .text.xTimerGenericCommand:00000000 xTimerGenericCommand
    {standard input}:629    .text.xTimerGenericCommand:00000064 $d
    {standard input}:638    .text.prvTimerTask:00000000 $t
    {standard input}:1230   .text.prvTimerTask:00000234 $d
    {standard input}:1243   .text.xTimerGetTimerDaemonTaskHandle:00000000 $t
    {standard input}:1248   .text.xTimerGetTimerDaemonTaskHandle:00000000 xTimerGetTimerDaemonTaskHandle
    {standard input}:1282   .text.xTimerGetTimerDaemonTaskHandle:0000001c $d
    {standard input}:1287   .text.xTimerGetPeriod:00000000 $t
    {standard input}:1292   .text.xTimerGetPeriod:00000000 xTimerGetPeriod
    {standard input}:1329   .text.xTimerGetExpiryTime:00000000 $t
    {standard input}:1334   .text.xTimerGetExpiryTime:00000000 xTimerGetExpiryTime
    {standard input}:1372   .text.pcTimerGetName:00000000 $t
    {standard input}:1377   .text.pcTimerGetName:00000000 pcTimerGetName
    {standard input}:1414   .text.xTimerIsTimerActive:00000000 $t
    {standard input}:1419   .text.xTimerIsTimerActive:00000000 xTimerIsTimerActive
    {standard input}:1478   .text.pvTimerGetTimerID:00000000 $t
    {standard input}:1483   .text.pvTimerGetTimerID:00000000 pvTimerGetTimerID
    {standard input}:1538   .text.vTimerSetTimerID:00000000 $t
    {standard input}:1543   .text.vTimerSetTimerID:00000000 vTimerSetTimerID
    {standard input}:1603   .text.xTimerPendFunctionCallFromISR:00000000 $t
    {standard input}:1608   .text.xTimerPendFunctionCallFromISR:00000000 xTimerPendFunctionCallFromISR
    {standard input}:1658   .text.xTimerPendFunctionCallFromISR:00000024 $d
    {standard input}:1663   .text.xTimerPendFunctionCall:00000000 $t
    {standard input}:1668   .text.xTimerPendFunctionCall:00000000 xTimerPendFunctionCall
    {standard input}:1748   .text.xTimerPendFunctionCall:00000040 $d
    {standard input}:1753   .bss.pxCurrentTimerList:00000000 $d
    {standard input}:1757   .bss.pxCurrentTimerList:00000000 pxCurrentTimerList
    {standard input}:1760   .bss.xActiveTimerList1:00000000 $d
    {standard input}:1764   .bss.xActiveTimerList1:00000000 xActiveTimerList1
    {standard input}:1767   .bss.xActiveTimerList2:00000000 $d
    {standard input}:1771   .bss.xActiveTimerList2:00000000 xActiveTimerList2
    {standard input}:1774   .rodata.str1.4:00000000 $d
    {standard input}:1781   .bss.xTimerQueue:00000000 $d
    {standard input}:1785   .bss.xTimerQueue:00000000 xTimerQueue
    {standard input}:1788   .bss.pxOverflowTimerList:00000000 $d
    {standard input}:1792   .bss.pxOverflowTimerList:00000000 pxOverflowTimerList
    {standard input}:1795   .bss.xTimerTaskHandle:00000000 $d
    {standard input}:1799   .bss.xTimerTaskHandle:00000000 xTimerTaskHandle
    {standard input}:1802   .bss.xLastTime.7645:00000000 $d
    {standard input}:1806   .bss.xLastTime.7645:00000000 xLastTime.7645
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
uxListRemove
xTaskGetSchedulerState
xQueueGenericSend
vListInsert
vPortEnterCritical
vPortExitCritical
xTaskCreate
vListInitialise
xQueueGenericCreate
vQueueAddToRegistry
pvPortMalloc
vListInitialiseItem
xQueueGenericSendFromISR
vTaskSuspendAll
xTaskGetTickCount
vQueueWaitForMessageRestricted
xTaskResumeAll
xQueueGenericReceive
vPortFree
