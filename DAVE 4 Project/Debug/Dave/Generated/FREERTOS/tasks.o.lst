   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "tasks.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.unlikely.prvSearchForNameWithinSingleList,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	prvSearchForNameWithinSingleList:
  25              	.LFB150:
  26              	 .file 1 "../Dave/Generated/FREERTOS/tasks.c"
   1:../Dave/Generated/FREERTOS/tasks.c **** /*
   2:../Dave/Generated/FREERTOS/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Dave/Generated/FREERTOS/tasks.c ****     All rights reserved
   4:../Dave/Generated/FREERTOS/tasks.c **** 
   5:../Dave/Generated/FREERTOS/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Dave/Generated/FREERTOS/tasks.c **** 
   7:../Dave/Generated/FREERTOS/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:../Dave/Generated/FREERTOS/tasks.c **** 
   9:../Dave/Generated/FREERTOS/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Dave/Generated/FREERTOS/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Dave/Generated/FREERTOS/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Dave/Generated/FREERTOS/tasks.c **** 
  13:../Dave/Generated/FREERTOS/tasks.c ****     ***************************************************************************
  14:../Dave/Generated/FREERTOS/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Dave/Generated/FREERTOS/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Dave/Generated/FREERTOS/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Dave/Generated/FREERTOS/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Dave/Generated/FREERTOS/tasks.c ****     ***************************************************************************
  19:../Dave/Generated/FREERTOS/tasks.c **** 
  20:../Dave/Generated/FREERTOS/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Dave/Generated/FREERTOS/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Dave/Generated/FREERTOS/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Dave/Generated/FREERTOS/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:../Dave/Generated/FREERTOS/tasks.c **** 
  25:../Dave/Generated/FREERTOS/tasks.c ****     ***************************************************************************
  26:../Dave/Generated/FREERTOS/tasks.c ****      *                                                                       *
  27:../Dave/Generated/FREERTOS/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Dave/Generated/FREERTOS/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Dave/Generated/FREERTOS/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:../Dave/Generated/FREERTOS/tasks.c ****      *    is the industry's de facto standard.                               *
  31:../Dave/Generated/FREERTOS/tasks.c ****      *                                                                       *
  32:../Dave/Generated/FREERTOS/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Dave/Generated/FREERTOS/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Dave/Generated/FREERTOS/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Dave/Generated/FREERTOS/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Dave/Generated/FREERTOS/tasks.c ****      *                                                                       *
  37:../Dave/Generated/FREERTOS/tasks.c ****     ***************************************************************************
  38:../Dave/Generated/FREERTOS/tasks.c **** 
  39:../Dave/Generated/FREERTOS/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Dave/Generated/FREERTOS/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Dave/Generated/FREERTOS/tasks.c ****     defined configASSERT()?
  42:../Dave/Generated/FREERTOS/tasks.c **** 
  43:../Dave/Generated/FREERTOS/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Dave/Generated/FREERTOS/tasks.c ****     embedded software for free we request you assist our global community by
  45:../Dave/Generated/FREERTOS/tasks.c ****     participating in the support forum.
  46:../Dave/Generated/FREERTOS/tasks.c **** 
  47:../Dave/Generated/FREERTOS/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Dave/Generated/FREERTOS/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Dave/Generated/FREERTOS/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Dave/Generated/FREERTOS/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Dave/Generated/FREERTOS/tasks.c **** 
  52:../Dave/Generated/FREERTOS/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Dave/Generated/FREERTOS/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Dave/Generated/FREERTOS/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Dave/Generated/FREERTOS/tasks.c **** 
  56:../Dave/Generated/FREERTOS/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Dave/Generated/FREERTOS/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Dave/Generated/FREERTOS/tasks.c **** 
  59:../Dave/Generated/FREERTOS/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Dave/Generated/FREERTOS/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Dave/Generated/FREERTOS/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Dave/Generated/FREERTOS/tasks.c **** 
  63:../Dave/Generated/FREERTOS/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Dave/Generated/FREERTOS/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Dave/Generated/FREERTOS/tasks.c ****     mission critical applications that require provable dependability.
  66:../Dave/Generated/FREERTOS/tasks.c **** 
  67:../Dave/Generated/FREERTOS/tasks.c ****     1 tab == 4 spaces!
  68:../Dave/Generated/FREERTOS/tasks.c **** */
  69:../Dave/Generated/FREERTOS/tasks.c **** 
  70:../Dave/Generated/FREERTOS/tasks.c **** /* Standard includes. */
  71:../Dave/Generated/FREERTOS/tasks.c **** #include <stdlib.h>
  72:../Dave/Generated/FREERTOS/tasks.c **** #include <string.h>
  73:../Dave/Generated/FREERTOS/tasks.c **** 
  74:../Dave/Generated/FREERTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:../Dave/Generated/FREERTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:../Dave/Generated/FREERTOS/tasks.c **** task.h is included from an application file. */
  77:../Dave/Generated/FREERTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:../Dave/Generated/FREERTOS/tasks.c **** 
  79:../Dave/Generated/FREERTOS/tasks.c **** /* FreeRTOS includes. */
  80:../Dave/Generated/FREERTOS/tasks.c **** #include "FreeRTOS.h"
  81:../Dave/Generated/FREERTOS/tasks.c **** #include "task.h"
  82:../Dave/Generated/FREERTOS/tasks.c **** #include "timers.h"
  83:../Dave/Generated/FREERTOS/tasks.c **** #include "StackMacros.h"
  84:../Dave/Generated/FREERTOS/tasks.c **** 
  85:../Dave/Generated/FREERTOS/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:../Dave/Generated/FREERTOS/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:../Dave/Generated/FREERTOS/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:../Dave/Generated/FREERTOS/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:../Dave/Generated/FREERTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:../Dave/Generated/FREERTOS/tasks.c **** 
  91:../Dave/Generated/FREERTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:../Dave/Generated/FREERTOS/tasks.c **** functions but without including stdio.h here. */
  93:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:../Dave/Generated/FREERTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:../Dave/Generated/FREERTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:../Dave/Generated/FREERTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:../Dave/Generated/FREERTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:../Dave/Generated/FREERTOS/tasks.c **** 	#include <stdio.h>
  99:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:../Dave/Generated/FREERTOS/tasks.c **** 
 101:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:../Dave/Generated/FREERTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:../Dave/Generated/FREERTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:../Dave/Generated/FREERTOS/tasks.c **** #else
 106:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:../Dave/Generated/FREERTOS/tasks.c **** #endif
 108:../Dave/Generated/FREERTOS/tasks.c **** 
 109:../Dave/Generated/FREERTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:../Dave/Generated/FREERTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:../Dave/Generated/FREERTOS/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:../Dave/Generated/FREERTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:../Dave/Generated/FREERTOS/tasks.c **** 
 114:../Dave/Generated/FREERTOS/tasks.c **** /*
 115:../Dave/Generated/FREERTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:../Dave/Generated/FREERTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:../Dave/Generated/FREERTOS/tasks.c ****  */
 118:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:../Dave/Generated/FREERTOS/tasks.c **** 
 120:../Dave/Generated/FREERTOS/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:../Dave/Generated/FREERTOS/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:../Dave/Generated/FREERTOS/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:../Dave/Generated/FREERTOS/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:../Dave/Generated/FREERTOS/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:../Dave/Generated/FREERTOS/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:../Dave/Generated/FREERTOS/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:../Dave/Generated/FREERTOS/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:../Dave/Generated/FREERTOS/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:../Dave/Generated/FREERTOS/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:../Dave/Generated/FREERTOS/tasks.c **** made to free the RAM that was allocated statically.
 131:../Dave/Generated/FREERTOS/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:../Dave/Generated/FREERTOS/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:../Dave/Generated/FREERTOS/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:../Dave/Generated/FREERTOS/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:../Dave/Generated/FREERTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:../Dave/Generated/FREERTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:../Dave/Generated/FREERTOS/tasks.c **** 
 140:../Dave/Generated/FREERTOS/tasks.c **** /*
 141:../Dave/Generated/FREERTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:../Dave/Generated/FREERTOS/tasks.c ****  */
 143:../Dave/Generated/FREERTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:../Dave/Generated/FREERTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:../Dave/Generated/FREERTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:../Dave/Generated/FREERTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:../Dave/Generated/FREERTOS/tasks.c **** 
 148:../Dave/Generated/FREERTOS/tasks.c **** /*
 149:../Dave/Generated/FREERTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:../Dave/Generated/FREERTOS/tasks.c ****  * global, rather than file scope.
 151:../Dave/Generated/FREERTOS/tasks.c ****  */
 152:../Dave/Generated/FREERTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:../Dave/Generated/FREERTOS/tasks.c **** 	#define static
 154:../Dave/Generated/FREERTOS/tasks.c **** #endif
 155:../Dave/Generated/FREERTOS/tasks.c **** 
 156:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:../Dave/Generated/FREERTOS/tasks.c **** 
 158:../Dave/Generated/FREERTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:../Dave/Generated/FREERTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:../Dave/Generated/FREERTOS/tasks.c **** 	microcontroller architecture. */
 161:../Dave/Generated/FREERTOS/tasks.c **** 
 162:../Dave/Generated/FREERTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:../Dave/Generated/FREERTOS/tasks.c **** 	state task. */
 164:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:../Dave/Generated/FREERTOS/tasks.c **** 	{																									\
 166:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:../Dave/Generated/FREERTOS/tasks.c **** 		{																								\
 168:../Dave/Generated/FREERTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:../Dave/Generated/FREERTOS/tasks.c **** 		}																								\
 170:../Dave/Generated/FREERTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:../Dave/Generated/FREERTOS/tasks.c **** 
 172:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 173:../Dave/Generated/FREERTOS/tasks.c **** 
 174:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:../Dave/Generated/FREERTOS/tasks.c **** 	{																									\
 176:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:../Dave/Generated/FREERTOS/tasks.c **** 																										\
 178:../Dave/Generated/FREERTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:../Dave/Generated/FREERTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:../Dave/Generated/FREERTOS/tasks.c **** 		{																								\
 181:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:../Dave/Generated/FREERTOS/tasks.c **** 			--uxTopPriority;																			\
 183:../Dave/Generated/FREERTOS/tasks.c **** 		}																								\
 184:../Dave/Generated/FREERTOS/tasks.c **** 																										\
 185:../Dave/Generated/FREERTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:../Dave/Generated/FREERTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:../Dave/Generated/FREERTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:../Dave/Generated/FREERTOS/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:../Dave/Generated/FREERTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:../Dave/Generated/FREERTOS/tasks.c **** 
 191:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 192:../Dave/Generated/FREERTOS/tasks.c **** 
 193:../Dave/Generated/FREERTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:../Dave/Generated/FREERTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:../Dave/Generated/FREERTOS/tasks.c **** 	being used. */
 196:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:../Dave/Generated/FREERTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:../Dave/Generated/FREERTOS/tasks.c **** 
 199:../Dave/Generated/FREERTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:../Dave/Generated/FREERTOS/tasks.c **** 
 201:../Dave/Generated/FREERTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:../Dave/Generated/FREERTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:../Dave/Generated/FREERTOS/tasks.c **** 	architecture being used. */
 204:../Dave/Generated/FREERTOS/tasks.c **** 
 205:../Dave/Generated/FREERTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:../Dave/Generated/FREERTOS/tasks.c **** 
 208:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 209:../Dave/Generated/FREERTOS/tasks.c **** 
 210:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:../Dave/Generated/FREERTOS/tasks.c **** 	{																								\
 212:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:../Dave/Generated/FREERTOS/tasks.c **** 																									\
 214:../Dave/Generated/FREERTOS/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:../Dave/Generated/FREERTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:../Dave/Generated/FREERTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:../Dave/Generated/FREERTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:../Dave/Generated/FREERTOS/tasks.c **** 
 220:../Dave/Generated/FREERTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 221:../Dave/Generated/FREERTOS/tasks.c **** 
 222:../Dave/Generated/FREERTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:../Dave/Generated/FREERTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:../Dave/Generated/FREERTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:../Dave/Generated/FREERTOS/tasks.c **** 	{																									\
 227:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:../Dave/Generated/FREERTOS/tasks.c **** 		{																								\
 229:../Dave/Generated/FREERTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:../Dave/Generated/FREERTOS/tasks.c **** 		}																								\
 231:../Dave/Generated/FREERTOS/tasks.c **** 	}
 232:../Dave/Generated/FREERTOS/tasks.c **** 
 233:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:../Dave/Generated/FREERTOS/tasks.c **** 
 235:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 236:../Dave/Generated/FREERTOS/tasks.c **** 
 237:../Dave/Generated/FREERTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:../Dave/Generated/FREERTOS/tasks.c **** count overflows. */
 239:../Dave/Generated/FREERTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:../Dave/Generated/FREERTOS/tasks.c **** {																									\
 241:../Dave/Generated/FREERTOS/tasks.c **** 	List_t *pxTemp;																					\
 242:../Dave/Generated/FREERTOS/tasks.c **** 																									\
 243:../Dave/Generated/FREERTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:../Dave/Generated/FREERTOS/tasks.c **** 																									\
 246:../Dave/Generated/FREERTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:../Dave/Generated/FREERTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:../Dave/Generated/FREERTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:../Dave/Generated/FREERTOS/tasks.c **** 	xNumOfOverflows++;																				\
 250:../Dave/Generated/FREERTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:../Dave/Generated/FREERTOS/tasks.c **** }
 252:../Dave/Generated/FREERTOS/tasks.c **** 
 253:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 254:../Dave/Generated/FREERTOS/tasks.c **** 
 255:../Dave/Generated/FREERTOS/tasks.c **** /*
 256:../Dave/Generated/FREERTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:../Dave/Generated/FREERTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:../Dave/Generated/FREERTOS/tasks.c ****  */
 259:../Dave/Generated/FREERTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:../Dave/Generated/FREERTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:../Dave/Generated/FREERTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:../Dave/Generated/FREERTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:../Dave/Generated/FREERTOS/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 265:../Dave/Generated/FREERTOS/tasks.c **** 
 266:../Dave/Generated/FREERTOS/tasks.c **** /*
 267:../Dave/Generated/FREERTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:../Dave/Generated/FREERTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:../Dave/Generated/FREERTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:../Dave/Generated/FREERTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:../Dave/Generated/FREERTOS/tasks.c ****  */
 272:../Dave/Generated/FREERTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:../Dave/Generated/FREERTOS/tasks.c **** 
 274:../Dave/Generated/FREERTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:../Dave/Generated/FREERTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:../Dave/Generated/FREERTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:../Dave/Generated/FREERTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:../Dave/Generated/FREERTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:../Dave/Generated/FREERTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:../Dave/Generated/FREERTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:../Dave/Generated/FREERTOS/tasks.c **** to its original value when it is released. */
 282:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:../Dave/Generated/FREERTOS/tasks.c **** #else
 285:../Dave/Generated/FREERTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:../Dave/Generated/FREERTOS/tasks.c **** #endif
 287:../Dave/Generated/FREERTOS/tasks.c **** 
 288:../Dave/Generated/FREERTOS/tasks.c **** /*
 289:../Dave/Generated/FREERTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:../Dave/Generated/FREERTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:../Dave/Generated/FREERTOS/tasks.c ****  * (the task's run time environment, including register values)
 292:../Dave/Generated/FREERTOS/tasks.c ****  */
 293:../Dave/Generated/FREERTOS/tasks.c **** typedef struct tskTaskControlBlock
 294:../Dave/Generated/FREERTOS/tasks.c **** {
 295:../Dave/Generated/FREERTOS/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:../Dave/Generated/FREERTOS/tasks.c **** 
 297:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:../Dave/Generated/FREERTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 300:../Dave/Generated/FREERTOS/tasks.c **** 
 301:../Dave/Generated/FREERTOS/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:../Dave/Generated/FREERTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:../Dave/Generated/FREERTOS/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:../Dave/Generated/FREERTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:../Dave/Generated/FREERTOS/tasks.c **** 
 307:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:../Dave/Generated/FREERTOS/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 310:../Dave/Generated/FREERTOS/tasks.c **** 
 311:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 314:../Dave/Generated/FREERTOS/tasks.c **** 
 315:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 319:../Dave/Generated/FREERTOS/tasks.c **** 
 320:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:../Dave/Generated/FREERTOS/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 324:../Dave/Generated/FREERTOS/tasks.c **** 
 325:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:../Dave/Generated/FREERTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 328:../Dave/Generated/FREERTOS/tasks.c **** 
 329:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:../Dave/Generated/FREERTOS/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 332:../Dave/Generated/FREERTOS/tasks.c **** 
 333:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:../Dave/Generated/FREERTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 336:../Dave/Generated/FREERTOS/tasks.c **** 
 337:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:../Dave/Generated/FREERTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:../Dave/Generated/FREERTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:../Dave/Generated/FREERTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:../Dave/Generated/FREERTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:../Dave/Generated/FREERTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:../Dave/Generated/FREERTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:../Dave/Generated/FREERTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:../Dave/Generated/FREERTOS/tasks.c **** 		struct	_reent xNewLib_reent;
 346:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 347:../Dave/Generated/FREERTOS/tasks.c **** 
 348:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:../Dave/Generated/FREERTOS/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:../Dave/Generated/FREERTOS/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 352:../Dave/Generated/FREERTOS/tasks.c **** 
 353:../Dave/Generated/FREERTOS/tasks.c **** 	/* See the comments above the definition of
 354:../Dave/Generated/FREERTOS/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:../Dave/Generated/FREERTOS/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:../Dave/Generated/FREERTOS/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 358:../Dave/Generated/FREERTOS/tasks.c **** 
 359:../Dave/Generated/FREERTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:../Dave/Generated/FREERTOS/tasks.c **** 		uint8_t ucDelayAborted;
 361:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 362:../Dave/Generated/FREERTOS/tasks.c **** 
 363:../Dave/Generated/FREERTOS/tasks.c **** } tskTCB;
 364:../Dave/Generated/FREERTOS/tasks.c **** 
 365:../Dave/Generated/FREERTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:../Dave/Generated/FREERTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:../Dave/Generated/FREERTOS/tasks.c **** typedef tskTCB TCB_t;
 368:../Dave/Generated/FREERTOS/tasks.c **** 
 369:../Dave/Generated/FREERTOS/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:../Dave/Generated/FREERTOS/tasks.c **** static variables must be declared volatile. */
 371:../Dave/Generated/FREERTOS/tasks.c **** 
 372:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:../Dave/Generated/FREERTOS/tasks.c **** 
 374:../Dave/Generated/FREERTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:../Dave/Generated/FREERTOS/tasks.c **** 
 382:../Dave/Generated/FREERTOS/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:../Dave/Generated/FREERTOS/tasks.c **** 
 384:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:../Dave/Generated/FREERTOS/tasks.c **** 
 387:../Dave/Generated/FREERTOS/tasks.c **** #endif
 388:../Dave/Generated/FREERTOS/tasks.c **** 
 389:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:../Dave/Generated/FREERTOS/tasks.c **** 
 391:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:../Dave/Generated/FREERTOS/tasks.c **** 
 393:../Dave/Generated/FREERTOS/tasks.c **** #endif
 394:../Dave/Generated/FREERTOS/tasks.c **** 
 395:../Dave/Generated/FREERTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 396:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:../Dave/Generated/FREERTOS/tasks.c **** 
 407:../Dave/Generated/FREERTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:../Dave/Generated/FREERTOS/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:../Dave/Generated/FREERTOS/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:../Dave/Generated/FREERTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:../Dave/Generated/FREERTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:../Dave/Generated/FREERTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:../Dave/Generated/FREERTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:../Dave/Generated/FREERTOS/tasks.c **** accessed from a critical section. */
 415:../Dave/Generated/FREERTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:../Dave/Generated/FREERTOS/tasks.c **** 
 417:../Dave/Generated/FREERTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:../Dave/Generated/FREERTOS/tasks.c **** 
 419:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:../Dave/Generated/FREERTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:../Dave/Generated/FREERTOS/tasks.c **** 
 422:../Dave/Generated/FREERTOS/tasks.c **** #endif
 423:../Dave/Generated/FREERTOS/tasks.c **** 
 424:../Dave/Generated/FREERTOS/tasks.c **** /*lint +e956 */
 425:../Dave/Generated/FREERTOS/tasks.c **** 
 426:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 427:../Dave/Generated/FREERTOS/tasks.c **** 
 428:../Dave/Generated/FREERTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:../Dave/Generated/FREERTOS/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:../Dave/Generated/FREERTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:../Dave/Generated/FREERTOS/tasks.c **** #endif
 432:../Dave/Generated/FREERTOS/tasks.c **** 
 433:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:../Dave/Generated/FREERTOS/tasks.c **** 	extern void vApplicationTickHook( void );
 435:../Dave/Generated/FREERTOS/tasks.c **** #endif
 436:../Dave/Generated/FREERTOS/tasks.c **** 
 437:../Dave/Generated/FREERTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:../Dave/Generated/FREERTOS/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:../Dave/Generated/FREERTOS/tasks.c **** #endif
 440:../Dave/Generated/FREERTOS/tasks.c **** 
 441:../Dave/Generated/FREERTOS/tasks.c **** /* File private functions. --------------------------------*/
 442:../Dave/Generated/FREERTOS/tasks.c **** 
 443:../Dave/Generated/FREERTOS/tasks.c **** /**
 444:../Dave/Generated/FREERTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:../Dave/Generated/FREERTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:../Dave/Generated/FREERTOS/tasks.c ****  * is in any other state.
 447:../Dave/Generated/FREERTOS/tasks.c ****  */
 448:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:../Dave/Generated/FREERTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 450:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:../Dave/Generated/FREERTOS/tasks.c **** 
 452:../Dave/Generated/FREERTOS/tasks.c **** /*
 453:../Dave/Generated/FREERTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:../Dave/Generated/FREERTOS/tasks.c ****  * automatically upon the creation of the first task.
 455:../Dave/Generated/FREERTOS/tasks.c ****  */
 456:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:../Dave/Generated/FREERTOS/tasks.c **** 
 458:../Dave/Generated/FREERTOS/tasks.c **** /*
 459:../Dave/Generated/FREERTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:../Dave/Generated/FREERTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:../Dave/Generated/FREERTOS/tasks.c ****  * creation of the first user task.
 462:../Dave/Generated/FREERTOS/tasks.c ****  *
 463:../Dave/Generated/FREERTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:../Dave/Generated/FREERTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:../Dave/Generated/FREERTOS/tasks.c ****  *
 466:../Dave/Generated/FREERTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:../Dave/Generated/FREERTOS/tasks.c ****  *
 468:../Dave/Generated/FREERTOS/tasks.c ****  */
 469:../Dave/Generated/FREERTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:../Dave/Generated/FREERTOS/tasks.c **** 
 471:../Dave/Generated/FREERTOS/tasks.c **** /*
 472:../Dave/Generated/FREERTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:../Dave/Generated/FREERTOS/tasks.c ****  * including the stack pointed to by the TCB.
 474:../Dave/Generated/FREERTOS/tasks.c ****  *
 475:../Dave/Generated/FREERTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:../Dave/Generated/FREERTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:../Dave/Generated/FREERTOS/tasks.c ****  */
 478:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:../Dave/Generated/FREERTOS/tasks.c **** 
 480:../Dave/Generated/FREERTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:../Dave/Generated/FREERTOS/tasks.c **** 
 482:../Dave/Generated/FREERTOS/tasks.c **** #endif
 483:../Dave/Generated/FREERTOS/tasks.c **** 
 484:../Dave/Generated/FREERTOS/tasks.c **** /*
 485:../Dave/Generated/FREERTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:../Dave/Generated/FREERTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:../Dave/Generated/FREERTOS/tasks.c ****  * and its TCB deleted.
 488:../Dave/Generated/FREERTOS/tasks.c ****  */
 489:../Dave/Generated/FREERTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 490:../Dave/Generated/FREERTOS/tasks.c **** 
 491:../Dave/Generated/FREERTOS/tasks.c **** /*
 492:../Dave/Generated/FREERTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:../Dave/Generated/FREERTOS/tasks.c ****  * either the current or the overflow delayed task list.
 494:../Dave/Generated/FREERTOS/tasks.c ****  */
 495:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:../Dave/Generated/FREERTOS/tasks.c **** 
 497:../Dave/Generated/FREERTOS/tasks.c **** /*
 498:../Dave/Generated/FREERTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:../Dave/Generated/FREERTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:../Dave/Generated/FREERTOS/tasks.c ****  * a suspended list, etc.).
 501:../Dave/Generated/FREERTOS/tasks.c ****  *
 502:../Dave/Generated/FREERTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:../Dave/Generated/FREERTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 504:../Dave/Generated/FREERTOS/tasks.c ****  */
 505:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:../Dave/Generated/FREERTOS/tasks.c **** 
 507:../Dave/Generated/FREERTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:../Dave/Generated/FREERTOS/tasks.c **** 
 509:../Dave/Generated/FREERTOS/tasks.c **** #endif
 510:../Dave/Generated/FREERTOS/tasks.c **** 
 511:../Dave/Generated/FREERTOS/tasks.c **** /*
 512:../Dave/Generated/FREERTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:../Dave/Generated/FREERTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:../Dave/Generated/FREERTOS/tasks.c ****  */
 515:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:../Dave/Generated/FREERTOS/tasks.c **** 
 517:../Dave/Generated/FREERTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:../Dave/Generated/FREERTOS/tasks.c **** 
 519:../Dave/Generated/FREERTOS/tasks.c **** #endif
 520:../Dave/Generated/FREERTOS/tasks.c **** 
 521:../Dave/Generated/FREERTOS/tasks.c **** /*
 522:../Dave/Generated/FREERTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:../Dave/Generated/FREERTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:../Dave/Generated/FREERTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:../Dave/Generated/FREERTOS/tasks.c ****  */
 526:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:../Dave/Generated/FREERTOS/tasks.c **** 
 528:../Dave/Generated/FREERTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:../Dave/Generated/FREERTOS/tasks.c **** 
 530:../Dave/Generated/FREERTOS/tasks.c **** #endif
 531:../Dave/Generated/FREERTOS/tasks.c **** 
 532:../Dave/Generated/FREERTOS/tasks.c **** /*
 533:../Dave/Generated/FREERTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:../Dave/Generated/FREERTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:../Dave/Generated/FREERTOS/tasks.c ****  *
 536:../Dave/Generated/FREERTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:../Dave/Generated/FREERTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:../Dave/Generated/FREERTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:../Dave/Generated/FREERTOS/tasks.c ****  * set to a value other than 1.
 540:../Dave/Generated/FREERTOS/tasks.c ****  */
 541:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:../Dave/Generated/FREERTOS/tasks.c **** 
 543:../Dave/Generated/FREERTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 544:../Dave/Generated/FREERTOS/tasks.c **** 
 545:../Dave/Generated/FREERTOS/tasks.c **** #endif
 546:../Dave/Generated/FREERTOS/tasks.c **** 
 547:../Dave/Generated/FREERTOS/tasks.c **** /*
 548:../Dave/Generated/FREERTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:../Dave/Generated/FREERTOS/tasks.c ****  * will exit the Blocked state.
 550:../Dave/Generated/FREERTOS/tasks.c ****  */
 551:../Dave/Generated/FREERTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:../Dave/Generated/FREERTOS/tasks.c **** 
 553:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:../Dave/Generated/FREERTOS/tasks.c **** 
 555:../Dave/Generated/FREERTOS/tasks.c **** 	/*
 556:../Dave/Generated/FREERTOS/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:../Dave/Generated/FREERTOS/tasks.c **** 	 * human readable tables of task information.
 558:../Dave/Generated/FREERTOS/tasks.c **** 	 */
 559:../Dave/Generated/FREERTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:../Dave/Generated/FREERTOS/tasks.c **** 
 561:../Dave/Generated/FREERTOS/tasks.c **** #endif
 562:../Dave/Generated/FREERTOS/tasks.c **** 
 563:../Dave/Generated/FREERTOS/tasks.c **** /*
 564:../Dave/Generated/FREERTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:../Dave/Generated/FREERTOS/tasks.c ****  * dynamically to fill in the structure's members.
 566:../Dave/Generated/FREERTOS/tasks.c ****  */
 567:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:../Dave/Generated/FREERTOS/tasks.c **** 									const char * const pcName,
 569:../Dave/Generated/FREERTOS/tasks.c **** 									const uint32_t ulStackDepth,
 570:../Dave/Generated/FREERTOS/tasks.c **** 									void * const pvParameters,
 571:../Dave/Generated/FREERTOS/tasks.c **** 									UBaseType_t uxPriority,
 572:../Dave/Generated/FREERTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:../Dave/Generated/FREERTOS/tasks.c **** 									TCB_t *pxNewTCB,
 574:../Dave/Generated/FREERTOS/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:../Dave/Generated/FREERTOS/tasks.c **** 
 576:../Dave/Generated/FREERTOS/tasks.c **** /*
 577:../Dave/Generated/FREERTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:../Dave/Generated/FREERTOS/tasks.c ****  * under the control of the scheduler.
 579:../Dave/Generated/FREERTOS/tasks.c ****  */
 580:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:../Dave/Generated/FREERTOS/tasks.c **** 
 582:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 583:../Dave/Generated/FREERTOS/tasks.c **** 
 584:../Dave/Generated/FREERTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:../Dave/Generated/FREERTOS/tasks.c **** 
 586:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:../Dave/Generated/FREERTOS/tasks.c **** 									const char * const pcName,
 588:../Dave/Generated/FREERTOS/tasks.c **** 									const uint32_t ulStackDepth,
 589:../Dave/Generated/FREERTOS/tasks.c **** 									void * const pvParameters,
 590:../Dave/Generated/FREERTOS/tasks.c **** 									UBaseType_t uxPriority,
 591:../Dave/Generated/FREERTOS/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:../Dave/Generated/FREERTOS/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:../Dave/Generated/FREERTOS/tasks.c **** 	{
 594:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 595:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xReturn;
 596:../Dave/Generated/FREERTOS/tasks.c **** 
 597:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:../Dave/Generated/FREERTOS/tasks.c **** 
 600:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:../Dave/Generated/FREERTOS/tasks.c **** 		{
 602:../Dave/Generated/FREERTOS/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:../Dave/Generated/FREERTOS/tasks.c **** 			function - use them. */
 604:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:../Dave/Generated/FREERTOS/tasks.c **** 
 607:../Dave/Generated/FREERTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:../Dave/Generated/FREERTOS/tasks.c **** 			{
 609:../Dave/Generated/FREERTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:../Dave/Generated/FREERTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:../Dave/Generated/FREERTOS/tasks.c **** 			}
 613:../Dave/Generated/FREERTOS/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:../Dave/Generated/FREERTOS/tasks.c **** 
 615:../Dave/Generated/FREERTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:../Dave/Generated/FREERTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:../Dave/Generated/FREERTOS/tasks.c **** 		}
 618:../Dave/Generated/FREERTOS/tasks.c **** 		else
 619:../Dave/Generated/FREERTOS/tasks.c **** 		{
 620:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = NULL;
 621:../Dave/Generated/FREERTOS/tasks.c **** 		}
 622:../Dave/Generated/FREERTOS/tasks.c **** 
 623:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 624:../Dave/Generated/FREERTOS/tasks.c **** 	}
 625:../Dave/Generated/FREERTOS/tasks.c **** 
 626:../Dave/Generated/FREERTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 628:../Dave/Generated/FREERTOS/tasks.c **** 
 629:../Dave/Generated/FREERTOS/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:../Dave/Generated/FREERTOS/tasks.c **** 
 631:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:../Dave/Generated/FREERTOS/tasks.c **** 	{
 633:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 634:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:../Dave/Generated/FREERTOS/tasks.c **** 
 636:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:../Dave/Generated/FREERTOS/tasks.c **** 
 638:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:../Dave/Generated/FREERTOS/tasks.c **** 		{
 640:../Dave/Generated/FREERTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:../Dave/Generated/FREERTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:../Dave/Generated/FREERTOS/tasks.c **** 			not static allocation is being used. */
 643:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:../Dave/Generated/FREERTOS/tasks.c **** 
 645:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxNewTCB != NULL )
 646:../Dave/Generated/FREERTOS/tasks.c **** 			{
 647:../Dave/Generated/FREERTOS/tasks.c **** 				/* Store the stack location in the TCB. */
 648:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:../Dave/Generated/FREERTOS/tasks.c **** 
 650:../Dave/Generated/FREERTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:../Dave/Generated/FREERTOS/tasks.c **** 				this task had a statically allocated stack in case it is
 652:../Dave/Generated/FREERTOS/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:../Dave/Generated/FREERTOS/tasks.c **** 
 655:../Dave/Generated/FREERTOS/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->pcName,
 657:../Dave/Generated/FREERTOS/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:../Dave/Generated/FREERTOS/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:../Dave/Generated/FREERTOS/tasks.c **** 										pxTaskDefinition->xRegions );
 662:../Dave/Generated/FREERTOS/tasks.c **** 
 663:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdPASS;
 665:../Dave/Generated/FREERTOS/tasks.c **** 			}
 666:../Dave/Generated/FREERTOS/tasks.c **** 		}
 667:../Dave/Generated/FREERTOS/tasks.c **** 
 668:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 669:../Dave/Generated/FREERTOS/tasks.c **** 	}
 670:../Dave/Generated/FREERTOS/tasks.c **** 
 671:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 673:../Dave/Generated/FREERTOS/tasks.c **** 
 674:../Dave/Generated/FREERTOS/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:../Dave/Generated/FREERTOS/tasks.c **** 
 676:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:../Dave/Generated/FREERTOS/tasks.c **** 							const char * const pcName,
 678:../Dave/Generated/FREERTOS/tasks.c **** 							const uint16_t usStackDepth,
 679:../Dave/Generated/FREERTOS/tasks.c **** 							void * const pvParameters,
 680:../Dave/Generated/FREERTOS/tasks.c **** 							UBaseType_t uxPriority,
 681:../Dave/Generated/FREERTOS/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:../Dave/Generated/FREERTOS/tasks.c **** 	{
 683:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 684:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
 685:../Dave/Generated/FREERTOS/tasks.c **** 
 686:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:../Dave/Generated/FREERTOS/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:../Dave/Generated/FREERTOS/tasks.c **** 		the TCB then the stack. */
 689:../Dave/Generated/FREERTOS/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:../Dave/Generated/FREERTOS/tasks.c **** 		{
 691:../Dave/Generated/FREERTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:../Dave/Generated/FREERTOS/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:../Dave/Generated/FREERTOS/tasks.c **** 			allocation is being used. */
 694:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:../Dave/Generated/FREERTOS/tasks.c **** 
 696:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxNewTCB != NULL )
 697:../Dave/Generated/FREERTOS/tasks.c **** 			{
 698:../Dave/Generated/FREERTOS/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:../Dave/Generated/FREERTOS/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:../Dave/Generated/FREERTOS/tasks.c **** 				be deleted later if required. */
 701:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:../Dave/Generated/FREERTOS/tasks.c **** 
 703:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:../Dave/Generated/FREERTOS/tasks.c **** 				{
 705:../Dave/Generated/FREERTOS/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:../Dave/Generated/FREERTOS/tasks.c **** 					vPortFree( pxNewTCB );
 707:../Dave/Generated/FREERTOS/tasks.c **** 					pxNewTCB = NULL;
 708:../Dave/Generated/FREERTOS/tasks.c **** 				}
 709:../Dave/Generated/FREERTOS/tasks.c **** 			}
 710:../Dave/Generated/FREERTOS/tasks.c **** 		}
 711:../Dave/Generated/FREERTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:../Dave/Generated/FREERTOS/tasks.c **** 		{
 713:../Dave/Generated/FREERTOS/tasks.c **** 		StackType_t *pxStack;
 714:../Dave/Generated/FREERTOS/tasks.c **** 
 715:../Dave/Generated/FREERTOS/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:../Dave/Generated/FREERTOS/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 717:../Dave/Generated/FREERTOS/tasks.c **** 
 718:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxStack != NULL )
 719:../Dave/Generated/FREERTOS/tasks.c **** 			{
 720:../Dave/Generated/FREERTOS/tasks.c **** 				/* Allocate space for the TCB. */
 721:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:../Dave/Generated/FREERTOS/tasks.c **** 
 723:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxNewTCB != NULL )
 724:../Dave/Generated/FREERTOS/tasks.c **** 				{
 725:../Dave/Generated/FREERTOS/tasks.c **** 					/* Store the stack location in the TCB. */
 726:../Dave/Generated/FREERTOS/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:../Dave/Generated/FREERTOS/tasks.c **** 				}
 728:../Dave/Generated/FREERTOS/tasks.c **** 				else
 729:../Dave/Generated/FREERTOS/tasks.c **** 				{
 730:../Dave/Generated/FREERTOS/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:../Dave/Generated/FREERTOS/tasks.c **** 					it again. */
 732:../Dave/Generated/FREERTOS/tasks.c **** 					vPortFree( pxStack );
 733:../Dave/Generated/FREERTOS/tasks.c **** 				}
 734:../Dave/Generated/FREERTOS/tasks.c **** 			}
 735:../Dave/Generated/FREERTOS/tasks.c **** 			else
 736:../Dave/Generated/FREERTOS/tasks.c **** 			{
 737:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB = NULL;
 738:../Dave/Generated/FREERTOS/tasks.c **** 			}
 739:../Dave/Generated/FREERTOS/tasks.c **** 		}
 740:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:../Dave/Generated/FREERTOS/tasks.c **** 
 742:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxNewTCB != NULL )
 743:../Dave/Generated/FREERTOS/tasks.c **** 		{
 744:../Dave/Generated/FREERTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:../Dave/Generated/FREERTOS/tasks.c **** 			{
 746:../Dave/Generated/FREERTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:../Dave/Generated/FREERTOS/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:../Dave/Generated/FREERTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:../Dave/Generated/FREERTOS/tasks.c **** 			}
 750:../Dave/Generated/FREERTOS/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:../Dave/Generated/FREERTOS/tasks.c **** 
 752:../Dave/Generated/FREERTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:../Dave/Generated/FREERTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdPASS;
 755:../Dave/Generated/FREERTOS/tasks.c **** 		}
 756:../Dave/Generated/FREERTOS/tasks.c **** 		else
 757:../Dave/Generated/FREERTOS/tasks.c **** 		{
 758:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:../Dave/Generated/FREERTOS/tasks.c **** 		}
 760:../Dave/Generated/FREERTOS/tasks.c **** 
 761:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
 762:../Dave/Generated/FREERTOS/tasks.c **** 	}
 763:../Dave/Generated/FREERTOS/tasks.c **** 
 764:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 766:../Dave/Generated/FREERTOS/tasks.c **** 
 767:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:../Dave/Generated/FREERTOS/tasks.c **** 									const char * const pcName,
 769:../Dave/Generated/FREERTOS/tasks.c **** 									const uint32_t ulStackDepth,
 770:../Dave/Generated/FREERTOS/tasks.c **** 									void * const pvParameters,
 771:../Dave/Generated/FREERTOS/tasks.c **** 									UBaseType_t uxPriority,
 772:../Dave/Generated/FREERTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:../Dave/Generated/FREERTOS/tasks.c **** 									TCB_t *pxNewTCB,
 774:../Dave/Generated/FREERTOS/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:../Dave/Generated/FREERTOS/tasks.c **** {
 776:../Dave/Generated/FREERTOS/tasks.c **** StackType_t *pxTopOfStack;
 777:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t x;
 778:../Dave/Generated/FREERTOS/tasks.c **** 
 779:../Dave/Generated/FREERTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:../Dave/Generated/FREERTOS/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:../Dave/Generated/FREERTOS/tasks.c **** 		BaseType_t xRunPrivileged;
 782:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:../Dave/Generated/FREERTOS/tasks.c **** 		{
 784:../Dave/Generated/FREERTOS/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:../Dave/Generated/FREERTOS/tasks.c **** 		}
 786:../Dave/Generated/FREERTOS/tasks.c **** 		else
 787:../Dave/Generated/FREERTOS/tasks.c **** 		{
 788:../Dave/Generated/FREERTOS/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:../Dave/Generated/FREERTOS/tasks.c **** 		}
 790:../Dave/Generated/FREERTOS/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:../Dave/Generated/FREERTOS/tasks.c **** 
 793:../Dave/Generated/FREERTOS/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:../Dave/Generated/FREERTOS/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:../Dave/Generated/FREERTOS/tasks.c **** 	{
 796:../Dave/Generated/FREERTOS/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:../Dave/Generated/FREERTOS/tasks.c **** 	}
 799:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:../Dave/Generated/FREERTOS/tasks.c **** 
 801:../Dave/Generated/FREERTOS/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:../Dave/Generated/FREERTOS/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:../Dave/Generated/FREERTOS/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:../Dave/Generated/FREERTOS/tasks.c **** 	by the port. */
 805:../Dave/Generated/FREERTOS/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:../Dave/Generated/FREERTOS/tasks.c **** 	{
 807:../Dave/Generated/FREERTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:../Dave/Generated/FREERTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:../Dave/Generated/FREERTOS/tasks.c **** 
 810:../Dave/Generated/FREERTOS/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:../Dave/Generated/FREERTOS/tasks.c **** 	}
 813:../Dave/Generated/FREERTOS/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:../Dave/Generated/FREERTOS/tasks.c **** 	{
 815:../Dave/Generated/FREERTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:../Dave/Generated/FREERTOS/tasks.c **** 
 817:../Dave/Generated/FREERTOS/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:../Dave/Generated/FREERTOS/tasks.c **** 
 820:../Dave/Generated/FREERTOS/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:../Dave/Generated/FREERTOS/tasks.c **** 		performed. */
 822:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:../Dave/Generated/FREERTOS/tasks.c **** 	}
 824:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:../Dave/Generated/FREERTOS/tasks.c **** 
 826:../Dave/Generated/FREERTOS/tasks.c **** 	/* Store the task name in the TCB. */
 827:../Dave/Generated/FREERTOS/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:../Dave/Generated/FREERTOS/tasks.c **** 	{
 829:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 830:../Dave/Generated/FREERTOS/tasks.c **** 
 831:../Dave/Generated/FREERTOS/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:../Dave/Generated/FREERTOS/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:../Dave/Generated/FREERTOS/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:../Dave/Generated/FREERTOS/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:../Dave/Generated/FREERTOS/tasks.c **** 		{
 836:../Dave/Generated/FREERTOS/tasks.c **** 			break;
 837:../Dave/Generated/FREERTOS/tasks.c **** 		}
 838:../Dave/Generated/FREERTOS/tasks.c **** 		else
 839:../Dave/Generated/FREERTOS/tasks.c **** 		{
 840:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:../Dave/Generated/FREERTOS/tasks.c **** 		}
 842:../Dave/Generated/FREERTOS/tasks.c **** 	}
 843:../Dave/Generated/FREERTOS/tasks.c **** 
 844:../Dave/Generated/FREERTOS/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:../Dave/Generated/FREERTOS/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:../Dave/Generated/FREERTOS/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:../Dave/Generated/FREERTOS/tasks.c **** 
 848:../Dave/Generated/FREERTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:../Dave/Generated/FREERTOS/tasks.c **** 	remove the privilege bit if one is present. */
 850:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:../Dave/Generated/FREERTOS/tasks.c **** 	{
 852:../Dave/Generated/FREERTOS/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:../Dave/Generated/FREERTOS/tasks.c **** 	}
 854:../Dave/Generated/FREERTOS/tasks.c **** 	else
 855:../Dave/Generated/FREERTOS/tasks.c **** 	{
 856:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:../Dave/Generated/FREERTOS/tasks.c **** 	}
 858:../Dave/Generated/FREERTOS/tasks.c **** 
 859:../Dave/Generated/FREERTOS/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:../Dave/Generated/FREERTOS/tasks.c **** 	{
 862:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:../Dave/Generated/FREERTOS/tasks.c **** 	}
 865:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:../Dave/Generated/FREERTOS/tasks.c **** 
 867:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:../Dave/Generated/FREERTOS/tasks.c **** 
 870:../Dave/Generated/FREERTOS/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:../Dave/Generated/FREERTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:../Dave/Generated/FREERTOS/tasks.c **** 
 874:../Dave/Generated/FREERTOS/tasks.c **** 	/* Event lists are always in priority order. */
 875:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:../Dave/Generated/FREERTOS/tasks.c **** 
 878:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:../Dave/Generated/FREERTOS/tasks.c **** 	{
 880:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:../Dave/Generated/FREERTOS/tasks.c **** 	}
 882:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:../Dave/Generated/FREERTOS/tasks.c **** 
 884:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:../Dave/Generated/FREERTOS/tasks.c **** 	{
 886:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:../Dave/Generated/FREERTOS/tasks.c **** 	}
 888:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:../Dave/Generated/FREERTOS/tasks.c **** 
 890:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:../Dave/Generated/FREERTOS/tasks.c **** 	{
 892:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:../Dave/Generated/FREERTOS/tasks.c **** 	}
 894:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:../Dave/Generated/FREERTOS/tasks.c **** 
 896:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:../Dave/Generated/FREERTOS/tasks.c **** 	{
 898:../Dave/Generated/FREERTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:../Dave/Generated/FREERTOS/tasks.c **** 	}
 900:../Dave/Generated/FREERTOS/tasks.c **** 	#else
 901:../Dave/Generated/FREERTOS/tasks.c **** 	{
 902:../Dave/Generated/FREERTOS/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xRegions;
 904:../Dave/Generated/FREERTOS/tasks.c **** 	}
 905:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 906:../Dave/Generated/FREERTOS/tasks.c **** 
 907:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:../Dave/Generated/FREERTOS/tasks.c **** 	{
 909:../Dave/Generated/FREERTOS/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:../Dave/Generated/FREERTOS/tasks.c **** 		{
 911:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:../Dave/Generated/FREERTOS/tasks.c **** 		}
 913:../Dave/Generated/FREERTOS/tasks.c **** 	}
 914:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 915:../Dave/Generated/FREERTOS/tasks.c **** 
 916:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:../Dave/Generated/FREERTOS/tasks.c **** 	{
 918:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:../Dave/Generated/FREERTOS/tasks.c **** 	}
 921:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 922:../Dave/Generated/FREERTOS/tasks.c **** 
 923:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:../Dave/Generated/FREERTOS/tasks.c **** 	{
 925:../Dave/Generated/FREERTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:../Dave/Generated/FREERTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:../Dave/Generated/FREERTOS/tasks.c **** 	}
 928:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 929:../Dave/Generated/FREERTOS/tasks.c **** 
 930:../Dave/Generated/FREERTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:../Dave/Generated/FREERTOS/tasks.c **** 	{
 932:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:../Dave/Generated/FREERTOS/tasks.c **** 	}
 934:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
 935:../Dave/Generated/FREERTOS/tasks.c **** 
 936:../Dave/Generated/FREERTOS/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:../Dave/Generated/FREERTOS/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:../Dave/Generated/FREERTOS/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:../Dave/Generated/FREERTOS/tasks.c **** 	the	top of stack variable is updated. */
 940:../Dave/Generated/FREERTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:../Dave/Generated/FREERTOS/tasks.c **** 	{
 942:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:../Dave/Generated/FREERTOS/tasks.c **** 	}
 944:../Dave/Generated/FREERTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:../Dave/Generated/FREERTOS/tasks.c **** 	{
 946:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 947:../Dave/Generated/FREERTOS/tasks.c **** 	}
 948:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:../Dave/Generated/FREERTOS/tasks.c **** 
 950:../Dave/Generated/FREERTOS/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:../Dave/Generated/FREERTOS/tasks.c **** 	{
 952:../Dave/Generated/FREERTOS/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:../Dave/Generated/FREERTOS/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:../Dave/Generated/FREERTOS/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:../Dave/Generated/FREERTOS/tasks.c **** 	}
 956:../Dave/Generated/FREERTOS/tasks.c **** 	else
 957:../Dave/Generated/FREERTOS/tasks.c **** 	{
 958:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:../Dave/Generated/FREERTOS/tasks.c **** 	}
 960:../Dave/Generated/FREERTOS/tasks.c **** }
 961:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 962:../Dave/Generated/FREERTOS/tasks.c **** 
 963:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:../Dave/Generated/FREERTOS/tasks.c **** {
 965:../Dave/Generated/FREERTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:../Dave/Generated/FREERTOS/tasks.c **** 	updated. */
 967:../Dave/Generated/FREERTOS/tasks.c **** 	taskENTER_CRITICAL();
 968:../Dave/Generated/FREERTOS/tasks.c **** 	{
 969:../Dave/Generated/FREERTOS/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:../Dave/Generated/FREERTOS/tasks.c **** 		{
 972:../Dave/Generated/FREERTOS/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:../Dave/Generated/FREERTOS/tasks.c **** 			the suspended state - make this the current task. */
 974:../Dave/Generated/FREERTOS/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:../Dave/Generated/FREERTOS/tasks.c **** 
 976:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:../Dave/Generated/FREERTOS/tasks.c **** 			{
 978:../Dave/Generated/FREERTOS/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:../Dave/Generated/FREERTOS/tasks.c **** 				initialisation required.  We will not recover if this call
 980:../Dave/Generated/FREERTOS/tasks.c **** 				fails, but we will report the failure. */
 981:../Dave/Generated/FREERTOS/tasks.c **** 				prvInitialiseTaskLists();
 982:../Dave/Generated/FREERTOS/tasks.c **** 			}
 983:../Dave/Generated/FREERTOS/tasks.c **** 			else
 984:../Dave/Generated/FREERTOS/tasks.c **** 			{
 985:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:../Dave/Generated/FREERTOS/tasks.c **** 			}
 987:../Dave/Generated/FREERTOS/tasks.c **** 		}
 988:../Dave/Generated/FREERTOS/tasks.c **** 		else
 989:../Dave/Generated/FREERTOS/tasks.c **** 		{
 990:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:../Dave/Generated/FREERTOS/tasks.c **** 			current task if it is the highest priority task to be created
 992:../Dave/Generated/FREERTOS/tasks.c **** 			so far. */
 993:../Dave/Generated/FREERTOS/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:../Dave/Generated/FREERTOS/tasks.c **** 			{
 995:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:../Dave/Generated/FREERTOS/tasks.c **** 				{
 997:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:../Dave/Generated/FREERTOS/tasks.c **** 				}
 999:../Dave/Generated/FREERTOS/tasks.c **** 				else
1000:../Dave/Generated/FREERTOS/tasks.c **** 				{
1001:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:../Dave/Generated/FREERTOS/tasks.c **** 				}
1003:../Dave/Generated/FREERTOS/tasks.c **** 			}
1004:../Dave/Generated/FREERTOS/tasks.c **** 			else
1005:../Dave/Generated/FREERTOS/tasks.c **** 			{
1006:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:../Dave/Generated/FREERTOS/tasks.c **** 			}
1008:../Dave/Generated/FREERTOS/tasks.c **** 		}
1009:../Dave/Generated/FREERTOS/tasks.c **** 
1010:../Dave/Generated/FREERTOS/tasks.c **** 		uxTaskNumber++;
1011:../Dave/Generated/FREERTOS/tasks.c **** 
1012:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:../Dave/Generated/FREERTOS/tasks.c **** 		{
1014:../Dave/Generated/FREERTOS/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:../Dave/Generated/FREERTOS/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:../Dave/Generated/FREERTOS/tasks.c **** 		}
1017:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:../Dave/Generated/FREERTOS/tasks.c **** 
1020:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:../Dave/Generated/FREERTOS/tasks.c **** 
1022:../Dave/Generated/FREERTOS/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:../Dave/Generated/FREERTOS/tasks.c **** 	}
1024:../Dave/Generated/FREERTOS/tasks.c **** 	taskEXIT_CRITICAL();
1025:../Dave/Generated/FREERTOS/tasks.c **** 
1026:../Dave/Generated/FREERTOS/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:../Dave/Generated/FREERTOS/tasks.c **** 	{
1028:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:../Dave/Generated/FREERTOS/tasks.c **** 		then it should run now. */
1030:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:../Dave/Generated/FREERTOS/tasks.c **** 		{
1032:../Dave/Generated/FREERTOS/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:../Dave/Generated/FREERTOS/tasks.c **** 		}
1034:../Dave/Generated/FREERTOS/tasks.c **** 		else
1035:../Dave/Generated/FREERTOS/tasks.c **** 		{
1036:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:../Dave/Generated/FREERTOS/tasks.c **** 		}
1038:../Dave/Generated/FREERTOS/tasks.c **** 	}
1039:../Dave/Generated/FREERTOS/tasks.c **** 	else
1040:../Dave/Generated/FREERTOS/tasks.c **** 	{
1041:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:../Dave/Generated/FREERTOS/tasks.c **** 	}
1043:../Dave/Generated/FREERTOS/tasks.c **** }
1044:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1045:../Dave/Generated/FREERTOS/tasks.c **** 
1046:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:../Dave/Generated/FREERTOS/tasks.c **** 
1048:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:../Dave/Generated/FREERTOS/tasks.c **** 	{
1050:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1051:../Dave/Generated/FREERTOS/tasks.c **** 
1052:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
1053:../Dave/Generated/FREERTOS/tasks.c **** 		{
1054:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:../Dave/Generated/FREERTOS/tasks.c **** 			being deleted. */
1056:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1057:../Dave/Generated/FREERTOS/tasks.c **** 
1058:../Dave/Generated/FREERTOS/tasks.c **** 			/* Remove task from the ready list. */
1059:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1060:../Dave/Generated/FREERTOS/tasks.c **** 			{
1061:../Dave/Generated/FREERTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:../Dave/Generated/FREERTOS/tasks.c **** 			}
1063:../Dave/Generated/FREERTOS/tasks.c **** 			else
1064:../Dave/Generated/FREERTOS/tasks.c **** 			{
1065:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:../Dave/Generated/FREERTOS/tasks.c **** 			}
1067:../Dave/Generated/FREERTOS/tasks.c **** 
1068:../Dave/Generated/FREERTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1069:../Dave/Generated/FREERTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:../Dave/Generated/FREERTOS/tasks.c **** 			{
1071:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:../Dave/Generated/FREERTOS/tasks.c **** 			}
1073:../Dave/Generated/FREERTOS/tasks.c **** 			else
1074:../Dave/Generated/FREERTOS/tasks.c **** 			{
1075:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:../Dave/Generated/FREERTOS/tasks.c **** 			}
1077:../Dave/Generated/FREERTOS/tasks.c **** 
1078:../Dave/Generated/FREERTOS/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:../Dave/Generated/FREERTOS/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:../Dave/Generated/FREERTOS/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:../Dave/Generated/FREERTOS/tasks.c **** 			not return. */
1082:../Dave/Generated/FREERTOS/tasks.c **** 			uxTaskNumber++;
1083:../Dave/Generated/FREERTOS/tasks.c **** 
1084:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:../Dave/Generated/FREERTOS/tasks.c **** 			{
1086:../Dave/Generated/FREERTOS/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:../Dave/Generated/FREERTOS/tasks.c **** 				task itself, as a context switch to another task is required.
1088:../Dave/Generated/FREERTOS/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:../Dave/Generated/FREERTOS/tasks.c **** 				check the termination list and free up any memory allocated by
1090:../Dave/Generated/FREERTOS/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:../Dave/Generated/FREERTOS/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:../Dave/Generated/FREERTOS/tasks.c **** 
1093:../Dave/Generated/FREERTOS/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:../Dave/Generated/FREERTOS/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:../Dave/Generated/FREERTOS/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:../Dave/Generated/FREERTOS/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:../Dave/Generated/FREERTOS/tasks.c **** 
1098:../Dave/Generated/FREERTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:../Dave/Generated/FREERTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:../Dave/Generated/FREERTOS/tasks.c **** 				after which it is not possible to yield away from this task -
1101:../Dave/Generated/FREERTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:../Dave/Generated/FREERTOS/tasks.c **** 				required. */
1103:../Dave/Generated/FREERTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:../Dave/Generated/FREERTOS/tasks.c **** 			}
1105:../Dave/Generated/FREERTOS/tasks.c **** 			else
1106:../Dave/Generated/FREERTOS/tasks.c **** 			{
1107:../Dave/Generated/FREERTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:../Dave/Generated/FREERTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:../Dave/Generated/FREERTOS/tasks.c **** 
1110:../Dave/Generated/FREERTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:../Dave/Generated/FREERTOS/tasks.c **** 				the task that has just been deleted. */
1112:../Dave/Generated/FREERTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:../Dave/Generated/FREERTOS/tasks.c **** 			}
1114:../Dave/Generated/FREERTOS/tasks.c **** 
1115:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:../Dave/Generated/FREERTOS/tasks.c **** 		}
1117:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
1118:../Dave/Generated/FREERTOS/tasks.c **** 
1119:../Dave/Generated/FREERTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:../Dave/Generated/FREERTOS/tasks.c **** 		been deleted. */
1121:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:../Dave/Generated/FREERTOS/tasks.c **** 		{
1123:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:../Dave/Generated/FREERTOS/tasks.c **** 			{
1125:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:../Dave/Generated/FREERTOS/tasks.c **** 				portYIELD_WITHIN_API();
1127:../Dave/Generated/FREERTOS/tasks.c **** 			}
1128:../Dave/Generated/FREERTOS/tasks.c **** 			else
1129:../Dave/Generated/FREERTOS/tasks.c **** 			{
1130:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:../Dave/Generated/FREERTOS/tasks.c **** 			}
1132:../Dave/Generated/FREERTOS/tasks.c **** 		}
1133:../Dave/Generated/FREERTOS/tasks.c **** 	}
1134:../Dave/Generated/FREERTOS/tasks.c **** 
1135:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1137:../Dave/Generated/FREERTOS/tasks.c **** 
1138:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:../Dave/Generated/FREERTOS/tasks.c **** 
1140:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:../Dave/Generated/FREERTOS/tasks.c **** 	{
1142:../Dave/Generated/FREERTOS/tasks.c **** 	TickType_t xTimeToWake;
1143:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:../Dave/Generated/FREERTOS/tasks.c **** 
1145:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:../Dave/Generated/FREERTOS/tasks.c **** 
1149:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
1150:../Dave/Generated/FREERTOS/tasks.c **** 		{
1151:../Dave/Generated/FREERTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:../Dave/Generated/FREERTOS/tasks.c **** 			block. */
1153:../Dave/Generated/FREERTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:../Dave/Generated/FREERTOS/tasks.c **** 
1155:../Dave/Generated/FREERTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:../Dave/Generated/FREERTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:../Dave/Generated/FREERTOS/tasks.c **** 
1158:../Dave/Generated/FREERTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:../Dave/Generated/FREERTOS/tasks.c **** 			{
1160:../Dave/Generated/FREERTOS/tasks.c **** 				/* The tick count has overflowed since this function was
1161:../Dave/Generated/FREERTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:../Dave/Generated/FREERTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:../Dave/Generated/FREERTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:../Dave/Generated/FREERTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:../Dave/Generated/FREERTOS/tasks.c **** 				{
1167:../Dave/Generated/FREERTOS/tasks.c **** 					xShouldDelay = pdTRUE;
1168:../Dave/Generated/FREERTOS/tasks.c **** 				}
1169:../Dave/Generated/FREERTOS/tasks.c **** 				else
1170:../Dave/Generated/FREERTOS/tasks.c **** 				{
1171:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:../Dave/Generated/FREERTOS/tasks.c **** 				}
1173:../Dave/Generated/FREERTOS/tasks.c **** 			}
1174:../Dave/Generated/FREERTOS/tasks.c **** 			else
1175:../Dave/Generated/FREERTOS/tasks.c **** 			{
1176:../Dave/Generated/FREERTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:../Dave/Generated/FREERTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:../Dave/Generated/FREERTOS/tasks.c **** 				tick time is less than the wake time. */
1179:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:../Dave/Generated/FREERTOS/tasks.c **** 				{
1181:../Dave/Generated/FREERTOS/tasks.c **** 					xShouldDelay = pdTRUE;
1182:../Dave/Generated/FREERTOS/tasks.c **** 				}
1183:../Dave/Generated/FREERTOS/tasks.c **** 				else
1184:../Dave/Generated/FREERTOS/tasks.c **** 				{
1185:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:../Dave/Generated/FREERTOS/tasks.c **** 				}
1187:../Dave/Generated/FREERTOS/tasks.c **** 			}
1188:../Dave/Generated/FREERTOS/tasks.c **** 
1189:../Dave/Generated/FREERTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:../Dave/Generated/FREERTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:../Dave/Generated/FREERTOS/tasks.c **** 
1192:../Dave/Generated/FREERTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:../Dave/Generated/FREERTOS/tasks.c **** 			{
1194:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:../Dave/Generated/FREERTOS/tasks.c **** 
1196:../Dave/Generated/FREERTOS/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:../Dave/Generated/FREERTOS/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:../Dave/Generated/FREERTOS/tasks.c **** 			}
1200:../Dave/Generated/FREERTOS/tasks.c **** 			else
1201:../Dave/Generated/FREERTOS/tasks.c **** 			{
1202:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:../Dave/Generated/FREERTOS/tasks.c **** 			}
1204:../Dave/Generated/FREERTOS/tasks.c **** 		}
1205:../Dave/Generated/FREERTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:../Dave/Generated/FREERTOS/tasks.c **** 
1207:../Dave/Generated/FREERTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:../Dave/Generated/FREERTOS/tasks.c **** 		have put ourselves to sleep. */
1209:../Dave/Generated/FREERTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:../Dave/Generated/FREERTOS/tasks.c **** 		{
1211:../Dave/Generated/FREERTOS/tasks.c **** 			portYIELD_WITHIN_API();
1212:../Dave/Generated/FREERTOS/tasks.c **** 		}
1213:../Dave/Generated/FREERTOS/tasks.c **** 		else
1214:../Dave/Generated/FREERTOS/tasks.c **** 		{
1215:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:../Dave/Generated/FREERTOS/tasks.c **** 		}
1217:../Dave/Generated/FREERTOS/tasks.c **** 	}
1218:../Dave/Generated/FREERTOS/tasks.c **** 
1219:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1221:../Dave/Generated/FREERTOS/tasks.c **** 
1222:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:../Dave/Generated/FREERTOS/tasks.c **** 
1224:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:../Dave/Generated/FREERTOS/tasks.c **** 	{
1226:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:../Dave/Generated/FREERTOS/tasks.c **** 
1228:../Dave/Generated/FREERTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1230:../Dave/Generated/FREERTOS/tasks.c **** 		{
1231:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1232:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSuspendAll();
1233:../Dave/Generated/FREERTOS/tasks.c **** 			{
1234:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_DELAY();
1235:../Dave/Generated/FREERTOS/tasks.c **** 
1236:../Dave/Generated/FREERTOS/tasks.c **** 				/* A task that is removed from the event list while the
1237:../Dave/Generated/FREERTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:../Dave/Generated/FREERTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:../Dave/Generated/FREERTOS/tasks.c **** 				is resumed.
1240:../Dave/Generated/FREERTOS/tasks.c **** 
1241:../Dave/Generated/FREERTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:../Dave/Generated/FREERTOS/tasks.c **** 				executing task. */
1243:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:../Dave/Generated/FREERTOS/tasks.c **** 			}
1245:../Dave/Generated/FREERTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:../Dave/Generated/FREERTOS/tasks.c **** 		}
1247:../Dave/Generated/FREERTOS/tasks.c **** 		else
1248:../Dave/Generated/FREERTOS/tasks.c **** 		{
1249:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:../Dave/Generated/FREERTOS/tasks.c **** 		}
1251:../Dave/Generated/FREERTOS/tasks.c **** 
1252:../Dave/Generated/FREERTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:../Dave/Generated/FREERTOS/tasks.c **** 		have put ourselves to sleep. */
1254:../Dave/Generated/FREERTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:../Dave/Generated/FREERTOS/tasks.c **** 		{
1256:../Dave/Generated/FREERTOS/tasks.c **** 			portYIELD_WITHIN_API();
1257:../Dave/Generated/FREERTOS/tasks.c **** 		}
1258:../Dave/Generated/FREERTOS/tasks.c **** 		else
1259:../Dave/Generated/FREERTOS/tasks.c **** 		{
1260:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:../Dave/Generated/FREERTOS/tasks.c **** 		}
1262:../Dave/Generated/FREERTOS/tasks.c **** 	}
1263:../Dave/Generated/FREERTOS/tasks.c **** 
1264:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1266:../Dave/Generated/FREERTOS/tasks.c **** 
1267:../Dave/Generated/FREERTOS/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:../Dave/Generated/FREERTOS/tasks.c **** 
1269:../Dave/Generated/FREERTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:../Dave/Generated/FREERTOS/tasks.c **** 	{
1271:../Dave/Generated/FREERTOS/tasks.c **** 	eTaskState eReturn;
1272:../Dave/Generated/FREERTOS/tasks.c **** 	List_t *pxStateList;
1273:../Dave/Generated/FREERTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:../Dave/Generated/FREERTOS/tasks.c **** 
1275:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTCB );
1276:../Dave/Generated/FREERTOS/tasks.c **** 
1277:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:../Dave/Generated/FREERTOS/tasks.c **** 		{
1279:../Dave/Generated/FREERTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:../Dave/Generated/FREERTOS/tasks.c **** 			eReturn = eRunning;
1281:../Dave/Generated/FREERTOS/tasks.c **** 		}
1282:../Dave/Generated/FREERTOS/tasks.c **** 		else
1283:../Dave/Generated/FREERTOS/tasks.c **** 		{
1284:../Dave/Generated/FREERTOS/tasks.c **** 			taskENTER_CRITICAL();
1285:../Dave/Generated/FREERTOS/tasks.c **** 			{
1286:../Dave/Generated/FREERTOS/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1287:../Dave/Generated/FREERTOS/tasks.c **** 			}
1288:../Dave/Generated/FREERTOS/tasks.c **** 			taskEXIT_CRITICAL();
1289:../Dave/Generated/FREERTOS/tasks.c **** 
1290:../Dave/Generated/FREERTOS/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:../Dave/Generated/FREERTOS/tasks.c **** 			{
1292:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:../Dave/Generated/FREERTOS/tasks.c **** 				lists. */
1294:../Dave/Generated/FREERTOS/tasks.c **** 				eReturn = eBlocked;
1295:../Dave/Generated/FREERTOS/tasks.c **** 			}
1296:../Dave/Generated/FREERTOS/tasks.c **** 
1297:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:../Dave/Generated/FREERTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:../Dave/Generated/FREERTOS/tasks.c **** 				{
1300:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:../Dave/Generated/FREERTOS/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:../Dave/Generated/FREERTOS/tasks.c **** 					indefinitely? */
1303:../Dave/Generated/FREERTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:../Dave/Generated/FREERTOS/tasks.c **** 					{
1305:../Dave/Generated/FREERTOS/tasks.c **** 						eReturn = eSuspended;
1306:../Dave/Generated/FREERTOS/tasks.c **** 					}
1307:../Dave/Generated/FREERTOS/tasks.c **** 					else
1308:../Dave/Generated/FREERTOS/tasks.c **** 					{
1309:../Dave/Generated/FREERTOS/tasks.c **** 						eReturn = eBlocked;
1310:../Dave/Generated/FREERTOS/tasks.c **** 					}
1311:../Dave/Generated/FREERTOS/tasks.c **** 				}
1312:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
1313:../Dave/Generated/FREERTOS/tasks.c **** 
1314:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:../Dave/Generated/FREERTOS/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:../Dave/Generated/FREERTOS/tasks.c **** 				{
1317:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:../Dave/Generated/FREERTOS/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:../Dave/Generated/FREERTOS/tasks.c **** 					all. */
1320:../Dave/Generated/FREERTOS/tasks.c **** 					eReturn = eDeleted;
1321:../Dave/Generated/FREERTOS/tasks.c **** 				}
1322:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
1323:../Dave/Generated/FREERTOS/tasks.c **** 
1324:../Dave/Generated/FREERTOS/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:../Dave/Generated/FREERTOS/tasks.c **** 			{
1326:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:../Dave/Generated/FREERTOS/tasks.c **** 				Ready (including pending ready) state. */
1328:../Dave/Generated/FREERTOS/tasks.c **** 				eReturn = eReady;
1329:../Dave/Generated/FREERTOS/tasks.c **** 			}
1330:../Dave/Generated/FREERTOS/tasks.c **** 		}
1331:../Dave/Generated/FREERTOS/tasks.c **** 
1332:../Dave/Generated/FREERTOS/tasks.c **** 		return eReturn;
1333:../Dave/Generated/FREERTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:../Dave/Generated/FREERTOS/tasks.c **** 
1335:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1337:../Dave/Generated/FREERTOS/tasks.c **** 
1338:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:../Dave/Generated/FREERTOS/tasks.c **** 
1340:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:../Dave/Generated/FREERTOS/tasks.c **** 	{
1342:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1343:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn;
1344:../Dave/Generated/FREERTOS/tasks.c **** 
1345:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
1346:../Dave/Generated/FREERTOS/tasks.c **** 		{
1347:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:../Dave/Generated/FREERTOS/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:../Dave/Generated/FREERTOS/tasks.c **** 		}
1352:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
1353:../Dave/Generated/FREERTOS/tasks.c **** 
1354:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
1355:../Dave/Generated/FREERTOS/tasks.c **** 	}
1356:../Dave/Generated/FREERTOS/tasks.c **** 
1357:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1359:../Dave/Generated/FREERTOS/tasks.c **** 
1360:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:../Dave/Generated/FREERTOS/tasks.c **** 
1362:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:../Dave/Generated/FREERTOS/tasks.c **** 	{
1364:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1365:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:../Dave/Generated/FREERTOS/tasks.c **** 
1367:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
1382:../Dave/Generated/FREERTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:../Dave/Generated/FREERTOS/tasks.c **** 
1385:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:../Dave/Generated/FREERTOS/tasks.c **** 		{
1387:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:../Dave/Generated/FREERTOS/tasks.c **** 			task that is being queried. */
1389:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:../Dave/Generated/FREERTOS/tasks.c **** 		}
1392:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:../Dave/Generated/FREERTOS/tasks.c **** 
1394:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
1395:../Dave/Generated/FREERTOS/tasks.c **** 	}
1396:../Dave/Generated/FREERTOS/tasks.c **** 
1397:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1399:../Dave/Generated/FREERTOS/tasks.c **** 
1400:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:../Dave/Generated/FREERTOS/tasks.c **** 
1402:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:../Dave/Generated/FREERTOS/tasks.c **** 	{
1404:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1405:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:../Dave/Generated/FREERTOS/tasks.c **** 
1408:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:../Dave/Generated/FREERTOS/tasks.c **** 
1410:../Dave/Generated/FREERTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1411:../Dave/Generated/FREERTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:../Dave/Generated/FREERTOS/tasks.c **** 		{
1413:../Dave/Generated/FREERTOS/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:../Dave/Generated/FREERTOS/tasks.c **** 		}
1415:../Dave/Generated/FREERTOS/tasks.c **** 		else
1416:../Dave/Generated/FREERTOS/tasks.c **** 		{
1417:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:../Dave/Generated/FREERTOS/tasks.c **** 		}
1419:../Dave/Generated/FREERTOS/tasks.c **** 
1420:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
1421:../Dave/Generated/FREERTOS/tasks.c **** 		{
1422:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:../Dave/Generated/FREERTOS/tasks.c **** 			task that is being changed. */
1424:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:../Dave/Generated/FREERTOS/tasks.c **** 
1426:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:../Dave/Generated/FREERTOS/tasks.c **** 
1428:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:../Dave/Generated/FREERTOS/tasks.c **** 			{
1430:../Dave/Generated/FREERTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:../Dave/Generated/FREERTOS/tasks.c **** 			}
1432:../Dave/Generated/FREERTOS/tasks.c **** 			#else
1433:../Dave/Generated/FREERTOS/tasks.c **** 			{
1434:../Dave/Generated/FREERTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:../Dave/Generated/FREERTOS/tasks.c **** 			}
1436:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
1437:../Dave/Generated/FREERTOS/tasks.c **** 
1438:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:../Dave/Generated/FREERTOS/tasks.c **** 			{
1440:../Dave/Generated/FREERTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1441:../Dave/Generated/FREERTOS/tasks.c **** 				priority than the calling task. */
1442:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:../Dave/Generated/FREERTOS/tasks.c **** 				{
1444:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:../Dave/Generated/FREERTOS/tasks.c **** 					{
1446:../Dave/Generated/FREERTOS/tasks.c **** 						/* The priority of a task other than the currently
1447:../Dave/Generated/FREERTOS/tasks.c **** 						running task is being raised.  Is the priority being
1448:../Dave/Generated/FREERTOS/tasks.c **** 						raised above that of the running task? */
1449:../Dave/Generated/FREERTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:../Dave/Generated/FREERTOS/tasks.c **** 						{
1451:../Dave/Generated/FREERTOS/tasks.c **** 							xYieldRequired = pdTRUE;
1452:../Dave/Generated/FREERTOS/tasks.c **** 						}
1453:../Dave/Generated/FREERTOS/tasks.c **** 						else
1454:../Dave/Generated/FREERTOS/tasks.c **** 						{
1455:../Dave/Generated/FREERTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:../Dave/Generated/FREERTOS/tasks.c **** 						}
1457:../Dave/Generated/FREERTOS/tasks.c **** 					}
1458:../Dave/Generated/FREERTOS/tasks.c **** 					else
1459:../Dave/Generated/FREERTOS/tasks.c **** 					{
1460:../Dave/Generated/FREERTOS/tasks.c **** 						/* The priority of the running task is being raised,
1461:../Dave/Generated/FREERTOS/tasks.c **** 						but the running task must already be the highest
1462:../Dave/Generated/FREERTOS/tasks.c **** 						priority task able to run so no yield is required. */
1463:../Dave/Generated/FREERTOS/tasks.c **** 					}
1464:../Dave/Generated/FREERTOS/tasks.c **** 				}
1465:../Dave/Generated/FREERTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:../Dave/Generated/FREERTOS/tasks.c **** 				{
1467:../Dave/Generated/FREERTOS/tasks.c **** 					/* Setting the priority of the running task down means
1468:../Dave/Generated/FREERTOS/tasks.c **** 					there may now be another task of higher priority that
1469:../Dave/Generated/FREERTOS/tasks.c **** 					is ready to execute. */
1470:../Dave/Generated/FREERTOS/tasks.c **** 					xYieldRequired = pdTRUE;
1471:../Dave/Generated/FREERTOS/tasks.c **** 				}
1472:../Dave/Generated/FREERTOS/tasks.c **** 				else
1473:../Dave/Generated/FREERTOS/tasks.c **** 				{
1474:../Dave/Generated/FREERTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1475:../Dave/Generated/FREERTOS/tasks.c **** 					require a yield as the running task must be above the
1476:../Dave/Generated/FREERTOS/tasks.c **** 					new priority of the task being modified. */
1477:../Dave/Generated/FREERTOS/tasks.c **** 				}
1478:../Dave/Generated/FREERTOS/tasks.c **** 
1479:../Dave/Generated/FREERTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:../Dave/Generated/FREERTOS/tasks.c **** 				before its uxPriority member is changed so the
1481:../Dave/Generated/FREERTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:../Dave/Generated/FREERTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:../Dave/Generated/FREERTOS/tasks.c **** 
1484:../Dave/Generated/FREERTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:../Dave/Generated/FREERTOS/tasks.c **** 				{
1486:../Dave/Generated/FREERTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1487:../Dave/Generated/FREERTOS/tasks.c **** 					currently using an inherited priority. */
1488:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:../Dave/Generated/FREERTOS/tasks.c **** 					{
1490:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:../Dave/Generated/FREERTOS/tasks.c **** 					}
1492:../Dave/Generated/FREERTOS/tasks.c **** 					else
1493:../Dave/Generated/FREERTOS/tasks.c **** 					{
1494:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:../Dave/Generated/FREERTOS/tasks.c **** 					}
1496:../Dave/Generated/FREERTOS/tasks.c **** 
1497:../Dave/Generated/FREERTOS/tasks.c **** 					/* The base priority gets set whatever. */
1498:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:../Dave/Generated/FREERTOS/tasks.c **** 				}
1500:../Dave/Generated/FREERTOS/tasks.c **** 				#else
1501:../Dave/Generated/FREERTOS/tasks.c **** 				{
1502:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:../Dave/Generated/FREERTOS/tasks.c **** 				}
1504:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
1505:../Dave/Generated/FREERTOS/tasks.c **** 
1506:../Dave/Generated/FREERTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:../Dave/Generated/FREERTOS/tasks.c **** 				being used for anything else. */
1508:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:../Dave/Generated/FREERTOS/tasks.c **** 				{
1510:../Dave/Generated/FREERTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:../Dave/Generated/FREERTOS/tasks.c **** 				}
1512:../Dave/Generated/FREERTOS/tasks.c **** 				else
1513:../Dave/Generated/FREERTOS/tasks.c **** 				{
1514:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:../Dave/Generated/FREERTOS/tasks.c **** 				}
1516:../Dave/Generated/FREERTOS/tasks.c **** 
1517:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:../Dave/Generated/FREERTOS/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:../Dave/Generated/FREERTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:../Dave/Generated/FREERTOS/tasks.c **** 				in the list appropriate to its new priority. */
1521:../Dave/Generated/FREERTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:../Dave/Generated/FREERTOS/tasks.c **** 				{
1523:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:../Dave/Generated/FREERTOS/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:../Dave/Generated/FREERTOS/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:../Dave/Generated/FREERTOS/tasks.c **** 					{
1528:../Dave/Generated/FREERTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1529:../Dave/Generated/FREERTOS/tasks.c **** 						there is no need to check again and the port level
1530:../Dave/Generated/FREERTOS/tasks.c **** 						reset macro can be called directly. */
1531:../Dave/Generated/FREERTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:../Dave/Generated/FREERTOS/tasks.c **** 					}
1533:../Dave/Generated/FREERTOS/tasks.c **** 					else
1534:../Dave/Generated/FREERTOS/tasks.c **** 					{
1535:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:../Dave/Generated/FREERTOS/tasks.c **** 					}
1537:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:../Dave/Generated/FREERTOS/tasks.c **** 				}
1539:../Dave/Generated/FREERTOS/tasks.c **** 				else
1540:../Dave/Generated/FREERTOS/tasks.c **** 				{
1541:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:../Dave/Generated/FREERTOS/tasks.c **** 				}
1543:../Dave/Generated/FREERTOS/tasks.c **** 
1544:../Dave/Generated/FREERTOS/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:../Dave/Generated/FREERTOS/tasks.c **** 				{
1546:../Dave/Generated/FREERTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:../Dave/Generated/FREERTOS/tasks.c **** 				}
1548:../Dave/Generated/FREERTOS/tasks.c **** 				else
1549:../Dave/Generated/FREERTOS/tasks.c **** 				{
1550:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:../Dave/Generated/FREERTOS/tasks.c **** 				}
1552:../Dave/Generated/FREERTOS/tasks.c **** 
1553:../Dave/Generated/FREERTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:../Dave/Generated/FREERTOS/tasks.c **** 				optimised task selection is not being used. */
1555:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:../Dave/Generated/FREERTOS/tasks.c **** 			}
1557:../Dave/Generated/FREERTOS/tasks.c **** 		}
1558:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
1559:../Dave/Generated/FREERTOS/tasks.c **** 	}
1560:../Dave/Generated/FREERTOS/tasks.c **** 
1561:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1563:../Dave/Generated/FREERTOS/tasks.c **** 
1564:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:../Dave/Generated/FREERTOS/tasks.c **** 
1566:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:../Dave/Generated/FREERTOS/tasks.c **** 	{
1568:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
1569:../Dave/Generated/FREERTOS/tasks.c **** 
1570:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
1571:../Dave/Generated/FREERTOS/tasks.c **** 		{
1572:../Dave/Generated/FREERTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:../Dave/Generated/FREERTOS/tasks.c **** 			being suspended. */
1574:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1575:../Dave/Generated/FREERTOS/tasks.c **** 
1576:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:../Dave/Generated/FREERTOS/tasks.c **** 
1578:../Dave/Generated/FREERTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:../Dave/Generated/FREERTOS/tasks.c **** 			suspended list. */
1580:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:../Dave/Generated/FREERTOS/tasks.c **** 			{
1582:../Dave/Generated/FREERTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:../Dave/Generated/FREERTOS/tasks.c **** 			}
1584:../Dave/Generated/FREERTOS/tasks.c **** 			else
1585:../Dave/Generated/FREERTOS/tasks.c **** 			{
1586:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:../Dave/Generated/FREERTOS/tasks.c **** 			}
1588:../Dave/Generated/FREERTOS/tasks.c **** 
1589:../Dave/Generated/FREERTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1590:../Dave/Generated/FREERTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:../Dave/Generated/FREERTOS/tasks.c **** 			{
1592:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:../Dave/Generated/FREERTOS/tasks.c **** 			}
1594:../Dave/Generated/FREERTOS/tasks.c **** 			else
1595:../Dave/Generated/FREERTOS/tasks.c **** 			{
1596:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:../Dave/Generated/FREERTOS/tasks.c **** 			}
1598:../Dave/Generated/FREERTOS/tasks.c **** 
1599:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:../Dave/Generated/FREERTOS/tasks.c **** 		}
1601:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
1602:../Dave/Generated/FREERTOS/tasks.c **** 
1603:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:../Dave/Generated/FREERTOS/tasks.c **** 		{
1605:../Dave/Generated/FREERTOS/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:../Dave/Generated/FREERTOS/tasks.c **** 			task that is now in the Suspended state. */
1607:../Dave/Generated/FREERTOS/tasks.c **** 			taskENTER_CRITICAL();
1608:../Dave/Generated/FREERTOS/tasks.c **** 			{
1609:../Dave/Generated/FREERTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:../Dave/Generated/FREERTOS/tasks.c **** 			}
1611:../Dave/Generated/FREERTOS/tasks.c **** 			taskEXIT_CRITICAL();
1612:../Dave/Generated/FREERTOS/tasks.c **** 		}
1613:../Dave/Generated/FREERTOS/tasks.c **** 		else
1614:../Dave/Generated/FREERTOS/tasks.c **** 		{
1615:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:../Dave/Generated/FREERTOS/tasks.c **** 		}
1617:../Dave/Generated/FREERTOS/tasks.c **** 
1618:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:../Dave/Generated/FREERTOS/tasks.c **** 		{
1620:../Dave/Generated/FREERTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:../Dave/Generated/FREERTOS/tasks.c **** 			{
1622:../Dave/Generated/FREERTOS/tasks.c **** 				/* The current task has just been suspended. */
1623:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:../Dave/Generated/FREERTOS/tasks.c **** 				portYIELD_WITHIN_API();
1625:../Dave/Generated/FREERTOS/tasks.c **** 			}
1626:../Dave/Generated/FREERTOS/tasks.c **** 			else
1627:../Dave/Generated/FREERTOS/tasks.c **** 			{
1628:../Dave/Generated/FREERTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:../Dave/Generated/FREERTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:../Dave/Generated/FREERTOS/tasks.c **** 				must be adjusted to point to a different task. */
1631:../Dave/Generated/FREERTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:../Dave/Generated/FREERTOS/tasks.c **** 				{
1633:../Dave/Generated/FREERTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:../Dave/Generated/FREERTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:../Dave/Generated/FREERTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1636:../Dave/Generated/FREERTOS/tasks.c **** 					is. */
1637:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB = NULL;
1638:../Dave/Generated/FREERTOS/tasks.c **** 				}
1639:../Dave/Generated/FREERTOS/tasks.c **** 				else
1640:../Dave/Generated/FREERTOS/tasks.c **** 				{
1641:../Dave/Generated/FREERTOS/tasks.c **** 					vTaskSwitchContext();
1642:../Dave/Generated/FREERTOS/tasks.c **** 				}
1643:../Dave/Generated/FREERTOS/tasks.c **** 			}
1644:../Dave/Generated/FREERTOS/tasks.c **** 		}
1645:../Dave/Generated/FREERTOS/tasks.c **** 		else
1646:../Dave/Generated/FREERTOS/tasks.c **** 		{
1647:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:../Dave/Generated/FREERTOS/tasks.c **** 		}
1649:../Dave/Generated/FREERTOS/tasks.c **** 	}
1650:../Dave/Generated/FREERTOS/tasks.c **** 
1651:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1653:../Dave/Generated/FREERTOS/tasks.c **** 
1654:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:../Dave/Generated/FREERTOS/tasks.c **** 
1656:../Dave/Generated/FREERTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:../Dave/Generated/FREERTOS/tasks.c **** 	{
1658:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1659:../Dave/Generated/FREERTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1660:../Dave/Generated/FREERTOS/tasks.c **** 
1661:../Dave/Generated/FREERTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:../Dave/Generated/FREERTOS/tasks.c **** 		section. */
1663:../Dave/Generated/FREERTOS/tasks.c **** 
1664:../Dave/Generated/FREERTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTask );
1666:../Dave/Generated/FREERTOS/tasks.c **** 
1667:../Dave/Generated/FREERTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:../Dave/Generated/FREERTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
1669:../Dave/Generated/FREERTOS/tasks.c **** 		{
1670:../Dave/Generated/FREERTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:../Dave/Generated/FREERTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
1672:../Dave/Generated/FREERTOS/tasks.c **** 			{
1673:../Dave/Generated/FREERTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:../Dave/Generated/FREERTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:../Dave/Generated/FREERTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
1676:../Dave/Generated/FREERTOS/tasks.c **** 				{
1677:../Dave/Generated/FREERTOS/tasks.c **** 					xReturn = pdTRUE;
1678:../Dave/Generated/FREERTOS/tasks.c **** 				}
1679:../Dave/Generated/FREERTOS/tasks.c **** 				else
1680:../Dave/Generated/FREERTOS/tasks.c **** 				{
1681:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:../Dave/Generated/FREERTOS/tasks.c **** 				}
1683:../Dave/Generated/FREERTOS/tasks.c **** 			}
1684:../Dave/Generated/FREERTOS/tasks.c **** 			else
1685:../Dave/Generated/FREERTOS/tasks.c **** 			{
1686:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:../Dave/Generated/FREERTOS/tasks.c **** 			}
1688:../Dave/Generated/FREERTOS/tasks.c **** 		}
1689:../Dave/Generated/FREERTOS/tasks.c **** 		else
1690:../Dave/Generated/FREERTOS/tasks.c **** 		{
1691:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:../Dave/Generated/FREERTOS/tasks.c **** 		}
1693:../Dave/Generated/FREERTOS/tasks.c **** 
1694:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
1695:../Dave/Generated/FREERTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1696:../Dave/Generated/FREERTOS/tasks.c **** 
1697:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1699:../Dave/Generated/FREERTOS/tasks.c **** 
1700:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:../Dave/Generated/FREERTOS/tasks.c **** 
1702:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:../Dave/Generated/FREERTOS/tasks.c **** 	{
1704:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:../Dave/Generated/FREERTOS/tasks.c **** 
1706:../Dave/Generated/FREERTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToResume );
1708:../Dave/Generated/FREERTOS/tasks.c **** 
1709:../Dave/Generated/FREERTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:../Dave/Generated/FREERTOS/tasks.c **** 		currently executing task. */
1711:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1712:../Dave/Generated/FREERTOS/tasks.c **** 		{
1713:../Dave/Generated/FREERTOS/tasks.c **** 			taskENTER_CRITICAL();
1714:../Dave/Generated/FREERTOS/tasks.c **** 			{
1715:../Dave/Generated/FREERTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:../Dave/Generated/FREERTOS/tasks.c **** 				{
1717:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:../Dave/Generated/FREERTOS/tasks.c **** 
1719:../Dave/Generated/FREERTOS/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:../Dave/Generated/FREERTOS/tasks.c **** 					lists even if the scheduler is suspended. */
1721:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1723:../Dave/Generated/FREERTOS/tasks.c **** 
1724:../Dave/Generated/FREERTOS/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:../Dave/Generated/FREERTOS/tasks.c **** 					{
1727:../Dave/Generated/FREERTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:../Dave/Generated/FREERTOS/tasks.c **** 						but will leave the lists in the correct state for the
1729:../Dave/Generated/FREERTOS/tasks.c **** 						next yield. */
1730:../Dave/Generated/FREERTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:../Dave/Generated/FREERTOS/tasks.c **** 					}
1732:../Dave/Generated/FREERTOS/tasks.c **** 					else
1733:../Dave/Generated/FREERTOS/tasks.c **** 					{
1734:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:../Dave/Generated/FREERTOS/tasks.c **** 					}
1736:../Dave/Generated/FREERTOS/tasks.c **** 				}
1737:../Dave/Generated/FREERTOS/tasks.c **** 				else
1738:../Dave/Generated/FREERTOS/tasks.c **** 				{
1739:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:../Dave/Generated/FREERTOS/tasks.c **** 				}
1741:../Dave/Generated/FREERTOS/tasks.c **** 			}
1742:../Dave/Generated/FREERTOS/tasks.c **** 			taskEXIT_CRITICAL();
1743:../Dave/Generated/FREERTOS/tasks.c **** 		}
1744:../Dave/Generated/FREERTOS/tasks.c **** 		else
1745:../Dave/Generated/FREERTOS/tasks.c **** 		{
1746:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:../Dave/Generated/FREERTOS/tasks.c **** 		}
1748:../Dave/Generated/FREERTOS/tasks.c **** 	}
1749:../Dave/Generated/FREERTOS/tasks.c **** 
1750:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:../Dave/Generated/FREERTOS/tasks.c **** 
1752:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1753:../Dave/Generated/FREERTOS/tasks.c **** 
1754:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:../Dave/Generated/FREERTOS/tasks.c **** 
1756:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:../Dave/Generated/FREERTOS/tasks.c **** 	{
1758:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1759:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:../Dave/Generated/FREERTOS/tasks.c **** 
1762:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToResume );
1763:../Dave/Generated/FREERTOS/tasks.c **** 
1764:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
1779:../Dave/Generated/FREERTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:../Dave/Generated/FREERTOS/tasks.c **** 
1782:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:../Dave/Generated/FREERTOS/tasks.c **** 		{
1784:../Dave/Generated/FREERTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:../Dave/Generated/FREERTOS/tasks.c **** 			{
1786:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:../Dave/Generated/FREERTOS/tasks.c **** 
1788:../Dave/Generated/FREERTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:../Dave/Generated/FREERTOS/tasks.c **** 				{
1791:../Dave/Generated/FREERTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:../Dave/Generated/FREERTOS/tasks.c **** 					suspended list to the ready list directly. */
1793:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:../Dave/Generated/FREERTOS/tasks.c **** 					{
1795:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldRequired = pdTRUE;
1796:../Dave/Generated/FREERTOS/tasks.c **** 					}
1797:../Dave/Generated/FREERTOS/tasks.c **** 					else
1798:../Dave/Generated/FREERTOS/tasks.c **** 					{
1799:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:../Dave/Generated/FREERTOS/tasks.c **** 					}
1801:../Dave/Generated/FREERTOS/tasks.c **** 
1802:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:../Dave/Generated/FREERTOS/tasks.c **** 				}
1805:../Dave/Generated/FREERTOS/tasks.c **** 				else
1806:../Dave/Generated/FREERTOS/tasks.c **** 				{
1807:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:../Dave/Generated/FREERTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:../Dave/Generated/FREERTOS/tasks.c **** 					unsuspended. */
1810:../Dave/Generated/FREERTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:../Dave/Generated/FREERTOS/tasks.c **** 				}
1812:../Dave/Generated/FREERTOS/tasks.c **** 			}
1813:../Dave/Generated/FREERTOS/tasks.c **** 			else
1814:../Dave/Generated/FREERTOS/tasks.c **** 			{
1815:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:../Dave/Generated/FREERTOS/tasks.c **** 			}
1817:../Dave/Generated/FREERTOS/tasks.c **** 		}
1818:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:../Dave/Generated/FREERTOS/tasks.c **** 
1820:../Dave/Generated/FREERTOS/tasks.c **** 		return xYieldRequired;
1821:../Dave/Generated/FREERTOS/tasks.c **** 	}
1822:../Dave/Generated/FREERTOS/tasks.c **** 
1823:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1825:../Dave/Generated/FREERTOS/tasks.c **** 
1826:../Dave/Generated/FREERTOS/tasks.c **** void vTaskStartScheduler( void )
1827:../Dave/Generated/FREERTOS/tasks.c **** {
1828:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xReturn;
1829:../Dave/Generated/FREERTOS/tasks.c **** 
1830:../Dave/Generated/FREERTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:../Dave/Generated/FREERTOS/tasks.c **** 	{
1833:../Dave/Generated/FREERTOS/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:../Dave/Generated/FREERTOS/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:../Dave/Generated/FREERTOS/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:../Dave/Generated/FREERTOS/tasks.c **** 
1837:../Dave/Generated/FREERTOS/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:../Dave/Generated/FREERTOS/tasks.c **** 		address of the RAM then create the idle task. */
1839:../Dave/Generated/FREERTOS/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:../Dave/Generated/FREERTOS/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:../Dave/Generated/FREERTOS/tasks.c **** 												"IDLE",
1842:../Dave/Generated/FREERTOS/tasks.c **** 												ulIdleTaskStackSize,
1843:../Dave/Generated/FREERTOS/tasks.c **** 												( void * ) NULL,
1844:../Dave/Generated/FREERTOS/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:../Dave/Generated/FREERTOS/tasks.c **** 												pxIdleTaskStackBuffer,
1846:../Dave/Generated/FREERTOS/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:../Dave/Generated/FREERTOS/tasks.c **** 
1848:../Dave/Generated/FREERTOS/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:../Dave/Generated/FREERTOS/tasks.c **** 		{
1850:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdPASS;
1851:../Dave/Generated/FREERTOS/tasks.c **** 		}
1852:../Dave/Generated/FREERTOS/tasks.c **** 		else
1853:../Dave/Generated/FREERTOS/tasks.c **** 		{
1854:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdFAIL;
1855:../Dave/Generated/FREERTOS/tasks.c **** 		}
1856:../Dave/Generated/FREERTOS/tasks.c **** 	}
1857:../Dave/Generated/FREERTOS/tasks.c **** 	#else
1858:../Dave/Generated/FREERTOS/tasks.c **** 	{
1859:../Dave/Generated/FREERTOS/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:../Dave/Generated/FREERTOS/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:../Dave/Generated/FREERTOS/tasks.c **** 								( void * ) NULL,
1863:../Dave/Generated/FREERTOS/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:../Dave/Generated/FREERTOS/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:../Dave/Generated/FREERTOS/tasks.c **** 	}
1866:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:../Dave/Generated/FREERTOS/tasks.c **** 
1868:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:../Dave/Generated/FREERTOS/tasks.c **** 	{
1870:../Dave/Generated/FREERTOS/tasks.c **** 		if( xReturn == pdPASS )
1871:../Dave/Generated/FREERTOS/tasks.c **** 		{
1872:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:../Dave/Generated/FREERTOS/tasks.c **** 		}
1874:../Dave/Generated/FREERTOS/tasks.c **** 		else
1875:../Dave/Generated/FREERTOS/tasks.c **** 		{
1876:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:../Dave/Generated/FREERTOS/tasks.c **** 		}
1878:../Dave/Generated/FREERTOS/tasks.c **** 	}
1879:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:../Dave/Generated/FREERTOS/tasks.c **** 
1881:../Dave/Generated/FREERTOS/tasks.c **** 	if( xReturn == pdPASS )
1882:../Dave/Generated/FREERTOS/tasks.c **** 	{
1883:../Dave/Generated/FREERTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:../Dave/Generated/FREERTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:../Dave/Generated/FREERTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:../Dave/Generated/FREERTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:../Dave/Generated/FREERTOS/tasks.c **** 		starts to run. */
1888:../Dave/Generated/FREERTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:../Dave/Generated/FREERTOS/tasks.c **** 
1890:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:../Dave/Generated/FREERTOS/tasks.c **** 		{
1892:../Dave/Generated/FREERTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:../Dave/Generated/FREERTOS/tasks.c **** 			structure specific to the task that will run first. */
1894:../Dave/Generated/FREERTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:../Dave/Generated/FREERTOS/tasks.c **** 		}
1896:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:../Dave/Generated/FREERTOS/tasks.c **** 
1898:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1899:../Dave/Generated/FREERTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:../Dave/Generated/FREERTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:../Dave/Generated/FREERTOS/tasks.c **** 
1902:../Dave/Generated/FREERTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:../Dave/Generated/FREERTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:../Dave/Generated/FREERTOS/tasks.c **** 		the run time counter time base. */
1905:../Dave/Generated/FREERTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:../Dave/Generated/FREERTOS/tasks.c **** 
1907:../Dave/Generated/FREERTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:../Dave/Generated/FREERTOS/tasks.c **** 		portable interface. */
1909:../Dave/Generated/FREERTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:../Dave/Generated/FREERTOS/tasks.c **** 		{
1911:../Dave/Generated/FREERTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:../Dave/Generated/FREERTOS/tasks.c **** 			function will not return. */
1913:../Dave/Generated/FREERTOS/tasks.c **** 		}
1914:../Dave/Generated/FREERTOS/tasks.c **** 		else
1915:../Dave/Generated/FREERTOS/tasks.c **** 		{
1916:../Dave/Generated/FREERTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:../Dave/Generated/FREERTOS/tasks.c **** 		}
1918:../Dave/Generated/FREERTOS/tasks.c **** 	}
1919:../Dave/Generated/FREERTOS/tasks.c **** 	else
1920:../Dave/Generated/FREERTOS/tasks.c **** 	{
1921:../Dave/Generated/FREERTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:../Dave/Generated/FREERTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:../Dave/Generated/FREERTOS/tasks.c **** 		or the timer task. */
1924:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:../Dave/Generated/FREERTOS/tasks.c **** 	}
1926:../Dave/Generated/FREERTOS/tasks.c **** 
1927:../Dave/Generated/FREERTOS/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:../Dave/Generated/FREERTOS/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) xIdleTaskHandle;
1930:../Dave/Generated/FREERTOS/tasks.c **** }
1931:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
1932:../Dave/Generated/FREERTOS/tasks.c **** 
1933:../Dave/Generated/FREERTOS/tasks.c **** void vTaskEndScheduler( void )
1934:../Dave/Generated/FREERTOS/tasks.c **** {
1935:../Dave/Generated/FREERTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:../Dave/Generated/FREERTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:../Dave/Generated/FREERTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:../Dave/Generated/FREERTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:../Dave/Generated/FREERTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
1940:../Dave/Generated/FREERTOS/tasks.c **** 	vPortEndScheduler();
1941:../Dave/Generated/FREERTOS/tasks.c **** }
1942:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
1943:../Dave/Generated/FREERTOS/tasks.c **** 
1944:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSuspendAll( void )
1945:../Dave/Generated/FREERTOS/tasks.c **** {
1946:../Dave/Generated/FREERTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:../Dave/Generated/FREERTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:../Dave/Generated/FREERTOS/tasks.c **** 	http://goo.gl/wu4acr */
1950:../Dave/Generated/FREERTOS/tasks.c **** 	++uxSchedulerSuspended;
1951:../Dave/Generated/FREERTOS/tasks.c **** }
1952:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
1953:../Dave/Generated/FREERTOS/tasks.c **** 
1954:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:../Dave/Generated/FREERTOS/tasks.c **** 
1956:../Dave/Generated/FREERTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:../Dave/Generated/FREERTOS/tasks.c **** 	{
1958:../Dave/Generated/FREERTOS/tasks.c **** 	TickType_t xReturn;
1959:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:../Dave/Generated/FREERTOS/tasks.c **** 
1961:../Dave/Generated/FREERTOS/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:../Dave/Generated/FREERTOS/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:../Dave/Generated/FREERTOS/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:../Dave/Generated/FREERTOS/tasks.c **** 		running. */
1965:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:../Dave/Generated/FREERTOS/tasks.c **** 		{
1967:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:../Dave/Generated/FREERTOS/tasks.c **** 			{
1969:../Dave/Generated/FREERTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:../Dave/Generated/FREERTOS/tasks.c **** 			}
1971:../Dave/Generated/FREERTOS/tasks.c **** 		}
1972:../Dave/Generated/FREERTOS/tasks.c **** 		#else
1973:../Dave/Generated/FREERTOS/tasks.c **** 		{
1974:../Dave/Generated/FREERTOS/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:../Dave/Generated/FREERTOS/tasks.c **** 
1976:../Dave/Generated/FREERTOS/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:../Dave/Generated/FREERTOS/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:../Dave/Generated/FREERTOS/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:../Dave/Generated/FREERTOS/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:../Dave/Generated/FREERTOS/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:../Dave/Generated/FREERTOS/tasks.c **** 			{
1983:../Dave/Generated/FREERTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:../Dave/Generated/FREERTOS/tasks.c **** 			}
1985:../Dave/Generated/FREERTOS/tasks.c **** 		}
1986:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
1987:../Dave/Generated/FREERTOS/tasks.c **** 
1988:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:../Dave/Generated/FREERTOS/tasks.c **** 		{
1990:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = 0;
1991:../Dave/Generated/FREERTOS/tasks.c **** 		}
1992:../Dave/Generated/FREERTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:../Dave/Generated/FREERTOS/tasks.c **** 		{
1994:../Dave/Generated/FREERTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:../Dave/Generated/FREERTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:../Dave/Generated/FREERTOS/tasks.c **** 			processed. */
1997:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = 0;
1998:../Dave/Generated/FREERTOS/tasks.c **** 		}
1999:../Dave/Generated/FREERTOS/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:../Dave/Generated/FREERTOS/tasks.c **** 		{
2001:../Dave/Generated/FREERTOS/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:../Dave/Generated/FREERTOS/tasks.c **** 			idle priority.  This path can only be reached if
2003:../Dave/Generated/FREERTOS/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = 0;
2005:../Dave/Generated/FREERTOS/tasks.c **** 		}
2006:../Dave/Generated/FREERTOS/tasks.c **** 		else
2007:../Dave/Generated/FREERTOS/tasks.c **** 		{
2008:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:../Dave/Generated/FREERTOS/tasks.c **** 		}
2010:../Dave/Generated/FREERTOS/tasks.c **** 
2011:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
2012:../Dave/Generated/FREERTOS/tasks.c **** 	}
2013:../Dave/Generated/FREERTOS/tasks.c **** 
2014:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2016:../Dave/Generated/FREERTOS/tasks.c **** 
2017:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:../Dave/Generated/FREERTOS/tasks.c **** {
2019:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxTCB = NULL;
2020:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:../Dave/Generated/FREERTOS/tasks.c **** 
2022:../Dave/Generated/FREERTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:../Dave/Generated/FREERTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:../Dave/Generated/FREERTOS/tasks.c **** 
2026:../Dave/Generated/FREERTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:../Dave/Generated/FREERTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:../Dave/Generated/FREERTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:../Dave/Generated/FREERTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:../Dave/Generated/FREERTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:../Dave/Generated/FREERTOS/tasks.c **** 	taskENTER_CRITICAL();
2032:../Dave/Generated/FREERTOS/tasks.c **** 	{
2033:../Dave/Generated/FREERTOS/tasks.c **** 		--uxSchedulerSuspended;
2034:../Dave/Generated/FREERTOS/tasks.c **** 
2035:../Dave/Generated/FREERTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:../Dave/Generated/FREERTOS/tasks.c **** 		{
2037:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:../Dave/Generated/FREERTOS/tasks.c **** 			{
2039:../Dave/Generated/FREERTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:../Dave/Generated/FREERTOS/tasks.c **** 				appropriate ready list. */
2041:../Dave/Generated/FREERTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2042:../Dave/Generated/FREERTOS/tasks.c **** 				{
2043:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2044:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2046:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:../Dave/Generated/FREERTOS/tasks.c **** 
2048:../Dave/Generated/FREERTOS/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:../Dave/Generated/FREERTOS/tasks.c **** 					task then a yield must be performed. */
2050:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:../Dave/Generated/FREERTOS/tasks.c **** 					{
2052:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldPending = pdTRUE;
2053:../Dave/Generated/FREERTOS/tasks.c **** 					}
2054:../Dave/Generated/FREERTOS/tasks.c **** 					else
2055:../Dave/Generated/FREERTOS/tasks.c **** 					{
2056:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:../Dave/Generated/FREERTOS/tasks.c **** 					}
2058:../Dave/Generated/FREERTOS/tasks.c **** 				}
2059:../Dave/Generated/FREERTOS/tasks.c **** 
2060:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB != NULL )
2061:../Dave/Generated/FREERTOS/tasks.c **** 				{
2062:../Dave/Generated/FREERTOS/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:../Dave/Generated/FREERTOS/tasks.c **** 					which may have prevented the next unblock time from being
2064:../Dave/Generated/FREERTOS/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:../Dave/Generated/FREERTOS/tasks.c **** 					important for low power tickless implementations, where
2066:../Dave/Generated/FREERTOS/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:../Dave/Generated/FREERTOS/tasks.c **** 					state. */
2068:../Dave/Generated/FREERTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
2069:../Dave/Generated/FREERTOS/tasks.c **** 				}
2070:../Dave/Generated/FREERTOS/tasks.c **** 
2071:../Dave/Generated/FREERTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:../Dave/Generated/FREERTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:../Dave/Generated/FREERTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:../Dave/Generated/FREERTOS/tasks.c **** 				time. */
2075:../Dave/Generated/FREERTOS/tasks.c **** 				{
2076:../Dave/Generated/FREERTOS/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:../Dave/Generated/FREERTOS/tasks.c **** 
2078:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:../Dave/Generated/FREERTOS/tasks.c **** 					{
2080:../Dave/Generated/FREERTOS/tasks.c **** 						do
2081:../Dave/Generated/FREERTOS/tasks.c **** 						{
2082:../Dave/Generated/FREERTOS/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:../Dave/Generated/FREERTOS/tasks.c **** 							{
2084:../Dave/Generated/FREERTOS/tasks.c **** 								xYieldPending = pdTRUE;
2085:../Dave/Generated/FREERTOS/tasks.c **** 							}
2086:../Dave/Generated/FREERTOS/tasks.c **** 							else
2087:../Dave/Generated/FREERTOS/tasks.c **** 							{
2088:../Dave/Generated/FREERTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:../Dave/Generated/FREERTOS/tasks.c **** 							}
2090:../Dave/Generated/FREERTOS/tasks.c **** 							--uxPendedCounts;
2091:../Dave/Generated/FREERTOS/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:../Dave/Generated/FREERTOS/tasks.c **** 
2093:../Dave/Generated/FREERTOS/tasks.c **** 						uxPendedTicks = 0;
2094:../Dave/Generated/FREERTOS/tasks.c **** 					}
2095:../Dave/Generated/FREERTOS/tasks.c **** 					else
2096:../Dave/Generated/FREERTOS/tasks.c **** 					{
2097:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:../Dave/Generated/FREERTOS/tasks.c **** 					}
2099:../Dave/Generated/FREERTOS/tasks.c **** 				}
2100:../Dave/Generated/FREERTOS/tasks.c **** 
2101:../Dave/Generated/FREERTOS/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:../Dave/Generated/FREERTOS/tasks.c **** 				{
2103:../Dave/Generated/FREERTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:../Dave/Generated/FREERTOS/tasks.c **** 					{
2105:../Dave/Generated/FREERTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:../Dave/Generated/FREERTOS/tasks.c **** 					}
2107:../Dave/Generated/FREERTOS/tasks.c **** 					#endif
2108:../Dave/Generated/FREERTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:../Dave/Generated/FREERTOS/tasks.c **** 				}
2110:../Dave/Generated/FREERTOS/tasks.c **** 				else
2111:../Dave/Generated/FREERTOS/tasks.c **** 				{
2112:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:../Dave/Generated/FREERTOS/tasks.c **** 				}
2114:../Dave/Generated/FREERTOS/tasks.c **** 			}
2115:../Dave/Generated/FREERTOS/tasks.c **** 		}
2116:../Dave/Generated/FREERTOS/tasks.c **** 		else
2117:../Dave/Generated/FREERTOS/tasks.c **** 		{
2118:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:../Dave/Generated/FREERTOS/tasks.c **** 		}
2120:../Dave/Generated/FREERTOS/tasks.c **** 	}
2121:../Dave/Generated/FREERTOS/tasks.c **** 	taskEXIT_CRITICAL();
2122:../Dave/Generated/FREERTOS/tasks.c **** 
2123:../Dave/Generated/FREERTOS/tasks.c **** 	return xAlreadyYielded;
2124:../Dave/Generated/FREERTOS/tasks.c **** }
2125:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2126:../Dave/Generated/FREERTOS/tasks.c **** 
2127:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:../Dave/Generated/FREERTOS/tasks.c **** {
2129:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTicks;
2130:../Dave/Generated/FREERTOS/tasks.c **** 
2131:../Dave/Generated/FREERTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:../Dave/Generated/FREERTOS/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:../Dave/Generated/FREERTOS/tasks.c **** 	{
2134:../Dave/Generated/FREERTOS/tasks.c **** 		xTicks = xTickCount;
2135:../Dave/Generated/FREERTOS/tasks.c **** 	}
2136:../Dave/Generated/FREERTOS/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:../Dave/Generated/FREERTOS/tasks.c **** 
2138:../Dave/Generated/FREERTOS/tasks.c **** 	return xTicks;
2139:../Dave/Generated/FREERTOS/tasks.c **** }
2140:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2141:../Dave/Generated/FREERTOS/tasks.c **** 
2142:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:../Dave/Generated/FREERTOS/tasks.c **** {
2144:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xReturn;
2145:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:../Dave/Generated/FREERTOS/tasks.c **** 
2147:../Dave/Generated/FREERTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:../Dave/Generated/FREERTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:../Dave/Generated/FREERTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:../Dave/Generated/FREERTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:../Dave/Generated/FREERTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:../Dave/Generated/FREERTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:../Dave/Generated/FREERTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:../Dave/Generated/FREERTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:../Dave/Generated/FREERTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:../Dave/Generated/FREERTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:../Dave/Generated/FREERTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:../Dave/Generated/FREERTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:../Dave/Generated/FREERTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:../Dave/Generated/FREERTOS/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:../Dave/Generated/FREERTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:../Dave/Generated/FREERTOS/tasks.c **** 
2163:../Dave/Generated/FREERTOS/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:../Dave/Generated/FREERTOS/tasks.c **** 	{
2165:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = xTickCount;
2166:../Dave/Generated/FREERTOS/tasks.c **** 	}
2167:../Dave/Generated/FREERTOS/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:../Dave/Generated/FREERTOS/tasks.c **** 
2169:../Dave/Generated/FREERTOS/tasks.c **** 	return xReturn;
2170:../Dave/Generated/FREERTOS/tasks.c **** }
2171:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2172:../Dave/Generated/FREERTOS/tasks.c **** 
2173:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:../Dave/Generated/FREERTOS/tasks.c **** {
2175:../Dave/Generated/FREERTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t. */
2177:../Dave/Generated/FREERTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:../Dave/Generated/FREERTOS/tasks.c **** }
2179:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2180:../Dave/Generated/FREERTOS/tasks.c **** 
2181:../Dave/Generated/FREERTOS/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:../Dave/Generated/FREERTOS/tasks.c **** {
2183:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxTCB;
2184:../Dave/Generated/FREERTOS/tasks.c **** 
2185:../Dave/Generated/FREERTOS/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:../Dave/Generated/FREERTOS/tasks.c **** 	queried. */
2187:../Dave/Generated/FREERTOS/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTCB );
2189:../Dave/Generated/FREERTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:../Dave/Generated/FREERTOS/tasks.c **** }
2191:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2192:../Dave/Generated/FREERTOS/tasks.c **** 
2193:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:../Dave/Generated/FREERTOS/tasks.c **** 
2195:../Dave/Generated/FREERTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:../Dave/Generated/FREERTOS/tasks.c **** 	{
  27              	 .loc 1 2196 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	.LVL0:
2197:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t x;
2199:../Dave/Generated/FREERTOS/tasks.c **** 	char cNextChar;
2200:../Dave/Generated/FREERTOS/tasks.c **** 
2201:../Dave/Generated/FREERTOS/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:../Dave/Generated/FREERTOS/tasks.c **** 
2203:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
  32              	 .loc 1 2203 0
  33 0000 0368     	 ldr r3,[r0]
2196:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
  34              	 .loc 1 2196 0
  35 0002 F0B5     	 push {r4,r5,r6,r7,lr}
  36              	.LCFI0:
  37              	 .cfi_def_cfa_offset 20
  38              	 .cfi_offset 4,-20
  39              	 .cfi_offset 5,-16
  40              	 .cfi_offset 6,-12
  41              	 .cfi_offset 7,-8
  42              	 .cfi_offset 14,-4
2196:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
  43              	 .loc 1 2196 0
  44 0004 0746     	 mov r7,r0
  45              	 .loc 1 2203 0
  46 0006 0BB9     	 cbnz r3,.L2
  47              	.LVL1:
  48              	.L9:
2197:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
  49              	 .loc 1 2197 0
  50 0008 0020     	 movs r0,#0
  51 000a F0BD     	 pop {r4,r5,r6,r7,pc}
  52              	.LVL2:
  53              	.L2:
  54              	.LBB165:
2204:../Dave/Generated/FREERTOS/tasks.c **** 		{
2205:../Dave/Generated/FREERTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  55              	 .loc 1 2205 0
  56 000c 4368     	 ldr r3,[r0,#4]
  57 000e 5B68     	 ldr r3,[r3,#4]
  58 0010 4360     	 str r3,[r0,#4]
  59 0012 00F1080E 	 add lr,r0,#8
  60 0016 7345     	 cmp r3,lr
  61 0018 04BF     	 itt eq
  62 001a DEF80430 	 ldreq r3,[lr,#4]
  63 001e 4360     	 streq r3,[r0,#4]
  64 0020 4368     	 ldr r3,[r0,#4]
  65 0022 D3F80CC0 	 ldr ip,[r3,#12]
  66              	.LVL3:
  67              	.L8:
  68              	.LBE165:
  69              	.LBB166:
2206:../Dave/Generated/FREERTOS/tasks.c **** 
2207:../Dave/Generated/FREERTOS/tasks.c **** 			do
2208:../Dave/Generated/FREERTOS/tasks.c **** 			{
2209:../Dave/Generated/FREERTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  70              	 .loc 1 2209 0
  71 0026 7B68     	 ldr r3,[r7,#4]
  72 0028 5B68     	 ldr r3,[r3,#4]
  73 002a 7B60     	 str r3,[r7,#4]
  74 002c 9E45     	 cmp lr,r3
  75 002e 04BF     	 itt eq
  76 0030 FB68     	 ldreq r3,[r7,#12]
  77 0032 7B60     	 streq r3,[r7,#4]
  78 0034 7B68     	 ldr r3,[r7,#4]
  79 0036 D868     	 ldr r0,[r3,#12]
  80              	.LVL4:
  81 0038 4C1E     	 subs r4,r1,#1
  82 003a 00F13303 	 add r3,r0,#51
  83 003e 00F14306 	 add r6,r0,#67
  84              	.LVL5:
  85              	.L7:
  86              	.LBE166:
2210:../Dave/Generated/FREERTOS/tasks.c **** 
2211:../Dave/Generated/FREERTOS/tasks.c **** 				/* Check each character in the name looking for a match or
2212:../Dave/Generated/FREERTOS/tasks.c **** 				mismatch. */
2213:../Dave/Generated/FREERTOS/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:../Dave/Generated/FREERTOS/tasks.c **** 				{
2215:../Dave/Generated/FREERTOS/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:../Dave/Generated/FREERTOS/tasks.c **** 
2217:../Dave/Generated/FREERTOS/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
  87              	 .loc 1 2217 0
  88 0042 14F8015F 	 ldrb r5,[r4,#1]!
  89 0046 13F8012F 	 ldrb r2,[r3,#1]!
  90              	.LVL6:
  91 004a AA42     	 cmp r2,r5
  92 004c 02D1     	 bne .L6
2218:../Dave/Generated/FREERTOS/tasks.c **** 					{
2219:../Dave/Generated/FREERTOS/tasks.c **** 						/* Characters didn't match. */
2220:../Dave/Generated/FREERTOS/tasks.c **** 						break;
2221:../Dave/Generated/FREERTOS/tasks.c **** 					}
2222:../Dave/Generated/FREERTOS/tasks.c **** 					else if( cNextChar == 0x00 )
  93              	 .loc 1 2222 0
  94 004e 22B1     	 cbz r2,.L3
2213:../Dave/Generated/FREERTOS/tasks.c **** 				{
  95              	 .loc 1 2213 0 discriminator 2
  96 0050 B342     	 cmp r3,r6
  97 0052 F6D1     	 bne .L7
  98              	.L6:
2223:../Dave/Generated/FREERTOS/tasks.c **** 					{
2224:../Dave/Generated/FREERTOS/tasks.c **** 						/* Both strings terminated, a match must have been
2225:../Dave/Generated/FREERTOS/tasks.c **** 						found. */
2226:../Dave/Generated/FREERTOS/tasks.c **** 						pxReturn = pxNextTCB;
2227:../Dave/Generated/FREERTOS/tasks.c **** 						break;
2228:../Dave/Generated/FREERTOS/tasks.c **** 					}
2229:../Dave/Generated/FREERTOS/tasks.c **** 					else
2230:../Dave/Generated/FREERTOS/tasks.c **** 					{
2231:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:../Dave/Generated/FREERTOS/tasks.c **** 					}
2233:../Dave/Generated/FREERTOS/tasks.c **** 				}
2234:../Dave/Generated/FREERTOS/tasks.c **** 
2235:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxReturn != NULL )
2236:../Dave/Generated/FREERTOS/tasks.c **** 				{
2237:../Dave/Generated/FREERTOS/tasks.c **** 					/* The handle has been found. */
2238:../Dave/Generated/FREERTOS/tasks.c **** 					break;
2239:../Dave/Generated/FREERTOS/tasks.c **** 				}
2240:../Dave/Generated/FREERTOS/tasks.c **** 
2241:../Dave/Generated/FREERTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
  99              	 .loc 1 2241 0
 100 0054 6045     	 cmp r0,ip
 101 0056 E6D1     	 bne .L8
 102 0058 D6E7     	 b .L9
 103              	.L3:
 104              	.LVL7:
2242:../Dave/Generated/FREERTOS/tasks.c **** 		}
2243:../Dave/Generated/FREERTOS/tasks.c **** 		else
2244:../Dave/Generated/FREERTOS/tasks.c **** 		{
2245:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:../Dave/Generated/FREERTOS/tasks.c **** 		}
2247:../Dave/Generated/FREERTOS/tasks.c **** 
2248:../Dave/Generated/FREERTOS/tasks.c **** 		return pxReturn;
2249:../Dave/Generated/FREERTOS/tasks.c **** 	}
 105              	 .loc 1 2249 0
 106 005a F0BD     	 pop {r4,r5,r6,r7,pc}
 107              	 .cfi_endproc
 108              	.LFE150:
 110              	 .section .text.unlikely.prvAddCurrentTaskToDelayedList,"ax",%progbits
 111              	 .align 2
 112              	 .thumb
 113              	 .thumb_func
 115              	prvAddCurrentTaskToDelayedList:
 116              	.LFB192:
2250:../Dave/Generated/FREERTOS/tasks.c **** 
2251:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2253:../Dave/Generated/FREERTOS/tasks.c **** 
2254:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:../Dave/Generated/FREERTOS/tasks.c **** 
2256:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:../Dave/Generated/FREERTOS/tasks.c **** 	{
2258:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t* pxTCB;
2260:../Dave/Generated/FREERTOS/tasks.c **** 
2261:../Dave/Generated/FREERTOS/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:../Dave/Generated/FREERTOS/tasks.c **** 
2264:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
2265:../Dave/Generated/FREERTOS/tasks.c **** 		{
2266:../Dave/Generated/FREERTOS/tasks.c **** 			/* Search the ready lists. */
2267:../Dave/Generated/FREERTOS/tasks.c **** 			do
2268:../Dave/Generated/FREERTOS/tasks.c **** 			{
2269:../Dave/Generated/FREERTOS/tasks.c **** 				uxQueue--;
2270:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:../Dave/Generated/FREERTOS/tasks.c **** 
2272:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB != NULL )
2273:../Dave/Generated/FREERTOS/tasks.c **** 				{
2274:../Dave/Generated/FREERTOS/tasks.c **** 					/* Found the handle. */
2275:../Dave/Generated/FREERTOS/tasks.c **** 					break;
2276:../Dave/Generated/FREERTOS/tasks.c **** 				}
2277:../Dave/Generated/FREERTOS/tasks.c **** 
2278:../Dave/Generated/FREERTOS/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:../Dave/Generated/FREERTOS/tasks.c **** 
2280:../Dave/Generated/FREERTOS/tasks.c **** 			/* Search the delayed lists. */
2281:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == NULL )
2282:../Dave/Generated/FREERTOS/tasks.c **** 			{
2283:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:../Dave/Generated/FREERTOS/tasks.c **** 			}
2285:../Dave/Generated/FREERTOS/tasks.c **** 
2286:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB == NULL )
2287:../Dave/Generated/FREERTOS/tasks.c **** 			{
2288:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:../Dave/Generated/FREERTOS/tasks.c **** 			}
2290:../Dave/Generated/FREERTOS/tasks.c **** 
2291:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:../Dave/Generated/FREERTOS/tasks.c **** 			{
2293:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB == NULL )
2294:../Dave/Generated/FREERTOS/tasks.c **** 				{
2295:../Dave/Generated/FREERTOS/tasks.c **** 					/* Search the suspended list. */
2296:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:../Dave/Generated/FREERTOS/tasks.c **** 				}
2298:../Dave/Generated/FREERTOS/tasks.c **** 			}
2299:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
2300:../Dave/Generated/FREERTOS/tasks.c **** 
2301:../Dave/Generated/FREERTOS/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:../Dave/Generated/FREERTOS/tasks.c **** 			{
2303:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB == NULL )
2304:../Dave/Generated/FREERTOS/tasks.c **** 				{
2305:../Dave/Generated/FREERTOS/tasks.c **** 					/* Search the deleted list. */
2306:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:../Dave/Generated/FREERTOS/tasks.c **** 				}
2308:../Dave/Generated/FREERTOS/tasks.c **** 			}
2309:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
2310:../Dave/Generated/FREERTOS/tasks.c **** 		}
2311:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xTaskResumeAll();
2312:../Dave/Generated/FREERTOS/tasks.c **** 
2313:../Dave/Generated/FREERTOS/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:../Dave/Generated/FREERTOS/tasks.c **** 	}
2315:../Dave/Generated/FREERTOS/tasks.c **** 
2316:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2318:../Dave/Generated/FREERTOS/tasks.c **** 
2319:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:../Dave/Generated/FREERTOS/tasks.c **** 
2321:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:../Dave/Generated/FREERTOS/tasks.c **** 	{
2323:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:../Dave/Generated/FREERTOS/tasks.c **** 
2325:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
2326:../Dave/Generated/FREERTOS/tasks.c **** 		{
2327:../Dave/Generated/FREERTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:../Dave/Generated/FREERTOS/tasks.c **** 			{
2330:../Dave/Generated/FREERTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:../Dave/Generated/FREERTOS/tasks.c **** 				task in the Ready state. */
2332:../Dave/Generated/FREERTOS/tasks.c **** 				do
2333:../Dave/Generated/FREERTOS/tasks.c **** 				{
2334:../Dave/Generated/FREERTOS/tasks.c **** 					uxQueue--;
2335:../Dave/Generated/FREERTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:../Dave/Generated/FREERTOS/tasks.c **** 
2337:../Dave/Generated/FREERTOS/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:../Dave/Generated/FREERTOS/tasks.c **** 
2339:../Dave/Generated/FREERTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:../Dave/Generated/FREERTOS/tasks.c **** 				task in the Blocked state. */
2341:../Dave/Generated/FREERTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:../Dave/Generated/FREERTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:../Dave/Generated/FREERTOS/tasks.c **** 
2344:../Dave/Generated/FREERTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:../Dave/Generated/FREERTOS/tasks.c **** 				{
2346:../Dave/Generated/FREERTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:../Dave/Generated/FREERTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:../Dave/Generated/FREERTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:../Dave/Generated/FREERTOS/tasks.c **** 				}
2350:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
2351:../Dave/Generated/FREERTOS/tasks.c **** 
2352:../Dave/Generated/FREERTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:../Dave/Generated/FREERTOS/tasks.c **** 				{
2354:../Dave/Generated/FREERTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:../Dave/Generated/FREERTOS/tasks.c **** 					each task in the Suspended state. */
2356:../Dave/Generated/FREERTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:../Dave/Generated/FREERTOS/tasks.c **** 				}
2358:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
2359:../Dave/Generated/FREERTOS/tasks.c **** 
2360:../Dave/Generated/FREERTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:../Dave/Generated/FREERTOS/tasks.c **** 				{
2362:../Dave/Generated/FREERTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:../Dave/Generated/FREERTOS/tasks.c **** 					{
2364:../Dave/Generated/FREERTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:../Dave/Generated/FREERTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:../Dave/Generated/FREERTOS/tasks.c **** 						#else
2367:../Dave/Generated/FREERTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:../Dave/Generated/FREERTOS/tasks.c **** 						#endif
2369:../Dave/Generated/FREERTOS/tasks.c **** 					}
2370:../Dave/Generated/FREERTOS/tasks.c **** 				}
2371:../Dave/Generated/FREERTOS/tasks.c **** 				#else
2372:../Dave/Generated/FREERTOS/tasks.c **** 				{
2373:../Dave/Generated/FREERTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:../Dave/Generated/FREERTOS/tasks.c **** 					{
2375:../Dave/Generated/FREERTOS/tasks.c **** 						*pulTotalRunTime = 0;
2376:../Dave/Generated/FREERTOS/tasks.c **** 					}
2377:../Dave/Generated/FREERTOS/tasks.c **** 				}
2378:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
2379:../Dave/Generated/FREERTOS/tasks.c **** 			}
2380:../Dave/Generated/FREERTOS/tasks.c **** 			else
2381:../Dave/Generated/FREERTOS/tasks.c **** 			{
2382:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:../Dave/Generated/FREERTOS/tasks.c **** 			}
2384:../Dave/Generated/FREERTOS/tasks.c **** 		}
2385:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xTaskResumeAll();
2386:../Dave/Generated/FREERTOS/tasks.c **** 
2387:../Dave/Generated/FREERTOS/tasks.c **** 		return uxTask;
2388:../Dave/Generated/FREERTOS/tasks.c **** 	}
2389:../Dave/Generated/FREERTOS/tasks.c **** 
2390:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2392:../Dave/Generated/FREERTOS/tasks.c **** 
2393:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:../Dave/Generated/FREERTOS/tasks.c **** 
2395:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:../Dave/Generated/FREERTOS/tasks.c **** 	{
2397:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:../Dave/Generated/FREERTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:../Dave/Generated/FREERTOS/tasks.c **** 		return xIdleTaskHandle;
2401:../Dave/Generated/FREERTOS/tasks.c **** 	}
2402:../Dave/Generated/FREERTOS/tasks.c **** 
2403:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2405:../Dave/Generated/FREERTOS/tasks.c **** 
2406:../Dave/Generated/FREERTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:../Dave/Generated/FREERTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:../Dave/Generated/FREERTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:../Dave/Generated/FREERTOS/tasks.c **** 1. */
2410:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:../Dave/Generated/FREERTOS/tasks.c **** 
2412:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:../Dave/Generated/FREERTOS/tasks.c **** 	{
2414:../Dave/Generated/FREERTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:../Dave/Generated/FREERTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:../Dave/Generated/FREERTOS/tasks.c **** 		each stepped tick. */
2417:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:../Dave/Generated/FREERTOS/tasks.c **** 		xTickCount += xTicksToJump;
2419:../Dave/Generated/FREERTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:../Dave/Generated/FREERTOS/tasks.c **** 	}
2421:../Dave/Generated/FREERTOS/tasks.c **** 
2422:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2424:../Dave/Generated/FREERTOS/tasks.c **** 
2425:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:../Dave/Generated/FREERTOS/tasks.c **** 
2427:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:../Dave/Generated/FREERTOS/tasks.c **** 	{
2429:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:../Dave/Generated/FREERTOS/tasks.c **** 
2432:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxTCB );
2433:../Dave/Generated/FREERTOS/tasks.c **** 
2434:../Dave/Generated/FREERTOS/tasks.c **** 		vTaskSuspendAll();
2435:../Dave/Generated/FREERTOS/tasks.c **** 		{
2436:../Dave/Generated/FREERTOS/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:../Dave/Generated/FREERTOS/tasks.c **** 			it is actually in the Blocked state. */
2438:../Dave/Generated/FREERTOS/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:../Dave/Generated/FREERTOS/tasks.c **** 			{
2440:../Dave/Generated/FREERTOS/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:../Dave/Generated/FREERTOS/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:../Dave/Generated/FREERTOS/tasks.c **** 				scheduler is suspended. */
2443:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:../Dave/Generated/FREERTOS/tasks.c **** 
2445:../Dave/Generated/FREERTOS/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:../Dave/Generated/FREERTOS/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:../Dave/Generated/FREERTOS/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:../Dave/Generated/FREERTOS/tasks.c **** 				is used. */
2449:../Dave/Generated/FREERTOS/tasks.c **** 				taskENTER_CRITICAL();
2450:../Dave/Generated/FREERTOS/tasks.c **** 				{
2451:../Dave/Generated/FREERTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:../Dave/Generated/FREERTOS/tasks.c **** 					{
2453:../Dave/Generated/FREERTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:../Dave/Generated/FREERTOS/tasks.c **** 					}
2456:../Dave/Generated/FREERTOS/tasks.c **** 					else
2457:../Dave/Generated/FREERTOS/tasks.c **** 					{
2458:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:../Dave/Generated/FREERTOS/tasks.c **** 					}
2460:../Dave/Generated/FREERTOS/tasks.c **** 				}
2461:../Dave/Generated/FREERTOS/tasks.c **** 				taskEXIT_CRITICAL();
2462:../Dave/Generated/FREERTOS/tasks.c **** 
2463:../Dave/Generated/FREERTOS/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:../Dave/Generated/FREERTOS/tasks.c **** 
2466:../Dave/Generated/FREERTOS/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:../Dave/Generated/FREERTOS/tasks.c **** 				switch if preemption is turned off. */
2468:../Dave/Generated/FREERTOS/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:../Dave/Generated/FREERTOS/tasks.c **** 				{
2470:../Dave/Generated/FREERTOS/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:../Dave/Generated/FREERTOS/tasks.c **** 					performed if the unblocked task has a priority that is
2472:../Dave/Generated/FREERTOS/tasks.c **** 					equal to or higher than the currently executing task. */
2473:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:../Dave/Generated/FREERTOS/tasks.c **** 					{
2475:../Dave/Generated/FREERTOS/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:../Dave/Generated/FREERTOS/tasks.c **** 						is unsuspended. */
2477:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldPending = pdTRUE;
2478:../Dave/Generated/FREERTOS/tasks.c **** 					}
2479:../Dave/Generated/FREERTOS/tasks.c **** 					else
2480:../Dave/Generated/FREERTOS/tasks.c **** 					{
2481:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:../Dave/Generated/FREERTOS/tasks.c **** 					}
2483:../Dave/Generated/FREERTOS/tasks.c **** 				}
2484:../Dave/Generated/FREERTOS/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:../Dave/Generated/FREERTOS/tasks.c **** 			}
2486:../Dave/Generated/FREERTOS/tasks.c **** 			else
2487:../Dave/Generated/FREERTOS/tasks.c **** 			{
2488:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:../Dave/Generated/FREERTOS/tasks.c **** 			}
2490:../Dave/Generated/FREERTOS/tasks.c **** 		}
2491:../Dave/Generated/FREERTOS/tasks.c **** 		xTaskResumeAll();
2492:../Dave/Generated/FREERTOS/tasks.c **** 
2493:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
2494:../Dave/Generated/FREERTOS/tasks.c **** 	}
2495:../Dave/Generated/FREERTOS/tasks.c **** 
2496:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
2498:../Dave/Generated/FREERTOS/tasks.c **** 
2499:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:../Dave/Generated/FREERTOS/tasks.c **** {
2501:../Dave/Generated/FREERTOS/tasks.c **** TCB_t * pxTCB;
2502:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xItemValue;
2503:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2504:../Dave/Generated/FREERTOS/tasks.c **** 
2505:../Dave/Generated/FREERTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:../Dave/Generated/FREERTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:../Dave/Generated/FREERTOS/tasks.c **** 	tasks to be unblocked. */
2508:../Dave/Generated/FREERTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2510:../Dave/Generated/FREERTOS/tasks.c **** 	{
2511:../Dave/Generated/FREERTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:../Dave/Generated/FREERTOS/tasks.c **** 		block. */
2513:../Dave/Generated/FREERTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:../Dave/Generated/FREERTOS/tasks.c **** 
2515:../Dave/Generated/FREERTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:../Dave/Generated/FREERTOS/tasks.c **** 		delayed lists if it wraps to 0. */
2517:../Dave/Generated/FREERTOS/tasks.c **** 		xTickCount = xConstTickCount;
2518:../Dave/Generated/FREERTOS/tasks.c **** 
2519:../Dave/Generated/FREERTOS/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:../Dave/Generated/FREERTOS/tasks.c **** 		{
2521:../Dave/Generated/FREERTOS/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:../Dave/Generated/FREERTOS/tasks.c **** 		}
2523:../Dave/Generated/FREERTOS/tasks.c **** 		else
2524:../Dave/Generated/FREERTOS/tasks.c **** 		{
2525:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:../Dave/Generated/FREERTOS/tasks.c **** 		}
2527:../Dave/Generated/FREERTOS/tasks.c **** 
2528:../Dave/Generated/FREERTOS/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:../Dave/Generated/FREERTOS/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:../Dave/Generated/FREERTOS/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:../Dave/Generated/FREERTOS/tasks.c **** 		look any further down the list. */
2532:../Dave/Generated/FREERTOS/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:../Dave/Generated/FREERTOS/tasks.c **** 		{
2534:../Dave/Generated/FREERTOS/tasks.c **** 			for( ;; )
2535:../Dave/Generated/FREERTOS/tasks.c **** 			{
2536:../Dave/Generated/FREERTOS/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:../Dave/Generated/FREERTOS/tasks.c **** 				{
2538:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:../Dave/Generated/FREERTOS/tasks.c **** 					to the maximum possible value so it is extremely
2540:../Dave/Generated/FREERTOS/tasks.c **** 					unlikely that the
2541:../Dave/Generated/FREERTOS/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:../Dave/Generated/FREERTOS/tasks.c **** 					next time through. */
2543:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:../Dave/Generated/FREERTOS/tasks.c **** 					break;
2545:../Dave/Generated/FREERTOS/tasks.c **** 				}
2546:../Dave/Generated/FREERTOS/tasks.c **** 				else
2547:../Dave/Generated/FREERTOS/tasks.c **** 				{
2548:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:../Dave/Generated/FREERTOS/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:../Dave/Generated/FREERTOS/tasks.c **** 					at which the task at the head of the delayed list must
2551:../Dave/Generated/FREERTOS/tasks.c **** 					be removed from the Blocked state. */
2552:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2553:../Dave/Generated/FREERTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2554:../Dave/Generated/FREERTOS/tasks.c **** 
2555:../Dave/Generated/FREERTOS/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:../Dave/Generated/FREERTOS/tasks.c **** 					{
2557:../Dave/Generated/FREERTOS/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:../Dave/Generated/FREERTOS/tasks.c **** 						item value is the time at which the task at the head
2559:../Dave/Generated/FREERTOS/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:../Dave/Generated/FREERTOS/tasks.c **** 						state -	so record the item value in
2561:../Dave/Generated/FREERTOS/tasks.c **** 						xNextTaskUnblockTime. */
2562:../Dave/Generated/FREERTOS/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:../Dave/Generated/FREERTOS/tasks.c **** 						break;
2564:../Dave/Generated/FREERTOS/tasks.c **** 					}
2565:../Dave/Generated/FREERTOS/tasks.c **** 					else
2566:../Dave/Generated/FREERTOS/tasks.c **** 					{
2567:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:../Dave/Generated/FREERTOS/tasks.c **** 					}
2569:../Dave/Generated/FREERTOS/tasks.c **** 
2570:../Dave/Generated/FREERTOS/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:../Dave/Generated/FREERTOS/tasks.c **** 
2573:../Dave/Generated/FREERTOS/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:../Dave/Generated/FREERTOS/tasks.c **** 					it from the event list. */
2575:../Dave/Generated/FREERTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:../Dave/Generated/FREERTOS/tasks.c **** 					{
2577:../Dave/Generated/FREERTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2578:../Dave/Generated/FREERTOS/tasks.c **** 					}
2579:../Dave/Generated/FREERTOS/tasks.c **** 					else
2580:../Dave/Generated/FREERTOS/tasks.c **** 					{
2581:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:../Dave/Generated/FREERTOS/tasks.c **** 					}
2583:../Dave/Generated/FREERTOS/tasks.c **** 
2584:../Dave/Generated/FREERTOS/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:../Dave/Generated/FREERTOS/tasks.c **** 					list. */
2586:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:../Dave/Generated/FREERTOS/tasks.c **** 
2588:../Dave/Generated/FREERTOS/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:../Dave/Generated/FREERTOS/tasks.c **** 					context switch if preemption is turned off. */
2590:../Dave/Generated/FREERTOS/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:../Dave/Generated/FREERTOS/tasks.c **** 					{
2592:../Dave/Generated/FREERTOS/tasks.c **** 						/* Preemption is on, but a context switch should
2593:../Dave/Generated/FREERTOS/tasks.c **** 						only be performed if the unblocked task has a
2594:../Dave/Generated/FREERTOS/tasks.c **** 						priority that is equal to or higher than the
2595:../Dave/Generated/FREERTOS/tasks.c **** 						currently executing task. */
2596:../Dave/Generated/FREERTOS/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2597:../Dave/Generated/FREERTOS/tasks.c **** 						{
2598:../Dave/Generated/FREERTOS/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:../Dave/Generated/FREERTOS/tasks.c **** 						}
2600:../Dave/Generated/FREERTOS/tasks.c **** 						else
2601:../Dave/Generated/FREERTOS/tasks.c **** 						{
2602:../Dave/Generated/FREERTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:../Dave/Generated/FREERTOS/tasks.c **** 						}
2604:../Dave/Generated/FREERTOS/tasks.c **** 					}
2605:../Dave/Generated/FREERTOS/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:../Dave/Generated/FREERTOS/tasks.c **** 				}
2607:../Dave/Generated/FREERTOS/tasks.c **** 			}
2608:../Dave/Generated/FREERTOS/tasks.c **** 		}
2609:../Dave/Generated/FREERTOS/tasks.c **** 
2610:../Dave/Generated/FREERTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:../Dave/Generated/FREERTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:../Dave/Generated/FREERTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:../Dave/Generated/FREERTOS/tasks.c **** 		{
2615:../Dave/Generated/FREERTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:../Dave/Generated/FREERTOS/tasks.c **** 			{
2617:../Dave/Generated/FREERTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:../Dave/Generated/FREERTOS/tasks.c **** 			}
2619:../Dave/Generated/FREERTOS/tasks.c **** 			else
2620:../Dave/Generated/FREERTOS/tasks.c **** 			{
2621:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:../Dave/Generated/FREERTOS/tasks.c **** 			}
2623:../Dave/Generated/FREERTOS/tasks.c **** 		}
2624:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:../Dave/Generated/FREERTOS/tasks.c **** 
2626:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:../Dave/Generated/FREERTOS/tasks.c **** 		{
2628:../Dave/Generated/FREERTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:../Dave/Generated/FREERTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:../Dave/Generated/FREERTOS/tasks.c **** 			{
2632:../Dave/Generated/FREERTOS/tasks.c **** 				vApplicationTickHook();
2633:../Dave/Generated/FREERTOS/tasks.c **** 			}
2634:../Dave/Generated/FREERTOS/tasks.c **** 			else
2635:../Dave/Generated/FREERTOS/tasks.c **** 			{
2636:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:../Dave/Generated/FREERTOS/tasks.c **** 			}
2638:../Dave/Generated/FREERTOS/tasks.c **** 		}
2639:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:../Dave/Generated/FREERTOS/tasks.c **** 	}
2641:../Dave/Generated/FREERTOS/tasks.c **** 	else
2642:../Dave/Generated/FREERTOS/tasks.c **** 	{
2643:../Dave/Generated/FREERTOS/tasks.c **** 		++uxPendedTicks;
2644:../Dave/Generated/FREERTOS/tasks.c **** 
2645:../Dave/Generated/FREERTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:../Dave/Generated/FREERTOS/tasks.c **** 		scheduler is locked. */
2647:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:../Dave/Generated/FREERTOS/tasks.c **** 		{
2649:../Dave/Generated/FREERTOS/tasks.c **** 			vApplicationTickHook();
2650:../Dave/Generated/FREERTOS/tasks.c **** 		}
2651:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
2652:../Dave/Generated/FREERTOS/tasks.c **** 	}
2653:../Dave/Generated/FREERTOS/tasks.c **** 
2654:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:../Dave/Generated/FREERTOS/tasks.c **** 	{
2656:../Dave/Generated/FREERTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:../Dave/Generated/FREERTOS/tasks.c **** 		{
2658:../Dave/Generated/FREERTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:../Dave/Generated/FREERTOS/tasks.c **** 		}
2660:../Dave/Generated/FREERTOS/tasks.c **** 		else
2661:../Dave/Generated/FREERTOS/tasks.c **** 		{
2662:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:../Dave/Generated/FREERTOS/tasks.c **** 		}
2664:../Dave/Generated/FREERTOS/tasks.c **** 	}
2665:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:../Dave/Generated/FREERTOS/tasks.c **** 
2667:../Dave/Generated/FREERTOS/tasks.c **** 	return xSwitchRequired;
2668:../Dave/Generated/FREERTOS/tasks.c **** }
2669:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2670:../Dave/Generated/FREERTOS/tasks.c **** 
2671:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:../Dave/Generated/FREERTOS/tasks.c **** 
2673:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:../Dave/Generated/FREERTOS/tasks.c **** 	{
2675:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *xTCB;
2676:../Dave/Generated/FREERTOS/tasks.c **** 
2677:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:../Dave/Generated/FREERTOS/tasks.c **** 		getting set. */
2679:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask == NULL )
2680:../Dave/Generated/FREERTOS/tasks.c **** 		{
2681:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:../Dave/Generated/FREERTOS/tasks.c **** 		}
2683:../Dave/Generated/FREERTOS/tasks.c **** 		else
2684:../Dave/Generated/FREERTOS/tasks.c **** 		{
2685:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:../Dave/Generated/FREERTOS/tasks.c **** 		}
2687:../Dave/Generated/FREERTOS/tasks.c **** 
2688:../Dave/Generated/FREERTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:../Dave/Generated/FREERTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2690:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
2691:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
2693:../Dave/Generated/FREERTOS/tasks.c **** 	}
2694:../Dave/Generated/FREERTOS/tasks.c **** 
2695:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2697:../Dave/Generated/FREERTOS/tasks.c **** 
2698:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:../Dave/Generated/FREERTOS/tasks.c **** 
2700:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:../Dave/Generated/FREERTOS/tasks.c **** 	{
2702:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *xTCB;
2703:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2704:../Dave/Generated/FREERTOS/tasks.c **** 
2705:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask == NULL )
2707:../Dave/Generated/FREERTOS/tasks.c **** 		{
2708:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:../Dave/Generated/FREERTOS/tasks.c **** 		}
2710:../Dave/Generated/FREERTOS/tasks.c **** 		else
2711:../Dave/Generated/FREERTOS/tasks.c **** 		{
2712:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:../Dave/Generated/FREERTOS/tasks.c **** 		}
2714:../Dave/Generated/FREERTOS/tasks.c **** 
2715:../Dave/Generated/FREERTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:../Dave/Generated/FREERTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2717:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
2718:../Dave/Generated/FREERTOS/tasks.c **** 		{
2719:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:../Dave/Generated/FREERTOS/tasks.c **** 		}
2721:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
2722:../Dave/Generated/FREERTOS/tasks.c **** 
2723:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
2724:../Dave/Generated/FREERTOS/tasks.c **** 	}
2725:../Dave/Generated/FREERTOS/tasks.c **** 
2726:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2728:../Dave/Generated/FREERTOS/tasks.c **** 
2729:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:../Dave/Generated/FREERTOS/tasks.c **** 
2731:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:../Dave/Generated/FREERTOS/tasks.c **** 	{
2733:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *xTCB;
2734:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
2735:../Dave/Generated/FREERTOS/tasks.c **** 
2736:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask == NULL )
2738:../Dave/Generated/FREERTOS/tasks.c **** 		{
2739:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:../Dave/Generated/FREERTOS/tasks.c **** 		}
2741:../Dave/Generated/FREERTOS/tasks.c **** 		else
2742:../Dave/Generated/FREERTOS/tasks.c **** 		{
2743:../Dave/Generated/FREERTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:../Dave/Generated/FREERTOS/tasks.c **** 		}
2745:../Dave/Generated/FREERTOS/tasks.c **** 
2746:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:../Dave/Generated/FREERTOS/tasks.c **** 		{
2748:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:../Dave/Generated/FREERTOS/tasks.c **** 		}
2750:../Dave/Generated/FREERTOS/tasks.c **** 		else
2751:../Dave/Generated/FREERTOS/tasks.c **** 		{
2752:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdFAIL;
2753:../Dave/Generated/FREERTOS/tasks.c **** 		}
2754:../Dave/Generated/FREERTOS/tasks.c **** 
2755:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
2756:../Dave/Generated/FREERTOS/tasks.c **** 	}
2757:../Dave/Generated/FREERTOS/tasks.c **** 
2758:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2760:../Dave/Generated/FREERTOS/tasks.c **** 
2761:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSwitchContext( void )
2762:../Dave/Generated/FREERTOS/tasks.c **** {
2763:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:../Dave/Generated/FREERTOS/tasks.c **** 	{
2765:../Dave/Generated/FREERTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:../Dave/Generated/FREERTOS/tasks.c **** 		switch. */
2767:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdTRUE;
2768:../Dave/Generated/FREERTOS/tasks.c **** 	}
2769:../Dave/Generated/FREERTOS/tasks.c **** 	else
2770:../Dave/Generated/FREERTOS/tasks.c **** 	{
2771:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdFALSE;
2772:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:../Dave/Generated/FREERTOS/tasks.c **** 
2774:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:../Dave/Generated/FREERTOS/tasks.c **** 		{
2776:../Dave/Generated/FREERTOS/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:../Dave/Generated/FREERTOS/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:../Dave/Generated/FREERTOS/tasks.c **** 				#else
2779:../Dave/Generated/FREERTOS/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
2781:../Dave/Generated/FREERTOS/tasks.c **** 
2782:../Dave/Generated/FREERTOS/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:../Dave/Generated/FREERTOS/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:../Dave/Generated/FREERTOS/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:../Dave/Generated/FREERTOS/tasks.c **** 				protection here so count values are only valid until the timer
2786:../Dave/Generated/FREERTOS/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:../Dave/Generated/FREERTOS/tasks.c **** 				against suspect run time stat counter implementations - which
2788:../Dave/Generated/FREERTOS/tasks.c **** 				are provided by the application, not the kernel. */
2789:../Dave/Generated/FREERTOS/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:../Dave/Generated/FREERTOS/tasks.c **** 				{
2791:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:../Dave/Generated/FREERTOS/tasks.c **** 				}
2793:../Dave/Generated/FREERTOS/tasks.c **** 				else
2794:../Dave/Generated/FREERTOS/tasks.c **** 				{
2795:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:../Dave/Generated/FREERTOS/tasks.c **** 				}
2797:../Dave/Generated/FREERTOS/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:../Dave/Generated/FREERTOS/tasks.c **** 		}
2799:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:../Dave/Generated/FREERTOS/tasks.c **** 
2801:../Dave/Generated/FREERTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:../Dave/Generated/FREERTOS/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:../Dave/Generated/FREERTOS/tasks.c **** 
2804:../Dave/Generated/FREERTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:../Dave/Generated/FREERTOS/tasks.c **** 		optimised asm code. */
2806:../Dave/Generated/FREERTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:../Dave/Generated/FREERTOS/tasks.c **** 
2809:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:../Dave/Generated/FREERTOS/tasks.c **** 		{
2811:../Dave/Generated/FREERTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:../Dave/Generated/FREERTOS/tasks.c **** 			structure specific to this task. */
2813:../Dave/Generated/FREERTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:../Dave/Generated/FREERTOS/tasks.c **** 		}
2815:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:../Dave/Generated/FREERTOS/tasks.c **** 	}
2817:../Dave/Generated/FREERTOS/tasks.c **** }
2818:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2819:../Dave/Generated/FREERTOS/tasks.c **** 
2820:../Dave/Generated/FREERTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:../Dave/Generated/FREERTOS/tasks.c **** {
2822:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxEventList );
2823:../Dave/Generated/FREERTOS/tasks.c **** 
2824:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:../Dave/Generated/FREERTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:../Dave/Generated/FREERTOS/tasks.c **** 
2827:../Dave/Generated/FREERTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:../Dave/Generated/FREERTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:../Dave/Generated/FREERTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:../Dave/Generated/FREERTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:../Dave/Generated/FREERTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:../Dave/Generated/FREERTOS/tasks.c **** 
2833:../Dave/Generated/FREERTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:../Dave/Generated/FREERTOS/tasks.c **** }
2835:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2836:../Dave/Generated/FREERTOS/tasks.c **** 
2837:../Dave/Generated/FREERTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:../Dave/Generated/FREERTOS/tasks.c **** {
2839:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxEventList );
2840:../Dave/Generated/FREERTOS/tasks.c **** 
2841:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:../Dave/Generated/FREERTOS/tasks.c **** 	the event groups implementation. */
2843:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:../Dave/Generated/FREERTOS/tasks.c **** 
2845:../Dave/Generated/FREERTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:../Dave/Generated/FREERTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:../Dave/Generated/FREERTOS/tasks.c **** 	task that is not in the Blocked state. */
2848:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:../Dave/Generated/FREERTOS/tasks.c **** 
2850:../Dave/Generated/FREERTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:../Dave/Generated/FREERTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:../Dave/Generated/FREERTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:../Dave/Generated/FREERTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:../Dave/Generated/FREERTOS/tasks.c **** 	the task level). */
2855:../Dave/Generated/FREERTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:../Dave/Generated/FREERTOS/tasks.c **** 
2857:../Dave/Generated/FREERTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:../Dave/Generated/FREERTOS/tasks.c **** }
2859:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2860:../Dave/Generated/FREERTOS/tasks.c **** 
2861:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:../Dave/Generated/FREERTOS/tasks.c **** 
2863:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:../Dave/Generated/FREERTOS/tasks.c **** 	{
2865:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxEventList );
2866:../Dave/Generated/FREERTOS/tasks.c **** 
2867:../Dave/Generated/FREERTOS/tasks.c **** 		/* This function should not be called by application code hence the
2868:../Dave/Generated/FREERTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:../Dave/Generated/FREERTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:../Dave/Generated/FREERTOS/tasks.c **** 		it should be called with the scheduler suspended. */
2871:../Dave/Generated/FREERTOS/tasks.c **** 
2872:../Dave/Generated/FREERTOS/tasks.c **** 
2873:../Dave/Generated/FREERTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:../Dave/Generated/FREERTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:../Dave/Generated/FREERTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:../Dave/Generated/FREERTOS/tasks.c **** 		can be used in place of vListInsert. */
2877:../Dave/Generated/FREERTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:../Dave/Generated/FREERTOS/tasks.c **** 
2879:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:../Dave/Generated/FREERTOS/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:../Dave/Generated/FREERTOS/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:../Dave/Generated/FREERTOS/tasks.c **** 		{
2884:../Dave/Generated/FREERTOS/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:../Dave/Generated/FREERTOS/tasks.c **** 		}
2886:../Dave/Generated/FREERTOS/tasks.c **** 
2887:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:../Dave/Generated/FREERTOS/tasks.c **** 	}
2890:../Dave/Generated/FREERTOS/tasks.c **** 
2891:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TIMERS */
2892:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2893:../Dave/Generated/FREERTOS/tasks.c **** 
2894:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:../Dave/Generated/FREERTOS/tasks.c **** {
2896:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2897:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xReturn;
2898:../Dave/Generated/FREERTOS/tasks.c **** 
2899:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:../Dave/Generated/FREERTOS/tasks.c **** 	called from a critical section within an ISR. */
2901:../Dave/Generated/FREERTOS/tasks.c **** 
2902:../Dave/Generated/FREERTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:../Dave/Generated/FREERTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:../Dave/Generated/FREERTOS/tasks.c **** 	the delayed list, and add it to the ready list.
2905:../Dave/Generated/FREERTOS/tasks.c **** 
2906:../Dave/Generated/FREERTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:../Dave/Generated/FREERTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:../Dave/Generated/FREERTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:../Dave/Generated/FREERTOS/tasks.c **** 
2910:../Dave/Generated/FREERTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:../Dave/Generated/FREERTOS/tasks.c **** 	pxEventList is not empty. */
2912:../Dave/Generated/FREERTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:../Dave/Generated/FREERTOS/tasks.c **** 
2916:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:../Dave/Generated/FREERTOS/tasks.c **** 	{
2918:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2920:../Dave/Generated/FREERTOS/tasks.c **** 	}
2921:../Dave/Generated/FREERTOS/tasks.c **** 	else
2922:../Dave/Generated/FREERTOS/tasks.c **** 	{
2923:../Dave/Generated/FREERTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:../Dave/Generated/FREERTOS/tasks.c **** 		pending until the scheduler is resumed. */
2925:../Dave/Generated/FREERTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:../Dave/Generated/FREERTOS/tasks.c **** 	}
2927:../Dave/Generated/FREERTOS/tasks.c **** 
2928:../Dave/Generated/FREERTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:../Dave/Generated/FREERTOS/tasks.c **** 	{
2930:../Dave/Generated/FREERTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:../Dave/Generated/FREERTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:../Dave/Generated/FREERTOS/tasks.c **** 		it should force a context switch now. */
2933:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = pdTRUE;
2934:../Dave/Generated/FREERTOS/tasks.c **** 
2935:../Dave/Generated/FREERTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:../Dave/Generated/FREERTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdTRUE;
2938:../Dave/Generated/FREERTOS/tasks.c **** 	}
2939:../Dave/Generated/FREERTOS/tasks.c **** 	else
2940:../Dave/Generated/FREERTOS/tasks.c **** 	{
2941:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = pdFALSE;
2942:../Dave/Generated/FREERTOS/tasks.c **** 	}
2943:../Dave/Generated/FREERTOS/tasks.c **** 
2944:../Dave/Generated/FREERTOS/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:../Dave/Generated/FREERTOS/tasks.c **** 	{
2946:../Dave/Generated/FREERTOS/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:../Dave/Generated/FREERTOS/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:../Dave/Generated/FREERTOS/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:../Dave/Generated/FREERTOS/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:../Dave/Generated/FREERTOS/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:../Dave/Generated/FREERTOS/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:../Dave/Generated/FREERTOS/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:../Dave/Generated/FREERTOS/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:../Dave/Generated/FREERTOS/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:../Dave/Generated/FREERTOS/tasks.c **** 	}
2956:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
2957:../Dave/Generated/FREERTOS/tasks.c **** 
2958:../Dave/Generated/FREERTOS/tasks.c **** 	return xReturn;
2959:../Dave/Generated/FREERTOS/tasks.c **** }
2960:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
2961:../Dave/Generated/FREERTOS/tasks.c **** 
2962:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:../Dave/Generated/FREERTOS/tasks.c **** {
2964:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2965:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xReturn;
2966:../Dave/Generated/FREERTOS/tasks.c **** 
2967:../Dave/Generated/FREERTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:../Dave/Generated/FREERTOS/tasks.c **** 	the event flags implementation. */
2969:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:../Dave/Generated/FREERTOS/tasks.c **** 
2971:../Dave/Generated/FREERTOS/tasks.c **** 	/* Store the new item value in the event list. */
2972:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:../Dave/Generated/FREERTOS/tasks.c **** 
2974:../Dave/Generated/FREERTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:../Dave/Generated/FREERTOS/tasks.c **** 	event flags. */
2976:../Dave/Generated/FREERTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2977:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:../Dave/Generated/FREERTOS/tasks.c **** 
2980:../Dave/Generated/FREERTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:../Dave/Generated/FREERTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:../Dave/Generated/FREERTOS/tasks.c **** 	lists. */
2983:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:../Dave/Generated/FREERTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:../Dave/Generated/FREERTOS/tasks.c **** 
2986:../Dave/Generated/FREERTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:../Dave/Generated/FREERTOS/tasks.c **** 	{
2988:../Dave/Generated/FREERTOS/tasks.c **** 		/* Return true if the task removed from the event list has
2989:../Dave/Generated/FREERTOS/tasks.c **** 		a higher priority than the calling task.  This allows
2990:../Dave/Generated/FREERTOS/tasks.c **** 		the calling task to know if it should force a context
2991:../Dave/Generated/FREERTOS/tasks.c **** 		switch now. */
2992:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = pdTRUE;
2993:../Dave/Generated/FREERTOS/tasks.c **** 
2994:../Dave/Generated/FREERTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:../Dave/Generated/FREERTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:../Dave/Generated/FREERTOS/tasks.c **** 		xYieldPending = pdTRUE;
2997:../Dave/Generated/FREERTOS/tasks.c **** 	}
2998:../Dave/Generated/FREERTOS/tasks.c **** 	else
2999:../Dave/Generated/FREERTOS/tasks.c **** 	{
3000:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = pdFALSE;
3001:../Dave/Generated/FREERTOS/tasks.c **** 	}
3002:../Dave/Generated/FREERTOS/tasks.c **** 
3003:../Dave/Generated/FREERTOS/tasks.c **** 	return xReturn;
3004:../Dave/Generated/FREERTOS/tasks.c **** }
3005:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3006:../Dave/Generated/FREERTOS/tasks.c **** 
3007:../Dave/Generated/FREERTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:../Dave/Generated/FREERTOS/tasks.c **** {
3009:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTimeOut );
3010:../Dave/Generated/FREERTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3011:../Dave/Generated/FREERTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:../Dave/Generated/FREERTOS/tasks.c **** }
3013:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3014:../Dave/Generated/FREERTOS/tasks.c **** 
3015:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:../Dave/Generated/FREERTOS/tasks.c **** {
3017:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xReturn;
3018:../Dave/Generated/FREERTOS/tasks.c **** 
3019:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTimeOut );
3020:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTicksToWait );
3021:../Dave/Generated/FREERTOS/tasks.c **** 
3022:../Dave/Generated/FREERTOS/tasks.c **** 	taskENTER_CRITICAL();
3023:../Dave/Generated/FREERTOS/tasks.c **** 	{
3024:../Dave/Generated/FREERTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:../Dave/Generated/FREERTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:../Dave/Generated/FREERTOS/tasks.c **** 
3027:../Dave/Generated/FREERTOS/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:../Dave/Generated/FREERTOS/tasks.c **** 			{
3030:../Dave/Generated/FREERTOS/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:../Dave/Generated/FREERTOS/tasks.c **** 				but has the same result. */
3032:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdTRUE;
3034:../Dave/Generated/FREERTOS/tasks.c **** 			}
3035:../Dave/Generated/FREERTOS/tasks.c **** 			else
3036:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3037:../Dave/Generated/FREERTOS/tasks.c **** 
3038:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:../Dave/Generated/FREERTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:../Dave/Generated/FREERTOS/tasks.c **** 			{
3041:../Dave/Generated/FREERTOS/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:../Dave/Generated/FREERTOS/tasks.c **** 				specified is the maximum block time then the task should block
3043:../Dave/Generated/FREERTOS/tasks.c **** 				indefinitely, and therefore never time out. */
3044:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdFALSE;
3045:../Dave/Generated/FREERTOS/tasks.c **** 			}
3046:../Dave/Generated/FREERTOS/tasks.c **** 			else
3047:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3048:../Dave/Generated/FREERTOS/tasks.c **** 
3049:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:../Dave/Generated/FREERTOS/tasks.c **** 		{
3051:../Dave/Generated/FREERTOS/tasks.c **** 			/* The tick count is greater than the time at which
3052:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:../Dave/Generated/FREERTOS/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:../Dave/Generated/FREERTOS/tasks.c **** 			was called. */
3056:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdTRUE;
3057:../Dave/Generated/FREERTOS/tasks.c **** 		}
3058:../Dave/Generated/FREERTOS/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:../Dave/Generated/FREERTOS/tasks.c **** 		{
3060:../Dave/Generated/FREERTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:../Dave/Generated/FREERTOS/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdFALSE;
3064:../Dave/Generated/FREERTOS/tasks.c **** 		}
3065:../Dave/Generated/FREERTOS/tasks.c **** 		else
3066:../Dave/Generated/FREERTOS/tasks.c **** 		{
3067:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = pdTRUE;
3068:../Dave/Generated/FREERTOS/tasks.c **** 		}
3069:../Dave/Generated/FREERTOS/tasks.c **** 	}
3070:../Dave/Generated/FREERTOS/tasks.c **** 	taskEXIT_CRITICAL();
3071:../Dave/Generated/FREERTOS/tasks.c **** 
3072:../Dave/Generated/FREERTOS/tasks.c **** 	return xReturn;
3073:../Dave/Generated/FREERTOS/tasks.c **** }
3074:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3075:../Dave/Generated/FREERTOS/tasks.c **** 
3076:../Dave/Generated/FREERTOS/tasks.c **** void vTaskMissedYield( void )
3077:../Dave/Generated/FREERTOS/tasks.c **** {
3078:../Dave/Generated/FREERTOS/tasks.c **** 	xYieldPending = pdTRUE;
3079:../Dave/Generated/FREERTOS/tasks.c **** }
3080:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3081:../Dave/Generated/FREERTOS/tasks.c **** 
3082:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:../Dave/Generated/FREERTOS/tasks.c **** 
3084:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:../Dave/Generated/FREERTOS/tasks.c **** 	{
3086:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn;
3087:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3088:../Dave/Generated/FREERTOS/tasks.c **** 
3089:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask != NULL )
3090:../Dave/Generated/FREERTOS/tasks.c **** 		{
3091:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:../Dave/Generated/FREERTOS/tasks.c **** 		}
3094:../Dave/Generated/FREERTOS/tasks.c **** 		else
3095:../Dave/Generated/FREERTOS/tasks.c **** 		{
3096:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = 0U;
3097:../Dave/Generated/FREERTOS/tasks.c **** 		}
3098:../Dave/Generated/FREERTOS/tasks.c **** 
3099:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
3100:../Dave/Generated/FREERTOS/tasks.c **** 	}
3101:../Dave/Generated/FREERTOS/tasks.c **** 
3102:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3104:../Dave/Generated/FREERTOS/tasks.c **** 
3105:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:../Dave/Generated/FREERTOS/tasks.c **** 
3107:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:../Dave/Generated/FREERTOS/tasks.c **** 	{
3109:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3110:../Dave/Generated/FREERTOS/tasks.c **** 
3111:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTask != NULL )
3112:../Dave/Generated/FREERTOS/tasks.c **** 		{
3113:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:../Dave/Generated/FREERTOS/tasks.c **** 		}
3116:../Dave/Generated/FREERTOS/tasks.c **** 	}
3117:../Dave/Generated/FREERTOS/tasks.c **** 
3118:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:../Dave/Generated/FREERTOS/tasks.c **** 
3120:../Dave/Generated/FREERTOS/tasks.c **** /*
3121:../Dave/Generated/FREERTOS/tasks.c ****  * -----------------------------------------------------------
3122:../Dave/Generated/FREERTOS/tasks.c ****  * The Idle task.
3123:../Dave/Generated/FREERTOS/tasks.c ****  * ----------------------------------------------------------
3124:../Dave/Generated/FREERTOS/tasks.c ****  *
3125:../Dave/Generated/FREERTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:../Dave/Generated/FREERTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:../Dave/Generated/FREERTOS/tasks.c ****  *
3128:../Dave/Generated/FREERTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:../Dave/Generated/FREERTOS/tasks.c ****  *
3130:../Dave/Generated/FREERTOS/tasks.c ****  */
3131:../Dave/Generated/FREERTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:../Dave/Generated/FREERTOS/tasks.c **** {
3133:../Dave/Generated/FREERTOS/tasks.c **** 	/* Stop warnings. */
3134:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) pvParameters;
3135:../Dave/Generated/FREERTOS/tasks.c **** 
3136:../Dave/Generated/FREERTOS/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:../Dave/Generated/FREERTOS/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:../Dave/Generated/FREERTOS/tasks.c **** 
3139:../Dave/Generated/FREERTOS/tasks.c **** 	for( ;; )
3140:../Dave/Generated/FREERTOS/tasks.c **** 	{
3141:../Dave/Generated/FREERTOS/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:../Dave/Generated/FREERTOS/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:../Dave/Generated/FREERTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:../Dave/Generated/FREERTOS/tasks.c **** 
3145:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:../Dave/Generated/FREERTOS/tasks.c **** 		{
3147:../Dave/Generated/FREERTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:../Dave/Generated/FREERTOS/tasks.c **** 			see if any other task has become available.  If we are using
3149:../Dave/Generated/FREERTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:../Dave/Generated/FREERTOS/tasks.c **** 			will automatically get the processor anyway. */
3151:../Dave/Generated/FREERTOS/tasks.c **** 			taskYIELD();
3152:../Dave/Generated/FREERTOS/tasks.c **** 		}
3153:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:../Dave/Generated/FREERTOS/tasks.c **** 
3155:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:../Dave/Generated/FREERTOS/tasks.c **** 		{
3157:../Dave/Generated/FREERTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:../Dave/Generated/FREERTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:../Dave/Generated/FREERTOS/tasks.c **** 			to run then the idle task should yield before the end of the
3160:../Dave/Generated/FREERTOS/tasks.c **** 			timeslice.
3161:../Dave/Generated/FREERTOS/tasks.c **** 
3162:../Dave/Generated/FREERTOS/tasks.c **** 			A critical region is not required here as we are just reading from
3163:../Dave/Generated/FREERTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:../Dave/Generated/FREERTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:../Dave/Generated/FREERTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:../Dave/Generated/FREERTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:../Dave/Generated/FREERTOS/tasks.c **** 			{
3168:../Dave/Generated/FREERTOS/tasks.c **** 				taskYIELD();
3169:../Dave/Generated/FREERTOS/tasks.c **** 			}
3170:../Dave/Generated/FREERTOS/tasks.c **** 			else
3171:../Dave/Generated/FREERTOS/tasks.c **** 			{
3172:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:../Dave/Generated/FREERTOS/tasks.c **** 			}
3174:../Dave/Generated/FREERTOS/tasks.c **** 		}
3175:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:../Dave/Generated/FREERTOS/tasks.c **** 
3177:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:../Dave/Generated/FREERTOS/tasks.c **** 		{
3179:../Dave/Generated/FREERTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:../Dave/Generated/FREERTOS/tasks.c **** 
3181:../Dave/Generated/FREERTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:../Dave/Generated/FREERTOS/tasks.c **** 			allows the application designer to add background functionality
3183:../Dave/Generated/FREERTOS/tasks.c **** 			without the overhead of a separate task.
3184:../Dave/Generated/FREERTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:../Dave/Generated/FREERTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:../Dave/Generated/FREERTOS/tasks.c **** 			vApplicationIdleHook();
3187:../Dave/Generated/FREERTOS/tasks.c **** 		}
3188:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:../Dave/Generated/FREERTOS/tasks.c **** 
3190:../Dave/Generated/FREERTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:../Dave/Generated/FREERTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:../Dave/Generated/FREERTOS/tasks.c **** 		user defined low power mode	implementations require
3193:../Dave/Generated/FREERTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:../Dave/Generated/FREERTOS/tasks.c **** 		{
3196:../Dave/Generated/FREERTOS/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:../Dave/Generated/FREERTOS/tasks.c **** 
3198:../Dave/Generated/FREERTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:../Dave/Generated/FREERTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:../Dave/Generated/FREERTOS/tasks.c **** 			test of the expected idle time is performed without the
3201:../Dave/Generated/FREERTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:../Dave/Generated/FREERTOS/tasks.c **** 			valid. */
3203:../Dave/Generated/FREERTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:../Dave/Generated/FREERTOS/tasks.c **** 
3205:../Dave/Generated/FREERTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:../Dave/Generated/FREERTOS/tasks.c **** 			{
3207:../Dave/Generated/FREERTOS/tasks.c **** 				vTaskSuspendAll();
3208:../Dave/Generated/FREERTOS/tasks.c **** 				{
3209:../Dave/Generated/FREERTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:../Dave/Generated/FREERTOS/tasks.c **** 					time can be sampled again, and this time its value can
3211:../Dave/Generated/FREERTOS/tasks.c **** 					be used. */
3212:../Dave/Generated/FREERTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:../Dave/Generated/FREERTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:../Dave/Generated/FREERTOS/tasks.c **** 
3215:../Dave/Generated/FREERTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:../Dave/Generated/FREERTOS/tasks.c **** 					{
3217:../Dave/Generated/FREERTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:../Dave/Generated/FREERTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:../Dave/Generated/FREERTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:../Dave/Generated/FREERTOS/tasks.c **** 					}
3221:../Dave/Generated/FREERTOS/tasks.c **** 					else
3222:../Dave/Generated/FREERTOS/tasks.c **** 					{
3223:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:../Dave/Generated/FREERTOS/tasks.c **** 					}
3225:../Dave/Generated/FREERTOS/tasks.c **** 				}
3226:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) xTaskResumeAll();
3227:../Dave/Generated/FREERTOS/tasks.c **** 			}
3228:../Dave/Generated/FREERTOS/tasks.c **** 			else
3229:../Dave/Generated/FREERTOS/tasks.c **** 			{
3230:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:../Dave/Generated/FREERTOS/tasks.c **** 			}
3232:../Dave/Generated/FREERTOS/tasks.c **** 		}
3233:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:../Dave/Generated/FREERTOS/tasks.c **** 	}
3235:../Dave/Generated/FREERTOS/tasks.c **** }
3236:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3237:../Dave/Generated/FREERTOS/tasks.c **** 
3238:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:../Dave/Generated/FREERTOS/tasks.c **** 
3240:../Dave/Generated/FREERTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:../Dave/Generated/FREERTOS/tasks.c **** 	{
3242:../Dave/Generated/FREERTOS/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:../Dave/Generated/FREERTOS/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:../Dave/Generated/FREERTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:../Dave/Generated/FREERTOS/tasks.c **** 
3246:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:../Dave/Generated/FREERTOS/tasks.c **** 		{
3248:../Dave/Generated/FREERTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:../Dave/Generated/FREERTOS/tasks.c **** 			eReturn = eAbortSleep;
3250:../Dave/Generated/FREERTOS/tasks.c **** 		}
3251:../Dave/Generated/FREERTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:../Dave/Generated/FREERTOS/tasks.c **** 		{
3253:../Dave/Generated/FREERTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:../Dave/Generated/FREERTOS/tasks.c **** 			eReturn = eAbortSleep;
3255:../Dave/Generated/FREERTOS/tasks.c **** 		}
3256:../Dave/Generated/FREERTOS/tasks.c **** 		else
3257:../Dave/Generated/FREERTOS/tasks.c **** 		{
3258:../Dave/Generated/FREERTOS/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:../Dave/Generated/FREERTOS/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:../Dave/Generated/FREERTOS/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:../Dave/Generated/FREERTOS/tasks.c **** 			interrupts. */
3262:../Dave/Generated/FREERTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:../Dave/Generated/FREERTOS/tasks.c **** 			{
3264:../Dave/Generated/FREERTOS/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:../Dave/Generated/FREERTOS/tasks.c **** 			}
3266:../Dave/Generated/FREERTOS/tasks.c **** 			else
3267:../Dave/Generated/FREERTOS/tasks.c **** 			{
3268:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:../Dave/Generated/FREERTOS/tasks.c **** 			}
3270:../Dave/Generated/FREERTOS/tasks.c **** 		}
3271:../Dave/Generated/FREERTOS/tasks.c **** 
3272:../Dave/Generated/FREERTOS/tasks.c **** 		return eReturn;
3273:../Dave/Generated/FREERTOS/tasks.c **** 	}
3274:../Dave/Generated/FREERTOS/tasks.c **** 
3275:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3277:../Dave/Generated/FREERTOS/tasks.c **** 
3278:../Dave/Generated/FREERTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:../Dave/Generated/FREERTOS/tasks.c **** 
3280:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:../Dave/Generated/FREERTOS/tasks.c **** 	{
3282:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3283:../Dave/Generated/FREERTOS/tasks.c **** 
3284:../Dave/Generated/FREERTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:../Dave/Generated/FREERTOS/tasks.c **** 		{
3286:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:../Dave/Generated/FREERTOS/tasks.c **** 		}
3289:../Dave/Generated/FREERTOS/tasks.c **** 	}
3290:../Dave/Generated/FREERTOS/tasks.c **** 
3291:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3293:../Dave/Generated/FREERTOS/tasks.c **** 
3294:../Dave/Generated/FREERTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:../Dave/Generated/FREERTOS/tasks.c **** 
3296:../Dave/Generated/FREERTOS/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:../Dave/Generated/FREERTOS/tasks.c **** 	{
3298:../Dave/Generated/FREERTOS/tasks.c **** 	void *pvReturn = NULL;
3299:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3300:../Dave/Generated/FREERTOS/tasks.c **** 
3301:../Dave/Generated/FREERTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:../Dave/Generated/FREERTOS/tasks.c **** 		{
3303:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:../Dave/Generated/FREERTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:../Dave/Generated/FREERTOS/tasks.c **** 		}
3306:../Dave/Generated/FREERTOS/tasks.c **** 		else
3307:../Dave/Generated/FREERTOS/tasks.c **** 		{
3308:../Dave/Generated/FREERTOS/tasks.c **** 			pvReturn = NULL;
3309:../Dave/Generated/FREERTOS/tasks.c **** 		}
3310:../Dave/Generated/FREERTOS/tasks.c **** 
3311:../Dave/Generated/FREERTOS/tasks.c **** 		return pvReturn;
3312:../Dave/Generated/FREERTOS/tasks.c **** 	}
3313:../Dave/Generated/FREERTOS/tasks.c **** 
3314:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3316:../Dave/Generated/FREERTOS/tasks.c **** 
3317:../Dave/Generated/FREERTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:../Dave/Generated/FREERTOS/tasks.c **** 
3319:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:../Dave/Generated/FREERTOS/tasks.c **** 	{
3321:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3322:../Dave/Generated/FREERTOS/tasks.c **** 
3323:../Dave/Generated/FREERTOS/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:../Dave/Generated/FREERTOS/tasks.c **** 		the calling task. */
3325:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:../Dave/Generated/FREERTOS/tasks.c **** 
3327:../Dave/Generated/FREERTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:../Dave/Generated/FREERTOS/tasks.c **** 	}
3329:../Dave/Generated/FREERTOS/tasks.c **** 
3330:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3332:../Dave/Generated/FREERTOS/tasks.c **** 
3333:../Dave/Generated/FREERTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3334:../Dave/Generated/FREERTOS/tasks.c **** {
3335:../Dave/Generated/FREERTOS/tasks.c **** UBaseType_t uxPriority;
3336:../Dave/Generated/FREERTOS/tasks.c **** 
3337:../Dave/Generated/FREERTOS/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3338:../Dave/Generated/FREERTOS/tasks.c **** 	{
3339:../Dave/Generated/FREERTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:../Dave/Generated/FREERTOS/tasks.c **** 	}
3341:../Dave/Generated/FREERTOS/tasks.c **** 
3342:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:../Dave/Generated/FREERTOS/tasks.c **** 
3346:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:../Dave/Generated/FREERTOS/tasks.c **** 	{
3348:../Dave/Generated/FREERTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:../Dave/Generated/FREERTOS/tasks.c **** 	}
3350:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:../Dave/Generated/FREERTOS/tasks.c **** 
3352:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:../Dave/Generated/FREERTOS/tasks.c **** 	{
3354:../Dave/Generated/FREERTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3355:../Dave/Generated/FREERTOS/tasks.c **** 	}
3356:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:../Dave/Generated/FREERTOS/tasks.c **** 
3358:../Dave/Generated/FREERTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:../Dave/Generated/FREERTOS/tasks.c **** 	using list2. */
3360:../Dave/Generated/FREERTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:../Dave/Generated/FREERTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:../Dave/Generated/FREERTOS/tasks.c **** }
3363:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3364:../Dave/Generated/FREERTOS/tasks.c **** 
3365:../Dave/Generated/FREERTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:../Dave/Generated/FREERTOS/tasks.c **** {
3367:../Dave/Generated/FREERTOS/tasks.c **** 
3368:../Dave/Generated/FREERTOS/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:../Dave/Generated/FREERTOS/tasks.c **** 
3370:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:../Dave/Generated/FREERTOS/tasks.c **** 	{
3372:../Dave/Generated/FREERTOS/tasks.c **** 		BaseType_t xListIsEmpty;
3373:../Dave/Generated/FREERTOS/tasks.c **** 
3374:../Dave/Generated/FREERTOS/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:../Dave/Generated/FREERTOS/tasks.c **** 		too often in the idle task. */
3376:../Dave/Generated/FREERTOS/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:../Dave/Generated/FREERTOS/tasks.c **** 		{
3378:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSuspendAll();
3379:../Dave/Generated/FREERTOS/tasks.c **** 			{
3380:../Dave/Generated/FREERTOS/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3381:../Dave/Generated/FREERTOS/tasks.c **** 			}
3382:../Dave/Generated/FREERTOS/tasks.c **** 			( void ) xTaskResumeAll();
3383:../Dave/Generated/FREERTOS/tasks.c **** 
3384:../Dave/Generated/FREERTOS/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:../Dave/Generated/FREERTOS/tasks.c **** 			{
3386:../Dave/Generated/FREERTOS/tasks.c **** 				TCB_t *pxTCB;
3387:../Dave/Generated/FREERTOS/tasks.c **** 
3388:../Dave/Generated/FREERTOS/tasks.c **** 				taskENTER_CRITICAL();
3389:../Dave/Generated/FREERTOS/tasks.c **** 				{
3390:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:../Dave/Generated/FREERTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:../Dave/Generated/FREERTOS/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:../Dave/Generated/FREERTOS/tasks.c **** 				}
3395:../Dave/Generated/FREERTOS/tasks.c **** 				taskEXIT_CRITICAL();
3396:../Dave/Generated/FREERTOS/tasks.c **** 
3397:../Dave/Generated/FREERTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:../Dave/Generated/FREERTOS/tasks.c **** 			}
3399:../Dave/Generated/FREERTOS/tasks.c **** 			else
3400:../Dave/Generated/FREERTOS/tasks.c **** 			{
3401:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:../Dave/Generated/FREERTOS/tasks.c **** 			}
3403:../Dave/Generated/FREERTOS/tasks.c **** 		}
3404:../Dave/Generated/FREERTOS/tasks.c **** 	}
3405:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:../Dave/Generated/FREERTOS/tasks.c **** }
3407:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3408:../Dave/Generated/FREERTOS/tasks.c **** 
3409:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:../Dave/Generated/FREERTOS/tasks.c **** 
3411:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:../Dave/Generated/FREERTOS/tasks.c **** 	{
3413:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3414:../Dave/Generated/FREERTOS/tasks.c **** 
3415:../Dave/Generated/FREERTOS/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:../Dave/Generated/FREERTOS/tasks.c **** 
3418:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:../Dave/Generated/FREERTOS/tasks.c **** 
3424:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:../Dave/Generated/FREERTOS/tasks.c **** 		{
3426:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:../Dave/Generated/FREERTOS/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:../Dave/Generated/FREERTOS/tasks.c **** 			being in the Blocked state. */
3429:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:../Dave/Generated/FREERTOS/tasks.c **** 			{
3431:../Dave/Generated/FREERTOS/tasks.c **** 				vTaskSuspendAll();
3432:../Dave/Generated/FREERTOS/tasks.c **** 				{
3433:../Dave/Generated/FREERTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:../Dave/Generated/FREERTOS/tasks.c **** 					{
3435:../Dave/Generated/FREERTOS/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:../Dave/Generated/FREERTOS/tasks.c **** 					}
3437:../Dave/Generated/FREERTOS/tasks.c **** 				}
3438:../Dave/Generated/FREERTOS/tasks.c **** 				xTaskResumeAll();
3439:../Dave/Generated/FREERTOS/tasks.c **** 			}
3440:../Dave/Generated/FREERTOS/tasks.c **** 		}
3441:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:../Dave/Generated/FREERTOS/tasks.c **** 
3443:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:../Dave/Generated/FREERTOS/tasks.c **** 		{
3445:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:../Dave/Generated/FREERTOS/tasks.c **** 		}
3447:../Dave/Generated/FREERTOS/tasks.c **** 		#else
3448:../Dave/Generated/FREERTOS/tasks.c **** 		{
3449:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:../Dave/Generated/FREERTOS/tasks.c **** 		}
3451:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3452:../Dave/Generated/FREERTOS/tasks.c **** 
3453:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:../Dave/Generated/FREERTOS/tasks.c **** 		{
3455:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:../Dave/Generated/FREERTOS/tasks.c **** 		}
3457:../Dave/Generated/FREERTOS/tasks.c **** 		#else
3458:../Dave/Generated/FREERTOS/tasks.c **** 		{
3459:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:../Dave/Generated/FREERTOS/tasks.c **** 		}
3461:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3462:../Dave/Generated/FREERTOS/tasks.c **** 
3463:../Dave/Generated/FREERTOS/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:../Dave/Generated/FREERTOS/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:../Dave/Generated/FREERTOS/tasks.c **** 		just set to whatever is passed in. */
3466:../Dave/Generated/FREERTOS/tasks.c **** 		if( eState != eInvalid )
3467:../Dave/Generated/FREERTOS/tasks.c **** 		{
3468:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:../Dave/Generated/FREERTOS/tasks.c **** 		}
3470:../Dave/Generated/FREERTOS/tasks.c **** 		else
3471:../Dave/Generated/FREERTOS/tasks.c **** 		{
3472:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:../Dave/Generated/FREERTOS/tasks.c **** 		}
3474:../Dave/Generated/FREERTOS/tasks.c **** 
3475:../Dave/Generated/FREERTOS/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:../Dave/Generated/FREERTOS/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:../Dave/Generated/FREERTOS/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:../Dave/Generated/FREERTOS/tasks.c **** 		{
3479:../Dave/Generated/FREERTOS/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:../Dave/Generated/FREERTOS/tasks.c **** 			{
3481:../Dave/Generated/FREERTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:../Dave/Generated/FREERTOS/tasks.c **** 			}
3483:../Dave/Generated/FREERTOS/tasks.c **** 			#else
3484:../Dave/Generated/FREERTOS/tasks.c **** 			{
3485:../Dave/Generated/FREERTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:../Dave/Generated/FREERTOS/tasks.c **** 			}
3487:../Dave/Generated/FREERTOS/tasks.c **** 			#endif
3488:../Dave/Generated/FREERTOS/tasks.c **** 		}
3489:../Dave/Generated/FREERTOS/tasks.c **** 		else
3490:../Dave/Generated/FREERTOS/tasks.c **** 		{
3491:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:../Dave/Generated/FREERTOS/tasks.c **** 		}
3493:../Dave/Generated/FREERTOS/tasks.c **** 	}
3494:../Dave/Generated/FREERTOS/tasks.c **** 
3495:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3497:../Dave/Generated/FREERTOS/tasks.c **** 
3498:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:../Dave/Generated/FREERTOS/tasks.c **** 
3500:../Dave/Generated/FREERTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:../Dave/Generated/FREERTOS/tasks.c **** 	{
3502:../Dave/Generated/FREERTOS/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTask = 0;
3504:../Dave/Generated/FREERTOS/tasks.c **** 
3505:../Dave/Generated/FREERTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:../Dave/Generated/FREERTOS/tasks.c **** 		{
3507:../Dave/Generated/FREERTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:../Dave/Generated/FREERTOS/tasks.c **** 
3509:../Dave/Generated/FREERTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:../Dave/Generated/FREERTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:../Dave/Generated/FREERTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:../Dave/Generated/FREERTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:../Dave/Generated/FREERTOS/tasks.c **** 			do
3514:../Dave/Generated/FREERTOS/tasks.c **** 			{
3515:../Dave/Generated/FREERTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:../Dave/Generated/FREERTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:../Dave/Generated/FREERTOS/tasks.c **** 				uxTask++;
3518:../Dave/Generated/FREERTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:../Dave/Generated/FREERTOS/tasks.c **** 		}
3520:../Dave/Generated/FREERTOS/tasks.c **** 		else
3521:../Dave/Generated/FREERTOS/tasks.c **** 		{
3522:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:../Dave/Generated/FREERTOS/tasks.c **** 		}
3524:../Dave/Generated/FREERTOS/tasks.c **** 
3525:../Dave/Generated/FREERTOS/tasks.c **** 		return uxTask;
3526:../Dave/Generated/FREERTOS/tasks.c **** 	}
3527:../Dave/Generated/FREERTOS/tasks.c **** 
3528:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3530:../Dave/Generated/FREERTOS/tasks.c **** 
3531:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:../Dave/Generated/FREERTOS/tasks.c **** 
3533:../Dave/Generated/FREERTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:../Dave/Generated/FREERTOS/tasks.c **** 	{
3535:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulCount = 0U;
3536:../Dave/Generated/FREERTOS/tasks.c **** 
3537:../Dave/Generated/FREERTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3538:../Dave/Generated/FREERTOS/tasks.c **** 		{
3539:../Dave/Generated/FREERTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3540:../Dave/Generated/FREERTOS/tasks.c **** 			ulCount++;
3541:../Dave/Generated/FREERTOS/tasks.c **** 		}
3542:../Dave/Generated/FREERTOS/tasks.c **** 
3543:../Dave/Generated/FREERTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:../Dave/Generated/FREERTOS/tasks.c **** 
3545:../Dave/Generated/FREERTOS/tasks.c **** 		return ( uint16_t ) ulCount;
3546:../Dave/Generated/FREERTOS/tasks.c **** 	}
3547:../Dave/Generated/FREERTOS/tasks.c **** 
3548:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3550:../Dave/Generated/FREERTOS/tasks.c **** 
3551:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:../Dave/Generated/FREERTOS/tasks.c **** 
3553:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:../Dave/Generated/FREERTOS/tasks.c **** 	{
3555:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
3556:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3557:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn;
3558:../Dave/Generated/FREERTOS/tasks.c **** 
3559:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:../Dave/Generated/FREERTOS/tasks.c **** 
3561:../Dave/Generated/FREERTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:../Dave/Generated/FREERTOS/tasks.c **** 		{
3563:../Dave/Generated/FREERTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:../Dave/Generated/FREERTOS/tasks.c **** 		}
3565:../Dave/Generated/FREERTOS/tasks.c **** 		#else
3566:../Dave/Generated/FREERTOS/tasks.c **** 		{
3567:../Dave/Generated/FREERTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:../Dave/Generated/FREERTOS/tasks.c **** 		}
3569:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
3570:../Dave/Generated/FREERTOS/tasks.c **** 
3571:../Dave/Generated/FREERTOS/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:../Dave/Generated/FREERTOS/tasks.c **** 
3573:../Dave/Generated/FREERTOS/tasks.c **** 		return uxReturn;
3574:../Dave/Generated/FREERTOS/tasks.c **** 	}
3575:../Dave/Generated/FREERTOS/tasks.c **** 
3576:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3578:../Dave/Generated/FREERTOS/tasks.c **** 
3579:../Dave/Generated/FREERTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:../Dave/Generated/FREERTOS/tasks.c **** 
3581:../Dave/Generated/FREERTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:../Dave/Generated/FREERTOS/tasks.c **** 	{
3583:../Dave/Generated/FREERTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:../Dave/Generated/FREERTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:../Dave/Generated/FREERTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3586:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:../Dave/Generated/FREERTOS/tasks.c **** 
3588:../Dave/Generated/FREERTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:../Dave/Generated/FREERTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:../Dave/Generated/FREERTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:../Dave/Generated/FREERTOS/tasks.c **** 		{
3592:../Dave/Generated/FREERTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:../Dave/Generated/FREERTOS/tasks.c **** 		}
3594:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:../Dave/Generated/FREERTOS/tasks.c **** 
3596:../Dave/Generated/FREERTOS/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:../Dave/Generated/FREERTOS/tasks.c **** 		{
3598:../Dave/Generated/FREERTOS/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:../Dave/Generated/FREERTOS/tasks.c **** 			the stack and TCB. */
3600:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTCB );
3602:../Dave/Generated/FREERTOS/tasks.c **** 		}
3603:../Dave/Generated/FREERTOS/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:../Dave/Generated/FREERTOS/tasks.c **** 		{
3605:../Dave/Generated/FREERTOS/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:../Dave/Generated/FREERTOS/tasks.c **** 			check what was statically allocated before trying to free the
3607:../Dave/Generated/FREERTOS/tasks.c **** 			memory. */
3608:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:../Dave/Generated/FREERTOS/tasks.c **** 			{
3610:../Dave/Generated/FREERTOS/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:../Dave/Generated/FREERTOS/tasks.c **** 				must be freed. */
3612:../Dave/Generated/FREERTOS/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:../Dave/Generated/FREERTOS/tasks.c **** 				vPortFree( pxTCB );
3614:../Dave/Generated/FREERTOS/tasks.c **** 			}
3615:../Dave/Generated/FREERTOS/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:../Dave/Generated/FREERTOS/tasks.c **** 			{
3617:../Dave/Generated/FREERTOS/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:../Dave/Generated/FREERTOS/tasks.c **** 				only memory that must be freed. */
3619:../Dave/Generated/FREERTOS/tasks.c **** 				vPortFree( pxTCB );
3620:../Dave/Generated/FREERTOS/tasks.c **** 			}
3621:../Dave/Generated/FREERTOS/tasks.c **** 			else
3622:../Dave/Generated/FREERTOS/tasks.c **** 			{
3623:../Dave/Generated/FREERTOS/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:../Dave/Generated/FREERTOS/tasks.c **** 				nothing needs to be freed. */
3625:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:../Dave/Generated/FREERTOS/tasks.c **** 			}
3628:../Dave/Generated/FREERTOS/tasks.c **** 		}
3629:../Dave/Generated/FREERTOS/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:../Dave/Generated/FREERTOS/tasks.c **** 	}
3631:../Dave/Generated/FREERTOS/tasks.c **** 
3632:../Dave/Generated/FREERTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3634:../Dave/Generated/FREERTOS/tasks.c **** 
3635:../Dave/Generated/FREERTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:../Dave/Generated/FREERTOS/tasks.c **** {
3637:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxTCB;
3638:../Dave/Generated/FREERTOS/tasks.c **** 
3639:../Dave/Generated/FREERTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3640:../Dave/Generated/FREERTOS/tasks.c **** 	{
3641:../Dave/Generated/FREERTOS/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:../Dave/Generated/FREERTOS/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:../Dave/Generated/FREERTOS/tasks.c **** 		there is an item in the delayed list. */
3645:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3646:../Dave/Generated/FREERTOS/tasks.c **** 	}
3647:../Dave/Generated/FREERTOS/tasks.c **** 	else
3648:../Dave/Generated/FREERTOS/tasks.c **** 	{
3649:../Dave/Generated/FREERTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:../Dave/Generated/FREERTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:../Dave/Generated/FREERTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:../Dave/Generated/FREERTOS/tasks.c **** 		from the Blocked state. */
3653:../Dave/Generated/FREERTOS/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
3654:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3655:../Dave/Generated/FREERTOS/tasks.c **** 	}
3656:../Dave/Generated/FREERTOS/tasks.c **** }
3657:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3658:../Dave/Generated/FREERTOS/tasks.c **** 
3659:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:../Dave/Generated/FREERTOS/tasks.c **** 
3661:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:../Dave/Generated/FREERTOS/tasks.c **** 	{
3663:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xReturn;
3664:../Dave/Generated/FREERTOS/tasks.c **** 
3665:../Dave/Generated/FREERTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3666:../Dave/Generated/FREERTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:../Dave/Generated/FREERTOS/tasks.c **** 		individual execution thread. */
3668:../Dave/Generated/FREERTOS/tasks.c **** 		xReturn = pxCurrentTCB;
3669:../Dave/Generated/FREERTOS/tasks.c **** 
3670:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
3671:../Dave/Generated/FREERTOS/tasks.c **** 	}
3672:../Dave/Generated/FREERTOS/tasks.c **** 
3673:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3675:../Dave/Generated/FREERTOS/tasks.c **** 
3676:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:../Dave/Generated/FREERTOS/tasks.c **** 
3678:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:../Dave/Generated/FREERTOS/tasks.c **** 	{
3680:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
3681:../Dave/Generated/FREERTOS/tasks.c **** 
3682:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:../Dave/Generated/FREERTOS/tasks.c **** 		{
3684:../Dave/Generated/FREERTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:../Dave/Generated/FREERTOS/tasks.c **** 		}
3686:../Dave/Generated/FREERTOS/tasks.c **** 		else
3687:../Dave/Generated/FREERTOS/tasks.c **** 		{
3688:../Dave/Generated/FREERTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:../Dave/Generated/FREERTOS/tasks.c **** 			{
3690:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:../Dave/Generated/FREERTOS/tasks.c **** 			}
3692:../Dave/Generated/FREERTOS/tasks.c **** 			else
3693:../Dave/Generated/FREERTOS/tasks.c **** 			{
3694:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:../Dave/Generated/FREERTOS/tasks.c **** 			}
3696:../Dave/Generated/FREERTOS/tasks.c **** 		}
3697:../Dave/Generated/FREERTOS/tasks.c **** 
3698:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
3699:../Dave/Generated/FREERTOS/tasks.c **** 	}
3700:../Dave/Generated/FREERTOS/tasks.c **** 
3701:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3703:../Dave/Generated/FREERTOS/tasks.c **** 
3704:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:../Dave/Generated/FREERTOS/tasks.c **** 
3706:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:../Dave/Generated/FREERTOS/tasks.c **** 	{
3708:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:../Dave/Generated/FREERTOS/tasks.c **** 
3710:../Dave/Generated/FREERTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:../Dave/Generated/FREERTOS/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxMutexHolder != NULL )
3713:../Dave/Generated/FREERTOS/tasks.c **** 		{
3714:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:../Dave/Generated/FREERTOS/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:../Dave/Generated/FREERTOS/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:../Dave/Generated/FREERTOS/tasks.c **** 			{
3719:../Dave/Generated/FREERTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:../Dave/Generated/FREERTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:../Dave/Generated/FREERTOS/tasks.c **** 				not	being used for anything else. */
3722:../Dave/Generated/FREERTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:../Dave/Generated/FREERTOS/tasks.c **** 				{
3724:../Dave/Generated/FREERTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:../Dave/Generated/FREERTOS/tasks.c **** 				}
3726:../Dave/Generated/FREERTOS/tasks.c **** 				else
3727:../Dave/Generated/FREERTOS/tasks.c **** 				{
3728:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:../Dave/Generated/FREERTOS/tasks.c **** 				}
3730:../Dave/Generated/FREERTOS/tasks.c **** 
3731:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:../Dave/Generated/FREERTOS/tasks.c **** 				to be moved into a new list. */
3733:../Dave/Generated/FREERTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:../Dave/Generated/FREERTOS/tasks.c **** 				{
3735:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:../Dave/Generated/FREERTOS/tasks.c **** 					{
3737:../Dave/Generated/FREERTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:../Dave/Generated/FREERTOS/tasks.c **** 					}
3739:../Dave/Generated/FREERTOS/tasks.c **** 					else
3740:../Dave/Generated/FREERTOS/tasks.c **** 					{
3741:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:../Dave/Generated/FREERTOS/tasks.c **** 					}
3743:../Dave/Generated/FREERTOS/tasks.c **** 
3744:../Dave/Generated/FREERTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:../Dave/Generated/FREERTOS/tasks.c **** 				}
3748:../Dave/Generated/FREERTOS/tasks.c **** 				else
3749:../Dave/Generated/FREERTOS/tasks.c **** 				{
3750:../Dave/Generated/FREERTOS/tasks.c **** 					/* Just inherit the priority. */
3751:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:../Dave/Generated/FREERTOS/tasks.c **** 				}
3753:../Dave/Generated/FREERTOS/tasks.c **** 
3754:../Dave/Generated/FREERTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:../Dave/Generated/FREERTOS/tasks.c **** 			}
3756:../Dave/Generated/FREERTOS/tasks.c **** 			else
3757:../Dave/Generated/FREERTOS/tasks.c **** 			{
3758:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:../Dave/Generated/FREERTOS/tasks.c **** 			}
3760:../Dave/Generated/FREERTOS/tasks.c **** 		}
3761:../Dave/Generated/FREERTOS/tasks.c **** 		else
3762:../Dave/Generated/FREERTOS/tasks.c **** 		{
3763:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:../Dave/Generated/FREERTOS/tasks.c **** 		}
3765:../Dave/Generated/FREERTOS/tasks.c **** 	}
3766:../Dave/Generated/FREERTOS/tasks.c **** 
3767:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3768:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3769:../Dave/Generated/FREERTOS/tasks.c **** 
3770:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:../Dave/Generated/FREERTOS/tasks.c **** 
3772:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:../Dave/Generated/FREERTOS/tasks.c **** 	{
3774:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:../Dave/Generated/FREERTOS/tasks.c **** 
3777:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxMutexHolder != NULL )
3778:../Dave/Generated/FREERTOS/tasks.c **** 		{
3779:../Dave/Generated/FREERTOS/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:../Dave/Generated/FREERTOS/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:../Dave/Generated/FREERTOS/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:../Dave/Generated/FREERTOS/tasks.c **** 			be the running state task. */
3783:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:../Dave/Generated/FREERTOS/tasks.c **** 
3785:../Dave/Generated/FREERTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:../Dave/Generated/FREERTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:../Dave/Generated/FREERTOS/tasks.c **** 
3788:../Dave/Generated/FREERTOS/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:../Dave/Generated/FREERTOS/tasks.c **** 			task? */
3790:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:../Dave/Generated/FREERTOS/tasks.c **** 			{
3792:../Dave/Generated/FREERTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3794:../Dave/Generated/FREERTOS/tasks.c **** 				{
3795:../Dave/Generated/FREERTOS/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:../Dave/Generated/FREERTOS/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:../Dave/Generated/FREERTOS/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:../Dave/Generated/FREERTOS/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:../Dave/Generated/FREERTOS/tasks.c **** 					the	holding task from the ready	list. */
3800:../Dave/Generated/FREERTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:../Dave/Generated/FREERTOS/tasks.c **** 					{
3802:../Dave/Generated/FREERTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:../Dave/Generated/FREERTOS/tasks.c **** 					}
3804:../Dave/Generated/FREERTOS/tasks.c **** 					else
3805:../Dave/Generated/FREERTOS/tasks.c **** 					{
3806:../Dave/Generated/FREERTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:../Dave/Generated/FREERTOS/tasks.c **** 					}
3808:../Dave/Generated/FREERTOS/tasks.c **** 
3809:../Dave/Generated/FREERTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:../Dave/Generated/FREERTOS/tasks.c **** 					new	ready list. */
3811:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:../Dave/Generated/FREERTOS/tasks.c **** 
3814:../Dave/Generated/FREERTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:../Dave/Generated/FREERTOS/tasks.c **** 					any other purpose if this task is running, and it must be
3816:../Dave/Generated/FREERTOS/tasks.c **** 					running to give back the mutex. */
3817:../Dave/Generated/FREERTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:../Dave/Generated/FREERTOS/tasks.c **** 
3820:../Dave/Generated/FREERTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:../Dave/Generated/FREERTOS/tasks.c **** 					This is only actually required in the corner case whereby
3822:../Dave/Generated/FREERTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:../Dave/Generated/FREERTOS/tasks.c **** 					in an order different to that in which they were taken.
3824:../Dave/Generated/FREERTOS/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:../Dave/Generated/FREERTOS/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:../Dave/Generated/FREERTOS/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:../Dave/Generated/FREERTOS/tasks.c **** 					a task is waiting on it or not. */
3828:../Dave/Generated/FREERTOS/tasks.c **** 					xReturn = pdTRUE;
3829:../Dave/Generated/FREERTOS/tasks.c **** 				}
3830:../Dave/Generated/FREERTOS/tasks.c **** 				else
3831:../Dave/Generated/FREERTOS/tasks.c **** 				{
3832:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:../Dave/Generated/FREERTOS/tasks.c **** 				}
3834:../Dave/Generated/FREERTOS/tasks.c **** 			}
3835:../Dave/Generated/FREERTOS/tasks.c **** 			else
3836:../Dave/Generated/FREERTOS/tasks.c **** 			{
3837:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:../Dave/Generated/FREERTOS/tasks.c **** 			}
3839:../Dave/Generated/FREERTOS/tasks.c **** 		}
3840:../Dave/Generated/FREERTOS/tasks.c **** 		else
3841:../Dave/Generated/FREERTOS/tasks.c **** 		{
3842:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:../Dave/Generated/FREERTOS/tasks.c **** 		}
3844:../Dave/Generated/FREERTOS/tasks.c **** 
3845:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
3846:../Dave/Generated/FREERTOS/tasks.c **** 	}
3847:../Dave/Generated/FREERTOS/tasks.c **** 
3848:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3849:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3850:../Dave/Generated/FREERTOS/tasks.c **** 
3851:../Dave/Generated/FREERTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:../Dave/Generated/FREERTOS/tasks.c **** 
3853:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskEnterCritical( void )
3854:../Dave/Generated/FREERTOS/tasks.c **** 	{
3855:../Dave/Generated/FREERTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:../Dave/Generated/FREERTOS/tasks.c **** 
3857:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:../Dave/Generated/FREERTOS/tasks.c **** 		{
3859:../Dave/Generated/FREERTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:../Dave/Generated/FREERTOS/tasks.c **** 
3861:../Dave/Generated/FREERTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:../Dave/Generated/FREERTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:../Dave/Generated/FREERTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:../Dave/Generated/FREERTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:../Dave/Generated/FREERTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:../Dave/Generated/FREERTOS/tasks.c **** 			critical section. */
3867:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:../Dave/Generated/FREERTOS/tasks.c **** 			{
3869:../Dave/Generated/FREERTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:../Dave/Generated/FREERTOS/tasks.c **** 			}
3871:../Dave/Generated/FREERTOS/tasks.c **** 		}
3872:../Dave/Generated/FREERTOS/tasks.c **** 		else
3873:../Dave/Generated/FREERTOS/tasks.c **** 		{
3874:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:../Dave/Generated/FREERTOS/tasks.c **** 		}
3876:../Dave/Generated/FREERTOS/tasks.c **** 	}
3877:../Dave/Generated/FREERTOS/tasks.c **** 
3878:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3880:../Dave/Generated/FREERTOS/tasks.c **** 
3881:../Dave/Generated/FREERTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:../Dave/Generated/FREERTOS/tasks.c **** 
3883:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskExitCritical( void )
3884:../Dave/Generated/FREERTOS/tasks.c **** 	{
3885:../Dave/Generated/FREERTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:../Dave/Generated/FREERTOS/tasks.c **** 		{
3887:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:../Dave/Generated/FREERTOS/tasks.c **** 			{
3889:../Dave/Generated/FREERTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:../Dave/Generated/FREERTOS/tasks.c **** 
3891:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:../Dave/Generated/FREERTOS/tasks.c **** 				{
3893:../Dave/Generated/FREERTOS/tasks.c **** 					portENABLE_INTERRUPTS();
3894:../Dave/Generated/FREERTOS/tasks.c **** 				}
3895:../Dave/Generated/FREERTOS/tasks.c **** 				else
3896:../Dave/Generated/FREERTOS/tasks.c **** 				{
3897:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:../Dave/Generated/FREERTOS/tasks.c **** 				}
3899:../Dave/Generated/FREERTOS/tasks.c **** 			}
3900:../Dave/Generated/FREERTOS/tasks.c **** 			else
3901:../Dave/Generated/FREERTOS/tasks.c **** 			{
3902:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:../Dave/Generated/FREERTOS/tasks.c **** 			}
3904:../Dave/Generated/FREERTOS/tasks.c **** 		}
3905:../Dave/Generated/FREERTOS/tasks.c **** 		else
3906:../Dave/Generated/FREERTOS/tasks.c **** 		{
3907:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:../Dave/Generated/FREERTOS/tasks.c **** 		}
3909:../Dave/Generated/FREERTOS/tasks.c **** 	}
3910:../Dave/Generated/FREERTOS/tasks.c **** 
3911:../Dave/Generated/FREERTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3913:../Dave/Generated/FREERTOS/tasks.c **** 
3914:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:../Dave/Generated/FREERTOS/tasks.c **** 
3916:../Dave/Generated/FREERTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:../Dave/Generated/FREERTOS/tasks.c **** 	{
3918:../Dave/Generated/FREERTOS/tasks.c **** 	size_t x;
3919:../Dave/Generated/FREERTOS/tasks.c **** 
3920:../Dave/Generated/FREERTOS/tasks.c **** 		/* Start by copying the entire string. */
3921:../Dave/Generated/FREERTOS/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:../Dave/Generated/FREERTOS/tasks.c **** 
3923:../Dave/Generated/FREERTOS/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:../Dave/Generated/FREERTOS/tasks.c **** 		printed out. */
3925:../Dave/Generated/FREERTOS/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:../Dave/Generated/FREERTOS/tasks.c **** 		{
3927:../Dave/Generated/FREERTOS/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:../Dave/Generated/FREERTOS/tasks.c **** 		}
3929:../Dave/Generated/FREERTOS/tasks.c **** 
3930:../Dave/Generated/FREERTOS/tasks.c **** 		/* Terminate. */
3931:../Dave/Generated/FREERTOS/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:../Dave/Generated/FREERTOS/tasks.c **** 
3933:../Dave/Generated/FREERTOS/tasks.c **** 		/* Return the new end of string. */
3934:../Dave/Generated/FREERTOS/tasks.c **** 		return &( pcBuffer[ x ] );
3935:../Dave/Generated/FREERTOS/tasks.c **** 	}
3936:../Dave/Generated/FREERTOS/tasks.c **** 
3937:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
3939:../Dave/Generated/FREERTOS/tasks.c **** 
3940:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:../Dave/Generated/FREERTOS/tasks.c **** 
3942:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:../Dave/Generated/FREERTOS/tasks.c **** 	{
3944:../Dave/Generated/FREERTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:../Dave/Generated/FREERTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:../Dave/Generated/FREERTOS/tasks.c **** 	char cStatus;
3947:../Dave/Generated/FREERTOS/tasks.c **** 
3948:../Dave/Generated/FREERTOS/tasks.c **** 		/*
3949:../Dave/Generated/FREERTOS/tasks.c **** 		 * PLEASE NOTE:
3950:../Dave/Generated/FREERTOS/tasks.c **** 		 *
3951:../Dave/Generated/FREERTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:../Dave/Generated/FREERTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:../Dave/Generated/FREERTOS/tasks.c **** 		 * scheduler.
3954:../Dave/Generated/FREERTOS/tasks.c **** 		 *
3955:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:../Dave/Generated/FREERTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:../Dave/Generated/FREERTOS/tasks.c **** 		 * displays task names, states and stack usage.
3958:../Dave/Generated/FREERTOS/tasks.c **** 		 *
3959:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:../Dave/Generated/FREERTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:../Dave/Generated/FREERTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:../Dave/Generated/FREERTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:../Dave/Generated/FREERTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:../Dave/Generated/FREERTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:../Dave/Generated/FREERTOS/tasks.c **** 		 * snprintf() implementation!).
3966:../Dave/Generated/FREERTOS/tasks.c **** 		 *
3967:../Dave/Generated/FREERTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:../Dave/Generated/FREERTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:../Dave/Generated/FREERTOS/tasks.c **** 		 * through a call to vTaskList().
3970:../Dave/Generated/FREERTOS/tasks.c **** 		 */
3971:../Dave/Generated/FREERTOS/tasks.c **** 
3972:../Dave/Generated/FREERTOS/tasks.c **** 
3973:../Dave/Generated/FREERTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:../Dave/Generated/FREERTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:../Dave/Generated/FREERTOS/tasks.c **** 
3976:../Dave/Generated/FREERTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:../Dave/Generated/FREERTOS/tasks.c **** 		function is executing. */
3978:../Dave/Generated/FREERTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:../Dave/Generated/FREERTOS/tasks.c **** 
3980:../Dave/Generated/FREERTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:../Dave/Generated/FREERTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:../Dave/Generated/FREERTOS/tasks.c **** 		equate to NULL. */
3983:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:../Dave/Generated/FREERTOS/tasks.c **** 
3985:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:../Dave/Generated/FREERTOS/tasks.c **** 		{
3987:../Dave/Generated/FREERTOS/tasks.c **** 			/* Generate the (binary) data. */
3988:../Dave/Generated/FREERTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:../Dave/Generated/FREERTOS/tasks.c **** 
3990:../Dave/Generated/FREERTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:../Dave/Generated/FREERTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:../Dave/Generated/FREERTOS/tasks.c **** 			{
3993:../Dave/Generated/FREERTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:../Dave/Generated/FREERTOS/tasks.c **** 				{
3995:../Dave/Generated/FREERTOS/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:../Dave/Generated/FREERTOS/tasks.c **** 										break;
3997:../Dave/Generated/FREERTOS/tasks.c **** 
3998:../Dave/Generated/FREERTOS/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:../Dave/Generated/FREERTOS/tasks.c **** 										break;
4000:../Dave/Generated/FREERTOS/tasks.c **** 
4001:../Dave/Generated/FREERTOS/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:../Dave/Generated/FREERTOS/tasks.c **** 										break;
4003:../Dave/Generated/FREERTOS/tasks.c **** 
4004:../Dave/Generated/FREERTOS/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:../Dave/Generated/FREERTOS/tasks.c **** 										break;
4006:../Dave/Generated/FREERTOS/tasks.c **** 
4007:../Dave/Generated/FREERTOS/tasks.c **** 					default:			/* Should not get here, but it is included
4008:../Dave/Generated/FREERTOS/tasks.c **** 										to prevent static checking errors. */
4009:../Dave/Generated/FREERTOS/tasks.c **** 										cStatus = 0x00;
4010:../Dave/Generated/FREERTOS/tasks.c **** 										break;
4011:../Dave/Generated/FREERTOS/tasks.c **** 				}
4012:../Dave/Generated/FREERTOS/tasks.c **** 
4013:../Dave/Generated/FREERTOS/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:../Dave/Generated/FREERTOS/tasks.c **** 				can be printed in tabular form more easily. */
4015:../Dave/Generated/FREERTOS/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:../Dave/Generated/FREERTOS/tasks.c **** 
4017:../Dave/Generated/FREERTOS/tasks.c **** 				/* Write the rest of the string. */
4018:../Dave/Generated/FREERTOS/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:../Dave/Generated/FREERTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:../Dave/Generated/FREERTOS/tasks.c **** 			}
4021:../Dave/Generated/FREERTOS/tasks.c **** 
4022:../Dave/Generated/FREERTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:../Dave/Generated/FREERTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:../Dave/Generated/FREERTOS/tasks.c **** 		}
4026:../Dave/Generated/FREERTOS/tasks.c **** 		else
4027:../Dave/Generated/FREERTOS/tasks.c **** 		{
4028:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:../Dave/Generated/FREERTOS/tasks.c **** 		}
4030:../Dave/Generated/FREERTOS/tasks.c **** 	}
4031:../Dave/Generated/FREERTOS/tasks.c **** 
4032:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:../Dave/Generated/FREERTOS/tasks.c **** /*----------------------------------------------------------*/
4034:../Dave/Generated/FREERTOS/tasks.c **** 
4035:../Dave/Generated/FREERTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:../Dave/Generated/FREERTOS/tasks.c **** 
4037:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:../Dave/Generated/FREERTOS/tasks.c **** 	{
4039:../Dave/Generated/FREERTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:../Dave/Generated/FREERTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:../Dave/Generated/FREERTOS/tasks.c **** 
4043:../Dave/Generated/FREERTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:../Dave/Generated/FREERTOS/tasks.c **** 		{
4045:../Dave/Generated/FREERTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:../Dave/Generated/FREERTOS/tasks.c **** 		}
4047:../Dave/Generated/FREERTOS/tasks.c **** 		#endif
4048:../Dave/Generated/FREERTOS/tasks.c **** 
4049:../Dave/Generated/FREERTOS/tasks.c **** 		/*
4050:../Dave/Generated/FREERTOS/tasks.c **** 		 * PLEASE NOTE:
4051:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4052:../Dave/Generated/FREERTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:../Dave/Generated/FREERTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:../Dave/Generated/FREERTOS/tasks.c **** 		 * scheduler.
4055:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4056:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:../Dave/Generated/FREERTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:../Dave/Generated/FREERTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:../Dave/Generated/FREERTOS/tasks.c **** 		 * in both absolute and percentage terms.
4060:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4061:../Dave/Generated/FREERTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:../Dave/Generated/FREERTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:../Dave/Generated/FREERTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:../Dave/Generated/FREERTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:../Dave/Generated/FREERTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:../Dave/Generated/FREERTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:../Dave/Generated/FREERTOS/tasks.c **** 		 * a full snprintf() implementation!).
4068:../Dave/Generated/FREERTOS/tasks.c **** 		 *
4069:../Dave/Generated/FREERTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:../Dave/Generated/FREERTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:../Dave/Generated/FREERTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:../Dave/Generated/FREERTOS/tasks.c **** 		 */
4073:../Dave/Generated/FREERTOS/tasks.c **** 
4074:../Dave/Generated/FREERTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:../Dave/Generated/FREERTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:../Dave/Generated/FREERTOS/tasks.c **** 
4077:../Dave/Generated/FREERTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:../Dave/Generated/FREERTOS/tasks.c **** 		function is executing. */
4079:../Dave/Generated/FREERTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:../Dave/Generated/FREERTOS/tasks.c **** 
4081:../Dave/Generated/FREERTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:../Dave/Generated/FREERTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:../Dave/Generated/FREERTOS/tasks.c **** 		equate to NULL. */
4084:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:../Dave/Generated/FREERTOS/tasks.c **** 
4086:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:../Dave/Generated/FREERTOS/tasks.c **** 		{
4088:../Dave/Generated/FREERTOS/tasks.c **** 			/* Generate the (binary) data. */
4089:../Dave/Generated/FREERTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:../Dave/Generated/FREERTOS/tasks.c **** 
4091:../Dave/Generated/FREERTOS/tasks.c **** 			/* For percentage calculations. */
4092:../Dave/Generated/FREERTOS/tasks.c **** 			ulTotalTime /= 100UL;
4093:../Dave/Generated/FREERTOS/tasks.c **** 
4094:../Dave/Generated/FREERTOS/tasks.c **** 			/* Avoid divide by zero errors. */
4095:../Dave/Generated/FREERTOS/tasks.c **** 			if( ulTotalTime > 0 )
4096:../Dave/Generated/FREERTOS/tasks.c **** 			{
4097:../Dave/Generated/FREERTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:../Dave/Generated/FREERTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:../Dave/Generated/FREERTOS/tasks.c **** 				{
4100:../Dave/Generated/FREERTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:../Dave/Generated/FREERTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:../Dave/Generated/FREERTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:../Dave/Generated/FREERTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:../Dave/Generated/FREERTOS/tasks.c **** 
4105:../Dave/Generated/FREERTOS/tasks.c **** 					/* Write the task name to the string, padding with
4106:../Dave/Generated/FREERTOS/tasks.c **** 					spaces so it can be printed in tabular form more
4107:../Dave/Generated/FREERTOS/tasks.c **** 					easily. */
4108:../Dave/Generated/FREERTOS/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:../Dave/Generated/FREERTOS/tasks.c **** 
4110:../Dave/Generated/FREERTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:../Dave/Generated/FREERTOS/tasks.c **** 					{
4112:../Dave/Generated/FREERTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:../Dave/Generated/FREERTOS/tasks.c **** 						{
4114:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:../Dave/Generated/FREERTOS/tasks.c **** 						}
4116:../Dave/Generated/FREERTOS/tasks.c **** 						#else
4117:../Dave/Generated/FREERTOS/tasks.c **** 						{
4118:../Dave/Generated/FREERTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:../Dave/Generated/FREERTOS/tasks.c **** 							printf() library can be used. */
4120:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:../Dave/Generated/FREERTOS/tasks.c **** 						}
4122:../Dave/Generated/FREERTOS/tasks.c **** 						#endif
4123:../Dave/Generated/FREERTOS/tasks.c **** 					}
4124:../Dave/Generated/FREERTOS/tasks.c **** 					else
4125:../Dave/Generated/FREERTOS/tasks.c **** 					{
4126:../Dave/Generated/FREERTOS/tasks.c **** 						/* If the percentage is zero here then the task has
4127:../Dave/Generated/FREERTOS/tasks.c **** 						consumed less than 1% of the total run time. */
4128:../Dave/Generated/FREERTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:../Dave/Generated/FREERTOS/tasks.c **** 						{
4130:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:../Dave/Generated/FREERTOS/tasks.c **** 						}
4132:../Dave/Generated/FREERTOS/tasks.c **** 						#else
4133:../Dave/Generated/FREERTOS/tasks.c **** 						{
4134:../Dave/Generated/FREERTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:../Dave/Generated/FREERTOS/tasks.c **** 							printf() library can be used. */
4136:../Dave/Generated/FREERTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:../Dave/Generated/FREERTOS/tasks.c **** 						}
4138:../Dave/Generated/FREERTOS/tasks.c **** 						#endif
4139:../Dave/Generated/FREERTOS/tasks.c **** 					}
4140:../Dave/Generated/FREERTOS/tasks.c **** 
4141:../Dave/Generated/FREERTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:../Dave/Generated/FREERTOS/tasks.c **** 				}
4143:../Dave/Generated/FREERTOS/tasks.c **** 			}
4144:../Dave/Generated/FREERTOS/tasks.c **** 			else
4145:../Dave/Generated/FREERTOS/tasks.c **** 			{
4146:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:../Dave/Generated/FREERTOS/tasks.c **** 			}
4148:../Dave/Generated/FREERTOS/tasks.c **** 
4149:../Dave/Generated/FREERTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:../Dave/Generated/FREERTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:../Dave/Generated/FREERTOS/tasks.c **** 		}
4153:../Dave/Generated/FREERTOS/tasks.c **** 		else
4154:../Dave/Generated/FREERTOS/tasks.c **** 		{
4155:../Dave/Generated/FREERTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:../Dave/Generated/FREERTOS/tasks.c **** 		}
4157:../Dave/Generated/FREERTOS/tasks.c **** 	}
4158:../Dave/Generated/FREERTOS/tasks.c **** 
4159:../Dave/Generated/FREERTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4161:../Dave/Generated/FREERTOS/tasks.c **** 
4162:../Dave/Generated/FREERTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:../Dave/Generated/FREERTOS/tasks.c **** {
4164:../Dave/Generated/FREERTOS/tasks.c **** TickType_t uxReturn;
4165:../Dave/Generated/FREERTOS/tasks.c **** 
4166:../Dave/Generated/FREERTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:../Dave/Generated/FREERTOS/tasks.c **** 
4168:../Dave/Generated/FREERTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:../Dave/Generated/FREERTOS/tasks.c **** 	queues and semaphores. */
4170:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4171:../Dave/Generated/FREERTOS/tasks.c **** 
4172:../Dave/Generated/FREERTOS/tasks.c **** 	return uxReturn;
4173:../Dave/Generated/FREERTOS/tasks.c **** }
4174:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4175:../Dave/Generated/FREERTOS/tasks.c **** 
4176:../Dave/Generated/FREERTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:../Dave/Generated/FREERTOS/tasks.c **** 
4178:../Dave/Generated/FREERTOS/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:../Dave/Generated/FREERTOS/tasks.c **** 	{
4180:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:../Dave/Generated/FREERTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:../Dave/Generated/FREERTOS/tasks.c **** 		{
4184:../Dave/Generated/FREERTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:../Dave/Generated/FREERTOS/tasks.c **** 		}
4186:../Dave/Generated/FREERTOS/tasks.c **** 
4187:../Dave/Generated/FREERTOS/tasks.c **** 		return pxCurrentTCB;
4188:../Dave/Generated/FREERTOS/tasks.c **** 	}
4189:../Dave/Generated/FREERTOS/tasks.c **** 
4190:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4191:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4192:../Dave/Generated/FREERTOS/tasks.c **** 
4193:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:../Dave/Generated/FREERTOS/tasks.c **** 
4195:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:../Dave/Generated/FREERTOS/tasks.c **** 	{
4197:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulReturn;
4198:../Dave/Generated/FREERTOS/tasks.c **** 
4199:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
4200:../Dave/Generated/FREERTOS/tasks.c **** 		{
4201:../Dave/Generated/FREERTOS/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:../Dave/Generated/FREERTOS/tasks.c **** 			{
4204:../Dave/Generated/FREERTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:../Dave/Generated/FREERTOS/tasks.c **** 
4207:../Dave/Generated/FREERTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4208:../Dave/Generated/FREERTOS/tasks.c **** 				{
4209:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4210:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:../Dave/Generated/FREERTOS/tasks.c **** 
4212:../Dave/Generated/FREERTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:../Dave/Generated/FREERTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4214:../Dave/Generated/FREERTOS/tasks.c **** 					critical section exits) - but it is not something that
4215:../Dave/Generated/FREERTOS/tasks.c **** 					application code should ever do. */
4216:../Dave/Generated/FREERTOS/tasks.c **** 					portYIELD_WITHIN_API();
4217:../Dave/Generated/FREERTOS/tasks.c **** 				}
4218:../Dave/Generated/FREERTOS/tasks.c **** 				else
4219:../Dave/Generated/FREERTOS/tasks.c **** 				{
4220:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:../Dave/Generated/FREERTOS/tasks.c **** 				}
4222:../Dave/Generated/FREERTOS/tasks.c **** 			}
4223:../Dave/Generated/FREERTOS/tasks.c **** 			else
4224:../Dave/Generated/FREERTOS/tasks.c **** 			{
4225:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:../Dave/Generated/FREERTOS/tasks.c **** 			}
4227:../Dave/Generated/FREERTOS/tasks.c **** 		}
4228:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
4229:../Dave/Generated/FREERTOS/tasks.c **** 
4230:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
4231:../Dave/Generated/FREERTOS/tasks.c **** 		{
4232:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:../Dave/Generated/FREERTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4234:../Dave/Generated/FREERTOS/tasks.c **** 
4235:../Dave/Generated/FREERTOS/tasks.c **** 			if( ulReturn != 0UL )
4236:../Dave/Generated/FREERTOS/tasks.c **** 			{
4237:../Dave/Generated/FREERTOS/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:../Dave/Generated/FREERTOS/tasks.c **** 				{
4239:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:../Dave/Generated/FREERTOS/tasks.c **** 				}
4241:../Dave/Generated/FREERTOS/tasks.c **** 				else
4242:../Dave/Generated/FREERTOS/tasks.c **** 				{
4243:../Dave/Generated/FREERTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:../Dave/Generated/FREERTOS/tasks.c **** 				}
4245:../Dave/Generated/FREERTOS/tasks.c **** 			}
4246:../Dave/Generated/FREERTOS/tasks.c **** 			else
4247:../Dave/Generated/FREERTOS/tasks.c **** 			{
4248:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:../Dave/Generated/FREERTOS/tasks.c **** 			}
4250:../Dave/Generated/FREERTOS/tasks.c **** 
4251:../Dave/Generated/FREERTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4252:../Dave/Generated/FREERTOS/tasks.c **** 		}
4253:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
4254:../Dave/Generated/FREERTOS/tasks.c **** 
4255:../Dave/Generated/FREERTOS/tasks.c **** 		return ulReturn;
4256:../Dave/Generated/FREERTOS/tasks.c **** 	}
4257:../Dave/Generated/FREERTOS/tasks.c **** 
4258:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4260:../Dave/Generated/FREERTOS/tasks.c **** 
4261:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:../Dave/Generated/FREERTOS/tasks.c **** 
4263:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:../Dave/Generated/FREERTOS/tasks.c **** 	{
4265:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
4266:../Dave/Generated/FREERTOS/tasks.c **** 
4267:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
4268:../Dave/Generated/FREERTOS/tasks.c **** 		{
4269:../Dave/Generated/FREERTOS/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:../Dave/Generated/FREERTOS/tasks.c **** 			{
4272:../Dave/Generated/FREERTOS/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:../Dave/Generated/FREERTOS/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:../Dave/Generated/FREERTOS/tasks.c **** 				clear the value to zero. */
4275:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:../Dave/Generated/FREERTOS/tasks.c **** 
4277:../Dave/Generated/FREERTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4279:../Dave/Generated/FREERTOS/tasks.c **** 
4280:../Dave/Generated/FREERTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:../Dave/Generated/FREERTOS/tasks.c **** 				{
4282:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:../Dave/Generated/FREERTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:../Dave/Generated/FREERTOS/tasks.c **** 
4285:../Dave/Generated/FREERTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:../Dave/Generated/FREERTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4287:../Dave/Generated/FREERTOS/tasks.c **** 					critical section exits) - but it is not something that
4288:../Dave/Generated/FREERTOS/tasks.c **** 					application code should ever do. */
4289:../Dave/Generated/FREERTOS/tasks.c **** 					portYIELD_WITHIN_API();
4290:../Dave/Generated/FREERTOS/tasks.c **** 				}
4291:../Dave/Generated/FREERTOS/tasks.c **** 				else
4292:../Dave/Generated/FREERTOS/tasks.c **** 				{
4293:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:../Dave/Generated/FREERTOS/tasks.c **** 				}
4295:../Dave/Generated/FREERTOS/tasks.c **** 			}
4296:../Dave/Generated/FREERTOS/tasks.c **** 			else
4297:../Dave/Generated/FREERTOS/tasks.c **** 			{
4298:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:../Dave/Generated/FREERTOS/tasks.c **** 			}
4300:../Dave/Generated/FREERTOS/tasks.c **** 		}
4301:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
4302:../Dave/Generated/FREERTOS/tasks.c **** 
4303:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
4304:../Dave/Generated/FREERTOS/tasks.c **** 		{
4305:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:../Dave/Generated/FREERTOS/tasks.c **** 
4307:../Dave/Generated/FREERTOS/tasks.c **** 			if( pulNotificationValue != NULL )
4308:../Dave/Generated/FREERTOS/tasks.c **** 			{
4309:../Dave/Generated/FREERTOS/tasks.c **** 				/* Output the current notification value, which may or may not
4310:../Dave/Generated/FREERTOS/tasks.c **** 				have changed. */
4311:../Dave/Generated/FREERTOS/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:../Dave/Generated/FREERTOS/tasks.c **** 			}
4313:../Dave/Generated/FREERTOS/tasks.c **** 
4314:../Dave/Generated/FREERTOS/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:../Dave/Generated/FREERTOS/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:../Dave/Generated/FREERTOS/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:../Dave/Generated/FREERTOS/tasks.c **** 			unblocked because of a timeout. */
4318:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:../Dave/Generated/FREERTOS/tasks.c **** 			{
4320:../Dave/Generated/FREERTOS/tasks.c **** 				/* A notification was not received. */
4321:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdFALSE;
4322:../Dave/Generated/FREERTOS/tasks.c **** 			}
4323:../Dave/Generated/FREERTOS/tasks.c **** 			else
4324:../Dave/Generated/FREERTOS/tasks.c **** 			{
4325:../Dave/Generated/FREERTOS/tasks.c **** 				/* A notification was already pending or a notification was
4326:../Dave/Generated/FREERTOS/tasks.c **** 				received while the task was waiting. */
4327:../Dave/Generated/FREERTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdTRUE;
4329:../Dave/Generated/FREERTOS/tasks.c **** 			}
4330:../Dave/Generated/FREERTOS/tasks.c **** 
4331:../Dave/Generated/FREERTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:../Dave/Generated/FREERTOS/tasks.c **** 		}
4333:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
4334:../Dave/Generated/FREERTOS/tasks.c **** 
4335:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
4336:../Dave/Generated/FREERTOS/tasks.c **** 	}
4337:../Dave/Generated/FREERTOS/tasks.c **** 
4338:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4340:../Dave/Generated/FREERTOS/tasks.c **** 
4341:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:../Dave/Generated/FREERTOS/tasks.c **** 
4343:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:../Dave/Generated/FREERTOS/tasks.c **** 	{
4345:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
4346:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:../Dave/Generated/FREERTOS/tasks.c **** 
4349:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4350:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:../Dave/Generated/FREERTOS/tasks.c **** 
4352:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
4353:../Dave/Generated/FREERTOS/tasks.c **** 		{
4354:../Dave/Generated/FREERTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:../Dave/Generated/FREERTOS/tasks.c **** 			{
4356:../Dave/Generated/FREERTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:../Dave/Generated/FREERTOS/tasks.c **** 			}
4358:../Dave/Generated/FREERTOS/tasks.c **** 
4359:../Dave/Generated/FREERTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:../Dave/Generated/FREERTOS/tasks.c **** 
4361:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4362:../Dave/Generated/FREERTOS/tasks.c **** 
4363:../Dave/Generated/FREERTOS/tasks.c **** 			switch( eAction )
4364:../Dave/Generated/FREERTOS/tasks.c **** 			{
4365:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetBits	:
4366:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4367:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4368:../Dave/Generated/FREERTOS/tasks.c **** 
4369:../Dave/Generated/FREERTOS/tasks.c **** 				case eIncrement	:
4370:../Dave/Generated/FREERTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4372:../Dave/Generated/FREERTOS/tasks.c **** 
4373:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4374:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4376:../Dave/Generated/FREERTOS/tasks.c **** 
4377:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:../Dave/Generated/FREERTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4379:../Dave/Generated/FREERTOS/tasks.c **** 					{
4380:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4381:../Dave/Generated/FREERTOS/tasks.c **** 					}
4382:../Dave/Generated/FREERTOS/tasks.c **** 					else
4383:../Dave/Generated/FREERTOS/tasks.c **** 					{
4384:../Dave/Generated/FREERTOS/tasks.c **** 						/* The value could not be written to the task. */
4385:../Dave/Generated/FREERTOS/tasks.c **** 						xReturn = pdFAIL;
4386:../Dave/Generated/FREERTOS/tasks.c **** 					}
4387:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4388:../Dave/Generated/FREERTOS/tasks.c **** 
4389:../Dave/Generated/FREERTOS/tasks.c **** 				case eNoAction:
4390:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task is being notified without its notify value being
4391:../Dave/Generated/FREERTOS/tasks.c **** 					updated. */
4392:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4393:../Dave/Generated/FREERTOS/tasks.c **** 			}
4394:../Dave/Generated/FREERTOS/tasks.c **** 
4395:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY();
4396:../Dave/Generated/FREERTOS/tasks.c **** 
4397:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:../Dave/Generated/FREERTOS/tasks.c **** 			notification then unblock it now. */
4399:../Dave/Generated/FREERTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:../Dave/Generated/FREERTOS/tasks.c **** 			{
4401:../Dave/Generated/FREERTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:../Dave/Generated/FREERTOS/tasks.c **** 
4404:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task should not have been on an event list. */
4405:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:../Dave/Generated/FREERTOS/tasks.c **** 
4407:../Dave/Generated/FREERTOS/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:../Dave/Generated/FREERTOS/tasks.c **** 				{
4409:../Dave/Generated/FREERTOS/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:../Dave/Generated/FREERTOS/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:../Dave/Generated/FREERTOS/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:../Dave/Generated/FREERTOS/tasks.c **** 					because it will automatically get reset to a new value when
4414:../Dave/Generated/FREERTOS/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:../Dave/Generated/FREERTOS/tasks.c **** 					tickless idling is used it might be more important to enter
4416:../Dave/Generated/FREERTOS/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:../Dave/Generated/FREERTOS/tasks.c **** 					earliest possible time. */
4419:../Dave/Generated/FREERTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:../Dave/Generated/FREERTOS/tasks.c **** 				}
4421:../Dave/Generated/FREERTOS/tasks.c **** 				#endif
4422:../Dave/Generated/FREERTOS/tasks.c **** 
4423:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4424:../Dave/Generated/FREERTOS/tasks.c **** 				{
4425:../Dave/Generated/FREERTOS/tasks.c **** 					/* The notified task has a priority above the currently
4426:../Dave/Generated/FREERTOS/tasks.c **** 					executing task so a yield is required. */
4427:../Dave/Generated/FREERTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:../Dave/Generated/FREERTOS/tasks.c **** 				}
4429:../Dave/Generated/FREERTOS/tasks.c **** 				else
4430:../Dave/Generated/FREERTOS/tasks.c **** 				{
4431:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:../Dave/Generated/FREERTOS/tasks.c **** 				}
4433:../Dave/Generated/FREERTOS/tasks.c **** 			}
4434:../Dave/Generated/FREERTOS/tasks.c **** 			else
4435:../Dave/Generated/FREERTOS/tasks.c **** 			{
4436:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:../Dave/Generated/FREERTOS/tasks.c **** 			}
4438:../Dave/Generated/FREERTOS/tasks.c **** 		}
4439:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
4440:../Dave/Generated/FREERTOS/tasks.c **** 
4441:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
4442:../Dave/Generated/FREERTOS/tasks.c **** 	}
4443:../Dave/Generated/FREERTOS/tasks.c **** 
4444:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4446:../Dave/Generated/FREERTOS/tasks.c **** 
4447:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:../Dave/Generated/FREERTOS/tasks.c **** 
4449:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:../Dave/Generated/FREERTOS/tasks.c **** 	{
4451:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
4452:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:../Dave/Generated/FREERTOS/tasks.c **** 
4456:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4457:../Dave/Generated/FREERTOS/tasks.c **** 
4458:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
4473:../Dave/Generated/FREERTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:../Dave/Generated/FREERTOS/tasks.c **** 
4476:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:../Dave/Generated/FREERTOS/tasks.c **** 
4478:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:../Dave/Generated/FREERTOS/tasks.c **** 		{
4480:../Dave/Generated/FREERTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4481:../Dave/Generated/FREERTOS/tasks.c **** 			{
4482:../Dave/Generated/FREERTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:../Dave/Generated/FREERTOS/tasks.c **** 			}
4484:../Dave/Generated/FREERTOS/tasks.c **** 
4485:../Dave/Generated/FREERTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:../Dave/Generated/FREERTOS/tasks.c **** 
4488:../Dave/Generated/FREERTOS/tasks.c **** 			switch( eAction )
4489:../Dave/Generated/FREERTOS/tasks.c **** 			{
4490:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetBits	:
4491:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4493:../Dave/Generated/FREERTOS/tasks.c **** 
4494:../Dave/Generated/FREERTOS/tasks.c **** 				case eIncrement	:
4495:../Dave/Generated/FREERTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4497:../Dave/Generated/FREERTOS/tasks.c **** 
4498:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4499:../Dave/Generated/FREERTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4501:../Dave/Generated/FREERTOS/tasks.c **** 
4502:../Dave/Generated/FREERTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:../Dave/Generated/FREERTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:../Dave/Generated/FREERTOS/tasks.c **** 					{
4505:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:../Dave/Generated/FREERTOS/tasks.c **** 					}
4507:../Dave/Generated/FREERTOS/tasks.c **** 					else
4508:../Dave/Generated/FREERTOS/tasks.c **** 					{
4509:../Dave/Generated/FREERTOS/tasks.c **** 						/* The value could not be written to the task. */
4510:../Dave/Generated/FREERTOS/tasks.c **** 						xReturn = pdFAIL;
4511:../Dave/Generated/FREERTOS/tasks.c **** 					}
4512:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4513:../Dave/Generated/FREERTOS/tasks.c **** 
4514:../Dave/Generated/FREERTOS/tasks.c **** 				case eNoAction :
4515:../Dave/Generated/FREERTOS/tasks.c **** 					/* The task is being notified without its notify value being
4516:../Dave/Generated/FREERTOS/tasks.c **** 					updated. */
4517:../Dave/Generated/FREERTOS/tasks.c **** 					break;
4518:../Dave/Generated/FREERTOS/tasks.c **** 			}
4519:../Dave/Generated/FREERTOS/tasks.c **** 
4520:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:../Dave/Generated/FREERTOS/tasks.c **** 
4522:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:../Dave/Generated/FREERTOS/tasks.c **** 			notification then unblock it now. */
4524:../Dave/Generated/FREERTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:../Dave/Generated/FREERTOS/tasks.c **** 			{
4526:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task should not have been on an event list. */
4527:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:../Dave/Generated/FREERTOS/tasks.c **** 
4529:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:../Dave/Generated/FREERTOS/tasks.c **** 				{
4531:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4532:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4533:../Dave/Generated/FREERTOS/tasks.c **** 				}
4534:../Dave/Generated/FREERTOS/tasks.c **** 				else
4535:../Dave/Generated/FREERTOS/tasks.c **** 				{
4536:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:../Dave/Generated/FREERTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:../Dave/Generated/FREERTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:../Dave/Generated/FREERTOS/tasks.c **** 				}
4540:../Dave/Generated/FREERTOS/tasks.c **** 
4541:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:../Dave/Generated/FREERTOS/tasks.c **** 				{
4543:../Dave/Generated/FREERTOS/tasks.c **** 					/* The notified task has a priority above the currently
4544:../Dave/Generated/FREERTOS/tasks.c **** 					executing task so a yield is required. */
4545:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:../Dave/Generated/FREERTOS/tasks.c **** 					{
4547:../Dave/Generated/FREERTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:../Dave/Generated/FREERTOS/tasks.c **** 					}
4549:../Dave/Generated/FREERTOS/tasks.c **** 					else
4550:../Dave/Generated/FREERTOS/tasks.c **** 					{
4551:../Dave/Generated/FREERTOS/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:../Dave/Generated/FREERTOS/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:../Dave/Generated/FREERTOS/tasks.c **** 						safe FreeRTOS function. */
4554:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldPending = pdTRUE;
4555:../Dave/Generated/FREERTOS/tasks.c **** 					}
4556:../Dave/Generated/FREERTOS/tasks.c **** 				}
4557:../Dave/Generated/FREERTOS/tasks.c **** 				else
4558:../Dave/Generated/FREERTOS/tasks.c **** 				{
4559:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:../Dave/Generated/FREERTOS/tasks.c **** 				}
4561:../Dave/Generated/FREERTOS/tasks.c **** 			}
4562:../Dave/Generated/FREERTOS/tasks.c **** 		}
4563:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:../Dave/Generated/FREERTOS/tasks.c **** 
4565:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
4566:../Dave/Generated/FREERTOS/tasks.c **** 	}
4567:../Dave/Generated/FREERTOS/tasks.c **** 
4568:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4570:../Dave/Generated/FREERTOS/tasks.c **** 
4571:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:../Dave/Generated/FREERTOS/tasks.c **** 
4573:../Dave/Generated/FREERTOS/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:../Dave/Generated/FREERTOS/tasks.c **** 	{
4575:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
4576:../Dave/Generated/FREERTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:../Dave/Generated/FREERTOS/tasks.c **** 
4579:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4580:../Dave/Generated/FREERTOS/tasks.c **** 
4581:../Dave/Generated/FREERTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:../Dave/Generated/FREERTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:../Dave/Generated/FREERTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:../Dave/Generated/FREERTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:../Dave/Generated/FREERTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:../Dave/Generated/FREERTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:../Dave/Generated/FREERTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:../Dave/Generated/FREERTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:../Dave/Generated/FREERTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:../Dave/Generated/FREERTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:../Dave/Generated/FREERTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:../Dave/Generated/FREERTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:../Dave/Generated/FREERTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:../Dave/Generated/FREERTOS/tasks.c **** 		provided on the following link:
4596:../Dave/Generated/FREERTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:../Dave/Generated/FREERTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:../Dave/Generated/FREERTOS/tasks.c **** 
4599:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:../Dave/Generated/FREERTOS/tasks.c **** 
4601:../Dave/Generated/FREERTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:../Dave/Generated/FREERTOS/tasks.c **** 		{
4603:../Dave/Generated/FREERTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:../Dave/Generated/FREERTOS/tasks.c **** 
4606:../Dave/Generated/FREERTOS/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:../Dave/Generated/FREERTOS/tasks.c **** 			semaphore. */
4608:../Dave/Generated/FREERTOS/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4609:../Dave/Generated/FREERTOS/tasks.c **** 
4610:../Dave/Generated/FREERTOS/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:../Dave/Generated/FREERTOS/tasks.c **** 
4612:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:../Dave/Generated/FREERTOS/tasks.c **** 			notification then unblock it now. */
4614:../Dave/Generated/FREERTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:../Dave/Generated/FREERTOS/tasks.c **** 			{
4616:../Dave/Generated/FREERTOS/tasks.c **** 				/* The task should not have been on an event list. */
4617:../Dave/Generated/FREERTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:../Dave/Generated/FREERTOS/tasks.c **** 
4619:../Dave/Generated/FREERTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:../Dave/Generated/FREERTOS/tasks.c **** 				{
4621:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:../Dave/Generated/FREERTOS/tasks.c **** 				}
4624:../Dave/Generated/FREERTOS/tasks.c **** 				else
4625:../Dave/Generated/FREERTOS/tasks.c **** 				{
4626:../Dave/Generated/FREERTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:../Dave/Generated/FREERTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:../Dave/Generated/FREERTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:../Dave/Generated/FREERTOS/tasks.c **** 				}
4630:../Dave/Generated/FREERTOS/tasks.c **** 
4631:../Dave/Generated/FREERTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:../Dave/Generated/FREERTOS/tasks.c **** 				{
4633:../Dave/Generated/FREERTOS/tasks.c **** 					/* The notified task has a priority above the currently
4634:../Dave/Generated/FREERTOS/tasks.c **** 					executing task so a yield is required. */
4635:../Dave/Generated/FREERTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:../Dave/Generated/FREERTOS/tasks.c **** 					{
4637:../Dave/Generated/FREERTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4638:../Dave/Generated/FREERTOS/tasks.c **** 					}
4639:../Dave/Generated/FREERTOS/tasks.c **** 					else
4640:../Dave/Generated/FREERTOS/tasks.c **** 					{
4641:../Dave/Generated/FREERTOS/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:../Dave/Generated/FREERTOS/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:../Dave/Generated/FREERTOS/tasks.c **** 						safe FreeRTOS function. */
4644:../Dave/Generated/FREERTOS/tasks.c **** 						xYieldPending = pdTRUE;
4645:../Dave/Generated/FREERTOS/tasks.c **** 					}
4646:../Dave/Generated/FREERTOS/tasks.c **** 				}
4647:../Dave/Generated/FREERTOS/tasks.c **** 				else
4648:../Dave/Generated/FREERTOS/tasks.c **** 				{
4649:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:../Dave/Generated/FREERTOS/tasks.c **** 				}
4651:../Dave/Generated/FREERTOS/tasks.c **** 			}
4652:../Dave/Generated/FREERTOS/tasks.c **** 		}
4653:../Dave/Generated/FREERTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:../Dave/Generated/FREERTOS/tasks.c **** 	}
4655:../Dave/Generated/FREERTOS/tasks.c **** 
4656:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:../Dave/Generated/FREERTOS/tasks.c **** 
4658:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4659:../Dave/Generated/FREERTOS/tasks.c **** 
4660:../Dave/Generated/FREERTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:../Dave/Generated/FREERTOS/tasks.c **** 
4662:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:../Dave/Generated/FREERTOS/tasks.c **** 	{
4664:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
4665:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
4666:../Dave/Generated/FREERTOS/tasks.c **** 
4667:../Dave/Generated/FREERTOS/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:../Dave/Generated/FREERTOS/tasks.c **** 		its notification state cleared. */
4669:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:../Dave/Generated/FREERTOS/tasks.c **** 
4671:../Dave/Generated/FREERTOS/tasks.c **** 		taskENTER_CRITICAL();
4672:../Dave/Generated/FREERTOS/tasks.c **** 		{
4673:../Dave/Generated/FREERTOS/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:../Dave/Generated/FREERTOS/tasks.c **** 			{
4675:../Dave/Generated/FREERTOS/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4676:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdPASS;
4677:../Dave/Generated/FREERTOS/tasks.c **** 			}
4678:../Dave/Generated/FREERTOS/tasks.c **** 			else
4679:../Dave/Generated/FREERTOS/tasks.c **** 			{
4680:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdFAIL;
4681:../Dave/Generated/FREERTOS/tasks.c **** 			}
4682:../Dave/Generated/FREERTOS/tasks.c **** 		}
4683:../Dave/Generated/FREERTOS/tasks.c **** 		taskEXIT_CRITICAL();
4684:../Dave/Generated/FREERTOS/tasks.c **** 
4685:../Dave/Generated/FREERTOS/tasks.c **** 		return xReturn;
4686:../Dave/Generated/FREERTOS/tasks.c **** 	}
4687:../Dave/Generated/FREERTOS/tasks.c **** 
4688:../Dave/Generated/FREERTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
4690:../Dave/Generated/FREERTOS/tasks.c **** 
4691:../Dave/Generated/FREERTOS/tasks.c **** 
4692:../Dave/Generated/FREERTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:../Dave/Generated/FREERTOS/tasks.c **** {
 117              	 .loc 1 4693 0
 118              	 .cfi_startproc
 119              	 
 120              	 
 121              	.LVL8:
 122 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 123              	.LCFI1:
 124              	 .cfi_def_cfa_offset 24
 125              	 .cfi_offset 3,-24
 126              	 .cfi_offset 4,-20
 127              	 .cfi_offset 5,-16
 128              	 .cfi_offset 6,-12
 129              	 .cfi_offset 7,-8
 130              	 .cfi_offset 14,-4
4694:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTimeToWake;
4695:../Dave/Generated/FREERTOS/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 131              	 .loc 1 4695 0
 132 0002 1D4B     	 ldr r3,.L26
4696:../Dave/Generated/FREERTOS/tasks.c **** 
4697:../Dave/Generated/FREERTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:../Dave/Generated/FREERTOS/tasks.c **** 	{
4699:../Dave/Generated/FREERTOS/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:../Dave/Generated/FREERTOS/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:../Dave/Generated/FREERTOS/tasks.c **** 		when the task leaves the Blocked state. */
4702:../Dave/Generated/FREERTOS/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
 133              	 .loc 1 4702 0
 134 0004 1D4D     	 ldr r5,.L26+4
4695:../Dave/Generated/FREERTOS/tasks.c **** 
 135              	 .loc 1 4695 0
 136 0006 1E68     	 ldr r6,[r3]
 137              	.LVL9:
 138              	 .loc 1 4702 0
 139 0008 2A68     	 ldr r2,[r5]
4703:../Dave/Generated/FREERTOS/tasks.c **** 	}
4704:../Dave/Generated/FREERTOS/tasks.c **** 	#endif
4705:../Dave/Generated/FREERTOS/tasks.c **** 
4706:../Dave/Generated/FREERTOS/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:../Dave/Generated/FREERTOS/tasks.c **** 	as the same list item is used for both lists. */
4708:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 140              	 .loc 1 4708 0
 141 000a 2B68     	 ldr r3,[r5]
4702:../Dave/Generated/FREERTOS/tasks.c **** 	}
 142              	 .loc 1 4702 0
 143 000c 0027     	 movs r7,#0
4693:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTimeToWake;
 144              	 .loc 1 4693 0
 145 000e 0446     	 mov r4,r0
4702:../Dave/Generated/FREERTOS/tasks.c **** 	}
 146              	 .loc 1 4702 0
 147 0010 82F86D70 	 strb r7,[r2,#109]
 148              	 .loc 1 4708 0
 149 0014 181D     	 adds r0,r3,#4
 150              	.LVL10:
4693:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTimeToWake;
 151              	 .loc 1 4693 0
 152 0016 0F46     	 mov r7,r1
 153              	 .loc 1 4708 0
 154 0018 FFF7FEFF 	 bl uxListRemove
 155              	.LVL11:
 156 001c 40B9     	 cbnz r0,.L18
4709:../Dave/Generated/FREERTOS/tasks.c **** 	{
4710:../Dave/Generated/FREERTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:../Dave/Generated/FREERTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:../Dave/Generated/FREERTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 157              	 .loc 1 4712 0
 158 001e 2B68     	 ldr r3,[r5]
 159 0020 1749     	 ldr r1,.L26+8
 160 0022 D86A     	 ldr r0,[r3,#44]
 161 0024 0A68     	 ldr r2,[r1]
 162 0026 0123     	 movs r3,#1
 163 0028 8340     	 lsls r3,r3,r0
 164 002a 22EA0303 	 bic r3,r2,r3
 165 002e 0B60     	 str r3,[r1]
 166              	.L18:
4713:../Dave/Generated/FREERTOS/tasks.c **** 	}
4714:../Dave/Generated/FREERTOS/tasks.c **** 	else
4715:../Dave/Generated/FREERTOS/tasks.c **** 	{
4716:../Dave/Generated/FREERTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:../Dave/Generated/FREERTOS/tasks.c **** 	}
4718:../Dave/Generated/FREERTOS/tasks.c **** 
4719:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:../Dave/Generated/FREERTOS/tasks.c **** 	{
4721:../Dave/Generated/FREERTOS/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 167              	 .loc 1 4721 0
 168 0030 631C     	 adds r3,r4,#1
 169 0032 07D1     	 bne .L19
 170              	 .loc 1 4721 0 is_stmt 0 discriminator 1
 171 0034 37B1     	 cbz r7,.L19
4722:../Dave/Generated/FREERTOS/tasks.c **** 		{
4723:../Dave/Generated/FREERTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:../Dave/Generated/FREERTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:../Dave/Generated/FREERTOS/tasks.c **** 			indefinitely. */
4726:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 172              	 .loc 1 4726 0 is_stmt 1
 173 0036 2968     	 ldr r1,[r5]
 174 0038 1248     	 ldr r0,.L26+12
 175 003a 0431     	 adds r1,r1,#4
4727:../Dave/Generated/FREERTOS/tasks.c **** 		}
4728:../Dave/Generated/FREERTOS/tasks.c **** 		else
4729:../Dave/Generated/FREERTOS/tasks.c **** 		{
4730:../Dave/Generated/FREERTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:../Dave/Generated/FREERTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:../Dave/Generated/FREERTOS/tasks.c **** 			kernel will manage it correctly. */
4733:../Dave/Generated/FREERTOS/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
4734:../Dave/Generated/FREERTOS/tasks.c **** 
4735:../Dave/Generated/FREERTOS/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:../Dave/Generated/FREERTOS/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4737:../Dave/Generated/FREERTOS/tasks.c **** 
4738:../Dave/Generated/FREERTOS/tasks.c **** 			if( xTimeToWake < xConstTickCount )
4739:../Dave/Generated/FREERTOS/tasks.c **** 			{
4740:../Dave/Generated/FREERTOS/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:../Dave/Generated/FREERTOS/tasks.c **** 				list. */
4742:../Dave/Generated/FREERTOS/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4743:../Dave/Generated/FREERTOS/tasks.c **** 			}
4744:../Dave/Generated/FREERTOS/tasks.c **** 			else
4745:../Dave/Generated/FREERTOS/tasks.c **** 			{
4746:../Dave/Generated/FREERTOS/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:../Dave/Generated/FREERTOS/tasks.c **** 				is used. */
4748:../Dave/Generated/FREERTOS/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4749:../Dave/Generated/FREERTOS/tasks.c **** 
4750:../Dave/Generated/FREERTOS/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:../Dave/Generated/FREERTOS/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:../Dave/Generated/FREERTOS/tasks.c **** 				needs to be updated too. */
4753:../Dave/Generated/FREERTOS/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
4754:../Dave/Generated/FREERTOS/tasks.c **** 				{
4755:../Dave/Generated/FREERTOS/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
4756:../Dave/Generated/FREERTOS/tasks.c **** 				}
4757:../Dave/Generated/FREERTOS/tasks.c **** 				else
4758:../Dave/Generated/FREERTOS/tasks.c **** 				{
4759:../Dave/Generated/FREERTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:../Dave/Generated/FREERTOS/tasks.c **** 				}
4761:../Dave/Generated/FREERTOS/tasks.c **** 			}
4762:../Dave/Generated/FREERTOS/tasks.c **** 		}
4763:../Dave/Generated/FREERTOS/tasks.c **** 	}
4764:../Dave/Generated/FREERTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:../Dave/Generated/FREERTOS/tasks.c **** 	{
4766:../Dave/Generated/FREERTOS/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:../Dave/Generated/FREERTOS/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:../Dave/Generated/FREERTOS/tasks.c **** 		will manage it correctly. */
4769:../Dave/Generated/FREERTOS/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:../Dave/Generated/FREERTOS/tasks.c **** 
4771:../Dave/Generated/FREERTOS/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:../Dave/Generated/FREERTOS/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:../Dave/Generated/FREERTOS/tasks.c **** 
4774:../Dave/Generated/FREERTOS/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:../Dave/Generated/FREERTOS/tasks.c **** 		{
4776:../Dave/Generated/FREERTOS/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:../Dave/Generated/FREERTOS/tasks.c **** 		}
4779:../Dave/Generated/FREERTOS/tasks.c **** 		else
4780:../Dave/Generated/FREERTOS/tasks.c **** 		{
4781:../Dave/Generated/FREERTOS/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:../Dave/Generated/FREERTOS/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:../Dave/Generated/FREERTOS/tasks.c **** 
4784:../Dave/Generated/FREERTOS/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:../Dave/Generated/FREERTOS/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:../Dave/Generated/FREERTOS/tasks.c **** 			too. */
4787:../Dave/Generated/FREERTOS/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:../Dave/Generated/FREERTOS/tasks.c **** 			{
4789:../Dave/Generated/FREERTOS/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:../Dave/Generated/FREERTOS/tasks.c **** 			}
4791:../Dave/Generated/FREERTOS/tasks.c **** 			else
4792:../Dave/Generated/FREERTOS/tasks.c **** 			{
4793:../Dave/Generated/FREERTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:../Dave/Generated/FREERTOS/tasks.c **** 			}
4795:../Dave/Generated/FREERTOS/tasks.c **** 		}
4796:../Dave/Generated/FREERTOS/tasks.c **** 
4797:../Dave/Generated/FREERTOS/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:../Dave/Generated/FREERTOS/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:../Dave/Generated/FREERTOS/tasks.c **** 	}
4800:../Dave/Generated/FREERTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:../Dave/Generated/FREERTOS/tasks.c **** }
 176              	 .loc 1 4801 0
 177 003c BDE8F840 	 pop {r3,r4,r5,r6,r7,lr}
 178              	.LCFI2:
 179              	 .cfi_remember_state
 180              	 .cfi_restore 14
 181              	 .cfi_restore 7
 182              	 .cfi_restore 6
 183              	 .cfi_restore 5
 184              	 .cfi_restore 4
 185              	 .cfi_restore 3
 186              	 .cfi_def_cfa_offset 0
 187              	.LVL12:
4726:../Dave/Generated/FREERTOS/tasks.c **** 		}
 188              	 .loc 1 4726 0
 189 0040 FFF7FEBF 	 b vListInsertEnd
 190              	.LVL13:
 191              	.L19:
 192              	.LCFI3:
 193              	 .cfi_restore_state
4733:../Dave/Generated/FREERTOS/tasks.c **** 
 194              	 .loc 1 4733 0
 195 0044 3444     	 add r4,r4,r6
 196              	.LVL14:
4736:../Dave/Generated/FREERTOS/tasks.c **** 
 197              	 .loc 1 4736 0
 198 0046 2B68     	 ldr r3,[r5]
 199              	.LVL15:
 200 0048 0C4A     	 ldr r2,.L26+4
 201 004a 5C60     	 str r4,[r3,#4]
4738:../Dave/Generated/FREERTOS/tasks.c **** 			{
 202              	 .loc 1 4738 0
 203 004c B442     	 cmp r4,r6
 204 004e 07D2     	 bcs .L20
4742:../Dave/Generated/FREERTOS/tasks.c **** 			}
 205              	 .loc 1 4742 0
 206 0050 0D4B     	 ldr r3,.L26+16
 207 0052 1868     	 ldr r0,[r3]
 208 0054 1168     	 ldr r1,[r2]
 209              	 .loc 1 4801 0
 210 0056 BDE8F840 	 pop {r3,r4,r5,r6,r7,lr}
 211              	.LCFI4:
 212              	 .cfi_remember_state
 213              	 .cfi_restore 14
 214              	 .cfi_restore 7
 215              	 .cfi_restore 6
 216              	 .cfi_restore 5
 217              	 .cfi_restore 4
 218              	 .cfi_restore 3
 219              	 .cfi_def_cfa_offset 0
 220              	.LVL16:
4742:../Dave/Generated/FREERTOS/tasks.c **** 			}
 221              	 .loc 1 4742 0
 222 005a 0431     	 adds r1,r1,#4
 223 005c FFF7FEBF 	 b vListInsert
 224              	.LVL17:
 225              	.L20:
 226              	.LCFI5:
 227              	 .cfi_restore_state
4748:../Dave/Generated/FREERTOS/tasks.c **** 
 228              	 .loc 1 4748 0
 229 0060 0A4B     	 ldr r3,.L26+20
 230 0062 1868     	 ldr r0,[r3]
 231 0064 1168     	 ldr r1,[r2]
 232 0066 0431     	 adds r1,r1,#4
 233 0068 FFF7FEFF 	 bl vListInsert
 234              	.LVL18:
4753:../Dave/Generated/FREERTOS/tasks.c **** 				{
 235              	 .loc 1 4753 0
 236 006c 084B     	 ldr r3,.L26+24
 237 006e 1A68     	 ldr r2,[r3]
 238 0070 9442     	 cmp r4,r2
4755:../Dave/Generated/FREERTOS/tasks.c **** 				}
 239              	 .loc 1 4755 0
 240 0072 38BF     	 it cc
 241 0074 1C60     	 strcc r4,[r3]
 242 0076 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 243              	.LVL19:
 244              	.L27:
 245              	 .align 2
 246              	.L26:
 247 0078 00000000 	 .word .LANCHOR0
 248 007c 00000000 	 .word .LANCHOR1
 249 0080 00000000 	 .word .LANCHOR2
 250 0084 00000000 	 .word .LANCHOR3
 251 0088 00000000 	 .word .LANCHOR4
 252 008c 00000000 	 .word .LANCHOR5
 253 0090 00000000 	 .word .LANCHOR6
 254              	 .cfi_endproc
 255              	.LFE192:
 257              	 .section .text.unlikely.prvResetNextTaskUnblockTime,"ax",%progbits
 258              	 .align 2
 259              	 .thumb
 260              	 .thumb_func
 262              	prvResetNextTaskUnblockTime:
 263              	.LFB177:
3636:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxTCB;
 264              	 .loc 1 3636 0
 265              	 .cfi_startproc
 266              	 
 267              	 
 268              	 
3639:../Dave/Generated/FREERTOS/tasks.c **** 	{
 269              	 .loc 1 3639 0
 270 0000 074B     	 ldr r3,.L33
 271 0002 084A     	 ldr r2,.L33+4
 272 0004 1968     	 ldr r1,[r3]
 273 0006 0968     	 ldr r1,[r1]
 274 0008 19B9     	 cbnz r1,.L32
3645:../Dave/Generated/FREERTOS/tasks.c **** 	}
 275              	 .loc 1 3645 0
 276 000a 4FF0FF33 	 mov r3,#-1
 277 000e 1360     	 str r3,[r2]
 278 0010 7047     	 bx lr
 279              	.L32:
 280              	.LBB169:
 281              	.LBB170:
3653:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 282              	 .loc 1 3653 0
 283 0012 1B68     	 ldr r3,[r3]
 284              	.LVL20:
 285 0014 DB68     	 ldr r3,[r3,#12]
 286              	.LVL21:
3654:../Dave/Generated/FREERTOS/tasks.c **** 	}
 287              	 .loc 1 3654 0
 288 0016 DB68     	 ldr r3,[r3,#12]
 289              	.LVL22:
 290 0018 5B68     	 ldr r3,[r3,#4]
 291              	.LVL23:
 292 001a 1360     	 str r3,[r2]
 293 001c 7047     	 bx lr
 294              	.L34:
 295 001e 00BF     	 .align 2
 296              	.L33:
 297 0020 00000000 	 .word .LANCHOR5
 298 0024 00000000 	 .word .LANCHOR6
 299              	.LBE170:
 300              	.LBE169:
 301              	 .cfi_endproc
 302              	.LFE177:
 304              	 .section .text.xTaskCreate,"ax",%progbits
 305              	 .align 2
 306              	 .global xTaskCreate
 307              	 .thumb
 308              	 .thumb_func
 310              	xTaskCreate:
 311              	.LFB128:
 682:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 312              	 .loc 1 682 0
 313              	 .cfi_startproc
 314              	 
 315              	 
 316              	.LVL24:
 317 0000 2DE9F84F 	 push {r3,r4,r5,r6,r7,r8,r9,r10,fp,lr}
 318              	.LCFI6:
 319              	 .cfi_def_cfa_offset 40
 320              	 .cfi_offset 3,-40
 321              	 .cfi_offset 4,-36
 322              	 .cfi_offset 5,-32
 323              	 .cfi_offset 6,-28
 324              	 .cfi_offset 7,-24
 325              	 .cfi_offset 8,-20
 326              	 .cfi_offset 9,-16
 327              	 .cfi_offset 10,-12
 328              	 .cfi_offset 11,-8
 329              	 .cfi_offset 14,-4
 330              	.LBB178:
 716:../Dave/Generated/FREERTOS/tasks.c **** 
 331              	 .loc 1 716 0
 332 0004 9600     	 lsls r6,r2,#2
 333              	.LBE178:
 682:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 334              	 .loc 1 682 0
 335 0006 8246     	 mov r10,r0
 336              	.LBB179:
 716:../Dave/Generated/FREERTOS/tasks.c **** 
 337              	 .loc 1 716 0
 338 0008 3046     	 mov r0,r6
 339              	.LVL25:
 340              	.LBE179:
 682:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxNewTCB;
 341              	 .loc 1 682 0
 342 000a 0D46     	 mov r5,r1
 343 000c 9946     	 mov r9,r3
 344 000e DDF82C80 	 ldr r8,[sp,#44]
 345              	.LBB180:
 716:../Dave/Generated/FREERTOS/tasks.c **** 
 346              	 .loc 1 716 0
 347 0012 FFF7FEFF 	 bl pvPortMalloc
 348              	.LVL26:
 718:../Dave/Generated/FREERTOS/tasks.c **** 			{
 349              	 .loc 1 718 0
 350 0016 0746     	 mov r7,r0
 351 0018 0028     	 cmp r0,#0
 352 001a 00F0DD80 	 beq .L36
 721:../Dave/Generated/FREERTOS/tasks.c **** 
 353              	 .loc 1 721 0
 354 001e 7020     	 movs r0,#112
 355              	.LVL27:
 356 0020 FFF7FEFF 	 bl pvPortMalloc
 357              	.LVL28:
 723:../Dave/Generated/FREERTOS/tasks.c **** 				{
 358              	 .loc 1 723 0
 359 0024 0446     	 mov r4,r0
 360 0026 0028     	 cmp r0,#0
 361 0028 00F0D380 	 beq .L37
 726:../Dave/Generated/FREERTOS/tasks.c **** 				}
 362              	 .loc 1 726 0
 363 002c 0763     	 str r7,[r0,#48]
 364              	.LVL29:
 365              	.LBE180:
 366              	.LBB181:
 367              	.LBB182:
 797:../Dave/Generated/FREERTOS/tasks.c **** 	}
 368              	 .loc 1 797 0
 369 002e 3246     	 mov r2,r6
 370 0030 3846     	 mov r0,r7
 371              	.LVL30:
 372 0032 A521     	 movs r1,#165
 373 0034 FFF7FEFF 	 bl memset
 374              	.LVL31:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 375              	 .loc 1 829 0
 376 0038 2B78     	 ldrb r3,[r5]
 807:../Dave/Generated/FREERTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 377              	 .loc 1 807 0
 378 003a 276B     	 ldr r7,[r4,#48]
 379              	.LVL32:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 380              	 .loc 1 829 0
 381 003c 84F83430 	 strb r3,[r4,#52]
 807:../Dave/Generated/FREERTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 382              	 .loc 1 807 0
 383 0040 043E     	 subs r6,r6,#4
 384              	.LVL33:
 834:../Dave/Generated/FREERTOS/tasks.c **** 		{
 385              	 .loc 1 834 0
 386 0042 2B78     	 ldrb r3,[r5]
 807:../Dave/Generated/FREERTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 387              	 .loc 1 807 0
 388 0044 3744     	 add r7,r7,r6
 808:../Dave/Generated/FREERTOS/tasks.c **** 
 389              	 .loc 1 808 0
 390 0046 27F00707 	 bic r7,r7,#7
 391              	.LVL34:
 834:../Dave/Generated/FREERTOS/tasks.c **** 		{
 392              	 .loc 1 834 0
 393 004a 002B     	 cmp r3,#0
 394 004c 47D0     	 beq .L38
 395              	.LVL35:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 396              	 .loc 1 829 0
 397 004e 6B78     	 ldrb r3,[r5,#1]
 398 0050 84F83530 	 strb r3,[r4,#53]
 834:../Dave/Generated/FREERTOS/tasks.c **** 		{
 399              	 .loc 1 834 0
 400 0054 6B78     	 ldrb r3,[r5,#1]
 401 0056 002B     	 cmp r3,#0
 402 0058 41D0     	 beq .L38
 403              	.LVL36:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 404              	 .loc 1 829 0
 405 005a AB78     	 ldrb r3,[r5,#2]
 406 005c 84F83630 	 strb r3,[r4,#54]
 834:../Dave/Generated/FREERTOS/tasks.c **** 		{
 407              	 .loc 1 834 0
 408 0060 AB78     	 ldrb r3,[r5,#2]
 409 0062 002B     	 cmp r3,#0
 410 0064 3BD0     	 beq .L38
 411              	.LVL37:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 412              	 .loc 1 829 0
 413 0066 EB78     	 ldrb r3,[r5,#3]
 414 0068 84F83730 	 strb r3,[r4,#55]
 834:../Dave/Generated/FREERTOS/tasks.c **** 		{
 415              	 .loc 1 834 0
 416 006c EB78     	 ldrb r3,[r5,#3]
 417 006e 002B     	 cmp r3,#0
 418 0070 35D0     	 beq .L38
 419              	.LVL38:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 420              	 .loc 1 829 0
 421 0072 2B79     	 ldrb r3,[r5,#4]
 422 0074 84F83830 	 strb r3,[r4,#56]
 834:../Dave/Generated/FREERTOS/tasks.c **** 		{
 423              	 .loc 1 834 0
 424 0078 2B79     	 ldrb r3,[r5,#4]
 425 007a 002B     	 cmp r3,#0
 426 007c 2FD0     	 beq .L38
 427              	.LVL39:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 428              	 .loc 1 829 0
 429 007e 6B79     	 ldrb r3,[r5,#5]
 430 0080 84F83930 	 strb r3,[r4,#57]
 834:../Dave/Generated/FREERTOS/tasks.c **** 		{
 431              	 .loc 1 834 0
 432 0084 6B79     	 ldrb r3,[r5,#5]
 433 0086 53B3     	 cbz r3,.L38
 434              	.LVL40:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 435              	 .loc 1 829 0
 436 0088 AB79     	 ldrb r3,[r5,#6]
 437 008a 84F83A30 	 strb r3,[r4,#58]
 834:../Dave/Generated/FREERTOS/tasks.c **** 		{
 438              	 .loc 1 834 0
 439 008e AB79     	 ldrb r3,[r5,#6]
 440 0090 2BB3     	 cbz r3,.L38
 441              	.LVL41:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 442              	 .loc 1 829 0
 443 0092 EB79     	 ldrb r3,[r5,#7]
 444 0094 84F83B30 	 strb r3,[r4,#59]
 834:../Dave/Generated/FREERTOS/tasks.c **** 		{
 445              	 .loc 1 834 0
 446 0098 EB79     	 ldrb r3,[r5,#7]
 447 009a 03B3     	 cbz r3,.L38
 448              	.LVL42:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 449              	 .loc 1 829 0
 450 009c 2B7A     	 ldrb r3,[r5,#8]
 451 009e 84F83C30 	 strb r3,[r4,#60]
 834:../Dave/Generated/FREERTOS/tasks.c **** 		{
 452              	 .loc 1 834 0
 453 00a2 2B7A     	 ldrb r3,[r5,#8]
 454 00a4 DBB1     	 cbz r3,.L38
 455              	.LVL43:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 456              	 .loc 1 829 0
 457 00a6 6B7A     	 ldrb r3,[r5,#9]
 458 00a8 84F83D30 	 strb r3,[r4,#61]
 834:../Dave/Generated/FREERTOS/tasks.c **** 		{
 459              	 .loc 1 834 0
 460 00ac 6B7A     	 ldrb r3,[r5,#9]
 461 00ae B3B1     	 cbz r3,.L38
 462              	.LVL44:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 463              	 .loc 1 829 0
 464 00b0 AB7A     	 ldrb r3,[r5,#10]
 465 00b2 84F83E30 	 strb r3,[r4,#62]
 834:../Dave/Generated/FREERTOS/tasks.c **** 		{
 466              	 .loc 1 834 0
 467 00b6 AB7A     	 ldrb r3,[r5,#10]
 468 00b8 8BB1     	 cbz r3,.L38
 469              	.LVL45:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 470              	 .loc 1 829 0
 471 00ba EB7A     	 ldrb r3,[r5,#11]
 472 00bc 84F83F30 	 strb r3,[r4,#63]
 834:../Dave/Generated/FREERTOS/tasks.c **** 		{
 473              	 .loc 1 834 0
 474 00c0 EB7A     	 ldrb r3,[r5,#11]
 475 00c2 63B1     	 cbz r3,.L38
 476              	.LVL46:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 477              	 .loc 1 829 0
 478 00c4 2B7B     	 ldrb r3,[r5,#12]
 479 00c6 84F84030 	 strb r3,[r4,#64]
 834:../Dave/Generated/FREERTOS/tasks.c **** 		{
 480              	 .loc 1 834 0
 481 00ca 2B7B     	 ldrb r3,[r5,#12]
 482 00cc 3BB1     	 cbz r3,.L38
 483              	.LVL47:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 484              	 .loc 1 829 0
 485 00ce 6B7B     	 ldrb r3,[r5,#13]
 486 00d0 84F84130 	 strb r3,[r4,#65]
 834:../Dave/Generated/FREERTOS/tasks.c **** 		{
 487              	 .loc 1 834 0
 488 00d4 6B7B     	 ldrb r3,[r5,#13]
 489 00d6 13B1     	 cbz r3,.L38
 490              	.LVL48:
 829:../Dave/Generated/FREERTOS/tasks.c **** 
 491              	 .loc 1 829 0
 492 00d8 AB7B     	 ldrb r3,[r5,#14]
 493 00da 84F84230 	 strb r3,[r4,#66]
 494              	.LVL49:
 495              	.L38:
 496 00de 0A9E     	 ldr r6,[sp,#40]
 497 00e0 042E     	 cmp r6,#4
 846:../Dave/Generated/FREERTOS/tasks.c **** 
 498              	 .loc 1 846 0
 499 00e2 4FF00005 	 mov r5,#0
 500              	.LVL50:
 501 00e6 28BF     	 it cs
 502 00e8 0426     	 movcs r6,#4
 503              	.LVL51:
 867:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 504              	 .loc 1 867 0
 505 00ea 04F1040B 	 add fp,r4,#4
 859:../Dave/Generated/FREERTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 506              	 .loc 1 859 0
 507 00ee E662     	 str r6,[r4,#44]
 862:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 508              	 .loc 1 862 0
 509 00f0 E664     	 str r6,[r4,#76]
 867:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 510              	 .loc 1 867 0
 511 00f2 5846     	 mov r0,fp
 846:../Dave/Generated/FREERTOS/tasks.c **** 
 512              	 .loc 1 846 0
 513 00f4 84F84350 	 strb r5,[r4,#67]
 863:../Dave/Generated/FREERTOS/tasks.c **** 	}
 514              	 .loc 1 863 0
 515 00f8 2565     	 str r5,[r4,#80]
 867:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 516              	 .loc 1 867 0
 517 00fa FFF7FEFF 	 bl vListInitialiseItem
 518              	.LVL52:
 875:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 519              	 .loc 1 875 0
 520 00fe C6F10506 	 rsb r6,r6,#5
 521              	.LVL53:
 868:../Dave/Generated/FREERTOS/tasks.c **** 
 522              	 .loc 1 868 0
 523 0102 04F11800 	 add r0,r4,#24
 524 0106 FFF7FEFF 	 bl vListInitialiseItem
 525              	.LVL54:
 918:../Dave/Generated/FREERTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 526              	 .loc 1 918 0
 527 010a A566     	 str r5,[r4,#104]
 875:../Dave/Generated/FREERTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 528              	 .loc 1 875 0
 529 010c A661     	 str r6,[r4,#24]
 911:../Dave/Generated/FREERTOS/tasks.c **** 		}
 530              	 .loc 1 911 0
 531 010e 6565     	 str r5,[r4,#84]
 532 0110 A565     	 str r5,[r4,#88]
 533 0112 E565     	 str r5,[r4,#92]
 534 0114 2566     	 str r5,[r4,#96]
 535 0116 6566     	 str r5,[r4,#100]
 919:../Dave/Generated/FREERTOS/tasks.c **** 	}
 536              	 .loc 1 919 0
 537 0118 84F86C50 	 strb r5,[r4,#108]
 932:../Dave/Generated/FREERTOS/tasks.c **** 	}
 538              	 .loc 1 932 0
 539 011c 84F86D50 	 strb r5,[r4,#109]
 872:../Dave/Generated/FREERTOS/tasks.c **** 
 540              	 .loc 1 872 0
 541 0120 2461     	 str r4,[r4,#16]
 876:../Dave/Generated/FREERTOS/tasks.c **** 
 542              	 .loc 1 876 0
 543 0122 6462     	 str r4,[r4,#36]
 544              	.LVL55:
 946:../Dave/Generated/FREERTOS/tasks.c **** 	}
 545              	 .loc 1 946 0
 546 0124 3846     	 mov r0,r7
 547 0126 5146     	 mov r1,r10
 548 0128 4A46     	 mov r2,r9
 549 012a FFF7FEFF 	 bl pxPortInitialiseStack
 550              	.LVL56:
 551 012e 2060     	 str r0,[r4]
 950:../Dave/Generated/FREERTOS/tasks.c **** 	{
 552              	 .loc 1 950 0
 553 0130 B8F1000F 	 cmp r8,#0
 554 0134 01D0     	 beq .L39
 954:../Dave/Generated/FREERTOS/tasks.c **** 	}
 555              	 .loc 1 954 0
 556 0136 C8F80040 	 str r4,[r8]
 557              	.L39:
 558              	.LVL57:
 559              	.LBE182:
 560              	.LBE181:
 561              	.LBB183:
 562              	.LBB184:
 967:../Dave/Generated/FREERTOS/tasks.c **** 	{
 563              	 .loc 1 967 0
 564 013a FFF7FEFF 	 bl vPortEnterCritical
 565              	.LVL58:
 969:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 566              	 .loc 1 969 0
 567 013e 3F4A     	 ldr r2,.L102
 970:../Dave/Generated/FREERTOS/tasks.c **** 		{
 568              	 .loc 1 970 0
 569 0140 3F4F     	 ldr r7,.L102+4
 570              	.LVL59:
 969:../Dave/Generated/FREERTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 571              	 .loc 1 969 0
 572 0142 1368     	 ldr r3,[r2]
 573 0144 0133     	 adds r3,r3,#1
 574 0146 1360     	 str r3,[r2]
 970:../Dave/Generated/FREERTOS/tasks.c **** 		{
 575              	 .loc 1 970 0
 576 0148 3B68     	 ldr r3,[r7]
 577 014a 002B     	 cmp r3,#0
 578 014c 48D0     	 beq .L101
 993:../Dave/Generated/FREERTOS/tasks.c **** 			{
 579              	 .loc 1 993 0
 580 014e DFF81481 	 ldr r8,.L102+40
 581              	.LVL60:
 582 0152 D8F80030 	 ldr r3,[r8]
 583 0156 83B3     	 cbz r3,.L44
 584 0158 E36A     	 ldr r3,[r4,#44]
 585 015a DFF80C91 	 ldr r9,.L102+44
 586              	.LVL61:
 587              	.L42:
1010:../Dave/Generated/FREERTOS/tasks.c **** 
 588              	 .loc 1 1010 0
 589 015e DFF80CC1 	 ldr ip,.L102+48
1020:../Dave/Generated/FREERTOS/tasks.c **** 
 590              	 .loc 1 1020 0
 591 0162 DFF80CE1 	 ldr lr,.L102+52
1010:../Dave/Generated/FREERTOS/tasks.c **** 
 592              	 .loc 1 1010 0
 593 0166 DCF80020 	 ldr r2,[ip]
1020:../Dave/Generated/FREERTOS/tasks.c **** 
 594              	 .loc 1 1020 0
 595 016a DEF80000 	 ldr r0,[lr]
 596 016e 0125     	 movs r5,#1
1010:../Dave/Generated/FREERTOS/tasks.c **** 
 597              	 .loc 1 1010 0
 598 0170 2A44     	 add r2,r2,r5
1020:../Dave/Generated/FREERTOS/tasks.c **** 
 599              	 .loc 1 1020 0
 600 0172 05FA03F6 	 lsl r6,r5,r3
 601 0176 03EB8303 	 add r3,r3,r3,lsl#2
 602 017a 5946     	 mov r1,fp
1015:../Dave/Generated/FREERTOS/tasks.c **** 		}
 603              	 .loc 1 1015 0
 604 017c 6264     	 str r2,[r4,#68]
1020:../Dave/Generated/FREERTOS/tasks.c **** 
 605              	 .loc 1 1020 0
 606 017e 0643     	 orrs r6,r6,r0
 607 0180 09EB8300 	 add r0,r9,r3,lsl#2
1010:../Dave/Generated/FREERTOS/tasks.c **** 
 608              	 .loc 1 1010 0
 609 0184 CCF80020 	 str r2,[ip]
1020:../Dave/Generated/FREERTOS/tasks.c **** 
 610              	 .loc 1 1020 0
 611 0188 CEF80060 	 str r6,[lr]
 612 018c FFF7FEFF 	 bl vListInsertEnd
 613              	.LVL62:
1024:../Dave/Generated/FREERTOS/tasks.c **** 
 614              	 .loc 1 1024 0
 615 0190 FFF7FEFF 	 bl vPortExitCritical
 616              	.LVL63:
1026:../Dave/Generated/FREERTOS/tasks.c **** 	{
 617              	 .loc 1 1026 0
 618 0194 D8F80030 	 ldr r3,[r8]
 619 0198 C3B1     	 cbz r3,.L47
1030:../Dave/Generated/FREERTOS/tasks.c **** 		{
 620              	 .loc 1 1030 0
 621 019a 3A68     	 ldr r2,[r7]
 622 019c E36A     	 ldr r3,[r4,#44]
 623 019e D26A     	 ldr r2,[r2,#44]
 624 01a0 9A42     	 cmp r2,r3
 625 01a2 13D2     	 bcs .L47
1032:../Dave/Generated/FREERTOS/tasks.c **** 		}
 626              	 .loc 1 1032 0
 627 01a4 274B     	 ldr r3,.L102+8
 628 01a6 4FF08052 	 mov r2,#268435456
 629 01aa 1A60     	 str r2,[r3]
 630              	.LVL64:
 631              	
 632 01ac BFF34F8F 	 dsb
 633              	
 634              	
 635 01b0 BFF36F8F 	 isb
 636              	
 637              	 .thumb
 638              	.LBE184:
 639              	.LBE183:
 754:../Dave/Generated/FREERTOS/tasks.c **** 		}
 640              	 .loc 1 754 0
 641 01b4 2846     	 mov r0,r5
 642 01b6 BDE8F88F 	 pop {r3,r4,r5,r6,r7,r8,r9,r10,fp,pc}
 643              	.LVL65:
 644              	.L44:
 645              	.LBB189:
 646              	.LBB187:
 995:../Dave/Generated/FREERTOS/tasks.c **** 				{
 647              	 .loc 1 995 0
 648 01ba 3A68     	 ldr r2,[r7]
 649 01bc E36A     	 ldr r3,[r4,#44]
 650 01be D26A     	 ldr r2,[r2,#44]
 651 01c0 DFF8A490 	 ldr r9,.L102+44
 652              	.LVL66:
 653 01c4 9A42     	 cmp r2,r3
 997:../Dave/Generated/FREERTOS/tasks.c **** 				}
 654              	 .loc 1 997 0
 655 01c6 98BF     	 it ls
 656 01c8 3C60     	 strls r4,[r7]
 657 01ca C8E7     	 b .L42
 658              	.L47:
 659              	.LBE187:
 660              	.LBE189:
 754:../Dave/Generated/FREERTOS/tasks.c **** 		}
 661              	 .loc 1 754 0
 662 01cc 2846     	 mov r0,r5
 663 01ce BDE8F88F 	 pop {r3,r4,r5,r6,r7,r8,r9,r10,fp,pc}
 664              	.LVL67:
 665              	.L37:
 666              	.LBB190:
 732:../Dave/Generated/FREERTOS/tasks.c **** 				}
 667              	 .loc 1 732 0
 668 01d2 3846     	 mov r0,r7
 669              	.LVL68:
 670 01d4 FFF7FEFF 	 bl vPortFree
 671              	.LVL69:
 672              	.L36:
 673              	.LBE190:
 758:../Dave/Generated/FREERTOS/tasks.c **** 		}
 674              	 .loc 1 758 0
 675 01d8 4FF0FF30 	 mov r0,#-1
 676              	.LVL70:
 762:../Dave/Generated/FREERTOS/tasks.c **** 
 677              	 .loc 1 762 0
 678 01dc BDE8F88F 	 pop {r3,r4,r5,r6,r7,r8,r9,r10,fp,pc}
 679              	.LVL71:
 680              	.L101:
 681              	.LBB191:
 682              	.LBB188:
 974:../Dave/Generated/FREERTOS/tasks.c **** 
 683              	 .loc 1 974 0
 684 01e0 3C60     	 str r4,[r7]
 976:../Dave/Generated/FREERTOS/tasks.c **** 			{
 685              	 .loc 1 976 0
 686 01e2 1368     	 ldr r3,[r2]
 687 01e4 012B     	 cmp r3,#1
 688 01e6 05D0     	 beq .L41
 689 01e8 E36A     	 ldr r3,[r4,#44]
 690 01ea DFF87C90 	 ldr r9,.L102+44
 691              	.LVL72:
 692 01ee DFF87480 	 ldr r8,.L102+40
 693              	.LVL73:
 694 01f2 B4E7     	 b .L42
 695              	.LVL74:
 696              	.L41:
 697 01f4 DFF87090 	 ldr r9,.L102+44
 698              	.LVL75:
 699 01f8 4D46     	 mov r5,r9
 700 01fa 09F16406 	 add r6,r9,#100
 701              	.L43:
 702              	.LBB185:
 703              	.LBB186:
3339:../Dave/Generated/FREERTOS/tasks.c **** 	}
 704              	 .loc 1 3339 0
 705 01fe 2846     	 mov r0,r5
 706 0200 1435     	 adds r5,r5,#20
 707 0202 FFF7FEFF 	 bl vListInitialise
 708              	.LVL76:
3337:../Dave/Generated/FREERTOS/tasks.c **** 	{
 709              	 .loc 1 3337 0
 710 0206 B542     	 cmp r5,r6
 711 0208 F9D1     	 bne .L43
3342:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 712              	 .loc 1 3342 0
 713 020a 0F4E     	 ldr r6,.L102+12
3343:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 714              	 .loc 1 3343 0
 715 020c 0F4D     	 ldr r5,.L102+16
 716 020e DFF85480 	 ldr r8,.L102+40
 717              	.LVL77:
3342:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 718              	 .loc 1 3342 0
 719 0212 3046     	 mov r0,r6
 720 0214 FFF7FEFF 	 bl vListInitialise
 721              	.LVL78:
3343:../Dave/Generated/FREERTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 722              	 .loc 1 3343 0
 723 0218 2846     	 mov r0,r5
 724 021a FFF7FEFF 	 bl vListInitialise
 725              	.LVL79:
3344:../Dave/Generated/FREERTOS/tasks.c **** 
 726              	 .loc 1 3344 0
 727 021e 0C48     	 ldr r0,.L102+20
 728 0220 FFF7FEFF 	 bl vListInitialise
 729              	.LVL80:
3348:../Dave/Generated/FREERTOS/tasks.c **** 	}
 730              	 .loc 1 3348 0
 731 0224 0B48     	 ldr r0,.L102+24
 732 0226 FFF7FEFF 	 bl vListInitialise
 733              	.LVL81:
3354:../Dave/Generated/FREERTOS/tasks.c **** 	}
 734              	 .loc 1 3354 0
 735 022a 0B48     	 ldr r0,.L102+28
 736 022c FFF7FEFF 	 bl vListInitialise
 737              	.LVL82:
3360:../Dave/Generated/FREERTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 738              	 .loc 1 3360 0
 739 0230 0A4B     	 ldr r3,.L102+32
3361:../Dave/Generated/FREERTOS/tasks.c **** }
 740              	 .loc 1 3361 0
 741 0232 0B4A     	 ldr r2,.L102+36
3360:../Dave/Generated/FREERTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 742              	 .loc 1 3360 0
 743 0234 1E60     	 str r6,[r3]
 744 0236 E36A     	 ldr r3,[r4,#44]
3361:../Dave/Generated/FREERTOS/tasks.c **** }
 745              	 .loc 1 3361 0
 746 0238 1560     	 str r5,[r2]
 747 023a 90E7     	 b .L42
 748              	.L103:
 749              	 .align 2
 750              	.L102:
 751 023c 00000000 	 .word .LANCHOR7
 752 0240 00000000 	 .word .LANCHOR1
 753 0244 04ED00E0 	 .word -536810236
 754 0248 00000000 	 .word .LANCHOR9
 755 024c 00000000 	 .word .LANCHOR10
 756 0250 00000000 	 .word .LANCHOR11
 757 0254 00000000 	 .word .LANCHOR12
 758 0258 00000000 	 .word .LANCHOR3
 759 025c 00000000 	 .word .LANCHOR5
 760 0260 00000000 	 .word .LANCHOR4
 761 0264 00000000 	 .word .LANCHOR13
 762 0268 00000000 	 .word .LANCHOR8
 763 026c 00000000 	 .word .LANCHOR14
 764 0270 00000000 	 .word .LANCHOR2
 765              	.LBE186:
 766              	.LBE185:
 767              	.LBE188:
 768              	.LBE191:
 769              	 .cfi_endproc
 770              	.LFE128:
 772              	 .section .text.vTaskDelete,"ax",%progbits
 773              	 .align 2
 774              	 .global vTaskDelete
 775              	 .thumb
 776              	 .thumb_func
 778              	vTaskDelete:
 779              	.LFB131:
1049:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 780              	 .loc 1 1049 0
 781              	 .cfi_startproc
 782              	 
 783              	 
 784              	.LVL83:
 785 0000 70B5     	 push {r4,r5,r6,lr}
 786              	.LCFI7:
 787              	 .cfi_def_cfa_offset 16
 788              	 .cfi_offset 4,-16
 789              	 .cfi_offset 5,-12
 790              	 .cfi_offset 6,-8
 791              	 .cfi_offset 14,-4
1049:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 792              	 .loc 1 1049 0
 793 0002 0446     	 mov r4,r0
1056:../Dave/Generated/FREERTOS/tasks.c **** 
 794              	 .loc 1 1056 0
 795 0004 344D     	 ldr r5,.L130
1052:../Dave/Generated/FREERTOS/tasks.c **** 		{
 796              	 .loc 1 1052 0
 797 0006 FFF7FEFF 	 bl vPortEnterCritical
 798              	.LVL84:
1056:../Dave/Generated/FREERTOS/tasks.c **** 
 799              	 .loc 1 1056 0
 800 000a 002C     	 cmp r4,#0
 801 000c 44D0     	 beq .L126
 802              	.LVL85:
 803              	.L105:
1059:../Dave/Generated/FREERTOS/tasks.c **** 			{
 804              	 .loc 1 1059 0 discriminator 4
 805 000e 261D     	 adds r6,r4,#4
 806 0010 3046     	 mov r0,r6
 807 0012 FFF7FEFF 	 bl uxListRemove
 808              	.LVL86:
 809 0016 38B9     	 cbnz r0,.L106
1061:../Dave/Generated/FREERTOS/tasks.c **** 			}
 810              	 .loc 1 1061 0
 811 0018 E16A     	 ldr r1,[r4,#44]
 812 001a 304B     	 ldr r3,.L130+4
 813 001c 01EB8102 	 add r2,r1,r1,lsl#2
 814 0020 53F82230 	 ldr r3,[r3,r2,lsl#2]
 815 0024 002B     	 cmp r3,#0
 816 0026 2FD0     	 beq .L127
 817              	.L106:
1069:../Dave/Generated/FREERTOS/tasks.c **** 			{
 818              	 .loc 1 1069 0
 819 0028 A36A     	 ldr r3,[r4,#40]
 820 002a 1BB1     	 cbz r3,.L107
1071:../Dave/Generated/FREERTOS/tasks.c **** 			}
 821              	 .loc 1 1071 0
 822 002c 04F11800 	 add r0,r4,#24
 823 0030 FFF7FEFF 	 bl uxListRemove
 824              	.LVL87:
 825              	.L107:
1082:../Dave/Generated/FREERTOS/tasks.c **** 
 826              	 .loc 1 1082 0
 827 0034 2A4A     	 ldr r2,.L130+8
1084:../Dave/Generated/FREERTOS/tasks.c **** 			{
 828              	 .loc 1 1084 0
 829 0036 2968     	 ldr r1,[r5]
1082:../Dave/Generated/FREERTOS/tasks.c **** 
 830              	 .loc 1 1082 0
 831 0038 1368     	 ldr r3,[r2]
1084:../Dave/Generated/FREERTOS/tasks.c **** 			{
 832              	 .loc 1 1084 0
 833 003a 8C42     	 cmp r4,r1
1082:../Dave/Generated/FREERTOS/tasks.c **** 
 834              	 .loc 1 1082 0
 835 003c 03F10103 	 add r3,r3,#1
 836 0040 1360     	 str r3,[r2]
1084:../Dave/Generated/FREERTOS/tasks.c **** 			{
 837              	 .loc 1 1084 0
 838 0042 2BD0     	 beq .L128
1107:../Dave/Generated/FREERTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 839              	 .loc 1 1107 0
 840 0044 274A     	 ldr r2,.L130+12
 841              	.LBB200:
 842              	.LBB201:
3600:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTCB );
 843              	 .loc 1 3600 0
 844 0046 206B     	 ldr r0,[r4,#48]
 845              	.LBE201:
 846              	.LBE200:
1107:../Dave/Generated/FREERTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 847              	 .loc 1 1107 0
 848 0048 1368     	 ldr r3,[r2]
 849 004a 013B     	 subs r3,r3,#1
 850 004c 1360     	 str r3,[r2]
 851              	.LVL88:
 852              	.LBB203:
 853              	.LBB202:
3600:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTCB );
 854              	 .loc 1 3600 0
 855 004e FFF7FEFF 	 bl vPortFree
 856              	.LVL89:
3601:../Dave/Generated/FREERTOS/tasks.c **** 		}
 857              	 .loc 1 3601 0
 858 0052 2046     	 mov r0,r4
 859 0054 FFF7FEFF 	 bl vPortFree
 860              	.LVL90:
 861              	.LBE202:
 862              	.LBE203:
 863              	.LBB204:
 864              	.LBB205:
3639:../Dave/Generated/FREERTOS/tasks.c **** 	{
 865              	 .loc 1 3639 0
 866 0058 234B     	 ldr r3,.L130+16
 867 005a 1A68     	 ldr r2,[r3]
 868 005c 1268     	 ldr r2,[r2]
 869 005e 72B1     	 cbz r2,.L110
 870              	.LBB206:
 871              	.LBB207:
3653:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 872              	 .loc 1 3653 0
 873 0060 1A68     	 ldr r2,[r3]
 874              	.LVL91:
3654:../Dave/Generated/FREERTOS/tasks.c **** 	}
 875              	 .loc 1 3654 0
 876 0062 224B     	 ldr r3,.L130+20
3653:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 877              	 .loc 1 3653 0
 878 0064 D268     	 ldr r2,[r2,#12]
 879              	.LVL92:
3654:../Dave/Generated/FREERTOS/tasks.c **** 	}
 880              	 .loc 1 3654 0
 881 0066 D268     	 ldr r2,[r2,#12]
 882              	.LVL93:
 883 0068 5268     	 ldr r2,[r2,#4]
 884              	.LVL94:
 885 006a 1A60     	 str r2,[r3]
 886              	.LVL95:
 887              	.L109:
 888              	.LBE207:
 889              	.LBE206:
 890              	.LBE205:
 891              	.LBE204:
1117:../Dave/Generated/FREERTOS/tasks.c **** 
 892              	 .loc 1 1117 0
 893 006c FFF7FEFF 	 bl vPortExitCritical
 894              	.LVL96:
1121:../Dave/Generated/FREERTOS/tasks.c **** 		{
 895              	 .loc 1 1121 0
 896 0070 1F4B     	 ldr r3,.L130+24
 897 0072 1B68     	 ldr r3,[r3]
 898 0074 13B1     	 cbz r3,.L104
1123:../Dave/Generated/FREERTOS/tasks.c **** 			{
 899              	 .loc 1 1123 0
 900 0076 2B68     	 ldr r3,[r5]
 901 0078 9C42     	 cmp r4,r3
 902 007a 18D0     	 beq .L129
 903              	.L104:
 904 007c 70BD     	 pop {r4,r5,r6,pc}
 905              	.LVL97:
 906              	.L110:
 907              	.LBB209:
 908              	.LBB208:
3645:../Dave/Generated/FREERTOS/tasks.c **** 	}
 909              	 .loc 1 3645 0
 910 007e 1B4B     	 ldr r3,.L130+20
 911 0080 4FF0FF32 	 mov r2,#-1
 912 0084 1A60     	 str r2,[r3]
 913 0086 F1E7     	 b .L109
 914              	.LVL98:
 915              	.L127:
 916              	.LBE208:
 917              	.LBE209:
1061:../Dave/Generated/FREERTOS/tasks.c **** 			}
 918              	 .loc 1 1061 0 discriminator 1
 919 0088 1A48     	 ldr r0,.L130+28
 920 008a 0122     	 movs r2,#1
 921 008c 0368     	 ldr r3,[r0]
 922 008e 8A40     	 lsls r2,r2,r1
 923 0090 23EA0203 	 bic r3,r3,r2
 924 0094 0360     	 str r3,[r0]
 925 0096 C7E7     	 b .L106
 926              	.LVL99:
 927              	.L126:
1056:../Dave/Generated/FREERTOS/tasks.c **** 
 928              	 .loc 1 1056 0 discriminator 1
 929 0098 2C68     	 ldr r4,[r5]
 930              	.LVL100:
 931 009a B8E7     	 b .L105
 932              	.LVL101:
 933              	.L128:
1091:../Dave/Generated/FREERTOS/tasks.c **** 
 934              	 .loc 1 1091 0
 935 009c 3146     	 mov r1,r6
 936 009e 1648     	 ldr r0,.L130+32
 937 00a0 FFF7FEFF 	 bl vListInsertEnd
 938              	.LVL102:
1096:../Dave/Generated/FREERTOS/tasks.c **** 
 939              	 .loc 1 1096 0
 940 00a4 154A     	 ldr r2,.L130+36
 941 00a6 1368     	 ldr r3,[r2]
 942 00a8 0133     	 adds r3,r3,#1
 943 00aa 1360     	 str r3,[r2]
 944 00ac DEE7     	 b .L109
 945              	.L129:
1125:../Dave/Generated/FREERTOS/tasks.c **** 				portYIELD_WITHIN_API();
 946              	 .loc 1 1125 0
 947 00ae 144B     	 ldr r3,.L130+40
 948 00b0 1B68     	 ldr r3,[r3]
 949 00b2 43B1     	 cbz r3,.L113
 950              	.LBB210:
 951              	.LBB211:
 952              	 .file 2 "../Dave/Generated/FREERTOS/portmacro.h"
   1:../Dave/Generated/FREERTOS/portmacro.h **** /*
   2:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Dave/Generated/FREERTOS/portmacro.h ****     All rights reserved
   4:../Dave/Generated/FREERTOS/portmacro.h **** 
   5:../Dave/Generated/FREERTOS/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Dave/Generated/FREERTOS/portmacro.h **** 
   7:../Dave/Generated/FREERTOS/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../Dave/Generated/FREERTOS/portmacro.h **** 
   9:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Dave/Generated/FREERTOS/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Dave/Generated/FREERTOS/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Dave/Generated/FREERTOS/portmacro.h **** 
  13:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  14:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  19:../Dave/Generated/FREERTOS/portmacro.h **** 
  20:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Dave/Generated/FREERTOS/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Dave/Generated/FREERTOS/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Dave/Generated/FREERTOS/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../Dave/Generated/FREERTOS/portmacro.h **** 
  25:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  26:../Dave/Generated/FREERTOS/portmacro.h ****      *                                                                       *
  27:../Dave/Generated/FREERTOS/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Dave/Generated/FREERTOS/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Dave/Generated/FREERTOS/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../Dave/Generated/FREERTOS/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../Dave/Generated/FREERTOS/portmacro.h ****      *                                                                       *
  32:../Dave/Generated/FREERTOS/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Dave/Generated/FREERTOS/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Dave/Generated/FREERTOS/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../Dave/Generated/FREERTOS/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Dave/Generated/FREERTOS/portmacro.h ****      *                                                                       *
  37:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  38:../Dave/Generated/FREERTOS/portmacro.h **** 
  39:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Dave/Generated/FREERTOS/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Dave/Generated/FREERTOS/portmacro.h ****     defined configASSERT()?
  42:../Dave/Generated/FREERTOS/portmacro.h **** 
  43:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Dave/Generated/FREERTOS/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../Dave/Generated/FREERTOS/portmacro.h ****     participating in the support forum.
  46:../Dave/Generated/FREERTOS/portmacro.h **** 
  47:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Dave/Generated/FREERTOS/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Dave/Generated/FREERTOS/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Dave/Generated/FREERTOS/portmacro.h **** 
  52:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Dave/Generated/FREERTOS/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Dave/Generated/FREERTOS/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Dave/Generated/FREERTOS/portmacro.h **** 
  56:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Dave/Generated/FREERTOS/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Dave/Generated/FREERTOS/portmacro.h **** 
  59:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Dave/Generated/FREERTOS/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Dave/Generated/FREERTOS/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Dave/Generated/FREERTOS/portmacro.h **** 
  63:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Dave/Generated/FREERTOS/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../Dave/Generated/FREERTOS/portmacro.h ****     mission critical applications that require provable dependability.
  66:../Dave/Generated/FREERTOS/portmacro.h **** 
  67:../Dave/Generated/FREERTOS/portmacro.h ****     1 tab == 4 spaces!
  68:../Dave/Generated/FREERTOS/portmacro.h **** */
  69:../Dave/Generated/FREERTOS/portmacro.h **** #include "freertos_conf.h"
  70:../Dave/Generated/FREERTOS/portmacro.h **** 
  71:../Dave/Generated/FREERTOS/portmacro.h **** #if FREERTOS_MPU_SUPPORT == 0
  72:../Dave/Generated/FREERTOS/portmacro.h **** 
  73:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef PORTMACRO_H
  74:../Dave/Generated/FREERTOS/portmacro.h **** #define PORTMACRO_H
  75:../Dave/Generated/FREERTOS/portmacro.h **** 
  76:../Dave/Generated/FREERTOS/portmacro.h **** #ifdef __cplusplus
  77:../Dave/Generated/FREERTOS/portmacro.h **** extern "C" {
  78:../Dave/Generated/FREERTOS/portmacro.h **** #endif
  79:../Dave/Generated/FREERTOS/portmacro.h **** 
  80:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------
  81:../Dave/Generated/FREERTOS/portmacro.h ****  * Port specific definitions.
  82:../Dave/Generated/FREERTOS/portmacro.h ****  *
  83:../Dave/Generated/FREERTOS/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  84:../Dave/Generated/FREERTOS/portmacro.h ****  * given hardware and compiler.
  85:../Dave/Generated/FREERTOS/portmacro.h ****  *
  86:../Dave/Generated/FREERTOS/portmacro.h ****  * These settings should not be altered.
  87:../Dave/Generated/FREERTOS/portmacro.h ****  *-----------------------------------------------------------
  88:../Dave/Generated/FREERTOS/portmacro.h ****  */
  89:../Dave/Generated/FREERTOS/portmacro.h **** 
  90:../Dave/Generated/FREERTOS/portmacro.h **** #if defined( __GNUC__ )
  91:../Dave/Generated/FREERTOS/portmacro.h **** /* Type definitions. */
  92:../Dave/Generated/FREERTOS/portmacro.h **** #define portCHAR		char
  93:../Dave/Generated/FREERTOS/portmacro.h **** #define portFLOAT		float
  94:../Dave/Generated/FREERTOS/portmacro.h **** #define portDOUBLE		double
  95:../Dave/Generated/FREERTOS/portmacro.h **** #define portLONG		long
  96:../Dave/Generated/FREERTOS/portmacro.h **** #define portSHORT		short
  97:../Dave/Generated/FREERTOS/portmacro.h **** #define portSTACK_TYPE	uint32_t
  98:../Dave/Generated/FREERTOS/portmacro.h **** #define portBASE_TYPE	long
  99:../Dave/Generated/FREERTOS/portmacro.h **** 
 100:../Dave/Generated/FREERTOS/portmacro.h **** typedef portSTACK_TYPE StackType_t;
 101:../Dave/Generated/FREERTOS/portmacro.h **** typedef long BaseType_t;
 102:../Dave/Generated/FREERTOS/portmacro.h **** typedef unsigned long UBaseType_t;
 103:../Dave/Generated/FREERTOS/portmacro.h **** 
 104:../Dave/Generated/FREERTOS/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 105:../Dave/Generated/FREERTOS/portmacro.h **** 	typedef uint16_t TickType_t;
 106:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 107:../Dave/Generated/FREERTOS/portmacro.h **** #else
 108:../Dave/Generated/FREERTOS/portmacro.h **** 	typedef uint32_t TickType_t;
 109:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 110:../Dave/Generated/FREERTOS/portmacro.h **** 
 111:../Dave/Generated/FREERTOS/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 112:../Dave/Generated/FREERTOS/portmacro.h **** 	not need to be guarded with a critical section. */
 113:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 114:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 115:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 116:../Dave/Generated/FREERTOS/portmacro.h **** 
 117:../Dave/Generated/FREERTOS/portmacro.h **** /* Architecture specifics. */
 118:../Dave/Generated/FREERTOS/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 119:../Dave/Generated/FREERTOS/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 120:../Dave/Generated/FREERTOS/portmacro.h **** #define portBYTE_ALIGNMENT			8
 121:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 122:../Dave/Generated/FREERTOS/portmacro.h **** 
 123:../Dave/Generated/FREERTOS/portmacro.h **** /* Scheduler utilities. */
 124:../Dave/Generated/FREERTOS/portmacro.h **** #define portYIELD() 															\
 125:../Dave/Generated/FREERTOS/portmacro.h **** {																				\
 126:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 127:../Dave/Generated/FREERTOS/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 128:../Dave/Generated/FREERTOS/portmacro.h **** 																				\
 129:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 130:../Dave/Generated/FREERTOS/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 131:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile( "dsb" );													\
 132:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile( "isb" );													\
 133:../Dave/Generated/FREERTOS/portmacro.h **** }
 134:../Dave/Generated/FREERTOS/portmacro.h **** 
 135:../Dave/Generated/FREERTOS/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 136:../Dave/Generated/FREERTOS/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 137:../Dave/Generated/FREERTOS/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 138:../Dave/Generated/FREERTOS/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 139:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 140:../Dave/Generated/FREERTOS/portmacro.h **** 
 141:../Dave/Generated/FREERTOS/portmacro.h **** /* Critical section management. */
 142:../Dave/Generated/FREERTOS/portmacro.h **** extern void vPortEnterCritical( void );
 143:../Dave/Generated/FREERTOS/portmacro.h **** extern void vPortExitCritical( void );
 144:../Dave/Generated/FREERTOS/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 145:../Dave/Generated/FREERTOS/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 146:../Dave/Generated/FREERTOS/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 147:../Dave/Generated/FREERTOS/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 148:../Dave/Generated/FREERTOS/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 149:../Dave/Generated/FREERTOS/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 150:../Dave/Generated/FREERTOS/portmacro.h **** 
 151:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 152:../Dave/Generated/FREERTOS/portmacro.h **** 
 153:../Dave/Generated/FREERTOS/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 154:../Dave/Generated/FREERTOS/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 155:../Dave/Generated/FREERTOS/portmacro.h **** (which build with all the ports) will build. */
 156:../Dave/Generated/FREERTOS/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 157:../Dave/Generated/FREERTOS/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 158:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 159:../Dave/Generated/FREERTOS/portmacro.h **** 
 160:../Dave/Generated/FREERTOS/portmacro.h **** /* Tickless idle/low power functionality. */
 161:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 162:../Dave/Generated/FREERTOS/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 163:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 164:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 165:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 166:../Dave/Generated/FREERTOS/portmacro.h **** 
 167:../Dave/Generated/FREERTOS/portmacro.h **** /* Architecture specific optimisations. */
 168:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 169:../Dave/Generated/FREERTOS/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 170:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 171:../Dave/Generated/FREERTOS/portmacro.h **** 
 172:../Dave/Generated/FREERTOS/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 173:../Dave/Generated/FREERTOS/portmacro.h **** 
 174:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Generic helper function. */
 175:../Dave/Generated/FREERTOS/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 176:../Dave/Generated/FREERTOS/portmacro.h **** 	{
 177:../Dave/Generated/FREERTOS/portmacro.h **** 	uint8_t ucReturn;
 178:../Dave/Generated/FREERTOS/portmacro.h **** 
 179:../Dave/Generated/FREERTOS/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 180:../Dave/Generated/FREERTOS/portmacro.h **** 		return ucReturn;
 181:../Dave/Generated/FREERTOS/portmacro.h **** 	}
 182:../Dave/Generated/FREERTOS/portmacro.h **** 
 183:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Check the configuration. */
 184:../Dave/Generated/FREERTOS/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 185:../Dave/Generated/FREERTOS/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 186:../Dave/Generated/FREERTOS/portmacro.h **** 	#endif
 187:../Dave/Generated/FREERTOS/portmacro.h **** 
 188:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 189:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 190:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 191:../Dave/Generated/FREERTOS/portmacro.h **** 
 192:../Dave/Generated/FREERTOS/portmacro.h **** 	/*-----------------------------------------------------------*/
 193:../Dave/Generated/FREERTOS/portmacro.h **** 
 194:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 195:../Dave/Generated/FREERTOS/portmacro.h **** 
 196:../Dave/Generated/FREERTOS/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 197:../Dave/Generated/FREERTOS/portmacro.h **** 
 198:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 199:../Dave/Generated/FREERTOS/portmacro.h **** 
 200:../Dave/Generated/FREERTOS/portmacro.h **** #ifdef configASSERT
 201:../Dave/Generated/FREERTOS/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 202:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 203:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 204:../Dave/Generated/FREERTOS/portmacro.h **** 
 205:../Dave/Generated/FREERTOS/portmacro.h **** /* portNOP() is not required by this port. */
 206:../Dave/Generated/FREERTOS/portmacro.h **** #define portNOP()
 207:../Dave/Generated/FREERTOS/portmacro.h **** 
 208:../Dave/Generated/FREERTOS/portmacro.h **** #define portINLINE	__inline
 209:../Dave/Generated/FREERTOS/portmacro.h **** 
 210:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef portFORCE_INLINE
 211:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 212:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 213:../Dave/Generated/FREERTOS/portmacro.h **** 
 214:../Dave/Generated/FREERTOS/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 215:../Dave/Generated/FREERTOS/portmacro.h **** {
 216:../Dave/Generated/FREERTOS/portmacro.h **** uint32_t ulCurrentInterrupt;
 217:../Dave/Generated/FREERTOS/portmacro.h **** BaseType_t xReturn;
 218:../Dave/Generated/FREERTOS/portmacro.h **** 
 219:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 220:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 221:../Dave/Generated/FREERTOS/portmacro.h **** 
 222:../Dave/Generated/FREERTOS/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 223:../Dave/Generated/FREERTOS/portmacro.h **** 	{
 224:../Dave/Generated/FREERTOS/portmacro.h **** 		xReturn = pdFALSE;
 225:../Dave/Generated/FREERTOS/portmacro.h **** 	}
 226:../Dave/Generated/FREERTOS/portmacro.h **** 	else
 227:../Dave/Generated/FREERTOS/portmacro.h **** 	{
 228:../Dave/Generated/FREERTOS/portmacro.h **** 		xReturn = pdTRUE;
 229:../Dave/Generated/FREERTOS/portmacro.h **** 	}
 230:../Dave/Generated/FREERTOS/portmacro.h **** 
 231:../Dave/Generated/FREERTOS/portmacro.h **** 	return xReturn;
 232:../Dave/Generated/FREERTOS/portmacro.h **** }
 233:../Dave/Generated/FREERTOS/portmacro.h **** 
 234:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 235:../Dave/Generated/FREERTOS/portmacro.h **** 
 236:../Dave/Generated/FREERTOS/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 237:../Dave/Generated/FREERTOS/portmacro.h **** {
 238:../Dave/Generated/FREERTOS/portmacro.h **** uint32_t ulNewBASEPRI;
 239:../Dave/Generated/FREERTOS/portmacro.h **** 
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile
 953              	 .loc 2 240 0
 954              	
 955 00b4 4FF0FC03 	 mov r3,#252
 956 00b8 83F31188 	 msr basepri,r3
 957 00bc BFF36F8F 	 isb 
 958 00c0 BFF34F8F 	 dsb 
 959              	
 960              	
 961              	.LVL103:
 962              	 .thumb
 963              	.L114:
 964              	.LBE211:
 965              	.LBE210:
1125:../Dave/Generated/FREERTOS/tasks.c **** 				portYIELD_WITHIN_API();
 966              	 .loc 1 1125 0 discriminator 1
 967 00c4 FEE7     	 b .L114
 968              	.L113:
1126:../Dave/Generated/FREERTOS/tasks.c **** 			}
 969              	 .loc 1 1126 0
 970 00c6 0F4B     	 ldr r3,.L130+44
 971 00c8 4FF08052 	 mov r2,#268435456
 972 00cc 1A60     	 str r2,[r3]
 973              	
 974 00ce BFF34F8F 	 dsb
 975              	
 976              	
 977 00d2 BFF36F8F 	 isb
 978              	
 979              	 .thumb
 980 00d6 70BD     	 pop {r4,r5,r6,pc}
 981              	.LVL104:
 982              	.L131:
 983              	 .align 2
 984              	.L130:
 985 00d8 00000000 	 .word .LANCHOR1
 986 00dc 00000000 	 .word .LANCHOR8
 987 00e0 00000000 	 .word .LANCHOR14
 988 00e4 00000000 	 .word .LANCHOR7
 989 00e8 00000000 	 .word .LANCHOR5
 990 00ec 00000000 	 .word .LANCHOR6
 991 00f0 00000000 	 .word .LANCHOR13
 992 00f4 00000000 	 .word .LANCHOR2
 993 00f8 00000000 	 .word .LANCHOR12
 994 00fc 00000000 	 .word .LANCHOR15
 995 0100 00000000 	 .word .LANCHOR16
 996 0104 04ED00E0 	 .word -536810236
 997              	 .cfi_endproc
 998              	.LFE131:
 1000              	 .section .text.eTaskGetState,"ax",%progbits
 1001              	 .align 2
 1002              	 .global eTaskGetState
 1003              	 .thumb
 1004              	 .thumb_func
 1006              	eTaskGetState:
 1007              	.LFB134:
1270:../Dave/Generated/FREERTOS/tasks.c **** 	eTaskState eReturn;
 1008              	 .loc 1 1270 0
 1009              	 .cfi_startproc
 1010              	 
 1011              	 
 1012              	.LVL105:
 1013 0000 38B5     	 push {r3,r4,r5,lr}
 1014              	.LCFI8:
 1015              	 .cfi_def_cfa_offset 16
 1016              	 .cfi_offset 3,-16
 1017              	 .cfi_offset 4,-12
 1018              	 .cfi_offset 5,-8
 1019              	 .cfi_offset 14,-4
1275:../Dave/Generated/FREERTOS/tasks.c **** 
 1020              	 .loc 1 1275 0
 1021 0002 10B3     	 cbz r0,.L144
1277:../Dave/Generated/FREERTOS/tasks.c **** 		{
 1022              	 .loc 1 1277 0
 1023 0004 184B     	 ldr r3,.L146
 1024 0006 1B68     	 ldr r3,[r3]
 1025 0008 9842     	 cmp r0,r3
 1026 000a 1CD0     	 beq .L137
 1027 000c 0446     	 mov r4,r0
1284:../Dave/Generated/FREERTOS/tasks.c **** 			{
 1028              	 .loc 1 1284 0
 1029 000e FFF7FEFF 	 bl vPortEnterCritical
 1030              	.LVL106:
1286:../Dave/Generated/FREERTOS/tasks.c **** 			}
 1031              	 .loc 1 1286 0
 1032 0012 6569     	 ldr r5,[r4,#20]
 1033              	.LVL107:
1288:../Dave/Generated/FREERTOS/tasks.c **** 
 1034              	 .loc 1 1288 0
 1035 0014 FFF7FEFF 	 bl vPortExitCritical
 1036              	.LVL108:
1290:../Dave/Generated/FREERTOS/tasks.c **** 			{
 1037              	 .loc 1 1290 0
 1038 0018 144B     	 ldr r3,.L146+4
 1039 001a 1B68     	 ldr r3,[r3]
 1040 001c 9D42     	 cmp r5,r3
 1041 001e 0ED0     	 beq .L139
1290:../Dave/Generated/FREERTOS/tasks.c **** 			{
 1042              	 .loc 1 1290 0 is_stmt 0 discriminator 1
 1043 0020 134B     	 ldr r3,.L146+8
 1044 0022 1B68     	 ldr r3,[r3]
 1045 0024 9D42     	 cmp r5,r3
 1046 0026 0AD0     	 beq .L139
1298:../Dave/Generated/FREERTOS/tasks.c **** 				{
 1047              	 .loc 1 1298 0 is_stmt 1
 1048 0028 124B     	 ldr r3,.L146+12
 1049 002a 9D42     	 cmp r5,r3
 1050 002c 16D0     	 beq .L145
1315:../Dave/Generated/FREERTOS/tasks.c **** 				{
 1051              	 .loc 1 1315 0
 1052 002e 124B     	 ldr r3,.L146+16
 1053 0030 9D42     	 cmp r5,r3
 1054 0032 06D0     	 beq .L141
1328:../Dave/Generated/FREERTOS/tasks.c **** 			}
 1055              	 .loc 1 1328 0 discriminator 1
 1056 0034 002D     	 cmp r5,#0
 1057 0036 0CBF     	 ite eq
 1058 0038 0420     	 moveq r0,#4
 1059 003a 0120     	 movne r0,#1
 1060 003c 38BD     	 pop {r3,r4,r5,pc}
 1061              	.LVL109:
 1062              	.L139:
1294:../Dave/Generated/FREERTOS/tasks.c **** 			}
 1063              	 .loc 1 1294 0
 1064 003e 0220     	 movs r0,#2
 1065 0040 38BD     	 pop {r3,r4,r5,pc}
 1066              	.LVL110:
 1067              	.L141:
1320:../Dave/Generated/FREERTOS/tasks.c **** 				}
 1068              	 .loc 1 1320 0
 1069 0042 0420     	 movs r0,#4
 1070              	.LVL111:
1333:../Dave/Generated/FREERTOS/tasks.c **** 
 1071              	 .loc 1 1333 0
 1072 0044 38BD     	 pop {r3,r4,r5,pc}
 1073              	.LVL112:
 1074              	.L137:
1280:../Dave/Generated/FREERTOS/tasks.c **** 		}
 1075              	 .loc 1 1280 0
 1076 0046 0020     	 movs r0,#0
 1077              	.LVL113:
 1078 0048 38BD     	 pop {r3,r4,r5,pc}
 1079              	.LVL114:
 1080              	.L144:
 1081              	.LBB216:
 1082              	.LBB217:
 1083              	.LBB218:
 1084              	.LBB219:
 1085              	 .loc 2 240 0
 1086              	
 1087 004a 4FF0FC03 	 mov r3,#252
 1088 004e 83F31188 	 msr basepri,r3
 1089 0052 BFF36F8F 	 isb 
 1090 0056 BFF34F8F 	 dsb 
 1091              	
 1092              	
 1093              	.LVL115:
 1094              	 .thumb
 1095              	.L134:
 1096 005a FEE7     	 b .L134
 1097              	.LVL116:
 1098              	.L145:
 1099              	.LBE219:
 1100              	.LBE218:
 1101              	.LBE217:
 1102              	.LBE216:
1303:../Dave/Generated/FREERTOS/tasks.c **** 					{
 1103              	 .loc 1 1303 0
 1104 005c A36A     	 ldr r3,[r4,#40]
1309:../Dave/Generated/FREERTOS/tasks.c **** 					}
 1105              	 .loc 1 1309 0
 1106 005e 002B     	 cmp r3,#0
 1107 0060 0CBF     	 ite eq
 1108 0062 0320     	 moveq r0,#3
 1109 0064 0220     	 movne r0,#2
 1110 0066 38BD     	 pop {r3,r4,r5,pc}
 1111              	.LVL117:
 1112              	.L147:
 1113              	 .align 2
 1114              	.L146:
 1115 0068 00000000 	 .word .LANCHOR1
 1116 006c 00000000 	 .word .LANCHOR5
 1117 0070 00000000 	 .word .LANCHOR4
 1118 0074 00000000 	 .word .LANCHOR3
 1119 0078 00000000 	 .word .LANCHOR12
 1120              	 .cfi_endproc
 1121              	.LFE134:
 1123              	 .section .text.uxTaskPriorityGet,"ax",%progbits
 1124              	 .align 2
 1125              	 .global uxTaskPriorityGet
 1126              	 .thumb
 1127              	 .thumb_func
 1129              	uxTaskPriorityGet:
 1130              	.LFB135:
1341:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 1131              	 .loc 1 1341 0
 1132              	 .cfi_startproc
 1133              	 
 1134              	 
 1135              	.LVL118:
 1136 0000 10B5     	 push {r4,lr}
 1137              	.LCFI9:
 1138              	 .cfi_def_cfa_offset 8
 1139              	 .cfi_offset 4,-8
 1140              	 .cfi_offset 14,-4
1341:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 1141              	 .loc 1 1341 0
 1142 0002 0446     	 mov r4,r0
1345:../Dave/Generated/FREERTOS/tasks.c **** 		{
 1143              	 .loc 1 1345 0
 1144 0004 FFF7FEFF 	 bl vPortEnterCritical
 1145              	.LVL119:
1349:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1146              	 .loc 1 1349 0
 1147 0008 24B1     	 cbz r4,.L151
 1148              	.LVL120:
1350:../Dave/Generated/FREERTOS/tasks.c **** 		}
 1149              	 .loc 1 1350 0 discriminator 4
 1150 000a E46A     	 ldr r4,[r4,#44]
 1151              	.LVL121:
1352:../Dave/Generated/FREERTOS/tasks.c **** 
 1152              	 .loc 1 1352 0 discriminator 4
 1153 000c FFF7FEFF 	 bl vPortExitCritical
 1154              	.LVL122:
1355:../Dave/Generated/FREERTOS/tasks.c **** 
 1155              	 .loc 1 1355 0 discriminator 4
 1156 0010 2046     	 mov r0,r4
 1157 0012 10BD     	 pop {r4,pc}
 1158              	.LVL123:
 1159              	.L151:
1349:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1160              	 .loc 1 1349 0 discriminator 1
 1161 0014 034B     	 ldr r3,.L152
 1162 0016 1C68     	 ldr r4,[r3]
 1163              	.LVL124:
1350:../Dave/Generated/FREERTOS/tasks.c **** 		}
 1164              	 .loc 1 1350 0 discriminator 1
 1165 0018 E46A     	 ldr r4,[r4,#44]
 1166              	.LVL125:
1352:../Dave/Generated/FREERTOS/tasks.c **** 
 1167              	 .loc 1 1352 0 discriminator 1
 1168 001a FFF7FEFF 	 bl vPortExitCritical
 1169              	.LVL126:
1355:../Dave/Generated/FREERTOS/tasks.c **** 
 1170              	 .loc 1 1355 0 discriminator 1
 1171 001e 2046     	 mov r0,r4
 1172 0020 10BD     	 pop {r4,pc}
 1173              	.LVL127:
 1174              	.L153:
 1175 0022 00BF     	 .align 2
 1176              	.L152:
 1177 0024 00000000 	 .word .LANCHOR1
 1178              	 .cfi_endproc
 1179              	.LFE135:
 1181              	 .section .text.uxTaskPriorityGetFromISR,"ax",%progbits
 1182              	 .align 2
 1183              	 .global uxTaskPriorityGetFromISR
 1184              	 .thumb
 1185              	 .thumb_func
 1187              	uxTaskPriorityGetFromISR:
 1188              	.LFB136:
1363:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 1189              	 .loc 1 1363 0
 1190              	 .cfi_startproc
 1191              	 
 1192              	 
 1193              	.LVL128:
 1194 0000 10B5     	 push {r4,lr}
 1195              	.LCFI10:
 1196              	 .cfi_def_cfa_offset 8
 1197              	 .cfi_offset 4,-8
 1198              	 .cfi_offset 14,-4
1363:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 1199              	 .loc 1 1363 0
 1200 0002 0446     	 mov r4,r0
1383:../Dave/Generated/FREERTOS/tasks.c **** 
 1201              	 .loc 1 1383 0
 1202 0004 FFF7FEFF 	 bl vPortValidateInterruptPriority
 1203              	.LVL129:
 1204              	.LBB220:
 1205              	.LBB221:
 241:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 242:../Dave/Generated/FREERTOS/portmacro.h **** 		"	mov %0, %1												\n"	\
 243:../Dave/Generated/FREERTOS/portmacro.h **** 		"	msr basepri, %0											\n" \
 244:../Dave/Generated/FREERTOS/portmacro.h **** 		"	isb														\n" \
 245:../Dave/Generated/FREERTOS/portmacro.h **** 		"	dsb														\n" \
 246:../Dave/Generated/FREERTOS/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 247:../Dave/Generated/FREERTOS/portmacro.h **** 	);
 248:../Dave/Generated/FREERTOS/portmacro.h **** }
 249:../Dave/Generated/FREERTOS/portmacro.h **** 
 250:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 251:../Dave/Generated/FREERTOS/portmacro.h **** 
 252:../Dave/Generated/FREERTOS/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 253:../Dave/Generated/FREERTOS/portmacro.h **** {
 254:../Dave/Generated/FREERTOS/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 255:../Dave/Generated/FREERTOS/portmacro.h **** 
 256:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile
 1206              	 .loc 2 256 0
 1207              	
 1208 0008 EFF31183 	 mrs r3,basepri
 1209 000c 4FF0FC02 	 mov r2,#252
 1210 0010 82F31188 	 msr basepri,r2
 1211 0014 BFF36F8F 	 isb 
 1212 0018 BFF34F8F 	 dsb 
 1213              	
 1214              	
 1215              	.LVL130:
 1216              	 .thumb
 1217              	.LBE221:
 1218              	.LBE220:
1389:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1219              	 .loc 1 1389 0
 1220 001c 1CB1     	 cbz r4,.L157
 1221              	.LVL131:
 1222              	.LBB222:
 1223              	.LBB223:
 257:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 258:../Dave/Generated/FREERTOS/portmacro.h **** 		"	mrs %0, basepri											\n" \
 259:../Dave/Generated/FREERTOS/portmacro.h **** 		"	mov %1, %2												\n"	\
 260:../Dave/Generated/FREERTOS/portmacro.h **** 		"	msr basepri, %1											\n" \
 261:../Dave/Generated/FREERTOS/portmacro.h **** 		"	isb														\n" \
 262:../Dave/Generated/FREERTOS/portmacro.h **** 		"	dsb														\n" \
 263:../Dave/Generated/FREERTOS/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 264:../Dave/Generated/FREERTOS/portmacro.h **** 	);
 265:../Dave/Generated/FREERTOS/portmacro.h **** 
 266:../Dave/Generated/FREERTOS/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 267:../Dave/Generated/FREERTOS/portmacro.h **** 	warnings. */
 268:../Dave/Generated/FREERTOS/portmacro.h **** 	return ulOriginalBASEPRI;
 269:../Dave/Generated/FREERTOS/portmacro.h **** }
 270:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 271:../Dave/Generated/FREERTOS/portmacro.h **** 
 272:../Dave/Generated/FREERTOS/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 273:../Dave/Generated/FREERTOS/portmacro.h **** {
 274:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile
 1224              	 .loc 2 274 0 discriminator 4
 1225              	
 1226 001e 83F31188 	 msr basepri,r3
 1227              	
 1228              	 .thumb
 1229              	.LBE223:
 1230              	.LBE222:
1395:../Dave/Generated/FREERTOS/tasks.c **** 
 1231              	 .loc 1 1395 0 discriminator 4
 1232 0022 E06A     	 ldr r0,[r4,#44]
 1233 0024 10BD     	 pop {r4,pc}
 1234              	.LVL132:
 1235              	.L157:
1389:../Dave/Generated/FREERTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1236              	 .loc 1 1389 0 discriminator 1
 1237 0026 034A     	 ldr r2,.L158
 1238 0028 1468     	 ldr r4,[r2]
 1239              	.LVL133:
 1240              	.LBB225:
 1241              	.LBB224:
 1242              	 .loc 2 274 0 discriminator 1
 1243              	
 1244 002a 83F31188 	 msr basepri,r3
 1245              	
 1246              	 .thumb
 1247              	.LBE224:
 1248              	.LBE225:
1395:../Dave/Generated/FREERTOS/tasks.c **** 
 1249              	 .loc 1 1395 0 discriminator 1
 1250 002e E06A     	 ldr r0,[r4,#44]
 1251 0030 10BD     	 pop {r4,pc}
 1252              	.LVL134:
 1253              	.L159:
 1254 0032 00BF     	 .align 2
 1255              	.L158:
 1256 0034 00000000 	 .word .LANCHOR1
 1257              	 .cfi_endproc
 1258              	.LFE136:
 1260              	 .section .text.vTaskPrioritySet,"ax",%progbits
 1261              	 .align 2
 1262              	 .global vTaskPrioritySet
 1263              	 .thumb
 1264              	 .thumb_func
 1266              	vTaskPrioritySet:
 1267              	.LFB137:
1403:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 1268              	 .loc 1 1403 0
 1269              	 .cfi_startproc
 1270              	 
 1271              	 
 1272              	.LVL135:
1408:../Dave/Generated/FREERTOS/tasks.c **** 
 1273              	 .loc 1 1408 0
 1274 0000 0429     	 cmp r1,#4
1403:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 1275              	 .loc 1 1403 0
 1276 0002 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 1277              	.LCFI11:
 1278              	 .cfi_def_cfa_offset 24
 1279              	 .cfi_offset 4,-24
 1280              	 .cfi_offset 5,-20
 1281              	 .cfi_offset 6,-16
 1282              	 .cfi_offset 7,-12
 1283              	 .cfi_offset 8,-8
 1284              	 .cfi_offset 14,-4
1403:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 1285              	 .loc 1 1403 0
 1286 0006 0D46     	 mov r5,r1
1408:../Dave/Generated/FREERTOS/tasks.c **** 
 1287              	 .loc 1 1408 0
 1288 0008 08D9     	 bls .L161
 1289              	.LBB226:
 1290              	.LBB227:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1291              	 .loc 2 240 0
 1292              	
 1293 000a 4FF0FC03 	 mov r3,#252
 1294 000e 83F31188 	 msr basepri,r3
 1295 0012 BFF36F8F 	 isb 
 1296 0016 BFF34F8F 	 dsb 
 1297              	
 1298              	
 1299              	.LVL136:
 1300              	 .thumb
 1301              	.L162:
 1302              	.LBE227:
 1303              	.LBE226:
1408:../Dave/Generated/FREERTOS/tasks.c **** 
 1304              	 .loc 1 1408 0 discriminator 1
 1305 001a FEE7     	 b .L162
 1306              	.L161:
 1307 001c 0446     	 mov r4,r0
1420:../Dave/Generated/FREERTOS/tasks.c **** 		{
 1308              	 .loc 1 1420 0
 1309 001e FFF7FEFF 	 bl vPortEnterCritical
 1310              	.LVL137:
1424:../Dave/Generated/FREERTOS/tasks.c **** 
 1311              	 .loc 1 1424 0
 1312 0022 002C     	 cmp r4,#0
 1313 0024 4DD0     	 beq .L181
 1314              	.LVL138:
 1315              	.L163:
1430:../Dave/Generated/FREERTOS/tasks.c **** 			}
 1316              	 .loc 1 1430 0 discriminator 4
 1317 0026 E36C     	 ldr r3,[r4,#76]
 1318              	.LVL139:
1438:../Dave/Generated/FREERTOS/tasks.c **** 			{
 1319              	 .loc 1 1438 0 discriminator 4
 1320 0028 9D42     	 cmp r5,r3
 1321 002a 46D0     	 beq .L165
1444:../Dave/Generated/FREERTOS/tasks.c **** 					{
 1322              	 .loc 1 1444 0
 1323 002c 274A     	 ldr r2,.L182
1442:../Dave/Generated/FREERTOS/tasks.c **** 				{
 1324              	 .loc 1 1442 0
 1325 002e 09D9     	 bls .L166
1444:../Dave/Generated/FREERTOS/tasks.c **** 					{
 1326              	 .loc 1 1444 0
 1327 0030 1168     	 ldr r1,[r2]
 1328 0032 8C42     	 cmp r4,r1
 1329 0034 48D0     	 beq .L175
1449:../Dave/Generated/FREERTOS/tasks.c **** 						{
 1330              	 .loc 1 1449 0
 1331 0036 1268     	 ldr r2,[r2]
 1332 0038 D66A     	 ldr r6,[r2,#44]
 1333 003a B542     	 cmp r5,r6
 1334 003c 34BF     	 ite cc
 1335 003e 0026     	 movcc r6,#0
 1336 0040 0126     	 movcs r6,#1
 1337 0042 04E0     	 b .L167
 1338              	.L166:
1465:../Dave/Generated/FREERTOS/tasks.c **** 				{
 1339              	 .loc 1 1465 0
 1340 0044 1668     	 ldr r6,[r2]
 1341 0046 A61B     	 subs r6,r4,r6
 1342 0048 B6FA86F6 	 clz r6,r6
 1343 004c 7609     	 lsrs r6,r6,#5
 1344              	.L167:
 1345              	.LVL140:
1482:../Dave/Generated/FREERTOS/tasks.c **** 
 1346              	 .loc 1 1482 0
 1347 004e E76A     	 ldr r7,[r4,#44]
 1348              	.LVL141:
1498:../Dave/Generated/FREERTOS/tasks.c **** 				}
 1349              	 .loc 1 1498 0
 1350 0050 E564     	 str r5,[r4,#76]
1488:../Dave/Generated/FREERTOS/tasks.c **** 					{
 1351              	 .loc 1 1488 0
 1352 0052 BB42     	 cmp r3,r7
1508:../Dave/Generated/FREERTOS/tasks.c **** 				{
 1353              	 .loc 1 1508 0
 1354 0054 A369     	 ldr r3,[r4,#24]
 1355              	.LVL142:
1490:../Dave/Generated/FREERTOS/tasks.c **** 					}
 1356              	 .loc 1 1490 0
 1357 0056 08BF     	 it eq
 1358 0058 E562     	 streq r5,[r4,#44]
1508:../Dave/Generated/FREERTOS/tasks.c **** 				{
 1359              	 .loc 1 1508 0
 1360 005a 002B     	 cmp r3,#0
1510:../Dave/Generated/FREERTOS/tasks.c **** 				}
 1361              	 .loc 1 1510 0
 1362 005c A4BF     	 itt ge
 1363 005e C5F10505 	 rsbge r5,r5,#5
 1364              	.LVL143:
 1365 0062 A561     	 strge r5,[r4,#24]
1521:../Dave/Generated/FREERTOS/tasks.c **** 				{
 1366              	 .loc 1 1521 0
 1367 0064 1A4D     	 ldr r5,.L182+4
 1368 0066 6269     	 ldr r2,[r4,#20]
 1369 0068 07EB8703 	 add r3,r7,r7,lsl#2
 1370 006c 05EB8303 	 add r3,r5,r3,lsl#2
 1371 0070 9A42     	 cmp r2,r3
 1372 0072 19D1     	 bne .L171
1526:../Dave/Generated/FREERTOS/tasks.c **** 					{
 1373              	 .loc 1 1526 0
 1374 0074 04F10408 	 add r8,r4,#4
 1375 0078 4046     	 mov r0,r8
 1376 007a FFF7FEFF 	 bl uxListRemove
 1377              	.LVL144:
1531:../Dave/Generated/FREERTOS/tasks.c **** 					}
 1378              	 .loc 1 1531 0
 1379 007e 154B     	 ldr r3,.L182+8
1526:../Dave/Generated/FREERTOS/tasks.c **** 					{
 1380              	 .loc 1 1526 0
 1381 0080 28B9     	 cbnz r0,.L174
1531:../Dave/Generated/FREERTOS/tasks.c **** 					}
 1382              	 .loc 1 1531 0
 1383 0082 1A68     	 ldr r2,[r3]
 1384 0084 0121     	 movs r1,#1
 1385 0086 B940     	 lsls r1,r1,r7
 1386 0088 22EA0102 	 bic r2,r2,r1
 1387 008c 1A60     	 str r2,[r3]
 1388              	.L174:
1537:../Dave/Generated/FREERTOS/tasks.c **** 				}
 1389              	 .loc 1 1537 0
 1390 008e E06A     	 ldr r0,[r4,#44]
 1391 0090 1A68     	 ldr r2,[r3]
 1392 0092 0124     	 movs r4,#1
 1393              	.LVL145:
 1394 0094 8440     	 lsls r4,r4,r0
 1395 0096 00EB8000 	 add r0,r0,r0,lsl#2
 1396 009a 2243     	 orrs r2,r2,r4
 1397 009c 4146     	 mov r1,r8
 1398 009e 05EB8000 	 add r0,r5,r0,lsl#2
 1399 00a2 1A60     	 str r2,[r3]
 1400 00a4 FFF7FEFF 	 bl vListInsertEnd
 1401              	.LVL146:
 1402              	.L171:
1544:../Dave/Generated/FREERTOS/tasks.c **** 				{
 1403              	 .loc 1 1544 0
 1404 00a8 3EB1     	 cbz r6,.L165
1546:../Dave/Generated/FREERTOS/tasks.c **** 				}
 1405              	 .loc 1 1546 0
 1406 00aa 0B4B     	 ldr r3,.L182+12
 1407 00ac 4FF08052 	 mov r2,#268435456
 1408 00b0 1A60     	 str r2,[r3]
 1409              	
 1410 00b2 BFF34F8F 	 dsb
 1411              	
 1412              	
 1413 00b6 BFF36F8F 	 isb
 1414              	
 1415              	.LVL147:
 1416              	 .thumb
 1417              	.L165:
1559:../Dave/Generated/FREERTOS/tasks.c **** 
 1418              	 .loc 1 1559 0
 1419 00ba BDE8F041 	 pop {r4,r5,r6,r7,r8,lr}
 1420              	.LCFI12:
 1421              	 .cfi_remember_state
 1422              	 .cfi_restore 14
 1423              	 .cfi_restore 8
 1424              	 .cfi_restore 7
 1425              	 .cfi_restore 6
 1426              	 .cfi_restore 5
 1427              	 .cfi_restore 4
 1428              	 .cfi_def_cfa_offset 0
1558:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1429              	 .loc 1 1558 0
 1430 00be FFF7FEBF 	 b vPortExitCritical
 1431              	.LVL148:
 1432              	.L181:
 1433              	.LCFI13:
 1434              	 .cfi_restore_state
1424:../Dave/Generated/FREERTOS/tasks.c **** 
 1435              	 .loc 1 1424 0 discriminator 1
 1436 00c2 024B     	 ldr r3,.L182
 1437 00c4 1C68     	 ldr r4,[r3]
 1438              	.LVL149:
 1439 00c6 AEE7     	 b .L163
 1440              	.LVL150:
 1441              	.L175:
1406:../Dave/Generated/FREERTOS/tasks.c **** 
 1442              	 .loc 1 1406 0
 1443 00c8 0026     	 movs r6,#0
 1444 00ca C0E7     	 b .L167
 1445              	.L183:
 1446              	 .align 2
 1447              	.L182:
 1448 00cc 00000000 	 .word .LANCHOR1
 1449 00d0 00000000 	 .word .LANCHOR8
 1450 00d4 00000000 	 .word .LANCHOR2
 1451 00d8 04ED00E0 	 .word -536810236
 1452              	 .cfi_endproc
 1453              	.LFE137:
 1455              	 .section .text.vTaskSuspend,"ax",%progbits
 1456              	 .align 2
 1457              	 .global vTaskSuspend
 1458              	 .thumb
 1459              	 .thumb_func
 1461              	vTaskSuspend:
 1462              	.LFB138:
1567:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 1463              	 .loc 1 1567 0
 1464              	 .cfi_startproc
 1465              	 
 1466              	 
 1467              	.LVL151:
 1468 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 1469              	.LCFI14:
 1470              	 .cfi_def_cfa_offset 24
 1471              	 .cfi_offset 3,-24
 1472              	 .cfi_offset 4,-20
 1473              	 .cfi_offset 5,-16
 1474              	 .cfi_offset 6,-12
 1475              	 .cfi_offset 7,-8
 1476              	 .cfi_offset 14,-4
1567:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 1477              	 .loc 1 1567 0
 1478 0002 0546     	 mov r5,r0
1574:../Dave/Generated/FREERTOS/tasks.c **** 
 1479              	 .loc 1 1574 0
 1480 0004 494C     	 ldr r4,.L219
1570:../Dave/Generated/FREERTOS/tasks.c **** 		{
 1481              	 .loc 1 1570 0
 1482 0006 FFF7FEFF 	 bl vPortEnterCritical
 1483              	.LVL152:
1574:../Dave/Generated/FREERTOS/tasks.c **** 
 1484              	 .loc 1 1574 0
 1485 000a 002D     	 cmp r5,#0
 1486 000c 70D0     	 beq .L212
 1487              	.LVL153:
 1488              	.L185:
1580:../Dave/Generated/FREERTOS/tasks.c **** 			{
 1489              	 .loc 1 1580 0 discriminator 4
 1490 000e 2E1D     	 adds r6,r5,#4
 1491 0010 3046     	 mov r0,r6
 1492 0012 FFF7FEFF 	 bl uxListRemove
 1493              	.LVL154:
 1494 0016 30B9     	 cbnz r0,.L186
1582:../Dave/Generated/FREERTOS/tasks.c **** 			}
 1495              	 .loc 1 1582 0
 1496 0018 E96A     	 ldr r1,[r5,#44]
 1497 001a 454B     	 ldr r3,.L219+4
 1498 001c 01EB8102 	 add r2,r1,r1,lsl#2
 1499 0020 53F82230 	 ldr r3,[r3,r2,lsl#2]
 1500 0024 9BB1     	 cbz r3,.L213
 1501              	.L186:
1590:../Dave/Generated/FREERTOS/tasks.c **** 			{
 1502              	 .loc 1 1590 0
 1503 0026 AB6A     	 ldr r3,[r5,#40]
 1504 0028 1BB1     	 cbz r3,.L187
1592:../Dave/Generated/FREERTOS/tasks.c **** 			}
 1505              	 .loc 1 1592 0
 1506 002a 05F11800 	 add r0,r5,#24
 1507 002e FFF7FEFF 	 bl uxListRemove
 1508              	.LVL155:
 1509              	.L187:
1603:../Dave/Generated/FREERTOS/tasks.c **** 		{
 1510              	 .loc 1 1603 0
 1511 0032 404F     	 ldr r7,.L219+8
1599:../Dave/Generated/FREERTOS/tasks.c **** 		}
 1512              	 .loc 1 1599 0
 1513 0034 4048     	 ldr r0,.L219+12
 1514 0036 3146     	 mov r1,r6
 1515 0038 FFF7FEFF 	 bl vListInsertEnd
 1516              	.LVL156:
1601:../Dave/Generated/FREERTOS/tasks.c **** 
 1517              	 .loc 1 1601 0
 1518 003c FFF7FEFF 	 bl vPortExitCritical
 1519              	.LVL157:
1603:../Dave/Generated/FREERTOS/tasks.c **** 		{
 1520              	 .loc 1 1603 0
 1521 0040 3B68     	 ldr r3,[r7]
 1522 0042 63B9     	 cbnz r3,.L214
1618:../Dave/Generated/FREERTOS/tasks.c **** 		{
 1523              	 .loc 1 1618 0
 1524 0044 2368     	 ldr r3,[r4]
 1525 0046 394A     	 ldr r2,.L219
 1526 0048 9D42     	 cmp r5,r3
 1527 004a 1BD0     	 beq .L215
 1528              	.L184:
 1529 004c F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1530              	.LVL158:
 1531              	.L213:
1582:../Dave/Generated/FREERTOS/tasks.c **** 			}
 1532              	 .loc 1 1582 0 discriminator 1
 1533 004e 3B48     	 ldr r0,.L219+16
 1534 0050 0122     	 movs r2,#1
 1535 0052 0368     	 ldr r3,[r0]
 1536 0054 8A40     	 lsls r2,r2,r1
 1537 0056 23EA0203 	 bic r3,r3,r2
 1538 005a 0360     	 str r3,[r0]
 1539 005c E3E7     	 b .L186
 1540              	.L214:
1607:../Dave/Generated/FREERTOS/tasks.c **** 			{
 1541              	 .loc 1 1607 0
 1542 005e FFF7FEFF 	 bl vPortEnterCritical
 1543              	.LVL159:
 1544              	.LBB248:
 1545              	.LBB249:
3639:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1546              	 .loc 1 3639 0
 1547 0062 374B     	 ldr r3,.L219+20
 1548 0064 1A68     	 ldr r2,[r3]
 1549 0066 1268     	 ldr r2,[r2]
 1550 0068 002A     	 cmp r2,#0
 1551 006a 3CD0     	 beq .L189
 1552              	.LBB250:
 1553              	.LBB251:
3653:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 1554              	 .loc 1 3653 0
 1555 006c 1A68     	 ldr r2,[r3]
 1556              	.LVL160:
3654:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1557              	 .loc 1 3654 0
 1558 006e 354B     	 ldr r3,.L219+24
3653:../Dave/Generated/FREERTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 1559              	 .loc 1 3653 0
 1560 0070 D268     	 ldr r2,[r2,#12]
 1561              	.LVL161:
3654:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1562              	 .loc 1 3654 0
 1563 0072 D268     	 ldr r2,[r2,#12]
 1564              	.LVL162:
 1565 0074 5268     	 ldr r2,[r2,#4]
 1566              	.LVL163:
 1567 0076 1A60     	 str r2,[r3]
 1568              	.L200:
 1569              	.LBE251:
 1570              	.LBE250:
 1571              	.LBE249:
 1572              	.LBE248:
1611:../Dave/Generated/FREERTOS/tasks.c **** 		}
 1573              	 .loc 1 1611 0
 1574 0078 FFF7FEFF 	 bl vPortExitCritical
 1575              	.LVL164:
1618:../Dave/Generated/FREERTOS/tasks.c **** 		{
 1576              	 .loc 1 1618 0
 1577 007c 2368     	 ldr r3,[r4]
 1578 007e 2B4A     	 ldr r2,.L219
 1579 0080 9D42     	 cmp r5,r3
 1580 0082 E3D1     	 bne .L184
 1581              	.L215:
1620:../Dave/Generated/FREERTOS/tasks.c **** 			{
 1582              	 .loc 1 1620 0
 1583 0084 3B68     	 ldr r3,[r7]
 1584 0086 13BB     	 cbnz r3,.L216
1631:../Dave/Generated/FREERTOS/tasks.c **** 				{
 1585              	 .loc 1 1631 0
 1586 0088 2F49     	 ldr r1,.L219+28
 1587 008a 2B48     	 ldr r0,.L219+12
 1588 008c 0968     	 ldr r1,[r1]
 1589 008e 0068     	 ldr r0,[r0]
 1590 0090 8842     	 cmp r0,r1
 1591 0092 2FD0     	 beq .L217
 1592              	.LBB253:
 1593              	.LBB254:
2763:../Dave/Generated/FREERTOS/tasks.c **** 	{
 1594              	 .loc 1 2763 0
 1595 0094 2D4B     	 ldr r3,.L219+32
 1596 0096 1B68     	 ldr r3,[r3]
 1597 0098 002B     	 cmp r3,#0
 1598 009a 36D1     	 bne .L218
2771:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 1599              	 .loc 1 2771 0
 1600 009c 2C49     	 ldr r1,.L219+36
 1601              	.LBB255:
2806:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 1602              	 .loc 1 2806 0
 1603 009e 274A     	 ldr r2,.L219+16
 1604              	.LBE255:
2771:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 1605              	 .loc 1 2771 0
 1606 00a0 0B60     	 str r3,[r1]
 1607              	.LBB259:
2806:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 1608              	 .loc 1 2806 0
 1609 00a2 1368     	 ldr r3,[r2]
 1610              	.LVL165:
 1611              	.LBB256:
 1612              	.LBB257:
 179:../Dave/Generated/FREERTOS/portmacro.h **** 		return ucReturn;
 1613              	 .loc 2 179 0
 1614              	
 1615 00a4 B3FA83F3 	 clz r3,r3
 1616              	
 1617              	.LVL166:
 1618              	 .thumb
 1619 00a8 DBB2     	 uxtb r3,r3
 1620              	.LVL167:
 1621              	.LBE257:
 1622              	.LBE256:
2806:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 1623              	 .loc 1 2806 0
 1624 00aa C3F11F03 	 rsb r3,r3,#31
 1625              	.LVL168:
 1626 00ae 03EB8303 	 add r3,r3,r3,lsl#2
 1627              	.LVL169:
 1628 00b2 9B00     	 lsls r3,r3,#2
 1629 00b4 1E48     	 ldr r0,.L219+4
 1630 00b6 C258     	 ldr r2,[r0,r3]
 1631 00b8 C118     	 adds r1,r0,r3
 1632 00ba 52BB     	 cbnz r2,.L197
 1633              	.LBE259:
 1634              	.LBB260:
 1635              	.LBB261:
 1636              	.LBB262:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1637              	 .loc 2 240 0
 1638              	
 1639 00bc 4FF0FC03 	 mov r3,#252
 1640 00c0 83F31188 	 msr basepri,r3
 1641 00c4 BFF36F8F 	 isb 
 1642 00c8 BFF34F8F 	 dsb 
 1643              	
 1644              	
 1645              	.LVL170:
 1646              	 .thumb
 1647              	.L198:
 1648 00cc FEE7     	 b .L198
 1649              	.L216:
 1650              	.LBE262:
 1651              	.LBE261:
 1652              	.LBE260:
 1653              	.LBE254:
 1654              	.LBE253:
1623:../Dave/Generated/FREERTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1655              	 .loc 1 1623 0
 1656 00ce 1F4B     	 ldr r3,.L219+32
 1657 00d0 1B68     	 ldr r3,[r3]
 1658 00d2 8BB1     	 cbz r3,.L193
 1659              	.LBB265:
 1660              	.LBB266:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1661              	 .loc 2 240 0
 1662              	
 1663 00d4 4FF0FC03 	 mov r3,#252
 1664 00d8 83F31188 	 msr basepri,r3
 1665 00dc BFF36F8F 	 isb 
 1666 00e0 BFF34F8F 	 dsb 
 1667              	
 1668              	
 1669              	.LVL171:
 1670              	 .thumb
 1671              	.L194:
 1672              	.LBE266:
 1673              	.LBE265:
1623:../Dave/Generated/FREERTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1674              	 .loc 1 1623 0 discriminator 1
 1675 00e4 FEE7     	 b .L194
 1676              	.L189:
 1677              	.LBB267:
 1678              	.LBB252:
3645:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1679              	 .loc 1 3645 0
 1680 00e6 174B     	 ldr r3,.L219+24
 1681 00e8 4FF0FF32 	 mov r2,#-1
 1682 00ec 1A60     	 str r2,[r3]
 1683 00ee C3E7     	 b .L200
 1684              	.LVL172:
 1685              	.L212:
 1686              	.LBE252:
 1687              	.LBE267:
1574:../Dave/Generated/FREERTOS/tasks.c **** 
 1688              	 .loc 1 1574 0 discriminator 1
 1689 00f0 2568     	 ldr r5,[r4]
 1690              	.LVL173:
 1691 00f2 8CE7     	 b .L185
 1692              	.LVL174:
 1693              	.L217:
1637:../Dave/Generated/FREERTOS/tasks.c **** 				}
 1694              	 .loc 1 1637 0
 1695 00f4 1360     	 str r3,[r2]
 1696 00f6 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1697              	.LVL175:
 1698              	.L193:
1624:../Dave/Generated/FREERTOS/tasks.c **** 			}
 1699              	 .loc 1 1624 0
 1700 00f8 164B     	 ldr r3,.L219+40
 1701 00fa 4FF08052 	 mov r2,#268435456
 1702 00fe 1A60     	 str r2,[r3]
 1703              	
 1704 0100 BFF34F8F 	 dsb
 1705              	
 1706              	
 1707 0104 BFF36F8F 	 isb
 1708              	
 1709              	 .thumb
 1710 0108 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1711              	.LVL176:
 1712              	.L218:
 1713              	.LBB268:
 1714              	.LBB264:
2767:../Dave/Generated/FREERTOS/tasks.c **** 	}
 1715              	 .loc 1 2767 0
 1716 010a 114B     	 ldr r3,.L219+36
 1717 010c 0122     	 movs r2,#1
 1718 010e 1A60     	 str r2,[r3]
 1719 0110 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1720              	.LVL177:
 1721              	.L197:
 1722              	.LBB263:
 1723              	.LBB258:
2806:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 1724              	 .loc 1 2806 0
 1725 0112 4A68     	 ldr r2,[r1,#4]
 1726 0114 0833     	 adds r3,r3,#8
 1727 0116 5268     	 ldr r2,[r2,#4]
 1728 0118 4A60     	 str r2,[r1,#4]
 1729 011a 0344     	 add r3,r3,r0
 1730 011c 9A42     	 cmp r2,r3
 1731 011e 04BF     	 itt eq
 1732 0120 5268     	 ldreq r2,[r2,#4]
 1733 0122 4A60     	 streq r2,[r1,#4]
 1734 0124 D368     	 ldr r3,[r2,#12]
 1735 0126 2360     	 str r3,[r4]
 1736 0128 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1737              	.LVL178:
 1738              	.L220:
 1739 012a 00BF     	 .align 2
 1740              	.L219:
 1741 012c 00000000 	 .word .LANCHOR1
 1742 0130 00000000 	 .word .LANCHOR8
 1743 0134 00000000 	 .word .LANCHOR13
 1744 0138 00000000 	 .word .LANCHOR3
 1745 013c 00000000 	 .word .LANCHOR2
 1746 0140 00000000 	 .word .LANCHOR5
 1747 0144 00000000 	 .word .LANCHOR6
 1748 0148 00000000 	 .word .LANCHOR7
 1749 014c 00000000 	 .word .LANCHOR16
 1750 0150 00000000 	 .word .LANCHOR17
 1751 0154 04ED00E0 	 .word -536810236
 1752              	.LBE258:
 1753              	.LBE263:
 1754              	.LBE264:
 1755              	.LBE268:
 1756              	 .cfi_endproc
 1757              	.LFE138:
 1759              	 .section .text.vTaskResume,"ax",%progbits
 1760              	 .align 2
 1761              	 .global vTaskResume
 1762              	 .thumb
 1763              	 .thumb_func
 1765              	vTaskResume:
 1766              	.LFB140:
1703:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1767              	 .loc 1 1703 0
 1768              	 .cfi_startproc
 1769              	 
 1770              	 
 1771              	.LVL179:
1707:../Dave/Generated/FREERTOS/tasks.c **** 
 1772              	 .loc 1 1707 0
 1773 0000 90B1     	 cbz r0,.L231
1703:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1774              	 .loc 1 1703 0 discriminator 1
 1775 0002 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 1776              	.LCFI15:
 1777              	 .cfi_def_cfa_offset 24
 1778              	 .cfi_offset 4,-24
 1779              	 .cfi_offset 5,-20
 1780              	 .cfi_offset 6,-16
 1781              	 .cfi_offset 7,-12
 1782              	 .cfi_offset 8,-8
 1783              	 .cfi_offset 14,-4
1711:../Dave/Generated/FREERTOS/tasks.c **** 		{
 1784              	 .loc 1 1711 0 discriminator 1
 1785 0006 224E     	 ldr r6,.L233
 1786 0008 3368     	 ldr r3,[r6]
 1787 000a 9842     	 cmp r0,r3
 1788 000c 0AD0     	 beq .L221
 1789 000e 0446     	 mov r4,r0
1713:../Dave/Generated/FREERTOS/tasks.c **** 			{
 1790              	 .loc 1 1713 0
 1791 0010 FFF7FEFF 	 bl vPortEnterCritical
 1792              	.LVL180:
 1793              	.LBB277:
 1794              	.LBB278:
1668:../Dave/Generated/FREERTOS/tasks.c **** 		{
 1795              	 .loc 1 1668 0
 1796 0014 1F4B     	 ldr r3,.L233+4
 1797 0016 6269     	 ldr r2,[r4,#20]
 1798 0018 9A42     	 cmp r2,r3
 1799 001a 0ED0     	 beq .L232
 1800              	.LVL181:
 1801              	.L226:
 1802              	.LBE278:
 1803              	.LBE277:
1748:../Dave/Generated/FREERTOS/tasks.c **** 
 1804              	 .loc 1 1748 0
 1805 001c BDE8F041 	 pop {r4,r5,r6,r7,r8,lr}
 1806              	.LCFI16:
 1807              	 .cfi_remember_state
 1808              	 .cfi_restore 14
 1809              	 .cfi_restore 8
 1810              	 .cfi_restore 7
 1811              	 .cfi_restore 6
 1812              	 .cfi_restore 5
 1813              	 .cfi_restore 4
 1814              	 .cfi_def_cfa_offset 0
 1815              	.LVL182:
1742:../Dave/Generated/FREERTOS/tasks.c **** 		}
 1816              	 .loc 1 1742 0
 1817 0020 FFF7FEBF 	 b vPortExitCritical
 1818              	.LVL183:
 1819              	.L221:
 1820              	.LCFI17:
 1821              	 .cfi_restore_state
 1822 0024 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1823              	.L231:
 1824              	.LCFI18:
 1825              	 .cfi_def_cfa_offset 0
 1826              	 .cfi_restore 4
 1827              	 .cfi_restore 5
 1828              	 .cfi_restore 6
 1829              	 .cfi_restore 7
 1830              	 .cfi_restore 8
 1831              	 .cfi_restore 14
 1832              	.LBB280:
 1833              	.LBB281:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1834              	 .loc 2 240 0
 1835              	
 1836 0028 4FF0FC03 	 mov r3,#252
 1837 002c 83F31188 	 msr basepri,r3
 1838 0030 BFF36F8F 	 isb 
 1839 0034 BFF34F8F 	 dsb 
 1840              	
 1841              	
 1842              	.LVL184:
 1843              	 .thumb
 1844              	.L223:
 1845              	.LBE281:
 1846              	.LBE280:
1707:../Dave/Generated/FREERTOS/tasks.c **** 
 1847              	 .loc 1 1707 0 discriminator 1
 1848 0038 FEE7     	 b .L223
 1849              	.LVL185:
 1850              	.L232:
 1851              	.LCFI19:
 1852              	 .cfi_def_cfa_offset 24
 1853              	 .cfi_offset 4,-24
 1854              	 .cfi_offset 5,-20
 1855              	 .cfi_offset 6,-16
 1856              	 .cfi_offset 7,-12
 1857              	 .cfi_offset 8,-8
 1858              	 .cfi_offset 14,-4
 1859              	.LBB282:
 1860              	.LBB279:
1671:../Dave/Generated/FREERTOS/tasks.c **** 			{
 1861              	 .loc 1 1671 0
 1862 003a A36A     	 ldr r3,[r4,#40]
 1863 003c 164A     	 ldr r2,.L233+8
 1864 003e 9342     	 cmp r3,r2
 1865 0040 ECD0     	 beq .L226
 1866              	.LVL186:
 1867              	.LBE279:
 1868              	.LBE282:
1715:../Dave/Generated/FREERTOS/tasks.c **** 				{
 1869              	 .loc 1 1715 0
 1870 0042 002B     	 cmp r3,#0
 1871 0044 EAD1     	 bne .L226
1721:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1872              	 .loc 1 1721 0
 1873 0046 04F10408 	 add r8,r4,#4
1722:../Dave/Generated/FREERTOS/tasks.c **** 
 1874              	 .loc 1 1722 0
 1875 004a 144F     	 ldr r7,.L233+12
1721:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1876              	 .loc 1 1721 0
 1877 004c 4046     	 mov r0,r8
 1878 004e FFF7FEFF 	 bl uxListRemove
 1879              	.LVL187:
1722:../Dave/Generated/FREERTOS/tasks.c **** 
 1880              	 .loc 1 1722 0
 1881 0052 E36A     	 ldr r3,[r4,#44]
 1882 0054 3A68     	 ldr r2,[r7]
 1883 0056 1248     	 ldr r0,.L233+16
 1884 0058 0125     	 movs r5,#1
 1885 005a 9D40     	 lsls r5,r5,r3
 1886 005c 03EB8303 	 add r3,r3,r3,lsl#2
 1887 0060 2A43     	 orrs r2,r2,r5
 1888 0062 00EB8300 	 add r0,r0,r3,lsl#2
 1889 0066 4146     	 mov r1,r8
 1890 0068 3A60     	 str r2,[r7]
 1891 006a FFF7FEFF 	 bl vListInsertEnd
 1892              	.LVL188:
1725:../Dave/Generated/FREERTOS/tasks.c **** 					{
 1893              	 .loc 1 1725 0
 1894 006e 3368     	 ldr r3,[r6]
 1895 0070 E26A     	 ldr r2,[r4,#44]
 1896 0072 DB6A     	 ldr r3,[r3,#44]
 1897 0074 9A42     	 cmp r2,r3
 1898 0076 D1D3     	 bcc .L226
1730:../Dave/Generated/FREERTOS/tasks.c **** 					}
 1899              	 .loc 1 1730 0
 1900 0078 0A4B     	 ldr r3,.L233+20
 1901 007a 4FF08052 	 mov r2,#268435456
 1902 007e 1A60     	 str r2,[r3]
 1903              	
 1904 0080 BFF34F8F 	 dsb
 1905              	
 1906              	
 1907 0084 BFF36F8F 	 isb
 1908              	
1748:../Dave/Generated/FREERTOS/tasks.c **** 
 1909              	 .loc 1 1748 0
 1910              	 .thumb
 1911 0088 BDE8F041 	 pop {r4,r5,r6,r7,r8,lr}
 1912              	.LCFI20:
 1913              	 .cfi_restore 4
 1914              	 .cfi_restore 5
 1915              	 .cfi_restore 6
 1916              	 .cfi_restore 7
 1917              	 .cfi_restore 8
 1918              	 .cfi_restore 14
 1919              	 .cfi_def_cfa_offset 0
 1920              	.LVL189:
1742:../Dave/Generated/FREERTOS/tasks.c **** 		}
 1921              	 .loc 1 1742 0
 1922 008c FFF7FEBF 	 b vPortExitCritical
 1923              	.LVL190:
 1924              	.L234:
 1925              	 .align 2
 1926              	.L233:
 1927 0090 00000000 	 .word .LANCHOR1
 1928 0094 00000000 	 .word .LANCHOR3
 1929 0098 00000000 	 .word .LANCHOR11
 1930 009c 00000000 	 .word .LANCHOR2
 1931 00a0 00000000 	 .word .LANCHOR8
 1932 00a4 04ED00E0 	 .word -536810236
 1933              	 .cfi_endproc
 1934              	.LFE140:
 1936              	 .section .text.xTaskResumeFromISR,"ax",%progbits
 1937              	 .align 2
 1938              	 .global xTaskResumeFromISR
 1939              	 .thumb
 1940              	 .thumb_func
 1942              	xTaskResumeFromISR:
 1943              	.LFB141:
1757:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1944              	 .loc 1 1757 0
 1945              	 .cfi_startproc
 1946              	 
 1947              	 
 1948              	.LVL191:
1762:../Dave/Generated/FREERTOS/tasks.c **** 
 1949              	 .loc 1 1762 0
 1950 0000 C0B1     	 cbz r0,.L246
1757:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1951              	 .loc 1 1757 0
 1952 0002 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 1953              	.LCFI21:
 1954              	 .cfi_def_cfa_offset 24
 1955              	 .cfi_offset 4,-24
 1956              	 .cfi_offset 5,-20
 1957              	 .cfi_offset 6,-16
 1958              	 .cfi_offset 7,-12
 1959              	 .cfi_offset 8,-8
 1960              	 .cfi_offset 14,-4
 1961 0006 0546     	 mov r5,r0
1780:../Dave/Generated/FREERTOS/tasks.c **** 
 1962              	 .loc 1 1780 0
 1963 0008 FFF7FEFF 	 bl vPortValidateInterruptPriority
 1964              	.LVL192:
 1965              	.LBB295:
 1966              	.LBB296:
 256:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1967              	 .loc 2 256 0
 1968              	
 1969 000c EFF31186 	 mrs r6,basepri
 1970 0010 4FF0FC03 	 mov r3,#252
 1971 0014 83F31188 	 msr basepri,r3
 1972 0018 BFF36F8F 	 isb 
 1973 001c BFF34F8F 	 dsb 
 1974              	
 1975              	
 1976              	.LVL193:
 1977              	 .thumb
 1978              	.LBE296:
 1979              	.LBE295:
 1980              	.LBB297:
 1981              	.LBB298:
1668:../Dave/Generated/FREERTOS/tasks.c **** 		{
 1982              	 .loc 1 1668 0
 1983 0020 224B     	 ldr r3,.L248
 1984 0022 6A69     	 ldr r2,[r5,#20]
 1985 0024 9A42     	 cmp r2,r3
 1986 0026 0ED0     	 beq .L247
 1987              	.LVL194:
 1988              	.L245:
 1989              	.LBE298:
 1990              	.LBE297:
1758:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1991              	 .loc 1 1758 0
 1992 0028 0024     	 movs r4,#0
 1993              	.LVL195:
 1994              	.LBB300:
 1995              	.LBB301:
 1996              	 .loc 2 274 0
 1997              	
 1998 002a 86F31188 	 msr basepri,r6
 1999              	
 2000              	 .thumb
 2001              	.LBE301:
 2002              	.LBE300:
1821:../Dave/Generated/FREERTOS/tasks.c **** 
 2003              	 .loc 1 1821 0
 2004 002e 2046     	 mov r0,r4
 2005 0030 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 2006              	.LVL196:
 2007              	.L246:
 2008              	.LCFI22:
 2009              	 .cfi_def_cfa_offset 0
 2010              	 .cfi_restore 4
 2011              	 .cfi_restore 5
 2012              	 .cfi_restore 6
 2013              	 .cfi_restore 7
 2014              	 .cfi_restore 8
 2015              	 .cfi_restore 14
 2016              	.LBB304:
 2017              	.LBB305:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2018              	 .loc 2 240 0
 2019              	
 2020 0034 4FF0FC03 	 mov r3,#252
 2021 0038 83F31188 	 msr basepri,r3
 2022 003c BFF36F8F 	 isb 
 2023 0040 BFF34F8F 	 dsb 
 2024              	
 2025              	
 2026              	.LVL197:
 2027              	 .thumb
 2028              	.L237:
 2029              	.LBE305:
 2030              	.LBE304:
1762:../Dave/Generated/FREERTOS/tasks.c **** 
 2031              	 .loc 1 1762 0 discriminator 1
 2032 0044 FEE7     	 b .L237
 2033              	.LVL198:
 2034              	.L247:
 2035              	.LCFI23:
 2036              	 .cfi_def_cfa_offset 24
 2037              	 .cfi_offset 4,-24
 2038              	 .cfi_offset 5,-20
 2039              	 .cfi_offset 6,-16
 2040              	 .cfi_offset 7,-12
 2041              	 .cfi_offset 8,-8
 2042              	 .cfi_offset 14,-4
 2043              	.LBB306:
 2044              	.LBB299:
1671:../Dave/Generated/FREERTOS/tasks.c **** 			{
 2045              	 .loc 1 1671 0
 2046 0046 AC6A     	 ldr r4,[r5,#40]
 2047 0048 1948     	 ldr r0,.L248+4
 2048 004a 8442     	 cmp r4,r0
 2049 004c ECD0     	 beq .L245
 2050              	.LVL199:
 2051              	.LBE299:
 2052              	.LBE306:
1784:../Dave/Generated/FREERTOS/tasks.c **** 			{
 2053              	 .loc 1 1784 0
 2054 004e 002C     	 cmp r4,#0
 2055 0050 EAD1     	 bne .L245
1789:../Dave/Generated/FREERTOS/tasks.c **** 				{
 2056              	 .loc 1 1789 0
 2057 0052 184B     	 ldr r3,.L248+8
 2058 0054 1B68     	 ldr r3,[r3]
 2059 0056 03BB     	 cbnz r3,.L240
1793:../Dave/Generated/FREERTOS/tasks.c **** 					{
 2060              	 .loc 1 1793 0
 2061 0058 174B     	 ldr r3,.L248+12
 2062 005a EC6A     	 ldr r4,[r5,#44]
 2063              	.LVL200:
 2064 005c 1B68     	 ldr r3,[r3]
1803:../Dave/Generated/FREERTOS/tasks.c **** 				}
 2065              	 .loc 1 1803 0
 2066 005e 174F     	 ldr r7,.L248+16
1793:../Dave/Generated/FREERTOS/tasks.c **** 					{
 2067              	 .loc 1 1793 0
 2068 0060 DB6A     	 ldr r3,[r3,#44]
1802:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2069              	 .loc 1 1802 0
 2070 0062 05F10408 	 add r8,r5,#4
1793:../Dave/Generated/FREERTOS/tasks.c **** 					{
 2071              	 .loc 1 1793 0
 2072 0066 9C42     	 cmp r4,r3
1802:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2073              	 .loc 1 1802 0
 2074 0068 4046     	 mov r0,r8
1793:../Dave/Generated/FREERTOS/tasks.c **** 					{
 2075              	 .loc 1 1793 0
 2076 006a 34BF     	 ite cc
 2077 006c 0024     	 movcc r4,#0
 2078 006e 0124     	 movcs r4,#1
 2079              	.LVL201:
1802:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2080              	 .loc 1 1802 0
 2081 0070 FFF7FEFF 	 bl uxListRemove
 2082              	.LVL202:
1803:../Dave/Generated/FREERTOS/tasks.c **** 				}
 2083              	 .loc 1 1803 0
 2084 0074 EB6A     	 ldr r3,[r5,#44]
 2085 0076 3A68     	 ldr r2,[r7]
 2086 0078 1148     	 ldr r0,.L248+20
 2087 007a 0125     	 movs r5,#1
 2088              	.LVL203:
 2089 007c 9D40     	 lsls r5,r5,r3
 2090 007e 03EB8303 	 add r3,r3,r3,lsl#2
 2091 0082 2A43     	 orrs r2,r2,r5
 2092 0084 4146     	 mov r1,r8
 2093 0086 00EB8300 	 add r0,r0,r3,lsl#2
 2094 008a 3A60     	 str r2,[r7]
 2095 008c FFF7FEFF 	 bl vListInsertEnd
 2096              	.LVL204:
 2097              	.LBB307:
 2098              	.LBB302:
 2099              	 .loc 2 274 0
 2100              	
 2101 0090 86F31188 	 msr basepri,r6
 2102              	
 2103              	 .thumb
 2104              	.LBE302:
 2105              	.LBE307:
1821:../Dave/Generated/FREERTOS/tasks.c **** 
 2106              	 .loc 1 1821 0
 2107 0094 2046     	 mov r0,r4
 2108 0096 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 2109              	.LVL205:
 2110              	.L240:
1810:../Dave/Generated/FREERTOS/tasks.c **** 				}
 2111              	 .loc 1 1810 0
 2112 009a 05F11801 	 add r1,r5,#24
 2113 009e FFF7FEFF 	 bl vListInsertEnd
 2114              	.LVL206:
 2115              	.LBB308:
 2116              	.LBB303:
 2117              	 .loc 2 274 0
 2118              	
 2119 00a2 86F31188 	 msr basepri,r6
 2120              	
 2121              	 .thumb
 2122              	.LBE303:
 2123              	.LBE308:
1821:../Dave/Generated/FREERTOS/tasks.c **** 
 2124              	 .loc 1 1821 0
 2125 00a6 2046     	 mov r0,r4
 2126 00a8 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 2127              	.LVL207:
 2128              	.L249:
 2129              	 .align 2
 2130              	.L248:
 2131 00ac 00000000 	 .word .LANCHOR3
 2132 00b0 00000000 	 .word .LANCHOR11
 2133 00b4 00000000 	 .word .LANCHOR16
 2134 00b8 00000000 	 .word .LANCHOR1
 2135 00bc 00000000 	 .word .LANCHOR2
 2136 00c0 00000000 	 .word .LANCHOR8
 2137              	 .cfi_endproc
 2138              	.LFE141:
 2140              	 .section .text.vTaskStartScheduler,"ax",%progbits
 2141              	 .align 2
 2142              	 .global vTaskStartScheduler
 2143              	 .thumb
 2144              	 .thumb_func
 2146              	vTaskStartScheduler:
 2147              	.LFB142:
1827:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xReturn;
 2148              	 .loc 1 1827 0
 2149              	 .cfi_startproc
 2150              	 
 2151              	 
 2152 0000 30B5     	 push {r4,r5,lr}
 2153              	.LCFI24:
 2154              	 .cfi_def_cfa_offset 12
 2155              	 .cfi_offset 4,-12
 2156              	 .cfi_offset 5,-8
 2157              	 .cfi_offset 14,-4
 2158 0002 83B0     	 sub sp,sp,#12
 2159              	.LCFI25:
 2160              	 .cfi_def_cfa_offset 24
1860:../Dave/Generated/FREERTOS/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 2161              	 .loc 1 1860 0
 2162 0004 0024     	 movs r4,#0
 2163 0006 184A     	 ldr r2,.L257
 2164 0008 0192     	 str r2,[sp,#4]
 2165 000a 0094     	 str r4,[sp]
 2166 000c 2346     	 mov r3,r4
 2167 000e 1748     	 ldr r0,.L257+4
 2168 0010 1749     	 ldr r1,.L257+8
 2169 0012 8222     	 movs r2,#130
 2170 0014 FFF7FEFF 	 bl xTaskCreate
 2171              	.LVL208:
1870:../Dave/Generated/FREERTOS/tasks.c **** 		{
 2172              	 .loc 1 1870 0
 2173 0018 0128     	 cmp r0,#1
 2174 001a 0CD0     	 beq .L255
 2175              	.L251:
1924:../Dave/Generated/FREERTOS/tasks.c **** 	}
 2176              	 .loc 1 1924 0
 2177 001c 0130     	 adds r0,r0,#1
 2178              	.LVL209:
 2179 001e 01D0     	 beq .L256
1930:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 2180              	 .loc 1 1930 0
 2181 0020 03B0     	 add sp,sp,#12
 2182              	.LCFI26:
 2183              	 .cfi_remember_state
 2184              	 .cfi_def_cfa_offset 12
 2185              	 
 2186 0022 30BD     	 pop {r4,r5,pc}
 2187              	.L256:
 2188              	.LCFI27:
 2189              	 .cfi_restore_state
 2190              	.LBB309:
 2191              	.LBB310:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2192              	 .loc 2 240 0
 2193              	
 2194 0024 4FF0FC03 	 mov r3,#252
 2195 0028 83F31188 	 msr basepri,r3
 2196 002c BFF36F8F 	 isb 
 2197 0030 BFF34F8F 	 dsb 
 2198              	
 2199              	
 2200              	.LVL210:
 2201              	 .thumb
 2202              	.L253:
 2203              	.LBE310:
 2204              	.LBE309:
1924:../Dave/Generated/FREERTOS/tasks.c **** 	}
 2205              	 .loc 1 1924 0 discriminator 2
 2206 0034 FEE7     	 b .L253
 2207              	.LVL211:
 2208              	.L255:
1872:../Dave/Generated/FREERTOS/tasks.c **** 		}
 2209              	 .loc 1 1872 0
 2210 0036 FFF7FEFF 	 bl xTimerCreateTimerTask
 2211              	.LVL212:
1881:../Dave/Generated/FREERTOS/tasks.c **** 	{
 2212              	 .loc 1 1881 0
 2213 003a 0128     	 cmp r0,#1
 2214 003c EED1     	 bne .L251
 2215              	.LBB311:
 2216              	.LBB312:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2217              	 .loc 2 240 0
 2218              	
 2219 003e 4FF0FC03 	 mov r3,#252
 2220 0042 83F31188 	 msr basepri,r3
 2221 0046 BFF36F8F 	 isb 
 2222 004a BFF34F8F 	 dsb 
 2223              	
 2224              	
 2225              	.LVL213:
 2226              	 .thumb
 2227              	.LBE312:
 2228              	.LBE311:
1898:../Dave/Generated/FREERTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2229              	 .loc 1 1898 0
 2230 004e 0949     	 ldr r1,.L257+12
1899:../Dave/Generated/FREERTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2231              	 .loc 1 1899 0
 2232 0050 094A     	 ldr r2,.L257+16
1900:../Dave/Generated/FREERTOS/tasks.c **** 
 2233              	 .loc 1 1900 0
 2234 0052 0A4B     	 ldr r3,.L257+20
1898:../Dave/Generated/FREERTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2235              	 .loc 1 1898 0
 2236 0054 4FF0FF35 	 mov r5,#-1
 2237 0058 0D60     	 str r5,[r1]
1899:../Dave/Generated/FREERTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2238              	 .loc 1 1899 0
 2239 005a 1060     	 str r0,[r2]
1900:../Dave/Generated/FREERTOS/tasks.c **** 
 2240              	 .loc 1 1900 0
 2241 005c 1C60     	 str r4,[r3]
1930:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 2242              	 .loc 1 1930 0
 2243 005e 03B0     	 add sp,sp,#12
 2244              	.LCFI28:
 2245              	 .cfi_def_cfa_offset 12
 2246              	 
 2247 0060 BDE83040 	 pop {r4,r5,lr}
 2248              	.LCFI29:
 2249              	 .cfi_restore 14
 2250              	 .cfi_restore 5
 2251              	 .cfi_restore 4
 2252              	 .cfi_def_cfa_offset 0
1909:../Dave/Generated/FREERTOS/tasks.c **** 		{
 2253              	 .loc 1 1909 0
 2254 0064 FFF7FEBF 	 b xPortStartScheduler
 2255              	.LVL214:
 2256              	.L258:
 2257              	 .align 2
 2258              	.L257:
 2259 0068 00000000 	 .word .LANCHOR18
 2260 006c 00000000 	 .word prvIdleTask
 2261 0070 00000000 	 .word .LC0
 2262 0074 00000000 	 .word .LANCHOR6
 2263 0078 00000000 	 .word .LANCHOR13
 2264 007c 00000000 	 .word .LANCHOR0
 2265              	 .cfi_endproc
 2266              	.LFE142:
 2268              	 .section .text.vTaskEndScheduler,"ax",%progbits
 2269              	 .align 2
 2270              	 .global vTaskEndScheduler
 2271              	 .thumb
 2272              	 .thumb_func
 2274              	vTaskEndScheduler:
 2275              	.LFB143:
1934:../Dave/Generated/FREERTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2276              	 .loc 1 1934 0
 2277              	 .cfi_startproc
 2278              	 
 2279              	 
 2280              	 
 2281              	.LBB313:
 2282              	.LBB314:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2283              	 .loc 2 240 0
 2284              	
 2285 0000 4FF0FC03 	 mov r3,#252
 2286 0004 83F31188 	 msr basepri,r3
 2287 0008 BFF36F8F 	 isb 
 2288 000c BFF34F8F 	 dsb 
 2289              	
 2290              	
 2291              	.LVL215:
 2292              	 .thumb
 2293              	.LBE314:
 2294              	.LBE313:
1939:../Dave/Generated/FREERTOS/tasks.c **** 	vPortEndScheduler();
 2295              	 .loc 1 1939 0
 2296 0010 024B     	 ldr r3,.L260
 2297 0012 0022     	 movs r2,#0
 2298 0014 1A60     	 str r2,[r3]
1940:../Dave/Generated/FREERTOS/tasks.c **** }
 2299              	 .loc 1 1940 0
 2300 0016 FFF7FEBF 	 b vPortEndScheduler
 2301              	.LVL216:
 2302              	.L261:
 2303 001a 00BF     	 .align 2
 2304              	.L260:
 2305 001c 00000000 	 .word .LANCHOR13
 2306              	 .cfi_endproc
 2307              	.LFE143:
 2309              	 .section .text.vTaskSuspendAll,"ax",%progbits
 2310              	 .align 2
 2311              	 .global vTaskSuspendAll
 2312              	 .thumb
 2313              	 .thumb_func
 2315              	vTaskSuspendAll:
 2316              	.LFB144:
1945:../Dave/Generated/FREERTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
 2317              	 .loc 1 1945 0
 2318              	 .cfi_startproc
 2319              	 
 2320              	 
 2321              	 
1950:../Dave/Generated/FREERTOS/tasks.c **** }
 2322              	 .loc 1 1950 0
 2323 0000 024A     	 ldr r2,.L263
 2324 0002 1368     	 ldr r3,[r2]
 2325 0004 0133     	 adds r3,r3,#1
 2326 0006 1360     	 str r3,[r2]
 2327 0008 7047     	 bx lr
 2328              	.L264:
 2329 000a 00BF     	 .align 2
 2330              	.L263:
 2331 000c 00000000 	 .word .LANCHOR16
 2332              	 .cfi_endproc
 2333              	.LFE144:
 2335              	 .section .text.xTaskGetTickCount,"ax",%progbits
 2336              	 .align 2
 2337              	 .global xTaskGetTickCount
 2338              	 .thumb
 2339              	 .thumb_func
 2341              	xTaskGetTickCount:
 2342              	.LFB146:
2128:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xTicks;
 2343              	 .loc 1 2128 0
 2344              	 .cfi_startproc
 2345              	 
 2346              	 
 2347              	 
2134:../Dave/Generated/FREERTOS/tasks.c **** 	}
 2348              	 .loc 1 2134 0
 2349 0000 014B     	 ldr r3,.L266
 2350 0002 1868     	 ldr r0,[r3]
 2351              	.LVL217:
2139:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 2352              	 .loc 1 2139 0
 2353 0004 7047     	 bx lr
 2354              	.L267:
 2355 0006 00BF     	 .align 2
 2356              	.L266:
 2357 0008 00000000 	 .word .LANCHOR0
 2358              	 .cfi_endproc
 2359              	.LFE146:
 2361              	 .section .text.xTaskGetTickCountFromISR,"ax",%progbits
 2362              	 .align 2
 2363              	 .global xTaskGetTickCountFromISR
 2364              	 .thumb
 2365              	 .thumb_func
 2367              	xTaskGetTickCountFromISR:
 2368              	.LFB147:
2143:../Dave/Generated/FREERTOS/tasks.c **** TickType_t xReturn;
 2369              	 .loc 1 2143 0
 2370              	 .cfi_startproc
 2371              	 
 2372              	 
 2373 0000 08B5     	 push {r3,lr}
 2374              	.LCFI30:
 2375              	 .cfi_def_cfa_offset 8
 2376              	 .cfi_offset 3,-8
 2377              	 .cfi_offset 14,-4
2161:../Dave/Generated/FREERTOS/tasks.c **** 
 2378              	 .loc 1 2161 0
 2379 0002 FFF7FEFF 	 bl vPortValidateInterruptPriority
 2380              	.LVL218:
2165:../Dave/Generated/FREERTOS/tasks.c **** 	}
 2381              	 .loc 1 2165 0
 2382 0006 014B     	 ldr r3,.L270
 2383 0008 1868     	 ldr r0,[r3]
 2384              	.LVL219:
2170:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 2385              	 .loc 1 2170 0
 2386 000a 08BD     	 pop {r3,pc}
 2387              	.L271:
 2388              	 .align 2
 2389              	.L270:
 2390 000c 00000000 	 .word .LANCHOR0
 2391              	 .cfi_endproc
 2392              	.LFE147:
 2394              	 .section .text.uxTaskGetNumberOfTasks,"ax",%progbits
 2395              	 .align 2
 2396              	 .global uxTaskGetNumberOfTasks
 2397              	 .thumb
 2398              	 .thumb_func
 2400              	uxTaskGetNumberOfTasks:
 2401              	.LFB148:
2174:../Dave/Generated/FREERTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
 2402              	 .loc 1 2174 0
 2403              	 .cfi_startproc
 2404              	 
 2405              	 
 2406              	 
2177:../Dave/Generated/FREERTOS/tasks.c **** }
 2407              	 .loc 1 2177 0
 2408 0000 014B     	 ldr r3,.L273
 2409 0002 1868     	 ldr r0,[r3]
2178:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 2410              	 .loc 1 2178 0
 2411 0004 7047     	 bx lr
 2412              	.L274:
 2413 0006 00BF     	 .align 2
 2414              	.L273:
 2415 0008 00000000 	 .word .LANCHOR7
 2416              	 .cfi_endproc
 2417              	.LFE148:
 2419              	 .section .text.pcTaskGetName,"ax",%progbits
 2420              	 .align 2
 2421              	 .global pcTaskGetName
 2422              	 .thumb
 2423              	 .thumb_func
 2425              	pcTaskGetName:
 2426              	.LFB149:
2182:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxTCB;
 2427              	 .loc 1 2182 0
 2428              	 .cfi_startproc
 2429              	 
 2430              	 
 2431              	 
 2432              	.LVL220:
2187:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTCB );
 2433              	 .loc 1 2187 0
 2434 0000 08B1     	 cbz r0,.L278
 2435              	.LVL221:
 2436              	.L276:
2190:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 2437              	 .loc 1 2190 0
 2438 0002 3430     	 adds r0,r0,#52
 2439              	.LVL222:
 2440 0004 7047     	 bx lr
 2441              	.LVL223:
 2442              	.L278:
2187:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTCB );
 2443              	 .loc 1 2187 0 discriminator 1
 2444 0006 064B     	 ldr r3,.L279
 2445 0008 1868     	 ldr r0,[r3]
 2446              	.LVL224:
2188:../Dave/Generated/FREERTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2447              	 .loc 1 2188 0 discriminator 1
 2448 000a 0028     	 cmp r0,#0
 2449 000c F9D1     	 bne .L276
 2450              	.LBB315:
 2451              	.LBB316:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2452              	 .loc 2 240 0
 2453              	
 2454 000e 4FF0FC03 	 mov r3,#252
 2455 0012 83F31188 	 msr basepri,r3
 2456 0016 BFF36F8F 	 isb 
 2457 001a BFF34F8F 	 dsb 
 2458              	
 2459              	
 2460              	.LVL225:
 2461              	 .thumb
 2462              	.L277:
 2463              	.LBE316:
 2464              	.LBE315:
2188:../Dave/Generated/FREERTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2465              	 .loc 1 2188 0 discriminator 1
 2466 001e FEE7     	 b .L277
 2467              	.L280:
 2468              	 .align 2
 2469              	.L279:
 2470 0020 00000000 	 .word .LANCHOR1
 2471              	 .cfi_endproc
 2472              	.LFE149:
 2474              	 .section .text.xTaskGetIdleTaskHandle,"ax",%progbits
 2475              	 .align 2
 2476              	 .global xTaskGetIdleTaskHandle
 2477              	 .thumb
 2478              	 .thumb_func
 2480              	xTaskGetIdleTaskHandle:
 2481              	.LFB153:
2396:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
 2482              	 .loc 1 2396 0
 2483              	 .cfi_startproc
 2484              	 
 2485              	 
 2486              	 
2399:../Dave/Generated/FREERTOS/tasks.c **** 		return xIdleTaskHandle;
 2487              	 .loc 1 2399 0
 2488 0000 064B     	 ldr r3,.L285
 2489 0002 1868     	 ldr r0,[r3]
 2490 0004 00B1     	 cbz r0,.L284
2401:../Dave/Generated/FREERTOS/tasks.c **** 
 2491              	 .loc 1 2401 0
 2492 0006 7047     	 bx lr
 2493              	.L284:
 2494              	.LBB317:
 2495              	.LBB318:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2496              	 .loc 2 240 0
 2497              	
 2498 0008 4FF0FC03 	 mov r3,#252
 2499 000c 83F31188 	 msr basepri,r3
 2500 0010 BFF36F8F 	 isb 
 2501 0014 BFF34F8F 	 dsb 
 2502              	
 2503              	
 2504              	.LVL226:
 2505              	 .thumb
 2506              	.L283:
 2507              	.LBE318:
 2508              	.LBE317:
2399:../Dave/Generated/FREERTOS/tasks.c **** 		return xIdleTaskHandle;
 2509              	 .loc 1 2399 0 discriminator 1
 2510 0018 FEE7     	 b .L283
 2511              	.L286:
 2512 001a 00BF     	 .align 2
 2513              	.L285:
 2514 001c 00000000 	 .word .LANCHOR18
 2515              	 .cfi_endproc
 2516              	.LFE153:
 2518              	 .section .text.xTaskIncrementTick,"ax",%progbits
 2519              	 .align 2
 2520              	 .global xTaskIncrementTick
 2521              	 .thumb
 2522              	 .thumb_func
 2524              	xTaskIncrementTick:
 2525              	.LFB155:
2500:../Dave/Generated/FREERTOS/tasks.c **** TCB_t * pxTCB;
 2526              	 .loc 1 2500 0
 2527              	 .cfi_startproc
 2528              	 
 2529              	 
 2530              	.LVL227:
 2531 0000 2DE9F84F 	 push {r3,r4,r5,r6,r7,r8,r9,r10,fp,lr}
 2532              	.LCFI31:
 2533              	 .cfi_def_cfa_offset 40
 2534              	 .cfi_offset 3,-40
 2535              	 .cfi_offset 4,-36
 2536              	 .cfi_offset 5,-32
 2537              	 .cfi_offset 6,-28
 2538              	 .cfi_offset 7,-24
 2539              	 .cfi_offset 8,-20
 2540              	 .cfi_offset 9,-16
 2541              	 .cfi_offset 10,-12
 2542              	 .cfi_offset 11,-8
 2543              	 .cfi_offset 14,-4
2509:../Dave/Generated/FREERTOS/tasks.c **** 	{
 2544              	 .loc 1 2509 0
 2545 0004 424B     	 ldr r3,.L317
 2546 0006 1B68     	 ldr r3,[r3]
 2547 0008 BBB9     	 cbnz r3,.L288
 2548              	.LBB319:
2513:../Dave/Generated/FREERTOS/tasks.c **** 
 2549              	 .loc 1 2513 0
 2550 000a 424B     	 ldr r3,.L317+4
 2551 000c 1C68     	 ldr r4,[r3]
 2552 000e 0134     	 adds r4,r4,#1
 2553              	.LVL228:
2517:../Dave/Generated/FREERTOS/tasks.c **** 
 2554              	 .loc 1 2517 0
 2555 0010 1C60     	 str r4,[r3]
2519:../Dave/Generated/FREERTOS/tasks.c **** 		{
 2556              	 .loc 1 2519 0
 2557 0012 0CB3     	 cbz r4,.L315
 2558              	.L289:
2532:../Dave/Generated/FREERTOS/tasks.c **** 		{
 2559              	 .loc 1 2532 0
 2560 0014 404E     	 ldr r6,.L317+8
 2561 0016 3368     	 ldr r3,[r6]
 2562 0018 9C42     	 cmp r4,r3
 2563 001a 2BD2     	 bcs .L302
 2564 001c 3F4F     	 ldr r7,.L317+12
 2565 001e 404D     	 ldr r5,.L317+16
 2566              	.LBE319:
2503:../Dave/Generated/FREERTOS/tasks.c **** 
 2567              	 .loc 1 2503 0
 2568 0020 4FF0000B 	 mov fp,#0
 2569              	.LVL229:
 2570              	.L293:
 2571              	.LBB324:
2615:../Dave/Generated/FREERTOS/tasks.c **** 			{
 2572              	 .loc 1 2615 0
 2573 0024 2A68     	 ldr r2,[r5]
 2574 0026 D26A     	 ldr r2,[r2,#44]
 2575 0028 02EB8202 	 add r2,r2,r2,lsl#2
 2576 002c 57F82220 	 ldr r2,[r7,r2,lsl#2]
2617:../Dave/Generated/FREERTOS/tasks.c **** 			}
 2577              	 .loc 1 2617 0
 2578 0030 022A     	 cmp r2,#2
 2579 0032 28BF     	 it cs
 2580 0034 4FF0010B 	 movcs fp,#1
 2581              	.LVL230:
 2582 0038 05E0     	 b .L298
 2583              	.LVL231:
 2584              	.L288:
 2585              	.LBE324:
2643:../Dave/Generated/FREERTOS/tasks.c **** 
 2586              	 .loc 1 2643 0
 2587 003a 3A4A     	 ldr r2,.L317+20
 2588 003c 1368     	 ldr r3,[r2]
 2589 003e 0133     	 adds r3,r3,#1
 2590 0040 1360     	 str r3,[r2]
2503:../Dave/Generated/FREERTOS/tasks.c **** 
 2591              	 .loc 1 2503 0
 2592 0042 4FF0000B 	 mov fp,#0
 2593              	.LVL232:
 2594              	.L298:
2656:../Dave/Generated/FREERTOS/tasks.c **** 		{
 2595              	 .loc 1 2656 0
 2596 0046 384A     	 ldr r2,.L317+24
 2597 0048 1268     	 ldr r2,[r2]
2658:../Dave/Generated/FREERTOS/tasks.c **** 		}
 2598              	 .loc 1 2658 0
 2599 004a 002A     	 cmp r2,#0
 2600 004c 18BF     	 it ne
 2601 004e 4FF0010B 	 movne fp,#1
 2602              	.LVL233:
2668:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 2603              	 .loc 1 2668 0
 2604 0052 5846     	 mov r0,fp
 2605 0054 BDE8F88F 	 pop {r3,r4,r5,r6,r7,r8,r9,r10,fp,pc}
 2606              	.LVL234:
 2607              	.L315:
 2608              	.LBB325:
 2609              	.LBB320:
2521:../Dave/Generated/FREERTOS/tasks.c **** 		}
 2610              	 .loc 1 2521 0
 2611 0058 344B     	 ldr r3,.L317+28
 2612 005a 1A68     	 ldr r2,[r3]
 2613 005c 1268     	 ldr r2,[r2]
 2614 005e 002A     	 cmp r2,#0
 2615 0060 47D0     	 beq .L290
 2616              	.LBB321:
 2617              	.LBB322:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2618              	 .loc 2 240 0
 2619              	
 2620 0062 4FF0FC03 	 mov r3,#252
 2621 0066 83F31188 	 msr basepri,r3
 2622 006a BFF36F8F 	 isb 
 2623 006e BFF34F8F 	 dsb 
 2624              	
 2625              	
 2626              	.LVL235:
 2627              	 .thumb
 2628              	.L291:
 2629              	.LBE322:
 2630              	.LBE321:
2521:../Dave/Generated/FREERTOS/tasks.c **** 		}
 2631              	 .loc 1 2521 0 discriminator 1
 2632 0072 FEE7     	 b .L291
 2633              	.L302:
 2634 0074 294F     	 ldr r7,.L317+12
 2635 0076 2A4D     	 ldr r5,.L317+16
 2636              	.LBE320:
2586:../Dave/Generated/FREERTOS/tasks.c **** 
 2637              	 .loc 1 2586 0
 2638 0078 DFF8BC90 	 ldr r9,.L317+40
 2639 007c 4FF0000B 	 mov fp,#0
 2640 0080 2EE0     	 b .L292
 2641              	.LVL236:
 2642              	.L309:
2552:../Dave/Generated/FREERTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2643              	 .loc 1 2552 0
 2644 0082 2A4B     	 ldr r3,.L317+28
 2645 0084 1A68     	 ldr r2,[r3]
 2646 0086 D268     	 ldr r2,[r2,#12]
 2647 0088 D2F80C80 	 ldr r8,[r2,#12]
 2648              	.LVL237:
2553:../Dave/Generated/FREERTOS/tasks.c **** 
 2649              	 .loc 1 2553 0
 2650 008c D8F80410 	 ldr r1,[r8,#4]
 2651              	.LVL238:
2571:../Dave/Generated/FREERTOS/tasks.c **** 
 2652              	 .loc 1 2571 0
 2653 0090 08F1040A 	 add r10,r8,#4
2555:../Dave/Generated/FREERTOS/tasks.c **** 					{
 2654              	 .loc 1 2555 0
 2655 0094 8C42     	 cmp r4,r1
2571:../Dave/Generated/FREERTOS/tasks.c **** 
 2656              	 .loc 1 2571 0
 2657 0096 5046     	 mov r0,r10
2555:../Dave/Generated/FREERTOS/tasks.c **** 					{
 2658              	 .loc 1 2555 0
 2659 0098 37D3     	 bcc .L316
2571:../Dave/Generated/FREERTOS/tasks.c **** 
 2660              	 .loc 1 2571 0
 2661 009a FFF7FEFF 	 bl uxListRemove
 2662              	.LVL239:
2575:../Dave/Generated/FREERTOS/tasks.c **** 					{
 2663              	 .loc 1 2575 0
 2664 009e D8F82810 	 ldr r1,[r8,#40]
2577:../Dave/Generated/FREERTOS/tasks.c **** 					}
 2665              	 .loc 1 2577 0
 2666 00a2 08F11800 	 add r0,r8,#24
2575:../Dave/Generated/FREERTOS/tasks.c **** 					{
 2667              	 .loc 1 2575 0
 2668 00a6 09B1     	 cbz r1,.L296
2577:../Dave/Generated/FREERTOS/tasks.c **** 					}
 2669              	 .loc 1 2577 0
 2670 00a8 FFF7FEFF 	 bl uxListRemove
 2671              	.LVL240:
 2672              	.L296:
2586:../Dave/Generated/FREERTOS/tasks.c **** 
 2673              	 .loc 1 2586 0
 2674 00ac D8F82C00 	 ldr r0,[r8,#44]
 2675 00b0 D9F80030 	 ldr r3,[r9]
 2676 00b4 0122     	 movs r2,#1
 2677 00b6 02FA00FC 	 lsl ip,r2,r0
 2678 00ba 00EB8000 	 add r0,r0,r0,lsl#2
 2679 00be 5146     	 mov r1,r10
 2680 00c0 07EB8000 	 add r0,r7,r0,lsl#2
 2681 00c4 4CEA0303 	 orr r3,ip,r3
 2682 00c8 C9F80030 	 str r3,[r9]
 2683 00cc FFF7FEFF 	 bl vListInsertEnd
 2684              	.LVL241:
2596:../Dave/Generated/FREERTOS/tasks.c **** 						{
 2685              	 .loc 1 2596 0
 2686 00d0 2868     	 ldr r0,[r5]
 2687 00d2 D8F82C10 	 ldr r1,[r8,#44]
 2688 00d6 C26A     	 ldr r2,[r0,#44]
2598:../Dave/Generated/FREERTOS/tasks.c **** 						}
 2689              	 .loc 1 2598 0
 2690 00d8 9142     	 cmp r1,r2
 2691 00da 28BF     	 it cs
 2692 00dc 4FF0010B 	 movcs fp,#1
 2693              	.LVL242:
 2694              	.L292:
2536:../Dave/Generated/FREERTOS/tasks.c **** 				{
 2695              	 .loc 1 2536 0
 2696 00e0 124B     	 ldr r3,.L317+28
 2697 00e2 1A68     	 ldr r2,[r3]
 2698 00e4 1268     	 ldr r2,[r2]
 2699 00e6 002A     	 cmp r2,#0
 2700 00e8 CBD1     	 bne .L309
2543:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 2701              	 .loc 1 2543 0
 2702 00ea 4FF0FF32 	 mov r2,#-1
 2703 00ee 3260     	 str r2,[r6]
2544:../Dave/Generated/FREERTOS/tasks.c **** 				}
 2704              	 .loc 1 2544 0
 2705 00f0 98E7     	 b .L293
 2706              	.LVL243:
 2707              	.L290:
 2708              	.LBB323:
2521:../Dave/Generated/FREERTOS/tasks.c **** 		}
 2709              	 .loc 1 2521 0 discriminator 2
 2710 00f2 0F49     	 ldr r1,.L317+32
 2711 00f4 1868     	 ldr r0,[r3]
 2712              	.LVL244:
 2713 00f6 0F4A     	 ldr r2,.L317+36
 2714 00f8 0D68     	 ldr r5,[r1]
 2715 00fa 1D60     	 str r5,[r3]
 2716 00fc 0860     	 str r0,[r1]
 2717 00fe 1368     	 ldr r3,[r2]
 2718 0100 0133     	 adds r3,r3,#1
 2719 0102 1360     	 str r3,[r2]
 2720 0104 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 2721              	.LVL245:
 2722              	.LBE323:
 2723 0108 84E7     	 b .L289
 2724              	.LVL246:
 2725              	.L316:
2562:../Dave/Generated/FREERTOS/tasks.c **** 						break;
 2726              	 .loc 1 2562 0
 2727 010a 3160     	 str r1,[r6]
2563:../Dave/Generated/FREERTOS/tasks.c **** 					}
 2728              	 .loc 1 2563 0
 2729 010c 8AE7     	 b .L293
 2730              	.L318:
 2731 010e 00BF     	 .align 2
 2732              	.L317:
 2733 0110 00000000 	 .word .LANCHOR16
 2734 0114 00000000 	 .word .LANCHOR0
 2735 0118 00000000 	 .word .LANCHOR6
 2736 011c 00000000 	 .word .LANCHOR8
 2737 0120 00000000 	 .word .LANCHOR1
 2738 0124 00000000 	 .word .LANCHOR20
 2739 0128 00000000 	 .word .LANCHOR17
 2740 012c 00000000 	 .word .LANCHOR5
 2741 0130 00000000 	 .word .LANCHOR4
 2742 0134 00000000 	 .word .LANCHOR19
 2743 0138 00000000 	 .word .LANCHOR2
 2744              	.LBE325:
 2745              	 .cfi_endproc
 2746              	.LFE155:
 2748              	 .section .text.xTaskResumeAll,"ax",%progbits
 2749              	 .align 2
 2750              	 .global xTaskResumeAll
 2751              	 .thumb
 2752              	 .thumb_func
 2754              	xTaskResumeAll:
 2755              	.LFB145:
2018:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxTCB = NULL;
 2756              	 .loc 1 2018 0
 2757              	 .cfi_startproc
 2758              	 
 2759              	 
 2760              	.LVL247:
 2761 0000 2DE9F84F 	 push {r3,r4,r5,r6,r7,r8,r9,r10,fp,lr}
 2762              	.LCFI32:
 2763              	 .cfi_def_cfa_offset 40
 2764              	 .cfi_offset 3,-40
 2765              	 .cfi_offset 4,-36
 2766              	 .cfi_offset 5,-32
 2767              	 .cfi_offset 6,-28
 2768              	 .cfi_offset 7,-24
 2769              	 .cfi_offset 8,-20
 2770              	 .cfi_offset 9,-16
 2771              	 .cfi_offset 10,-12
 2772              	 .cfi_offset 11,-8
 2773              	 .cfi_offset 14,-4
2024:../Dave/Generated/FREERTOS/tasks.c **** 
 2774              	 .loc 1 2024 0
 2775 0004 334C     	 ldr r4,.L348
 2776 0006 2368     	 ldr r3,[r4]
 2777 0008 43B9     	 cbnz r3,.L320
 2778              	.LBB326:
 2779              	.LBB327:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2780              	 .loc 2 240 0
 2781              	
 2782 000a 4FF0FC03 	 mov r3,#252
 2783 000e 83F31188 	 msr basepri,r3
 2784 0012 BFF36F8F 	 isb 
 2785 0016 BFF34F8F 	 dsb 
 2786              	
 2787              	
 2788              	.LVL248:
 2789              	 .thumb
 2790              	.L321:
 2791              	.LBE327:
 2792              	.LBE326:
2024:../Dave/Generated/FREERTOS/tasks.c **** 
 2793              	 .loc 1 2024 0 discriminator 1
 2794 001a FEE7     	 b .L321
 2795              	.L320:
2031:../Dave/Generated/FREERTOS/tasks.c **** 	{
 2796              	 .loc 1 2031 0
 2797 001c FFF7FEFF 	 bl vPortEnterCritical
 2798              	.LVL249:
2033:../Dave/Generated/FREERTOS/tasks.c **** 
 2799              	 .loc 1 2033 0
 2800 0020 2368     	 ldr r3,[r4]
 2801 0022 013B     	 subs r3,r3,#1
 2802 0024 2360     	 str r3,[r4]
2035:../Dave/Generated/FREERTOS/tasks.c **** 		{
 2803              	 .loc 1 2035 0
 2804 0026 2468     	 ldr r4,[r4]
 2805 0028 002C     	 cmp r4,#0
 2806 002a 4DD1     	 bne .L325
2037:../Dave/Generated/FREERTOS/tasks.c **** 			{
 2807              	 .loc 1 2037 0
 2808 002c 2A4B     	 ldr r3,.L348+4
 2809 002e 1B68     	 ldr r3,[r3]
 2810 0030 002B     	 cmp r3,#0
 2811 0032 49D0     	 beq .L325
 2812 0034 DFF8B8A0 	 ldr r10,.L348+28
 2813 0038 284D     	 ldr r5,.L348+8
2046:../Dave/Generated/FREERTOS/tasks.c **** 
 2814              	 .loc 1 2046 0
 2815 003a 294E     	 ldr r6,.L348+12
 2816 003c DFF8B480 	 ldr r8,.L348+32
2041:../Dave/Generated/FREERTOS/tasks.c **** 				{
 2817              	 .loc 1 2041 0
 2818 0040 D346     	 mov fp,r10
 2819              	.LVL250:
 2820              	.L324:
 2821 0042 DAF80030 	 ldr r3,[r10]
2046:../Dave/Generated/FREERTOS/tasks.c **** 
 2822              	 .loc 1 2046 0
 2823 0046 0127     	 movs r7,#1
2041:../Dave/Generated/FREERTOS/tasks.c **** 				{
 2824              	 .loc 1 2041 0
 2825 0048 23B3     	 cbz r3,.L347
 2826              	.L327:
2043:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2827              	 .loc 1 2043 0
 2828 004a DBF80C30 	 ldr r3,[fp,#12]
 2829 004e DC68     	 ldr r4,[r3,#12]
 2830              	.LVL251:
2045:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2831              	 .loc 1 2045 0
 2832 0050 04F10409 	 add r9,r4,#4
2044:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2833              	 .loc 1 2044 0
 2834 0054 04F11800 	 add r0,r4,#24
 2835 0058 FFF7FEFF 	 bl uxListRemove
 2836              	.LVL252:
2045:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2837              	 .loc 1 2045 0
 2838 005c 4846     	 mov r0,r9
 2839 005e FFF7FEFF 	 bl uxListRemove
 2840              	.LVL253:
2046:../Dave/Generated/FREERTOS/tasks.c **** 
 2841              	 .loc 1 2046 0
 2842 0062 E06A     	 ldr r0,[r4,#44]
 2843 0064 3368     	 ldr r3,[r6]
 2844 0066 07FA00F2 	 lsl r2,r7,r0
 2845 006a 00EB8000 	 add r0,r0,r0,lsl#2
 2846 006e 1343     	 orrs r3,r3,r2
 2847 0070 4946     	 mov r1,r9
 2848 0072 08EB8000 	 add r0,r8,r0,lsl#2
 2849 0076 3360     	 str r3,[r6]
 2850 0078 FFF7FEFF 	 bl vListInsertEnd
 2851              	.LVL254:
2050:../Dave/Generated/FREERTOS/tasks.c **** 					{
 2852              	 .loc 1 2050 0
 2853 007c 194B     	 ldr r3,.L348+16
 2854 007e E26A     	 ldr r2,[r4,#44]
 2855 0080 1B68     	 ldr r3,[r3]
 2856 0082 DB6A     	 ldr r3,[r3,#44]
 2857 0084 9A42     	 cmp r2,r3
 2858 0086 DCD3     	 bcc .L324
2041:../Dave/Generated/FREERTOS/tasks.c **** 				{
 2859              	 .loc 1 2041 0
 2860 0088 DAF80030 	 ldr r3,[r10]
2052:../Dave/Generated/FREERTOS/tasks.c **** 					}
 2861              	 .loc 1 2052 0
 2862 008c 2F60     	 str r7,[r5]
 2863              	.LVL255:
2046:../Dave/Generated/FREERTOS/tasks.c **** 
 2864              	 .loc 1 2046 0
 2865 008e 0127     	 movs r7,#1
2041:../Dave/Generated/FREERTOS/tasks.c **** 				{
 2866              	 .loc 1 2041 0
 2867 0090 002B     	 cmp r3,#0
 2868 0092 DAD1     	 bne .L327
 2869              	.L347:
2060:../Dave/Generated/FREERTOS/tasks.c **** 				{
 2870              	 .loc 1 2060 0
 2871 0094 0CB1     	 cbz r4,.L328
2068:../Dave/Generated/FREERTOS/tasks.c **** 				}
 2872              	 .loc 1 2068 0
 2873 0096 FFF7FEFF 	 bl prvResetNextTaskUnblockTime
 2874              	.LVL256:
 2875              	.L328:
 2876              	.LBB328:
2076:../Dave/Generated/FREERTOS/tasks.c **** 
 2877              	 .loc 1 2076 0
 2878 009a 134E     	 ldr r6,.L348+20
 2879 009c 3468     	 ldr r4,[r6]
 2880              	.LVL257:
2078:../Dave/Generated/FREERTOS/tasks.c **** 					{
 2881              	 .loc 1 2078 0
 2882 009e 3CB1     	 cbz r4,.L329
2084:../Dave/Generated/FREERTOS/tasks.c **** 							}
 2883              	 .loc 1 2084 0
 2884 00a0 0127     	 movs r7,#1
 2885              	.LVL258:
 2886              	.L331:
2082:../Dave/Generated/FREERTOS/tasks.c **** 							{
 2887              	 .loc 1 2082 0
 2888 00a2 FFF7FEFF 	 bl xTaskIncrementTick
 2889              	.LVL259:
 2890 00a6 00B1     	 cbz r0,.L330
2084:../Dave/Generated/FREERTOS/tasks.c **** 							}
 2891              	 .loc 1 2084 0
 2892 00a8 2F60     	 str r7,[r5]
 2893              	.L330:
2091:../Dave/Generated/FREERTOS/tasks.c **** 
 2894              	 .loc 1 2091 0
 2895 00aa 013C     	 subs r4,r4,#1
 2896              	.LVL260:
 2897 00ac F9D1     	 bne .L331
2093:../Dave/Generated/FREERTOS/tasks.c **** 					}
 2898              	 .loc 1 2093 0
 2899 00ae 3460     	 str r4,[r6]
 2900              	.LVL261:
 2901              	.L329:
 2902              	.LBE328:
2101:../Dave/Generated/FREERTOS/tasks.c **** 				{
 2903              	 .loc 1 2101 0
 2904 00b0 2B68     	 ldr r3,[r5]
 2905 00b2 4BB1     	 cbz r3,.L325
 2906              	.LVL262:
2108:../Dave/Generated/FREERTOS/tasks.c **** 				}
 2907              	 .loc 1 2108 0
 2908 00b4 0D4B     	 ldr r3,.L348+24
 2909 00b6 4FF08052 	 mov r2,#268435456
 2910 00ba 1A60     	 str r2,[r3]
 2911              	
 2912 00bc BFF34F8F 	 dsb
 2913              	
 2914              	
 2915 00c0 BFF36F8F 	 isb
 2916              	
2105:../Dave/Generated/FREERTOS/tasks.c **** 					}
 2917              	 .loc 1 2105 0
 2918              	 .thumb
 2919 00c4 0124     	 movs r4,#1
 2920 00c6 00E0     	 b .L323
 2921              	.LVL263:
 2922              	.L325:
2020:../Dave/Generated/FREERTOS/tasks.c **** 
 2923              	 .loc 1 2020 0
 2924 00c8 0024     	 movs r4,#0
 2925              	.LVL264:
 2926              	.L323:
2121:../Dave/Generated/FREERTOS/tasks.c **** 
 2927              	 .loc 1 2121 0
 2928 00ca FFF7FEFF 	 bl vPortExitCritical
 2929              	.LVL265:
2124:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 2930              	 .loc 1 2124 0
 2931 00ce 2046     	 mov r0,r4
 2932 00d0 BDE8F88F 	 pop {r3,r4,r5,r6,r7,r8,r9,r10,fp,pc}
 2933              	.LVL266:
 2934              	.L349:
 2935              	 .align 2
 2936              	.L348:
 2937 00d4 00000000 	 .word .LANCHOR16
 2938 00d8 00000000 	 .word .LANCHOR7
 2939 00dc 00000000 	 .word .LANCHOR17
 2940 00e0 00000000 	 .word .LANCHOR2
 2941 00e4 00000000 	 .word .LANCHOR1
 2942 00e8 00000000 	 .word .LANCHOR20
 2943 00ec 04ED00E0 	 .word -536810236
 2944 00f0 00000000 	 .word .LANCHOR11
 2945 00f4 00000000 	 .word .LANCHOR8
 2946              	 .cfi_endproc
 2947              	.LFE145:
 2949              	 .section .text.vTaskDelayUntil,"ax",%progbits
 2950              	 .align 2
 2951              	 .global vTaskDelayUntil
 2952              	 .thumb
 2953              	 .thumb_func
 2955              	vTaskDelayUntil:
 2956              	.LFB132:
1141:../Dave/Generated/FREERTOS/tasks.c **** 	TickType_t xTimeToWake;
 2957              	 .loc 1 1141 0
 2958              	 .cfi_startproc
 2959              	 
 2960              	 
 2961              	.LVL267:
 2962 0000 38B5     	 push {r3,r4,r5,lr}
 2963              	.LCFI33:
 2964              	 .cfi_def_cfa_offset 16
 2965              	 .cfi_offset 3,-16
 2966              	 .cfi_offset 4,-12
 2967              	 .cfi_offset 5,-8
 2968              	 .cfi_offset 14,-4
1145:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2969              	 .loc 1 1145 0
 2970 0002 A8B1     	 cbz r0,.L364
1146:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2971              	 .loc 1 1146 0
 2972 0004 41B9     	 cbnz r1,.L353
 2973              	.LBB329:
 2974              	.LBB330:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2975              	 .loc 2 240 0
 2976              	
 2977 0006 4FF0FC03 	 mov r3,#252
 2978 000a 83F31188 	 msr basepri,r3
 2979 000e BFF36F8F 	 isb 
 2980 0012 BFF34F8F 	 dsb 
 2981              	
 2982              	
 2983              	.LVL268:
 2984              	 .thumb
 2985              	.L354:
 2986              	.LBE330:
 2987              	.LBE329:
1146:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2988              	 .loc 1 1146 0 discriminator 2
 2989 0016 FEE7     	 b .L354
 2990              	.L353:
1147:../Dave/Generated/FREERTOS/tasks.c **** 
 2991              	 .loc 1 1147 0
 2992 0018 1D4C     	 ldr r4,.L365
 2993 001a 2368     	 ldr r3,[r4]
 2994 001c 8BB1     	 cbz r3,.L355
 2995              	.LBB331:
 2996              	.LBB332:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 2997              	 .loc 2 240 0
 2998              	
 2999 001e 4FF0FC03 	 mov r3,#252
 3000 0022 83F31188 	 msr basepri,r3
 3001 0026 BFF36F8F 	 isb 
 3002 002a BFF34F8F 	 dsb 
 3003              	
 3004              	
 3005              	.LVL269:
 3006              	 .thumb
 3007              	.L356:
 3008              	.LBE332:
 3009              	.LBE331:
1147:../Dave/Generated/FREERTOS/tasks.c **** 
 3010              	 .loc 1 1147 0 discriminator 3
 3011 002e FEE7     	 b .L356
 3012              	.L364:
 3013              	.LBB333:
 3014              	.LBB334:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 3015              	 .loc 2 240 0
 3016              	
 3017 0030 4FF0FC03 	 mov r3,#252
 3018 0034 83F31188 	 msr basepri,r3
 3019 0038 BFF36F8F 	 isb 
 3020 003c BFF34F8F 	 dsb 
 3021              	
 3022              	
 3023              	.LVL270:
 3024              	 .thumb
 3025              	.L352:
 3026              	.LBE334:
 3027              	.LBE333:
1145:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3028              	 .loc 1 1145 0 discriminator 1
 3029 0040 FEE7     	 b .L352
 3030              	.L355:
 3031 0042 0246     	 mov r2,r0
 3032              	.LBB335:
 3033              	.LBB336:
1950:../Dave/Generated/FREERTOS/tasks.c **** }
 3034              	 .loc 1 1950 0
 3035 0044 2068     	 ldr r0,[r4]
 3036              	.LVL271:
 3037              	.LBE336:
 3038              	.LBE335:
 3039              	.LBB338:
1153:../Dave/Generated/FREERTOS/tasks.c **** 
 3040              	 .loc 1 1153 0
 3041 0046 134D     	 ldr r5,.L365+4
 3042              	.LBE338:
 3043              	.LBB339:
 3044              	.LBB337:
1950:../Dave/Generated/FREERTOS/tasks.c **** }
 3045              	 .loc 1 1950 0
 3046 0048 0130     	 adds r0,r0,#1
 3047 004a 2060     	 str r0,[r4]
 3048 004c 0B46     	 mov r3,r1
 3049              	.LBE337:
 3050              	.LBE339:
 3051              	.LBB340:
1153:../Dave/Generated/FREERTOS/tasks.c **** 
 3052              	 .loc 1 1153 0
 3053 004e 2868     	 ldr r0,[r5]
 3054              	.LVL272:
1156:../Dave/Generated/FREERTOS/tasks.c **** 
 3055              	 .loc 1 1156 0
 3056 0050 1168     	 ldr r1,[r2]
 3057              	.LVL273:
1158:../Dave/Generated/FREERTOS/tasks.c **** 			{
 3058              	 .loc 1 1158 0
 3059 0052 8842     	 cmp r0,r1
1156:../Dave/Generated/FREERTOS/tasks.c **** 
 3060              	 .loc 1 1156 0
 3061 0054 0B44     	 add r3,r3,r1
 3062              	.LVL274:
1158:../Dave/Generated/FREERTOS/tasks.c **** 			{
 3063              	 .loc 1 1158 0
 3064 0056 14D2     	 bcs .L357
1165:../Dave/Generated/FREERTOS/tasks.c **** 				{
 3065              	 .loc 1 1165 0
 3066 0058 9942     	 cmp r1,r3
 3067 005a 16D9     	 bls .L358
 3068              	.L363:
1179:../Dave/Generated/FREERTOS/tasks.c **** 				{
 3069              	 .loc 1 1179 0 discriminator 1
 3070 005c 9842     	 cmp r0,r3
 3071 005e 14D2     	 bcs .L358
 3072              	.L359:
 3073              	.LVL275:
1190:../Dave/Generated/FREERTOS/tasks.c **** 
 3074              	 .loc 1 1190 0
 3075 0060 1360     	 str r3,[r2]
1198:../Dave/Generated/FREERTOS/tasks.c **** 			}
 3076              	 .loc 1 1198 0
 3077 0062 181A     	 subs r0,r3,r0
 3078              	.LVL276:
 3079 0064 0021     	 movs r1,#0
 3080 0066 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
 3081              	.LVL277:
 3082              	.L361:
 3083              	.LBE340:
1205:../Dave/Generated/FREERTOS/tasks.c **** 
 3084              	 .loc 1 1205 0
 3085 006a FFF7FEFF 	 bl xTaskResumeAll
 3086              	.LVL278:
1209:../Dave/Generated/FREERTOS/tasks.c **** 		{
 3087              	 .loc 1 1209 0
 3088 006e 58B9     	 cbnz r0,.L350
1211:../Dave/Generated/FREERTOS/tasks.c **** 		}
 3089              	 .loc 1 1211 0
 3090 0070 094B     	 ldr r3,.L365+8
 3091 0072 4FF08052 	 mov r2,#268435456
 3092 0076 1A60     	 str r2,[r3]
 3093              	
 3094 0078 BFF34F8F 	 dsb
 3095              	
 3096              	
 3097 007c BFF36F8F 	 isb
 3098              	
 3099              	 .thumb
 3100 0080 38BD     	 pop {r3,r4,r5,pc}
 3101              	.LVL279:
 3102              	.L357:
 3103              	.LBB341:
1179:../Dave/Generated/FREERTOS/tasks.c **** 				{
 3104              	 .loc 1 1179 0
 3105 0082 9942     	 cmp r1,r3
 3106 0084 ECD8     	 bhi .L359
 3107 0086 E9E7     	 b .L363
 3108              	.LVL280:
 3109              	.L350:
 3110 0088 38BD     	 pop {r3,r4,r5,pc}
 3111              	.LVL281:
 3112              	.L358:
1190:../Dave/Generated/FREERTOS/tasks.c **** 
 3113              	 .loc 1 1190 0
 3114 008a 1360     	 str r3,[r2]
 3115 008c EDE7     	 b .L361
 3116              	.L366:
 3117 008e 00BF     	 .align 2
 3118              	.L365:
 3119 0090 00000000 	 .word .LANCHOR16
 3120 0094 00000000 	 .word .LANCHOR0
 3121 0098 04ED00E0 	 .word -536810236
 3122              	.LBE341:
 3123              	 .cfi_endproc
 3124              	.LFE132:
 3126              	 .section .text.vTaskDelay,"ax",%progbits
 3127              	 .align 2
 3128              	 .global vTaskDelay
 3129              	 .thumb
 3130              	 .thumb_func
 3132              	vTaskDelay:
 3133              	.LFB133:
1225:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 3134              	 .loc 1 1225 0
 3135              	 .cfi_startproc
 3136              	 
 3137              	 
 3138              	.LVL282:
 3139 0000 08B5     	 push {r3,lr}
 3140              	.LCFI34:
 3141              	 .cfi_def_cfa_offset 8
 3142              	 .cfi_offset 3,-8
 3143              	 .cfi_offset 14,-4
1229:../Dave/Generated/FREERTOS/tasks.c **** 		{
 3144              	 .loc 1 1229 0
 3145 0002 58B1     	 cbz r0,.L372
1231:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSuspendAll();
 3146              	 .loc 1 1231 0
 3147 0004 0F4B     	 ldr r3,.L377
 3148 0006 1968     	 ldr r1,[r3]
 3149 0008 89B1     	 cbz r1,.L370
 3150              	.LBB342:
 3151              	.LBB343:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 3152              	 .loc 2 240 0
 3153              	
 3154 000a 4FF0FC03 	 mov r3,#252
 3155 000e 83F31188 	 msr basepri,r3
 3156 0012 BFF36F8F 	 isb 
 3157 0016 BFF34F8F 	 dsb 
 3158              	
 3159              	
 3160              	.LVL283:
 3161              	 .thumb
 3162              	.L371:
 3163              	.LBE343:
 3164              	.LBE342:
1231:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSuspendAll();
 3165              	 .loc 1 1231 0 discriminator 1
 3166 001a FEE7     	 b .L371
 3167              	.LVL284:
 3168              	.L372:
1256:../Dave/Generated/FREERTOS/tasks.c **** 		}
 3169              	 .loc 1 1256 0
 3170 001c 0A4B     	 ldr r3,.L377+4
 3171 001e 4FF08052 	 mov r2,#268435456
 3172 0022 1A60     	 str r2,[r3]
 3173              	
 3174 0024 BFF34F8F 	 dsb
 3175              	
 3176              	
 3177 0028 BFF36F8F 	 isb
 3178              	
 3179              	 .thumb
 3180 002c 08BD     	 pop {r3,pc}
 3181              	.LVL285:
 3182              	.L370:
 3183              	.LBB344:
 3184              	.LBB345:
1950:../Dave/Generated/FREERTOS/tasks.c **** }
 3185              	 .loc 1 1950 0
 3186 002e 1A68     	 ldr r2,[r3]
 3187 0030 0132     	 adds r2,r2,#1
 3188 0032 1A60     	 str r2,[r3]
 3189              	.LBE345:
 3190              	.LBE344:
1243:../Dave/Generated/FREERTOS/tasks.c **** 			}
 3191              	 .loc 1 1243 0
 3192 0034 FFF7FEFF 	 bl prvAddCurrentTaskToDelayedList
 3193              	.LVL286:
1245:../Dave/Generated/FREERTOS/tasks.c **** 		}
 3194              	 .loc 1 1245 0
 3195 0038 FFF7FEFF 	 bl xTaskResumeAll
 3196              	.LVL287:
1254:../Dave/Generated/FREERTOS/tasks.c **** 		{
 3197              	 .loc 1 1254 0
 3198 003c 0028     	 cmp r0,#0
 3199 003e EDD0     	 beq .L372
 3200 0040 08BD     	 pop {r3,pc}
 3201              	.L378:
 3202 0042 00BF     	 .align 2
 3203              	.L377:
 3204 0044 00000000 	 .word .LANCHOR16
 3205 0048 04ED00E0 	 .word -536810236
 3206              	 .cfi_endproc
 3207              	.LFE133:
 3209              	 .section .text.prvIdleTask,"ax",%progbits
 3210              	 .align 2
 3211              	 .thumb
 3212              	 .thumb_func
 3214              	prvIdleTask:
 3215              	.LFB167:
3132:../Dave/Generated/FREERTOS/tasks.c **** 	/* Stop warnings. */
 3216              	 .loc 1 3132 0
 3217              	 .cfi_startproc
 3218              	 
 3219              	 
 3220              	 
 3221              	.LVL288:
 3222 0000 1F4E     	 ldr r6,.L390
 3223 0002 204D     	 ldr r5,.L390+4
 3224 0004 204C     	 ldr r4,.L390+8
 3225 0006 DFF88880 	 ldr r8,.L390+16
 3226 000a DFF88890 	 ldr r9,.L390+20
 3227 000e 2DE98848 	 push {r3,r7,fp,lr}
 3228              	.LCFI35:
 3229              	 .cfi_def_cfa_offset 16
 3230              	 .cfi_offset 3,-16
 3231              	 .cfi_offset 7,-12
 3232              	 .cfi_offset 11,-8
 3233              	 .cfi_offset 14,-4
 3234              	.LBB354:
 3235              	.LBB355:
3380:../Dave/Generated/FREERTOS/tasks.c **** 			}
 3236              	 .loc 1 3380 0
 3237 0012 B246     	 mov r10,r6
 3238 0014 06E0     	 b .L381
 3239              	.LVL289:
 3240              	.L382:
 3241              	.LBB356:
 3242              	.LBB357:
1950:../Dave/Generated/FREERTOS/tasks.c **** }
 3243              	 .loc 1 1950 0
 3244 0016 2368     	 ldr r3,[r4]
 3245              	.LBE357:
 3246              	.LBE356:
3380:../Dave/Generated/FREERTOS/tasks.c **** 			}
 3247              	 .loc 1 3380 0
 3248 0018 3768     	 ldr r7,[r6]
 3249              	.LVL290:
 3250              	.LBB359:
 3251              	.LBB358:
1950:../Dave/Generated/FREERTOS/tasks.c **** }
 3252              	 .loc 1 1950 0
 3253 001a 0133     	 adds r3,r3,#1
 3254 001c 2360     	 str r3,[r4]
 3255              	.LBE358:
 3256              	.LBE359:
3382:../Dave/Generated/FREERTOS/tasks.c **** 
 3257              	 .loc 1 3382 0
 3258 001e FFF7FEFF 	 bl xTaskResumeAll
 3259              	.LVL291:
3384:../Dave/Generated/FREERTOS/tasks.c **** 			{
 3260              	 .loc 1 3384 0
 3261 0022 7FB9     	 cbnz r7,.L389
 3262              	.LVL292:
 3263              	.L381:
3376:../Dave/Generated/FREERTOS/tasks.c **** 		{
 3264              	 .loc 1 3376 0
 3265 0024 2B68     	 ldr r3,[r5]
 3266 0026 002B     	 cmp r3,#0
 3267 0028 F5D1     	 bne .L382
 3268              	.LBE355:
 3269              	.LBE354:
3166:../Dave/Generated/FREERTOS/tasks.c **** 			{
 3270              	 .loc 1 3166 0
 3271 002a D9F80030 	 ldr r3,[r9]
 3272 002e 012B     	 cmp r3,#1
 3273 0030 F8D9     	 bls .L381
3168:../Dave/Generated/FREERTOS/tasks.c **** 			}
 3274              	 .loc 1 3168 0
 3275 0032 164B     	 ldr r3,.L390+12
 3276 0034 4FF08052 	 mov r2,#268435456
 3277 0038 1A60     	 str r2,[r3]
 3278              	
 3279 003a BFF34F8F 	 dsb
 3280              	
 3281              	
 3282 003e BFF36F8F 	 isb
 3283              	
 3284              	 .thumb
 3285 0042 EFE7     	 b .L381
 3286              	.LVL293:
 3287              	.L389:
 3288              	.LBB364:
 3289              	.LBB363:
 3290              	.LBB360:
3388:../Dave/Generated/FREERTOS/tasks.c **** 				{
 3291              	 .loc 1 3388 0
 3292 0044 FFF7FEFF 	 bl vPortEnterCritical
 3293              	.LVL294:
3390:../Dave/Generated/FREERTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3294              	 .loc 1 3390 0
 3295 0048 DAF80C30 	 ldr r3,[r10,#12]
 3296 004c D3F80CB0 	 ldr fp,[r3,#12]
 3297              	.LVL295:
3391:../Dave/Generated/FREERTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
 3298              	 .loc 1 3391 0
 3299 0050 0BF10400 	 add r0,fp,#4
 3300 0054 FFF7FEFF 	 bl uxListRemove
 3301              	.LVL296:
3392:../Dave/Generated/FREERTOS/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 3302              	 .loc 1 3392 0
 3303 0058 D8F80030 	 ldr r3,[r8]
3393:../Dave/Generated/FREERTOS/tasks.c **** 				}
 3304              	 .loc 1 3393 0
 3305 005c 094A     	 ldr r2,.L390+4
3392:../Dave/Generated/FREERTOS/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 3306              	 .loc 1 3392 0
 3307 005e 013B     	 subs r3,r3,#1
 3308 0060 C8F80030 	 str r3,[r8]
3393:../Dave/Generated/FREERTOS/tasks.c **** 				}
 3309              	 .loc 1 3393 0
 3310 0064 074B     	 ldr r3,.L390+4
 3311 0066 1B68     	 ldr r3,[r3]
 3312 0068 013B     	 subs r3,r3,#1
 3313 006a 1360     	 str r3,[r2]
3395:../Dave/Generated/FREERTOS/tasks.c **** 
 3314              	 .loc 1 3395 0
 3315 006c FFF7FEFF 	 bl vPortExitCritical
 3316              	.LVL297:
 3317              	.LBB361:
 3318              	.LBB362:
3600:../Dave/Generated/FREERTOS/tasks.c **** 			vPortFree( pxTCB );
 3319              	 .loc 1 3600 0
 3320 0070 DBF83000 	 ldr r0,[fp,#48]
 3321 0074 FFF7FEFF 	 bl vPortFree
 3322              	.LVL298:
3601:../Dave/Generated/FREERTOS/tasks.c **** 		}
 3323              	 .loc 1 3601 0
 3324 0078 5846     	 mov r0,fp
 3325 007a FFF7FEFF 	 bl vPortFree
 3326              	.LVL299:
 3327 007e D1E7     	 b .L381
 3328              	.L391:
 3329              	 .align 2
 3330              	.L390:
 3331 0080 00000000 	 .word .LANCHOR12
 3332 0084 00000000 	 .word .LANCHOR15
 3333 0088 00000000 	 .word .LANCHOR16
 3334 008c 04ED00E0 	 .word -536810236
 3335 0090 00000000 	 .word .LANCHOR7
 3336 0094 00000000 	 .word .LANCHOR8
 3337              	.LBE362:
 3338              	.LBE361:
 3339              	.LBE360:
 3340              	.LBE363:
 3341              	.LBE364:
 3342              	 .cfi_endproc
 3343              	.LFE167:
 3345              	 .section .text.xTaskGetHandle,"ax",%progbits
 3346              	 .align 2
 3347              	 .global xTaskGetHandle
 3348              	 .thumb
 3349              	 .thumb_func
 3351              	xTaskGetHandle:
 3352              	.LFB151:
2257:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
 3353              	 .loc 1 2257 0
 3354              	 .cfi_startproc
 3355              	 
 3356              	 
 3357              	.LVL300:
 3358 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 3359              	.LCFI36:
 3360              	 .cfi_def_cfa_offset 24
 3361              	 .cfi_offset 3,-24
 3362              	 .cfi_offset 4,-20
 3363              	 .cfi_offset 5,-16
 3364              	 .cfi_offset 6,-12
 3365              	 .cfi_offset 7,-8
 3366              	 .cfi_offset 14,-4
2257:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
 3367              	 .loc 1 2257 0
 3368 0002 0546     	 mov r5,r0
2262:../Dave/Generated/FREERTOS/tasks.c **** 
 3369              	 .loc 1 2262 0
 3370 0004 FFF7FEFF 	 bl strlen
 3371              	.LVL301:
 3372 0008 0F28     	 cmp r0,#15
 3373 000a 08D9     	 bls .L393
 3374              	.LBB373:
 3375              	.LBB374:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 3376              	 .loc 2 240 0
 3377              	
 3378 000c 4FF0FC03 	 mov r3,#252
 3379 0010 83F31188 	 msr basepri,r3
 3380 0014 BFF36F8F 	 isb 
 3381 0018 BFF34F8F 	 dsb 
 3382              	
 3383              	
 3384              	.LVL302:
 3385              	 .thumb
 3386              	.L394:
 3387              	.LBE374:
 3388              	.LBE373:
2262:../Dave/Generated/FREERTOS/tasks.c **** 
 3389              	 .loc 1 2262 0 discriminator 1
 3390 001c FEE7     	 b .L394
 3391              	.L393:
 3392              	.LBB375:
 3393              	.LBB376:
1950:../Dave/Generated/FREERTOS/tasks.c **** }
 3394              	 .loc 1 1950 0
 3395 001e 5849     	 ldr r1,.L460
 3396 0020 584A     	 ldr r2,.L460+4
 3397 0022 0B68     	 ldr r3,[r1]
 3398 0024 0133     	 adds r3,r3,#1
 3399 0026 0B60     	 str r3,[r1]
 3400 0028 A2F16407 	 sub r7,r2,#100
 3401              	.LVL303:
 3402              	.L403:
 3403              	.LBE376:
 3404              	.LBE375:
 3405              	.LBB377:
 3406              	.LBB378:
2203:../Dave/Generated/FREERTOS/tasks.c **** 		{
 3407              	 .loc 1 2203 0
 3408 002c 52F8083C 	 ldr r3,[r2,#-8]
 3409 0030 002B     	 cmp r3,#0
 3410 0032 00F08380 	 beq .L395
 3411              	.LVL304:
 3412              	.LBB379:
2205:../Dave/Generated/FREERTOS/tasks.c **** 
 3413              	 .loc 1 2205 0
 3414 0036 52F8043C 	 ldr r3,[r2,#-4]
 3415 003a 5B68     	 ldr r3,[r3,#4]
 3416 003c 42F8043C 	 str r3,[r2,#-4]
 3417 0040 9342     	 cmp r3,r2
 3418 0042 04BF     	 itt eq
 3419 0044 5368     	 ldreq r3,[r2,#4]
 3420 0046 42F8043C 	 streq r3,[r2,#-4]
 3421 004a DE68     	 ldr r6,[r3,#12]
 3422              	.LVL305:
 3423              	.L400:
 3424              	.LBE379:
 3425              	.LBB380:
2209:../Dave/Generated/FREERTOS/tasks.c **** 
 3426              	 .loc 1 2209 0
 3427 004c 5B68     	 ldr r3,[r3,#4]
 3428 004e 42F8043C 	 str r3,[r2,#-4]
 3429 0052 9342     	 cmp r3,r2
 3430 0054 04BF     	 itt eq
 3431 0056 5B68     	 ldreq r3,[r3,#4]
 3432 0058 42F8043C 	 streq r3,[r2,#-4]
 3433 005c DC68     	 ldr r4,[r3,#12]
 3434              	.LVL306:
 3435              	.LBE380:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3436              	 .loc 1 2217 0
 3437 005e 2978     	 ldrb r1,[r5]
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3438              	 .loc 1 2215 0
 3439 0060 94F83400 	 ldrb r0,[r4,#52]
 3440              	.LVL307:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3441              	 .loc 1 2217 0
 3442 0064 8142     	 cmp r1,r0
 3443 0066 67D1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3444              	 .loc 1 2222 0
 3445 0068 0029     	 cmp r1,#0
 3446 006a 00F08480 	 beq .L402
 3447              	.LVL308:
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3448              	 .loc 1 2215 0
 3449 006e 94F83500 	 ldrb r0,[r4,#53]
 3450              	.LVL309:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3451              	 .loc 1 2217 0
 3452 0072 6978     	 ldrb r1,[r5,#1]
 3453 0074 8142     	 cmp r1,r0
 3454 0076 5FD1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3455              	 .loc 1 2222 0
 3456 0078 0029     	 cmp r1,#0
 3457 007a 7CD0     	 beq .L402
 3458              	.LVL310:
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3459              	 .loc 1 2215 0
 3460 007c 94F83600 	 ldrb r0,[r4,#54]
 3461              	.LVL311:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3462              	 .loc 1 2217 0
 3463 0080 A978     	 ldrb r1,[r5,#2]
 3464 0082 8142     	 cmp r1,r0
 3465 0084 58D1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3466              	 .loc 1 2222 0
 3467 0086 0029     	 cmp r1,#0
 3468 0088 75D0     	 beq .L402
 3469              	.LVL312:
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3470              	 .loc 1 2215 0
 3471 008a 94F83700 	 ldrb r0,[r4,#55]
 3472              	.LVL313:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3473              	 .loc 1 2217 0
 3474 008e E978     	 ldrb r1,[r5,#3]
 3475 0090 8142     	 cmp r1,r0
 3476 0092 51D1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3477              	 .loc 1 2222 0
 3478 0094 0029     	 cmp r1,#0
 3479 0096 6ED0     	 beq .L402
 3480              	.LVL314:
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3481              	 .loc 1 2215 0
 3482 0098 94F83800 	 ldrb r0,[r4,#56]
 3483              	.LVL315:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3484              	 .loc 1 2217 0
 3485 009c 2979     	 ldrb r1,[r5,#4]
 3486 009e 8142     	 cmp r1,r0
 3487 00a0 4AD1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3488              	 .loc 1 2222 0
 3489 00a2 0029     	 cmp r1,#0
 3490 00a4 67D0     	 beq .L402
 3491              	.LVL316:
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3492              	 .loc 1 2215 0
 3493 00a6 94F83900 	 ldrb r0,[r4,#57]
 3494              	.LVL317:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3495              	 .loc 1 2217 0
 3496 00aa 6979     	 ldrb r1,[r5,#5]
 3497 00ac 8142     	 cmp r1,r0
 3498 00ae 43D1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3499              	 .loc 1 2222 0
 3500 00b0 0029     	 cmp r1,#0
 3501 00b2 60D0     	 beq .L402
 3502              	.LVL318:
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3503              	 .loc 1 2215 0
 3504 00b4 94F83A00 	 ldrb r0,[r4,#58]
 3505              	.LVL319:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3506              	 .loc 1 2217 0
 3507 00b8 A979     	 ldrb r1,[r5,#6]
 3508 00ba 8142     	 cmp r1,r0
 3509 00bc 3CD1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3510              	 .loc 1 2222 0
 3511 00be 0029     	 cmp r1,#0
 3512 00c0 59D0     	 beq .L402
 3513              	.LVL320:
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3514              	 .loc 1 2215 0
 3515 00c2 94F83B00 	 ldrb r0,[r4,#59]
 3516              	.LVL321:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3517              	 .loc 1 2217 0
 3518 00c6 E979     	 ldrb r1,[r5,#7]
 3519 00c8 8142     	 cmp r1,r0
 3520 00ca 35D1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3521              	 .loc 1 2222 0
 3522 00cc 0029     	 cmp r1,#0
 3523 00ce 52D0     	 beq .L402
 3524              	.LVL322:
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3525              	 .loc 1 2215 0
 3526 00d0 94F83C00 	 ldrb r0,[r4,#60]
 3527              	.LVL323:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3528              	 .loc 1 2217 0
 3529 00d4 297A     	 ldrb r1,[r5,#8]
 3530 00d6 8142     	 cmp r1,r0
 3531 00d8 2ED1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3532              	 .loc 1 2222 0
 3533 00da 0029     	 cmp r1,#0
 3534 00dc 4BD0     	 beq .L402
 3535              	.LVL324:
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3536              	 .loc 1 2215 0
 3537 00de 94F83D00 	 ldrb r0,[r4,#61]
 3538              	.LVL325:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3539              	 .loc 1 2217 0
 3540 00e2 697A     	 ldrb r1,[r5,#9]
 3541 00e4 8142     	 cmp r1,r0
 3542 00e6 27D1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3543              	 .loc 1 2222 0
 3544 00e8 0029     	 cmp r1,#0
 3545 00ea 44D0     	 beq .L402
 3546              	.LVL326:
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3547              	 .loc 1 2215 0
 3548 00ec 94F83E00 	 ldrb r0,[r4,#62]
 3549              	.LVL327:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3550              	 .loc 1 2217 0
 3551 00f0 A97A     	 ldrb r1,[r5,#10]
 3552 00f2 8142     	 cmp r1,r0
 3553 00f4 20D1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3554              	 .loc 1 2222 0
 3555 00f6 0029     	 cmp r1,#0
 3556 00f8 3DD0     	 beq .L402
 3557              	.LVL328:
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3558              	 .loc 1 2215 0
 3559 00fa 94F83F00 	 ldrb r0,[r4,#63]
 3560              	.LVL329:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3561              	 .loc 1 2217 0
 3562 00fe E97A     	 ldrb r1,[r5,#11]
 3563 0100 8142     	 cmp r1,r0
 3564 0102 19D1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3565              	 .loc 1 2222 0
 3566 0104 0029     	 cmp r1,#0
 3567 0106 36D0     	 beq .L402
 3568              	.LVL330:
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3569              	 .loc 1 2215 0
 3570 0108 94F84000 	 ldrb r0,[r4,#64]
 3571              	.LVL331:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3572              	 .loc 1 2217 0
 3573 010c 297B     	 ldrb r1,[r5,#12]
 3574 010e 8142     	 cmp r1,r0
 3575 0110 12D1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3576              	 .loc 1 2222 0
 3577 0112 81B3     	 cbz r1,.L402
 3578              	.LVL332:
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3579              	 .loc 1 2215 0
 3580 0114 94F84100 	 ldrb r0,[r4,#65]
 3581              	.LVL333:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3582              	 .loc 1 2217 0
 3583 0118 697B     	 ldrb r1,[r5,#13]
 3584 011a 8142     	 cmp r1,r0
 3585 011c 0CD1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3586              	 .loc 1 2222 0
 3587 011e 51B3     	 cbz r1,.L402
 3588              	.LVL334:
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3589              	 .loc 1 2215 0
 3590 0120 94F84200 	 ldrb r0,[r4,#66]
 3591              	.LVL335:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3592              	 .loc 1 2217 0
 3593 0124 A97B     	 ldrb r1,[r5,#14]
 3594 0126 8142     	 cmp r1,r0
 3595 0128 06D1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3596              	 .loc 1 2222 0
 3597 012a 21B3     	 cbz r1,.L402
 3598              	.LVL336:
2215:../Dave/Generated/FREERTOS/tasks.c **** 
 3599              	 .loc 1 2215 0
 3600 012c 94F84300 	 ldrb r0,[r4,#67]
 3601              	.LVL337:
2217:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3602              	 .loc 1 2217 0
 3603 0130 E97B     	 ldrb r1,[r5,#15]
 3604 0132 8142     	 cmp r1,r0
 3605 0134 00D1     	 bne .L398
2222:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3606              	 .loc 1 2222 0
 3607 0136 F1B1     	 cbz r1,.L402
 3608              	.LVL338:
 3609              	.L398:
2241:../Dave/Generated/FREERTOS/tasks.c **** 		}
 3610              	 .loc 1 2241 0
 3611 0138 A642     	 cmp r6,r4
 3612 013a 87D1     	 bne .L400
 3613              	.LVL339:
 3614              	.L395:
 3615 013c 143A     	 subs r2,r2,#20
 3616              	.LBE378:
 3617              	.LBE377:
2278:../Dave/Generated/FREERTOS/tasks.c **** 
 3618              	 .loc 1 2278 0
 3619 013e BA42     	 cmp r2,r7
 3620 0140 7FF474AF 	 bne .L403
2283:../Dave/Generated/FREERTOS/tasks.c **** 			}
 3621              	 .loc 1 2283 0
 3622 0144 104B     	 ldr r3,.L460+8
 3623 0146 2946     	 mov r1,r5
 3624 0148 1868     	 ldr r0,[r3]
 3625 014a FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3626              	.LVL340:
2286:../Dave/Generated/FREERTOS/tasks.c **** 			{
 3627              	 .loc 1 2286 0
 3628 014e 0446     	 mov r4,r0
 3629 0150 88B9     	 cbnz r0,.L402
2288:../Dave/Generated/FREERTOS/tasks.c **** 			}
 3630              	 .loc 1 2288 0
 3631 0152 0E4B     	 ldr r3,.L460+12
 3632 0154 2946     	 mov r1,r5
 3633 0156 1868     	 ldr r0,[r3]
 3634              	.LVL341:
 3635 0158 FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3636              	.LVL342:
2293:../Dave/Generated/FREERTOS/tasks.c **** 				{
 3637              	 .loc 1 2293 0
 3638 015c 0446     	 mov r4,r0
 3639 015e 50B9     	 cbnz r0,.L402
2296:../Dave/Generated/FREERTOS/tasks.c **** 				}
 3640              	 .loc 1 2296 0
 3641 0160 0B48     	 ldr r0,.L460+16
 3642              	.LVL343:
 3643 0162 2946     	 mov r1,r5
 3644 0164 FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3645              	.LVL344:
2303:../Dave/Generated/FREERTOS/tasks.c **** 				{
 3646              	 .loc 1 2303 0
 3647 0168 0446     	 mov r4,r0
 3648 016a 20B9     	 cbnz r0,.L402
2306:../Dave/Generated/FREERTOS/tasks.c **** 				}
 3649              	 .loc 1 2306 0
 3650 016c 2946     	 mov r1,r5
 3651 016e 0948     	 ldr r0,.L460+20
 3652              	.LVL345:
 3653 0170 FFF7FEFF 	 bl prvSearchForNameWithinSingleList
 3654              	.LVL346:
 3655 0174 0446     	 mov r4,r0
 3656              	.LVL347:
 3657              	.L402:
2311:../Dave/Generated/FREERTOS/tasks.c **** 
 3658              	 .loc 1 2311 0
 3659 0176 FFF7FEFF 	 bl xTaskResumeAll
 3660              	.LVL348:
2314:../Dave/Generated/FREERTOS/tasks.c **** 
 3661              	 .loc 1 2314 0
 3662 017a 2046     	 mov r0,r4
 3663 017c F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 3664              	.LVL349:
 3665              	.L461:
 3666 017e 00BF     	 .align 2
 3667              	.L460:
 3668 0180 00000000 	 .word .LANCHOR16
 3669 0184 58000000 	 .word .LANCHOR8+88
 3670 0188 00000000 	 .word .LANCHOR5
 3671 018c 00000000 	 .word .LANCHOR4
 3672 0190 00000000 	 .word .LANCHOR3
 3673 0194 00000000 	 .word .LANCHOR12
 3674              	 .cfi_endproc
 3675              	.LFE151:
 3677              	 .section .text.xTaskAbortDelay,"ax",%progbits
 3678              	 .align 2
 3679              	 .global xTaskAbortDelay
 3680              	 .thumb
 3681              	 .thumb_func
 3683              	xTaskAbortDelay:
 3684              	.LFB154:
2428:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
 3685              	 .loc 1 2428 0
 3686              	 .cfi_startproc
 3687              	 
 3688              	 
 3689              	.LVL350:
 3690 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 3691              	.LCFI37:
 3692              	 .cfi_def_cfa_offset 24
 3693              	 .cfi_offset 3,-24
 3694              	 .cfi_offset 4,-20
 3695              	 .cfi_offset 5,-16
 3696              	 .cfi_offset 6,-12
 3697              	 .cfi_offset 7,-8
 3698              	 .cfi_offset 14,-4
2432:../Dave/Generated/FREERTOS/tasks.c **** 
 3699              	 .loc 1 2432 0
 3700 0002 E0B1     	 cbz r0,.L475
 3701              	.LBB391:
 3702              	.LBB392:
1950:../Dave/Generated/FREERTOS/tasks.c **** }
 3703              	 .loc 1 1950 0
 3704 0004 2C4A     	 ldr r2,.L477
 3705              	.LBE392:
 3706              	.LBE391:
 3707              	.LBB394:
 3708              	.LBB395:
1277:../Dave/Generated/FREERTOS/tasks.c **** 		{
 3709              	 .loc 1 1277 0
 3710 0006 2D4E     	 ldr r6,.L477+4
 3711              	.LBE395:
 3712              	.LBE394:
 3713              	.LBB398:
 3714              	.LBB393:
1950:../Dave/Generated/FREERTOS/tasks.c **** }
 3715              	 .loc 1 1950 0
 3716 0008 1368     	 ldr r3,[r2]
 3717 000a 0133     	 adds r3,r3,#1
 3718 000c 1360     	 str r3,[r2]
 3719              	.LVL351:
 3720              	.LBE393:
 3721              	.LBE398:
 3722              	.LBB399:
 3723              	.LBB396:
1277:../Dave/Generated/FREERTOS/tasks.c **** 		{
 3724              	 .loc 1 1277 0
 3725 000e 3368     	 ldr r3,[r6]
 3726 0010 9842     	 cmp r0,r3
 3727 0012 0446     	 mov r4,r0
 3728 0014 0FD0     	 beq .L467
1284:../Dave/Generated/FREERTOS/tasks.c **** 			{
 3729              	 .loc 1 1284 0
 3730 0016 FFF7FEFF 	 bl vPortEnterCritical
 3731              	.LVL352:
1286:../Dave/Generated/FREERTOS/tasks.c **** 			}
 3732              	 .loc 1 1286 0
 3733 001a 6569     	 ldr r5,[r4,#20]
 3734              	.LVL353:
1288:../Dave/Generated/FREERTOS/tasks.c **** 
 3735              	 .loc 1 1288 0
 3736 001c FFF7FEFF 	 bl vPortExitCritical
 3737              	.LVL354:
1290:../Dave/Generated/FREERTOS/tasks.c **** 			{
 3738              	 .loc 1 1290 0
 3739 0020 274B     	 ldr r3,.L477+8
 3740 0022 1B68     	 ldr r3,[r3]
 3741 0024 9D42     	 cmp r5,r3
 3742 0026 16D0     	 beq .L466
 3743 0028 264B     	 ldr r3,.L477+12
 3744 002a 1B68     	 ldr r3,[r3]
 3745 002c 9D42     	 cmp r5,r3
 3746 002e 12D0     	 beq .L466
1298:../Dave/Generated/FREERTOS/tasks.c **** 				{
 3747              	 .loc 1 1298 0
 3748 0030 254B     	 ldr r3,.L477+16
 3749 0032 9D42     	 cmp r5,r3
 3750 0034 0CD0     	 beq .L476
 3751              	.LVL355:
 3752              	.L467:
 3753              	.LBE396:
 3754              	.LBE399:
2491:../Dave/Generated/FREERTOS/tasks.c **** 
 3755              	 .loc 1 2491 0
 3756 0036 FFF7FEFF 	 bl xTaskResumeAll
 3757              	.LVL356:
2494:../Dave/Generated/FREERTOS/tasks.c **** 
 3758              	 .loc 1 2494 0
 3759 003a 0020     	 movs r0,#0
 3760 003c F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 3761              	.LVL357:
 3762              	.L475:
 3763              	.LBB400:
 3764              	.LBB401:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 3765              	 .loc 2 240 0
 3766              	
 3767 003e 4FF0FC03 	 mov r3,#252
 3768 0042 83F31188 	 msr basepri,r3
 3769 0046 BFF36F8F 	 isb 
 3770 004a BFF34F8F 	 dsb 
 3771              	
 3772              	
 3773              	.LVL358:
 3774              	 .thumb
 3775              	.L464:
 3776              	.LBE401:
 3777              	.LBE400:
2432:../Dave/Generated/FREERTOS/tasks.c **** 
 3778              	 .loc 1 2432 0 discriminator 1
 3779 004e FEE7     	 b .L464
 3780              	.LVL359:
 3781              	.L476:
 3782              	.LBB402:
 3783              	.LBB397:
1303:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3784              	 .loc 1 1303 0
 3785 0050 A36A     	 ldr r3,[r4,#40]
 3786 0052 002B     	 cmp r3,#0
 3787 0054 EFD0     	 beq .L467
 3788              	.L466:
 3789              	.LVL360:
 3790              	.LBE397:
 3791              	.LBE402:
2443:../Dave/Generated/FREERTOS/tasks.c **** 
 3792              	 .loc 1 2443 0
 3793 0056 251D     	 adds r5,r4,#4
 3794              	.LVL361:
 3795 0058 2846     	 mov r0,r5
 3796 005a FFF7FEFF 	 bl uxListRemove
 3797              	.LVL362:
2449:../Dave/Generated/FREERTOS/tasks.c **** 				{
 3798              	 .loc 1 2449 0
 3799 005e FFF7FEFF 	 bl vPortEnterCritical
 3800              	.LVL363:
2451:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3801              	 .loc 1 2451 0
 3802 0062 A36A     	 ldr r3,[r4,#40]
 3803 0064 33B1     	 cbz r3,.L469
2453:../Dave/Generated/FREERTOS/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
 3804              	 .loc 1 2453 0
 3805 0066 04F11800 	 add r0,r4,#24
 3806 006a FFF7FEFF 	 bl uxListRemove
 3807              	.LVL364:
2454:../Dave/Generated/FREERTOS/tasks.c **** 					}
 3808              	 .loc 1 2454 0
 3809 006e 0123     	 movs r3,#1
 3810 0070 84F86D30 	 strb r3,[r4,#109]
 3811              	.L469:
2461:../Dave/Generated/FREERTOS/tasks.c **** 
 3812              	 .loc 1 2461 0
 3813 0074 FFF7FEFF 	 bl vPortExitCritical
 3814              	.LVL365:
2464:../Dave/Generated/FREERTOS/tasks.c **** 
 3815              	 .loc 1 2464 0
 3816 0078 DFF858E0 	 ldr lr,.L477+28
 3817 007c E36A     	 ldr r3,[r4,#44]
 3818 007e DEF80020 	 ldr r2,[lr]
 3819 0082 1248     	 ldr r0,.L477+20
 3820 0084 0127     	 movs r7,#1
 3821 0086 07FA03FC 	 lsl ip,r7,r3
 3822 008a 03EB8303 	 add r3,r3,r3,lsl#2
 3823 008e 4CEA0202 	 orr r2,ip,r2
 3824 0092 00EB8300 	 add r0,r0,r3,lsl#2
 3825 0096 2946     	 mov r1,r5
 3826 0098 CEF80020 	 str r2,[lr]
 3827 009c FFF7FEFF 	 bl vListInsertEnd
 3828              	.LVL366:
2473:../Dave/Generated/FREERTOS/tasks.c **** 					{
 3829              	 .loc 1 2473 0
 3830 00a0 3368     	 ldr r3,[r6]
 3831 00a2 E26A     	 ldr r2,[r4,#44]
 3832 00a4 DB6A     	 ldr r3,[r3,#44]
 3833 00a6 9A42     	 cmp r2,r3
 3834 00a8 C5D9     	 bls .L467
2477:../Dave/Generated/FREERTOS/tasks.c **** 					}
 3835              	 .loc 1 2477 0
 3836 00aa 094B     	 ldr r3,.L477+24
 3837 00ac 1F60     	 str r7,[r3]
2491:../Dave/Generated/FREERTOS/tasks.c **** 
 3838              	 .loc 1 2491 0
 3839 00ae FFF7FEFF 	 bl xTaskResumeAll
 3840              	.LVL367:
2494:../Dave/Generated/FREERTOS/tasks.c **** 
 3841              	 .loc 1 2494 0
 3842 00b2 0020     	 movs r0,#0
 3843 00b4 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 3844              	.LVL368:
 3845              	.L478:
 3846 00b6 00BF     	 .align 2
 3847              	.L477:
 3848 00b8 00000000 	 .word .LANCHOR16
 3849 00bc 00000000 	 .word .LANCHOR1
 3850 00c0 00000000 	 .word .LANCHOR5
 3851 00c4 00000000 	 .word .LANCHOR4
 3852 00c8 00000000 	 .word .LANCHOR3
 3853 00cc 00000000 	 .word .LANCHOR8
 3854 00d0 00000000 	 .word .LANCHOR17
 3855 00d4 00000000 	 .word .LANCHOR2
 3856              	 .cfi_endproc
 3857              	.LFE154:
 3859              	 .section .text.prvListTasksWithinSingleList.part.6,"ax",%progbits
 3860              	 .align 2
 3861              	 .thumb
 3862              	 .thumb_func
 3864              	prvListTasksWithinSingleList.part.6:
 3865              	.LFB199:
3500:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3866              	 .loc 1 3500 0
 3867              	 .cfi_startproc
 3868              	 
 3869              	 
 3870              	.LVL369:
 3871              	.LBB417:
3507:../Dave/Generated/FREERTOS/tasks.c **** 
 3872              	 .loc 1 3507 0
 3873 0000 4B68     	 ldr r3,[r1,#4]
 3874 0002 5B68     	 ldr r3,[r3,#4]
 3875 0004 4B60     	 str r3,[r1,#4]
 3876              	.LBE417:
3500:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3877              	 .loc 1 3500 0
 3878 0006 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
 3879              	.LCFI38:
 3880              	 .cfi_def_cfa_offset 36
 3881              	 .cfi_offset 4,-36
 3882              	 .cfi_offset 5,-32
 3883              	 .cfi_offset 6,-28
 3884              	 .cfi_offset 7,-24
 3885              	 .cfi_offset 8,-20
 3886              	 .cfi_offset 9,-16
 3887              	 .cfi_offset 10,-12
 3888              	 .cfi_offset 11,-8
 3889              	 .cfi_offset 14,-4
 3890              	.LBB418:
3507:../Dave/Generated/FREERTOS/tasks.c **** 
 3891              	 .loc 1 3507 0
 3892 000a 01F10809 	 add r9,r1,#8
 3893 000e 4B45     	 cmp r3,r9
 3894 0010 08BF     	 it eq
 3895 0012 5B68     	 ldreq r3,[r3,#4]
 3896 0014 D3F80CB0 	 ldr fp,[r3,#12]
 3897              	.LBE418:
3500:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3898              	 .loc 1 3500 0
 3899 0018 83B0     	 sub sp,sp,#12
 3900              	.LCFI39:
 3901              	 .cfi_def_cfa_offset 48
3500:../Dave/Generated/FREERTOS/tasks.c **** 	{
 3902              	 .loc 1 3500 0
 3903 001a 0F46     	 mov r7,r1
 3904              	.LVL370:
 3905 001c 9246     	 mov r10,r2
 3906 001e 00F12004 	 add r4,r0,#32
3503:../Dave/Generated/FREERTOS/tasks.c **** 
 3907              	 .loc 1 3503 0
 3908 0022 4FF00008 	 mov r8,#0
 3909              	.LVL371:
 3910              	.L494:
 3911              	.LBB419:
3515:../Dave/Generated/FREERTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 3912              	 .loc 1 3515 0
 3913 0026 5B68     	 ldr r3,[r3,#4]
 3914 0028 7B60     	 str r3,[r7,#4]
 3915 002a 9945     	 cmp r9,r3
 3916 002c 04BF     	 itt eq
 3917 002e FB68     	 ldreq r3,[r7,#12]
 3918 0030 7B60     	 streq r3,[r7,#4]
 3919 0032 DE68     	 ldr r6,[r3,#12]
 3920              	.LVL372:
 3921              	.LBE419:
 3922              	.LBB420:
 3923              	.LBB421:
3416:../Dave/Generated/FREERTOS/tasks.c **** 
 3924              	 .loc 1 3416 0
 3925 0034 002E     	 cmp r6,#0
 3926 0036 71D0     	 beq .L509
 3927 0038 3546     	 mov r5,r6
 3928              	.L482:
 3929              	.LVL373:
3420:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 3930              	 .loc 1 3420 0
 3931 003a EB6A     	 ldr r3,[r5,#44]
3429:../Dave/Generated/FREERTOS/tasks.c **** 			{
 3932              	 .loc 1 3429 0
 3933 003c 14F814EC 	 ldrb lr,[r4,#-20]
3420:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 3934              	 .loc 1 3420 0
 3935 0040 44F8103C 	 str r3,[r4,#-16]
3419:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 3936              	 .loc 1 3419 0
 3937 0044 05F13400 	 add r0,r5,#52
 3938 0048 44F81C0C 	 str r0,[r4,#-28]
3418:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 3939              	 .loc 1 3418 0
 3940 004c 44F8205C 	 str r5,[r4,#-32]
3421:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 3941              	 .loc 1 3421 0
 3942 0050 2B6B     	 ldr r3,[r5,#48]
3422:../Dave/Generated/FREERTOS/tasks.c **** 
 3943              	 .loc 1 3422 0
 3944 0052 686C     	 ldr r0,[r5,#68]
 3945 0054 44F8180C 	 str r0,[r4,#-24]
3429:../Dave/Generated/FREERTOS/tasks.c **** 			{
 3946              	 .loc 1 3429 0
 3947 0058 BEF1030F 	 cmp lr,#3
3421:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 3948              	 .loc 1 3421 0
 3949 005c 44F8043C 	 str r3,[r4,#-4]
3429:../Dave/Generated/FREERTOS/tasks.c **** 			{
 3950              	 .loc 1 3429 0
 3951 0060 1FD0     	 beq .L510
 3952              	.L483:
3445:../Dave/Generated/FREERTOS/tasks.c **** 		}
 3953              	 .loc 1 3445 0
 3954 0062 EB6C     	 ldr r3,[r5,#76]
 3955 0064 44F80C3C 	 str r3,[r4,#-12]
3466:../Dave/Generated/FREERTOS/tasks.c **** 		{
 3956              	 .loc 1 3466 0
 3957 0068 BAF1050F 	 cmp r10,#5
3459:../Dave/Generated/FREERTOS/tasks.c **** 		}
 3958              	 .loc 1 3459 0
 3959 006c 4FF00003 	 mov r3,#0
 3960 0070 44F8083C 	 str r3,[r4,#-8]
3466:../Dave/Generated/FREERTOS/tasks.c **** 		{
 3961              	 .loc 1 3466 0
 3962 0074 22D0     	 beq .L485
3485:../Dave/Generated/FREERTOS/tasks.c **** 			}
 3963              	 .loc 1 3485 0
 3964 0076 2A6B     	 ldr r2,[r5,#48]
 3965              	.LVL374:
3468:../Dave/Generated/FREERTOS/tasks.c **** 		}
 3966              	 .loc 1 3468 0
 3967 0078 04F814AC 	 strb r10,[r4,#-20]
 3968              	.LBB422:
 3969              	.LBB423:
3537:../Dave/Generated/FREERTOS/tasks.c **** 		{
 3970              	 .loc 1 3537 0
 3971 007c 1378     	 ldrb r3,[r2]
 3972 007e A52B     	 cmp r3,#165
 3973 0080 41D1     	 bne .L502
 3974              	.L513:
 3975 0082 531C     	 adds r3,r2,#1
 3976              	.LVL375:
 3977              	.L492:
 3978 0084 9D1A     	 subs r5,r3,r2
 3979              	.LVL376:
 3980 0086 13F8010B 	 ldrb r0,[r3],#1
 3981              	.LVL377:
 3982 008a A528     	 cmp r0,#165
 3983 008c FAD0     	 beq .L492
 3984 008e C5F38F05 	 ubfx r5,r5,#2,#16
 3985              	.LVL378:
 3986              	.LBE423:
 3987              	.LBE422:
 3988              	.LBE421:
 3989              	.LBE420:
3518:../Dave/Generated/FREERTOS/tasks.c **** 		}
 3990              	 .loc 1 3518 0
 3991 0092 B345     	 cmp fp,r6
 3992              	.LBB442:
 3993              	.LBB438:
3485:../Dave/Generated/FREERTOS/tasks.c **** 			}
 3994              	 .loc 1 3485 0
 3995 0094 24F8245B 	 strh r5,[r4],#36
 3996              	.LVL379:
 3997              	.LBE438:
 3998              	.LBE442:
3517:../Dave/Generated/FREERTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 3999              	 .loc 1 3517 0
 4000 0098 08F10108 	 add r8,r8,#1
 4001              	.LVL380:
3518:../Dave/Generated/FREERTOS/tasks.c **** 		}
 4002              	 .loc 1 3518 0
 4003 009c 3AD0     	 beq .L493
 4004              	.LVL381:
 4005              	.L514:
 4006 009e 7B68     	 ldr r3,[r7,#4]
 4007 00a0 C1E7     	 b .L494
 4008              	.LVL382:
 4009              	.L510:
 4010              	.LBB443:
 4011              	.LBB439:
 4012              	.LBB425:
 4013              	.LBB426:
1950:../Dave/Generated/FREERTOS/tasks.c **** }
 4014              	 .loc 1 1950 0
 4015 00a2 294B     	 ldr r3,.L515
 4016 00a4 284A     	 ldr r2,.L515
 4017 00a6 1868     	 ldr r0,[r3]
 4018              	.LBE426:
 4019              	.LBE425:
3433:../Dave/Generated/FREERTOS/tasks.c **** 					{
 4020              	 .loc 1 3433 0
 4021 00a8 AB6A     	 ldr r3,[r5,#40]
 4022              	.LBB428:
 4023              	.LBB427:
1950:../Dave/Generated/FREERTOS/tasks.c **** }
 4024              	 .loc 1 1950 0
 4025 00aa 0130     	 adds r0,r0,#1
 4026 00ac 1060     	 str r0,[r2]
 4027              	.LBE427:
 4028              	.LBE428:
3433:../Dave/Generated/FREERTOS/tasks.c **** 					{
 4029              	 .loc 1 3433 0
 4030 00ae 13B1     	 cbz r3,.L484
3435:../Dave/Generated/FREERTOS/tasks.c **** 					}
 4031              	 .loc 1 3435 0
 4032 00b0 0223     	 movs r3,#2
 4033 00b2 04F8143C 	 strb r3,[r4,#-20]
 4034              	.L484:
3438:../Dave/Generated/FREERTOS/tasks.c **** 			}
 4035              	 .loc 1 3438 0
 4036 00b6 FFF7FEFF 	 bl xTaskResumeAll
 4037              	.LVL383:
 4038 00ba D2E7     	 b .L483
 4039              	.L485:
 4040              	.LVL384:
 4041              	.LBB429:
 4042              	.LBB430:
1275:../Dave/Generated/FREERTOS/tasks.c **** 
 4043              	 .loc 1 1275 0
 4044 00bc 002E     	 cmp r6,#0
 4045 00be 34D0     	 beq .L511
1277:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4046              	 .loc 1 1277 0
 4047 00c0 224A     	 ldr r2,.L515+4
 4048 00c2 1068     	 ldr r0,[r2]
 4049 00c4 8642     	 cmp r6,r0
 4050 00c6 18D0     	 beq .L489
1284:../Dave/Generated/FREERTOS/tasks.c **** 			{
 4051              	 .loc 1 1284 0
 4052 00c8 FFF7FEFF 	 bl vPortEnterCritical
 4053              	.LVL385:
1286:../Dave/Generated/FREERTOS/tasks.c **** 			}
 4054              	 .loc 1 1286 0
 4055 00cc 7369     	 ldr r3,[r6,#20]
 4056 00ce 0193     	 str r3,[sp,#4]
 4057              	.LVL386:
1288:../Dave/Generated/FREERTOS/tasks.c **** 
 4058              	 .loc 1 1288 0
 4059 00d0 FFF7FEFF 	 bl vPortExitCritical
 4060              	.LVL387:
1290:../Dave/Generated/FREERTOS/tasks.c **** 			{
 4061              	 .loc 1 1290 0
 4062 00d4 1E4B     	 ldr r3,.L515+8
 4063 00d6 1868     	 ldr r0,[r3]
 4064 00d8 019B     	 ldr r3,[sp,#4]
 4065 00da 8342     	 cmp r3,r0
 4066 00dc 21D0     	 beq .L498
 4067 00de 1D48     	 ldr r0,.L515+12
 4068 00e0 0068     	 ldr r0,[r0]
 4069 00e2 8342     	 cmp r3,r0
 4070 00e4 1DD0     	 beq .L498
1298:../Dave/Generated/FREERTOS/tasks.c **** 				{
 4071              	 .loc 1 1298 0
 4072 00e6 1C48     	 ldr r0,.L515+16
 4073 00e8 8342     	 cmp r3,r0
 4074 00ea 27D0     	 beq .L512
1315:../Dave/Generated/FREERTOS/tasks.c **** 				{
 4075              	 .loc 1 1315 0
 4076 00ec 1B48     	 ldr r0,.L515+20
 4077 00ee 8342     	 cmp r3,r0
 4078 00f0 19D0     	 beq .L500
1328:../Dave/Generated/FREERTOS/tasks.c **** 			}
 4079              	 .loc 1 1328 0
 4080 00f2 002B     	 cmp r3,#0
 4081 00f4 0CBF     	 ite eq
 4082 00f6 0423     	 moveq r3,#4
 4083 00f8 0123     	 movne r3,#1
 4084              	.LVL388:
 4085              	.L489:
 4086              	.LBE430:
 4087              	.LBE429:
3485:../Dave/Generated/FREERTOS/tasks.c **** 			}
 4088              	 .loc 1 3485 0
 4089 00fa 2A6B     	 ldr r2,[r5,#48]
 4090              	.LVL389:
3472:../Dave/Generated/FREERTOS/tasks.c **** 		}
 4091              	 .loc 1 3472 0
 4092 00fc 04F8143C 	 strb r3,[r4,#-20]
 4093              	.LBB436:
 4094              	.LBB424:
3537:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4095              	 .loc 1 3537 0
 4096 0100 1378     	 ldrb r3,[r2]
 4097              	.LVL390:
 4098 0102 A52B     	 cmp r3,#165
 4099 0104 BDD0     	 beq .L513
 4100              	.LVL391:
 4101              	.L502:
 4102 0106 0025     	 movs r5,#0
 4103              	.LVL392:
 4104              	.LBE424:
 4105              	.LBE436:
 4106              	.LBE439:
 4107              	.LBE443:
3518:../Dave/Generated/FREERTOS/tasks.c **** 		}
 4108              	 .loc 1 3518 0
 4109 0108 B345     	 cmp fp,r6
 4110              	.LBB444:
 4111              	.LBB440:
3485:../Dave/Generated/FREERTOS/tasks.c **** 			}
 4112              	 .loc 1 3485 0
 4113 010a 24F8245B 	 strh r5,[r4],#36
 4114              	.LVL393:
 4115              	.LBE440:
 4116              	.LBE444:
3517:../Dave/Generated/FREERTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4117              	 .loc 1 3517 0
 4118 010e 08F10108 	 add r8,r8,#1
 4119              	.LVL394:
3518:../Dave/Generated/FREERTOS/tasks.c **** 		}
 4120              	 .loc 1 3518 0
 4121 0112 C4D1     	 bne .L514
 4122              	.LVL395:
 4123              	.L493:
3526:../Dave/Generated/FREERTOS/tasks.c **** 
 4124              	 .loc 1 3526 0
 4125 0114 4046     	 mov r0,r8
 4126 0116 03B0     	 add sp,sp,#12
 4127              	.LCFI40:
 4128              	 .cfi_remember_state
 4129              	 .cfi_def_cfa_offset 36
 4130              	 
 4131 0118 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 4132              	.LVL396:
 4133              	.L509:
 4134              	.LCFI41:
 4135              	 .cfi_restore_state
 4136              	.LBB445:
 4137              	.LBB441:
3416:../Dave/Generated/FREERTOS/tasks.c **** 
 4138              	 .loc 1 3416 0
 4139 011c 0B4B     	 ldr r3,.L515+4
 4140 011e 1D68     	 ldr r5,[r3]
 4141 0120 8BE7     	 b .L482
 4142              	.LVL397:
 4143              	.L498:
 4144              	.LBB437:
 4145              	.LBB435:
1294:../Dave/Generated/FREERTOS/tasks.c **** 			}
 4146              	 .loc 1 1294 0
 4147 0122 0223     	 movs r3,#2
 4148 0124 E9E7     	 b .L489
 4149              	.L500:
1320:../Dave/Generated/FREERTOS/tasks.c **** 				}
 4150              	 .loc 1 1320 0
 4151 0126 0423     	 movs r3,#4
 4152 0128 E7E7     	 b .L489
 4153              	.LVL398:
 4154              	.L511:
 4155              	.LBB431:
 4156              	.LBB432:
 4157              	.LBB433:
 4158              	.LBB434:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 4159              	 .loc 2 240 0
 4160              	
 4161 012a 4FF0FC03 	 mov r3,#252
 4162 012e 83F31188 	 msr basepri,r3
 4163 0132 BFF36F8F 	 isb 
 4164 0136 BFF34F8F 	 dsb 
 4165              	
 4166              	
 4167              	.LVL399:
 4168              	 .thumb
 4169              	.L488:
 4170 013a FEE7     	 b .L488
 4171              	.LVL400:
 4172              	.L512:
 4173              	.LBE434:
 4174              	.LBE433:
 4175              	.LBE432:
 4176              	.LBE431:
1303:../Dave/Generated/FREERTOS/tasks.c **** 					{
 4177              	 .loc 1 1303 0
 4178 013c B36A     	 ldr r3,[r6,#40]
1309:../Dave/Generated/FREERTOS/tasks.c **** 					}
 4179              	 .loc 1 1309 0
 4180 013e 002B     	 cmp r3,#0
 4181 0140 0CBF     	 ite eq
 4182 0142 0323     	 moveq r3,#3
 4183 0144 0223     	 movne r3,#2
 4184 0146 D8E7     	 b .L489
 4185              	.L516:
 4186              	 .align 2
 4187              	.L515:
 4188 0148 00000000 	 .word .LANCHOR16
 4189 014c 00000000 	 .word .LANCHOR1
 4190 0150 00000000 	 .word .LANCHOR5
 4191 0154 00000000 	 .word .LANCHOR4
 4192 0158 00000000 	 .word .LANCHOR3
 4193 015c 00000000 	 .word .LANCHOR12
 4194              	.LBE435:
 4195              	.LBE437:
 4196              	.LBE441:
 4197              	.LBE445:
 4198              	 .cfi_endproc
 4199              	.LFE199:
 4201              	 .section .text.uxTaskGetSystemState,"ax",%progbits
 4202              	 .align 2
 4203              	 .global uxTaskGetSystemState
 4204              	 .thumb
 4205              	 .thumb_func
 4207              	uxTaskGetSystemState:
 4208              	.LFB152:
2322:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4209              	 .loc 1 2322 0
 4210              	 .cfi_startproc
 4211              	 
 4212              	 
 4213              	.LVL401:
 4214 0000 2DE9F84F 	 push {r3,r4,r5,r6,r7,r8,r9,r10,fp,lr}
 4215              	.LCFI42:
 4216              	 .cfi_def_cfa_offset 40
 4217              	 .cfi_offset 3,-40
 4218              	 .cfi_offset 4,-36
 4219              	 .cfi_offset 5,-32
 4220              	 .cfi_offset 6,-28
 4221              	 .cfi_offset 7,-24
 4222              	 .cfi_offset 8,-20
 4223              	 .cfi_offset 9,-16
 4224              	 .cfi_offset 10,-12
 4225              	 .cfi_offset 11,-8
 4226              	 .cfi_offset 14,-4
 4227              	.LBB446:
 4228              	.LBB447:
1950:../Dave/Generated/FREERTOS/tasks.c **** }
 4229              	 .loc 1 1950 0
 4230 0004 534C     	 ldr r4,.L551
 4231              	.LBE447:
 4232              	.LBE446:
2328:../Dave/Generated/FREERTOS/tasks.c **** 			{
 4233              	 .loc 1 2328 0
 4234 0006 544D     	 ldr r5,.L551+4
 4235              	.LBB449:
 4236              	.LBB448:
1950:../Dave/Generated/FREERTOS/tasks.c **** }
 4237              	 .loc 1 1950 0
 4238 0008 2368     	 ldr r3,[r4]
 4239 000a 0133     	 adds r3,r3,#1
 4240 000c 2360     	 str r3,[r4]
 4241              	.LBE448:
 4242              	.LBE449:
2328:../Dave/Generated/FREERTOS/tasks.c **** 			{
 4243              	 .loc 1 2328 0
 4244 000e 2B68     	 ldr r3,[r5]
 4245 0010 8B42     	 cmp r3,r1
 4246 0012 40D8     	 bhi .L528
 4247              	.LVL402:
 4248              	.LBB450:
 4249              	.LBB451:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4250              	 .loc 1 3505 0
 4251 0014 514E     	 ldr r6,.L551+8
 4252 0016 346D     	 ldr r4,[r6,#80]
 4253 0018 9246     	 mov r10,r2
 4254 001a 8346     	 mov fp,r0
 4255 001c 002C     	 cmp r4,#0
 4256 001e 62D1     	 bne .L542
 4257              	.LVL403:
 4258 0020 F06B     	 ldr r0,[r6,#60]
 4259              	.LVL404:
 4260 0022 0028     	 cmp r0,#0
 4261 0024 68D1     	 bne .L543
 4262              	.LVL405:
 4263              	.L520:
 4264 0026 B76A     	 ldr r7,[r6,#40]
 4265              	.LBE451:
 4266              	.LBE450:
2335:../Dave/Generated/FREERTOS/tasks.c **** 
 4267              	 .loc 1 2335 0
 4268 0028 2518     	 adds r5,r4,r0
 4269              	.LVL406:
 4270              	.LBB462:
 4271              	.LBB452:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4272              	 .loc 1 3505 0
 4273 002a 002F     	 cmp r7,#0
 4274 002c 39D1     	 bne .L544
 4275              	.LVL407:
 4276              	.L531:
3503:../Dave/Generated/FREERTOS/tasks.c **** 
 4277              	 .loc 1 3503 0
 4278 002e 3846     	 mov r0,r7
 4279              	.LVL408:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4280              	 .loc 1 3505 0
 4281 0030 7769     	 ldr r7,[r6,#20]
 4282              	.LBE452:
 4283              	.LBE462:
2335:../Dave/Generated/FREERTOS/tasks.c **** 
 4284              	 .loc 1 2335 0
 4285 0032 4419     	 adds r4,r0,r5
 4286              	.LVL409:
 4287              	.LBB463:
 4288              	.LBB453:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4289              	 .loc 1 3505 0
 4290 0034 002F     	 cmp r7,#0
 4291 0036 40D1     	 bne .L545
 4292              	.LVL410:
 4293              	.L532:
3503:../Dave/Generated/FREERTOS/tasks.c **** 
 4294              	 .loc 1 3503 0
 4295 0038 3846     	 mov r0,r7
 4296              	.LVL411:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4297              	 .loc 1 3505 0
 4298 003a 3768     	 ldr r7,[r6]
 4299              	.LBE453:
 4300              	.LBE463:
2335:../Dave/Generated/FREERTOS/tasks.c **** 
 4301              	 .loc 1 2335 0
 4302 003c 00EB0409 	 add r9,r0,r4
 4303              	.LVL412:
 4304              	.LBB464:
 4305              	.LBB454:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4306              	 .loc 1 3505 0
 4307 0040 002F     	 cmp r7,#0
 4308 0042 47D1     	 bne .L546
 4309              	.LVL413:
 4310              	.L533:
3503:../Dave/Generated/FREERTOS/tasks.c **** 
 4311              	 .loc 1 3503 0
 4312 0044 3846     	 mov r0,r7
 4313              	.L523:
 4314              	.LVL414:
 4315              	.LBE454:
 4316              	.LBE464:
2341:../Dave/Generated/FREERTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4317              	 .loc 1 2341 0
 4318 0046 464B     	 ldr r3,.L551+12
 4319 0048 1968     	 ldr r1,[r3]
 4320              	.LBB465:
 4321              	.LBB466:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4322              	 .loc 1 3505 0
 4323 004a 0E68     	 ldr r6,[r1]
 4324              	.LBE466:
 4325              	.LBE465:
2335:../Dave/Generated/FREERTOS/tasks.c **** 
 4326              	 .loc 1 2335 0
 4327 004c 00EB0908 	 add r8,r0,r9
 4328              	.LVL415:
 4329              	.LBB469:
 4330              	.LBB467:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4331              	 .loc 1 3505 0
 4332 0050 002E     	 cmp r6,#0
 4333 0052 76D1     	 bne .L547
3503:../Dave/Generated/FREERTOS/tasks.c **** 
 4334              	 .loc 1 3503 0
 4335 0054 3046     	 mov r0,r6
 4336              	.LVL416:
 4337              	.L524:
 4338              	.LBE467:
 4339              	.LBE469:
2342:../Dave/Generated/FREERTOS/tasks.c **** 
 4340              	 .loc 1 2342 0
 4341 0056 434B     	 ldr r3,.L551+16
 4342 0058 1968     	 ldr r1,[r3]
 4343              	.LBB470:
 4344              	.LBB471:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4345              	 .loc 1 3505 0
 4346 005a 0D68     	 ldr r5,[r1]
 4347              	.LBE471:
 4348              	.LBE470:
2341:../Dave/Generated/FREERTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4349              	 .loc 1 2341 0
 4350 005c 00EB0807 	 add r7,r0,r8
 4351              	.LVL417:
 4352              	.LBB474:
 4353              	.LBB472:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4354              	 .loc 1 3505 0
 4355 0060 002D     	 cmp r5,#0
 4356 0062 66D1     	 bne .L548
3503:../Dave/Generated/FREERTOS/tasks.c **** 
 4357              	 .loc 1 3503 0
 4358 0064 2846     	 mov r0,r5
 4359              	.LVL418:
 4360              	.L525:
 4361              	.LBE472:
 4362              	.LBE474:
 4363              	.LBB475:
 4364              	.LBB476:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4365              	 .loc 1 3505 0
 4366 0066 4049     	 ldr r1,.L551+20
 4367 0068 0C68     	 ldr r4,[r1]
 4368              	.LBE476:
 4369              	.LBE475:
2342:../Dave/Generated/FREERTOS/tasks.c **** 
 4370              	 .loc 1 2342 0
 4371 006a C619     	 adds r6,r0,r7
 4372              	.LVL419:
 4373              	.LBB479:
 4374              	.LBB477:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4375              	 .loc 1 3505 0
 4376 006c 002C     	 cmp r4,#0
 4377 006e 58D1     	 bne .L549
3503:../Dave/Generated/FREERTOS/tasks.c **** 
 4378              	 .loc 1 3503 0
 4379 0070 2046     	 mov r0,r4
 4380              	.LVL420:
 4381              	.L526:
 4382              	.LBE477:
 4383              	.LBE479:
 4384              	.LBB480:
 4385              	.LBB481:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4386              	 .loc 1 3505 0
 4387 0072 3E49     	 ldr r1,.L551+24
 4388 0074 0C68     	 ldr r4,[r1]
 4389              	.LBE481:
 4390              	.LBE480:
2348:../Dave/Generated/FREERTOS/tasks.c **** 				}
 4391              	 .loc 1 2348 0
 4392 0076 8519     	 adds r5,r0,r6
 4393              	.LVL421:
 4394              	.LBB484:
 4395              	.LBB482:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4396              	 .loc 1 3505 0
 4397 0078 002C     	 cmp r4,#0
 4398 007a 4AD1     	 bne .L550
3503:../Dave/Generated/FREERTOS/tasks.c **** 
 4399              	 .loc 1 3503 0
 4400 007c 2046     	 mov r0,r4
 4401              	.LVL422:
 4402              	.L527:
 4403              	.LBE482:
 4404              	.LBE484:
2356:../Dave/Generated/FREERTOS/tasks.c **** 				}
 4405              	 .loc 1 2356 0
 4406 007e 4419     	 adds r4,r0,r5
 4407              	.LVL423:
2373:../Dave/Generated/FREERTOS/tasks.c **** 					{
 4408              	 .loc 1 2373 0
 4409 0080 BAF1000F 	 cmp r10,#0
 4410 0084 02D0     	 beq .L518
2375:../Dave/Generated/FREERTOS/tasks.c **** 					}
 4411              	 .loc 1 2375 0
 4412 0086 0023     	 movs r3,#0
 4413 0088 CAF80030 	 str r3,[r10]
 4414              	.L518:
2385:../Dave/Generated/FREERTOS/tasks.c **** 
 4415              	 .loc 1 2385 0
 4416 008c FFF7FEFF 	 bl xTaskResumeAll
 4417              	.LVL424:
2388:../Dave/Generated/FREERTOS/tasks.c **** 
 4418              	 .loc 1 2388 0
 4419 0090 2046     	 mov r0,r4
 4420 0092 BDE8F88F 	 pop {r3,r4,r5,r6,r7,r8,r9,r10,fp,pc}
 4421              	.LVL425:
 4422              	.L528:
2323:../Dave/Generated/FREERTOS/tasks.c **** 
 4423              	 .loc 1 2323 0
 4424 0096 0024     	 movs r4,#0
 4425              	.LVL426:
2385:../Dave/Generated/FREERTOS/tasks.c **** 
 4426              	 .loc 1 2385 0
 4427 0098 FFF7FEFF 	 bl xTaskResumeAll
 4428              	.LVL427:
2388:../Dave/Generated/FREERTOS/tasks.c **** 
 4429              	 .loc 1 2388 0
 4430 009c 2046     	 mov r0,r4
 4431 009e BDE8F88F 	 pop {r3,r4,r5,r6,r7,r8,r9,r10,fp,pc}
 4432              	.LVL428:
 4433              	.L544:
2335:../Dave/Generated/FREERTOS/tasks.c **** 
 4434              	 .loc 1 2335 0
 4435 00a2 05EBC500 	 add r0,r5,r5,lsl#3
 4436              	.LBB485:
 4437              	.LBB455:
 4438 00a6 0BEB8000 	 add r0,fp,r0,lsl#2
 4439 00aa 3149     	 ldr r1,.L551+28
 4440 00ac 0122     	 movs r2,#1
 4441 00ae FFF7FEFF 	 bl prvListTasksWithinSingleList.part.6
 4442              	.LVL429:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4443              	 .loc 1 3505 0
 4444 00b2 7769     	 ldr r7,[r6,#20]
 4445              	.LBE455:
 4446              	.LBE485:
2335:../Dave/Generated/FREERTOS/tasks.c **** 
 4447              	 .loc 1 2335 0
 4448 00b4 4419     	 adds r4,r0,r5
 4449              	.LVL430:
 4450              	.LBB486:
 4451              	.LBB456:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4452              	 .loc 1 3505 0
 4453 00b6 002F     	 cmp r7,#0
 4454 00b8 BED0     	 beq .L532
 4455              	.LVL431:
 4456              	.L545:
 4457              	.LBE456:
 4458              	.LBE486:
2335:../Dave/Generated/FREERTOS/tasks.c **** 
 4459              	 .loc 1 2335 0
 4460 00ba 04EBC400 	 add r0,r4,r4,lsl#3
 4461              	.LBB487:
 4462              	.LBB457:
 4463 00be 0BEB8000 	 add r0,fp,r0,lsl#2
 4464 00c2 2C49     	 ldr r1,.L551+32
 4465 00c4 0122     	 movs r2,#1
 4466 00c6 FFF7FEFF 	 bl prvListTasksWithinSingleList.part.6
 4467              	.LVL432:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4468              	 .loc 1 3505 0
 4469 00ca 3768     	 ldr r7,[r6]
 4470              	.LBE457:
 4471              	.LBE487:
2335:../Dave/Generated/FREERTOS/tasks.c **** 
 4472              	 .loc 1 2335 0
 4473 00cc 00EB0409 	 add r9,r0,r4
 4474              	.LVL433:
 4475              	.LBB488:
 4476              	.LBB458:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4477              	 .loc 1 3505 0
 4478 00d0 002F     	 cmp r7,#0
 4479 00d2 B7D0     	 beq .L533
 4480              	.LVL434:
 4481              	.L546:
 4482              	.LBE458:
 4483              	.LBE488:
2335:../Dave/Generated/FREERTOS/tasks.c **** 
 4484              	 .loc 1 2335 0
 4485 00d4 09EBC900 	 add r0,r9,r9,lsl#3
 4486              	.LBB489:
 4487              	.LBB459:
 4488 00d8 0BEB8000 	 add r0,fp,r0,lsl#2
 4489 00dc 1F49     	 ldr r1,.L551+8
 4490 00de 0122     	 movs r2,#1
 4491 00e0 FFF7FEFF 	 bl prvListTasksWithinSingleList.part.6
 4492              	.LVL435:
 4493 00e4 AFE7     	 b .L523
 4494              	.LVL436:
 4495              	.L542:
 4496 00e6 06F15001 	 add r1,r6,#80
 4497              	.LVL437:
 4498 00ea 0122     	 movs r2,#1
 4499              	.LVL438:
 4500 00ec FFF7FEFF 	 bl prvListTasksWithinSingleList.part.6
 4501              	.LVL439:
 4502 00f0 0446     	 mov r4,r0
 4503              	.LVL440:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4504              	 .loc 1 3505 0
 4505 00f2 F06B     	 ldr r0,[r6,#60]
 4506              	.LVL441:
 4507 00f4 0028     	 cmp r0,#0
 4508 00f6 96D0     	 beq .L520
 4509              	.LVL442:
 4510              	.L543:
 4511              	.LBE459:
 4512              	.LBE489:
2335:../Dave/Generated/FREERTOS/tasks.c **** 
 4513              	 .loc 1 2335 0
 4514 00f8 04EBC400 	 add r0,r4,r4,lsl#3
 4515              	.LBB490:
 4516              	.LBB460:
 4517 00fc 0BEB8000 	 add r0,fp,r0,lsl#2
 4518 0100 1D49     	 ldr r1,.L551+36
 4519 0102 0122     	 movs r2,#1
 4520 0104 FFF7FEFF 	 bl prvListTasksWithinSingleList.part.6
 4521              	.LVL443:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4522              	 .loc 1 3505 0
 4523 0108 B76A     	 ldr r7,[r6,#40]
 4524              	.LBE460:
 4525              	.LBE490:
2335:../Dave/Generated/FREERTOS/tasks.c **** 
 4526              	 .loc 1 2335 0
 4527 010a 2518     	 adds r5,r4,r0
 4528              	.LVL444:
 4529              	.LBB491:
 4530              	.LBB461:
3505:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4531              	 .loc 1 3505 0
 4532 010c 002F     	 cmp r7,#0
 4533 010e 8ED0     	 beq .L531
 4534 0110 C7E7     	 b .L544
 4535              	.LVL445:
 4536              	.L550:
 4537              	.LBE461:
 4538              	.LBE491:
2356:../Dave/Generated/FREERTOS/tasks.c **** 				}
 4539              	 .loc 1 2356 0
 4540 0112 05EBC500 	 add r0,r5,r5,lsl#3
 4541              	.LVL446:
 4542              	.LBB492:
 4543              	.LBB483:
 4544 0116 0BEB8000 	 add r0,fp,r0,lsl#2
 4545 011a 0322     	 movs r2,#3
 4546 011c FFF7FEFF 	 bl prvListTasksWithinSingleList.part.6
 4547              	.LVL447:
 4548 0120 ADE7     	 b .L527
 4549              	.LVL448:
 4550              	.L549:
 4551              	.LBE483:
 4552              	.LBE492:
2348:../Dave/Generated/FREERTOS/tasks.c **** 				}
 4553              	 .loc 1 2348 0
 4554 0122 06EBC600 	 add r0,r6,r6,lsl#3
 4555              	.LVL449:
 4556              	.LBB493:
 4557              	.LBB478:
 4558 0126 0BEB8000 	 add r0,fp,r0,lsl#2
 4559 012a 0422     	 movs r2,#4
 4560 012c FFF7FEFF 	 bl prvListTasksWithinSingleList.part.6
 4561              	.LVL450:
 4562 0130 9FE7     	 b .L526
 4563              	.LVL451:
 4564              	.L548:
 4565              	.LBE478:
 4566              	.LBE493:
2342:../Dave/Generated/FREERTOS/tasks.c **** 
 4567              	 .loc 1 2342 0
 4568 0132 07EBC700 	 add r0,r7,r7,lsl#3
 4569              	.LVL452:
 4570              	.LBB494:
 4571              	.LBB473:
 4572 0136 0BEB8000 	 add r0,fp,r0,lsl#2
 4573 013a 0222     	 movs r2,#2
 4574 013c FFF7FEFF 	 bl prvListTasksWithinSingleList.part.6
 4575              	.LVL453:
 4576 0140 91E7     	 b .L525
 4577              	.LVL454:
 4578              	.L547:
 4579              	.LBE473:
 4580              	.LBE494:
2341:../Dave/Generated/FREERTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4581              	 .loc 1 2341 0
 4582 0142 08EBC800 	 add r0,r8,r8,lsl#3
 4583              	.LVL455:
 4584              	.LBB495:
 4585              	.LBB468:
 4586 0146 0BEB8000 	 add r0,fp,r0,lsl#2
 4587 014a 0222     	 movs r2,#2
 4588 014c FFF7FEFF 	 bl prvListTasksWithinSingleList.part.6
 4589              	.LVL456:
 4590 0150 81E7     	 b .L524
 4591              	.L552:
 4592 0152 00BF     	 .align 2
 4593              	.L551:
 4594 0154 00000000 	 .word .LANCHOR16
 4595 0158 00000000 	 .word .LANCHOR7
 4596 015c 00000000 	 .word .LANCHOR8
 4597 0160 00000000 	 .word .LANCHOR5
 4598 0164 00000000 	 .word .LANCHOR4
 4599 0168 00000000 	 .word .LANCHOR12
 4600 016c 00000000 	 .word .LANCHOR3
 4601 0170 28000000 	 .word .LANCHOR8+40
 4602 0174 14000000 	 .word .LANCHOR8+20
 4603 0178 3C000000 	 .word .LANCHOR8+60
 4604              	.LBE468:
 4605              	.LBE495:
 4606              	 .cfi_endproc
 4607              	.LFE152:
 4609              	 .section .text.vTaskSwitchContext,"ax",%progbits
 4610              	 .align 2
 4611              	 .global vTaskSwitchContext
 4612              	 .thumb
 4613              	 .thumb_func
 4615              	vTaskSwitchContext:
 4616              	.LFB156:
2762:../Dave/Generated/FREERTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 4617              	 .loc 1 2762 0
 4618              	 .cfi_startproc
 4619              	 
 4620              	 
 4621              	 
2763:../Dave/Generated/FREERTOS/tasks.c **** 	{
 4622              	 .loc 1 2763 0
 4623 0000 164B     	 ldr r3,.L560
 4624 0002 1B68     	 ldr r3,[r3]
 4625 0004 33BB     	 cbnz r3,.L559
2771:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 4626              	 .loc 1 2771 0
 4627 0006 1649     	 ldr r1,.L560+4
 4628              	.LBB508:
2806:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 4629              	 .loc 1 2806 0
 4630 0008 164A     	 ldr r2,.L560+8
 4631              	.LBE508:
2771:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 4632              	 .loc 1 2771 0
 4633 000a 0B60     	 str r3,[r1]
 4634              	.LBB512:
2806:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 4635              	 .loc 1 2806 0
 4636 000c 1368     	 ldr r3,[r2]
 4637              	.LVL457:
 4638              	.LBB509:
 4639              	.LBB510:
 179:../Dave/Generated/FREERTOS/portmacro.h **** 		return ucReturn;
 4640              	 .loc 2 179 0
 4641              	
 4642 000e B3FA83F3 	 clz r3,r3
 4643              	
 4644              	.LVL458:
 4645              	 .thumb
 4646 0012 DBB2     	 uxtb r3,r3
 4647              	.LVL459:
 4648              	.LBE510:
 4649              	.LBE509:
2806:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 4650              	 .loc 1 2806 0
 4651 0014 C3F11F03 	 rsb r3,r3,#31
 4652              	.LVL460:
 4653 0018 03EB8303 	 add r3,r3,r3,lsl#2
 4654              	.LVL461:
 4655 001c 9B00     	 lsls r3,r3,#2
 4656 001e 1248     	 ldr r0,.L560+12
 4657 0020 C258     	 ldr r2,[r0,r3]
 4658 0022 C118     	 adds r1,r0,r3
 4659 0024 42B9     	 cbnz r2,.L556
 4660              	.LBE512:
 4661              	.LBB513:
 4662              	.LBB514:
 4663              	.LBB515:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 4664              	 .loc 2 240 0
 4665              	
 4666 0026 4FF0FC03 	 mov r3,#252
 4667 002a 83F31188 	 msr basepri,r3
 4668 002e BFF36F8F 	 isb 
 4669 0032 BFF34F8F 	 dsb 
 4670              	
 4671              	
 4672              	.LVL462:
 4673              	 .thumb
 4674              	.L557:
 4675 0036 FEE7     	 b .L557
 4676              	.L556:
 4677              	.LVL463:
 4678              	.LBE515:
 4679              	.LBE514:
 4680              	.LBE513:
 4681              	.LBB516:
 4682              	.LBB511:
2806:../Dave/Generated/FREERTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 4683              	 .loc 1 2806 0 discriminator 2
 4684 0038 4A68     	 ldr r2,[r1,#4]
 4685 003a 0833     	 adds r3,r3,#8
 4686 003c 5268     	 ldr r2,[r2,#4]
 4687 003e 4A60     	 str r2,[r1,#4]
 4688 0040 0344     	 add r3,r3,r0
 4689 0042 9A42     	 cmp r2,r3
 4690 0044 08BF     	 it eq
 4691 0046 5268     	 ldreq r2,[r2,#4]
 4692 0048 084B     	 ldr r3,.L560+16
 4693 004a 08BF     	 it eq
 4694 004c 4A60     	 streq r2,[r1,#4]
 4695 004e D268     	 ldr r2,[r2,#12]
 4696 0050 1A60     	 str r2,[r3]
 4697 0052 7047     	 bx lr
 4698              	.L559:
 4699              	.LBE511:
 4700              	.LBE516:
2767:../Dave/Generated/FREERTOS/tasks.c **** 	}
 4701              	 .loc 1 2767 0
 4702 0054 024B     	 ldr r3,.L560+4
 4703 0056 0122     	 movs r2,#1
 4704 0058 1A60     	 str r2,[r3]
 4705 005a 7047     	 bx lr
 4706              	.L561:
 4707              	 .align 2
 4708              	.L560:
 4709 005c 00000000 	 .word .LANCHOR16
 4710 0060 00000000 	 .word .LANCHOR17
 4711 0064 00000000 	 .word .LANCHOR2
 4712 0068 00000000 	 .word .LANCHOR8
 4713 006c 00000000 	 .word .LANCHOR1
 4714              	 .cfi_endproc
 4715              	.LFE156:
 4717              	 .section .text.vTaskPlaceOnEventList,"ax",%progbits
 4718              	 .align 2
 4719              	 .global vTaskPlaceOnEventList
 4720              	 .thumb
 4721              	 .thumb_func
 4723              	vTaskPlaceOnEventList:
 4724              	.LFB157:
2821:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxEventList );
 4725              	 .loc 1 2821 0
 4726              	 .cfi_startproc
 4727              	 
 4728              	 
 4729              	.LVL464:
2822:../Dave/Generated/FREERTOS/tasks.c **** 
 4730              	 .loc 1 2822 0
 4731 0000 0028     	 cmp r0,#0
 4732 0002 2ED0     	 beq .L570
2821:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxEventList );
 4733              	 .loc 1 2821 0
 4734 0004 70B5     	 push {r4,r5,r6,lr}
 4735              	.LCFI43:
 4736              	 .cfi_def_cfa_offset 16
 4737              	 .cfi_offset 4,-16
 4738              	 .cfi_offset 5,-12
 4739              	 .cfi_offset 6,-8
 4740              	 .cfi_offset 14,-4
2831:../Dave/Generated/FREERTOS/tasks.c **** 
 4741              	 .loc 1 2831 0
 4742 0006 234D     	 ldr r5,.L573
 4743 0008 0C46     	 mov r4,r1
 4744 000a 2968     	 ldr r1,[r5]
 4745              	.LVL465:
 4746 000c 1831     	 adds r1,r1,#24
 4747 000e FFF7FEFF 	 bl vListInsert
 4748              	.LVL466:
 4749              	.LBB521:
 4750              	.LBB522:
4695:../Dave/Generated/FREERTOS/tasks.c **** 
 4751              	 .loc 1 4695 0
 4752 0012 214B     	 ldr r3,.L573+4
 4753 0014 1E68     	 ldr r6,[r3]
 4754              	.LVL467:
4702:../Dave/Generated/FREERTOS/tasks.c **** 	}
 4755              	 .loc 1 4702 0
 4756 0016 2B68     	 ldr r3,[r5]
4708:../Dave/Generated/FREERTOS/tasks.c **** 	{
 4757              	 .loc 1 4708 0
 4758 0018 2868     	 ldr r0,[r5]
4702:../Dave/Generated/FREERTOS/tasks.c **** 	}
 4759              	 .loc 1 4702 0
 4760 001a 0022     	 movs r2,#0
 4761 001c 83F86D20 	 strb r2,[r3,#109]
4708:../Dave/Generated/FREERTOS/tasks.c **** 	{
 4762              	 .loc 1 4708 0
 4763 0020 0430     	 adds r0,r0,#4
 4764 0022 FFF7FEFF 	 bl uxListRemove
 4765              	.LVL468:
 4766 0026 40B9     	 cbnz r0,.L565
4712:../Dave/Generated/FREERTOS/tasks.c **** 	}
 4767              	 .loc 1 4712 0
 4768 0028 2B68     	 ldr r3,[r5]
 4769 002a 1C49     	 ldr r1,.L573+8
 4770 002c D86A     	 ldr r0,[r3,#44]
 4771 002e 0B68     	 ldr r3,[r1]
 4772 0030 0122     	 movs r2,#1
 4773 0032 8240     	 lsls r2,r2,r0
 4774 0034 23EA0203 	 bic r3,r3,r2
 4775 0038 0B60     	 str r3,[r1]
 4776              	.L565:
4721:../Dave/Generated/FREERTOS/tasks.c **** 		{
 4777              	 .loc 1 4721 0
 4778 003a 631C     	 adds r3,r4,#1
 4779 003c 1AD0     	 beq .L571
4733:../Dave/Generated/FREERTOS/tasks.c **** 
 4780              	 .loc 1 4733 0
 4781 003e 3444     	 add r4,r4,r6
 4782              	.LVL469:
4736:../Dave/Generated/FREERTOS/tasks.c **** 
 4783              	 .loc 1 4736 0
 4784 0040 2A68     	 ldr r2,[r5]
 4785 0042 144B     	 ldr r3,.L573
 4786              	.LVL470:
 4787 0044 5460     	 str r4,[r2,#4]
4738:../Dave/Generated/FREERTOS/tasks.c **** 			{
 4788              	 .loc 1 4738 0
 4789 0046 A642     	 cmp r6,r4
 4790 0048 1BD8     	 bhi .L572
4748:../Dave/Generated/FREERTOS/tasks.c **** 
 4791              	 .loc 1 4748 0
 4792 004a 154A     	 ldr r2,.L573+12
 4793 004c 1068     	 ldr r0,[r2]
 4794 004e 1968     	 ldr r1,[r3]
 4795 0050 0431     	 adds r1,r1,#4
 4796 0052 FFF7FEFF 	 bl vListInsert
 4797              	.LVL471:
4753:../Dave/Generated/FREERTOS/tasks.c **** 				{
 4798              	 .loc 1 4753 0
 4799 0056 134B     	 ldr r3,.L573+16
 4800 0058 1A68     	 ldr r2,[r3]
 4801 005a 9442     	 cmp r4,r2
4755:../Dave/Generated/FREERTOS/tasks.c **** 				}
 4802              	 .loc 1 4755 0
 4803 005c 38BF     	 it cc
 4804 005e 1C60     	 strcc r4,[r3]
 4805 0060 70BD     	 pop {r4,r5,r6,pc}
 4806              	.LVL472:
 4807              	.L570:
 4808              	.LCFI44:
 4809              	 .cfi_def_cfa_offset 0
 4810              	 .cfi_restore 4
 4811              	 .cfi_restore 5
 4812              	 .cfi_restore 6
 4813              	 .cfi_restore 14
 4814              	.LBE522:
 4815              	.LBE521:
 4816              	.LBB526:
 4817              	.LBB527:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 4818              	 .loc 2 240 0
 4819              	
 4820 0062 4FF0FC03 	 mov r3,#252
 4821 0066 83F31188 	 msr basepri,r3
 4822 006a BFF36F8F 	 isb 
 4823 006e BFF34F8F 	 dsb 
 4824              	
 4825              	
 4826              	.LVL473:
 4827              	 .thumb
 4828              	.L564:
 4829              	.LBE527:
 4830              	.LBE526:
2822:../Dave/Generated/FREERTOS/tasks.c **** 
 4831              	 .loc 1 2822 0 discriminator 1
 4832 0072 FEE7     	 b .L564
 4833              	.LVL474:
 4834              	.L571:
 4835              	.LCFI45:
 4836              	 .cfi_def_cfa_offset 16
 4837              	 .cfi_offset 4,-16
 4838              	 .cfi_offset 5,-12
 4839              	 .cfi_offset 6,-8
 4840              	 .cfi_offset 14,-4
 4841              	.LBB528:
 4842              	.LBB523:
4726:../Dave/Generated/FREERTOS/tasks.c **** 		}
 4843              	 .loc 1 4726 0
 4844 0074 2968     	 ldr r1,[r5]
 4845 0076 0C48     	 ldr r0,.L573+20
 4846 0078 0431     	 adds r1,r1,#4
 4847              	.LBE523:
 4848              	.LBE528:
2834:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 4849              	 .loc 1 2834 0
 4850 007a BDE87040 	 pop {r4,r5,r6,lr}
 4851              	.LCFI46:
 4852              	 .cfi_remember_state
 4853              	 .cfi_restore 14
 4854              	 .cfi_restore 6
 4855              	 .cfi_restore 5
 4856              	 .cfi_restore 4
 4857              	 .cfi_def_cfa_offset 0
 4858              	.LVL475:
 4859              	.LBB529:
 4860              	.LBB524:
4726:../Dave/Generated/FREERTOS/tasks.c **** 		}
 4861              	 .loc 1 4726 0
 4862 007e FFF7FEBF 	 b vListInsertEnd
 4863              	.LVL476:
 4864              	.L572:
 4865              	.LCFI47:
 4866              	 .cfi_restore_state
4742:../Dave/Generated/FREERTOS/tasks.c **** 			}
 4867              	 .loc 1 4742 0
 4868 0082 0A4A     	 ldr r2,.L573+24
 4869 0084 1068     	 ldr r0,[r2]
 4870 0086 1968     	 ldr r1,[r3]
 4871              	.LBE524:
 4872              	.LBE529:
2834:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 4873              	 .loc 1 2834 0
 4874 0088 BDE87040 	 pop {r4,r5,r6,lr}
 4875              	.LCFI48:
 4876              	 .cfi_restore 14
 4877              	 .cfi_restore 6
 4878              	 .cfi_restore 5
 4879              	 .cfi_restore 4
 4880              	 .cfi_def_cfa_offset 0
 4881              	.LVL477:
 4882              	.LBB530:
 4883              	.LBB525:
4742:../Dave/Generated/FREERTOS/tasks.c **** 			}
 4884              	 .loc 1 4742 0
 4885 008c 0431     	 adds r1,r1,#4
 4886 008e FFF7FEBF 	 b vListInsert
 4887              	.LVL478:
 4888              	.L574:
 4889 0092 00BF     	 .align 2
 4890              	.L573:
 4891 0094 00000000 	 .word .LANCHOR1
 4892 0098 00000000 	 .word .LANCHOR0
 4893 009c 00000000 	 .word .LANCHOR2
 4894 00a0 00000000 	 .word .LANCHOR5
 4895 00a4 00000000 	 .word .LANCHOR6
 4896 00a8 00000000 	 .word .LANCHOR3
 4897 00ac 00000000 	 .word .LANCHOR4
 4898              	.LBE525:
 4899              	.LBE530:
 4900              	 .cfi_endproc
 4901              	.LFE157:
 4903              	 .section .text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4904              	 .align 2
 4905              	 .global vTaskPlaceOnUnorderedEventList
 4906              	 .thumb
 4907              	 .thumb_func
 4909              	vTaskPlaceOnUnorderedEventList:
 4910              	.LFB158:
2838:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxEventList );
 4911              	 .loc 1 2838 0
 4912              	 .cfi_startproc
 4913              	 
 4914              	 
 4915              	.LVL479:
 4916 0000 38B5     	 push {r3,r4,r5,lr}
 4917              	.LCFI49:
 4918              	 .cfi_def_cfa_offset 16
 4919              	 .cfi_offset 3,-16
 4920              	 .cfi_offset 4,-12
 4921              	 .cfi_offset 5,-8
 4922              	 .cfi_offset 14,-4
2839:../Dave/Generated/FREERTOS/tasks.c **** 
 4923              	 .loc 1 2839 0
 4924 0002 E0B1     	 cbz r0,.L581
2843:../Dave/Generated/FREERTOS/tasks.c **** 
 4925              	 .loc 1 2843 0
 4926 0004 124B     	 ldr r3,.L582
 4927 0006 1B68     	 ldr r3,[r3]
 4928 0008 43B9     	 cbnz r3,.L578
 4929              	.LBB531:
 4930              	.LBB532:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 4931              	 .loc 2 240 0
 4932              	
 4933 000a 4FF0FC03 	 mov r3,#252
 4934 000e 83F31188 	 msr basepri,r3
 4935 0012 BFF36F8F 	 isb 
 4936 0016 BFF34F8F 	 dsb 
 4937              	
 4938              	
 4939              	.LVL480:
 4940              	 .thumb
 4941              	.L579:
 4942              	.LBE532:
 4943              	.LBE531:
2843:../Dave/Generated/FREERTOS/tasks.c **** 
 4944              	 .loc 1 2843 0 discriminator 2
 4945 001a FEE7     	 b .L579
 4946              	.L578:
 4947 001c 1446     	 mov r4,r2
2848:../Dave/Generated/FREERTOS/tasks.c **** 
 4948              	 .loc 1 2848 0
 4949 001e 0D4A     	 ldr r2,.L582+4
 4950              	.LVL481:
 4951 0020 0B46     	 mov r3,r1
 4952 0022 1568     	 ldr r5,[r2]
2855:../Dave/Generated/FREERTOS/tasks.c **** 
 4953              	 .loc 1 2855 0
 4954 0024 1168     	 ldr r1,[r2]
 4955              	.LVL482:
2848:../Dave/Generated/FREERTOS/tasks.c **** 
 4956              	 .loc 1 2848 0
 4957 0026 43F00043 	 orr r3,r3,#-2147483648
 4958              	.LVL483:
 4959 002a AB61     	 str r3,[r5,#24]
2855:../Dave/Generated/FREERTOS/tasks.c **** 
 4960              	 .loc 1 2855 0
 4961 002c 1831     	 adds r1,r1,#24
 4962 002e FFF7FEFF 	 bl vListInsertEnd
 4963              	.LVL484:
2857:../Dave/Generated/FREERTOS/tasks.c **** }
 4964              	 .loc 1 2857 0
 4965 0032 2046     	 mov r0,r4
 4966 0034 0121     	 movs r1,#1
2858:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 4967              	 .loc 1 2858 0
 4968 0036 BDE83840 	 pop {r3,r4,r5,lr}
 4969              	.LCFI50:
 4970              	 .cfi_remember_state
 4971              	 .cfi_restore 14
 4972              	 .cfi_restore 5
 4973              	 .cfi_restore 4
 4974              	 .cfi_restore 3
 4975              	 .cfi_def_cfa_offset 0
 4976              	.LVL485:
2857:../Dave/Generated/FREERTOS/tasks.c **** }
 4977              	 .loc 1 2857 0
 4978 003a FFF7FEBF 	 b prvAddCurrentTaskToDelayedList
 4979              	.LVL486:
 4980              	.L581:
 4981              	.LCFI51:
 4982              	 .cfi_restore_state
 4983              	.LBB533:
 4984              	.LBB534:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 4985              	 .loc 2 240 0
 4986              	
 4987 003e 4FF0FC03 	 mov r3,#252
 4988 0042 83F31188 	 msr basepri,r3
 4989 0046 BFF36F8F 	 isb 
 4990 004a BFF34F8F 	 dsb 
 4991              	
 4992              	
 4993              	.LVL487:
 4994              	 .thumb
 4995              	.L577:
 4996              	.LBE534:
 4997              	.LBE533:
2839:../Dave/Generated/FREERTOS/tasks.c **** 
 4998              	 .loc 1 2839 0 discriminator 1
 4999 004e FEE7     	 b .L577
 5000              	.L583:
 5001              	 .align 2
 5002              	.L582:
 5003 0050 00000000 	 .word .LANCHOR16
 5004 0054 00000000 	 .word .LANCHOR1
 5005              	 .cfi_endproc
 5006              	.LFE158:
 5008              	 .section .text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 5009              	 .align 2
 5010              	 .global vTaskPlaceOnEventListRestricted
 5011              	 .thumb
 5012              	 .thumb_func
 5014              	vTaskPlaceOnEventListRestricted:
 5015              	.LFB159:
2864:../Dave/Generated/FREERTOS/tasks.c **** 		configASSERT( pxEventList );
 5016              	 .loc 1 2864 0
 5017              	 .cfi_startproc
 5018              	 
 5019              	 
 5020              	.LVL488:
 5021 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 5022              	.LCFI52:
 5023              	 .cfi_def_cfa_offset 24
 5024              	 .cfi_offset 3,-24
 5025              	 .cfi_offset 4,-20
 5026              	 .cfi_offset 5,-16
 5027              	 .cfi_offset 6,-12
 5028              	 .cfi_offset 7,-8
 5029              	 .cfi_offset 14,-4
2865:../Dave/Generated/FREERTOS/tasks.c **** 
 5030              	 .loc 1 2865 0
 5031 0002 0028     	 cmp r0,#0
 5032 0004 33D0     	 beq .L598
2877:../Dave/Generated/FREERTOS/tasks.c **** 
 5033              	 .loc 1 2877 0
 5034 0006 274D     	 ldr r5,.L601
 5035 0008 0C46     	 mov r4,r1
 5036 000a 2968     	 ldr r1,[r5]
 5037              	.LVL489:
 5038 000c 1831     	 adds r1,r1,#24
 5039 000e 1746     	 mov r7,r2
 5040 0010 FFF7FEFF 	 bl vListInsertEnd
 5041              	.LVL490:
 5042              	.LBB539:
 5043              	.LBB540:
4695:../Dave/Generated/FREERTOS/tasks.c **** 
 5044              	 .loc 1 4695 0
 5045 0014 244B     	 ldr r3,.L601+4
 5046 0016 1E68     	 ldr r6,[r3]
4702:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5047              	 .loc 1 4702 0
 5048 0018 2B68     	 ldr r3,[r5]
4708:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5049              	 .loc 1 4708 0
 5050 001a 2868     	 ldr r0,[r5]
4702:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5051              	 .loc 1 4702 0
 5052 001c 0022     	 movs r2,#0
 5053              	.LBE540:
 5054              	.LBE539:
2884:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5055              	 .loc 1 2884 0
 5056 001e 9742     	 cmp r7,r2
 5057              	.LBB546:
 5058              	.LBB541:
4702:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5059              	 .loc 1 4702 0
 5060 0020 83F86D20 	 strb r2,[r3,#109]
4708:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5061              	 .loc 1 4708 0
 5062 0024 00F10400 	 add r0,r0,#4
 5063              	.LBE541:
 5064              	.LBE546:
2884:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5065              	 .loc 1 2884 0
 5066 0028 18BF     	 it ne
 5067 002a 4FF0FF34 	 movne r4,#-1
 5068              	.LVL491:
 5069              	.LBB547:
 5070              	.LBB542:
4708:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5071              	 .loc 1 4708 0
 5072 002e FFF7FEFF 	 bl uxListRemove
 5073              	.LVL492:
 5074 0032 40B9     	 cbnz r0,.L588
4712:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5075              	 .loc 1 4712 0
 5076 0034 2B68     	 ldr r3,[r5]
 5077 0036 1D49     	 ldr r1,.L601+8
 5078 0038 D86A     	 ldr r0,[r3,#44]
 5079 003a 0B68     	 ldr r3,[r1]
 5080 003c 0122     	 movs r2,#1
 5081 003e 8240     	 lsls r2,r2,r0
 5082 0040 23EA0203 	 bic r3,r3,r2
 5083 0044 0B60     	 str r3,[r1]
 5084              	.L588:
4721:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5085              	 .loc 1 4721 0
 5086 0046 631C     	 adds r3,r4,#1
 5087 0048 22D0     	 beq .L599
 5088              	.L589:
4733:../Dave/Generated/FREERTOS/tasks.c **** 
 5089              	 .loc 1 4733 0
 5090 004a 3444     	 add r4,r4,r6
 5091              	.LVL493:
4736:../Dave/Generated/FREERTOS/tasks.c **** 
 5092              	 .loc 1 4736 0
 5093 004c 2A68     	 ldr r2,[r5]
 5094 004e 154B     	 ldr r3,.L601
 5095              	.LVL494:
 5096 0050 5460     	 str r4,[r2,#4]
4738:../Dave/Generated/FREERTOS/tasks.c **** 			{
 5097              	 .loc 1 4738 0
 5098 0052 A642     	 cmp r6,r4
 5099 0054 14D8     	 bhi .L600
4748:../Dave/Generated/FREERTOS/tasks.c **** 
 5100              	 .loc 1 4748 0
 5101 0056 164A     	 ldr r2,.L601+12
 5102 0058 1068     	 ldr r0,[r2]
 5103 005a 1968     	 ldr r1,[r3]
 5104 005c 0431     	 adds r1,r1,#4
 5105 005e FFF7FEFF 	 bl vListInsert
 5106              	.LVL495:
4753:../Dave/Generated/FREERTOS/tasks.c **** 				{
 5107              	 .loc 1 4753 0
 5108 0062 144B     	 ldr r3,.L601+16
 5109 0064 1A68     	 ldr r2,[r3]
 5110 0066 9442     	 cmp r4,r2
4755:../Dave/Generated/FREERTOS/tasks.c **** 				}
 5111              	 .loc 1 4755 0
 5112 0068 38BF     	 it cc
 5113 006a 1C60     	 strcc r4,[r3]
 5114 006c F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 5115              	.LVL496:
 5116              	.L598:
 5117              	.LBE542:
 5118              	.LBE547:
 5119              	.LBB548:
 5120              	.LBB549:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 5121              	 .loc 2 240 0
 5122              	
 5123 006e 4FF0FC03 	 mov r3,#252
 5124 0072 83F31188 	 msr basepri,r3
 5125 0076 BFF36F8F 	 isb 
 5126 007a BFF34F8F 	 dsb 
 5127              	
 5128              	
 5129              	.LVL497:
 5130              	 .thumb
 5131              	.L586:
 5132              	.LBE549:
 5133              	.LBE548:
2865:../Dave/Generated/FREERTOS/tasks.c **** 
 5134              	 .loc 1 2865 0 discriminator 1
 5135 007e FEE7     	 b .L586
 5136              	.LVL498:
 5137              	.L600:
 5138              	.LBB550:
 5139              	.LBB543:
4742:../Dave/Generated/FREERTOS/tasks.c **** 			}
 5140              	 .loc 1 4742 0
 5141 0080 0D4A     	 ldr r2,.L601+20
 5142 0082 1068     	 ldr r0,[r2]
 5143 0084 1968     	 ldr r1,[r3]
 5144              	.LBE543:
 5145              	.LBE550:
2889:../Dave/Generated/FREERTOS/tasks.c **** 
 5146              	 .loc 1 2889 0
 5147 0086 BDE8F840 	 pop {r3,r4,r5,r6,r7,lr}
 5148              	.LCFI53:
 5149              	 .cfi_remember_state
 5150              	 .cfi_restore 14
 5151              	 .cfi_restore 7
 5152              	 .cfi_restore 6
 5153              	 .cfi_restore 5
 5154              	 .cfi_restore 4
 5155              	 .cfi_restore 3
 5156              	 .cfi_def_cfa_offset 0
 5157              	.LVL499:
 5158              	.LBB551:
 5159              	.LBB544:
4742:../Dave/Generated/FREERTOS/tasks.c **** 			}
 5160              	 .loc 1 4742 0
 5161 008a 0431     	 adds r1,r1,#4
 5162 008c FFF7FEBF 	 b vListInsert
 5163              	.LVL500:
 5164              	.L599:
 5165              	.LCFI54:
 5166              	 .cfi_restore_state
4721:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5167              	 .loc 1 4721 0
 5168 0090 002F     	 cmp r7,#0
 5169 0092 DAD0     	 beq .L589
4726:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5170              	 .loc 1 4726 0
 5171 0094 2968     	 ldr r1,[r5]
 5172 0096 0948     	 ldr r0,.L601+24
 5173 0098 0431     	 adds r1,r1,#4
 5174              	.LBE544:
 5175              	.LBE551:
2889:../Dave/Generated/FREERTOS/tasks.c **** 
 5176              	 .loc 1 2889 0
 5177 009a BDE8F840 	 pop {r3,r4,r5,r6,r7,lr}
 5178              	.LCFI55:
 5179              	 .cfi_restore 14
 5180              	 .cfi_restore 7
 5181              	 .cfi_restore 6
 5182              	 .cfi_restore 5
 5183              	 .cfi_restore 4
 5184              	 .cfi_restore 3
 5185              	 .cfi_def_cfa_offset 0
 5186              	.LVL501:
 5187              	.LBB552:
 5188              	.LBB545:
4726:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5189              	 .loc 1 4726 0
 5190 009e FFF7FEBF 	 b vListInsertEnd
 5191              	.LVL502:
 5192              	.L602:
 5193 00a2 00BF     	 .align 2
 5194              	.L601:
 5195 00a4 00000000 	 .word .LANCHOR1
 5196 00a8 00000000 	 .word .LANCHOR0
 5197 00ac 00000000 	 .word .LANCHOR2
 5198 00b0 00000000 	 .word .LANCHOR5
 5199 00b4 00000000 	 .word .LANCHOR6
 5200 00b8 00000000 	 .word .LANCHOR4
 5201 00bc 00000000 	 .word .LANCHOR3
 5202              	.LBE545:
 5203              	.LBE552:
 5204              	 .cfi_endproc
 5205              	.LFE159:
 5207              	 .section .text.xTaskRemoveFromEventList,"ax",%progbits
 5208              	 .align 2
 5209              	 .global xTaskRemoveFromEventList
 5210              	 .thumb
 5211              	 .thumb_func
 5213              	xTaskRemoveFromEventList:
 5214              	.LFB160:
2895:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 5215              	 .loc 1 2895 0
 5216              	 .cfi_startproc
 5217              	 
 5218              	 
 5219              	.LVL503:
 5220 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 5221              	.LCFI56:
 5222              	 .cfi_def_cfa_offset 24
 5223              	 .cfi_offset 3,-24
 5224              	 .cfi_offset 4,-20
 5225              	 .cfi_offset 5,-16
 5226              	 .cfi_offset 6,-12
 5227              	 .cfi_offset 7,-8
 5228              	 .cfi_offset 14,-4
2912:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 5229              	 .loc 1 2912 0
 5230 0002 C368     	 ldr r3,[r0,#12]
 5231 0004 DC68     	 ldr r4,[r3,#12]
 5232              	.LVL504:
2913:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 5233              	 .loc 1 2913 0
 5234 0006 2CB3     	 cbz r4,.L611
2914:../Dave/Generated/FREERTOS/tasks.c **** 
 5235              	 .loc 1 2914 0
 5236 0008 04F11805 	 add r5,r4,#24
 5237 000c 2846     	 mov r0,r5
 5238              	.LVL505:
 5239 000e FFF7FEFF 	 bl uxListRemove
 5240              	.LVL506:
2916:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5241              	 .loc 1 2916 0
 5242 0012 174B     	 ldr r3,.L612
 5243 0014 1B68     	 ldr r3,[r3]
 5244 0016 33BB     	 cbnz r3,.L606
2918:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 5245              	 .loc 1 2918 0
 5246 0018 271D     	 adds r7,r4,#4
2919:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5247              	 .loc 1 2919 0
 5248 001a 164E     	 ldr r6,.L612+4
2918:../Dave/Generated/FREERTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 5249              	 .loc 1 2918 0
 5250 001c 3846     	 mov r0,r7
 5251 001e FFF7FEFF 	 bl uxListRemove
 5252              	.LVL507:
2919:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5253              	 .loc 1 2919 0
 5254 0022 E36A     	 ldr r3,[r4,#44]
 5255 0024 3268     	 ldr r2,[r6]
 5256 0026 1448     	 ldr r0,.L612+8
 5257 0028 0125     	 movs r5,#1
 5258 002a 9D40     	 lsls r5,r5,r3
 5259 002c 03EB8303 	 add r3,r3,r3,lsl#2
 5260 0030 2A43     	 orrs r2,r2,r5
 5261 0032 3946     	 mov r1,r7
 5262 0034 00EB8300 	 add r0,r0,r3,lsl#2
 5263 0038 3260     	 str r2,[r6]
 5264 003a FFF7FEFF 	 bl vListInsertEnd
 5265              	.LVL508:
 5266              	.L607:
2928:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5267              	 .loc 1 2928 0
 5268 003e 0F4B     	 ldr r3,.L612+12
 5269 0040 E26A     	 ldr r2,[r4,#44]
 5270 0042 1B68     	 ldr r3,[r3]
 5271 0044 DB6A     	 ldr r3,[r3,#44]
 5272 0046 9A42     	 cmp r2,r3
 5273              	.LVL509:
2937:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5274              	 .loc 1 2937 0
 5275 0048 83BF     	 ittte hi
 5276 004a 0D4B     	 ldrhi r3,.L612+16
 5277 004c 0120     	 movhi r0,#1
 5278 004e 1860     	 strhi r0,[r3]
2941:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5279              	 .loc 1 2941 0
 5280 0050 0020     	 movls r0,#0
 5281              	.LVL510:
2959:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 5282              	 .loc 1 2959 0
 5283 0052 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 5284              	.LVL511:
 5285              	.L611:
 5286              	.LBB553:
 5287              	.LBB554:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 5288              	 .loc 2 240 0
 5289              	
 5290 0054 4FF0FC03 	 mov r3,#252
 5291 0058 83F31188 	 msr basepri,r3
 5292 005c BFF36F8F 	 isb 
 5293 0060 BFF34F8F 	 dsb 
 5294              	
 5295              	
 5296              	.LVL512:
 5297              	 .thumb
 5298              	.L605:
 5299              	.LBE554:
 5300              	.LBE553:
2913:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 5301              	 .loc 1 2913 0 discriminator 1
 5302 0064 FEE7     	 b .L605
 5303              	.LVL513:
 5304              	.L606:
2925:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5305              	 .loc 1 2925 0
 5306 0066 2946     	 mov r1,r5
 5307 0068 0648     	 ldr r0,.L612+20
 5308 006a FFF7FEFF 	 bl vListInsertEnd
 5309              	.LVL514:
 5310 006e E6E7     	 b .L607
 5311              	.L613:
 5312              	 .align 2
 5313              	.L612:
 5314 0070 00000000 	 .word .LANCHOR16
 5315 0074 00000000 	 .word .LANCHOR2
 5316 0078 00000000 	 .word .LANCHOR8
 5317 007c 00000000 	 .word .LANCHOR1
 5318 0080 00000000 	 .word .LANCHOR17
 5319 0084 00000000 	 .word .LANCHOR11
 5320              	 .cfi_endproc
 5321              	.LFE160:
 5323              	 .section .text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 5324              	 .align 2
 5325              	 .global xTaskRemoveFromUnorderedEventList
 5326              	 .thumb
 5327              	 .thumb_func
 5329              	xTaskRemoveFromUnorderedEventList:
 5330              	.LFB161:
2963:../Dave/Generated/FREERTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 5331              	 .loc 1 2963 0
 5332              	 .cfi_startproc
 5333              	 
 5334              	 
 5335              	.LVL515:
 5336 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 5337              	.LCFI57:
 5338              	 .cfi_def_cfa_offset 24
 5339              	 .cfi_offset 3,-24
 5340              	 .cfi_offset 4,-20
 5341              	 .cfi_offset 5,-16
 5342              	 .cfi_offset 6,-12
 5343              	 .cfi_offset 7,-8
 5344              	 .cfi_offset 14,-4
2969:../Dave/Generated/FREERTOS/tasks.c **** 
 5345              	 .loc 1 2969 0
 5346 0002 1E4B     	 ldr r3,.L623
 5347 0004 1B68     	 ldr r3,[r3]
 5348 0006 43B9     	 cbnz r3,.L615
 5349              	.LBB555:
 5350              	.LBB556:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 5351              	 .loc 2 240 0
 5352              	
 5353 0008 4FF0FC03 	 mov r3,#252
 5354 000c 83F31188 	 msr basepri,r3
 5355 0010 BFF36F8F 	 isb 
 5356 0014 BFF34F8F 	 dsb 
 5357              	
 5358              	
 5359              	.LVL516:
 5360              	 .thumb
 5361              	.L616:
 5362              	.LBE556:
 5363              	.LBE555:
2969:../Dave/Generated/FREERTOS/tasks.c **** 
 5364              	 .loc 1 2969 0 discriminator 1
 5365 0018 FEE7     	 b .L616
 5366              	.L615:
2976:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 5367              	 .loc 1 2976 0
 5368 001a C468     	 ldr r4,[r0,#12]
 5369              	.LVL517:
2972:../Dave/Generated/FREERTOS/tasks.c **** 
 5370              	 .loc 1 2972 0
 5371 001c 41F00043 	 orr r3,r1,#-2147483648
 5372 0020 0360     	 str r3,[r0]
2977:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 5373              	 .loc 1 2977 0
 5374 0022 0CB3     	 cbz r4,.L622
2983:../Dave/Generated/FREERTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 5375              	 .loc 1 2983 0
 5376 0024 271D     	 adds r7,r4,#4
2978:../Dave/Generated/FREERTOS/tasks.c **** 
 5377              	 .loc 1 2978 0
 5378 0026 FFF7FEFF 	 bl uxListRemove
 5379              	.LVL518:
2984:../Dave/Generated/FREERTOS/tasks.c **** 
 5380              	 .loc 1 2984 0
 5381 002a 154E     	 ldr r6,.L623+4
2983:../Dave/Generated/FREERTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 5382              	 .loc 1 2983 0
 5383 002c 3846     	 mov r0,r7
 5384 002e FFF7FEFF 	 bl uxListRemove
 5385              	.LVL519:
2984:../Dave/Generated/FREERTOS/tasks.c **** 
 5386              	 .loc 1 2984 0
 5387 0032 E36A     	 ldr r3,[r4,#44]
 5388 0034 3268     	 ldr r2,[r6]
 5389 0036 1348     	 ldr r0,.L623+8
 5390 0038 0125     	 movs r5,#1
 5391 003a 05FA03FE 	 lsl lr,r5,r3
 5392 003e 03EB8303 	 add r3,r3,r3,lsl#2
 5393 0042 00EB8300 	 add r0,r0,r3,lsl#2
 5394 0046 4EEA0202 	 orr r2,lr,r2
 5395 004a 3946     	 mov r1,r7
 5396 004c 3260     	 str r2,[r6]
 5397 004e FFF7FEFF 	 bl vListInsertEnd
 5398              	.LVL520:
2986:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5399              	 .loc 1 2986 0
 5400 0052 0D4B     	 ldr r3,.L623+12
 5401 0054 E26A     	 ldr r2,[r4,#44]
 5402 0056 1B68     	 ldr r3,[r3]
 5403 0058 DB6A     	 ldr r3,[r3,#44]
 5404 005a 9A42     	 cmp r2,r3
 5405              	.LVL521:
2996:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5406              	 .loc 1 2996 0
 5407 005c 83BF     	 ittte hi
 5408 005e 0B4B     	 ldrhi r3,.L623+16
2992:../Dave/Generated/FREERTOS/tasks.c **** 
 5409              	 .loc 1 2992 0
 5410 0060 2846     	 movhi r0,r5
2996:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5411              	 .loc 1 2996 0
 5412 0062 1D60     	 strhi r5,[r3]
3000:../Dave/Generated/FREERTOS/tasks.c **** 	}
 5413              	 .loc 1 3000 0
 5414 0064 0020     	 movls r0,#0
 5415              	.LVL522:
3004:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 5416              	 .loc 1 3004 0
 5417 0066 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 5418              	.LVL523:
 5419              	.L622:
 5420              	.LBB557:
 5421              	.LBB558:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 5422              	 .loc 2 240 0
 5423              	
 5424 0068 4FF0FC03 	 mov r3,#252
 5425 006c 83F31188 	 msr basepri,r3
 5426 0070 BFF36F8F 	 isb 
 5427 0074 BFF34F8F 	 dsb 
 5428              	
 5429              	
 5430              	.LVL524:
 5431              	 .thumb
 5432              	.L618:
 5433              	.LBE558:
 5434              	.LBE557:
2977:../Dave/Generated/FREERTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 5435              	 .loc 1 2977 0 discriminator 2
 5436 0078 FEE7     	 b .L618
 5437              	.L624:
 5438 007a 00BF     	 .align 2
 5439              	.L623:
 5440 007c 00000000 	 .word .LANCHOR16
 5441 0080 00000000 	 .word .LANCHOR2
 5442 0084 00000000 	 .word .LANCHOR8
 5443 0088 00000000 	 .word .LANCHOR1
 5444 008c 00000000 	 .word .LANCHOR17
 5445              	 .cfi_endproc
 5446              	.LFE161:
 5448              	 .section .text.vTaskSetTimeOutState,"ax",%progbits
 5449              	 .align 2
 5450              	 .global vTaskSetTimeOutState
 5451              	 .thumb
 5452              	 .thumb_func
 5454              	vTaskSetTimeOutState:
 5455              	.LFB162:
3008:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTimeOut );
 5456              	 .loc 1 3008 0
 5457              	 .cfi_startproc
 5458              	 
 5459              	 
 5460              	 
 5461              	.LVL525:
3009:../Dave/Generated/FREERTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 5462              	 .loc 1 3009 0
 5463 0000 30B1     	 cbz r0,.L628
3010:../Dave/Generated/FREERTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 5464              	 .loc 1 3010 0
 5465 0002 084A     	 ldr r2,.L629
3011:../Dave/Generated/FREERTOS/tasks.c **** }
 5466              	 .loc 1 3011 0
 5467 0004 084B     	 ldr r3,.L629+4
3010:../Dave/Generated/FREERTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 5468              	 .loc 1 3010 0
 5469 0006 1268     	 ldr r2,[r2]
3011:../Dave/Generated/FREERTOS/tasks.c **** }
 5470              	 .loc 1 3011 0
 5471 0008 1B68     	 ldr r3,[r3]
 5472 000a 80E80C00 	 stmia r0,{r2,r3}
 5473 000e 7047     	 bx lr
 5474              	.L628:
 5475              	.LVL526:
 5476              	.LBB563:
 5477              	.LBB564:
 5478              	.LBB565:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 5479              	 .loc 2 240 0
 5480              	
 5481 0010 4FF0FC03 	 mov r3,#252
 5482 0014 83F31188 	 msr basepri,r3
 5483 0018 BFF36F8F 	 isb 
 5484 001c BFF34F8F 	 dsb 
 5485              	
 5486              	
 5487              	.LVL527:
 5488              	 .thumb
 5489              	.L627:
 5490 0020 FEE7     	 b .L627
 5491              	.L630:
 5492 0022 00BF     	 .align 2
 5493              	.L629:
 5494 0024 00000000 	 .word .LANCHOR19
 5495 0028 00000000 	 .word .LANCHOR0
 5496              	.LBE565:
 5497              	.LBE564:
 5498              	.LBE563:
 5499              	 .cfi_endproc
 5500              	.LFE162:
 5502              	 .section .text.xTaskCheckForTimeOut,"ax",%progbits
 5503              	 .align 2
 5504              	 .global xTaskCheckForTimeOut
 5505              	 .thumb
 5506              	 .thumb_func
 5508              	xTaskCheckForTimeOut:
 5509              	.LFB163:
3016:../Dave/Generated/FREERTOS/tasks.c **** BaseType_t xReturn;
 5510              	 .loc 1 3016 0
 5511              	 .cfi_startproc
 5512              	 
 5513              	 
 5514              	.LVL528:
 5515 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 5516              	.LCFI58:
 5517              	 .cfi_def_cfa_offset 24
 5518              	 .cfi_offset 3,-24
 5519              	 .cfi_offset 4,-20
 5520              	 .cfi_offset 5,-16
 5521              	 .cfi_offset 6,-12
 5522              	 .cfi_offset 7,-8
 5523              	 .cfi_offset 14,-4
3019:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 5524              	 .loc 1 3019 0
 5525 0002 0028     	 cmp r0,#0
 5526 0004 37D0     	 beq .L645
3020:../Dave/Generated/FREERTOS/tasks.c **** 
 5527              	 .loc 1 3020 0
 5528 0006 69B3     	 cbz r1,.L646
 5529 0008 0E46     	 mov r6,r1
 5530 000a 0546     	 mov r5,r0
 5531              	.LBB577:
3025:../Dave/Generated/FREERTOS/tasks.c **** 
 5532              	 .loc 1 3025 0
 5533 000c 214F     	 ldr r7,.L648
 5534              	.LBE577:
3022:../Dave/Generated/FREERTOS/tasks.c **** 	{
 5535              	 .loc 1 3022 0
 5536 000e FFF7FEFF 	 bl vPortEnterCritical
 5537              	.LVL529:
 5538              	.LBB582:
3028:../Dave/Generated/FREERTOS/tasks.c **** 			{
 5539              	 .loc 1 3028 0
 5540 0012 214B     	 ldr r3,.L648+4
3025:../Dave/Generated/FREERTOS/tasks.c **** 
 5541              	 .loc 1 3025 0
 5542 0014 3968     	 ldr r1,[r7]
 5543              	.LVL530:
3028:../Dave/Generated/FREERTOS/tasks.c **** 			{
 5544              	 .loc 1 3028 0
 5545 0016 1A68     	 ldr r2,[r3]
 5546 0018 92F86D40 	 ldrb r4,[r2,#109]
 5547 001c CCB9     	 cbnz r4,.L647
3039:../Dave/Generated/FREERTOS/tasks.c **** 			{
 5548              	 .loc 1 3039 0
 5549 001e 3268     	 ldr r2,[r6]
 5550 0020 531C     	 adds r3,r2,#1
 5551 0022 12D0     	 beq .L637
3049:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5552              	 .loc 1 3049 0
 5553 0024 1D48     	 ldr r0,.L648+8
 5554 0026 2C68     	 ldr r4,[r5]
 5555 0028 0368     	 ldr r3,[r0]
 5556 002a 9C42     	 cmp r4,r3
 5557 002c 6B68     	 ldr r3,[r5,#4]
 5558 002e 01D0     	 beq .L639
3049:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5559              	 .loc 1 3049 0 is_stmt 0 discriminator 1
 5560 0030 9942     	 cmp r1,r3
 5561 0032 29D2     	 bcs .L644
 5562              	.L639:
3058:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5563              	 .loc 1 3058 0 is_stmt 1
 5564 0034 CC1A     	 subs r4,r1,r3
 5565 0036 A242     	 cmp r2,r4
 5566 0038 26D9     	 bls .L644
 5567 003a 521A     	 subs r2,r2,r1
3061:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 5568              	 .loc 1 3061 0
 5569 003c 1344     	 add r3,r3,r2
 5570              	.LBB578:
 5571              	.LBB579:
3010:../Dave/Generated/FREERTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 5572              	 .loc 1 3010 0
 5573 003e 0168     	 ldr r1,[r0]
 5574              	.LVL531:
3011:../Dave/Generated/FREERTOS/tasks.c **** }
 5575              	 .loc 1 3011 0
 5576 0040 3A68     	 ldr r2,[r7]
 5577              	.LBE579:
 5578              	.LBE578:
3061:../Dave/Generated/FREERTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 5579              	 .loc 1 3061 0
 5580 0042 3360     	 str r3,[r6]
 5581              	.LVL532:
 5582              	.LBB581:
 5583              	.LBB580:
3011:../Dave/Generated/FREERTOS/tasks.c **** }
 5584              	 .loc 1 3011 0
 5585 0044 85E80600 	 stmia r5,{r1,r2}
 5586              	.LVL533:
 5587              	.LBE580:
 5588              	.LBE581:
3063:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5589              	 .loc 1 3063 0
 5590 0048 0024     	 movs r4,#0
 5591              	.LVL534:
 5592              	.L637:
 5593              	.LBE582:
3070:../Dave/Generated/FREERTOS/tasks.c **** 
 5594              	 .loc 1 3070 0
 5595 004a FFF7FEFF 	 bl vPortExitCritical
 5596              	.LVL535:
3073:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 5597              	 .loc 1 3073 0
 5598 004e 2046     	 mov r0,r4
 5599 0050 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 5600              	.LVL536:
 5601              	.L647:
 5602              	.LBB583:
3032:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdTRUE;
 5603              	 .loc 1 3032 0
 5604 0052 1B68     	 ldr r3,[r3]
 5605 0054 0022     	 movs r2,#0
 5606 0056 83F86D20 	 strb r2,[r3,#109]
 5607              	.LVL537:
3033:../Dave/Generated/FREERTOS/tasks.c **** 			}
 5608              	 .loc 1 3033 0
 5609 005a 0124     	 movs r4,#1
 5610              	.LVL538:
 5611              	.LBE583:
3070:../Dave/Generated/FREERTOS/tasks.c **** 
 5612              	 .loc 1 3070 0
 5613 005c FFF7FEFF 	 bl vPortExitCritical
 5614              	.LVL539:
3073:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 5615              	 .loc 1 3073 0
 5616 0060 2046     	 mov r0,r4
 5617 0062 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 5618              	.LVL540:
 5619              	.L646:
 5620              	.LBB584:
 5621              	.LBB585:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 5622              	 .loc 2 240 0
 5623              	
 5624 0064 4FF0FC03 	 mov r3,#252
 5625 0068 83F31188 	 msr basepri,r3
 5626 006c BFF36F8F 	 isb 
 5627 0070 BFF34F8F 	 dsb 
 5628              	
 5629              	
 5630              	.LVL541:
 5631              	 .thumb
 5632              	.L635:
 5633              	.LBE585:
 5634              	.LBE584:
3020:../Dave/Generated/FREERTOS/tasks.c **** 
 5635              	 .loc 1 3020 0 discriminator 2
 5636 0074 FEE7     	 b .L635
 5637              	.L645:
 5638              	.LBB586:
 5639              	.LBB587:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 5640              	 .loc 2 240 0
 5641              	
 5642 0076 4FF0FC03 	 mov r3,#252
 5643 007a 83F31188 	 msr basepri,r3
 5644 007e BFF36F8F 	 isb 
 5645 0082 BFF34F8F 	 dsb 
 5646              	
 5647              	
 5648              	.LVL542:
 5649              	 .thumb
 5650              	.L633:
 5651              	.LBE587:
 5652              	.LBE586:
3019:../Dave/Generated/FREERTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 5653              	 .loc 1 3019 0 discriminator 1
 5654 0086 FEE7     	 b .L633
 5655              	.LVL543:
 5656              	.L644:
 5657              	.LBB588:
3056:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5658              	 .loc 1 3056 0
 5659 0088 0124     	 movs r4,#1
 5660              	.LVL544:
 5661              	.LBE588:
3070:../Dave/Generated/FREERTOS/tasks.c **** 
 5662              	 .loc 1 3070 0
 5663 008a FFF7FEFF 	 bl vPortExitCritical
 5664              	.LVL545:
3073:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 5665              	 .loc 1 3073 0
 5666 008e 2046     	 mov r0,r4
 5667 0090 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 5668              	.LVL546:
 5669              	.L649:
 5670 0092 00BF     	 .align 2
 5671              	.L648:
 5672 0094 00000000 	 .word .LANCHOR0
 5673 0098 00000000 	 .word .LANCHOR1
 5674 009c 00000000 	 .word .LANCHOR19
 5675              	 .cfi_endproc
 5676              	.LFE163:
 5678              	 .section .text.vTaskMissedYield,"ax",%progbits
 5679              	 .align 2
 5680              	 .global vTaskMissedYield
 5681              	 .thumb
 5682              	 .thumb_func
 5684              	vTaskMissedYield:
 5685              	.LFB164:
3077:../Dave/Generated/FREERTOS/tasks.c **** 	xYieldPending = pdTRUE;
 5686              	 .loc 1 3077 0
 5687              	 .cfi_startproc
 5688              	 
 5689              	 
 5690              	 
3078:../Dave/Generated/FREERTOS/tasks.c **** }
 5691              	 .loc 1 3078 0
 5692 0000 014B     	 ldr r3,.L651
 5693 0002 0122     	 movs r2,#1
 5694 0004 1A60     	 str r2,[r3]
 5695 0006 7047     	 bx lr
 5696              	.L652:
 5697              	 .align 2
 5698              	.L651:
 5699 0008 00000000 	 .word .LANCHOR17
 5700              	 .cfi_endproc
 5701              	.LFE164:
 5703              	 .section .text.uxTaskGetTaskNumber,"ax",%progbits
 5704              	 .align 2
 5705              	 .global uxTaskGetTaskNumber
 5706              	 .thumb
 5707              	 .thumb_func
 5709              	uxTaskGetTaskNumber:
 5710              	.LFB165:
3085:../Dave/Generated/FREERTOS/tasks.c **** 	UBaseType_t uxReturn;
 5711              	 .loc 1 3085 0
 5712              	 .cfi_startproc
 5713              	 
 5714              	 
 5715              	 
 5716              	.LVL547:
3089:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5717              	 .loc 1 3089 0
 5718 0000 00B1     	 cbz r0,.L654
 5719              	.LVL548:
3092:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5720              	 .loc 1 3092 0
 5721 0002 806C     	 ldr r0,[r0,#72]
 5722              	.LVL549:
 5723              	.L654:
3100:../Dave/Generated/FREERTOS/tasks.c **** 
 5724              	 .loc 1 3100 0
 5725 0004 7047     	 bx lr
 5726              	 .cfi_endproc
 5727              	.LFE165:
 5729 0006 00BF     	 .section .text.vTaskSetTaskNumber,"ax",%progbits
 5730              	 .align 2
 5731              	 .global vTaskSetTaskNumber
 5732              	 .thumb
 5733              	 .thumb_func
 5735              	vTaskSetTaskNumber:
 5736              	.LFB166:
3108:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 5737              	 .loc 1 3108 0
 5738              	 .cfi_startproc
 5739              	 
 5740              	 
 5741              	 
 5742              	.LVL550:
3111:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5743              	 .loc 1 3111 0
 5744 0000 00B1     	 cbz r0,.L656
 5745              	.LVL551:
3114:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5746              	 .loc 1 3114 0
 5747 0002 8164     	 str r1,[r0,#72]
 5748              	.LVL552:
 5749              	.L656:
 5750 0004 7047     	 bx lr
 5751              	 .cfi_endproc
 5752              	.LFE166:
 5754 0006 00BF     	 .section .text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 5755              	 .align 2
 5756              	 .global vTaskSetThreadLocalStoragePointer
 5757              	 .thumb
 5758              	 .thumb_func
 5760              	vTaskSetThreadLocalStoragePointer:
 5761              	.LFB168:
3281:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 5762              	 .loc 1 3281 0
 5763              	 .cfi_startproc
 5764              	 
 5765              	 
 5766              	 
 5767              	.LVL553:
3284:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5768              	 .loc 1 3284 0
 5769 0000 0429     	 cmp r1,#4
 5770 0002 03DC     	 bgt .L661
3286:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 5771              	 .loc 1 3286 0
 5772 0004 18B1     	 cbz r0,.L664
 5773              	.LVL554:
 5774              	.L663:
3287:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5775              	 .loc 1 3287 0 discriminator 4
 5776 0006 00EB8100 	 add r0,r0,r1,lsl#2
 5777              	.LVL555:
 5778 000a 4265     	 str r2,[r0,#84]
 5779              	.L661:
 5780 000c 7047     	 bx lr
 5781              	.LVL556:
 5782              	.L664:
3286:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 5783              	 .loc 1 3286 0 discriminator 1
 5784 000e 014B     	 ldr r3,.L665
 5785 0010 1868     	 ldr r0,[r3]
 5786              	.LVL557:
 5787 0012 F8E7     	 b .L663
 5788              	.L666:
 5789              	 .align 2
 5790              	.L665:
 5791 0014 00000000 	 .word .LANCHOR1
 5792              	 .cfi_endproc
 5793              	.LFE168:
 5795              	 .section .text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 5796              	 .align 2
 5797              	 .global pvTaskGetThreadLocalStoragePointer
 5798              	 .thumb
 5799              	 .thumb_func
 5801              	pvTaskGetThreadLocalStoragePointer:
 5802              	.LFB169:
3297:../Dave/Generated/FREERTOS/tasks.c **** 	void *pvReturn = NULL;
 5803              	 .loc 1 3297 0
 5804              	 .cfi_startproc
 5805              	 
 5806              	 
 5807              	 
 5808              	.LVL558:
3301:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5809              	 .loc 1 3301 0
 5810 0000 0429     	 cmp r1,#4
 5811 0002 0ADC     	 bgt .L670
3303:../Dave/Generated/FREERTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 5812              	 .loc 1 3303 0
 5813 0004 18B1     	 cbz r0,.L671
 5814              	.LVL559:
3304:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5815              	 .loc 1 3304 0 discriminator 4
 5816 0006 00EB8100 	 add r0,r0,r1,lsl#2
 5817              	.LVL560:
 5818 000a 406D     	 ldr r0,[r0,#84]
 5819              	.LVL561:
 5820 000c 7047     	 bx lr
 5821              	.LVL562:
 5822              	.L671:
3303:../Dave/Generated/FREERTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 5823              	 .loc 1 3303 0 discriminator 1
 5824 000e 044B     	 ldr r3,.L672
 5825 0010 1868     	 ldr r0,[r3]
 5826              	.LVL563:
3304:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5827              	 .loc 1 3304 0 discriminator 1
 5828 0012 00EB8100 	 add r0,r0,r1,lsl#2
 5829              	.LVL564:
 5830 0016 406D     	 ldr r0,[r0,#84]
 5831              	.LVL565:
 5832 0018 7047     	 bx lr
 5833              	.LVL566:
 5834              	.L670:
3308:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5835              	 .loc 1 3308 0
 5836 001a 0020     	 movs r0,#0
 5837              	.LVL567:
3312:../Dave/Generated/FREERTOS/tasks.c **** 
 5838              	 .loc 1 3312 0
 5839 001c 7047     	 bx lr
 5840              	.L673:
 5841 001e 00BF     	 .align 2
 5842              	.L672:
 5843 0020 00000000 	 .word .LANCHOR1
 5844              	 .cfi_endproc
 5845              	.LFE169:
 5847              	 .section .text.vTaskGetInfo,"ax",%progbits
 5848              	 .align 2
 5849              	 .global vTaskGetInfo
 5850              	 .thumb
 5851              	 .thumb_func
 5853              	vTaskGetInfo:
 5854              	.LFB172:
3412:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 5855              	 .loc 1 3412 0
 5856              	 .cfi_startproc
 5857              	 
 5858              	 
 5859              	.LVL568:
 5860 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 5861              	.LCFI59:
 5862              	 .cfi_def_cfa_offset 24
 5863              	 .cfi_offset 4,-24
 5864              	 .cfi_offset 5,-20
 5865              	 .cfi_offset 6,-16
 5866              	 .cfi_offset 7,-12
 5867              	 .cfi_offset 8,-8
 5868              	 .cfi_offset 14,-4
3412:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 5869              	 .loc 1 3412 0
 5870 0004 0C46     	 mov r4,r1
 5871 0006 9046     	 mov r8,r2
 5872 0008 1F46     	 mov r7,r3
3416:../Dave/Generated/FREERTOS/tasks.c **** 
 5873              	 .loc 1 3416 0
 5874 000a 0646     	 mov r6,r0
 5875 000c 0028     	 cmp r0,#0
 5876 000e 55D0     	 beq .L702
 5877 0010 0546     	 mov r5,r0
 5878              	.LVL569:
 5879              	.L675:
3429:../Dave/Generated/FREERTOS/tasks.c **** 			{
 5880              	 .loc 1 3429 0 discriminator 4
 5881 0012 207B     	 ldrb r0,[r4,#12]
3422:../Dave/Generated/FREERTOS/tasks.c **** 
 5882              	 .loc 1 3422 0 discriminator 4
 5883 0014 6B6C     	 ldr r3,[r5,#68]
3420:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5884              	 .loc 1 3420 0 discriminator 4
 5885 0016 E96A     	 ldr r1,[r5,#44]
 5886              	.LVL570:
3421:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5887              	 .loc 1 3421 0 discriminator 4
 5888 0018 2A6B     	 ldr r2,[r5,#48]
 5889              	.LVL571:
3422:../Dave/Generated/FREERTOS/tasks.c **** 
 5890              	 .loc 1 3422 0 discriminator 4
 5891 001a A360     	 str r3,[r4,#8]
3429:../Dave/Generated/FREERTOS/tasks.c **** 			{
 5892              	 .loc 1 3429 0 discriminator 4
 5893 001c 0328     	 cmp r0,#3
3419:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5894              	 .loc 1 3419 0 discriminator 4
 5895 001e 05F13403 	 add r3,r5,#52
3418:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5896              	 .loc 1 3418 0 discriminator 4
 5897 0022 2560     	 str r5,[r4]
3419:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5898              	 .loc 1 3419 0 discriminator 4
 5899 0024 6360     	 str r3,[r4,#4]
3420:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5900              	 .loc 1 3420 0 discriminator 4
 5901 0026 2161     	 str r1,[r4,#16]
3421:../Dave/Generated/FREERTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5902              	 .loc 1 3421 0 discriminator 4
 5903 0028 E261     	 str r2,[r4,#28]
3429:../Dave/Generated/FREERTOS/tasks.c **** 			{
 5904              	 .loc 1 3429 0 discriminator 4
 5905 002a 1CD0     	 beq .L703
 5906              	.L676:
3445:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5907              	 .loc 1 3445 0
 5908 002c EB6C     	 ldr r3,[r5,#76]
 5909 002e 6361     	 str r3,[r4,#20]
3459:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5910              	 .loc 1 3459 0
 5911 0030 0021     	 movs r1,#0
3466:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5912              	 .loc 1 3466 0
 5913 0032 052F     	 cmp r7,#5
3459:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5914              	 .loc 1 3459 0
 5915 0034 A161     	 str r1,[r4,#24]
3466:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5916              	 .loc 1 3466 0
 5917 0036 23D0     	 beq .L678
3468:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5918              	 .loc 1 3468 0
 5919 0038 2773     	 strb r7,[r4,#12]
 5920              	.L679:
3477:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5921              	 .loc 1 3477 0
 5922 003a B8F1000F 	 cmp r8,#0
 5923 003e 0ED0     	 beq .L684
3485:../Dave/Generated/FREERTOS/tasks.c **** 			}
 5924              	 .loc 1 3485 0
 5925 0040 286B     	 ldr r0,[r5,#48]
 5926              	.LVL572:
 5927              	.LBB599:
 5928              	.LBB600:
3537:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5929              	 .loc 1 3537 0
 5930 0042 0378     	 ldrb r3,[r0]
 5931 0044 A52B     	 cmp r3,#165
 5932 0046 19D1     	 bne .L695
 5933 0048 431C     	 adds r3,r0,#1
 5934              	.LVL573:
 5935              	.L686:
 5936 004a 191A     	 subs r1,r3,r0
 5937              	.LVL574:
 5938 004c 13F8012B 	 ldrb r2,[r3],#1
 5939              	.LVL575:
 5940 0050 A52A     	 cmp r2,#165
 5941 0052 FAD0     	 beq .L686
 5942 0054 C1F38F01 	 ubfx r1,r1,#2,#16
 5943              	.LVL576:
 5944              	.L685:
 5945              	.LBE600:
 5946              	.LBE599:
3485:../Dave/Generated/FREERTOS/tasks.c **** 			}
 5947              	 .loc 1 3485 0
 5948 0058 2184     	 strh r1,[r4,#32]
 5949 005a BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 5950              	.LVL577:
 5951              	.L684:
3491:../Dave/Generated/FREERTOS/tasks.c **** 		}
 5952              	 .loc 1 3491 0
 5953 005e A4F82080 	 strh r8,[r4,#32]
 5954 0062 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 5955              	.LVL578:
 5956              	.L703:
 5957              	.LBB602:
 5958              	.LBB603:
1950:../Dave/Generated/FREERTOS/tasks.c **** }
 5959              	 .loc 1 1950 0
 5960 0066 2249     	 ldr r1,.L706
 5961              	.LBE603:
 5962              	.LBE602:
3433:../Dave/Generated/FREERTOS/tasks.c **** 					{
 5963              	 .loc 1 3433 0
 5964 0068 AA6A     	 ldr r2,[r5,#40]
 5965              	.LBB605:
 5966              	.LBB604:
1950:../Dave/Generated/FREERTOS/tasks.c **** }
 5967              	 .loc 1 1950 0
 5968 006a 0B68     	 ldr r3,[r1]
 5969 006c 0133     	 adds r3,r3,#1
 5970 006e 0B60     	 str r3,[r1]
 5971              	.LBE604:
 5972              	.LBE605:
3433:../Dave/Generated/FREERTOS/tasks.c **** 					{
 5973              	 .loc 1 3433 0
 5974 0070 0AB1     	 cbz r2,.L677
3435:../Dave/Generated/FREERTOS/tasks.c **** 					}
 5975              	 .loc 1 3435 0
 5976 0072 0223     	 movs r3,#2
 5977 0074 2373     	 strb r3,[r4,#12]
 5978              	.L677:
3438:../Dave/Generated/FREERTOS/tasks.c **** 			}
 5979              	 .loc 1 3438 0
 5980 0076 FFF7FEFF 	 bl xTaskResumeAll
 5981              	.LVL579:
 5982 007a D7E7     	 b .L676
 5983              	.LVL580:
 5984              	.L695:
 5985              	.LBB606:
 5986              	.LBB601:
3537:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5987              	 .loc 1 3537 0
 5988 007c 0021     	 movs r1,#0
 5989 007e EBE7     	 b .L685
 5990              	.LVL581:
 5991              	.L678:
 5992              	.LBE601:
 5993              	.LBE606:
 5994              	.LBB607:
 5995              	.LBB608:
1275:../Dave/Generated/FREERTOS/tasks.c **** 
 5996              	 .loc 1 1275 0
 5997 0080 2EB3     	 cbz r6,.L704
1277:../Dave/Generated/FREERTOS/tasks.c **** 		{
 5998              	 .loc 1 1277 0
 5999 0082 1C4B     	 ldr r3,.L706+4
 6000 0084 1B68     	 ldr r3,[r3]
 6001 0086 9E42     	 cmp r6,r3
 6002 0088 16D0     	 beq .L682
1284:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6003              	 .loc 1 1284 0
 6004 008a FFF7FEFF 	 bl vPortEnterCritical
 6005              	.LVL582:
1286:../Dave/Generated/FREERTOS/tasks.c **** 			}
 6006              	 .loc 1 1286 0
 6007 008e 7769     	 ldr r7,[r6,#20]
 6008              	.LVL583:
1288:../Dave/Generated/FREERTOS/tasks.c **** 
 6009              	 .loc 1 1288 0
 6010 0090 FFF7FEFF 	 bl vPortExitCritical
 6011              	.LVL584:
1290:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6012              	 .loc 1 1290 0
 6013 0094 184B     	 ldr r3,.L706+8
 6014 0096 1B68     	 ldr r3,[r3]
 6015 0098 9F42     	 cmp r7,r3
 6016 009a 12D0     	 beq .L691
 6017 009c 174B     	 ldr r3,.L706+12
 6018 009e 1B68     	 ldr r3,[r3]
 6019 00a0 9F42     	 cmp r7,r3
 6020 00a2 0ED0     	 beq .L691
1298:../Dave/Generated/FREERTOS/tasks.c **** 				{
 6021              	 .loc 1 1298 0
 6022 00a4 164B     	 ldr r3,.L706+16
 6023 00a6 9F42     	 cmp r7,r3
 6024 00a8 1AD0     	 beq .L705
1315:../Dave/Generated/FREERTOS/tasks.c **** 				{
 6025              	 .loc 1 1315 0
 6026 00aa 164B     	 ldr r3,.L706+20
 6027 00ac 9F42     	 cmp r7,r3
 6028 00ae 0BD0     	 beq .L693
1328:../Dave/Generated/FREERTOS/tasks.c **** 			}
 6029              	 .loc 1 1328 0
 6030 00b0 002F     	 cmp r7,#0
 6031 00b2 0CBF     	 ite eq
 6032 00b4 0421     	 moveq r1,#4
 6033 00b6 0121     	 movne r1,#1
 6034              	.LVL585:
 6035              	.L682:
 6036              	.LBE608:
 6037              	.LBE607:
3472:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6038              	 .loc 1 3472 0
 6039 00b8 2173     	 strb r1,[r4,#12]
 6040 00ba BEE7     	 b .L679
 6041              	.LVL586:
 6042              	.L702:
3416:../Dave/Generated/FREERTOS/tasks.c **** 
 6043              	 .loc 1 3416 0 discriminator 1
 6044 00bc 0D4B     	 ldr r3,.L706+4
 6045              	.LVL587:
 6046 00be 1D68     	 ldr r5,[r3]
 6047              	.LVL588:
 6048 00c0 A7E7     	 b .L675
 6049              	.LVL589:
 6050              	.L691:
 6051              	.LBB616:
 6052              	.LBB613:
1294:../Dave/Generated/FREERTOS/tasks.c **** 			}
 6053              	 .loc 1 1294 0
 6054 00c2 0221     	 movs r1,#2
 6055              	.LVL590:
 6056              	.LBE613:
 6057              	.LBE616:
3472:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6058              	 .loc 1 3472 0
 6059 00c4 2173     	 strb r1,[r4,#12]
 6060 00c6 B8E7     	 b .L679
 6061              	.LVL591:
 6062              	.L693:
 6063              	.LBB617:
 6064              	.LBB614:
1320:../Dave/Generated/FREERTOS/tasks.c **** 				}
 6065              	 .loc 1 1320 0
 6066 00c8 0421     	 movs r1,#4
 6067              	.LVL592:
 6068              	.LBE614:
 6069              	.LBE617:
3472:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6070              	 .loc 1 3472 0
 6071 00ca 2173     	 strb r1,[r4,#12]
 6072 00cc B5E7     	 b .L679
 6073              	.LVL593:
 6074              	.L704:
 6075              	.LBB618:
 6076              	.LBB615:
 6077              	.LBB609:
 6078              	.LBB610:
 6079              	.LBB611:
 6080              	.LBB612:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 6081              	 .loc 2 240 0
 6082              	
 6083 00ce 4FF0FC03 	 mov r3,#252
 6084 00d2 83F31188 	 msr basepri,r3
 6085 00d6 BFF36F8F 	 isb 
 6086 00da BFF34F8F 	 dsb 
 6087              	
 6088              	
 6089              	.LVL594:
 6090              	 .thumb
 6091              	.L681:
 6092 00de FEE7     	 b .L681
 6093              	.LVL595:
 6094              	.L705:
 6095              	.LBE612:
 6096              	.LBE611:
 6097              	.LBE610:
 6098              	.LBE609:
1303:../Dave/Generated/FREERTOS/tasks.c **** 					{
 6099              	 .loc 1 1303 0
 6100 00e0 B36A     	 ldr r3,[r6,#40]
1309:../Dave/Generated/FREERTOS/tasks.c **** 					}
 6101              	 .loc 1 1309 0
 6102 00e2 002B     	 cmp r3,#0
 6103 00e4 0CBF     	 ite eq
 6104 00e6 0321     	 moveq r1,#3
 6105 00e8 0221     	 movne r1,#2
 6106              	.LVL596:
 6107              	.LBE615:
 6108              	.LBE618:
3472:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6109              	 .loc 1 3472 0
 6110 00ea 2173     	 strb r1,[r4,#12]
 6111 00ec A5E7     	 b .L679
 6112              	.L707:
 6113 00ee 00BF     	 .align 2
 6114              	.L706:
 6115 00f0 00000000 	 .word .LANCHOR16
 6116 00f4 00000000 	 .word .LANCHOR1
 6117 00f8 00000000 	 .word .LANCHOR5
 6118 00fc 00000000 	 .word .LANCHOR4
 6119 0100 00000000 	 .word .LANCHOR3
 6120 0104 00000000 	 .word .LANCHOR12
 6121              	 .cfi_endproc
 6122              	.LFE172:
 6124              	 .section .text.uxTaskGetStackHighWaterMark,"ax",%progbits
 6125              	 .align 2
 6126              	 .global uxTaskGetStackHighWaterMark
 6127              	 .thumb
 6128              	 .thumb_func
 6130              	uxTaskGetStackHighWaterMark:
 6131              	.LFB175:
3554:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 6132              	 .loc 1 3554 0
 6133              	 .cfi_startproc
 6134              	 
 6135              	 
 6136              	 
 6137              	.LVL597:
3559:../Dave/Generated/FREERTOS/tasks.c **** 
 6138              	 .loc 1 3559 0
 6139 0000 60B1     	 cbz r0,.L715
 6140              	.LVL598:
 6141              	.L709:
3563:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6142              	 .loc 1 3563 0 discriminator 4
 6143 0002 016B     	 ldr r1,[r0,#48]
 6144              	.LVL599:
 6145              	.LBB619:
 6146              	.LBB620:
3537:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6147              	 .loc 1 3537 0 discriminator 4
 6148 0004 0B78     	 ldrb r3,[r1]
 6149 0006 A52B     	 cmp r3,#165
 6150 0008 0BD1     	 bne .L712
 6151 000a 4B1C     	 adds r3,r1,#1
 6152              	.LVL600:
 6153              	.L711:
 6154 000c 581A     	 subs r0,r3,r1
 6155              	.LVL601:
3537:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6156              	 .loc 1 3537 0 is_stmt 0
 6157 000e 13F8012B 	 ldrb r2,[r3],#1
 6158              	.LVL602:
 6159 0012 A52A     	 cmp r2,#165
 6160 0014 FAD0     	 beq .L711
 6161 0016 C0F38F00 	 ubfx r0,r0,#2,#16
 6162              	.LVL603:
 6163 001a 7047     	 bx lr
 6164              	.LVL604:
 6165              	.L715:
 6166              	.LBE620:
 6167              	.LBE619:
3559:../Dave/Generated/FREERTOS/tasks.c **** 
 6168              	 .loc 1 3559 0 is_stmt 1 discriminator 1
 6169 001c 024B     	 ldr r3,.L716
 6170 001e 1868     	 ldr r0,[r3]
 6171              	.LVL605:
 6172 0020 EFE7     	 b .L709
 6173              	.LVL606:
 6174              	.L712:
 6175              	.LBB622:
 6176              	.LBB621:
3537:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6177              	 .loc 1 3537 0
 6178 0022 0020     	 movs r0,#0
 6179              	.LVL607:
 6180              	.LBE621:
 6181              	.LBE622:
3574:../Dave/Generated/FREERTOS/tasks.c **** 
 6182              	 .loc 1 3574 0
 6183 0024 7047     	 bx lr
 6184              	.L717:
 6185 0026 00BF     	 .align 2
 6186              	.L716:
 6187 0028 00000000 	 .word .LANCHOR1
 6188              	 .cfi_endproc
 6189              	.LFE175:
 6191              	 .section .text.xTaskGetCurrentTaskHandle,"ax",%progbits
 6192              	 .align 2
 6193              	 .global xTaskGetCurrentTaskHandle
 6194              	 .thumb
 6195              	 .thumb_func
 6197              	xTaskGetCurrentTaskHandle:
 6198              	.LFB178:
3662:../Dave/Generated/FREERTOS/tasks.c **** 	TaskHandle_t xReturn;
 6199              	 .loc 1 3662 0
 6200              	 .cfi_startproc
 6201              	 
 6202              	 
 6203              	 
3668:../Dave/Generated/FREERTOS/tasks.c **** 
 6204              	 .loc 1 3668 0
 6205 0000 014B     	 ldr r3,.L719
 6206 0002 1868     	 ldr r0,[r3]
 6207              	.LVL608:
3671:../Dave/Generated/FREERTOS/tasks.c **** 
 6208              	 .loc 1 3671 0
 6209 0004 7047     	 bx lr
 6210              	.L720:
 6211 0006 00BF     	 .align 2
 6212              	.L719:
 6213 0008 00000000 	 .word .LANCHOR1
 6214              	 .cfi_endproc
 6215              	.LFE178:
 6217              	 .section .text.xTaskGetSchedulerState,"ax",%progbits
 6218              	 .align 2
 6219              	 .global xTaskGetSchedulerState
 6220              	 .thumb
 6221              	 .thumb_func
 6223              	xTaskGetSchedulerState:
 6224              	.LFB179:
3679:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
 6225              	 .loc 1 3679 0
 6226              	 .cfi_startproc
 6227              	 
 6228              	 
 6229              	 
3682:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6230              	 .loc 1 3682 0
 6231 0000 054B     	 ldr r3,.L725
 6232 0002 1B68     	 ldr r3,[r3]
 6233 0004 33B1     	 cbz r3,.L723
3688:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6234              	 .loc 1 3688 0
 6235 0006 054B     	 ldr r3,.L725+4
 6236 0008 1B68     	 ldr r3,[r3]
 6237 000a 002B     	 cmp r3,#0
3694:../Dave/Generated/FREERTOS/tasks.c **** 			}
 6238              	 .loc 1 3694 0
 6239 000c 0CBF     	 ite eq
 6240 000e 0220     	 moveq r0,#2
 6241 0010 0020     	 movne r0,#0
 6242 0012 7047     	 bx lr
 6243              	.L723:
3684:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6244              	 .loc 1 3684 0
 6245 0014 0120     	 movs r0,#1
 6246              	.LVL609:
3699:../Dave/Generated/FREERTOS/tasks.c **** 
 6247              	 .loc 1 3699 0
 6248 0016 7047     	 bx lr
 6249              	.L726:
 6250              	 .align 2
 6251              	.L725:
 6252 0018 00000000 	 .word .LANCHOR13
 6253 001c 00000000 	 .word .LANCHOR16
 6254              	 .cfi_endproc
 6255              	.LFE179:
 6257              	 .section .text.vTaskPriorityInherit,"ax",%progbits
 6258              	 .align 2
 6259              	 .global vTaskPriorityInherit
 6260              	 .thumb
 6261              	 .thumb_func
 6263              	vTaskPriorityInherit:
 6264              	.LFB180:
3707:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 6265              	 .loc 1 3707 0
 6266              	 .cfi_startproc
 6267              	 
 6268              	 
 6269              	.LVL610:
3712:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6270              	 .loc 1 3712 0
 6271 0000 0028     	 cmp r0,#0
 6272 0002 42D0     	 beq .L741
3707:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 6273              	 .loc 1 3707 0
 6274 0004 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 6275              	.LCFI60:
 6276              	 .cfi_def_cfa_offset 24
 6277              	 .cfi_offset 4,-24
 6278              	 .cfi_offset 5,-20
 6279              	 .cfi_offset 6,-16
 6280              	 .cfi_offset 7,-12
 6281              	 .cfi_offset 8,-8
 6282              	 .cfi_offset 14,-4
3717:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6283              	 .loc 1 3717 0
 6284 0008 214C     	 ldr r4,.L745
 6285 000a C36A     	 ldr r3,[r0,#44]
 6286 000c 2268     	 ldr r2,[r4]
 6287 000e D26A     	 ldr r2,[r2,#44]
 6288 0010 9342     	 cmp r3,r2
 6289 0012 12D2     	 bcs .L727
3722:../Dave/Generated/FREERTOS/tasks.c **** 				{
 6290              	 .loc 1 3722 0
 6291 0014 8269     	 ldr r2,[r0,#24]
 6292 0016 002A     	 cmp r2,#0
 6293 0018 04DB     	 blt .L729
3724:../Dave/Generated/FREERTOS/tasks.c **** 				}
 6294              	 .loc 1 3724 0
 6295 001a 2268     	 ldr r2,[r4]
 6296 001c D26A     	 ldr r2,[r2,#44]
 6297 001e C2F10502 	 rsb r2,r2,#5
 6298 0022 8261     	 str r2,[r0,#24]
 6299              	.L729:
3733:../Dave/Generated/FREERTOS/tasks.c **** 				{
 6300              	 .loc 1 3733 0
 6301 0024 1B4D     	 ldr r5,.L745+4
 6302 0026 4269     	 ldr r2,[r0,#20]
 6303 0028 03EB8303 	 add r3,r3,r3,lsl#2
 6304 002c 05EB8303 	 add r3,r5,r3,lsl#2
 6305 0030 9A42     	 cmp r2,r3
 6306 0032 04D0     	 beq .L743
3751:../Dave/Generated/FREERTOS/tasks.c **** 				}
 6307              	 .loc 1 3751 0
 6308 0034 2368     	 ldr r3,[r4]
 6309 0036 DB6A     	 ldr r3,[r3,#44]
 6310 0038 C362     	 str r3,[r0,#44]
 6311              	.L727:
 6312 003a BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 6313              	.L743:
3735:../Dave/Generated/FREERTOS/tasks.c **** 					{
 6314              	 .loc 1 3735 0
 6315 003e 00F10408 	 add r8,r0,#4
 6316 0042 0746     	 mov r7,r0
 6317 0044 4046     	 mov r0,r8
 6318              	.LVL611:
 6319 0046 FFF7FEFF 	 bl uxListRemove
 6320              	.LVL612:
 6321 004a F8B9     	 cbnz r0,.L744
3737:../Dave/Generated/FREERTOS/tasks.c **** 					}
 6322              	 .loc 1 3737 0
 6323 004c FB6A     	 ldr r3,[r7,#44]
 6324 004e 124E     	 ldr r6,.L745+8
 6325 0050 03EB8302 	 add r2,r3,r3,lsl#2
 6326 0054 55F82220 	 ldr r2,[r5,r2,lsl#2]
 6327 0058 32B9     	 cbnz r2,.L732
3737:../Dave/Generated/FREERTOS/tasks.c **** 					}
 6328              	 .loc 1 3737 0 is_stmt 0 discriminator 1
 6329 005a 3268     	 ldr r2,[r6]
 6330 005c 0121     	 movs r1,#1
 6331 005e 01FA03F3 	 lsl r3,r1,r3
 6332 0062 22EA0303 	 bic r3,r2,r3
 6333 0066 3360     	 str r3,[r6]
 6334              	.L732:
3745:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6335              	 .loc 1 3745 0 is_stmt 1
 6336 0068 2368     	 ldr r3,[r4]
3746:../Dave/Generated/FREERTOS/tasks.c **** 				}
 6337              	 .loc 1 3746 0
 6338 006a 3268     	 ldr r2,[r6]
3745:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6339              	 .loc 1 3745 0
 6340 006c D86A     	 ldr r0,[r3,#44]
 6341 006e F862     	 str r0,[r7,#44]
3746:../Dave/Generated/FREERTOS/tasks.c **** 				}
 6342              	 .loc 1 3746 0
 6343 0070 0123     	 movs r3,#1
 6344 0072 8340     	 lsls r3,r3,r0
 6345 0074 1343     	 orrs r3,r3,r2
 6346 0076 00EB8000 	 add r0,r0,r0,lsl#2
 6347 007a 4146     	 mov r1,r8
 6348 007c 05EB8000 	 add r0,r5,r0,lsl#2
 6349 0080 3360     	 str r3,[r6]
3765:../Dave/Generated/FREERTOS/tasks.c **** 
 6350              	 .loc 1 3765 0
 6351 0082 BDE8F041 	 pop {r4,r5,r6,r7,r8,lr}
 6352              	.LCFI61:
 6353              	 .cfi_restore 14
 6354              	 .cfi_restore 8
 6355              	 .cfi_restore 7
 6356              	 .cfi_restore 6
 6357              	 .cfi_restore 5
 6358              	 .cfi_restore 4
 6359              	 .cfi_def_cfa_offset 0
 6360              	.LVL613:
3746:../Dave/Generated/FREERTOS/tasks.c **** 				}
 6361              	 .loc 1 3746 0
 6362 0086 FFF7FEBF 	 b vListInsertEnd
 6363              	.LVL614:
 6364              	.L741:
 6365 008a 7047     	 bx lr
 6366              	.LVL615:
 6367              	.L744:
 6368              	.LCFI62:
 6369              	 .cfi_def_cfa_offset 24
 6370              	 .cfi_offset 4,-24
 6371              	 .cfi_offset 5,-20
 6372              	 .cfi_offset 6,-16
 6373              	 .cfi_offset 7,-12
 6374              	 .cfi_offset 8,-8
 6375              	 .cfi_offset 14,-4
 6376 008c 024E     	 ldr r6,.L745+8
 6377 008e EBE7     	 b .L732
 6378              	.L746:
 6379              	 .align 2
 6380              	.L745:
 6381 0090 00000000 	 .word .LANCHOR1
 6382 0094 00000000 	 .word .LANCHOR8
 6383 0098 00000000 	 .word .LANCHOR2
 6384              	 .cfi_endproc
 6385              	.LFE180:
 6387              	 .section .text.xTaskPriorityDisinherit,"ax",%progbits
 6388              	 .align 2
 6389              	 .global xTaskPriorityDisinherit
 6390              	 .thumb
 6391              	 .thumb_func
 6393              	xTaskPriorityDisinherit:
 6394              	.LFB181:
3773:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 6395              	 .loc 1 3773 0
 6396              	 .cfi_startproc
 6397              	 
 6398              	 
 6399              	.LVL616:
3777:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6400              	 .loc 1 3777 0
 6401 0000 08B3     	 cbz r0,.L763
3773:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 6402              	 .loc 1 3773 0
 6403 0002 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 6404              	.LCFI63:
 6405              	 .cfi_def_cfa_offset 24
 6406              	 .cfi_offset 3,-24
 6407              	 .cfi_offset 4,-20
 6408              	 .cfi_offset 5,-16
 6409              	 .cfi_offset 6,-12
 6410              	 .cfi_offset 7,-8
 6411              	 .cfi_offset 14,-4
3783:../Dave/Generated/FREERTOS/tasks.c **** 
 6412              	 .loc 1 3783 0
 6413 0004 284B     	 ldr r3,.L765
 6414 0006 1B68     	 ldr r3,[r3]
 6415 0008 9842     	 cmp r0,r3
 6416 000a 08D0     	 beq .L750
 6417              	.LBB623:
 6418              	.LBB624:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 6419              	 .loc 2 240 0
 6420              	
 6421 000c 4FF0FC03 	 mov r3,#252
 6422 0010 83F31188 	 msr basepri,r3
 6423 0014 BFF36F8F 	 isb 
 6424 0018 BFF34F8F 	 dsb 
 6425              	
 6426              	
 6427              	.LVL617:
 6428              	 .thumb
 6429              	.L751:
 6430              	.LBE624:
 6431              	.LBE623:
3783:../Dave/Generated/FREERTOS/tasks.c **** 
 6432              	 .loc 1 3783 0 discriminator 1
 6433 001c FEE7     	 b .L751
 6434              	.L750:
3785:../Dave/Generated/FREERTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6435              	 .loc 1 3785 0
 6436 001e 036D     	 ldr r3,[r0,#80]
 6437 0020 43B9     	 cbnz r3,.L752
 6438              	.LBB625:
 6439              	.LBB626:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 6440              	 .loc 2 240 0
 6441              	
 6442 0022 4FF0FC03 	 mov r3,#252
 6443 0026 83F31188 	 msr basepri,r3
 6444 002a BFF36F8F 	 isb 
 6445 002e BFF34F8F 	 dsb 
 6446              	
 6447              	
 6448              	.LVL618:
 6449              	 .thumb
 6450              	.L753:
 6451              	.LBE626:
 6452              	.LBE625:
3785:../Dave/Generated/FREERTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6453              	 .loc 1 3785 0 discriminator 2
 6454 0032 FEE7     	 b .L753
 6455              	.L752:
3790:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6456              	 .loc 1 3790 0
 6457 0034 C16A     	 ldr r1,[r0,#44]
 6458 0036 C26C     	 ldr r2,[r0,#76]
3786:../Dave/Generated/FREERTOS/tasks.c **** 
 6459              	 .loc 1 3786 0
 6460 0038 013B     	 subs r3,r3,#1
3790:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6461              	 .loc 1 3790 0
 6462 003a 9142     	 cmp r1,r2
3786:../Dave/Generated/FREERTOS/tasks.c **** 
 6463              	 .loc 1 3786 0
 6464 003c 0365     	 str r3,[r0,#80]
3790:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6465              	 .loc 1 3790 0
 6466 003e 00D0     	 beq .L754
3793:../Dave/Generated/FREERTOS/tasks.c **** 				{
 6467              	 .loc 1 3793 0
 6468 0040 1BB1     	 cbz r3,.L764
 6469              	.L754:
3775:../Dave/Generated/FREERTOS/tasks.c **** 
 6470              	 .loc 1 3775 0
 6471 0042 0020     	 movs r0,#0
 6472              	.LVL619:
 6473 0044 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 6474              	.LVL620:
 6475              	.L763:
 6476              	.LCFI64:
 6477              	 .cfi_def_cfa_offset 0
 6478              	 .cfi_restore 3
 6479              	 .cfi_restore 4
 6480              	 .cfi_restore 5
 6481              	 .cfi_restore 6
 6482              	 .cfi_restore 7
 6483              	 .cfi_restore 14
 6484 0046 0020     	 movs r0,#0
 6485              	.LVL621:
3846:../Dave/Generated/FREERTOS/tasks.c **** 
 6486              	 .loc 1 3846 0
 6487 0048 7047     	 bx lr
 6488              	.LVL622:
 6489              	.L764:
 6490              	.LCFI65:
 6491              	 .cfi_def_cfa_offset 24
 6492              	 .cfi_offset 3,-24
 6493              	 .cfi_offset 4,-20
 6494              	 .cfi_offset 5,-16
 6495              	 .cfi_offset 6,-12
 6496              	 .cfi_offset 7,-8
 6497              	 .cfi_offset 14,-4
3800:../Dave/Generated/FREERTOS/tasks.c **** 					{
 6498              	 .loc 1 3800 0
 6499 004a 071D     	 adds r7,r0,#4
 6500 004c 0446     	 mov r4,r0
 6501 004e 3846     	 mov r0,r7
 6502              	.LVL623:
 6503 0050 FFF7FEFF 	 bl uxListRemove
 6504              	.LVL624:
 6505 0054 B8B1     	 cbz r0,.L758
 6506 0056 1548     	 ldr r0,.L765+4
 6507 0058 154A     	 ldr r2,.L765+8
 6508              	.L755:
3812:../Dave/Generated/FREERTOS/tasks.c **** 
 6509              	 .loc 1 3812 0
 6510 005a E36C     	 ldr r3,[r4,#76]
3818:../Dave/Generated/FREERTOS/tasks.c **** 
 6511              	 .loc 1 3818 0
 6512 005c 1668     	 ldr r6,[r2]
3812:../Dave/Generated/FREERTOS/tasks.c **** 
 6513              	 .loc 1 3812 0
 6514 005e E362     	 str r3,[r4,#44]
3818:../Dave/Generated/FREERTOS/tasks.c **** 
 6515              	 .loc 1 3818 0
 6516 0060 0125     	 movs r5,#1
 6517 0062 05FA03FC 	 lsl ip,r5,r3
3817:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6518              	 .loc 1 3817 0
 6519 0066 C3F1050E 	 rsb lr,r3,#5
3818:../Dave/Generated/FREERTOS/tasks.c **** 
 6520              	 .loc 1 3818 0
 6521 006a 03EB8303 	 add r3,r3,r3,lsl#2
 6522 006e 4CEA0606 	 orr r6,ip,r6
 6523 0072 00EB8300 	 add r0,r0,r3,lsl#2
 6524 0076 3946     	 mov r1,r7
3817:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6525              	 .loc 1 3817 0
 6526 0078 C4F818E0 	 str lr,[r4,#24]
3818:../Dave/Generated/FREERTOS/tasks.c **** 
 6527              	 .loc 1 3818 0
 6528 007c 1660     	 str r6,[r2]
 6529 007e FFF7FEFF 	 bl vListInsertEnd
 6530              	.LVL625:
3828:../Dave/Generated/FREERTOS/tasks.c **** 				}
 6531              	 .loc 1 3828 0
 6532 0082 2846     	 mov r0,r5
 6533              	.LVL626:
3846:../Dave/Generated/FREERTOS/tasks.c **** 
 6534              	 .loc 1 3846 0
 6535 0084 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 6536              	.LVL627:
 6537              	.L758:
3802:../Dave/Generated/FREERTOS/tasks.c **** 					}
 6538              	 .loc 1 3802 0
 6539 0086 E16A     	 ldr r1,[r4,#44]
 6540 0088 0848     	 ldr r0,.L765+4
 6541 008a 094A     	 ldr r2,.L765+8
 6542 008c 01EB8103 	 add r3,r1,r1,lsl#2
 6543 0090 50F82330 	 ldr r3,[r0,r3,lsl#2]
 6544 0094 002B     	 cmp r3,#0
 6545 0096 E0D1     	 bne .L755
3802:../Dave/Generated/FREERTOS/tasks.c **** 					}
 6546              	 .loc 1 3802 0 is_stmt 0 discriminator 1
 6547 0098 1368     	 ldr r3,[r2]
 6548 009a 0125     	 movs r5,#1
 6549 009c 8D40     	 lsls r5,r5,r1
 6550 009e 23EA0503 	 bic r3,r3,r5
 6551 00a2 1360     	 str r3,[r2]
 6552 00a4 D9E7     	 b .L755
 6553              	.L766:
 6554 00a6 00BF     	 .align 2
 6555              	.L765:
 6556 00a8 00000000 	 .word .LANCHOR1
 6557 00ac 00000000 	 .word .LANCHOR8
 6558 00b0 00000000 	 .word .LANCHOR2
 6559              	 .cfi_endproc
 6560              	.LFE181:
 6562              	 .section .text.vTaskList,"ax",%progbits
 6563              	 .align 2
 6564              	 .global vTaskList
 6565              	 .thumb
 6566              	 .thumb_func
 6568              	vTaskList:
 6569              	.LFB183:
3943:../Dave/Generated/FREERTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 6570              	 .loc 1 3943 0 is_stmt 1
 6571              	 .cfi_startproc
 6572              	 
 6573              	 
 6574              	.LVL628:
 6575 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 6576              	.LCFI66:
 6577              	 .cfi_def_cfa_offset 24
 6578              	 .cfi_offset 4,-24
 6579              	 .cfi_offset 5,-20
 6580              	 .cfi_offset 6,-16
 6581              	 .cfi_offset 7,-12
 6582              	 .cfi_offset 8,-8
 6583              	 .cfi_offset 14,-4
3978:../Dave/Generated/FREERTOS/tasks.c **** 
 6584              	 .loc 1 3978 0
 6585 0004 534B     	 ldr r3,.L819
3943:../Dave/Generated/FREERTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 6586              	 .loc 1 3943 0
 6587 0006 84B0     	 sub sp,sp,#16
 6588              	.LCFI67:
 6589              	 .cfi_def_cfa_offset 40
3978:../Dave/Generated/FREERTOS/tasks.c **** 
 6590              	 .loc 1 3978 0
 6591 0008 1A68     	 ldr r2,[r3]
 6592 000a 0292     	 str r2,[sp,#8]
3983:../Dave/Generated/FREERTOS/tasks.c **** 
 6593              	 .loc 1 3983 0
 6594 000c 1B68     	 ldr r3,[r3]
3943:../Dave/Generated/FREERTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 6595              	 .loc 1 3943 0
 6596 000e 0446     	 mov r4,r0
3974:../Dave/Generated/FREERTOS/tasks.c **** 
 6597              	 .loc 1 3974 0
 6598 0010 0025     	 movs r5,#0
3983:../Dave/Generated/FREERTOS/tasks.c **** 
 6599              	 .loc 1 3983 0
 6600 0012 03EBC300 	 add r0,r3,r3,lsl#3
 6601              	.LVL629:
 6602 0016 8000     	 lsls r0,r0,#2
3974:../Dave/Generated/FREERTOS/tasks.c **** 
 6603              	 .loc 1 3974 0
 6604 0018 2570     	 strb r5,[r4]
3983:../Dave/Generated/FREERTOS/tasks.c **** 
 6605              	 .loc 1 3983 0
 6606 001a FFF7FEFF 	 bl pvPortMalloc
 6607              	.LVL630:
3985:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6608              	 .loc 1 3985 0
 6609 001e 0028     	 cmp r0,#0
 6610 0020 00F09480 	 beq .L767
3988:../Dave/Generated/FREERTOS/tasks.c **** 
 6611              	 .loc 1 3988 0
 6612 0024 2A46     	 mov r2,r5
 6613 0026 0299     	 ldr r1,[sp,#8]
 6614 0028 0746     	 mov r7,r0
 6615 002a FFF7FEFF 	 bl uxTaskGetSystemState
 6616              	.LVL631:
 6617 002e 0290     	 str r0,[sp,#8]
3991:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6618              	 .loc 1 3991 0
 6619 0030 0395     	 str r5,[sp,#12]
 6620 0032 039B     	 ldr r3,[sp,#12]
 6621 0034 029A     	 ldr r2,[sp,#8]
 6622 0036 9A42     	 cmp r2,r3
 6623 0038 40F28580 	 bls .L775
 6624 003c 464E     	 ldr r6,.L819+4
 6625              	.L774:
3993:../Dave/Generated/FREERTOS/tasks.c **** 				{
 6626              	 .loc 1 3993 0
 6627 003e 039B     	 ldr r3,[sp,#12]
 6628 0040 03EBC303 	 add r3,r3,r3,lsl#3
 6629 0044 07EB8303 	 add r3,r7,r3,lsl#2
 6630              	.LBB629:
 6631              	.LBB630:
3921:../Dave/Generated/FREERTOS/tasks.c **** 
 6632              	 .loc 1 3921 0
 6633 0048 2046     	 mov r0,r4
 6634 004a 1B7B     	 ldrb r3,[r3,#12]
 6635 004c 013B     	 subs r3,r3,#1
 6636 004e DBB2     	 uxtb r3,r3
 6637 0050 032B     	 cmp r3,#3
 6638 0052 98BF     	 it ls
 6639 0054 16F80380 	 ldrbls r8,[r6,r3]
 6640              	.LBE630:
 6641              	.LBE629:
4015:../Dave/Generated/FREERTOS/tasks.c **** 
 6642              	 .loc 1 4015 0
 6643 0058 039B     	 ldr r3,[sp,#12]
 6644              	.LVL632:
 6645 005a 03EBC303 	 add r3,r3,r3,lsl#3
 6646              	.LVL633:
 6647 005e 07EB8303 	 add r3,r7,r3,lsl#2
3993:../Dave/Generated/FREERTOS/tasks.c **** 				{
 6648              	 .loc 1 3993 0
 6649 0062 88BF     	 it hi
 6650 0064 4FF00008 	 movhi r8,#0
 6651              	.LBB634:
 6652              	.LBB631:
3921:../Dave/Generated/FREERTOS/tasks.c **** 
 6653              	 .loc 1 3921 0
 6654 0068 5968     	 ldr r1,[r3,#4]
 6655 006a FFF7FEFF 	 bl stpcpy
 6656              	.LVL634:
 6657 006e 011B     	 subs r1,r0,r4
 6658              	.LVL635:
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6659              	 .loc 1 3925 0
 6660 0070 0E29     	 cmp r1,#14
 6661 0072 3FD8     	 bhi .L771
 6662 0074 4A1C     	 adds r2,r1,#1
 6663              	.LVL636:
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6664              	 .loc 1 3927 0
 6665 0076 2023     	 movs r3,#32
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6666              	 .loc 1 3925 0
 6667 0078 0F2A     	 cmp r2,#15
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6668              	 .loc 1 3927 0
 6669 007a 0370     	 strb r3,[r0]
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6670              	 .loc 1 3925 0
 6671 007c 39D0     	 beq .L818
 6672 007e 881C     	 adds r0,r1,#2
 6673              	.LVL637:
 6674 0080 0F28     	 cmp r0,#15
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6675              	 .loc 1 3927 0
 6676 0082 A354     	 strb r3,[r4,r2]
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6677              	 .loc 1 3925 0
 6678 0084 35D0     	 beq .L818
 6679 0086 CA1C     	 adds r2,r1,#3
 6680              	.LVL638:
 6681 0088 0F2A     	 cmp r2,#15
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6682              	 .loc 1 3927 0
 6683 008a 2354     	 strb r3,[r4,r0]
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6684              	 .loc 1 3925 0
 6685 008c 31D0     	 beq .L818
 6686 008e 081D     	 adds r0,r1,#4
 6687              	.LVL639:
 6688 0090 0F28     	 cmp r0,#15
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6689              	 .loc 1 3927 0
 6690 0092 A354     	 strb r3,[r4,r2]
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6691              	 .loc 1 3925 0
 6692 0094 2DD0     	 beq .L818
 6693 0096 4A1D     	 adds r2,r1,#5
 6694              	.LVL640:
 6695 0098 0F2A     	 cmp r2,#15
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6696              	 .loc 1 3927 0
 6697 009a 2354     	 strb r3,[r4,r0]
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6698              	 .loc 1 3925 0
 6699 009c 29D0     	 beq .L818
 6700 009e 881D     	 adds r0,r1,#6
 6701              	.LVL641:
 6702 00a0 0F28     	 cmp r0,#15
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6703              	 .loc 1 3927 0
 6704 00a2 A354     	 strb r3,[r4,r2]
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6705              	 .loc 1 3925 0
 6706 00a4 25D0     	 beq .L818
 6707 00a6 CA1D     	 adds r2,r1,#7
 6708              	.LVL642:
 6709 00a8 0F2A     	 cmp r2,#15
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6710              	 .loc 1 3927 0
 6711 00aa 2354     	 strb r3,[r4,r0]
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6712              	 .loc 1 3925 0
 6713 00ac 21D0     	 beq .L818
 6714 00ae 01F10800 	 add r0,r1,#8
 6715              	.LVL643:
 6716 00b2 0F28     	 cmp r0,#15
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6717              	 .loc 1 3927 0
 6718 00b4 A354     	 strb r3,[r4,r2]
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6719              	 .loc 1 3925 0
 6720 00b6 1CD0     	 beq .L818
 6721 00b8 01F10902 	 add r2,r1,#9
 6722              	.LVL644:
 6723 00bc 0F2A     	 cmp r2,#15
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6724              	 .loc 1 3927 0
 6725 00be 2354     	 strb r3,[r4,r0]
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6726              	 .loc 1 3925 0
 6727 00c0 17D0     	 beq .L818
 6728 00c2 01F10A00 	 add r0,r1,#10
 6729              	.LVL645:
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6730              	 .loc 1 3927 0
 6731 00c6 2023     	 movs r3,#32
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6732              	 .loc 1 3925 0
 6733 00c8 0F28     	 cmp r0,#15
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6734              	 .loc 1 3927 0
 6735 00ca A354     	 strb r3,[r4,r2]
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6736              	 .loc 1 3925 0
 6737 00cc 11D0     	 beq .L818
 6738 00ce 01F10B02 	 add r2,r1,#11
 6739              	.LVL646:
 6740 00d2 0F2A     	 cmp r2,#15
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6741              	 .loc 1 3927 0
 6742 00d4 2354     	 strb r3,[r4,r0]
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6743              	 .loc 1 3925 0
 6744 00d6 0CD0     	 beq .L818
 6745 00d8 01F10C00 	 add r0,r1,#12
 6746              	.LVL647:
 6747 00dc 0F28     	 cmp r0,#15
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6748              	 .loc 1 3927 0
 6749 00de A354     	 strb r3,[r4,r2]
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6750              	 .loc 1 3925 0
 6751 00e0 07D0     	 beq .L818
 6752 00e2 01F10D02 	 add r2,r1,#13
 6753              	.LVL648:
 6754 00e6 0F2A     	 cmp r2,#15
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6755              	 .loc 1 3927 0
 6756 00e8 2354     	 strb r3,[r4,r0]
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6757              	 .loc 1 3925 0
 6758 00ea 02D0     	 beq .L818
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6759              	 .loc 1 3927 0
 6760 00ec A354     	 strb r3,[r4,r2]
 6761              	.LVL649:
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6762              	 .loc 1 3925 0
 6763 00ee 01B9     	 cbnz r1,.L818
3927:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6764              	 .loc 1 3927 0
 6765 00f0 A373     	 strb r3,[r4,#14]
 6766              	.LVL650:
 6767              	.L818:
3925:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6768              	 .loc 1 3925 0
 6769 00f2 0F21     	 movs r1,#15
 6770              	.LVL651:
 6771              	.L771:
 6772              	.LBE631:
 6773              	.LBE634:
4018:../Dave/Generated/FREERTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
 6774              	 .loc 1 4018 0
 6775 00f4 0398     	 ldr r0,[sp,#12]
 6776 00f6 039A     	 ldr r2,[sp,#12]
 6777 00f8 039B     	 ldr r3,[sp,#12]
 6778              	.LBB635:
 6779              	.LBB632:
3931:../Dave/Generated/FREERTOS/tasks.c **** 
 6780              	 .loc 1 3931 0
 6781 00fa 6554     	 strb r5,[r4,r1]
 6782              	.LVL652:
 6783              	.LBE632:
 6784              	.LBE635:
4018:../Dave/Generated/FREERTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
 6785              	 .loc 1 4018 0
 6786 00fc 02EBC202 	 add r2,r2,r2,lsl#3
 6787 0100 00EBC000 	 add r0,r0,r0,lsl#3
 6788 0104 07EB820E 	 add lr,r7,r2,lsl#2
 6789 0108 07EB8002 	 add r2,r7,r0,lsl#2
 6790 010c 03EBC300 	 add r0,r3,r3,lsl#3
 6791 0110 BEF820E0 	 ldrh lr,[lr,#32]
 6792 0114 1369     	 ldr r3,[r2,#16]
 6793 0116 CDF800E0 	 str lr,[sp]
 6794 011a 07EB8000 	 add r0,r7,r0,lsl#2
 6795              	.LBB636:
 6796              	.LBB633:
3931:../Dave/Generated/FREERTOS/tasks.c **** 
 6797              	 .loc 1 3931 0
 6798 011e 0C44     	 add r4,r4,r1
 6799              	.LVL653:
 6800              	.LBE633:
 6801              	.LBE636:
4018:../Dave/Generated/FREERTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
 6802              	 .loc 1 4018 0
 6803 0120 8268     	 ldr r2,[r0,#8]
 6804 0122 0192     	 str r2,[sp,#4]
 6805 0124 2046     	 mov r0,r4
 6806 0126 4246     	 mov r2,r8
 6807 0128 0C49     	 ldr r1,.L819+8
 6808 012a FFF7FEFF 	 bl sprintf
 6809              	.LVL654:
4019:../Dave/Generated/FREERTOS/tasks.c **** 			}
 6810              	 .loc 1 4019 0
 6811 012e 2046     	 mov r0,r4
 6812 0130 FFF7FEFF 	 bl strlen
 6813              	.LVL655:
3991:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6814              	 .loc 1 3991 0
 6815 0134 039B     	 ldr r3,[sp,#12]
 6816 0136 0133     	 adds r3,r3,#1
 6817 0138 0393     	 str r3,[sp,#12]
 6818 013a 039A     	 ldr r2,[sp,#12]
 6819 013c 029B     	 ldr r3,[sp,#8]
 6820 013e 9A42     	 cmp r2,r3
4019:../Dave/Generated/FREERTOS/tasks.c **** 			}
 6821              	 .loc 1 4019 0
 6822 0140 0444     	 add r4,r4,r0
 6823              	.LVL656:
3991:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6824              	 .loc 1 3991 0
 6825 0142 FFF47CAF 	 bcc .L774
 6826              	.L775:
4024:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6827              	 .loc 1 4024 0
 6828 0146 3846     	 mov r0,r7
 6829 0148 FFF7FEFF 	 bl vPortFree
 6830              	.LVL657:
 6831              	.L767:
4030:../Dave/Generated/FREERTOS/tasks.c **** 
 6832              	 .loc 1 4030 0
 6833 014c 04B0     	 add sp,sp,#16
 6834              	.LCFI68:
 6835              	 .cfi_def_cfa_offset 24
 6836              	 
 6837 014e BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 6838              	.LVL658:
 6839              	.L820:
 6840 0152 00BF     	 .align 2
 6841              	.L819:
 6842 0154 00000000 	 .word .LANCHOR7
 6843 0158 00000000 	 .word .LANCHOR21
 6844 015c 08000000 	 .word .LC1
 6845              	 .cfi_endproc
 6846              	.LFE183:
 6848              	 .section .text.uxTaskResetEventItemValue,"ax",%progbits
 6849              	 .align 2
 6850              	 .global uxTaskResetEventItemValue
 6851              	 .thumb
 6852              	 .thumb_func
 6854              	uxTaskResetEventItemValue:
 6855              	.LFB184:
4163:../Dave/Generated/FREERTOS/tasks.c **** TickType_t uxReturn;
 6856              	 .loc 1 4163 0
 6857              	 .cfi_startproc
 6858              	 
 6859              	 
 6860              	 
4166:../Dave/Generated/FREERTOS/tasks.c **** 
 6861              	 .loc 1 4166 0
 6862 0000 044B     	 ldr r3,.L822
 6863 0002 1968     	 ldr r1,[r3]
4170:../Dave/Generated/FREERTOS/tasks.c **** 
 6864              	 .loc 1 4170 0
 6865 0004 1A68     	 ldr r2,[r3]
 6866 0006 1B68     	 ldr r3,[r3]
4166:../Dave/Generated/FREERTOS/tasks.c **** 
 6867              	 .loc 1 4166 0
 6868 0008 8869     	 ldr r0,[r1,#24]
 6869              	.LVL659:
4170:../Dave/Generated/FREERTOS/tasks.c **** 
 6870              	 .loc 1 4170 0
 6871 000a DB6A     	 ldr r3,[r3,#44]
 6872 000c C3F10503 	 rsb r3,r3,#5
 6873 0010 9361     	 str r3,[r2,#24]
4173:../Dave/Generated/FREERTOS/tasks.c **** /*-----------------------------------------------------------*/
 6874              	 .loc 1 4173 0
 6875 0012 7047     	 bx lr
 6876              	.L823:
 6877              	 .align 2
 6878              	.L822:
 6879 0014 00000000 	 .word .LANCHOR1
 6880              	 .cfi_endproc
 6881              	.LFE184:
 6883              	 .section .text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6884              	 .align 2
 6885              	 .global pvTaskIncrementMutexHeldCount
 6886              	 .thumb
 6887              	 .thumb_func
 6889              	pvTaskIncrementMutexHeldCount:
 6890              	.LFB185:
4179:../Dave/Generated/FREERTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 6891              	 .loc 1 4179 0
 6892              	 .cfi_startproc
 6893              	 
 6894              	 
 6895              	 
4182:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6896              	 .loc 1 4182 0
 6897 0000 044B     	 ldr r3,.L829
 6898 0002 1A68     	 ldr r2,[r3]
 6899 0004 1AB1     	 cbz r2,.L825
4184:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6900              	 .loc 1 4184 0
 6901 0006 1968     	 ldr r1,[r3]
 6902 0008 0A6D     	 ldr r2,[r1,#80]
 6903 000a 0132     	 adds r2,r2,#1
 6904 000c 0A65     	 str r2,[r1,#80]
 6905              	.L825:
4187:../Dave/Generated/FREERTOS/tasks.c **** 	}
 6906              	 .loc 1 4187 0
 6907 000e 1868     	 ldr r0,[r3]
4188:../Dave/Generated/FREERTOS/tasks.c **** 
 6908              	 .loc 1 4188 0
 6909 0010 7047     	 bx lr
 6910              	.L830:
 6911 0012 00BF     	 .align 2
 6912              	.L829:
 6913 0014 00000000 	 .word .LANCHOR1
 6914              	 .cfi_endproc
 6915              	.LFE185:
 6917              	 .section .text.ulTaskNotifyTake,"ax",%progbits
 6918              	 .align 2
 6919              	 .global ulTaskNotifyTake
 6920              	 .thumb
 6921              	 .thumb_func
 6923              	ulTaskNotifyTake:
 6924              	.LFB186:
4196:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulReturn;
 6925              	 .loc 1 4196 0
 6926              	 .cfi_startproc
 6927              	 
 6928              	 
 6929              	.LVL660:
 6930 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 6931              	.LCFI69:
 6932              	 .cfi_def_cfa_offset 24
 6933              	 .cfi_offset 4,-24
 6934              	 .cfi_offset 5,-20
 6935              	 .cfi_offset 6,-16
 6936              	 .cfi_offset 7,-12
 6937              	 .cfi_offset 8,-8
 6938              	 .cfi_offset 14,-4
4202:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6939              	 .loc 1 4202 0
 6940 0004 304C     	 ldr r4,.L852
4196:../Dave/Generated/FREERTOS/tasks.c **** 	uint32_t ulReturn;
 6941              	 .loc 1 4196 0
 6942 0006 0646     	 mov r6,r0
 6943 0008 0D46     	 mov r5,r1
4199:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6944              	 .loc 1 4199 0
 6945 000a FFF7FEFF 	 bl vPortEnterCritical
 6946              	.LVL661:
4202:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6947              	 .loc 1 4202 0
 6948 000e 2368     	 ldr r3,[r4]
 6949 0010 9B6E     	 ldr r3,[r3,#104]
 6950 0012 23B9     	 cbnz r3,.L833
4205:../Dave/Generated/FREERTOS/tasks.c **** 
 6951              	 .loc 1 4205 0
 6952 0014 2268     	 ldr r2,[r4]
 6953 0016 0127     	 movs r7,#1
 6954 0018 82F86C70 	 strb r7,[r2,#108]
4207:../Dave/Generated/FREERTOS/tasks.c **** 				{
 6955              	 .loc 1 4207 0
 6956 001c BDB9     	 cbnz r5,.L848
 6957              	.LVL662:
 6958              	.L833:
4228:../Dave/Generated/FREERTOS/tasks.c **** 
 6959              	 .loc 1 4228 0
 6960 001e FFF7FEFF 	 bl vPortExitCritical
 6961              	.LVL663:
4230:../Dave/Generated/FREERTOS/tasks.c **** 		{
 6962              	 .loc 1 4230 0
 6963 0022 FFF7FEFF 	 bl vPortEnterCritical
 6964              	.LVL664:
4233:../Dave/Generated/FREERTOS/tasks.c **** 
 6965              	 .loc 1 4233 0
 6966 0026 2368     	 ldr r3,[r4]
 6967 0028 274A     	 ldr r2,.L852
 6968 002a 9D6E     	 ldr r5,[r3,#104]
 6969              	.LVL665:
4235:../Dave/Generated/FREERTOS/tasks.c **** 			{
 6970              	 .loc 1 4235 0
 6971 002c 1DB1     	 cbz r5,.L839
4239:../Dave/Generated/FREERTOS/tasks.c **** 				}
 6972              	 .loc 1 4239 0
 6973 002e 1368     	 ldr r3,[r2]
4237:../Dave/Generated/FREERTOS/tasks.c **** 				{
 6974              	 .loc 1 4237 0
 6975 0030 56B9     	 cbnz r6,.L849
4243:../Dave/Generated/FREERTOS/tasks.c **** 				}
 6976              	 .loc 1 4243 0
 6977 0032 6A1E     	 subs r2,r5,#1
 6978 0034 9A66     	 str r2,[r3,#104]
 6979              	.L839:
4251:../Dave/Generated/FREERTOS/tasks.c **** 		}
 6980              	 .loc 1 4251 0
 6981 0036 2368     	 ldr r3,[r4]
 6982 0038 0022     	 movs r2,#0
 6983 003a 83F86C20 	 strb r2,[r3,#108]
4253:../Dave/Generated/FREERTOS/tasks.c **** 
 6984              	 .loc 1 4253 0
 6985 003e FFF7FEFF 	 bl vPortExitCritical
 6986              	.LVL666:
4256:../Dave/Generated/FREERTOS/tasks.c **** 
 6987              	 .loc 1 4256 0
 6988 0042 2846     	 mov r0,r5
 6989 0044 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 6990              	.LVL667:
 6991              	.L849:
4239:../Dave/Generated/FREERTOS/tasks.c **** 				}
 6992              	 .loc 1 4239 0
 6993 0048 0022     	 movs r2,#0
 6994 004a 9A66     	 str r2,[r3,#104]
 6995 004c F3E7     	 b .L839
 6996              	.LVL668:
 6997              	.L848:
 6998              	.LBB639:
 6999              	.LBB640:
4695:../Dave/Generated/FREERTOS/tasks.c **** 
 7000              	 .loc 1 4695 0
 7001 004e 1F4A     	 ldr r2,.L852+4
 7002 0050 D2F80080 	 ldr r8,[r2]
 7003              	.LVL669:
4702:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7004              	 .loc 1 4702 0
 7005 0054 2268     	 ldr r2,[r4]
4708:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7006              	 .loc 1 4708 0
 7007 0056 2068     	 ldr r0,[r4]
4702:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7008              	 .loc 1 4702 0
 7009 0058 82F86D30 	 strb r3,[r2,#109]
4708:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7010              	 .loc 1 4708 0
 7011 005c 0430     	 adds r0,r0,#4
 7012 005e FFF7FEFF 	 bl uxListRemove
 7013              	.LVL670:
 7014 0062 38B9     	 cbnz r0,.L835
4712:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7015              	 .loc 1 4712 0
 7016 0064 2368     	 ldr r3,[r4]
 7017 0066 1A4A     	 ldr r2,.L852+8
 7018 0068 D96A     	 ldr r1,[r3,#44]
 7019 006a 1368     	 ldr r3,[r2]
 7020 006c 8F40     	 lsls r7,r7,r1
 7021 006e 23EA0707 	 bic r7,r3,r7
 7022 0072 1760     	 str r7,[r2]
 7023              	.L835:
4721:../Dave/Generated/FREERTOS/tasks.c **** 		{
 7024              	 .loc 1 4721 0
 7025 0074 6B1C     	 adds r3,r5,#1
 7026 0076 20D0     	 beq .L850
4733:../Dave/Generated/FREERTOS/tasks.c **** 
 7027              	 .loc 1 4733 0
 7028 0078 4544     	 add r5,r5,r8
 7029              	.LVL671:
4736:../Dave/Generated/FREERTOS/tasks.c **** 
 7030              	 .loc 1 4736 0
 7031 007a 2368     	 ldr r3,[r4]
 7032              	.LVL672:
 7033 007c 124A     	 ldr r2,.L852
 7034 007e 5D60     	 str r5,[r3,#4]
4738:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7035              	 .loc 1 4738 0
 7036 0080 A845     	 cmp r8,r5
 7037 0082 13D8     	 bhi .L851
4748:../Dave/Generated/FREERTOS/tasks.c **** 
 7038              	 .loc 1 4748 0
 7039 0084 134B     	 ldr r3,.L852+12
 7040 0086 1868     	 ldr r0,[r3]
 7041 0088 1168     	 ldr r1,[r2]
 7042 008a 0431     	 adds r1,r1,#4
 7043 008c FFF7FEFF 	 bl vListInsert
 7044              	.LVL673:
4753:../Dave/Generated/FREERTOS/tasks.c **** 				{
 7045              	 .loc 1 4753 0
 7046 0090 114B     	 ldr r3,.L852+16
 7047 0092 1A68     	 ldr r2,[r3]
 7048 0094 9542     	 cmp r5,r2
4755:../Dave/Generated/FREERTOS/tasks.c **** 				}
 7049              	 .loc 1 4755 0
 7050 0096 38BF     	 it cc
 7051 0098 1D60     	 strcc r5,[r3]
 7052              	.LVL674:
 7053              	.L837:
 7054              	.LBE640:
 7055              	.LBE639:
4216:../Dave/Generated/FREERTOS/tasks.c **** 				}
 7056              	 .loc 1 4216 0
 7057 009a 104B     	 ldr r3,.L852+20
 7058 009c 4FF08052 	 mov r2,#268435456
 7059 00a0 1A60     	 str r2,[r3]
 7060              	
 7061 00a2 BFF34F8F 	 dsb
 7062              	
 7063              	
 7064 00a6 BFF36F8F 	 isb
 7065              	
 7066              	 .thumb
 7067 00aa B8E7     	 b .L833
 7068              	.LVL675:
 7069              	.L851:
 7070              	.LBB642:
 7071              	.LBB641:
4742:../Dave/Generated/FREERTOS/tasks.c **** 			}
 7072              	 .loc 1 4742 0
 7073 00ac 0C4B     	 ldr r3,.L852+24
 7074 00ae 1868     	 ldr r0,[r3]
 7075 00b0 1168     	 ldr r1,[r2]
 7076 00b2 0431     	 adds r1,r1,#4
 7077 00b4 FFF7FEFF 	 bl vListInsert
 7078              	.LVL676:
 7079 00b8 EFE7     	 b .L837
 7080              	.LVL677:
 7081              	.L850:
4726:../Dave/Generated/FREERTOS/tasks.c **** 		}
 7082              	 .loc 1 4726 0
 7083 00ba 2168     	 ldr r1,[r4]
 7084 00bc 0948     	 ldr r0,.L852+28
 7085 00be 0431     	 adds r1,r1,#4
 7086 00c0 FFF7FEFF 	 bl vListInsertEnd
 7087              	.LVL678:
 7088 00c4 E9E7     	 b .L837
 7089              	.L853:
 7090 00c6 00BF     	 .align 2
 7091              	.L852:
 7092 00c8 00000000 	 .word .LANCHOR1
 7093 00cc 00000000 	 .word .LANCHOR0
 7094 00d0 00000000 	 .word .LANCHOR2
 7095 00d4 00000000 	 .word .LANCHOR5
 7096 00d8 00000000 	 .word .LANCHOR6
 7097 00dc 04ED00E0 	 .word -536810236
 7098 00e0 00000000 	 .word .LANCHOR4
 7099 00e4 00000000 	 .word .LANCHOR3
 7100              	.LBE641:
 7101              	.LBE642:
 7102              	 .cfi_endproc
 7103              	.LFE186:
 7105              	 .section .text.xTaskNotifyWait,"ax",%progbits
 7106              	 .align 2
 7107              	 .global xTaskNotifyWait
 7108              	 .thumb
 7109              	 .thumb_func
 7111              	xTaskNotifyWait:
 7112              	.LFB187:
4264:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
 7113              	 .loc 1 4264 0
 7114              	 .cfi_startproc
 7115              	 
 7116              	 
 7117              	.LVL679:
 7118 0000 2DE9F843 	 push {r3,r4,r5,r6,r7,r8,r9,lr}
 7119              	.LCFI70:
 7120              	 .cfi_def_cfa_offset 32
 7121              	 .cfi_offset 3,-32
 7122              	 .cfi_offset 4,-28
 7123              	 .cfi_offset 5,-24
 7124              	 .cfi_offset 6,-20
 7125              	 .cfi_offset 7,-16
 7126              	 .cfi_offset 8,-12
 7127              	 .cfi_offset 9,-8
 7128              	 .cfi_offset 14,-4
4270:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7129              	 .loc 1 4270 0
 7130 0004 394C     	 ldr r4,.L875
4264:../Dave/Generated/FREERTOS/tasks.c **** 	BaseType_t xReturn;
 7131              	 .loc 1 4264 0
 7132 0006 1E46     	 mov r6,r3
 7133 0008 8046     	 mov r8,r0
 7134 000a 0F46     	 mov r7,r1
 7135 000c 1546     	 mov r5,r2
4267:../Dave/Generated/FREERTOS/tasks.c **** 		{
 7136              	 .loc 1 4267 0
 7137 000e FFF7FEFF 	 bl vPortEnterCritical
 7138              	.LVL680:
4270:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7139              	 .loc 1 4270 0
 7140 0012 2368     	 ldr r3,[r4]
 7141 0014 93F86C30 	 ldrb r3,[r3,#108]
 7142 0018 022B     	 cmp r3,#2
 7143 001a 0AD0     	 beq .L856
4275:../Dave/Generated/FREERTOS/tasks.c **** 
 7144              	 .loc 1 4275 0
 7145 001c 2368     	 ldr r3,[r4]
 7146 001e 9A6E     	 ldr r2,[r3,#104]
 7147 0020 22EA0800 	 bic r0,r2,r8
 7148 0024 9866     	 str r0,[r3,#104]
4278:../Dave/Generated/FREERTOS/tasks.c **** 
 7149              	 .loc 1 4278 0
 7150 0026 2368     	 ldr r3,[r4]
 7151 0028 4FF00108 	 mov r8,#1
 7152              	.LVL681:
 7153 002c 83F86C80 	 strb r8,[r3,#108]
4280:../Dave/Generated/FREERTOS/tasks.c **** 				{
 7154              	 .loc 1 4280 0
 7155 0030 E6B9     	 cbnz r6,.L872
 7156              	.LVL682:
 7157              	.L856:
4301:../Dave/Generated/FREERTOS/tasks.c **** 
 7158              	 .loc 1 4301 0
 7159 0032 FFF7FEFF 	 bl vPortExitCritical
 7160              	.LVL683:
4303:../Dave/Generated/FREERTOS/tasks.c **** 		{
 7161              	 .loc 1 4303 0
 7162 0036 FFF7FEFF 	 bl vPortEnterCritical
 7163              	.LVL684:
4307:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7164              	 .loc 1 4307 0
 7165 003a 15B1     	 cbz r5,.L862
4311:../Dave/Generated/FREERTOS/tasks.c **** 			}
 7166              	 .loc 1 4311 0
 7167 003c 2368     	 ldr r3,[r4]
 7168 003e 9B6E     	 ldr r3,[r3,#104]
 7169 0040 2B60     	 str r3,[r5]
 7170              	.L862:
4318:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7171              	 .loc 1 4318 0
 7172 0042 2368     	 ldr r3,[r4]
 7173 0044 294A     	 ldr r2,.L875
 7174 0046 93F86C30 	 ldrb r3,[r3,#108]
 7175 004a 012B     	 cmp r3,#1
 7176 004c 45D0     	 beq .L864
4327:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdTRUE;
 7177              	 .loc 1 4327 0
 7178 004e 1368     	 ldr r3,[r2]
 7179 0050 996E     	 ldr r1,[r3,#104]
 7180 0052 21EA0701 	 bic r1,r1,r7
 7181 0056 9966     	 str r1,[r3,#104]
 7182              	.LVL685:
4328:../Dave/Generated/FREERTOS/tasks.c **** 			}
 7183              	 .loc 1 4328 0
 7184 0058 0125     	 movs r5,#1
 7185              	.LVL686:
 7186              	.L863:
4331:../Dave/Generated/FREERTOS/tasks.c **** 		}
 7187              	 .loc 1 4331 0
 7188 005a 2368     	 ldr r3,[r4]
 7189 005c 0022     	 movs r2,#0
 7190 005e 83F86C20 	 strb r2,[r3,#108]
4333:../Dave/Generated/FREERTOS/tasks.c **** 
 7191              	 .loc 1 4333 0
 7192 0062 FFF7FEFF 	 bl vPortExitCritical
 7193              	.LVL687:
4336:../Dave/Generated/FREERTOS/tasks.c **** 
 7194              	 .loc 1 4336 0
 7195 0066 2846     	 mov r0,r5
 7196 0068 BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 7197              	.LVL688:
 7198              	.L872:
 7199              	.LBB645:
 7200              	.LBB646:
4695:../Dave/Generated/FREERTOS/tasks.c **** 
 7201              	 .loc 1 4695 0
 7202 006c 204B     	 ldr r3,.L875+4
 7203 006e D3F80090 	 ldr r9,[r3]
 7204              	.LVL689:
4702:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7205              	 .loc 1 4702 0
 7206 0072 2368     	 ldr r3,[r4]
4708:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7207              	 .loc 1 4708 0
 7208 0074 2068     	 ldr r0,[r4]
4702:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7209              	 .loc 1 4702 0
 7210 0076 0022     	 movs r2,#0
 7211 0078 83F86D20 	 strb r2,[r3,#109]
4708:../Dave/Generated/FREERTOS/tasks.c **** 	{
 7212              	 .loc 1 4708 0
 7213 007c 0430     	 adds r0,r0,#4
 7214 007e FFF7FEFF 	 bl uxListRemove
 7215              	.LVL690:
 7216 0082 40B9     	 cbnz r0,.L858
4712:../Dave/Generated/FREERTOS/tasks.c **** 	}
 7217              	 .loc 1 4712 0
 7218 0084 2368     	 ldr r3,[r4]
 7219 0086 1B4A     	 ldr r2,.L875+8
 7220 0088 D96A     	 ldr r1,[r3,#44]
 7221 008a 1368     	 ldr r3,[r2]
 7222 008c 08FA01F8 	 lsl r8,r8,r1
 7223 0090 23EA0803 	 bic r3,r3,r8
 7224 0094 1360     	 str r3,[r2]
 7225              	.L858:
4721:../Dave/Generated/FREERTOS/tasks.c **** 		{
 7226              	 .loc 1 4721 0
 7227 0096 731C     	 adds r3,r6,#1
 7228 0098 19D0     	 beq .L873
4733:../Dave/Generated/FREERTOS/tasks.c **** 
 7229              	 .loc 1 4733 0
 7230 009a 4E44     	 add r6,r6,r9
 7231              	.LVL691:
4736:../Dave/Generated/FREERTOS/tasks.c **** 
 7232              	 .loc 1 4736 0
 7233 009c 2368     	 ldr r3,[r4]
 7234              	.LVL692:
 7235 009e 134A     	 ldr r2,.L875
 7236 00a0 5E60     	 str r6,[r3,#4]
4738:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7237              	 .loc 1 4738 0
 7238 00a2 B145     	 cmp r9,r6
 7239 00a4 1BD8     	 bhi .L874
4748:../Dave/Generated/FREERTOS/tasks.c **** 
 7240              	 .loc 1 4748 0
 7241 00a6 144B     	 ldr r3,.L875+12
 7242 00a8 1868     	 ldr r0,[r3]
 7243 00aa 1168     	 ldr r1,[r2]
 7244 00ac 0431     	 adds r1,r1,#4
 7245 00ae FFF7FEFF 	 bl vListInsert
 7246              	.LVL693:
4753:../Dave/Generated/FREERTOS/tasks.c **** 				{
 7247              	 .loc 1 4753 0
 7248 00b2 124B     	 ldr r3,.L875+16
 7249 00b4 1A68     	 ldr r2,[r3]
 7250 00b6 9642     	 cmp r6,r2
4755:../Dave/Generated/FREERTOS/tasks.c **** 				}
 7251              	 .loc 1 4755 0
 7252 00b8 38BF     	 it cc
 7253 00ba 1E60     	 strcc r6,[r3]
 7254              	.LVL694:
 7255              	.L860:
 7256              	.LBE646:
 7257              	.LBE645:
4289:../Dave/Generated/FREERTOS/tasks.c **** 				}
 7258              	 .loc 1 4289 0
 7259 00bc 104B     	 ldr r3,.L875+20
 7260 00be 4FF08052 	 mov r2,#268435456
 7261 00c2 1A60     	 str r2,[r3]
 7262              	
 7263 00c4 BFF34F8F 	 dsb
 7264              	
 7265              	
 7266 00c8 BFF36F8F 	 isb
 7267              	
 7268              	 .thumb
 7269 00cc B1E7     	 b .L856
 7270              	.LVL695:
 7271              	.L873:
 7272              	.LBB649:
 7273              	.LBB647:
4726:../Dave/Generated/FREERTOS/tasks.c **** 		}
 7274              	 .loc 1 4726 0
 7275 00ce 2168     	 ldr r1,[r4]
 7276 00d0 0C48     	 ldr r0,.L875+24
 7277 00d2 0431     	 adds r1,r1,#4
 7278 00d4 FFF7FEFF 	 bl vListInsertEnd
 7279              	.LVL696:
 7280 00d8 F0E7     	 b .L860
 7281              	.LVL697:
 7282              	.L864:
 7283              	.LBE647:
 7284              	.LBE649:
4321:../Dave/Generated/FREERTOS/tasks.c **** 			}
 7285              	 .loc 1 4321 0
 7286 00da 0025     	 movs r5,#0
 7287              	.LVL698:
 7288 00dc BDE7     	 b .L863
 7289              	.LVL699:
 7290              	.L874:
 7291              	.LBB650:
 7292              	.LBB648:
4742:../Dave/Generated/FREERTOS/tasks.c **** 			}
 7293              	 .loc 1 4742 0
 7294 00de 0A4B     	 ldr r3,.L875+28
 7295 00e0 1868     	 ldr r0,[r3]
 7296 00e2 1168     	 ldr r1,[r2]
 7297 00e4 0431     	 adds r1,r1,#4
 7298 00e6 FFF7FEFF 	 bl vListInsert
 7299              	.LVL700:
 7300 00ea E7E7     	 b .L860
 7301              	.L876:
 7302              	 .align 2
 7303              	.L875:
 7304 00ec 00000000 	 .word .LANCHOR1
 7305 00f0 00000000 	 .word .LANCHOR0
 7306 00f4 00000000 	 .word .LANCHOR2
 7307 00f8 00000000 	 .word .LANCHOR5
 7308 00fc 00000000 	 .word .LANCHOR6
 7309 0100 04ED00E0 	 .word -536810236
 7310 0104 00000000 	 .word .LANCHOR3
 7311 0108 00000000 	 .word .LANCHOR4
 7312              	.LBE648:
 7313              	.LBE650:
 7314              	 .cfi_endproc
 7315              	.LFE187:
 7317              	 .section .text.xTaskGenericNotify,"ax",%progbits
 7318              	 .align 2
 7319              	 .global xTaskGenericNotify
 7320              	 .thumb
 7321              	 .thumb_func
 7323              	xTaskGenericNotify:
 7324              	.LFB188:
4344:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
 7325              	 .loc 1 4344 0
 7326              	 .cfi_startproc
 7327              	 
 7328              	 
 7329              	.LVL701:
 7330 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 7331              	.LCFI71:
 7332              	 .cfi_def_cfa_offset 24
 7333              	 .cfi_offset 3,-24
 7334              	 .cfi_offset 4,-20
 7335              	 .cfi_offset 5,-16
 7336              	 .cfi_offset 6,-12
 7337              	 .cfi_offset 7,-8
 7338              	 .cfi_offset 14,-4
4349:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 7339              	 .loc 1 4349 0
 7340 0002 E8B1     	 cbz r0,.L898
 7341 0004 1D46     	 mov r5,r3
 7342 0006 0446     	 mov r4,r0
 7343              	.LVL702:
 7344 0008 1646     	 mov r6,r2
 7345 000a 0F46     	 mov r7,r1
4352:../Dave/Generated/FREERTOS/tasks.c **** 		{
 7346              	 .loc 1 4352 0
 7347 000c FFF7FEFF 	 bl vPortEnterCritical
 7348              	.LVL703:
4354:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7349              	 .loc 1 4354 0
 7350 0010 0DB1     	 cbz r5,.L880
4356:../Dave/Generated/FREERTOS/tasks.c **** 			}
 7351              	 .loc 1 4356 0
 7352 0012 A36E     	 ldr r3,[r4,#104]
 7353 0014 2B60     	 str r3,[r5]
 7354              	.L880:
4359:../Dave/Generated/FREERTOS/tasks.c **** 
 7355              	 .loc 1 4359 0
 7356 0016 94F86C50 	 ldrb r5,[r4,#108]
 7357              	.LVL704:
4361:../Dave/Generated/FREERTOS/tasks.c **** 
 7358              	 .loc 1 4361 0
 7359 001a 0222     	 movs r2,#2
4363:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7360              	 .loc 1 4363 0
 7361 001c 731E     	 subs r3,r6,#1
4359:../Dave/Generated/FREERTOS/tasks.c **** 
 7362              	 .loc 1 4359 0
 7363 001e EDB2     	 uxtb r5,r5
 7364              	.LVL705:
4361:../Dave/Generated/FREERTOS/tasks.c **** 
 7365              	 .loc 1 4361 0
 7366 0020 84F86C20 	 strb r2,[r4,#108]
4363:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7367              	 .loc 1 4363 0
 7368 0024 032B     	 cmp r3,#3
 7369 0026 04D8     	 bhi .L881
 7370 0028 DFE803F0 	 tbb [pc,r3]
 7371              	.L883:
 7372 002c 36       	 .byte (.L882-.L883)/2
 7373 002d 32       	 .byte (.L884-.L883)/2
 7374 002e 02       	 .byte (.L897-.L883)/2
 7375 002f 3A       	 .byte (.L886-.L883)/2
 7376              	 .p2align 1
 7377              	.L897:
4380:../Dave/Generated/FREERTOS/tasks.c **** 					}
 7378              	 .loc 1 4380 0
 7379 0030 A766     	 str r7,[r4,#104]
 7380              	.LVL706:
 7381              	.L881:
4399:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7382              	 .loc 1 4399 0
 7383 0032 012D     	 cmp r5,#1
 7384 0034 0DD0     	 beq .L888
 7385              	.L891:
4344:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
 7386              	 .loc 1 4344 0
 7387 0036 0125     	 movs r5,#1
 7388              	.LVL707:
4439:../Dave/Generated/FREERTOS/tasks.c **** 
 7389              	 .loc 1 4439 0
 7390 0038 FFF7FEFF 	 bl vPortExitCritical
 7391              	.LVL708:
4442:../Dave/Generated/FREERTOS/tasks.c **** 
 7392              	 .loc 1 4442 0
 7393 003c 2846     	 mov r0,r5
 7394 003e F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 7395              	.LVL709:
 7396              	.L898:
 7397              	.LBB651:
 7398              	.LBB652:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 7399              	 .loc 2 240 0
 7400              	
 7401 0040 4FF0FC03 	 mov r3,#252
 7402 0044 83F31188 	 msr basepri,r3
 7403 0048 BFF36F8F 	 isb 
 7404 004c BFF34F8F 	 dsb 
 7405              	
 7406              	
 7407              	.LVL710:
 7408              	 .thumb
 7409              	.L879:
 7410              	.LBE652:
 7411              	.LBE651:
4349:../Dave/Generated/FREERTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 7412              	 .loc 1 4349 0 discriminator 1
 7413 0050 FEE7     	 b .L879
 7414              	.LVL711:
 7415              	.L888:
4401:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7416              	 .loc 1 4401 0
 7417 0052 271D     	 adds r7,r4,#4
4402:../Dave/Generated/FREERTOS/tasks.c **** 
 7418              	 .loc 1 4402 0
 7419 0054 1F4E     	 ldr r6,.L899
4401:../Dave/Generated/FREERTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7420              	 .loc 1 4401 0
 7421 0056 3846     	 mov r0,r7
 7422 0058 FFF7FEFF 	 bl uxListRemove
 7423              	.LVL712:
4402:../Dave/Generated/FREERTOS/tasks.c **** 
 7424              	 .loc 1 4402 0
 7425 005c E36A     	 ldr r3,[r4,#44]
 7426 005e 3268     	 ldr r2,[r6]
 7427 0060 1D48     	 ldr r0,.L899+4
 7428 0062 05FA03FE 	 lsl lr,r5,r3
 7429 0066 03EB8303 	 add r3,r3,r3,lsl#2
 7430 006a 4EEA0202 	 orr r2,lr,r2
 7431 006e 00EB8300 	 add r0,r0,r3,lsl#2
 7432 0072 3946     	 mov r1,r7
 7433 0074 3260     	 str r2,[r6]
 7434 0076 FFF7FEFF 	 bl vListInsertEnd
 7435              	.LVL713:
4405:../Dave/Generated/FREERTOS/tasks.c **** 
 7436              	 .loc 1 4405 0
 7437 007a A36A     	 ldr r3,[r4,#40]
 7438 007c BBB1     	 cbz r3,.L889
 7439              	.LBB653:
 7440              	.LBB654:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 7441              	 .loc 2 240 0
 7442              	
 7443 007e 4FF0FC03 	 mov r3,#252
 7444 0082 83F31188 	 msr basepri,r3
 7445 0086 BFF36F8F 	 isb 
 7446 008a BFF34F8F 	 dsb 
 7447              	
 7448              	
 7449              	.LVL714:
 7450              	 .thumb
 7451              	.L890:
 7452              	.LBE654:
 7453              	.LBE653:
4405:../Dave/Generated/FREERTOS/tasks.c **** 
 7454              	 .loc 1 4405 0 discriminator 2
 7455 008e FEE7     	 b .L890
 7456              	.LVL715:
 7457              	.L884:
4370:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7458              	 .loc 1 4370 0
 7459 0090 A36E     	 ldr r3,[r4,#104]
 7460 0092 0133     	 adds r3,r3,#1
 7461 0094 A366     	 str r3,[r4,#104]
4371:../Dave/Generated/FREERTOS/tasks.c **** 
 7462              	 .loc 1 4371 0
 7463 0096 CCE7     	 b .L881
 7464              	.L882:
4366:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7465              	 .loc 1 4366 0
 7466 0098 A36E     	 ldr r3,[r4,#104]
 7467 009a 1F43     	 orrs r7,r7,r3
 7468              	.LVL716:
 7469 009c A766     	 str r7,[r4,#104]
4367:../Dave/Generated/FREERTOS/tasks.c **** 
 7470              	 .loc 1 4367 0
 7471 009e C8E7     	 b .L881
 7472              	.LVL717:
 7473              	.L886:
4378:../Dave/Generated/FREERTOS/tasks.c **** 					{
 7474              	 .loc 1 4378 0
 7475 00a0 022D     	 cmp r5,#2
 7476 00a2 C5D1     	 bne .L897
4385:../Dave/Generated/FREERTOS/tasks.c **** 					}
 7477              	 .loc 1 4385 0
 7478 00a4 0025     	 movs r5,#0
 7479              	.LVL718:
4439:../Dave/Generated/FREERTOS/tasks.c **** 
 7480              	 .loc 1 4439 0
 7481 00a6 FFF7FEFF 	 bl vPortExitCritical
 7482              	.LVL719:
4442:../Dave/Generated/FREERTOS/tasks.c **** 
 7483              	 .loc 1 4442 0
 7484 00aa 2846     	 mov r0,r5
 7485 00ac F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 7486              	.LVL720:
 7487              	.L889:
4423:../Dave/Generated/FREERTOS/tasks.c **** 				{
 7488              	 .loc 1 4423 0
 7489 00ae 0B4B     	 ldr r3,.L899+8
 7490 00b0 E26A     	 ldr r2,[r4,#44]
 7491 00b2 1B68     	 ldr r3,[r3]
 7492 00b4 DB6A     	 ldr r3,[r3,#44]
 7493 00b6 9A42     	 cmp r2,r3
 7494 00b8 BDD9     	 bls .L891
4427:../Dave/Generated/FREERTOS/tasks.c **** 				}
 7495              	 .loc 1 4427 0
 7496 00ba 094B     	 ldr r3,.L899+12
 7497 00bc 4FF08052 	 mov r2,#268435456
 7498 00c0 1A60     	 str r2,[r3]
 7499              	
 7500 00c2 BFF34F8F 	 dsb
 7501              	
 7502              	
 7503 00c6 BFF36F8F 	 isb
 7504              	
4439:../Dave/Generated/FREERTOS/tasks.c **** 
 7505              	 .loc 1 4439 0
 7506              	 .thumb
 7507 00ca FFF7FEFF 	 bl vPortExitCritical
 7508              	.LVL721:
4442:../Dave/Generated/FREERTOS/tasks.c **** 
 7509              	 .loc 1 4442 0
 7510 00ce 2846     	 mov r0,r5
 7511 00d0 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 7512              	.LVL722:
 7513              	.L900:
 7514 00d2 00BF     	 .align 2
 7515              	.L899:
 7516 00d4 00000000 	 .word .LANCHOR2
 7517 00d8 00000000 	 .word .LANCHOR8
 7518 00dc 00000000 	 .word .LANCHOR1
 7519 00e0 04ED00E0 	 .word -536810236
 7520              	 .cfi_endproc
 7521              	.LFE188:
 7523              	 .section .text.xTaskGenericNotifyFromISR,"ax",%progbits
 7524              	 .align 2
 7525              	 .global xTaskGenericNotifyFromISR
 7526              	 .thumb
 7527              	 .thumb_func
 7529              	xTaskGenericNotifyFromISR:
 7530              	.LFB189:
4450:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
 7531              	 .loc 1 4450 0
 7532              	 .cfi_startproc
 7533              	 
 7534              	 
 7535              	.LVL723:
 7536 0000 2DE9F843 	 push {r3,r4,r5,r6,r7,r8,r9,lr}
 7537              	.LCFI72:
 7538              	 .cfi_def_cfa_offset 32
 7539              	 .cfi_offset 3,-32
 7540              	 .cfi_offset 4,-28
 7541              	 .cfi_offset 5,-24
 7542              	 .cfi_offset 6,-20
 7543              	 .cfi_offset 7,-16
 7544              	 .cfi_offset 8,-12
 7545              	 .cfi_offset 9,-8
 7546              	 .cfi_offset 14,-4
4450:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
 7547              	 .loc 1 4450 0
 7548 0004 DDF82080 	 ldr r8,[sp,#32]
4456:../Dave/Generated/FREERTOS/tasks.c **** 
 7549              	 .loc 1 4456 0
 7550 0008 40B3     	 cbz r0,.L925
 7551 000a 0446     	 mov r4,r0
 7552 000c 1D46     	 mov r5,r3
 7553 000e 1646     	 mov r6,r2
 7554 0010 8946     	 mov r9,r1
4474:../Dave/Generated/FREERTOS/tasks.c **** 
 7555              	 .loc 1 4474 0
 7556 0012 FFF7FEFF 	 bl vPortValidateInterruptPriority
 7557              	.LVL724:
 7558              	.LBB655:
 7559              	.LBB656:
 256:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 7560              	 .loc 2 256 0
 7561              	
 7562 0016 EFF31187 	 mrs r7,basepri
 7563 001a 4FF0FC03 	 mov r3,#252
 7564 001e 83F31188 	 msr basepri,r3
 7565 0022 BFF36F8F 	 isb 
 7566 0026 BFF34F8F 	 dsb 
 7567              	
 7568              	
 7569              	.LVL725:
 7570              	 .thumb
 7571              	.LBE656:
 7572              	.LBE655:
4480:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7573              	 .loc 1 4480 0
 7574 002a 0DB1     	 cbz r5,.L904
4482:../Dave/Generated/FREERTOS/tasks.c **** 			}
 7575              	 .loc 1 4482 0
 7576 002c A36E     	 ldr r3,[r4,#104]
 7577 002e 2B60     	 str r3,[r5]
 7578              	.L904:
4485:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7579              	 .loc 1 4485 0
 7580 0030 94F86C50 	 ldrb r5,[r4,#108]
 7581              	.LVL726:
4486:../Dave/Generated/FREERTOS/tasks.c **** 
 7582              	 .loc 1 4486 0
 7583 0034 0222     	 movs r2,#2
4488:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7584              	 .loc 1 4488 0
 7585 0036 731E     	 subs r3,r6,#1
4485:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7586              	 .loc 1 4485 0
 7587 0038 EDB2     	 uxtb r5,r5
 7588              	.LVL727:
4486:../Dave/Generated/FREERTOS/tasks.c **** 
 7589              	 .loc 1 4486 0
 7590 003a 84F86C20 	 strb r2,[r4,#108]
4488:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7591              	 .loc 1 4488 0
 7592 003e 032B     	 cmp r3,#3
 7593 0040 05D8     	 bhi .L905
 7594 0042 DFE803F0 	 tbb [pc,r3]
 7595              	.L907:
 7596 0046 23       	 .byte (.L906-.L907)/2
 7597 0047 1F       	 .byte (.L908-.L907)/2
 7598 0048 02       	 .byte (.L924-.L907)/2
 7599 0049 28       	 .byte (.L910-.L907)/2
 7600              	 .p2align 1
 7601              	.L924:
4505:../Dave/Generated/FREERTOS/tasks.c **** 					}
 7602              	 .loc 1 4505 0
 7603 004a C4F86890 	 str r9,[r4,#104]
 7604              	.L905:
4524:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7605              	 .loc 1 4524 0
 7606 004e 012D     	 cmp r5,#1
 7607 0050 0DD0     	 beq .L912
 7608              	.LVL728:
 7609              	.L917:
4450:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
 7610              	 .loc 1 4450 0
 7611 0052 0120     	 movs r0,#1
 7612              	.LVL729:
 7613              	.LBB657:
 7614              	.LBB658:
 7615              	 .loc 2 274 0
 7616              	
 7617 0054 87F31188 	 msr basepri,r7
 7618              	
 7619              	 .thumb
 7620              	.LBE658:
 7621              	.LBE657:
4566:../Dave/Generated/FREERTOS/tasks.c **** 
 7622              	 .loc 1 4566 0
 7623 0058 BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 7624              	.LVL730:
 7625              	.L925:
 7626              	.LBB662:
 7627              	.LBB663:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 7628              	 .loc 2 240 0
 7629              	
 7630 005c 4FF0FC03 	 mov r3,#252
 7631 0060 83F31188 	 msr basepri,r3
 7632 0064 BFF36F8F 	 isb 
 7633 0068 BFF34F8F 	 dsb 
 7634              	
 7635              	
 7636              	.LVL731:
 7637              	 .thumb
 7638              	.L903:
 7639              	.LBE663:
 7640              	.LBE662:
4456:../Dave/Generated/FREERTOS/tasks.c **** 
 7641              	 .loc 1 4456 0 discriminator 1
 7642 006c FEE7     	 b .L903
 7643              	.LVL732:
 7644              	.L912:
4527:../Dave/Generated/FREERTOS/tasks.c **** 
 7645              	 .loc 1 4527 0
 7646 006e A36A     	 ldr r3,[r4,#40]
 7647 0070 C3B1     	 cbz r3,.L913
 7648              	.LBB664:
 7649              	.LBB665:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 7650              	 .loc 2 240 0
 7651              	
 7652 0072 4FF0FC03 	 mov r3,#252
 7653 0076 83F31188 	 msr basepri,r3
 7654 007a BFF36F8F 	 isb 
 7655 007e BFF34F8F 	 dsb 
 7656              	
 7657              	
 7658              	.LVL733:
 7659              	 .thumb
 7660              	.L914:
 7661              	.LBE665:
 7662              	.LBE664:
4527:../Dave/Generated/FREERTOS/tasks.c **** 
 7663              	 .loc 1 4527 0 discriminator 2
 7664 0082 FEE7     	 b .L914
 7665              	.L908:
4495:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7666              	 .loc 1 4495 0
 7667 0084 A36E     	 ldr r3,[r4,#104]
 7668 0086 0133     	 adds r3,r3,#1
 7669 0088 A366     	 str r3,[r4,#104]
4496:../Dave/Generated/FREERTOS/tasks.c **** 
 7670              	 .loc 1 4496 0
 7671 008a E0E7     	 b .L905
 7672              	.L906:
4491:../Dave/Generated/FREERTOS/tasks.c **** 					break;
 7673              	 .loc 1 4491 0
 7674 008c A36E     	 ldr r3,[r4,#104]
 7675 008e 49EA0303 	 orr r3,r9,r3
 7676 0092 A366     	 str r3,[r4,#104]
4492:../Dave/Generated/FREERTOS/tasks.c **** 
 7677              	 .loc 1 4492 0
 7678 0094 DBE7     	 b .L905
 7679              	.L910:
4503:../Dave/Generated/FREERTOS/tasks.c **** 					{
 7680              	 .loc 1 4503 0
 7681 0096 022D     	 cmp r5,#2
 7682 0098 D7D1     	 bne .L924
4510:../Dave/Generated/FREERTOS/tasks.c **** 					}
 7683              	 .loc 1 4510 0
 7684 009a 0020     	 movs r0,#0
 7685              	.LVL734:
 7686              	.LBB666:
 7687              	.LBB659:
 7688              	 .loc 2 274 0
 7689              	
 7690 009c 87F31188 	 msr basepri,r7
 7691              	
 7692              	 .thumb
 7693              	.LBE659:
 7694              	.LBE666:
4566:../Dave/Generated/FREERTOS/tasks.c **** 
 7695              	 .loc 1 4566 0
 7696 00a0 BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 7697              	.LVL735:
 7698              	.L913:
4529:../Dave/Generated/FREERTOS/tasks.c **** 				{
 7699              	 .loc 1 4529 0
 7700 00a4 194B     	 ldr r3,.L926
 7701 00a6 1B68     	 ldr r3,[r3]
 7702 00a8 13BB     	 cbnz r3,.L915
4531:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7703              	 .loc 1 4531 0
 7704 00aa 04F10409 	 add r9,r4,#4
 7705              	.LVL736:
4532:../Dave/Generated/FREERTOS/tasks.c **** 				}
 7706              	 .loc 1 4532 0
 7707 00ae 184E     	 ldr r6,.L926+4
4531:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7708              	 .loc 1 4531 0
 7709 00b0 4846     	 mov r0,r9
 7710 00b2 FFF7FEFF 	 bl uxListRemove
 7711              	.LVL737:
4532:../Dave/Generated/FREERTOS/tasks.c **** 				}
 7712              	 .loc 1 4532 0
 7713 00b6 E36A     	 ldr r3,[r4,#44]
 7714 00b8 3268     	 ldr r2,[r6]
 7715 00ba 1648     	 ldr r0,.L926+8
 7716 00bc 9D40     	 lsls r5,r5,r3
 7717              	.LVL738:
 7718 00be 03EB8303 	 add r3,r3,r3,lsl#2
 7719 00c2 1543     	 orrs r5,r5,r2
 7720 00c4 4946     	 mov r1,r9
 7721 00c6 00EB8300 	 add r0,r0,r3,lsl#2
 7722 00ca 3560     	 str r5,[r6]
 7723 00cc FFF7FEFF 	 bl vListInsertEnd
 7724              	.LVL739:
 7725              	.L916:
4541:../Dave/Generated/FREERTOS/tasks.c **** 				{
 7726              	 .loc 1 4541 0
 7727 00d0 114B     	 ldr r3,.L926+12
 7728 00d2 E26A     	 ldr r2,[r4,#44]
 7729 00d4 1B68     	 ldr r3,[r3]
 7730 00d6 DB6A     	 ldr r3,[r3,#44]
 7731 00d8 9A42     	 cmp r2,r3
 7732 00da BAD9     	 bls .L917
4545:../Dave/Generated/FREERTOS/tasks.c **** 					{
 7733              	 .loc 1 4545 0
 7734 00dc B8F1000F 	 cmp r8,#0
 7735 00e0 0CD0     	 beq .L918
4547:../Dave/Generated/FREERTOS/tasks.c **** 					}
 7736              	 .loc 1 4547 0
 7737 00e2 0120     	 movs r0,#1
 7738 00e4 C8F80000 	 str r0,[r8]
 7739              	.LVL740:
 7740              	.LBB667:
 7741              	.LBB660:
 7742              	 .loc 2 274 0
 7743              	
 7744 00e8 87F31188 	 msr basepri,r7
 7745              	
 7746              	 .thumb
 7747              	.LBE660:
 7748              	.LBE667:
4566:../Dave/Generated/FREERTOS/tasks.c **** 
 7749              	 .loc 1 4566 0
 7750 00ec BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 7751              	.LVL741:
 7752              	.L915:
4538:../Dave/Generated/FREERTOS/tasks.c **** 				}
 7753              	 .loc 1 4538 0
 7754 00f0 0A48     	 ldr r0,.L926+16
 7755 00f2 04F11801 	 add r1,r4,#24
 7756 00f6 FFF7FEFF 	 bl vListInsertEnd
 7757              	.LVL742:
 7758 00fa E9E7     	 b .L916
 7759              	.LVL743:
 7760              	.L918:
4554:../Dave/Generated/FREERTOS/tasks.c **** 					}
 7761              	 .loc 1 4554 0
 7762 00fc 084B     	 ldr r3,.L926+20
 7763 00fe 0120     	 movs r0,#1
 7764 0100 1860     	 str r0,[r3]
 7765              	.LVL744:
 7766              	.LBB668:
 7767              	.LBB661:
 7768              	 .loc 2 274 0
 7769              	
 7770 0102 87F31188 	 msr basepri,r7
 7771              	
 7772              	 .thumb
 7773              	.LBE661:
 7774              	.LBE668:
4566:../Dave/Generated/FREERTOS/tasks.c **** 
 7775              	 .loc 1 4566 0
 7776 0106 BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 7777              	.LVL745:
 7778              	.L927:
 7779 010a 00BF     	 .align 2
 7780              	.L926:
 7781 010c 00000000 	 .word .LANCHOR16
 7782 0110 00000000 	 .word .LANCHOR2
 7783 0114 00000000 	 .word .LANCHOR8
 7784 0118 00000000 	 .word .LANCHOR1
 7785 011c 00000000 	 .word .LANCHOR11
 7786 0120 00000000 	 .word .LANCHOR17
 7787              	 .cfi_endproc
 7788              	.LFE189:
 7790              	 .section .text.vTaskNotifyGiveFromISR,"ax",%progbits
 7791              	 .align 2
 7792              	 .global vTaskNotifyGiveFromISR
 7793              	 .thumb
 7794              	 .thumb_func
 7796              	vTaskNotifyGiveFromISR:
 7797              	.LFB190:
4574:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
 7798              	 .loc 1 4574 0
 7799              	 .cfi_startproc
 7800              	 
 7801              	 
 7802              	.LVL746:
4579:../Dave/Generated/FREERTOS/tasks.c **** 
 7803              	 .loc 1 4579 0
 7804 0000 F0B1     	 cbz r0,.L940
4574:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t * pxTCB;
 7805              	 .loc 1 4574 0
 7806 0002 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 7807              	.LCFI73:
 7808              	 .cfi_def_cfa_offset 24
 7809              	 .cfi_offset 4,-24
 7810              	 .cfi_offset 5,-20
 7811              	 .cfi_offset 6,-16
 7812              	 .cfi_offset 7,-12
 7813              	 .cfi_offset 8,-8
 7814              	 .cfi_offset 14,-4
 7815 0006 0446     	 mov r4,r0
 7816 0008 0E46     	 mov r6,r1
4597:../Dave/Generated/FREERTOS/tasks.c **** 
 7817              	 .loc 1 4597 0
 7818 000a FFF7FEFF 	 bl vPortValidateInterruptPriority
 7819              	.LVL747:
 7820              	.LBB669:
 7821              	.LBB670:
 256:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 7822              	 .loc 2 256 0
 7823              	
 7824 000e EFF31187 	 mrs r7,basepri
 7825 0012 4FF0FC03 	 mov r3,#252
 7826 0016 83F31188 	 msr basepri,r3
 7827 001a BFF36F8F 	 isb 
 7828 001e BFF34F8F 	 dsb 
 7829              	
 7830              	
 7831              	.LVL748:
 7832              	 .thumb
 7833              	.LBE670:
 7834              	.LBE669:
4604:../Dave/Generated/FREERTOS/tasks.c **** 
 7835              	 .loc 1 4604 0
 7836 0022 0223     	 movs r3,#2
4603:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7837              	 .loc 1 4603 0
 7838 0024 94F86C50 	 ldrb r5,[r4,#108]
4604:../Dave/Generated/FREERTOS/tasks.c **** 
 7839              	 .loc 1 4604 0
 7840 0028 84F86C30 	 strb r3,[r4,#108]
4608:../Dave/Generated/FREERTOS/tasks.c **** 
 7841              	 .loc 1 4608 0
 7842 002c A36E     	 ldr r3,[r4,#104]
4603:../Dave/Generated/FREERTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7843              	 .loc 1 4603 0
 7844 002e EDB2     	 uxtb r5,r5
 7845              	.LVL749:
4608:../Dave/Generated/FREERTOS/tasks.c **** 
 7846              	 .loc 1 4608 0
 7847 0030 0133     	 adds r3,r3,#1
4614:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7848              	 .loc 1 4614 0
 7849 0032 012D     	 cmp r5,#1
4608:../Dave/Generated/FREERTOS/tasks.c **** 
 7850              	 .loc 1 4608 0
 7851 0034 A366     	 str r3,[r4,#104]
4614:../Dave/Generated/FREERTOS/tasks.c **** 			{
 7852              	 .loc 1 4614 0
 7853 0036 0CD0     	 beq .L941
 7854              	.LVL750:
 7855              	.L932:
 7856              	.LBB671:
 7857              	.LBB672:
 7858              	 .loc 2 274 0
 7859              	
 7860 0038 87F31188 	 msr basepri,r7
 7861              	
 7862              	 .thumb
 7863 003c BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 7864              	.LVL751:
 7865              	.L940:
 7866              	.LCFI74:
 7867              	 .cfi_def_cfa_offset 0
 7868              	 .cfi_restore 4
 7869              	 .cfi_restore 5
 7870              	 .cfi_restore 6
 7871              	 .cfi_restore 7
 7872              	 .cfi_restore 8
 7873              	 .cfi_restore 14
 7874              	.LBE672:
 7875              	.LBE671:
 7876              	.LBB675:
 7877              	.LBB676:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 7878              	 .loc 2 240 0
 7879              	
 7880 0040 4FF0FC03 	 mov r3,#252
 7881 0044 83F31188 	 msr basepri,r3
 7882 0048 BFF36F8F 	 isb 
 7883 004c BFF34F8F 	 dsb 
 7884              	
 7885              	
 7886              	.LVL752:
 7887              	 .thumb
 7888              	.L930:
 7889              	.LBE676:
 7890              	.LBE675:
4579:../Dave/Generated/FREERTOS/tasks.c **** 
 7891              	 .loc 1 4579 0 discriminator 1
 7892 0050 FEE7     	 b .L930
 7893              	.LVL753:
 7894              	.L941:
 7895              	.LCFI75:
 7896              	 .cfi_def_cfa_offset 24
 7897              	 .cfi_offset 4,-24
 7898              	 .cfi_offset 5,-20
 7899              	 .cfi_offset 6,-16
 7900              	 .cfi_offset 7,-12
 7901              	 .cfi_offset 8,-8
 7902              	 .cfi_offset 14,-4
4617:../Dave/Generated/FREERTOS/tasks.c **** 
 7903              	 .loc 1 4617 0
 7904 0052 A36A     	 ldr r3,[r4,#40]
 7905 0054 43B1     	 cbz r3,.L933
 7906              	.LBB677:
 7907              	.LBB678:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 7908              	 .loc 2 240 0
 7909              	
 7910 0056 4FF0FC03 	 mov r3,#252
 7911 005a 83F31188 	 msr basepri,r3
 7912 005e BFF36F8F 	 isb 
 7913 0062 BFF34F8F 	 dsb 
 7914              	
 7915              	
 7916              	.LVL754:
 7917              	 .thumb
 7918              	.L934:
 7919              	.LBE678:
 7920              	.LBE677:
4617:../Dave/Generated/FREERTOS/tasks.c **** 
 7921              	 .loc 1 4617 0 discriminator 2
 7922 0066 FEE7     	 b .L934
 7923              	.L933:
4619:../Dave/Generated/FREERTOS/tasks.c **** 				{
 7924              	 .loc 1 4619 0
 7925 0068 194B     	 ldr r3,.L942
 7926 006a 1B68     	 ldr r3,[r3]
 7927 006c 13BB     	 cbnz r3,.L935
4621:../Dave/Generated/FREERTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7928              	 .loc 1 4621 0
 7929 006e 04F10408 	 add r8,r4,#4
 7930 0072 4046     	 mov r0,r8
 7931 0074 FFF7FEFF 	 bl uxListRemove
 7932              	.LVL755:
4622:../Dave/Generated/FREERTOS/tasks.c **** 				}
 7933              	 .loc 1 4622 0
 7934 0078 DFF868E0 	 ldr lr,.L942+20
 7935 007c E36A     	 ldr r3,[r4,#44]
 7936 007e DEF80020 	 ldr r2,[lr]
 7937 0082 1448     	 ldr r0,.L942+4
 7938 0084 9D40     	 lsls r5,r5,r3
 7939              	.LVL756:
 7940 0086 03EB8303 	 add r3,r3,r3,lsl#2
 7941 008a 1543     	 orrs r5,r5,r2
 7942 008c 4146     	 mov r1,r8
 7943 008e 00EB8300 	 add r0,r0,r3,lsl#2
 7944 0092 CEF80050 	 str r5,[lr]
 7945 0096 FFF7FEFF 	 bl vListInsertEnd
 7946              	.LVL757:
 7947              	.L936:
4631:../Dave/Generated/FREERTOS/tasks.c **** 				{
 7948              	 .loc 1 4631 0
 7949 009a 0F4B     	 ldr r3,.L942+8
 7950 009c E26A     	 ldr r2,[r4,#44]
 7951 009e 1B68     	 ldr r3,[r3]
 7952 00a0 DB6A     	 ldr r3,[r3,#44]
 7953 00a2 9A42     	 cmp r2,r3
 7954 00a4 C8D9     	 bls .L932
4635:../Dave/Generated/FREERTOS/tasks.c **** 					{
 7955              	 .loc 1 4635 0
 7956 00a6 5EB1     	 cbz r6,.L938
4637:../Dave/Generated/FREERTOS/tasks.c **** 					}
 7957              	 .loc 1 4637 0
 7958 00a8 0123     	 movs r3,#1
 7959 00aa 3360     	 str r3,[r6]
 7960              	.LVL758:
 7961              	.LBB679:
 7962              	.LBB673:
 7963              	 .loc 2 274 0
 7964              	
 7965 00ac 87F31188 	 msr basepri,r7
 7966              	
 7967              	 .thumb
 7968 00b0 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 7969              	.LVL759:
 7970              	.L935:
 7971              	.LBE673:
 7972              	.LBE679:
4628:../Dave/Generated/FREERTOS/tasks.c **** 				}
 7973              	 .loc 1 4628 0
 7974 00b4 0948     	 ldr r0,.L942+12
 7975 00b6 04F11801 	 add r1,r4,#24
 7976 00ba FFF7FEFF 	 bl vListInsertEnd
 7977              	.LVL760:
 7978 00be ECE7     	 b .L936
 7979              	.LVL761:
 7980              	.L938:
4644:../Dave/Generated/FREERTOS/tasks.c **** 					}
 7981              	 .loc 1 4644 0
 7982 00c0 074B     	 ldr r3,.L942+16
 7983 00c2 0122     	 movs r2,#1
 7984 00c4 1A60     	 str r2,[r3]
 7985              	.LVL762:
 7986              	.LBB680:
 7987              	.LBB674:
 7988              	 .loc 2 274 0
 7989              	
 7990 00c6 87F31188 	 msr basepri,r7
 7991              	
 7992              	 .thumb
 7993 00ca BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 7994              	.LVL763:
 7995              	.L943:
 7996 00ce 00BF     	 .align 2
 7997              	.L942:
 7998 00d0 00000000 	 .word .LANCHOR16
 7999 00d4 00000000 	 .word .LANCHOR8
 8000 00d8 00000000 	 .word .LANCHOR1
 8001 00dc 00000000 	 .word .LANCHOR11
 8002 00e0 00000000 	 .word .LANCHOR17
 8003 00e4 00000000 	 .word .LANCHOR2
 8004              	.LBE674:
 8005              	.LBE680:
 8006              	 .cfi_endproc
 8007              	.LFE190:
 8009              	 .section .text.xTaskNotifyStateClear,"ax",%progbits
 8010              	 .align 2
 8011              	 .global xTaskNotifyStateClear
 8012              	 .thumb
 8013              	 .thumb_func
 8015              	xTaskNotifyStateClear:
 8016              	.LFB191:
4663:../Dave/Generated/FREERTOS/tasks.c **** 	TCB_t *pxTCB;
 8017              	 .loc 1 4663 0
 8018              	 .cfi_startproc
 8019              	 
 8020              	 
 8021              	.LVL764:
 8022 0000 10B5     	 push {r4,lr}
 8023              	.LCFI76:
 8024              	 .cfi_def_cfa_offset 8
 8025              	 .cfi_offset 4,-8
 8026              	 .cfi_offset 14,-4
4669:../Dave/Generated/FREERTOS/tasks.c **** 
 8027              	 .loc 1 4669 0
 8028 0002 0446     	 mov r4,r0
 8029 0004 70B1     	 cbz r0,.L949
 8030              	.LVL765:
 8031              	.L945:
4671:../Dave/Generated/FREERTOS/tasks.c **** 		{
 8032              	 .loc 1 4671 0 discriminator 4
 8033 0006 FFF7FEFF 	 bl vPortEnterCritical
 8034              	.LVL766:
4673:../Dave/Generated/FREERTOS/tasks.c **** 			{
 8035              	 .loc 1 4673 0 discriminator 4
 8036 000a 94F86C30 	 ldrb r3,[r4,#108]
 8037 000e 022B     	 cmp r3,#2
4675:../Dave/Generated/FREERTOS/tasks.c **** 				xReturn = pdPASS;
 8038              	 .loc 1 4675 0 discriminator 4
 8039 0010 05BF     	 ittet eq
 8040 0012 0023     	 moveq r3,#0
 8041 0014 84F86C30 	 strbeq r3,[r4,#108]
 8042              	.LVL767:
4680:../Dave/Generated/FREERTOS/tasks.c **** 			}
 8043              	 .loc 1 4680 0 discriminator 4
 8044 0018 0024     	 movne r4,#0
 8045              	.LVL768:
4676:../Dave/Generated/FREERTOS/tasks.c **** 			}
 8046              	 .loc 1 4676 0 discriminator 4
 8047 001a 0124     	 moveq r4,#1
 8048              	.LVL769:
4683:../Dave/Generated/FREERTOS/tasks.c **** 
 8049              	 .loc 1 4683 0 discriminator 4
 8050 001c FFF7FEFF 	 bl vPortExitCritical
 8051              	.LVL770:
4686:../Dave/Generated/FREERTOS/tasks.c **** 
 8052              	 .loc 1 4686 0 discriminator 4
 8053 0020 2046     	 mov r0,r4
 8054 0022 10BD     	 pop {r4,pc}
 8055              	.LVL771:
 8056              	.L949:
4669:../Dave/Generated/FREERTOS/tasks.c **** 
 8057              	 .loc 1 4669 0 discriminator 1
 8058 0024 014B     	 ldr r3,.L950
 8059 0026 1C68     	 ldr r4,[r3]
 8060              	.LVL772:
 8061 0028 EDE7     	 b .L945
 8062              	.L951:
 8063 002a 00BF     	 .align 2
 8064              	.L950:
 8065 002c 00000000 	 .word .LANCHOR1
 8066              	 .cfi_endproc
 8067              	.LFE191:
 8069              	 .global pxCurrentTCB
 8070              	 .section .bss.xNumOfOverflows,"aw",%nobits
 8071              	 .align 2
 8072              	 .set .LANCHOR19,.+0
 8075              	xNumOfOverflows:
 8076 0000 00000000 	 .space 4
 8077              	 .section .bss.pxDelayedTaskList,"aw",%nobits
 8078              	 .align 2
 8079              	 .set .LANCHOR5,.+0
 8082              	pxDelayedTaskList:
 8083 0000 00000000 	 .space 4
 8084              	 .section .rodata.str1.4,"aMS",%progbits,1
 8085              	 .align 2
 8086              	.LC0:
 8087 0000 49444C45 	 .ascii "IDLE\000"
 8087      00
 8088 0005 000000   	 .space 3
 8089              	.LC1:
 8090 0008 09256309 	 .ascii "\011%c\011%u\011%u\011%u\015\012\000"
 8090      25750925 
 8090      75092575 
 8090      0D0A00
 8091 0017 00       	 .section .bss.xSchedulerRunning,"aw",%nobits
 8092              	 .align 2
 8093              	 .set .LANCHOR13,.+0
 8096              	xSchedulerRunning:
 8097 0000 00000000 	 .space 4
 8098              	 .section .bss.uxSchedulerSuspended,"aw",%nobits
 8099              	 .align 2
 8100              	 .set .LANCHOR16,.+0
 8103              	uxSchedulerSuspended:
 8104 0000 00000000 	 .space 4
 8105              	 .section .bss.xDelayedTaskList1,"aw",%nobits
 8106              	 .align 2
 8107              	 .set .LANCHOR9,.+0
 8110              	xDelayedTaskList1:
 8111 0000 00000000 	 .space 20
 8111      00000000 
 8111      00000000 
 8111      00000000 
 8111      00000000 
 8112              	 .section .rodata.CSWTCH.265,"a",%progbits
 8113              	 .align 2
 8114              	 .set .LANCHOR21,.+0
 8117              	CSWTCH.265:
 8118 0000 52       	 .byte 82
 8119 0001 42       	 .byte 66
 8120 0002 53       	 .byte 83
 8121 0003 44       	 .byte 68
 8122              	 .section .bss.uxPendedTicks,"aw",%nobits
 8123              	 .align 2
 8124              	 .set .LANCHOR20,.+0
 8127              	uxPendedTicks:
 8128 0000 00000000 	 .space 4
 8129              	 .section .bss.pxReadyTasksLists,"aw",%nobits
 8130              	 .align 2
 8131              	 .set .LANCHOR8,.+0
 8134              	pxReadyTasksLists:
 8135 0000 00000000 	 .space 100
 8135      00000000 
 8135      00000000 
 8135      00000000 
 8135      00000000 
 8136              	 .section .bss.xTasksWaitingTermination,"aw",%nobits
 8137              	 .align 2
 8138              	 .set .LANCHOR12,.+0
 8141              	xTasksWaitingTermination:
 8142 0000 00000000 	 .space 20
 8142      00000000 
 8142      00000000 
 8142      00000000 
 8142      00000000 
 8143              	 .section .bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 8144              	 .align 2
 8145              	 .set .LANCHOR15,.+0
 8148              	uxDeletedTasksWaitingCleanUp:
 8149 0000 00000000 	 .space 4
 8150              	 .section .bss.pxCurrentTCB,"aw",%nobits
 8151              	 .align 2
 8152              	 .set .LANCHOR1,.+0
 8155              	pxCurrentTCB:
 8156 0000 00000000 	 .space 4
 8157              	 .section .bss.xNextTaskUnblockTime,"aw",%nobits
 8158              	 .align 2
 8159              	 .set .LANCHOR6,.+0
 8162              	xNextTaskUnblockTime:
 8163 0000 00000000 	 .space 4
 8164              	 .section .bss.xIdleTaskHandle,"aw",%nobits
 8165              	 .align 2
 8166              	 .set .LANCHOR18,.+0
 8169              	xIdleTaskHandle:
 8170 0000 00000000 	 .space 4
 8171              	 .section .bss.xTickCount,"aw",%nobits
 8172              	 .align 2
 8173              	 .set .LANCHOR0,.+0
 8176              	xTickCount:
 8177 0000 00000000 	 .space 4
 8178              	 .section .bss.pxOverflowDelayedTaskList,"aw",%nobits
 8179              	 .align 2
 8180              	 .set .LANCHOR4,.+0
 8183              	pxOverflowDelayedTaskList:
 8184 0000 00000000 	 .space 4
 8185              	 .section .bss.xPendingReadyList,"aw",%nobits
 8186              	 .align 2
 8187              	 .set .LANCHOR11,.+0
 8190              	xPendingReadyList:
 8191 0000 00000000 	 .space 20
 8191      00000000 
 8191      00000000 
 8191      00000000 
 8191      00000000 
 8192              	 .section .bss.uxTaskNumber,"aw",%nobits
 8193              	 .align 2
 8194              	 .set .LANCHOR14,.+0
 8197              	uxTaskNumber:
 8198 0000 00000000 	 .space 4
 8199              	 .section .bss.uxCurrentNumberOfTasks,"aw",%nobits
 8200              	 .align 2
 8201              	 .set .LANCHOR7,.+0
 8204              	uxCurrentNumberOfTasks:
 8205 0000 00000000 	 .space 4
 8206              	 .section .bss.xDelayedTaskList2,"aw",%nobits
 8207              	 .align 2
 8208              	 .set .LANCHOR10,.+0
 8211              	xDelayedTaskList2:
 8212 0000 00000000 	 .space 20
 8212      00000000 
 8212      00000000 
 8212      00000000 
 8212      00000000 
 8213              	 .section .bss.xSuspendedTaskList,"aw",%nobits
 8214              	 .align 2
 8215              	 .set .LANCHOR3,.+0
 8218              	xSuspendedTaskList:
 8219 0000 00000000 	 .space 20
 8219      00000000 
 8219      00000000 
 8219      00000000 
 8219      00000000 
 8220              	 .section .bss.uxTopReadyPriority,"aw",%nobits
 8221              	 .align 2
 8222              	 .set .LANCHOR2,.+0
 8225              	uxTopReadyPriority:
 8226 0000 00000000 	 .space 4
 8227              	 .section .bss.xYieldPending,"aw",%nobits
 8228              	 .align 2
 8229              	 .set .LANCHOR17,.+0
 8232              	xYieldPending:
 8233 0000 00000000 	 .space 4
 8234              	 .text
 8235              	.Letext0:
 8236              	 .file 3 "c:\\dave 4\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 8237              	 .file 4 "c:\\dave 4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 8238              	 .file 5 "c:\\dave 4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 8239              	 .file 6 "../Dave/Generated/FREERTOS/projdefs.h"
 8240              	 .file 7 "../Dave/Generated/FREERTOS/list.h"
 8241              	 .file 8 "../Dave/Generated/FREERTOS/task.h"
 8242              	 .file 9 "C:/Workspaces/Dave 4/CTPOT_test1/Libraries/CMSIS/Include/core_cm4.h"
 8243              	 .file 10 "../Dave/Generated/FREERTOS/portable.h"
 8244              	 .file 11 "c:\\dave 4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\string.h"
 8245              	 .file 12 "../Dave/Generated/FREERTOS/timers.h"
 8246              	 .file 13 "c:\\dave 4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdio.h"
 8247              	 .file 14 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
    {standard input}:20     .text.unlikely.prvSearchForNameWithinSingleList:00000000 $t
    {standard input}:24     .text.unlikely.prvSearchForNameWithinSingleList:00000000 prvSearchForNameWithinSingleList
    {standard input}:111    .text.unlikely.prvAddCurrentTaskToDelayedList:00000000 $t
    {standard input}:115    .text.unlikely.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
    {standard input}:247    .text.unlikely.prvAddCurrentTaskToDelayedList:00000078 $d
    {standard input}:258    .text.unlikely.prvResetNextTaskUnblockTime:00000000 $t
    {standard input}:262    .text.unlikely.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
    {standard input}:297    .text.unlikely.prvResetNextTaskUnblockTime:00000020 $d
    {standard input}:305    .text.xTaskCreate:00000000 $t
    {standard input}:310    .text.xTaskCreate:00000000 xTaskCreate
    {standard input}:751    .text.xTaskCreate:0000023c $d
    {standard input}:773    .text.vTaskDelete:00000000 $t
    {standard input}:778    .text.vTaskDelete:00000000 vTaskDelete
    {standard input}:985    .text.vTaskDelete:000000d8 $d
    {standard input}:1001   .text.eTaskGetState:00000000 $t
    {standard input}:1006   .text.eTaskGetState:00000000 eTaskGetState
    {standard input}:1115   .text.eTaskGetState:00000068 $d
    {standard input}:1124   .text.uxTaskPriorityGet:00000000 $t
    {standard input}:1129   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
    {standard input}:1177   .text.uxTaskPriorityGet:00000024 $d
    {standard input}:1182   .text.uxTaskPriorityGetFromISR:00000000 $t
    {standard input}:1187   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
    {standard input}:1256   .text.uxTaskPriorityGetFromISR:00000034 $d
    {standard input}:1261   .text.vTaskPrioritySet:00000000 $t
    {standard input}:1266   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
    {standard input}:1448   .text.vTaskPrioritySet:000000cc $d
    {standard input}:1456   .text.vTaskSuspend:00000000 $t
    {standard input}:1461   .text.vTaskSuspend:00000000 vTaskSuspend
    {standard input}:1741   .text.vTaskSuspend:0000012c $d
    {standard input}:1760   .text.vTaskResume:00000000 $t
    {standard input}:1765   .text.vTaskResume:00000000 vTaskResume
    {standard input}:1927   .text.vTaskResume:00000090 $d
    {standard input}:1937   .text.xTaskResumeFromISR:00000000 $t
    {standard input}:1942   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
    {standard input}:2131   .text.xTaskResumeFromISR:000000ac $d
    {standard input}:2141   .text.vTaskStartScheduler:00000000 $t
    {standard input}:2146   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
    {standard input}:2259   .text.vTaskStartScheduler:00000068 $d
    {standard input}:3214   .text.prvIdleTask:00000000 prvIdleTask
    {standard input}:2269   .text.vTaskEndScheduler:00000000 $t
    {standard input}:2274   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
    {standard input}:2305   .text.vTaskEndScheduler:0000001c $d
    {standard input}:2310   .text.vTaskSuspendAll:00000000 $t
    {standard input}:2315   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
    {standard input}:2331   .text.vTaskSuspendAll:0000000c $d
    {standard input}:2336   .text.xTaskGetTickCount:00000000 $t
    {standard input}:2341   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
    {standard input}:2357   .text.xTaskGetTickCount:00000008 $d
    {standard input}:2362   .text.xTaskGetTickCountFromISR:00000000 $t
    {standard input}:2367   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
    {standard input}:2390   .text.xTaskGetTickCountFromISR:0000000c $d
    {standard input}:2395   .text.uxTaskGetNumberOfTasks:00000000 $t
    {standard input}:2400   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
    {standard input}:2415   .text.uxTaskGetNumberOfTasks:00000008 $d
    {standard input}:2420   .text.pcTaskGetName:00000000 $t
    {standard input}:2425   .text.pcTaskGetName:00000000 pcTaskGetName
    {standard input}:2470   .text.pcTaskGetName:00000020 $d
    {standard input}:2475   .text.xTaskGetIdleTaskHandle:00000000 $t
    {standard input}:2480   .text.xTaskGetIdleTaskHandle:00000000 xTaskGetIdleTaskHandle
    {standard input}:2514   .text.xTaskGetIdleTaskHandle:0000001c $d
    {standard input}:2519   .text.xTaskIncrementTick:00000000 $t
    {standard input}:2524   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
    {standard input}:2733   .text.xTaskIncrementTick:00000110 $d
    {standard input}:2749   .text.xTaskResumeAll:00000000 $t
    {standard input}:2754   .text.xTaskResumeAll:00000000 xTaskResumeAll
    {standard input}:2937   .text.xTaskResumeAll:000000d4 $d
    {standard input}:2950   .text.vTaskDelayUntil:00000000 $t
    {standard input}:2955   .text.vTaskDelayUntil:00000000 vTaskDelayUntil
    {standard input}:3119   .text.vTaskDelayUntil:00000090 $d
    {standard input}:3127   .text.vTaskDelay:00000000 $t
    {standard input}:3132   .text.vTaskDelay:00000000 vTaskDelay
    {standard input}:3204   .text.vTaskDelay:00000044 $d
    {standard input}:3210   .text.prvIdleTask:00000000 $t
    {standard input}:3331   .text.prvIdleTask:00000080 $d
    {standard input}:3346   .text.xTaskGetHandle:00000000 $t
    {standard input}:3351   .text.xTaskGetHandle:00000000 xTaskGetHandle
    {standard input}:3668   .text.xTaskGetHandle:00000180 $d
    {standard input}:3678   .text.xTaskAbortDelay:00000000 $t
    {standard input}:3683   .text.xTaskAbortDelay:00000000 xTaskAbortDelay
    {standard input}:3848   .text.xTaskAbortDelay:000000b8 $d
    {standard input}:3860   .text.prvListTasksWithinSingleList.part.6:00000000 $t
    {standard input}:3864   .text.prvListTasksWithinSingleList.part.6:00000000 prvListTasksWithinSingleList.part.6
    {standard input}:4188   .text.prvListTasksWithinSingleList.part.6:00000148 $d
    {standard input}:4202   .text.uxTaskGetSystemState:00000000 $t
    {standard input}:4207   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
    {standard input}:4594   .text.uxTaskGetSystemState:00000154 $d
    {standard input}:4610   .text.vTaskSwitchContext:00000000 $t
    {standard input}:4615   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
    {standard input}:4709   .text.vTaskSwitchContext:0000005c $d
    {standard input}:4718   .text.vTaskPlaceOnEventList:00000000 $t
    {standard input}:4723   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
    {standard input}:4891   .text.vTaskPlaceOnEventList:00000094 $d
    {standard input}:4904   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
    {standard input}:4909   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
    {standard input}:5003   .text.vTaskPlaceOnUnorderedEventList:00000050 $d
    {standard input}:5009   .text.vTaskPlaceOnEventListRestricted:00000000 $t
    {standard input}:5014   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
    {standard input}:5195   .text.vTaskPlaceOnEventListRestricted:000000a4 $d
    {standard input}:5208   .text.xTaskRemoveFromEventList:00000000 $t
    {standard input}:5213   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
    {standard input}:5314   .text.xTaskRemoveFromEventList:00000070 $d
    {standard input}:5324   .text.xTaskRemoveFromUnorderedEventList:00000000 $t
    {standard input}:5329   .text.xTaskRemoveFromUnorderedEventList:00000000 xTaskRemoveFromUnorderedEventList
    {standard input}:5440   .text.xTaskRemoveFromUnorderedEventList:0000007c $d
    {standard input}:5449   .text.vTaskSetTimeOutState:00000000 $t
    {standard input}:5454   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
    {standard input}:5494   .text.vTaskSetTimeOutState:00000024 $d
    {standard input}:5503   .text.xTaskCheckForTimeOut:00000000 $t
    {standard input}:5508   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
    {standard input}:5672   .text.xTaskCheckForTimeOut:00000094 $d
    {standard input}:5679   .text.vTaskMissedYield:00000000 $t
    {standard input}:5684   .text.vTaskMissedYield:00000000 vTaskMissedYield
    {standard input}:5699   .text.vTaskMissedYield:00000008 $d
    {standard input}:5704   .text.uxTaskGetTaskNumber:00000000 $t
    {standard input}:5709   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
    {standard input}:5730   .text.vTaskSetTaskNumber:00000000 $t
    {standard input}:5735   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
    {standard input}:5755   .text.vTaskSetThreadLocalStoragePointer:00000000 $t
    {standard input}:5760   .text.vTaskSetThreadLocalStoragePointer:00000000 vTaskSetThreadLocalStoragePointer
    {standard input}:5791   .text.vTaskSetThreadLocalStoragePointer:00000014 $d
    {standard input}:5796   .text.pvTaskGetThreadLocalStoragePointer:00000000 $t
    {standard input}:5801   .text.pvTaskGetThreadLocalStoragePointer:00000000 pvTaskGetThreadLocalStoragePointer
    {standard input}:5843   .text.pvTaskGetThreadLocalStoragePointer:00000020 $d
    {standard input}:5848   .text.vTaskGetInfo:00000000 $t
    {standard input}:5853   .text.vTaskGetInfo:00000000 vTaskGetInfo
    {standard input}:6115   .text.vTaskGetInfo:000000f0 $d
    {standard input}:6125   .text.uxTaskGetStackHighWaterMark:00000000 $t
    {standard input}:6130   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
    {standard input}:6187   .text.uxTaskGetStackHighWaterMark:00000028 $d
    {standard input}:6192   .text.xTaskGetCurrentTaskHandle:00000000 $t
    {standard input}:6197   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
    {standard input}:6213   .text.xTaskGetCurrentTaskHandle:00000008 $d
    {standard input}:6218   .text.xTaskGetSchedulerState:00000000 $t
    {standard input}:6223   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
    {standard input}:6252   .text.xTaskGetSchedulerState:00000018 $d
    {standard input}:6258   .text.vTaskPriorityInherit:00000000 $t
    {standard input}:6263   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
    {standard input}:6381   .text.vTaskPriorityInherit:00000090 $d
    {standard input}:6388   .text.xTaskPriorityDisinherit:00000000 $t
    {standard input}:6393   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
    {standard input}:6556   .text.xTaskPriorityDisinherit:000000a8 $d
    {standard input}:6563   .text.vTaskList:00000000 $t
    {standard input}:6568   .text.vTaskList:00000000 vTaskList
    {standard input}:6842   .text.vTaskList:00000154 $d
    {standard input}:6849   .text.uxTaskResetEventItemValue:00000000 $t
    {standard input}:6854   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
    {standard input}:6879   .text.uxTaskResetEventItemValue:00000014 $d
    {standard input}:6884   .text.pvTaskIncrementMutexHeldCount:00000000 $t
    {standard input}:6889   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
    {standard input}:6913   .text.pvTaskIncrementMutexHeldCount:00000014 $d
    {standard input}:6918   .text.ulTaskNotifyTake:00000000 $t
    {standard input}:6923   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
    {standard input}:7092   .text.ulTaskNotifyTake:000000c8 $d
    {standard input}:7106   .text.xTaskNotifyWait:00000000 $t
    {standard input}:7111   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
    {standard input}:7304   .text.xTaskNotifyWait:000000ec $d
    {standard input}:7318   .text.xTaskGenericNotify:00000000 $t
    {standard input}:7323   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
    {standard input}:7372   .text.xTaskGenericNotify:0000002c $d
    {standard input}:7376   .text.xTaskGenericNotify:00000030 $t
    {standard input}:7516   .text.xTaskGenericNotify:000000d4 $d
    {standard input}:7524   .text.xTaskGenericNotifyFromISR:00000000 $t
    {standard input}:7529   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
    {standard input}:7596   .text.xTaskGenericNotifyFromISR:00000046 $d
    {standard input}:7600   .text.xTaskGenericNotifyFromISR:0000004a $t
    {standard input}:7781   .text.xTaskGenericNotifyFromISR:0000010c $d
    {standard input}:7791   .text.vTaskNotifyGiveFromISR:00000000 $t
    {standard input}:7796   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
    {standard input}:7998   .text.vTaskNotifyGiveFromISR:000000d0 $d
    {standard input}:8010   .text.xTaskNotifyStateClear:00000000 $t
    {standard input}:8015   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
    {standard input}:8065   .text.xTaskNotifyStateClear:0000002c $d
    {standard input}:8155   .bss.pxCurrentTCB:00000000 pxCurrentTCB
    {standard input}:8071   .bss.xNumOfOverflows:00000000 $d
    {standard input}:8075   .bss.xNumOfOverflows:00000000 xNumOfOverflows
    {standard input}:8078   .bss.pxDelayedTaskList:00000000 $d
    {standard input}:8082   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
    {standard input}:8085   .rodata.str1.4:00000000 $d
    {standard input}:8092   .bss.xSchedulerRunning:00000000 $d
    {standard input}:8096   .bss.xSchedulerRunning:00000000 xSchedulerRunning
    {standard input}:8099   .bss.uxSchedulerSuspended:00000000 $d
    {standard input}:8103   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
    {standard input}:8106   .bss.xDelayedTaskList1:00000000 $d
    {standard input}:8110   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
    {standard input}:8113   .rodata.CSWTCH.265:00000000 $d
    {standard input}:8117   .rodata.CSWTCH.265:00000000 CSWTCH.265
    {standard input}:8123   .bss.uxPendedTicks:00000000 $d
    {standard input}:8127   .bss.uxPendedTicks:00000000 uxPendedTicks
    {standard input}:8130   .bss.pxReadyTasksLists:00000000 $d
    {standard input}:8134   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
    {standard input}:8137   .bss.xTasksWaitingTermination:00000000 $d
    {standard input}:8141   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
    {standard input}:8144   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
    {standard input}:8148   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
    {standard input}:8151   .bss.pxCurrentTCB:00000000 $d
    {standard input}:8158   .bss.xNextTaskUnblockTime:00000000 $d
    {standard input}:8162   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
    {standard input}:8165   .bss.xIdleTaskHandle:00000000 $d
    {standard input}:8169   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
    {standard input}:8172   .bss.xTickCount:00000000 $d
    {standard input}:8176   .bss.xTickCount:00000000 xTickCount
    {standard input}:8179   .bss.pxOverflowDelayedTaskList:00000000 $d
    {standard input}:8183   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
    {standard input}:8186   .bss.xPendingReadyList:00000000 $d
    {standard input}:8190   .bss.xPendingReadyList:00000000 xPendingReadyList
    {standard input}:8193   .bss.uxTaskNumber:00000000 $d
    {standard input}:8197   .bss.uxTaskNumber:00000000 uxTaskNumber
    {standard input}:8200   .bss.uxCurrentNumberOfTasks:00000000 $d
    {standard input}:8204   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
    {standard input}:8207   .bss.xDelayedTaskList2:00000000 $d
    {standard input}:8211   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
    {standard input}:8214   .bss.xSuspendedTaskList:00000000 $d
    {standard input}:8218   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
    {standard input}:8221   .bss.uxTopReadyPriority:00000000 $d
    {standard input}:8225   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
    {standard input}:8228   .bss.xYieldPending:00000000 $d
    {standard input}:8232   .bss.xYieldPending:00000000 xYieldPending
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
uxListRemove
vListInsertEnd
vListInsert
pvPortMalloc
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vPortExitCritical
vPortFree
vListInitialise
vPortValidateInterruptPriority
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
strlen
stpcpy
sprintf
