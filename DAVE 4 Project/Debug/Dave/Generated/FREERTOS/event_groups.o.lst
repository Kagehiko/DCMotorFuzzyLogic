   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "event_groups.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.unlikely.xEventGroupSetBits.part.0,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	xEventGroupSetBits.part.0:
  25              	.LFB141:
  26              	 .file 1 "../Dave/Generated/FREERTOS/event_groups.c"
   1:../Dave/Generated/FREERTOS/event_groups.c **** /*
   2:../Dave/Generated/FREERTOS/event_groups.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Dave/Generated/FREERTOS/event_groups.c ****     All rights reserved
   4:../Dave/Generated/FREERTOS/event_groups.c **** 
   5:../Dave/Generated/FREERTOS/event_groups.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Dave/Generated/FREERTOS/event_groups.c **** 
   7:../Dave/Generated/FREERTOS/event_groups.c ****     This file is part of the FreeRTOS distribution.
   8:../Dave/Generated/FREERTOS/event_groups.c **** 
   9:../Dave/Generated/FREERTOS/event_groups.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Dave/Generated/FREERTOS/event_groups.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Dave/Generated/FREERTOS/event_groups.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Dave/Generated/FREERTOS/event_groups.c **** 
  13:../Dave/Generated/FREERTOS/event_groups.c ****     ***************************************************************************
  14:../Dave/Generated/FREERTOS/event_groups.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Dave/Generated/FREERTOS/event_groups.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Dave/Generated/FREERTOS/event_groups.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Dave/Generated/FREERTOS/event_groups.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Dave/Generated/FREERTOS/event_groups.c ****     ***************************************************************************
  19:../Dave/Generated/FREERTOS/event_groups.c **** 
  20:../Dave/Generated/FREERTOS/event_groups.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Dave/Generated/FREERTOS/event_groups.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Dave/Generated/FREERTOS/event_groups.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Dave/Generated/FREERTOS/event_groups.c ****     link: http://www.freertos.org/a00114.html
  24:../Dave/Generated/FREERTOS/event_groups.c **** 
  25:../Dave/Generated/FREERTOS/event_groups.c ****     ***************************************************************************
  26:../Dave/Generated/FREERTOS/event_groups.c ****      *                                                                       *
  27:../Dave/Generated/FREERTOS/event_groups.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Dave/Generated/FREERTOS/event_groups.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Dave/Generated/FREERTOS/event_groups.c ****      *    platform software that is more than just the market leader, it     *
  30:../Dave/Generated/FREERTOS/event_groups.c ****      *    is the industry's de facto standard.                               *
  31:../Dave/Generated/FREERTOS/event_groups.c ****      *                                                                       *
  32:../Dave/Generated/FREERTOS/event_groups.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Dave/Generated/FREERTOS/event_groups.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Dave/Generated/FREERTOS/event_groups.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Dave/Generated/FREERTOS/event_groups.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Dave/Generated/FREERTOS/event_groups.c ****      *                                                                       *
  37:../Dave/Generated/FREERTOS/event_groups.c ****     ***************************************************************************
  38:../Dave/Generated/FREERTOS/event_groups.c **** 
  39:../Dave/Generated/FREERTOS/event_groups.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Dave/Generated/FREERTOS/event_groups.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Dave/Generated/FREERTOS/event_groups.c ****     defined configASSERT()?
  42:../Dave/Generated/FREERTOS/event_groups.c **** 
  43:../Dave/Generated/FREERTOS/event_groups.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Dave/Generated/FREERTOS/event_groups.c ****     embedded software for free we request you assist our global community by
  45:../Dave/Generated/FREERTOS/event_groups.c ****     participating in the support forum.
  46:../Dave/Generated/FREERTOS/event_groups.c **** 
  47:../Dave/Generated/FREERTOS/event_groups.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Dave/Generated/FREERTOS/event_groups.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Dave/Generated/FREERTOS/event_groups.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Dave/Generated/FREERTOS/event_groups.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Dave/Generated/FREERTOS/event_groups.c **** 
  52:../Dave/Generated/FREERTOS/event_groups.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Dave/Generated/FREERTOS/event_groups.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Dave/Generated/FREERTOS/event_groups.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Dave/Generated/FREERTOS/event_groups.c **** 
  56:../Dave/Generated/FREERTOS/event_groups.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Dave/Generated/FREERTOS/event_groups.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Dave/Generated/FREERTOS/event_groups.c **** 
  59:../Dave/Generated/FREERTOS/event_groups.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Dave/Generated/FREERTOS/event_groups.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Dave/Generated/FREERTOS/event_groups.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Dave/Generated/FREERTOS/event_groups.c **** 
  63:../Dave/Generated/FREERTOS/event_groups.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Dave/Generated/FREERTOS/event_groups.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Dave/Generated/FREERTOS/event_groups.c ****     mission critical applications that require provable dependability.
  66:../Dave/Generated/FREERTOS/event_groups.c **** 
  67:../Dave/Generated/FREERTOS/event_groups.c ****     1 tab == 4 spaces!
  68:../Dave/Generated/FREERTOS/event_groups.c **** */
  69:../Dave/Generated/FREERTOS/event_groups.c **** 
  70:../Dave/Generated/FREERTOS/event_groups.c **** /* Standard includes. */
  71:../Dave/Generated/FREERTOS/event_groups.c **** #include <stdlib.h>
  72:../Dave/Generated/FREERTOS/event_groups.c **** 
  73:../Dave/Generated/FREERTOS/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:../Dave/Generated/FREERTOS/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:../Dave/Generated/FREERTOS/event_groups.c **** task.h is included from an application file. */
  76:../Dave/Generated/FREERTOS/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:../Dave/Generated/FREERTOS/event_groups.c **** 
  78:../Dave/Generated/FREERTOS/event_groups.c **** /* FreeRTOS includes. */
  79:../Dave/Generated/FREERTOS/event_groups.c **** #include "FreeRTOS.h"
  80:../Dave/Generated/FREERTOS/event_groups.c **** #include "task.h"
  81:../Dave/Generated/FREERTOS/event_groups.c **** #include "timers.h"
  82:../Dave/Generated/FREERTOS/event_groups.c **** #include "event_groups.h"
  83:../Dave/Generated/FREERTOS/event_groups.c **** 
  84:../Dave/Generated/FREERTOS/event_groups.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  85:../Dave/Generated/FREERTOS/event_groups.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  86:../Dave/Generated/FREERTOS/event_groups.c **** header files above, but not in this file, in order to generate the correct
  87:../Dave/Generated/FREERTOS/event_groups.c **** privileged Vs unprivileged linkage and placement. */
  88:../Dave/Generated/FREERTOS/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  89:../Dave/Generated/FREERTOS/event_groups.c **** 
  90:../Dave/Generated/FREERTOS/event_groups.c **** /* The following bit fields convey control information in a task's event list
  91:../Dave/Generated/FREERTOS/event_groups.c **** item value.  It is important they don't clash with the
  92:../Dave/Generated/FREERTOS/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  93:../Dave/Generated/FREERTOS/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  94:../Dave/Generated/FREERTOS/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  95:../Dave/Generated/FREERTOS/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  96:../Dave/Generated/FREERTOS/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  97:../Dave/Generated/FREERTOS/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  98:../Dave/Generated/FREERTOS/event_groups.c **** #else
  99:../Dave/Generated/FREERTOS/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
 100:../Dave/Generated/FREERTOS/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
 101:../Dave/Generated/FREERTOS/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
 102:../Dave/Generated/FREERTOS/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
 103:../Dave/Generated/FREERTOS/event_groups.c **** #endif
 104:../Dave/Generated/FREERTOS/event_groups.c **** 
 105:../Dave/Generated/FREERTOS/event_groups.c **** typedef struct xEventGroupDefinition
 106:../Dave/Generated/FREERTOS/event_groups.c **** {
 107:../Dave/Generated/FREERTOS/event_groups.c **** 	EventBits_t uxEventBits;
 108:../Dave/Generated/FREERTOS/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
 109:../Dave/Generated/FREERTOS/event_groups.c **** 
 110:../Dave/Generated/FREERTOS/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 111:../Dave/Generated/FREERTOS/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
 112:../Dave/Generated/FREERTOS/event_groups.c **** 	#endif
 113:../Dave/Generated/FREERTOS/event_groups.c **** 
 114:../Dave/Generated/FREERTOS/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 115:../Dave/Generated/FREERTOS/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
 116:../Dave/Generated/FREERTOS/event_groups.c **** 	#endif
 117:../Dave/Generated/FREERTOS/event_groups.c **** } EventGroup_t;
 118:../Dave/Generated/FREERTOS/event_groups.c **** 
 119:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 120:../Dave/Generated/FREERTOS/event_groups.c **** 
 121:../Dave/Generated/FREERTOS/event_groups.c **** /*
 122:../Dave/Generated/FREERTOS/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
 123:../Dave/Generated/FREERTOS/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
 124:../Dave/Generated/FREERTOS/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
 125:../Dave/Generated/FREERTOS/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
 126:../Dave/Generated/FREERTOS/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
 127:../Dave/Generated/FREERTOS/event_groups.c ****  * in uxCurrentEventBits.
 128:../Dave/Generated/FREERTOS/event_groups.c ****  */
 129:../Dave/Generated/FREERTOS/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 130:../Dave/Generated/FREERTOS/event_groups.c **** 
 131:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 132:../Dave/Generated/FREERTOS/event_groups.c **** 
 133:../Dave/Generated/FREERTOS/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 134:../Dave/Generated/FREERTOS/event_groups.c **** 
 135:../Dave/Generated/FREERTOS/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
 136:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 137:../Dave/Generated/FREERTOS/event_groups.c **** 	EventGroup_t *pxEventBits;
 138:../Dave/Generated/FREERTOS/event_groups.c **** 
 139:../Dave/Generated/FREERTOS/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
 140:../Dave/Generated/FREERTOS/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
 141:../Dave/Generated/FREERTOS/event_groups.c **** 
 142:../Dave/Generated/FREERTOS/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 143:../Dave/Generated/FREERTOS/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGro
 144:../Dave/Generated/FREERTOS/event_groups.c **** 
 145:../Dave/Generated/FREERTOS/event_groups.c **** 		if( pxEventBits != NULL )
 146:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 147:../Dave/Generated/FREERTOS/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 148:../Dave/Generated/FREERTOS/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 149:../Dave/Generated/FREERTOS/event_groups.c **** 
 150:../Dave/Generated/FREERTOS/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 151:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 152:../Dave/Generated/FREERTOS/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 153:../Dave/Generated/FREERTOS/event_groups.c **** 				this event group was created statically in case the event group
 154:../Dave/Generated/FREERTOS/event_groups.c **** 				is later deleted. */
 155:../Dave/Generated/FREERTOS/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 156:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 157:../Dave/Generated/FREERTOS/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 158:../Dave/Generated/FREERTOS/event_groups.c **** 
 159:../Dave/Generated/FREERTOS/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 160:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 161:../Dave/Generated/FREERTOS/event_groups.c **** 		else
 162:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 163:../Dave/Generated/FREERTOS/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 164:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 165:../Dave/Generated/FREERTOS/event_groups.c **** 
 166:../Dave/Generated/FREERTOS/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 167:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 168:../Dave/Generated/FREERTOS/event_groups.c **** 
 169:../Dave/Generated/FREERTOS/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 170:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 171:../Dave/Generated/FREERTOS/event_groups.c **** 
 172:../Dave/Generated/FREERTOS/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 173:../Dave/Generated/FREERTOS/event_groups.c **** 
 174:../Dave/Generated/FREERTOS/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 175:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 176:../Dave/Generated/FREERTOS/event_groups.c **** 	EventGroup_t *pxEventBits;
 177:../Dave/Generated/FREERTOS/event_groups.c **** 
 178:../Dave/Generated/FREERTOS/event_groups.c **** 		/* Allocate the event group. */
 179:../Dave/Generated/FREERTOS/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 180:../Dave/Generated/FREERTOS/event_groups.c **** 
 181:../Dave/Generated/FREERTOS/event_groups.c **** 		if( pxEventBits != NULL )
 182:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 183:../Dave/Generated/FREERTOS/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 184:../Dave/Generated/FREERTOS/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 185:../Dave/Generated/FREERTOS/event_groups.c **** 
 186:../Dave/Generated/FREERTOS/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 187:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 188:../Dave/Generated/FREERTOS/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 189:../Dave/Generated/FREERTOS/event_groups.c **** 				event group was allocated statically in case the event group is
 190:../Dave/Generated/FREERTOS/event_groups.c **** 				later deleted. */
 191:../Dave/Generated/FREERTOS/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 192:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 193:../Dave/Generated/FREERTOS/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 194:../Dave/Generated/FREERTOS/event_groups.c **** 
 195:../Dave/Generated/FREERTOS/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 196:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 197:../Dave/Generated/FREERTOS/event_groups.c **** 		else
 198:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 199:../Dave/Generated/FREERTOS/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 200:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 201:../Dave/Generated/FREERTOS/event_groups.c **** 
 202:../Dave/Generated/FREERTOS/event_groups.c **** 		return ( EventGroupHandle_t ) pxEventBits;
 203:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 204:../Dave/Generated/FREERTOS/event_groups.c **** 
 205:../Dave/Generated/FREERTOS/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 206:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 207:../Dave/Generated/FREERTOS/event_groups.c **** 
 208:../Dave/Generated/FREERTOS/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 209:../Dave/Generated/FREERTOS/event_groups.c **** {
 210:../Dave/Generated/FREERTOS/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 211:../Dave/Generated/FREERTOS/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 212:../Dave/Generated/FREERTOS/event_groups.c **** BaseType_t xAlreadyYielded;
 213:../Dave/Generated/FREERTOS/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 214:../Dave/Generated/FREERTOS/event_groups.c **** 
 215:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 216:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 217:../Dave/Generated/FREERTOS/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 218:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 219:../Dave/Generated/FREERTOS/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 220:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 221:../Dave/Generated/FREERTOS/event_groups.c **** 	#endif
 222:../Dave/Generated/FREERTOS/event_groups.c **** 
 223:../Dave/Generated/FREERTOS/event_groups.c **** 	vTaskSuspendAll();
 224:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 225:../Dave/Generated/FREERTOS/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 226:../Dave/Generated/FREERTOS/event_groups.c **** 
 227:../Dave/Generated/FREERTOS/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 228:../Dave/Generated/FREERTOS/event_groups.c **** 
 229:../Dave/Generated/FREERTOS/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 230:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 231:../Dave/Generated/FREERTOS/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 232:../Dave/Generated/FREERTOS/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 233:../Dave/Generated/FREERTOS/event_groups.c **** 
 234:../Dave/Generated/FREERTOS/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 235:../Dave/Generated/FREERTOS/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 236:../Dave/Generated/FREERTOS/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 237:../Dave/Generated/FREERTOS/event_groups.c **** 
 238:../Dave/Generated/FREERTOS/event_groups.c **** 			xTicksToWait = 0;
 239:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 240:../Dave/Generated/FREERTOS/event_groups.c **** 		else
 241:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 242:../Dave/Generated/FREERTOS/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 243:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 244:../Dave/Generated/FREERTOS/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 245:../Dave/Generated/FREERTOS/event_groups.c **** 
 246:../Dave/Generated/FREERTOS/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 247:../Dave/Generated/FREERTOS/event_groups.c **** 				task's event list item so the kernel knows when a match is
 248:../Dave/Generated/FREERTOS/event_groups.c **** 				found.  Then enter the blocked state. */
 249:../Dave/Generated/FREERTOS/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 250:../Dave/Generated/FREERTOS/event_groups.c **** 
 251:../Dave/Generated/FREERTOS/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 252:../Dave/Generated/FREERTOS/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 253:../Dave/Generated/FREERTOS/event_groups.c **** 				warning about uxReturn being returned without being set if the
 254:../Dave/Generated/FREERTOS/event_groups.c **** 				assignment is omitted. */
 255:../Dave/Generated/FREERTOS/event_groups.c **** 				uxReturn = 0;
 256:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 257:../Dave/Generated/FREERTOS/event_groups.c **** 			else
 258:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 259:../Dave/Generated/FREERTOS/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 260:../Dave/Generated/FREERTOS/event_groups.c **** 				specified - just return the current event bit value. */
 261:../Dave/Generated/FREERTOS/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 262:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 263:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 264:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 265:../Dave/Generated/FREERTOS/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 266:../Dave/Generated/FREERTOS/event_groups.c **** 
 267:../Dave/Generated/FREERTOS/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 268:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 269:../Dave/Generated/FREERTOS/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 270:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 271:../Dave/Generated/FREERTOS/event_groups.c **** 			portYIELD_WITHIN_API();
 272:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 273:../Dave/Generated/FREERTOS/event_groups.c **** 		else
 274:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 275:../Dave/Generated/FREERTOS/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 276:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 277:../Dave/Generated/FREERTOS/event_groups.c **** 
 278:../Dave/Generated/FREERTOS/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 279:../Dave/Generated/FREERTOS/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 280:../Dave/Generated/FREERTOS/event_groups.c **** 		the required bits were set they will have been stored in the task's
 281:../Dave/Generated/FREERTOS/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 282:../Dave/Generated/FREERTOS/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 283:../Dave/Generated/FREERTOS/event_groups.c **** 
 284:../Dave/Generated/FREERTOS/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 285:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 286:../Dave/Generated/FREERTOS/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 287:../Dave/Generated/FREERTOS/event_groups.c **** 			taskENTER_CRITICAL();
 288:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 289:../Dave/Generated/FREERTOS/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 290:../Dave/Generated/FREERTOS/event_groups.c **** 
 291:../Dave/Generated/FREERTOS/event_groups.c **** 				/* Although the task got here because it timed out before the
 292:../Dave/Generated/FREERTOS/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 293:../Dave/Generated/FREERTOS/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 294:../Dave/Generated/FREERTOS/event_groups.c **** 				then it needs to clear the bits before exiting. */
 295:../Dave/Generated/FREERTOS/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 296:../Dave/Generated/FREERTOS/event_groups.c **** 				{
 297:../Dave/Generated/FREERTOS/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 298:../Dave/Generated/FREERTOS/event_groups.c **** 				}
 299:../Dave/Generated/FREERTOS/event_groups.c **** 				else
 300:../Dave/Generated/FREERTOS/event_groups.c **** 				{
 301:../Dave/Generated/FREERTOS/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 302:../Dave/Generated/FREERTOS/event_groups.c **** 				}
 303:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 304:../Dave/Generated/FREERTOS/event_groups.c **** 			taskEXIT_CRITICAL();
 305:../Dave/Generated/FREERTOS/event_groups.c **** 
 306:../Dave/Generated/FREERTOS/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 307:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 308:../Dave/Generated/FREERTOS/event_groups.c **** 		else
 309:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 310:../Dave/Generated/FREERTOS/event_groups.c **** 			/* The task unblocked because the bits were set. */
 311:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 312:../Dave/Generated/FREERTOS/event_groups.c **** 
 313:../Dave/Generated/FREERTOS/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 314:../Dave/Generated/FREERTOS/event_groups.c **** 		returned. */
 315:../Dave/Generated/FREERTOS/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 316:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 317:../Dave/Generated/FREERTOS/event_groups.c **** 
 318:../Dave/Generated/FREERTOS/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 319:../Dave/Generated/FREERTOS/event_groups.c **** 
 320:../Dave/Generated/FREERTOS/event_groups.c **** 	return uxReturn;
 321:../Dave/Generated/FREERTOS/event_groups.c **** }
 322:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 323:../Dave/Generated/FREERTOS/event_groups.c **** 
 324:../Dave/Generated/FREERTOS/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 325:../Dave/Generated/FREERTOS/event_groups.c **** {
 326:../Dave/Generated/FREERTOS/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 327:../Dave/Generated/FREERTOS/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 328:../Dave/Generated/FREERTOS/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 329:../Dave/Generated/FREERTOS/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 330:../Dave/Generated/FREERTOS/event_groups.c **** 
 331:../Dave/Generated/FREERTOS/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 332:../Dave/Generated/FREERTOS/event_groups.c **** 	itself, and that at least one bit is being requested. */
 333:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( xEventGroup );
 334:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 335:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 336:../Dave/Generated/FREERTOS/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 337:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 338:../Dave/Generated/FREERTOS/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 339:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 340:../Dave/Generated/FREERTOS/event_groups.c **** 	#endif
 341:../Dave/Generated/FREERTOS/event_groups.c **** 
 342:../Dave/Generated/FREERTOS/event_groups.c **** 	vTaskSuspendAll();
 343:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 344:../Dave/Generated/FREERTOS/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 345:../Dave/Generated/FREERTOS/event_groups.c **** 
 346:../Dave/Generated/FREERTOS/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 347:../Dave/Generated/FREERTOS/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 348:../Dave/Generated/FREERTOS/event_groups.c **** 
 349:../Dave/Generated/FREERTOS/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 350:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 351:../Dave/Generated/FREERTOS/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 352:../Dave/Generated/FREERTOS/event_groups.c **** 			block. */
 353:../Dave/Generated/FREERTOS/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 354:../Dave/Generated/FREERTOS/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 355:../Dave/Generated/FREERTOS/event_groups.c **** 
 356:../Dave/Generated/FREERTOS/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 357:../Dave/Generated/FREERTOS/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 358:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 359:../Dave/Generated/FREERTOS/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 360:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 361:../Dave/Generated/FREERTOS/event_groups.c **** 			else
 362:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 363:../Dave/Generated/FREERTOS/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 364:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 365:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 366:../Dave/Generated/FREERTOS/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 367:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 368:../Dave/Generated/FREERTOS/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 369:../Dave/Generated/FREERTOS/event_groups.c **** 			specified, so just return the current value. */
 370:../Dave/Generated/FREERTOS/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 371:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 372:../Dave/Generated/FREERTOS/event_groups.c **** 		else
 373:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 374:../Dave/Generated/FREERTOS/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 375:../Dave/Generated/FREERTOS/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 376:../Dave/Generated/FREERTOS/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 377:../Dave/Generated/FREERTOS/event_groups.c **** 			unblock the task. */
 378:../Dave/Generated/FREERTOS/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 379:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 380:../Dave/Generated/FREERTOS/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 381:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 382:../Dave/Generated/FREERTOS/event_groups.c **** 			else
 383:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 384:../Dave/Generated/FREERTOS/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 385:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 386:../Dave/Generated/FREERTOS/event_groups.c **** 
 387:../Dave/Generated/FREERTOS/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 388:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 389:../Dave/Generated/FREERTOS/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 390:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 391:../Dave/Generated/FREERTOS/event_groups.c **** 			else
 392:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 393:../Dave/Generated/FREERTOS/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 394:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 395:../Dave/Generated/FREERTOS/event_groups.c **** 
 396:../Dave/Generated/FREERTOS/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 397:../Dave/Generated/FREERTOS/event_groups.c **** 			task's event list item so the kernel knows when a match is
 398:../Dave/Generated/FREERTOS/event_groups.c **** 			found.  Then enter the blocked state. */
 399:../Dave/Generated/FREERTOS/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 400:../Dave/Generated/FREERTOS/event_groups.c **** 
 401:../Dave/Generated/FREERTOS/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 402:../Dave/Generated/FREERTOS/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 403:../Dave/Generated/FREERTOS/event_groups.c **** 			being returned without being set if it is not done. */
 404:../Dave/Generated/FREERTOS/event_groups.c **** 			uxReturn = 0;
 405:../Dave/Generated/FREERTOS/event_groups.c **** 
 406:../Dave/Generated/FREERTOS/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 407:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 408:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 409:../Dave/Generated/FREERTOS/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 410:../Dave/Generated/FREERTOS/event_groups.c **** 
 411:../Dave/Generated/FREERTOS/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 412:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 413:../Dave/Generated/FREERTOS/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 414:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 415:../Dave/Generated/FREERTOS/event_groups.c **** 			portYIELD_WITHIN_API();
 416:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 417:../Dave/Generated/FREERTOS/event_groups.c **** 		else
 418:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 419:../Dave/Generated/FREERTOS/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 420:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 421:../Dave/Generated/FREERTOS/event_groups.c **** 
 422:../Dave/Generated/FREERTOS/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 423:../Dave/Generated/FREERTOS/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 424:../Dave/Generated/FREERTOS/event_groups.c **** 		the required bits were set they will have been stored in the task's
 425:../Dave/Generated/FREERTOS/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 426:../Dave/Generated/FREERTOS/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 427:../Dave/Generated/FREERTOS/event_groups.c **** 
 428:../Dave/Generated/FREERTOS/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 429:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 430:../Dave/Generated/FREERTOS/event_groups.c **** 			taskENTER_CRITICAL();
 431:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 432:../Dave/Generated/FREERTOS/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 433:../Dave/Generated/FREERTOS/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 434:../Dave/Generated/FREERTOS/event_groups.c **** 
 435:../Dave/Generated/FREERTOS/event_groups.c **** 				/* It is possible that the event bits were updated between this
 436:../Dave/Generated/FREERTOS/event_groups.c **** 				task leaving the Blocked state and running again. */
 437:../Dave/Generated/FREERTOS/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 438:../Dave/Generated/FREERTOS/event_groups.c **** 				{
 439:../Dave/Generated/FREERTOS/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 440:../Dave/Generated/FREERTOS/event_groups.c **** 					{
 441:../Dave/Generated/FREERTOS/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 442:../Dave/Generated/FREERTOS/event_groups.c **** 					}
 443:../Dave/Generated/FREERTOS/event_groups.c **** 					else
 444:../Dave/Generated/FREERTOS/event_groups.c **** 					{
 445:../Dave/Generated/FREERTOS/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 446:../Dave/Generated/FREERTOS/event_groups.c **** 					}
 447:../Dave/Generated/FREERTOS/event_groups.c **** 				}
 448:../Dave/Generated/FREERTOS/event_groups.c **** 				else
 449:../Dave/Generated/FREERTOS/event_groups.c **** 				{
 450:../Dave/Generated/FREERTOS/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 451:../Dave/Generated/FREERTOS/event_groups.c **** 				}
 452:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 453:../Dave/Generated/FREERTOS/event_groups.c **** 			taskEXIT_CRITICAL();
 454:../Dave/Generated/FREERTOS/event_groups.c **** 
 455:../Dave/Generated/FREERTOS/event_groups.c **** 			/* Prevent compiler warnings when trace macros are not used. */
 456:../Dave/Generated/FREERTOS/event_groups.c **** 			xTimeoutOccurred = pdFALSE;
 457:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 458:../Dave/Generated/FREERTOS/event_groups.c **** 		else
 459:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 460:../Dave/Generated/FREERTOS/event_groups.c **** 			/* The task unblocked because the bits were set. */
 461:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 462:../Dave/Generated/FREERTOS/event_groups.c **** 
 463:../Dave/Generated/FREERTOS/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 464:../Dave/Generated/FREERTOS/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 465:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 466:../Dave/Generated/FREERTOS/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 467:../Dave/Generated/FREERTOS/event_groups.c **** 
 468:../Dave/Generated/FREERTOS/event_groups.c **** 	return uxReturn;
 469:../Dave/Generated/FREERTOS/event_groups.c **** }
 470:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 471:../Dave/Generated/FREERTOS/event_groups.c **** 
 472:../Dave/Generated/FREERTOS/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 473:../Dave/Generated/FREERTOS/event_groups.c **** {
 474:../Dave/Generated/FREERTOS/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 475:../Dave/Generated/FREERTOS/event_groups.c **** EventBits_t uxReturn;
 476:../Dave/Generated/FREERTOS/event_groups.c **** 
 477:../Dave/Generated/FREERTOS/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 478:../Dave/Generated/FREERTOS/event_groups.c **** 	itself. */
 479:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( xEventGroup );
 480:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 481:../Dave/Generated/FREERTOS/event_groups.c **** 
 482:../Dave/Generated/FREERTOS/event_groups.c **** 	taskENTER_CRITICAL();
 483:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 484:../Dave/Generated/FREERTOS/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 485:../Dave/Generated/FREERTOS/event_groups.c **** 
 486:../Dave/Generated/FREERTOS/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 487:../Dave/Generated/FREERTOS/event_groups.c **** 		cleared. */
 488:../Dave/Generated/FREERTOS/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 489:../Dave/Generated/FREERTOS/event_groups.c **** 
 490:../Dave/Generated/FREERTOS/event_groups.c **** 		/* Clear the bits. */
 491:../Dave/Generated/FREERTOS/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 492:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 493:../Dave/Generated/FREERTOS/event_groups.c **** 	taskEXIT_CRITICAL();
 494:../Dave/Generated/FREERTOS/event_groups.c **** 
 495:../Dave/Generated/FREERTOS/event_groups.c **** 	return uxReturn;
 496:../Dave/Generated/FREERTOS/event_groups.c **** }
 497:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 498:../Dave/Generated/FREERTOS/event_groups.c **** 
 499:../Dave/Generated/FREERTOS/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 500:../Dave/Generated/FREERTOS/event_groups.c **** 
 501:../Dave/Generated/FREERTOS/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 502:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 503:../Dave/Generated/FREERTOS/event_groups.c **** 		BaseType_t xReturn;
 504:../Dave/Generated/FREERTOS/event_groups.c **** 
 505:../Dave/Generated/FREERTOS/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 506:../Dave/Generated/FREERTOS/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 507:../Dave/Generated/FREERTOS/event_groups.c **** 
 508:../Dave/Generated/FREERTOS/event_groups.c **** 		return xReturn;
 509:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 510:../Dave/Generated/FREERTOS/event_groups.c **** 
 511:../Dave/Generated/FREERTOS/event_groups.c **** #endif
 512:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 513:../Dave/Generated/FREERTOS/event_groups.c **** 
 514:../Dave/Generated/FREERTOS/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 515:../Dave/Generated/FREERTOS/event_groups.c **** {
 516:../Dave/Generated/FREERTOS/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 517:../Dave/Generated/FREERTOS/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 518:../Dave/Generated/FREERTOS/event_groups.c **** EventBits_t uxReturn;
 519:../Dave/Generated/FREERTOS/event_groups.c **** 
 520:../Dave/Generated/FREERTOS/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 521:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 522:../Dave/Generated/FREERTOS/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 523:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 524:../Dave/Generated/FREERTOS/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 525:../Dave/Generated/FREERTOS/event_groups.c **** 
 526:../Dave/Generated/FREERTOS/event_groups.c **** 	return uxReturn;
 527:../Dave/Generated/FREERTOS/event_groups.c **** }
 528:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 529:../Dave/Generated/FREERTOS/event_groups.c **** 
 530:../Dave/Generated/FREERTOS/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
  27              	 .loc 1 530 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	.LVL0:
  32 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 24
  35              	 .cfi_offset 3,-24
  36              	 .cfi_offset 4,-20
  37              	 .cfi_offset 5,-16
  38              	 .cfi_offset 6,-12
  39              	 .cfi_offset 7,-8
  40              	 .cfi_offset 14,-4
  41              	 .loc 1 530 0
  42 0002 0546     	 mov r5,r0
  43              	.LVL1:
  44 0004 0C46     	 mov r4,r1
 531:../Dave/Generated/FREERTOS/event_groups.c **** {
 532:../Dave/Generated/FREERTOS/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 533:../Dave/Generated/FREERTOS/event_groups.c **** ListItem_t const *pxListEnd;
 534:../Dave/Generated/FREERTOS/event_groups.c **** List_t *pxList;
 535:../Dave/Generated/FREERTOS/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 536:../Dave/Generated/FREERTOS/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 537:../Dave/Generated/FREERTOS/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 538:../Dave/Generated/FREERTOS/event_groups.c **** 
 539:../Dave/Generated/FREERTOS/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 540:../Dave/Generated/FREERTOS/event_groups.c **** 	itself. */
 541:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( xEventGroup );
 542:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 543:../Dave/Generated/FREERTOS/event_groups.c **** 
 544:../Dave/Generated/FREERTOS/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 545:../Dave/Generated/FREERTOS/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as th
 546:../Dave/Generated/FREERTOS/event_groups.c **** 	vTaskSuspendAll();
  45              	 .loc 1 546 0
  46 0006 FFF7FEFF 	 bl vTaskSuspendAll
  47              	.LVL2:
 547:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 548:../Dave/Generated/FREERTOS/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 549:../Dave/Generated/FREERTOS/event_groups.c **** 
 550:../Dave/Generated/FREERTOS/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 551:../Dave/Generated/FREERTOS/event_groups.c **** 
 552:../Dave/Generated/FREERTOS/event_groups.c **** 		/* Set the bits. */
 553:../Dave/Generated/FREERTOS/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
  48              	 .loc 1 553 0
  49 000a 2968     	 ldr r1,[r5]
 550:../Dave/Generated/FREERTOS/event_groups.c **** 
  50              	 .loc 1 550 0
  51 000c 2869     	 ldr r0,[r5,#16]
  52              	 .loc 1 553 0
  53 000e 0C43     	 orrs r4,r4,r1
  54              	.LVL3:
  55 0010 2C60     	 str r4,[r5]
 545:../Dave/Generated/FREERTOS/event_groups.c **** 	vTaskSuspendAll();
  56              	 .loc 1 545 0
  57 0012 05F10C06 	 add r6,r5,#12
  58              	.LVL4:
 535:../Dave/Generated/FREERTOS/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
  59              	 .loc 1 535 0
  60 0016 0027     	 movs r7,#0
  61              	.LVL5:
  62              	.L2:
 554:../Dave/Generated/FREERTOS/event_groups.c **** 
 555:../Dave/Generated/FREERTOS/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 556:../Dave/Generated/FREERTOS/event_groups.c **** 		while( pxListItem != pxListEnd )
  63              	 .loc 1 556 0
  64 0018 8642     	 cmp r6,r0
  65 001a 2968     	 ldr r1,[r5]
  66 001c 16D0     	 beq .L13
 557:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 558:../Dave/Generated/FREERTOS/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
  67              	 .loc 1 558 0
  68 001e 90E81800 	 ldmia r0,{r3,r4}
  69              	.LVL6:
 559:../Dave/Generated/FREERTOS/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 560:../Dave/Generated/FREERTOS/event_groups.c **** 			xMatchFound = pdFALSE;
 561:../Dave/Generated/FREERTOS/event_groups.c **** 
 562:../Dave/Generated/FREERTOS/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 563:../Dave/Generated/FREERTOS/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 564:../Dave/Generated/FREERTOS/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 565:../Dave/Generated/FREERTOS/event_groups.c **** 
 566:../Dave/Generated/FREERTOS/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
  70              	 .loc 1 566 0
  71 0022 13F0806F 	 tst r3,#67108864
 564:../Dave/Generated/FREERTOS/event_groups.c **** 
  72              	 .loc 1 564 0
  73 0026 23F07F42 	 bic r2,r3,#-16777216
  74              	.LVL7:
  75              	 .loc 1 566 0
  76 002a 02D1     	 bne .L3
 567:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 568:../Dave/Generated/FREERTOS/event_groups.c **** 				/* Just looking for single bit being set. */
 569:../Dave/Generated/FREERTOS/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
  77              	 .loc 1 569 0
  78 002c 0A42     	 tst r2,r1
  79 002e 04D1     	 bne .L4
  80 0030 0AE0     	 b .L5
  81              	.L3:
 570:../Dave/Generated/FREERTOS/event_groups.c **** 				{
 571:../Dave/Generated/FREERTOS/event_groups.c **** 					xMatchFound = pdTRUE;
 572:../Dave/Generated/FREERTOS/event_groups.c **** 				}
 573:../Dave/Generated/FREERTOS/event_groups.c **** 				else
 574:../Dave/Generated/FREERTOS/event_groups.c **** 				{
 575:../Dave/Generated/FREERTOS/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 576:../Dave/Generated/FREERTOS/event_groups.c **** 				}
 577:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 578:../Dave/Generated/FREERTOS/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
  82              	 .loc 1 578 0
  83 0032 02EA010E 	 and lr,r2,r1
  84 0036 7245     	 cmp r2,lr
  85 0038 06D1     	 bne .L5
  86              	.L4:
  87              	.LVL8:
 579:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 580:../Dave/Generated/FREERTOS/event_groups.c **** 				/* All bits are set. */
 581:../Dave/Generated/FREERTOS/event_groups.c **** 				xMatchFound = pdTRUE;
 582:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 583:../Dave/Generated/FREERTOS/event_groups.c **** 			else
 584:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 585:../Dave/Generated/FREERTOS/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 586:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 587:../Dave/Generated/FREERTOS/event_groups.c **** 
 588:../Dave/Generated/FREERTOS/event_groups.c **** 			if( xMatchFound != pdFALSE )
 589:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 590:../Dave/Generated/FREERTOS/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 591:../Dave/Generated/FREERTOS/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
  88              	 .loc 1 591 0
  89 003a DB01     	 lsls r3,r3,#7
  90              	.LVL9:
  91 003c 00D5     	 bpl .L8
 592:../Dave/Generated/FREERTOS/event_groups.c **** 				{
 593:../Dave/Generated/FREERTOS/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
  92              	 .loc 1 593 0
  93 003e 1743     	 orrs r7,r7,r2
  94              	.LVL10:
  95              	.L8:
 594:../Dave/Generated/FREERTOS/event_groups.c **** 				}
 595:../Dave/Generated/FREERTOS/event_groups.c **** 				else
 596:../Dave/Generated/FREERTOS/event_groups.c **** 				{
 597:../Dave/Generated/FREERTOS/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 598:../Dave/Generated/FREERTOS/event_groups.c **** 				}
 599:../Dave/Generated/FREERTOS/event_groups.c **** 
 600:../Dave/Generated/FREERTOS/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 601:../Dave/Generated/FREERTOS/event_groups.c **** 				item before removing the task from the event list.  The
 602:../Dave/Generated/FREERTOS/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 603:../Dave/Generated/FREERTOS/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 604:../Dave/Generated/FREERTOS/event_groups.c **** 				than because it timed out. */
 605:../Dave/Generated/FREERTOS/event_groups.c **** 				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCK
  96              	 .loc 1 605 0
  97 0040 41F00071 	 orr r1,r1,#33554432
  98 0044 FFF7FEFF 	 bl xTaskRemoveFromUnorderedEventList
  99              	.LVL11:
 100              	.L5:
 530:../Dave/Generated/FREERTOS/event_groups.c **** {
 101              	 .loc 1 530 0
 102 0048 2046     	 mov r0,r4
 103 004a E5E7     	 b .L2
 104              	.LVL12:
 105              	.L13:
 606:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 607:../Dave/Generated/FREERTOS/event_groups.c **** 
 608:../Dave/Generated/FREERTOS/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 609:../Dave/Generated/FREERTOS/event_groups.c **** 			used here as the list item may have been removed from the event list
 610:../Dave/Generated/FREERTOS/event_groups.c **** 			and inserted into the ready/pending reading list. */
 611:../Dave/Generated/FREERTOS/event_groups.c **** 			pxListItem = pxNext;
 612:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 613:../Dave/Generated/FREERTOS/event_groups.c **** 
 614:../Dave/Generated/FREERTOS/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 615:../Dave/Generated/FREERTOS/event_groups.c **** 		bit was set in the control word. */
 616:../Dave/Generated/FREERTOS/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 106              	 .loc 1 616 0
 107 004c 21EA0701 	 bic r1,r1,r7
 108 0050 2960     	 str r1,[r5]
 617:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 618:../Dave/Generated/FREERTOS/event_groups.c **** 	( void ) xTaskResumeAll();
 109              	 .loc 1 618 0
 110 0052 FFF7FEFF 	 bl xTaskResumeAll
 111              	.LVL13:
 619:../Dave/Generated/FREERTOS/event_groups.c **** 
 620:../Dave/Generated/FREERTOS/event_groups.c **** 	return pxEventBits->uxEventBits;
 112              	 .loc 1 620 0
 113 0056 2868     	 ldr r0,[r5]
 621:../Dave/Generated/FREERTOS/event_groups.c **** }
 114              	 .loc 1 621 0
 115 0058 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 116              	 .cfi_endproc
 117              	.LFE141:
 119 005a 00BF     	 .section .text.vEventGroupClearBitsCallback,"ax",%progbits
 120              	 .align 2
 121              	 .global vEventGroupClearBitsCallback
 122              	 .thumb
 123              	 .thumb_func
 125              	vEventGroupClearBitsCallback:
 126              	.LFB137:
 622:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 623:../Dave/Generated/FREERTOS/event_groups.c **** 
 624:../Dave/Generated/FREERTOS/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 625:../Dave/Generated/FREERTOS/event_groups.c **** {
 626:../Dave/Generated/FREERTOS/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 627:../Dave/Generated/FREERTOS/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 628:../Dave/Generated/FREERTOS/event_groups.c **** 
 629:../Dave/Generated/FREERTOS/event_groups.c **** 	vTaskSuspendAll();
 630:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 631:../Dave/Generated/FREERTOS/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 632:../Dave/Generated/FREERTOS/event_groups.c **** 
 633:../Dave/Generated/FREERTOS/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 634:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 635:../Dave/Generated/FREERTOS/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 636:../Dave/Generated/FREERTOS/event_groups.c **** 			and	cannot therefore have any bits set. */
 637:../Dave/Generated/FREERTOS/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBit
 638:../Dave/Generated/FREERTOS/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 639:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 640:../Dave/Generated/FREERTOS/event_groups.c **** 
 641:../Dave/Generated/FREERTOS/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 642:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 643:../Dave/Generated/FREERTOS/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 644:../Dave/Generated/FREERTOS/event_groups.c **** 			it again. */
 645:../Dave/Generated/FREERTOS/event_groups.c **** 			vPortFree( pxEventBits );
 646:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 647:../Dave/Generated/FREERTOS/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 648:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 649:../Dave/Generated/FREERTOS/event_groups.c **** 			/* The event group could have been allocated statically or
 650:../Dave/Generated/FREERTOS/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 651:../Dave/Generated/FREERTOS/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 652:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 653:../Dave/Generated/FREERTOS/event_groups.c **** 				vPortFree( pxEventBits );
 654:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 655:../Dave/Generated/FREERTOS/event_groups.c **** 			else
 656:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 657:../Dave/Generated/FREERTOS/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 658:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 659:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 660:../Dave/Generated/FREERTOS/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 661:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 662:../Dave/Generated/FREERTOS/event_groups.c **** 	( void ) xTaskResumeAll();
 663:../Dave/Generated/FREERTOS/event_groups.c **** }
 664:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 665:../Dave/Generated/FREERTOS/event_groups.c **** 
 666:../Dave/Generated/FREERTOS/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 667:../Dave/Generated/FREERTOS/event_groups.c **** an interrupt. */
 668:../Dave/Generated/FREERTOS/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 669:../Dave/Generated/FREERTOS/event_groups.c **** {
 670:../Dave/Generated/FREERTOS/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 671:../Dave/Generated/FREERTOS/event_groups.c **** }
 672:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 673:../Dave/Generated/FREERTOS/event_groups.c **** 
 674:../Dave/Generated/FREERTOS/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 675:../Dave/Generated/FREERTOS/event_groups.c **** an interrupt. */
 676:../Dave/Generated/FREERTOS/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 677:../Dave/Generated/FREERTOS/event_groups.c **** {
 127              	 .loc 1 677 0
 128              	 .cfi_startproc
 129              	 
 130              	 
 131              	.LVL14:
 132 0000 38B5     	 push {r3,r4,r5,lr}
 133              	.LCFI1:
 134              	 .cfi_def_cfa_offset 16
 135              	 .cfi_offset 3,-16
 136              	 .cfi_offset 4,-12
 137              	 .cfi_offset 5,-8
 138              	 .cfi_offset 14,-4
 139              	.LBB45:
 140              	.LBB46:
 479:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 141              	 .loc 1 479 0
 142 0002 B8B1     	 cbz r0,.L20
 480:../Dave/Generated/FREERTOS/event_groups.c **** 
 143              	 .loc 1 480 0
 144 0004 11F07F4F 	 tst r1,#-16777216
 145 0008 08D0     	 beq .L17
 146              	.LBB47:
 147              	.LBB48:
 148              	 .file 2 "../Dave/Generated/FREERTOS/portmacro.h"
   1:../Dave/Generated/FREERTOS/portmacro.h **** /*
   2:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Dave/Generated/FREERTOS/portmacro.h ****     All rights reserved
   4:../Dave/Generated/FREERTOS/portmacro.h **** 
   5:../Dave/Generated/FREERTOS/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Dave/Generated/FREERTOS/portmacro.h **** 
   7:../Dave/Generated/FREERTOS/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:../Dave/Generated/FREERTOS/portmacro.h **** 
   9:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Dave/Generated/FREERTOS/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Dave/Generated/FREERTOS/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Dave/Generated/FREERTOS/portmacro.h **** 
  13:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  14:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Dave/Generated/FREERTOS/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  19:../Dave/Generated/FREERTOS/portmacro.h **** 
  20:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Dave/Generated/FREERTOS/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Dave/Generated/FREERTOS/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Dave/Generated/FREERTOS/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:../Dave/Generated/FREERTOS/portmacro.h **** 
  25:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  26:../Dave/Generated/FREERTOS/portmacro.h ****      *                                                                       *
  27:../Dave/Generated/FREERTOS/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Dave/Generated/FREERTOS/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Dave/Generated/FREERTOS/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:../Dave/Generated/FREERTOS/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:../Dave/Generated/FREERTOS/portmacro.h ****      *                                                                       *
  32:../Dave/Generated/FREERTOS/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Dave/Generated/FREERTOS/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Dave/Generated/FREERTOS/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:../Dave/Generated/FREERTOS/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Dave/Generated/FREERTOS/portmacro.h ****      *                                                                       *
  37:../Dave/Generated/FREERTOS/portmacro.h ****     ***************************************************************************
  38:../Dave/Generated/FREERTOS/portmacro.h **** 
  39:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Dave/Generated/FREERTOS/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Dave/Generated/FREERTOS/portmacro.h ****     defined configASSERT()?
  42:../Dave/Generated/FREERTOS/portmacro.h **** 
  43:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Dave/Generated/FREERTOS/portmacro.h ****     embedded software for free we request you assist our global community by
  45:../Dave/Generated/FREERTOS/portmacro.h ****     participating in the support forum.
  46:../Dave/Generated/FREERTOS/portmacro.h **** 
  47:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Dave/Generated/FREERTOS/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:../Dave/Generated/FREERTOS/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Dave/Generated/FREERTOS/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Dave/Generated/FREERTOS/portmacro.h **** 
  52:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Dave/Generated/FREERTOS/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Dave/Generated/FREERTOS/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Dave/Generated/FREERTOS/portmacro.h **** 
  56:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Dave/Generated/FREERTOS/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Dave/Generated/FREERTOS/portmacro.h **** 
  59:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Dave/Generated/FREERTOS/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Dave/Generated/FREERTOS/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Dave/Generated/FREERTOS/portmacro.h **** 
  63:../Dave/Generated/FREERTOS/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Dave/Generated/FREERTOS/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:../Dave/Generated/FREERTOS/portmacro.h ****     mission critical applications that require provable dependability.
  66:../Dave/Generated/FREERTOS/portmacro.h **** 
  67:../Dave/Generated/FREERTOS/portmacro.h ****     1 tab == 4 spaces!
  68:../Dave/Generated/FREERTOS/portmacro.h **** */
  69:../Dave/Generated/FREERTOS/portmacro.h **** #include "freertos_conf.h"
  70:../Dave/Generated/FREERTOS/portmacro.h **** 
  71:../Dave/Generated/FREERTOS/portmacro.h **** #if FREERTOS_MPU_SUPPORT == 0
  72:../Dave/Generated/FREERTOS/portmacro.h **** 
  73:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef PORTMACRO_H
  74:../Dave/Generated/FREERTOS/portmacro.h **** #define PORTMACRO_H
  75:../Dave/Generated/FREERTOS/portmacro.h **** 
  76:../Dave/Generated/FREERTOS/portmacro.h **** #ifdef __cplusplus
  77:../Dave/Generated/FREERTOS/portmacro.h **** extern "C" {
  78:../Dave/Generated/FREERTOS/portmacro.h **** #endif
  79:../Dave/Generated/FREERTOS/portmacro.h **** 
  80:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------
  81:../Dave/Generated/FREERTOS/portmacro.h ****  * Port specific definitions.
  82:../Dave/Generated/FREERTOS/portmacro.h ****  *
  83:../Dave/Generated/FREERTOS/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  84:../Dave/Generated/FREERTOS/portmacro.h ****  * given hardware and compiler.
  85:../Dave/Generated/FREERTOS/portmacro.h ****  *
  86:../Dave/Generated/FREERTOS/portmacro.h ****  * These settings should not be altered.
  87:../Dave/Generated/FREERTOS/portmacro.h ****  *-----------------------------------------------------------
  88:../Dave/Generated/FREERTOS/portmacro.h ****  */
  89:../Dave/Generated/FREERTOS/portmacro.h **** 
  90:../Dave/Generated/FREERTOS/portmacro.h **** #if defined( __GNUC__ )
  91:../Dave/Generated/FREERTOS/portmacro.h **** /* Type definitions. */
  92:../Dave/Generated/FREERTOS/portmacro.h **** #define portCHAR		char
  93:../Dave/Generated/FREERTOS/portmacro.h **** #define portFLOAT		float
  94:../Dave/Generated/FREERTOS/portmacro.h **** #define portDOUBLE		double
  95:../Dave/Generated/FREERTOS/portmacro.h **** #define portLONG		long
  96:../Dave/Generated/FREERTOS/portmacro.h **** #define portSHORT		short
  97:../Dave/Generated/FREERTOS/portmacro.h **** #define portSTACK_TYPE	uint32_t
  98:../Dave/Generated/FREERTOS/portmacro.h **** #define portBASE_TYPE	long
  99:../Dave/Generated/FREERTOS/portmacro.h **** 
 100:../Dave/Generated/FREERTOS/portmacro.h **** typedef portSTACK_TYPE StackType_t;
 101:../Dave/Generated/FREERTOS/portmacro.h **** typedef long BaseType_t;
 102:../Dave/Generated/FREERTOS/portmacro.h **** typedef unsigned long UBaseType_t;
 103:../Dave/Generated/FREERTOS/portmacro.h **** 
 104:../Dave/Generated/FREERTOS/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 105:../Dave/Generated/FREERTOS/portmacro.h **** 	typedef uint16_t TickType_t;
 106:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 107:../Dave/Generated/FREERTOS/portmacro.h **** #else
 108:../Dave/Generated/FREERTOS/portmacro.h **** 	typedef uint32_t TickType_t;
 109:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 110:../Dave/Generated/FREERTOS/portmacro.h **** 
 111:../Dave/Generated/FREERTOS/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 112:../Dave/Generated/FREERTOS/portmacro.h **** 	not need to be guarded with a critical section. */
 113:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 114:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 115:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 116:../Dave/Generated/FREERTOS/portmacro.h **** 
 117:../Dave/Generated/FREERTOS/portmacro.h **** /* Architecture specifics. */
 118:../Dave/Generated/FREERTOS/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 119:../Dave/Generated/FREERTOS/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 120:../Dave/Generated/FREERTOS/portmacro.h **** #define portBYTE_ALIGNMENT			8
 121:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 122:../Dave/Generated/FREERTOS/portmacro.h **** 
 123:../Dave/Generated/FREERTOS/portmacro.h **** /* Scheduler utilities. */
 124:../Dave/Generated/FREERTOS/portmacro.h **** #define portYIELD() 															\
 125:../Dave/Generated/FREERTOS/portmacro.h **** {																				\
 126:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 127:../Dave/Generated/FREERTOS/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 128:../Dave/Generated/FREERTOS/portmacro.h **** 																				\
 129:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 130:../Dave/Generated/FREERTOS/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 131:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile( "dsb" );													\
 132:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile( "isb" );													\
 133:../Dave/Generated/FREERTOS/portmacro.h **** }
 134:../Dave/Generated/FREERTOS/portmacro.h **** 
 135:../Dave/Generated/FREERTOS/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 136:../Dave/Generated/FREERTOS/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 137:../Dave/Generated/FREERTOS/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 138:../Dave/Generated/FREERTOS/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 139:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 140:../Dave/Generated/FREERTOS/portmacro.h **** 
 141:../Dave/Generated/FREERTOS/portmacro.h **** /* Critical section management. */
 142:../Dave/Generated/FREERTOS/portmacro.h **** extern void vPortEnterCritical( void );
 143:../Dave/Generated/FREERTOS/portmacro.h **** extern void vPortExitCritical( void );
 144:../Dave/Generated/FREERTOS/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 145:../Dave/Generated/FREERTOS/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 146:../Dave/Generated/FREERTOS/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 147:../Dave/Generated/FREERTOS/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 148:../Dave/Generated/FREERTOS/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 149:../Dave/Generated/FREERTOS/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 150:../Dave/Generated/FREERTOS/portmacro.h **** 
 151:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 152:../Dave/Generated/FREERTOS/portmacro.h **** 
 153:../Dave/Generated/FREERTOS/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 154:../Dave/Generated/FREERTOS/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 155:../Dave/Generated/FREERTOS/portmacro.h **** (which build with all the ports) will build. */
 156:../Dave/Generated/FREERTOS/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 157:../Dave/Generated/FREERTOS/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 158:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 159:../Dave/Generated/FREERTOS/portmacro.h **** 
 160:../Dave/Generated/FREERTOS/portmacro.h **** /* Tickless idle/low power functionality. */
 161:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 162:../Dave/Generated/FREERTOS/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 163:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 164:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 165:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 166:../Dave/Generated/FREERTOS/portmacro.h **** 
 167:../Dave/Generated/FREERTOS/portmacro.h **** /* Architecture specific optimisations. */
 168:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 169:../Dave/Generated/FREERTOS/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 170:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 171:../Dave/Generated/FREERTOS/portmacro.h **** 
 172:../Dave/Generated/FREERTOS/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 173:../Dave/Generated/FREERTOS/portmacro.h **** 
 174:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Generic helper function. */
 175:../Dave/Generated/FREERTOS/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 176:../Dave/Generated/FREERTOS/portmacro.h **** 	{
 177:../Dave/Generated/FREERTOS/portmacro.h **** 	uint8_t ucReturn;
 178:../Dave/Generated/FREERTOS/portmacro.h **** 
 179:../Dave/Generated/FREERTOS/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 180:../Dave/Generated/FREERTOS/portmacro.h **** 		return ucReturn;
 181:../Dave/Generated/FREERTOS/portmacro.h **** 	}
 182:../Dave/Generated/FREERTOS/portmacro.h **** 
 183:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Check the configuration. */
 184:../Dave/Generated/FREERTOS/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 185:../Dave/Generated/FREERTOS/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 186:../Dave/Generated/FREERTOS/portmacro.h **** 	#endif
 187:../Dave/Generated/FREERTOS/portmacro.h **** 
 188:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 189:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 190:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 191:../Dave/Generated/FREERTOS/portmacro.h **** 
 192:../Dave/Generated/FREERTOS/portmacro.h **** 	/*-----------------------------------------------------------*/
 193:../Dave/Generated/FREERTOS/portmacro.h **** 
 194:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 195:../Dave/Generated/FREERTOS/portmacro.h **** 
 196:../Dave/Generated/FREERTOS/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 197:../Dave/Generated/FREERTOS/portmacro.h **** 
 198:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 199:../Dave/Generated/FREERTOS/portmacro.h **** 
 200:../Dave/Generated/FREERTOS/portmacro.h **** #ifdef configASSERT
 201:../Dave/Generated/FREERTOS/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 202:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 203:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 204:../Dave/Generated/FREERTOS/portmacro.h **** 
 205:../Dave/Generated/FREERTOS/portmacro.h **** /* portNOP() is not required by this port. */
 206:../Dave/Generated/FREERTOS/portmacro.h **** #define portNOP()
 207:../Dave/Generated/FREERTOS/portmacro.h **** 
 208:../Dave/Generated/FREERTOS/portmacro.h **** #define portINLINE	__inline
 209:../Dave/Generated/FREERTOS/portmacro.h **** 
 210:../Dave/Generated/FREERTOS/portmacro.h **** #ifndef portFORCE_INLINE
 211:../Dave/Generated/FREERTOS/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 212:../Dave/Generated/FREERTOS/portmacro.h **** #endif
 213:../Dave/Generated/FREERTOS/portmacro.h **** 
 214:../Dave/Generated/FREERTOS/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 215:../Dave/Generated/FREERTOS/portmacro.h **** {
 216:../Dave/Generated/FREERTOS/portmacro.h **** uint32_t ulCurrentInterrupt;
 217:../Dave/Generated/FREERTOS/portmacro.h **** BaseType_t xReturn;
 218:../Dave/Generated/FREERTOS/portmacro.h **** 
 219:../Dave/Generated/FREERTOS/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 220:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 221:../Dave/Generated/FREERTOS/portmacro.h **** 
 222:../Dave/Generated/FREERTOS/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 223:../Dave/Generated/FREERTOS/portmacro.h **** 	{
 224:../Dave/Generated/FREERTOS/portmacro.h **** 		xReturn = pdFALSE;
 225:../Dave/Generated/FREERTOS/portmacro.h **** 	}
 226:../Dave/Generated/FREERTOS/portmacro.h **** 	else
 227:../Dave/Generated/FREERTOS/portmacro.h **** 	{
 228:../Dave/Generated/FREERTOS/portmacro.h **** 		xReturn = pdTRUE;
 229:../Dave/Generated/FREERTOS/portmacro.h **** 	}
 230:../Dave/Generated/FREERTOS/portmacro.h **** 
 231:../Dave/Generated/FREERTOS/portmacro.h **** 	return xReturn;
 232:../Dave/Generated/FREERTOS/portmacro.h **** }
 233:../Dave/Generated/FREERTOS/portmacro.h **** 
 234:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 235:../Dave/Generated/FREERTOS/portmacro.h **** 
 236:../Dave/Generated/FREERTOS/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 237:../Dave/Generated/FREERTOS/portmacro.h **** {
 238:../Dave/Generated/FREERTOS/portmacro.h **** uint32_t ulNewBASEPRI;
 239:../Dave/Generated/FREERTOS/portmacro.h **** 
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile
 149              	 .loc 2 240 0
 150              	
 151 000a 4FF0FC03 	 mov r3,#252
 152 000e 83F31188 	 msr basepri,r3
 153 0012 BFF36F8F 	 isb 
 154 0016 BFF34F8F 	 dsb 
 155              	
 156              	
 157              	.LVL15:
 158              	 .thumb
 159              	.L18:
 160 001a FEE7     	 b .L18
 161              	.L17:
 162 001c 0446     	 mov r4,r0
 163 001e 0D46     	 mov r5,r1
 164              	.LBE48:
 165              	.LBE47:
 482:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 166              	 .loc 1 482 0
 167 0020 FFF7FEFF 	 bl vPortEnterCritical
 168              	.LVL16:
 491:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 169              	 .loc 1 491 0
 170 0024 2368     	 ldr r3,[r4]
 171 0026 23EA0503 	 bic r3,r3,r5
 172 002a 2360     	 str r3,[r4]
 173              	.LVL17:
 174              	.LBE46:
 175              	.LBE45:
 678:../Dave/Generated/FREERTOS/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 679:../Dave/Generated/FREERTOS/event_groups.c **** }
 176              	 .loc 1 679 0
 177 002c BDE83840 	 pop {r3,r4,r5,lr}
 178              	.LCFI2:
 179              	 .cfi_remember_state
 180              	 .cfi_restore 14
 181              	 .cfi_restore 5
 182              	 .cfi_restore 4
 183              	 .cfi_restore 3
 184              	 .cfi_def_cfa_offset 0
 185              	.LVL18:
 186              	.LBB52:
 187              	.LBB51:
 493:../Dave/Generated/FREERTOS/event_groups.c **** 
 188              	 .loc 1 493 0
 189 0030 FFF7FEBF 	 b vPortExitCritical
 190              	.LVL19:
 191              	.L20:
 192              	.LCFI3:
 193              	 .cfi_restore_state
 194              	.LBB49:
 195              	.LBB50:
 196              	 .loc 2 240 0
 197              	
 198 0034 4FF0FC03 	 mov r3,#252
 199 0038 83F31188 	 msr basepri,r3
 200 003c BFF36F8F 	 isb 
 201 0040 BFF34F8F 	 dsb 
 202              	
 203              	
 204              	.LVL20:
 205              	 .thumb
 206              	.L16:
 207 0044 FEE7     	 b .L16
 208              	.LBE50:
 209              	.LBE49:
 210              	.LBE51:
 211              	.LBE52:
 212              	 .cfi_endproc
 213              	.LFE137:
 215 0046 00BF     	 .section .text.vEventGroupSetBitsCallback,"ax",%progbits
 216              	 .align 2
 217              	 .global vEventGroupSetBitsCallback
 218              	 .thumb
 219              	 .thumb_func
 221              	vEventGroupSetBitsCallback:
 222              	.LFB136:
 669:../Dave/Generated/FREERTOS/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 223              	 .loc 1 669 0
 224              	 .cfi_startproc
 225              	 
 226              	 
 227              	 
 228              	.LVL21:
 229              	.LBB59:
 230              	.LBB60:
 541:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 231              	 .loc 1 541 0
 232 0000 58B1     	 cbz r0,.L26
 542:../Dave/Generated/FREERTOS/event_groups.c **** 
 233              	 .loc 1 542 0
 234 0002 11F07F4F 	 tst r1,#-16777216
 235 0006 11D0     	 beq .L24
 236              	.LBB61:
 237              	.LBB62:
 238              	 .loc 2 240 0
 239              	
 240 0008 4FF0FC03 	 mov r3,#252
 241 000c 83F31188 	 msr basepri,r3
 242 0010 BFF36F8F 	 isb 
 243 0014 BFF34F8F 	 dsb 
 244              	
 245              	
 246              	.LVL22:
 247              	 .thumb
 248              	.L25:
 249 0018 FEE7     	 b .L25
 250              	.L26:
 251              	.LBE62:
 252              	.LBE61:
 253              	.LBB63:
 254              	.LBB64:
 255              	
 256 001a 4FF0FC03 	 mov r3,#252
 257 001e 83F31188 	 msr basepri,r3
 258 0022 BFF36F8F 	 isb 
 259 0026 BFF34F8F 	 dsb 
 260              	
 261              	
 262              	.LVL23:
 263              	 .thumb
 264              	.L23:
 265 002a FEE7     	 b .L23
 266              	.L24:
 267              	.LBE64:
 268              	.LBE63:
 269 002c FFF7FEBF 	 b xEventGroupSetBits.part.0
 270              	.LVL24:
 271              	.LBE60:
 272              	.LBE59:
 273              	 .cfi_endproc
 274              	.LFE136:
 276              	 .section .text.xEventGroupCreate,"ax",%progbits
 277              	 .align 2
 278              	 .global xEventGroupCreate
 279              	 .thumb
 280              	 .thumb_func
 282              	xEventGroupCreate:
 283              	.LFB128:
 175:../Dave/Generated/FREERTOS/event_groups.c **** 	EventGroup_t *pxEventBits;
 284              	 .loc 1 175 0
 285              	 .cfi_startproc
 286              	 
 287              	 
 288 0000 10B5     	 push {r4,lr}
 289              	.LCFI4:
 290              	 .cfi_def_cfa_offset 8
 291              	 .cfi_offset 4,-8
 292              	 .cfi_offset 14,-4
 179:../Dave/Generated/FREERTOS/event_groups.c **** 
 293              	 .loc 1 179 0
 294 0002 1C20     	 movs r0,#28
 295 0004 FFF7FEFF 	 bl pvPortMalloc
 296              	.LVL25:
 181:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 297              	 .loc 1 181 0
 298 0008 0446     	 mov r4,r0
 299 000a 20B1     	 cbz r0,.L28
 183:../Dave/Generated/FREERTOS/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 300              	 .loc 1 183 0
 301 000c 0023     	 movs r3,#0
 302 000e 40F8043B 	 str r3,[r0],#4
 303              	.LVL26:
 184:../Dave/Generated/FREERTOS/event_groups.c **** 
 304              	 .loc 1 184 0
 305 0012 FFF7FEFF 	 bl vListInitialise
 306              	.LVL27:
 307              	.L28:
 203:../Dave/Generated/FREERTOS/event_groups.c **** 
 308              	 .loc 1 203 0
 309 0016 2046     	 mov r0,r4
 310 0018 10BD     	 pop {r4,pc}
 311              	 .cfi_endproc
 312              	.LFE128:
 314 001a 00BF     	 .section .text.xEventGroupWaitBits,"ax",%progbits
 315              	 .align 2
 316              	 .global xEventGroupWaitBits
 317              	 .thumb
 318              	 .thumb_func
 320              	xEventGroupWaitBits:
 321              	.LFB130:
 325:../Dave/Generated/FREERTOS/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 322              	 .loc 1 325 0
 323              	 .cfi_startproc
 324              	 
 325              	 
 326              	.LVL28:
 327 0000 2DE9F843 	 push {r3,r4,r5,r6,r7,r8,r9,lr}
 328              	.LCFI5:
 329              	 .cfi_def_cfa_offset 32
 330              	 .cfi_offset 3,-32
 331              	 .cfi_offset 4,-28
 332              	 .cfi_offset 5,-24
 333              	 .cfi_offset 6,-20
 334              	 .cfi_offset 7,-16
 335              	 .cfi_offset 8,-12
 336              	 .cfi_offset 9,-8
 337              	 .cfi_offset 14,-4
 338              	.LVL29:
 325:../Dave/Generated/FREERTOS/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 339              	 .loc 1 325 0
 340 0004 DDF82090 	 ldr r9,[sp,#32]
 333:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 341              	 .loc 1 333 0
 342 0008 A8B1     	 cbz r0,.L71
 334:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 343              	 .loc 1 334 0
 344 000a 11F07F4F 	 tst r1,#-16777216
 345 000e 08D0     	 beq .L36
 346              	.LBB65:
 347              	.LBB66:
 348              	 .loc 2 240 0
 349              	
 350 0010 4FF0FC03 	 mov r3,#252
 351 0014 83F31188 	 msr basepri,r3
 352 0018 BFF36F8F 	 isb 
 353 001c BFF34F8F 	 dsb 
 354              	
 355              	
 356              	.LVL30:
 357              	 .thumb
 358              	.L37:
 359              	.LBE66:
 360              	.LBE65:
 334:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 361              	 .loc 1 334 0 discriminator 2
 362 0020 FEE7     	 b .L37
 363              	.LVL31:
 364              	.L36:
 335:../Dave/Generated/FREERTOS/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 365              	 .loc 1 335 0
 366 0022 89B9     	 cbnz r1,.L38
 367              	.LBB67:
 368              	.LBB68:
 369              	 .loc 2 240 0
 370              	
 371 0024 4FF0FC03 	 mov r3,#252
 372 0028 83F31188 	 msr basepri,r3
 373 002c BFF36F8F 	 isb 
 374 0030 BFF34F8F 	 dsb 
 375              	
 376              	
 377              	.LVL32:
 378              	 .thumb
 379              	.L39:
 380              	.LBE68:
 381              	.LBE67:
 335:../Dave/Generated/FREERTOS/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 382              	 .loc 1 335 0 discriminator 3
 383 0034 FEE7     	 b .L39
 384              	.LVL33:
 385              	.L71:
 386              	.LBB69:
 387              	.LBB70:
 388              	 .loc 2 240 0
 389              	
 390 0036 4FF0FC03 	 mov r3,#252
 391 003a 83F31188 	 msr basepri,r3
 392 003e BFF36F8F 	 isb 
 393 0042 BFF34F8F 	 dsb 
 394              	
 395              	
 396              	.LVL34:
 397              	 .thumb
 398              	.L35:
 399              	.LBE70:
 400              	.LBE69:
 333:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 401              	 .loc 1 333 0 discriminator 1
 402 0046 FEE7     	 b .L35
 403              	.LVL35:
 404              	.L38:
 405 0048 0646     	 mov r6,r0
 406 004a 9846     	 mov r8,r3
 407 004c 1746     	 mov r7,r2
 408 004e 0C46     	 mov r4,r1
 338:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 409              	 .loc 1 338 0
 410 0050 FFF7FEFF 	 bl xTaskGetSchedulerState
 411              	.LVL36:
 412 0054 10B9     	 cbnz r0,.L40
 338:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 413              	 .loc 1 338 0 is_stmt 0 discriminator 2
 414 0056 B9F1000F 	 cmp r9,#0
 415 005a 3CD1     	 bne .L72
 416              	.L40:
 342:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 417              	 .loc 1 342 0 is_stmt 1
 418 005c FFF7FEFF 	 bl vTaskSuspendAll
 419              	.LVL37:
 420              	.LBB71:
 344:../Dave/Generated/FREERTOS/event_groups.c **** 
 421              	 .loc 1 344 0
 422 0060 3568     	 ldr r5,[r6]
 423              	.LVL38:
 424              	.LBB72:
 425              	.LBB73:
 680:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 681:../Dave/Generated/FREERTOS/event_groups.c **** 
 682:../Dave/Generated/FREERTOS/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 683:../Dave/Generated/FREERTOS/event_groups.c **** {
 684:../Dave/Generated/FREERTOS/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 685:../Dave/Generated/FREERTOS/event_groups.c **** 
 686:../Dave/Generated/FREERTOS/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
 426              	 .loc 1 686 0
 427 0062 B8F1000F 	 cmp r8,#0
 428 0066 0AD1     	 bne .L73
 687:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 688:../Dave/Generated/FREERTOS/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 689:../Dave/Generated/FREERTOS/event_groups.c **** 		set.  Is one already set? */
 690:../Dave/Generated/FREERTOS/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 429              	 .loc 1 690 0
 430 0068 2C42     	 tst r4,r5
 431 006a 0CD0     	 beq .L44
 432              	.L43:
 433              	.LVL39:
 434              	.LBE73:
 435              	.LBE72:
 357:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 436              	 .loc 1 357 0
 437 006c 17B1     	 cbz r7,.L45
 359:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 438              	 .loc 1 359 0
 439 006e 25EA0404 	 bic r4,r5,r4
 440              	.LVL40:
 441 0072 3460     	 str r4,[r6]
 442              	.LVL41:
 443              	.L45:
 444              	.LBE71:
 409:../Dave/Generated/FREERTOS/event_groups.c **** 
 445              	 .loc 1 409 0
 446 0074 FFF7FEFF 	 bl xTaskResumeAll
 447              	.LVL42:
 448              	.L66:
 469:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 449              	 .loc 1 469 0
 450 0078 2846     	 mov r0,r5
 451 007a BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 452              	.LVL43:
 453              	.L73:
 454              	.LBB76:
 455              	.LBB75:
 456              	.LBB74:
 691:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 692:../Dave/Generated/FREERTOS/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 693:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 694:../Dave/Generated/FREERTOS/event_groups.c **** 		else
 695:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 696:../Dave/Generated/FREERTOS/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 697:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 698:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 699:../Dave/Generated/FREERTOS/event_groups.c **** 	else
 700:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 701:../Dave/Generated/FREERTOS/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 702:../Dave/Generated/FREERTOS/event_groups.c **** 		Are they set already? */
 703:../Dave/Generated/FREERTOS/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 457              	 .loc 1 703 0
 458 007e 04EA0503 	 and r3,r4,r5
 459 0082 9C42     	 cmp r4,r3
 460 0084 F2D0     	 beq .L43
 461              	.L44:
 462              	.LBE74:
 463              	.LBE75:
 366:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 464              	 .loc 1 366 0
 465 0086 B9F1000F 	 cmp r9,#0
 466 008a F3D0     	 beq .L45
 378:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 467              	 .loc 1 378 0
 468 008c 002F     	 cmp r7,#0
 469 008e 0BBF     	 itete eq
 470 0090 4FF08063 	 moveq r3,#67108864
 471 0094 4FF0A063 	 movne r3,#83886080
 472 0098 0021     	 moveq r1,#0
 473 009a 4FF08071 	 movne r1,#16777216
 474              	.LVL44:
 389:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 475              	 .loc 1 389 0
 476 009e B8F1000F 	 cmp r8,#0
 477 00a2 18BF     	 it ne
 478 00a4 1946     	 movne r1,r3
 479              	.LVL45:
 399:../Dave/Generated/FREERTOS/event_groups.c **** 
 480              	 .loc 1 399 0
 481 00a6 4A46     	 mov r2,r9
 482 00a8 2143     	 orrs r1,r1,r4
 483              	.LVL46:
 484 00aa 301D     	 adds r0,r6,#4
 485 00ac FFF7FEFF 	 bl vTaskPlaceOnUnorderedEventList
 486              	.LVL47:
 487              	.LBE76:
 409:../Dave/Generated/FREERTOS/event_groups.c **** 
 488              	 .loc 1 409 0
 489 00b0 FFF7FEFF 	 bl xTaskResumeAll
 490              	.LVL48:
 413:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 491              	 .loc 1 413 0
 492 00b4 38B9     	 cbnz r0,.L48
 415:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 493              	 .loc 1 415 0
 494 00b6 164B     	 ldr r3,.L75
 495 00b8 4FF08052 	 mov r2,#268435456
 496 00bc 1A60     	 str r2,[r3]
 497              	
 498 00be BFF34F8F 	 dsb
 499              	
 500              	
 501 00c2 BFF36F8F 	 isb
 502              	
 503              	 .thumb
 504              	.L48:
 426:../Dave/Generated/FREERTOS/event_groups.c **** 
 505              	 .loc 1 426 0
 506 00c6 FFF7FEFF 	 bl uxTaskResetEventItemValue
 507              	.LVL49:
 428:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 508              	 .loc 1 428 0
 509 00ca 8301     	 lsls r3,r0,#6
 426:../Dave/Generated/FREERTOS/event_groups.c **** 
 510              	 .loc 1 426 0
 511 00cc 0546     	 mov r5,r0
 512              	.LVL50:
 428:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 513              	 .loc 1 428 0
 514 00ce 0BD5     	 bpl .L74
 515              	.LVL51:
 516              	.L49:
 464:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 517              	 .loc 1 464 0
 518 00d0 25F07F45 	 bic r5,r5,#-16777216
 519              	.LVL52:
 520 00d4 D0E7     	 b .L66
 521              	.LVL53:
 522              	.L72:
 523              	.LBB77:
 524              	.LBB78:
 525              	 .loc 2 240 0
 526              	
 527 00d6 4FF0FC03 	 mov r3,#252
 528 00da 83F31188 	 msr basepri,r3
 529 00de BFF36F8F 	 isb 
 530 00e2 BFF34F8F 	 dsb 
 531              	
 532              	
 533              	.LVL54:
 534              	 .thumb
 535              	.L42:
 536              	.LBE78:
 537              	.LBE77:
 338:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 538              	 .loc 1 338 0 discriminator 4
 539 00e6 FEE7     	 b .L42
 540              	.LVL55:
 541              	.L74:
 430:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 542              	 .loc 1 430 0
 543 00e8 FFF7FEFF 	 bl vPortEnterCritical
 544              	.LVL56:
 433:../Dave/Generated/FREERTOS/event_groups.c **** 
 545              	 .loc 1 433 0
 546 00ec 3568     	 ldr r5,[r6]
 547              	.LVL57:
 548              	.LBB79:
 549              	.LBB80:
 686:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 550              	 .loc 1 686 0
 551 00ee B8F1000F 	 cmp r8,#0
 552 00f2 08D1     	 bne .L50
 690:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 553              	 .loc 1 690 0
 554 00f4 2C42     	 tst r4,r5
 555 00f6 03D0     	 beq .L52
 556              	.L51:
 557              	.LVL58:
 558              	.LBE80:
 559              	.LBE79:
 439:../Dave/Generated/FREERTOS/event_groups.c **** 					{
 560              	 .loc 1 439 0
 561 00f8 17B1     	 cbz r7,.L52
 441:../Dave/Generated/FREERTOS/event_groups.c **** 					}
 562              	 .loc 1 441 0
 563 00fa 25EA0404 	 bic r4,r5,r4
 564              	.LVL59:
 565 00fe 3460     	 str r4,[r6]
 566              	.LVL60:
 567              	.L52:
 453:../Dave/Generated/FREERTOS/event_groups.c **** 
 568              	 .loc 1 453 0
 569 0100 FFF7FEFF 	 bl vPortExitCritical
 570              	.LVL61:
 571 0104 E4E7     	 b .L49
 572              	.LVL62:
 573              	.L50:
 574              	.LBB82:
 575              	.LBB81:
 576              	 .loc 1 703 0
 577 0106 04EA0503 	 and r3,r4,r5
 578 010a 9C42     	 cmp r4,r3
 579 010c F8D1     	 bne .L52
 580 010e F3E7     	 b .L51
 581              	.L76:
 582              	 .align 2
 583              	.L75:
 584 0110 04ED00E0 	 .word -536810236
 585              	.LBE81:
 586              	.LBE82:
 587              	 .cfi_endproc
 588              	.LFE130:
 590              	 .section .text.xEventGroupClearBits,"ax",%progbits
 591              	 .align 2
 592              	 .global xEventGroupClearBits
 593              	 .thumb
 594              	 .thumb_func
 596              	xEventGroupClearBits:
 597              	.LFB131:
 473:../Dave/Generated/FREERTOS/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 598              	 .loc 1 473 0
 599              	 .cfi_startproc
 600              	 
 601              	 
 602              	.LVL63:
 479:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 603              	 .loc 1 479 0
 604 0000 C0B1     	 cbz r0,.L83
 480:../Dave/Generated/FREERTOS/event_groups.c **** 
 605              	 .loc 1 480 0
 606 0002 11F07F4F 	 tst r1,#-16777216
 607 0006 08D0     	 beq .L80
 608              	.LBB83:
 609              	.LBB84:
 610              	 .loc 2 240 0
 611              	
 612 0008 4FF0FC03 	 mov r3,#252
 613 000c 83F31188 	 msr basepri,r3
 614 0010 BFF36F8F 	 isb 
 615 0014 BFF34F8F 	 dsb 
 616              	
 617              	
 618              	.LVL64:
 619              	 .thumb
 620              	.L81:
 621              	.LBE84:
 622              	.LBE83:
 480:../Dave/Generated/FREERTOS/event_groups.c **** 
 623              	 .loc 1 480 0 discriminator 2
 624 0018 FEE7     	 b .L81
 625              	.L80:
 473:../Dave/Generated/FREERTOS/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 626              	 .loc 1 473 0
 627 001a 70B5     	 push {r4,r5,r6,lr}
 628              	.LCFI6:
 629              	 .cfi_def_cfa_offset 16
 630              	 .cfi_offset 4,-16
 631              	 .cfi_offset 5,-12
 632              	 .cfi_offset 6,-8
 633              	 .cfi_offset 14,-4
 634 001c 0546     	 mov r5,r0
 635 001e 0C46     	 mov r4,r1
 482:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 636              	 .loc 1 482 0
 637 0020 FFF7FEFF 	 bl vPortEnterCritical
 638              	.LVL65:
 488:../Dave/Generated/FREERTOS/event_groups.c **** 
 639              	 .loc 1 488 0
 640 0024 2E68     	 ldr r6,[r5]
 641              	.LVL66:
 491:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 642              	 .loc 1 491 0
 643 0026 26EA0401 	 bic r1,r6,r4
 644 002a 2960     	 str r1,[r5]
 493:../Dave/Generated/FREERTOS/event_groups.c **** 
 645              	 .loc 1 493 0
 646 002c FFF7FEFF 	 bl vPortExitCritical
 647              	.LVL67:
 496:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 648              	 .loc 1 496 0
 649 0030 3046     	 mov r0,r6
 650 0032 70BD     	 pop {r4,r5,r6,pc}
 651              	.LVL68:
 652              	.L83:
 653              	.LCFI7:
 654              	 .cfi_def_cfa_offset 0
 655              	 .cfi_restore 4
 656              	 .cfi_restore 5
 657              	 .cfi_restore 6
 658              	 .cfi_restore 14
 659              	.LBB85:
 660              	.LBB86:
 661              	 .loc 2 240 0
 662              	
 663 0034 4FF0FC03 	 mov r3,#252
 664 0038 83F31188 	 msr basepri,r3
 665 003c BFF36F8F 	 isb 
 666 0040 BFF34F8F 	 dsb 
 667              	
 668              	
 669              	.LVL69:
 670              	 .thumb
 671              	.L79:
 672              	.LBE86:
 673              	.LBE85:
 479:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 674              	 .loc 1 479 0 discriminator 1
 675 0044 FEE7     	 b .L79
 676              	 .cfi_endproc
 677              	.LFE131:
 679 0046 00BF     	 .section .text.xEventGroupClearBitsFromISR,"ax",%progbits
 680              	 .align 2
 681              	 .global xEventGroupClearBitsFromISR
 682              	 .thumb
 683              	 .thumb_func
 685              	xEventGroupClearBitsFromISR:
 686              	.LFB132:
 502:../Dave/Generated/FREERTOS/event_groups.c **** 		BaseType_t xReturn;
 687              	 .loc 1 502 0
 688              	 .cfi_startproc
 689              	 
 690              	 
 691              	 
 692              	.LVL70:
 502:../Dave/Generated/FREERTOS/event_groups.c **** 		BaseType_t xReturn;
 693              	 .loc 1 502 0
 694 0000 0A46     	 mov r2,r1
 506:../Dave/Generated/FREERTOS/event_groups.c **** 
 695              	 .loc 1 506 0
 696 0002 0023     	 movs r3,#0
 697 0004 0146     	 mov r1,r0
 698              	.LVL71:
 699 0006 0148     	 ldr r0,.L85
 700              	.LVL72:
 701 0008 FFF7FEBF 	 b xTimerPendFunctionCallFromISR
 702              	.LVL73:
 703              	.L86:
 704              	 .align 2
 705              	.L85:
 706 000c 00000000 	 .word vEventGroupClearBitsCallback
 707              	 .cfi_endproc
 708              	.LFE132:
 710              	 .section .text.xEventGroupGetBitsFromISR,"ax",%progbits
 711              	 .align 2
 712              	 .global xEventGroupGetBitsFromISR
 713              	 .thumb
 714              	 .thumb_func
 716              	xEventGroupGetBitsFromISR:
 717              	.LFB133:
 515:../Dave/Generated/FREERTOS/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 718              	 .loc 1 515 0
 719              	 .cfi_startproc
 720              	 
 721              	 
 722              	 
 723              	.LVL74:
 724              	.LBB87:
 725              	.LBB88:
 241:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 242:../Dave/Generated/FREERTOS/portmacro.h **** 		"	mov %0, %1												\n"	\
 243:../Dave/Generated/FREERTOS/portmacro.h **** 		"	msr basepri, %0											\n" \
 244:../Dave/Generated/FREERTOS/portmacro.h **** 		"	isb														\n" \
 245:../Dave/Generated/FREERTOS/portmacro.h **** 		"	dsb														\n" \
 246:../Dave/Generated/FREERTOS/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 247:../Dave/Generated/FREERTOS/portmacro.h **** 	);
 248:../Dave/Generated/FREERTOS/portmacro.h **** }
 249:../Dave/Generated/FREERTOS/portmacro.h **** 
 250:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 251:../Dave/Generated/FREERTOS/portmacro.h **** 
 252:../Dave/Generated/FREERTOS/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 253:../Dave/Generated/FREERTOS/portmacro.h **** {
 254:../Dave/Generated/FREERTOS/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 255:../Dave/Generated/FREERTOS/portmacro.h **** 
 256:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile
 726              	 .loc 2 256 0
 727              	
 728 0000 EFF31183 	 mrs r3,basepri
 729 0004 4FF0FC02 	 mov r2,#252
 730 0008 82F31188 	 msr basepri,r2
 731 000c BFF36F8F 	 isb 
 732 0010 BFF34F8F 	 dsb 
 733              	
 734              	
 735              	.LVL75:
 736              	 .thumb
 737              	.LBE88:
 738              	.LBE87:
 739              	.LBB89:
 740              	.LBB90:
 257:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 258:../Dave/Generated/FREERTOS/portmacro.h **** 		"	mrs %0, basepri											\n" \
 259:../Dave/Generated/FREERTOS/portmacro.h **** 		"	mov %1, %2												\n"	\
 260:../Dave/Generated/FREERTOS/portmacro.h **** 		"	msr basepri, %1											\n" \
 261:../Dave/Generated/FREERTOS/portmacro.h **** 		"	isb														\n" \
 262:../Dave/Generated/FREERTOS/portmacro.h **** 		"	dsb														\n" \
 263:../Dave/Generated/FREERTOS/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 264:../Dave/Generated/FREERTOS/portmacro.h **** 	);
 265:../Dave/Generated/FREERTOS/portmacro.h **** 
 266:../Dave/Generated/FREERTOS/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 267:../Dave/Generated/FREERTOS/portmacro.h **** 	warnings. */
 268:../Dave/Generated/FREERTOS/portmacro.h **** 	return ulOriginalBASEPRI;
 269:../Dave/Generated/FREERTOS/portmacro.h **** }
 270:../Dave/Generated/FREERTOS/portmacro.h **** /*-----------------------------------------------------------*/
 271:../Dave/Generated/FREERTOS/portmacro.h **** 
 272:../Dave/Generated/FREERTOS/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 273:../Dave/Generated/FREERTOS/portmacro.h **** {
 274:../Dave/Generated/FREERTOS/portmacro.h **** 	__asm volatile
 741              	 .loc 2 274 0
 742              	
 743 0014 83F31188 	 msr basepri,r3
 744              	
 745              	 .thumb
 746              	.LBE90:
 747              	.LBE89:
 527:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 748              	 .loc 1 527 0
 749 0018 0068     	 ldr r0,[r0]
 750              	.LVL76:
 751 001a 7047     	 bx lr
 752              	 .cfi_endproc
 753              	.LFE133:
 755              	 .section .text.xEventGroupSetBits,"ax",%progbits
 756              	 .align 2
 757              	 .global xEventGroupSetBits
 758              	 .thumb
 759              	 .thumb_func
 761              	xEventGroupSetBits:
 762              	.LFB134:
 531:../Dave/Generated/FREERTOS/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 763              	 .loc 1 531 0
 764              	 .cfi_startproc
 765              	 
 766              	 
 767              	 
 768              	.LVL77:
 541:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 769              	 .loc 1 541 0
 770 0000 58B1     	 cbz r0,.L93
 542:../Dave/Generated/FREERTOS/event_groups.c **** 
 771              	 .loc 1 542 0
 772 0002 11F07F4F 	 tst r1,#-16777216
 773 0006 11D0     	 beq .L91
 774              	.LBB91:
 775              	.LBB92:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 776              	 .loc 2 240 0
 777              	
 778 0008 4FF0FC03 	 mov r3,#252
 779 000c 83F31188 	 msr basepri,r3
 780 0010 BFF36F8F 	 isb 
 781 0014 BFF34F8F 	 dsb 
 782              	
 783              	
 784              	.LVL78:
 785              	 .thumb
 786              	.L92:
 787              	.LBE92:
 788              	.LBE91:
 542:../Dave/Generated/FREERTOS/event_groups.c **** 
 789              	 .loc 1 542 0 discriminator 2
 790 0018 FEE7     	 b .L92
 791              	.L93:
 792              	.LBB93:
 793              	.LBB94:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 794              	 .loc 2 240 0
 795              	
 796 001a 4FF0FC03 	 mov r3,#252
 797 001e 83F31188 	 msr basepri,r3
 798 0022 BFF36F8F 	 isb 
 799 0026 BFF34F8F 	 dsb 
 800              	
 801              	
 802              	.LVL79:
 803              	 .thumb
 804              	.L90:
 805              	.LBE94:
 806              	.LBE93:
 541:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 807              	 .loc 1 541 0 discriminator 1
 808 002a FEE7     	 b .L90
 809              	.L91:
 810 002c FFF7FEBF 	 b xEventGroupSetBits.part.0
 811              	.LVL80:
 812              	 .cfi_endproc
 813              	.LFE134:
 815              	 .section .text.xEventGroupSync,"ax",%progbits
 816              	 .align 2
 817              	 .global xEventGroupSync
 818              	 .thumb
 819              	 .thumb_func
 821              	xEventGroupSync:
 822              	.LFB129:
 209:../Dave/Generated/FREERTOS/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 823              	 .loc 1 209 0
 824              	 .cfi_startproc
 825              	 
 826              	 
 827              	.LVL81:
 215:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 828              	 .loc 1 215 0
 829 0000 12F07F4F 	 tst r2,#-16777216
 830 0004 08D0     	 beq .L95
 831              	.LBB95:
 832              	.LBB96:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 833              	 .loc 2 240 0
 834              	
 835 0006 4FF0FC03 	 mov r3,#252
 836 000a 83F31188 	 msr basepri,r3
 837 000e BFF36F8F 	 isb 
 838 0012 BFF34F8F 	 dsb 
 839              	
 840              	
 841              	.LVL82:
 842              	 .thumb
 843              	.L96:
 844              	.LBE96:
 845              	.LBE95:
 215:../Dave/Generated/FREERTOS/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 846              	 .loc 1 215 0 discriminator 1
 847 0016 FEE7     	 b .L96
 848              	.LVL83:
 849              	.L95:
 216:../Dave/Generated/FREERTOS/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 850              	 .loc 1 216 0
 851 0018 42B9     	 cbnz r2,.L97
 852              	.LBB97:
 853              	.LBB98:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 854              	 .loc 2 240 0
 855              	
 856 001a 4FF0FC03 	 mov r3,#252
 857 001e 83F31188 	 msr basepri,r3
 858 0022 BFF36F8F 	 isb 
 859 0026 BFF34F8F 	 dsb 
 860              	
 861              	
 862              	.LVL84:
 863              	 .thumb
 864              	.L98:
 865              	.LBE98:
 866              	.LBE97:
 216:../Dave/Generated/FREERTOS/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 867              	 .loc 1 216 0 discriminator 2
 868 002a FEE7     	 b .L98
 869              	.LVL85:
 870              	.L97:
 209:../Dave/Generated/FREERTOS/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 871              	 .loc 1 209 0
 872 002c 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 873              	.LCFI8:
 874              	 .cfi_def_cfa_offset 24
 875              	 .cfi_offset 4,-24
 876              	 .cfi_offset 5,-20
 877              	 .cfi_offset 6,-16
 878              	 .cfi_offset 7,-12
 879              	 .cfi_offset 8,-8
 880              	 .cfi_offset 14,-4
 881 0030 1F46     	 mov r7,r3
 882 0032 8846     	 mov r8,r1
 883 0034 0646     	 mov r6,r0
 884 0036 1546     	 mov r5,r2
 219:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 885              	 .loc 1 219 0
 886 0038 FFF7FEFF 	 bl xTaskGetSchedulerState
 887              	.LVL86:
 888 003c 98B9     	 cbnz r0,.L99
 219:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 889              	 .loc 1 219 0 is_stmt 0 discriminator 2
 890 003e 002F     	 cmp r7,#0
 891 0040 49D1     	 bne .L120
 223:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 892              	 .loc 1 223 0 is_stmt 1
 893 0042 FFF7FEFF 	 bl vTaskSuspendAll
 894              	.LVL87:
 225:../Dave/Generated/FREERTOS/event_groups.c **** 
 895              	 .loc 1 225 0
 896 0046 3468     	 ldr r4,[r6]
 897              	.LVL88:
 227:../Dave/Generated/FREERTOS/event_groups.c **** 
 898              	 .loc 1 227 0
 899 0048 4146     	 mov r1,r8
 229:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 900              	 .loc 1 229 0
 901 004a 0C43     	 orrs r4,r4,r1
 902              	.LVL89:
 227:../Dave/Generated/FREERTOS/event_groups.c **** 
 903              	 .loc 1 227 0
 904 004c 3046     	 mov r0,r6
 905 004e FFF7FEFF 	 bl xEventGroupSetBits
 906              	.LVL90:
 229:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 907              	 .loc 1 229 0
 908 0052 05EA0403 	 and r3,r5,r4
 909 0056 AB42     	 cmp r3,r5
 910 0058 38D0     	 beq .L109
 911              	.L104:
 261:../Dave/Generated/FREERTOS/event_groups.c **** 			}
 912              	 .loc 1 261 0
 913 005a 3468     	 ldr r4,[r6]
 914              	.LVL91:
 915              	.L103:
 265:../Dave/Generated/FREERTOS/event_groups.c **** 
 916              	 .loc 1 265 0
 917 005c FFF7FEFF 	 bl xTaskResumeAll
 918              	.LVL92:
 919              	.L116:
 321:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 920              	 .loc 1 321 0
 921 0060 2046     	 mov r0,r4
 922 0062 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 923              	.LVL93:
 924              	.L99:
 223:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 925              	 .loc 1 223 0
 926 0066 FFF7FEFF 	 bl vTaskSuspendAll
 927              	.LVL94:
 225:../Dave/Generated/FREERTOS/event_groups.c **** 
 928              	 .loc 1 225 0
 929 006a 3468     	 ldr r4,[r6]
 930              	.LVL95:
 227:../Dave/Generated/FREERTOS/event_groups.c **** 
 931              	 .loc 1 227 0
 932 006c 4146     	 mov r1,r8
 229:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 933              	 .loc 1 229 0
 934 006e 0C43     	 orrs r4,r4,r1
 935              	.LVL96:
 227:../Dave/Generated/FREERTOS/event_groups.c **** 
 936              	 .loc 1 227 0
 937 0070 3046     	 mov r0,r6
 938 0072 FFF7FEFF 	 bl xEventGroupSetBits
 939              	.LVL97:
 229:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 940              	 .loc 1 229 0
 941 0076 05EA0403 	 and r3,r5,r4
 942 007a AB42     	 cmp r3,r5
 943 007c 26D0     	 beq .L109
 242:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 944              	 .loc 1 242 0
 945 007e 002F     	 cmp r7,#0
 946 0080 EBD0     	 beq .L104
 249:../Dave/Generated/FREERTOS/event_groups.c **** 
 947              	 .loc 1 249 0
 948 0082 3A46     	 mov r2,r7
 949 0084 301D     	 adds r0,r6,#4
 950 0086 45F0A061 	 orr r1,r5,#83886080
 951 008a FFF7FEFF 	 bl vTaskPlaceOnUnorderedEventList
 952              	.LVL98:
 265:../Dave/Generated/FREERTOS/event_groups.c **** 
 953              	 .loc 1 265 0
 954 008e FFF7FEFF 	 bl xTaskResumeAll
 955              	.LVL99:
 269:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 956              	 .loc 1 269 0
 957 0092 38B9     	 cbnz r0,.L106
 271:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 958              	 .loc 1 271 0
 959 0094 144B     	 ldr r3,.L121
 960 0096 4FF08052 	 mov r2,#268435456
 961 009a 1A60     	 str r2,[r3]
 962              	
 963 009c BFF34F8F 	 dsb
 964              	
 965              	
 966 00a0 BFF36F8F 	 isb
 967              	
 968              	 .thumb
 969              	.L106:
 282:../Dave/Generated/FREERTOS/event_groups.c **** 
 970              	 .loc 1 282 0
 971 00a4 FFF7FEFF 	 bl uxTaskResetEventItemValue
 972              	.LVL100:
 284:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 973              	 .loc 1 284 0
 974 00a8 8301     	 lsls r3,r0,#6
 282:../Dave/Generated/FREERTOS/event_groups.c **** 
 975              	 .loc 1 282 0
 976 00aa 0446     	 mov r4,r0
 977              	.LVL101:
 284:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 978              	 .loc 1 284 0
 979 00ac 0BD4     	 bmi .L107
 287:../Dave/Generated/FREERTOS/event_groups.c **** 			{
 980              	 .loc 1 287 0
 981 00ae FFF7FEFF 	 bl vPortEnterCritical
 982              	.LVL102:
 289:../Dave/Generated/FREERTOS/event_groups.c **** 
 983              	 .loc 1 289 0
 984 00b2 3468     	 ldr r4,[r6]
 985              	.LVL103:
 295:../Dave/Generated/FREERTOS/event_groups.c **** 				{
 986              	 .loc 1 295 0
 987 00b4 05EA0403 	 and r3,r5,r4
 988 00b8 AB42     	 cmp r3,r5
 297:../Dave/Generated/FREERTOS/event_groups.c **** 				}
 989              	 .loc 1 297 0
 990 00ba 04BF     	 itt eq
 991 00bc 24EA0505 	 biceq r5,r4,r5
 992              	.LVL104:
 993 00c0 3560     	 streq r5,[r6]
 304:../Dave/Generated/FREERTOS/event_groups.c **** 
 994              	 .loc 1 304 0
 995 00c2 FFF7FEFF 	 bl vPortExitCritical
 996              	.LVL105:
 997              	.L107:
 315:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 998              	 .loc 1 315 0
 999 00c6 24F07F44 	 bic r4,r4,#-16777216
 1000              	.LVL106:
 1001 00ca C9E7     	 b .L116
 1002              	.LVL107:
 1003              	.L109:
 236:../Dave/Generated/FREERTOS/event_groups.c **** 
 1004              	 .loc 1 236 0
 1005 00cc 3368     	 ldr r3,[r6]
 1006 00ce 23EA0503 	 bic r3,r3,r5
 1007 00d2 3360     	 str r3,[r6]
 1008              	.LVL108:
 1009 00d4 C2E7     	 b .L103
 1010              	.LVL109:
 1011              	.L120:
 1012              	.LBB99:
 1013              	.LBB100:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1014              	 .loc 2 240 0
 1015              	
 1016 00d6 4FF0FC03 	 mov r3,#252
 1017 00da 83F31188 	 msr basepri,r3
 1018 00de BFF36F8F 	 isb 
 1019 00e2 BFF34F8F 	 dsb 
 1020              	
 1021              	
 1022              	.LVL110:
 1023              	 .thumb
 1024              	.L102:
 1025              	.LBE100:
 1026              	.LBE99:
 219:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 1027              	 .loc 1 219 0 discriminator 3
 1028 00e6 FEE7     	 b .L102
 1029              	.L122:
 1030              	 .align 2
 1031              	.L121:
 1032 00e8 04ED00E0 	 .word -536810236
 1033              	 .cfi_endproc
 1034              	.LFE129:
 1036              	 .section .text.vEventGroupDelete,"ax",%progbits
 1037              	 .align 2
 1038              	 .global vEventGroupDelete
 1039              	 .thumb
 1040              	 .thumb_func
 1042              	vEventGroupDelete:
 1043              	.LFB135:
 625:../Dave/Generated/FREERTOS/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 1044              	 .loc 1 625 0
 1045              	 .cfi_startproc
 1046              	 
 1047              	 
 1048              	.LVL111:
 1049 0000 38B5     	 push {r3,r4,r5,lr}
 1050              	.LCFI9:
 1051              	 .cfi_def_cfa_offset 16
 1052              	 .cfi_offset 3,-16
 1053              	 .cfi_offset 4,-12
 1054              	 .cfi_offset 5,-8
 1055              	 .cfi_offset 14,-4
 625:../Dave/Generated/FREERTOS/event_groups.c **** EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 1056              	 .loc 1 625 0
 1057 0002 0446     	 mov r4,r0
 1058              	.LVL112:
 629:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 1059              	 .loc 1 629 0
 1060 0004 FFF7FEFF 	 bl vTaskSuspendAll
 1061              	.LVL113:
 633:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 1062              	 .loc 1 633 0
 1063 0008 6368     	 ldr r3,[r4,#4]
 1064 000a 7BB1     	 cbz r3,.L130
 637:../Dave/Generated/FREERTOS/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 1065              	 .loc 1 637 0
 1066 000c 2069     	 ldr r0,[r4,#16]
 1067 000e 04F10C05 	 add r5,r4,#12
 1068 0012 A842     	 cmp r0,r5
 1069 0014 03D1     	 bne .L127
 1070 0016 10E0     	 b .L125
 1071              	.L129:
 1072 0018 2069     	 ldr r0,[r4,#16]
 1073 001a A842     	 cmp r0,r5
 1074 001c 0DD0     	 beq .L125
 1075              	.L127:
 638:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 1076              	 .loc 1 638 0
 1077 001e 4FF00071 	 mov r1,#33554432
 1078 0022 FFF7FEFF 	 bl xTaskRemoveFromUnorderedEventList
 1079              	.LVL114:
 633:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 1080              	 .loc 1 633 0
 1081 0026 6368     	 ldr r3,[r4,#4]
 1082 0028 002B     	 cmp r3,#0
 1083 002a F5D1     	 bne .L129
 1084              	.L130:
 645:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 1085              	 .loc 1 645 0
 1086 002c 2046     	 mov r0,r4
 1087 002e FFF7FEFF 	 bl vPortFree
 1088              	.LVL115:
 663:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 1089              	 .loc 1 663 0
 1090 0032 BDE83840 	 pop {r3,r4,r5,lr}
 1091              	.LCFI10:
 1092              	 .cfi_remember_state
 1093              	 .cfi_restore 14
 1094              	 .cfi_restore 5
 1095              	 .cfi_restore 4
 1096              	 .cfi_restore 3
 1097              	 .cfi_def_cfa_offset 0
 1098              	.LVL116:
 662:../Dave/Generated/FREERTOS/event_groups.c **** }
 1099              	 .loc 1 662 0
 1100 0036 FFF7FEBF 	 b xTaskResumeAll
 1101              	.LVL117:
 1102              	.L125:
 1103              	.LCFI11:
 1104              	 .cfi_restore_state
 1105              	.LBB101:
 1106              	.LBB102:
 240:../Dave/Generated/FREERTOS/portmacro.h **** 	(
 1107              	 .loc 2 240 0
 1108              	
 1109 003a 4FF0FC03 	 mov r3,#252
 1110 003e 83F31188 	 msr basepri,r3
 1111 0042 BFF36F8F 	 isb 
 1112 0046 BFF34F8F 	 dsb 
 1113              	
 1114              	
 1115              	.LVL118:
 1116              	 .thumb
 1117              	.L128:
 1118              	.LBE102:
 1119              	.LBE101:
 637:../Dave/Generated/FREERTOS/event_groups.c **** 			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 1120              	 .loc 1 637 0 discriminator 1
 1121 004a FEE7     	 b .L128
 1122              	 .cfi_endproc
 1123              	.LFE135:
 1125              	 .section .text.xEventGroupSetBitsFromISR,"ax",%progbits
 1126              	 .align 2
 1127              	 .global xEventGroupSetBitsFromISR
 1128              	 .thumb
 1129              	 .thumb_func
 1131              	xEventGroupSetBitsFromISR:
 1132              	.LFB139:
 704:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 705:../Dave/Generated/FREERTOS/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 706:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 707:../Dave/Generated/FREERTOS/event_groups.c **** 		else
 708:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 709:../Dave/Generated/FREERTOS/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 710:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 711:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 712:../Dave/Generated/FREERTOS/event_groups.c **** 
 713:../Dave/Generated/FREERTOS/event_groups.c **** 	return xWaitConditionMet;
 714:../Dave/Generated/FREERTOS/event_groups.c **** }
 715:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 716:../Dave/Generated/FREERTOS/event_groups.c **** 
 717:../Dave/Generated/FREERTOS/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 718:../Dave/Generated/FREERTOS/event_groups.c **** 
 719:../Dave/Generated/FREERTOS/event_groups.c **** 	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSe
 720:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 1133              	 .loc 1 720 0
 1134              	 .cfi_startproc
 1135              	 
 1136              	 
 1137              	 
 1138              	.LVL119:
 1139 0000 10B4     	 push {r4}
 1140              	.LCFI12:
 1141              	 .cfi_def_cfa_offset 4
 1142              	 .cfi_offset 4,-4
 1143              	 .loc 1 720 0
 1144 0002 0C46     	 mov r4,r1
 1145 0004 1346     	 mov r3,r2
 721:../Dave/Generated/FREERTOS/event_groups.c **** 	BaseType_t xReturn;
 722:../Dave/Generated/FREERTOS/event_groups.c **** 
 723:../Dave/Generated/FREERTOS/event_groups.c **** 		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
 724:../Dave/Generated/FREERTOS/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( ui
 1146              	 .loc 1 724 0
 1147 0006 0146     	 mov r1,r0
 1148              	.LVL120:
 1149 0008 2246     	 mov r2,r4
 1150              	.LVL121:
 1151 000a 0248     	 ldr r0,.L135
 1152              	.LVL122:
 725:../Dave/Generated/FREERTOS/event_groups.c **** 
 726:../Dave/Generated/FREERTOS/event_groups.c **** 		return xReturn;
 727:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 1153              	 .loc 1 727 0
 1154 000c 5DF8044B 	 ldr r4,[sp],#4
 1155              	.LCFI13:
 1156              	 .cfi_restore 4
 1157              	 .cfi_def_cfa_offset 0
 1158              	.LVL123:
 724:../Dave/Generated/FREERTOS/event_groups.c **** 
 1159              	 .loc 1 724 0
 1160 0010 FFF7FEBF 	 b xTimerPendFunctionCallFromISR
 1161              	.LVL124:
 1162              	.L136:
 1163              	 .align 2
 1164              	.L135:
 1165 0014 00000000 	 .word vEventGroupSetBitsCallback
 1166              	 .cfi_endproc
 1167              	.LFE139:
 1169              	 .section .text.uxEventGroupGetNumber,"ax",%progbits
 1170              	 .align 2
 1171              	 .global uxEventGroupGetNumber
 1172              	 .thumb
 1173              	 .thumb_func
 1175              	uxEventGroupGetNumber:
 1176              	.LFB140:
 728:../Dave/Generated/FREERTOS/event_groups.c **** 
 729:../Dave/Generated/FREERTOS/event_groups.c **** #endif
 730:../Dave/Generated/FREERTOS/event_groups.c **** /*-----------------------------------------------------------*/
 731:../Dave/Generated/FREERTOS/event_groups.c **** 
 732:../Dave/Generated/FREERTOS/event_groups.c **** #if (configUSE_TRACE_FACILITY == 1)
 733:../Dave/Generated/FREERTOS/event_groups.c **** 
 734:../Dave/Generated/FREERTOS/event_groups.c **** 	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
 735:../Dave/Generated/FREERTOS/event_groups.c **** 	{
 1177              	 .loc 1 735 0
 1178              	 .cfi_startproc
 1179              	 
 1180              	 
 1181              	 
 1182              	.LVL125:
 736:../Dave/Generated/FREERTOS/event_groups.c **** 	UBaseType_t xReturn;
 737:../Dave/Generated/FREERTOS/event_groups.c **** 	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 738:../Dave/Generated/FREERTOS/event_groups.c **** 
 739:../Dave/Generated/FREERTOS/event_groups.c **** 		if( xEventGroup == NULL )
 1183              	 .loc 1 739 0
 1184 0000 00B1     	 cbz r0,.L138
 740:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 741:../Dave/Generated/FREERTOS/event_groups.c **** 			xReturn = 0;
 742:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 743:../Dave/Generated/FREERTOS/event_groups.c **** 		else
 744:../Dave/Generated/FREERTOS/event_groups.c **** 		{
 745:../Dave/Generated/FREERTOS/event_groups.c **** 			xReturn = pxEventBits->uxEventGroupNumber;
 1185              	 .loc 1 745 0
 1186 0002 8069     	 ldr r0,[r0,#24]
 1187              	.LVL126:
 1188              	.L138:
 746:../Dave/Generated/FREERTOS/event_groups.c **** 		}
 747:../Dave/Generated/FREERTOS/event_groups.c **** 
 748:../Dave/Generated/FREERTOS/event_groups.c **** 		return xReturn;
 749:../Dave/Generated/FREERTOS/event_groups.c **** 	}
 1189              	 .loc 1 749 0
 1190 0004 7047     	 bx lr
 1191              	 .cfi_endproc
 1192              	.LFE140:
 1194 0006 00BF     	 .text
 1195              	.Letext0:
 1196              	 .file 3 "c:\\dave 4\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 1197              	 .file 4 "c:\\dave 4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1198              	 .file 5 "c:\\dave 4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1199              	 .file 6 "../Dave/Generated/FREERTOS/list.h"
 1200              	 .file 7 "../Dave/Generated/FREERTOS/timers.h"
 1201              	 .file 8 "../Dave/Generated/FREERTOS/event_groups.h"
 1202              	 .file 9 "../Dave/Generated/FREERTOS/task.h"
 1203              	 .file 10 "../Dave/Generated/FREERTOS/portable.h"
 1204              	 .file 11 "C:/Workspaces/Dave 4/CTPOT_test1/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 event_groups.c
    {standard input}:20     .text.unlikely.xEventGroupSetBits.part.0:00000000 $t
    {standard input}:24     .text.unlikely.xEventGroupSetBits.part.0:00000000 xEventGroupSetBits.part.0
    {standard input}:120    .text.vEventGroupClearBitsCallback:00000000 $t
    {standard input}:125    .text.vEventGroupClearBitsCallback:00000000 vEventGroupClearBitsCallback
    {standard input}:216    .text.vEventGroupSetBitsCallback:00000000 $t
    {standard input}:221    .text.vEventGroupSetBitsCallback:00000000 vEventGroupSetBitsCallback
    {standard input}:277    .text.xEventGroupCreate:00000000 $t
    {standard input}:282    .text.xEventGroupCreate:00000000 xEventGroupCreate
    {standard input}:315    .text.xEventGroupWaitBits:00000000 $t
    {standard input}:320    .text.xEventGroupWaitBits:00000000 xEventGroupWaitBits
    {standard input}:584    .text.xEventGroupWaitBits:00000110 $d
    {standard input}:591    .text.xEventGroupClearBits:00000000 $t
    {standard input}:596    .text.xEventGroupClearBits:00000000 xEventGroupClearBits
    {standard input}:680    .text.xEventGroupClearBitsFromISR:00000000 $t
    {standard input}:685    .text.xEventGroupClearBitsFromISR:00000000 xEventGroupClearBitsFromISR
    {standard input}:706    .text.xEventGroupClearBitsFromISR:0000000c $d
    {standard input}:711    .text.xEventGroupGetBitsFromISR:00000000 $t
    {standard input}:716    .text.xEventGroupGetBitsFromISR:00000000 xEventGroupGetBitsFromISR
    {standard input}:756    .text.xEventGroupSetBits:00000000 $t
    {standard input}:761    .text.xEventGroupSetBits:00000000 xEventGroupSetBits
    {standard input}:816    .text.xEventGroupSync:00000000 $t
    {standard input}:821    .text.xEventGroupSync:00000000 xEventGroupSync
    {standard input}:1032   .text.xEventGroupSync:000000e8 $d
    {standard input}:1037   .text.vEventGroupDelete:00000000 $t
    {standard input}:1042   .text.vEventGroupDelete:00000000 vEventGroupDelete
    {standard input}:1126   .text.xEventGroupSetBitsFromISR:00000000 $t
    {standard input}:1131   .text.xEventGroupSetBitsFromISR:00000000 xEventGroupSetBitsFromISR
    {standard input}:1165   .text.xEventGroupSetBitsFromISR:00000014 $d
    {standard input}:1170   .text.uxEventGroupGetNumber:00000000 $t
    {standard input}:1175   .text.uxEventGroupGetNumber:00000000 uxEventGroupGetNumber
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskRemoveFromUnorderedEventList
xTaskResumeAll
vPortEnterCritical
vPortExitCritical
pvPortMalloc
vListInitialise
xTaskGetSchedulerState
vTaskPlaceOnUnorderedEventList
uxTaskResetEventItemValue
xTimerPendFunctionCallFromISR
vPortFree
