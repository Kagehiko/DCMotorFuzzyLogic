   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "list.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.vListInitialise,"ax",%progbits
  20              	 .align 2
  21              	 .global vListInitialise
  22              	 .thumb
  23              	 .thumb_func
  25              	vListInitialise:
  26              	.LFB128:
  27              	 .file 1 "../Dave/Generated/FREERTOS/list.c"
   1:../Dave/Generated/FREERTOS/list.c **** /*
   2:../Dave/Generated/FREERTOS/list.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../Dave/Generated/FREERTOS/list.c ****     All rights reserved
   4:../Dave/Generated/FREERTOS/list.c **** 
   5:../Dave/Generated/FREERTOS/list.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../Dave/Generated/FREERTOS/list.c **** 
   7:../Dave/Generated/FREERTOS/list.c ****     This file is part of the FreeRTOS distribution.
   8:../Dave/Generated/FREERTOS/list.c **** 
   9:../Dave/Generated/FREERTOS/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../Dave/Generated/FREERTOS/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../Dave/Generated/FREERTOS/list.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../Dave/Generated/FREERTOS/list.c **** 
  13:../Dave/Generated/FREERTOS/list.c ****     ***************************************************************************
  14:../Dave/Generated/FREERTOS/list.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../Dave/Generated/FREERTOS/list.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../Dave/Generated/FREERTOS/list.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../Dave/Generated/FREERTOS/list.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../Dave/Generated/FREERTOS/list.c ****     ***************************************************************************
  19:../Dave/Generated/FREERTOS/list.c **** 
  20:../Dave/Generated/FREERTOS/list.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../Dave/Generated/FREERTOS/list.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../Dave/Generated/FREERTOS/list.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../Dave/Generated/FREERTOS/list.c ****     link: http://www.freertos.org/a00114.html
  24:../Dave/Generated/FREERTOS/list.c **** 
  25:../Dave/Generated/FREERTOS/list.c ****     ***************************************************************************
  26:../Dave/Generated/FREERTOS/list.c ****      *                                                                       *
  27:../Dave/Generated/FREERTOS/list.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../Dave/Generated/FREERTOS/list.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../Dave/Generated/FREERTOS/list.c ****      *    platform software that is more than just the market leader, it     *
  30:../Dave/Generated/FREERTOS/list.c ****      *    is the industry's de facto standard.                               *
  31:../Dave/Generated/FREERTOS/list.c ****      *                                                                       *
  32:../Dave/Generated/FREERTOS/list.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../Dave/Generated/FREERTOS/list.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../Dave/Generated/FREERTOS/list.c ****      *    tutorial book, reference manual, or both:                          *
  35:../Dave/Generated/FREERTOS/list.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../Dave/Generated/FREERTOS/list.c ****      *                                                                       *
  37:../Dave/Generated/FREERTOS/list.c ****     ***************************************************************************
  38:../Dave/Generated/FREERTOS/list.c **** 
  39:../Dave/Generated/FREERTOS/list.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../Dave/Generated/FREERTOS/list.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../Dave/Generated/FREERTOS/list.c ****     defined configASSERT()?
  42:../Dave/Generated/FREERTOS/list.c **** 
  43:../Dave/Generated/FREERTOS/list.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../Dave/Generated/FREERTOS/list.c ****     embedded software for free we request you assist our global community by
  45:../Dave/Generated/FREERTOS/list.c ****     participating in the support forum.
  46:../Dave/Generated/FREERTOS/list.c **** 
  47:../Dave/Generated/FREERTOS/list.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../Dave/Generated/FREERTOS/list.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../Dave/Generated/FREERTOS/list.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../Dave/Generated/FREERTOS/list.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../Dave/Generated/FREERTOS/list.c **** 
  52:../Dave/Generated/FREERTOS/list.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../Dave/Generated/FREERTOS/list.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../Dave/Generated/FREERTOS/list.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../Dave/Generated/FREERTOS/list.c **** 
  56:../Dave/Generated/FREERTOS/list.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../Dave/Generated/FREERTOS/list.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../Dave/Generated/FREERTOS/list.c **** 
  59:../Dave/Generated/FREERTOS/list.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../Dave/Generated/FREERTOS/list.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../Dave/Generated/FREERTOS/list.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../Dave/Generated/FREERTOS/list.c **** 
  63:../Dave/Generated/FREERTOS/list.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../Dave/Generated/FREERTOS/list.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../Dave/Generated/FREERTOS/list.c ****     mission critical applications that require provable dependability.
  66:../Dave/Generated/FREERTOS/list.c **** 
  67:../Dave/Generated/FREERTOS/list.c ****     1 tab == 4 spaces!
  68:../Dave/Generated/FREERTOS/list.c **** */
  69:../Dave/Generated/FREERTOS/list.c **** 
  70:../Dave/Generated/FREERTOS/list.c **** 
  71:../Dave/Generated/FREERTOS/list.c **** #include <stdlib.h>
  72:../Dave/Generated/FREERTOS/list.c **** #include "FreeRTOS.h"
  73:../Dave/Generated/FREERTOS/list.c **** #include "list.h"
  74:../Dave/Generated/FREERTOS/list.c **** 
  75:../Dave/Generated/FREERTOS/list.c **** /*-----------------------------------------------------------
  76:../Dave/Generated/FREERTOS/list.c ****  * PUBLIC LIST API documented in list.h
  77:../Dave/Generated/FREERTOS/list.c ****  *----------------------------------------------------------*/
  78:../Dave/Generated/FREERTOS/list.c **** 
  79:../Dave/Generated/FREERTOS/list.c **** void vListInitialise( List_t * const pxList )
  80:../Dave/Generated/FREERTOS/list.c **** {
  28              	 .loc 1 80 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33              	.LVL0:
  81:../Dave/Generated/FREERTOS/list.c **** 	/* The list structure contains a list item which is used to mark the
  82:../Dave/Generated/FREERTOS/list.c **** 	end of the list.  To initialise the list the list end is inserted
  83:../Dave/Generated/FREERTOS/list.c **** 	as the only list entry. */
  84:../Dave/Generated/FREERTOS/list.c **** 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list struc
  34              	 .loc 1 84 0
  35 0000 00F10803 	 add r3,r0,#8
  85:../Dave/Generated/FREERTOS/list.c **** 
  86:../Dave/Generated/FREERTOS/list.c **** 	/* The list end value is the highest possible value in the list to
  87:../Dave/Generated/FREERTOS/list.c **** 	ensure it remains at the end of the list. */
  88:../Dave/Generated/FREERTOS/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  36              	 .loc 1 88 0
  37 0004 4FF0FF31 	 mov r1,#-1
  89:../Dave/Generated/FREERTOS/list.c **** 
  90:../Dave/Generated/FREERTOS/list.c **** 	/* The list end next and previous pointers point to itself so we know
  91:../Dave/Generated/FREERTOS/list.c **** 	when the list is empty. */
  92:../Dave/Generated/FREERTOS/list.c **** 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list
  93:../Dave/Generated/FREERTOS/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini l
  94:../Dave/Generated/FREERTOS/list.c **** 
  95:../Dave/Generated/FREERTOS/list.c **** 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  38              	 .loc 1 95 0
  39 0008 0022     	 movs r2,#0
  88:../Dave/Generated/FREERTOS/list.c **** 
  40              	 .loc 1 88 0
  41 000a 8160     	 str r1,[r0,#8]
  84:../Dave/Generated/FREERTOS/list.c **** 
  42              	 .loc 1 84 0
  43 000c 80E80C00 	 stmia r0,{r2,r3}
  92:../Dave/Generated/FREERTOS/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini l
  44              	 .loc 1 92 0
  45 0010 C360     	 str r3,[r0,#12]
  93:../Dave/Generated/FREERTOS/list.c **** 
  46              	 .loc 1 93 0
  47 0012 0361     	 str r3,[r0,#16]
  48 0014 7047     	 bx lr
  49              	 .cfi_endproc
  50              	.LFE128:
  52 0016 00BF     	 .section .text.vListInitialiseItem,"ax",%progbits
  53              	 .align 2
  54              	 .global vListInitialiseItem
  55              	 .thumb
  56              	 .thumb_func
  58              	vListInitialiseItem:
  59              	.LFB129:
  96:../Dave/Generated/FREERTOS/list.c **** 
  97:../Dave/Generated/FREERTOS/list.c **** 	/* Write known values into the list if
  98:../Dave/Generated/FREERTOS/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  99:../Dave/Generated/FREERTOS/list.c **** 	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
 100:../Dave/Generated/FREERTOS/list.c **** 	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
 101:../Dave/Generated/FREERTOS/list.c **** }
 102:../Dave/Generated/FREERTOS/list.c **** /*-----------------------------------------------------------*/
 103:../Dave/Generated/FREERTOS/list.c **** 
 104:../Dave/Generated/FREERTOS/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
 105:../Dave/Generated/FREERTOS/list.c **** {
  60              	 .loc 1 105 0
  61              	 .cfi_startproc
  62              	 
  63              	 
  64              	 
  65              	.LVL1:
 106:../Dave/Generated/FREERTOS/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
 107:../Dave/Generated/FREERTOS/list.c **** 	pxItem->pvContainer = NULL;
  66              	 .loc 1 107 0
  67 0000 0023     	 movs r3,#0
  68 0002 0361     	 str r3,[r0,#16]
  69 0004 7047     	 bx lr
  70              	 .cfi_endproc
  71              	.LFE129:
  73 0006 00BF     	 .section .text.vListInsertEnd,"ax",%progbits
  74              	 .align 2
  75              	 .global vListInsertEnd
  76              	 .thumb
  77              	 .thumb_func
  79              	vListInsertEnd:
  80              	.LFB130:
 108:../Dave/Generated/FREERTOS/list.c **** 
 109:../Dave/Generated/FREERTOS/list.c **** 	/* Write known values into the list item if
 110:../Dave/Generated/FREERTOS/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
 111:../Dave/Generated/FREERTOS/list.c **** 	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
 112:../Dave/Generated/FREERTOS/list.c **** 	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
 113:../Dave/Generated/FREERTOS/list.c **** }
 114:../Dave/Generated/FREERTOS/list.c **** /*-----------------------------------------------------------*/
 115:../Dave/Generated/FREERTOS/list.c **** 
 116:../Dave/Generated/FREERTOS/list.c **** void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
 117:../Dave/Generated/FREERTOS/list.c **** {
  81              	 .loc 1 117 0
  82              	 .cfi_startproc
  83              	 
  84              	 
  85              	 
  86              	.LVL2:
 118:../Dave/Generated/FREERTOS/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
 119:../Dave/Generated/FREERTOS/list.c **** 
 120:../Dave/Generated/FREERTOS/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 121:../Dave/Generated/FREERTOS/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 122:../Dave/Generated/FREERTOS/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 123:../Dave/Generated/FREERTOS/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 124:../Dave/Generated/FREERTOS/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 125:../Dave/Generated/FREERTOS/list.c **** 
 126:../Dave/Generated/FREERTOS/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
 127:../Dave/Generated/FREERTOS/list.c **** 	makes the new list item the last item to be removed by a call to
 128:../Dave/Generated/FREERTOS/list.c **** 	listGET_OWNER_OF_NEXT_ENTRY(). */
 129:../Dave/Generated/FREERTOS/list.c **** 	pxNewListItem->pxNext = pxIndex;
 130:../Dave/Generated/FREERTOS/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 131:../Dave/Generated/FREERTOS/list.c **** 
 132:../Dave/Generated/FREERTOS/list.c **** 	/* Only used during decision coverage testing. */
 133:../Dave/Generated/FREERTOS/list.c **** 	mtCOVERAGE_TEST_DELAY();
 134:../Dave/Generated/FREERTOS/list.c **** 
 135:../Dave/Generated/FREERTOS/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 136:../Dave/Generated/FREERTOS/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
 137:../Dave/Generated/FREERTOS/list.c **** 
 138:../Dave/Generated/FREERTOS/list.c **** 	/* Remember which list the item is in. */
 139:../Dave/Generated/FREERTOS/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 140:../Dave/Generated/FREERTOS/list.c **** 
 141:../Dave/Generated/FREERTOS/list.c **** 	( pxList->uxNumberOfItems )++;
  87              	 .loc 1 141 0
  88 0000 90E80C00 	 ldmia r0,{r2,r3}
 117:../Dave/Generated/FREERTOS/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
  89              	 .loc 1 117 0
  90 0004 10B4     	 push {r4}
  91              	.LCFI0:
  92              	 .cfi_def_cfa_offset 4
  93              	 .cfi_offset 4,-4
 130:../Dave/Generated/FREERTOS/list.c **** 
  94              	 .loc 1 130 0
  95 0006 9C68     	 ldr r4,[r3,#8]
  96 0008 8C60     	 str r4,[r1,#8]
 135:../Dave/Generated/FREERTOS/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
  97              	 .loc 1 135 0
  98 000a 9C68     	 ldr r4,[r3,#8]
 129:../Dave/Generated/FREERTOS/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  99              	 .loc 1 129 0
 100 000c 4B60     	 str r3,[r1,#4]
 101              	 .loc 1 141 0
 102 000e 0132     	 adds r2,r2,#1
 135:../Dave/Generated/FREERTOS/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
 103              	 .loc 1 135 0
 104 0010 6160     	 str r1,[r4,#4]
 136:../Dave/Generated/FREERTOS/list.c **** 
 105              	 .loc 1 136 0
 106 0012 9960     	 str r1,[r3,#8]
 142:../Dave/Generated/FREERTOS/list.c **** }
 107              	 .loc 1 142 0
 108 0014 5DF8044B 	 ldr r4,[sp],#4
 109              	.LCFI1:
 110              	 .cfi_restore 4
 111              	 .cfi_def_cfa_offset 0
 139:../Dave/Generated/FREERTOS/list.c **** 
 112              	 .loc 1 139 0
 113 0018 0861     	 str r0,[r1,#16]
 141:../Dave/Generated/FREERTOS/list.c **** }
 114              	 .loc 1 141 0
 115 001a 0260     	 str r2,[r0]
 116              	 .loc 1 142 0
 117 001c 7047     	 bx lr
 118              	 .cfi_endproc
 119              	.LFE130:
 121 001e 00BF     	 .section .text.vListInsert,"ax",%progbits
 122              	 .align 2
 123              	 .global vListInsert
 124              	 .thumb
 125              	 .thumb_func
 127              	vListInsert:
 128              	.LFB131:
 143:../Dave/Generated/FREERTOS/list.c **** /*-----------------------------------------------------------*/
 144:../Dave/Generated/FREERTOS/list.c **** 
 145:../Dave/Generated/FREERTOS/list.c **** void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
 146:../Dave/Generated/FREERTOS/list.c **** {
 129              	 .loc 1 146 0
 130              	 .cfi_startproc
 131              	 
 132              	 
 133              	 
 134              	.LVL3:
 135 0000 30B4     	 push {r4,r5}
 136              	.LCFI2:
 137              	 .cfi_def_cfa_offset 8
 138              	 .cfi_offset 4,-8
 139              	 .cfi_offset 5,-4
 147:../Dave/Generated/FREERTOS/list.c **** ListItem_t *pxIterator;
 148:../Dave/Generated/FREERTOS/list.c **** const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 140              	 .loc 1 148 0
 141 0002 0D68     	 ldr r5,[r1]
 142              	.LVL4:
 149:../Dave/Generated/FREERTOS/list.c **** 
 150:../Dave/Generated/FREERTOS/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 151:../Dave/Generated/FREERTOS/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 152:../Dave/Generated/FREERTOS/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 153:../Dave/Generated/FREERTOS/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 154:../Dave/Generated/FREERTOS/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 155:../Dave/Generated/FREERTOS/list.c **** 
 156:../Dave/Generated/FREERTOS/list.c **** 	/* Insert the new list item into the list, sorted in xItemValue order.
 157:../Dave/Generated/FREERTOS/list.c **** 
 158:../Dave/Generated/FREERTOS/list.c **** 	If the list already contains a list item with the same item value then the
 159:../Dave/Generated/FREERTOS/list.c **** 	new list item should be placed after it.  This ensures that TCB's which are
 160:../Dave/Generated/FREERTOS/list.c **** 	stored in ready lists (all of which have the same xItemValue value) get a
 161:../Dave/Generated/FREERTOS/list.c **** 	share of the CPU.  However, if the xItemValue is the same as the back marker
 162:../Dave/Generated/FREERTOS/list.c **** 	the iteration loop below will not end.  Therefore the value is checked
 163:../Dave/Generated/FREERTOS/list.c **** 	first, and the algorithm slightly modified if necessary. */
 164:../Dave/Generated/FREERTOS/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 143              	 .loc 1 164 0
 144 0004 6B1C     	 adds r3,r5,#1
 145 0006 11D0     	 beq .L12
 165:../Dave/Generated/FREERTOS/list.c **** 	{
 166:../Dave/Generated/FREERTOS/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 167:../Dave/Generated/FREERTOS/list.c **** 	}
 168:../Dave/Generated/FREERTOS/list.c **** 	else
 169:../Dave/Generated/FREERTOS/list.c **** 	{
 170:../Dave/Generated/FREERTOS/list.c **** 		/* *** NOTE ***********************************************************
 171:../Dave/Generated/FREERTOS/list.c **** 		If you find your application is crashing here then likely causes are
 172:../Dave/Generated/FREERTOS/list.c **** 		listed below.  In addition see http://www.freertos.org/FAQHelp.html for
 173:../Dave/Generated/FREERTOS/list.c **** 		more tips, and ensure configASSERT() is defined!
 174:../Dave/Generated/FREERTOS/list.c **** 		http://www.freertos.org/a00110.html#configASSERT
 175:../Dave/Generated/FREERTOS/list.c **** 
 176:../Dave/Generated/FREERTOS/list.c **** 			1) Stack overflow -
 177:../Dave/Generated/FREERTOS/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 178:../Dave/Generated/FREERTOS/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M
 179:../Dave/Generated/FREERTOS/list.c **** 			   parts where numerically high priority values denote low actual
 180:../Dave/Generated/FREERTOS/list.c **** 			   interrupt priorities, which can seem counter intuitive.  See
 181:../Dave/Generated/FREERTOS/list.c **** 			   http://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
 182:../Dave/Generated/FREERTOS/list.c **** 			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 183:../Dave/Generated/FREERTOS/list.c **** 			   http://www.freertos.org/a00110.html
 184:../Dave/Generated/FREERTOS/list.c **** 			3) Calling an API function from within a critical section or when
 185:../Dave/Generated/FREERTOS/list.c **** 			   the scheduler is suspended, or calling an API function that does
 186:../Dave/Generated/FREERTOS/list.c **** 			   not end in "FromISR" from an interrupt.
 187:../Dave/Generated/FREERTOS/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 188:../Dave/Generated/FREERTOS/list.c **** 			   before the scheduler has been started (are interrupts firing
 189:../Dave/Generated/FREERTOS/list.c **** 			   before vTaskStartScheduler() has been called?).
 190:../Dave/Generated/FREERTOS/list.c **** 		**********************************************************************/
 191:../Dave/Generated/FREERTOS/list.c **** 
 192:../Dave/Generated/FREERTOS/list.c **** 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
 146              	 .loc 1 192 0
 147 0008 00F10802 	 add r2,r0,#8
 148              	.LVL5:
 149 000c 00E0     	 b .L8
 150              	.L9:
 151 000e 1A46     	 mov r2,r3
 152              	.LVL6:
 153              	.L8:
 154              	 .loc 1 192 0 is_stmt 0 discriminator 1
 155 0010 5368     	 ldr r3,[r2,#4]
 156 0012 1C68     	 ldr r4,[r3]
 157 0014 A542     	 cmp r5,r4
 158 0016 FAD2     	 bcs .L9
 159              	.L7:
 193:../Dave/Generated/FREERTOS/list.c **** 		{
 194:../Dave/Generated/FREERTOS/list.c **** 			/* There is nothing to do here, just iterating to the wanted
 195:../Dave/Generated/FREERTOS/list.c **** 			insertion position. */
 196:../Dave/Generated/FREERTOS/list.c **** 		}
 197:../Dave/Generated/FREERTOS/list.c **** 	}
 198:../Dave/Generated/FREERTOS/list.c **** 
 199:../Dave/Generated/FREERTOS/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 200:../Dave/Generated/FREERTOS/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 201:../Dave/Generated/FREERTOS/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 202:../Dave/Generated/FREERTOS/list.c **** 	pxIterator->pxNext = pxNewListItem;
 203:../Dave/Generated/FREERTOS/list.c **** 
 204:../Dave/Generated/FREERTOS/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 205:../Dave/Generated/FREERTOS/list.c **** 	item later. */
 206:../Dave/Generated/FREERTOS/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 207:../Dave/Generated/FREERTOS/list.c **** 
 208:../Dave/Generated/FREERTOS/list.c **** 	( pxList->uxNumberOfItems )++;
 160              	 .loc 1 208 0 is_stmt 1
 161 0018 0468     	 ldr r4,[r0]
 199:../Dave/Generated/FREERTOS/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 162              	 .loc 1 199 0
 163 001a 4B60     	 str r3,[r1,#4]
 164              	 .loc 1 208 0
 165 001c 0134     	 adds r4,r4,#1
 200:../Dave/Generated/FREERTOS/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 166              	 .loc 1 200 0
 167 001e 9960     	 str r1,[r3,#8]
 201:../Dave/Generated/FREERTOS/list.c **** 	pxIterator->pxNext = pxNewListItem;
 168              	 .loc 1 201 0
 169 0020 8A60     	 str r2,[r1,#8]
 202:../Dave/Generated/FREERTOS/list.c **** 
 170              	 .loc 1 202 0
 171 0022 5160     	 str r1,[r2,#4]
 206:../Dave/Generated/FREERTOS/list.c **** 
 172              	 .loc 1 206 0
 173 0024 0861     	 str r0,[r1,#16]
 174              	 .loc 1 208 0
 175 0026 0460     	 str r4,[r0]
 209:../Dave/Generated/FREERTOS/list.c **** }
 176              	 .loc 1 209 0
 177 0028 30BC     	 pop {r4,r5}
 178              	.LCFI3:
 179              	 .cfi_remember_state
 180              	 .cfi_restore 5
 181              	 .cfi_restore 4
 182              	 .cfi_def_cfa_offset 0
 183              	.LVL7:
 184 002a 7047     	 bx lr
 185              	.LVL8:
 186              	.L12:
 187              	.LCFI4:
 188              	 .cfi_restore_state
 166:../Dave/Generated/FREERTOS/list.c **** 	}
 189              	 .loc 1 166 0
 190 002c 0269     	 ldr r2,[r0,#16]
 191              	.LVL9:
 192 002e 5368     	 ldr r3,[r2,#4]
 193 0030 F2E7     	 b .L7
 194              	 .cfi_endproc
 195              	.LFE131:
 197 0032 00BF     	 .section .text.uxListRemove,"ax",%progbits
 198              	 .align 2
 199              	 .global uxListRemove
 200              	 .thumb
 201              	 .thumb_func
 203              	uxListRemove:
 204              	.LFB132:
 210:../Dave/Generated/FREERTOS/list.c **** /*-----------------------------------------------------------*/
 211:../Dave/Generated/FREERTOS/list.c **** 
 212:../Dave/Generated/FREERTOS/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 213:../Dave/Generated/FREERTOS/list.c **** {
 205              	 .loc 1 213 0
 206              	 .cfi_startproc
 207              	 
 208              	 
 209              	 
 210              	.LVL10:
 214:../Dave/Generated/FREERTOS/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 215:../Dave/Generated/FREERTOS/list.c **** item. */
 216:../Dave/Generated/FREERTOS/list.c **** List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 217:../Dave/Generated/FREERTOS/list.c **** 
 218:../Dave/Generated/FREERTOS/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 211              	 .loc 1 218 0
 212 0000 4368     	 ldr r3,[r0,#4]
 213 0002 8168     	 ldr r1,[r0,#8]
 216:../Dave/Generated/FREERTOS/list.c **** 
 214              	 .loc 1 216 0
 215 0004 0269     	 ldr r2,[r0,#16]
 216              	.LVL11:
 213:../Dave/Generated/FREERTOS/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 217              	 .loc 1 213 0
 218 0006 10B4     	 push {r4}
 219              	.LCFI5:
 220              	 .cfi_def_cfa_offset 4
 221              	 .cfi_offset 4,-4
 222              	 .loc 1 218 0
 223 0008 9960     	 str r1,[r3,#8]
 219:../Dave/Generated/FREERTOS/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 224              	 .loc 1 219 0
 225 000a 8168     	 ldr r1,[r0,#8]
 220:../Dave/Generated/FREERTOS/list.c **** 
 221:../Dave/Generated/FREERTOS/list.c **** 	/* Only used during decision coverage testing. */
 222:../Dave/Generated/FREERTOS/list.c **** 	mtCOVERAGE_TEST_DELAY();
 223:../Dave/Generated/FREERTOS/list.c **** 
 224:../Dave/Generated/FREERTOS/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 225:../Dave/Generated/FREERTOS/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 226              	 .loc 1 225 0
 227 000c 5468     	 ldr r4,[r2,#4]
 219:../Dave/Generated/FREERTOS/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 228              	 .loc 1 219 0
 229 000e 4B60     	 str r3,[r1,#4]
 226:../Dave/Generated/FREERTOS/list.c **** 	{
 227:../Dave/Generated/FREERTOS/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 228:../Dave/Generated/FREERTOS/list.c **** 	}
 229:../Dave/Generated/FREERTOS/list.c **** 	else
 230:../Dave/Generated/FREERTOS/list.c **** 	{
 231:../Dave/Generated/FREERTOS/list.c **** 		mtCOVERAGE_TEST_MARKER();
 232:../Dave/Generated/FREERTOS/list.c **** 	}
 233:../Dave/Generated/FREERTOS/list.c **** 
 234:../Dave/Generated/FREERTOS/list.c **** 	pxItemToRemove->pvContainer = NULL;
 235:../Dave/Generated/FREERTOS/list.c **** 	( pxList->uxNumberOfItems )--;
 230              	 .loc 1 235 0
 231 0010 1368     	 ldr r3,[r2]
 225:../Dave/Generated/FREERTOS/list.c **** 	{
 232              	 .loc 1 225 0
 233 0012 8442     	 cmp r4,r0
 227:../Dave/Generated/FREERTOS/list.c **** 	}
 234              	 .loc 1 227 0
 235 0014 08BF     	 it eq
 236 0016 5160     	 streq r1,[r2,#4]
 237              	 .loc 1 235 0
 238 0018 013B     	 subs r3,r3,#1
 234:../Dave/Generated/FREERTOS/list.c **** 	( pxList->uxNumberOfItems )--;
 239              	 .loc 1 234 0
 240 001a 0021     	 movs r1,#0
 241 001c 0161     	 str r1,[r0,#16]
 236:../Dave/Generated/FREERTOS/list.c **** 
 237:../Dave/Generated/FREERTOS/list.c **** 	return pxList->uxNumberOfItems;
 238:../Dave/Generated/FREERTOS/list.c **** }
 242              	 .loc 1 238 0
 243 001e 5DF8044B 	 ldr r4,[sp],#4
 244              	.LCFI6:
 245              	 .cfi_restore 4
 246              	 .cfi_def_cfa_offset 0
 235:../Dave/Generated/FREERTOS/list.c **** 
 247              	 .loc 1 235 0
 248 0022 1360     	 str r3,[r2]
 249              	 .loc 1 238 0
 250 0024 1846     	 mov r0,r3
 251              	.LVL12:
 252 0026 7047     	 bx lr
 253              	 .cfi_endproc
 254              	.LFE132:
 256              	 .text
 257              	.Letext0:
 258              	 .file 2 "c:\\dave 4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 259              	 .file 3 "c:\\dave 4\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 260              	 .file 4 "../Dave/Generated/FREERTOS/portmacro.h"
 261              	 .file 5 "../Dave/Generated/FREERTOS/list.h"
 262              	 .file 6 "C:/Workspaces/Dave 4/CTPOT_test1/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 list.c
    {standard input}:20     .text.vListInitialise:00000000 $t
    {standard input}:25     .text.vListInitialise:00000000 vListInitialise
    {standard input}:53     .text.vListInitialiseItem:00000000 $t
    {standard input}:58     .text.vListInitialiseItem:00000000 vListInitialiseItem
    {standard input}:74     .text.vListInsertEnd:00000000 $t
    {standard input}:79     .text.vListInsertEnd:00000000 vListInsertEnd
    {standard input}:122    .text.vListInsert:00000000 $t
    {standard input}:127    .text.vListInsert:00000000 vListInsert
    {standard input}:198    .text.uxListRemove:00000000 $t
    {standard input}:203    .text.uxListRemove:00000000 uxListRemove
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
