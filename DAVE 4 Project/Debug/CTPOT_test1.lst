
CTPOT_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000107f0  08000000  0c000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00020000  2**0
                  ALLOC
  2 .data         0000019c  1ffe8800  0c0107f0  00018800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000143c  1ffe89a0  0c01098c  000189a0  2**3
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  0001ffc0  2**2
                  ALLOC
  5 .debug_aranges 00001238  00000000  00000000  000189a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00029a4b  00000000  00000000  00019bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005fa8  00000000  00000000  00043623  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a720  00000000  00000000  000495cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000368c  00000000  00000000  00053cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000dd6e  00000000  00000000  00057378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00012653  00000000  00000000  000650e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002bc0  00000000  00000000  00077739  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00001732  00000000  00000000  0007a2f9  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	c1 1f 00 08 99 02 00 08 00 00 00 00 61 20 00 08     ............a ..
 800003c:	d1 20 00 08 99 02 00 08 99 02 00 08 99 02 00 08     . ..............
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 4d 3b 00 08 99 02 00 08     ........M;......
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	b9 15 00 08 99 02 00 08 c5 15 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0107f0 	.word	0x0c0107f0
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	0000019c 	.word	0x0000019c
 8000254:	0c0107f0 	.word	0x0c0107f0
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe89a0 	.word	0x1ffe89a0
 8000264:	0000143c 	.word	0x0000143c
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	08000321 	.word	0x08000321
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	0800da69 	.word	0x0800da69
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08004f11 	.word	0x08004f11

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemCoreClockUpdate>:
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800029c:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <SystemCoreClockUpdate+0x74>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	03d9      	lsls	r1, r3, #15

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002a2:	b510      	push	{r4, lr}
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002a4:	d51d      	bpl.n	80002e2 <SystemCoreClockUpdate+0x46>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002a6:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <SystemCoreClockUpdate+0x78>)
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	07da      	lsls	r2, r3, #31
 80002ac:	d52c      	bpl.n	8000308 <SystemCoreClockUpdate+0x6c>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002ae:	481a      	ldr	r0, [pc, #104]	; (8000318 <SystemCoreClockUpdate+0x7c>)
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002b0:	4a18      	ldr	r2, [pc, #96]	; (8000314 <SystemCoreClockUpdate+0x78>)
 80002b2:	6813      	ldr	r3, [r2, #0]
 80002b4:	075b      	lsls	r3, r3, #29
 80002b6:	d416      	bmi.n	80002e6 <SystemCoreClockUpdate+0x4a>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80002b8:	6893      	ldr	r3, [r2, #8]
 80002ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002be:	3301      	adds	r3, #1
      
      temp = (temp / kdiv);
 80002c0:	fbb0 f3f3 	udiv	r3, r0, r3
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80002c4:	4a12      	ldr	r2, [pc, #72]	; (8000310 <SystemCoreClockUpdate+0x74>)
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);

  SystemCoreClock = temp;
 80002c6:	4915      	ldr	r1, [pc, #84]	; (800031c <SystemCoreClockUpdate+0x80>)
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80002c8:	68d0      	ldr	r0, [r2, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80002ca:	6912      	ldr	r2, [r2, #16]
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80002cc:	b2c0      	uxtb	r0, r0
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80002ce:	f002 0201 	and.w	r2, r2, #1
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80002d2:	3001      	adds	r0, #1
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80002d4:	3201      	adds	r2, #1
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80002d6:	fbb3 f0f0 	udiv	r0, r3, r0
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80002da:	fbb0 f0f2 	udiv	r0, r0, r2

  SystemCoreClock = temp;
 80002de:	6008      	str	r0, [r1, #0]
 80002e0:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80002e2:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <SystemCoreClockUpdate+0x7c>)
 80002e4:	e7ee      	b.n	80002c4 <SystemCoreClockUpdate+0x28>
    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002e6:	6891      	ldr	r1, [r2, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80002e8:	6893      	ldr	r3, [r2, #8]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80002ea:	6894      	ldr	r4, [r2, #8]
    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002ec:	f3c1 6203 	ubfx	r2, r1, #24, #4
 80002f0:	3201      	adds	r2, #1
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80002f2:	f3c4 4106 	ubfx	r1, r4, #16, #7
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80002f6:	f3c3 2306 	ubfx	r3, r3, #8, #7
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80002fa:	fb01 2202 	mla	r2, r1, r2, r2
 80002fe:	fbb0 f0f2 	udiv	r0, r0, r2
 8000302:	fb03 0300 	mla	r3, r3, r0, r0
 8000306:	e7dd      	b.n	80002c4 <SystemCoreClockUpdate+0x28>
      temp = OFI_FREQUENCY;
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000308:	f003 fba0 	bl	8003a4c <OSCHP_GetFrequency>
 800030c:	e7d0      	b.n	80002b0 <SystemCoreClockUpdate+0x14>
 800030e:	bf00      	nop
 8000310:	50004600 	.word	0x50004600
 8000314:	50004710 	.word	0x50004710
 8000318:	016e3600 	.word	0x016e3600
 800031c:	2003ffc0 	.word	0x2003ffc0

08000320 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000320:	b510      	push	{r4, lr}
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000322:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000326:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000328:	4c03      	ldr	r4, [pc, #12]	; (8000338 <SystemInit+0x18>)
 800032a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 800032e:	f003 fb4f 	bl	80039d0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8000332:	f003 fb8f 	bl	8003a54 <SystemCoreClockSetup>
 8000336:	bd10      	pop	{r4, pc}
 8000338:	2003ffc4 	.word	0x2003ffc4

0800033c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800033c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8000340:	4403      	add	r3, r0
 8000342:	b5f0      	push	{r4, r5, r6, r7, lr}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000344:	f001 0503 	and.w	r5, r1, #3
 8000348:	691e      	ldr	r6, [r3, #16]
  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 800034a:	4f1c      	ldr	r7, [pc, #112]	; (80003bc <XMC_GPIO_Init+0x80>)
{
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800034c:	00ed      	lsls	r5, r5, #3
 800034e:	24f8      	movs	r4, #248	; 0xf8
 8000350:	40ac      	lsls	r4, r5
 8000352:	ea26 0404 	bic.w	r4, r6, r4
 8000356:	611c      	str	r4, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000358:	6f46      	ldr	r6, [r0, #116]	; 0x74
 800035a:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 800035e:	2403      	movs	r4, #3
 8000360:	fa04 f40e 	lsl.w	r4, r4, lr
 8000364:	ea26 0404 	bic.w	r4, r6, r4


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000368:	42b8      	cmp	r0, r7
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800036a:	6744      	str	r4, [r0, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 800036c:	d01d      	beq.n	80003aa <XMC_GPIO_Init+0x6e>
 800036e:	4c14      	ldr	r4, [pc, #80]	; (80003c0 <XMC_GPIO_Init+0x84>)
 8000370:	42a0      	cmp	r0, r4
 8000372:	d01a      	beq.n	80003aa <XMC_GPIO_Init+0x6e>
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8000374:	6857      	ldr	r7, [r2, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000376:	7a16      	ldrb	r6, [r2, #8]
 8000378:	08cc      	lsrs	r4, r1, #3
 800037a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800037e:	408f      	lsls	r7, r1
 8000380:	6047      	str	r7, [r0, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000382:	f001 0107 	and.w	r1, r1, #7
 8000386:	6c27      	ldr	r7, [r4, #64]	; 0x40
 8000388:	0089      	lsls	r1, r1, #2
 800038a:	2007      	movs	r0, #7
 800038c:	4088      	lsls	r0, r1
 800038e:	ea27 0000 	bic.w	r0, r7, r0
 8000392:	6420      	str	r0, [r4, #64]	; 0x40
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000394:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000396:	fa06 f101 	lsl.w	r1, r6, r1
 800039a:	4301      	orrs	r1, r0
 800039c:	6421      	str	r1, [r4, #64]	; 0x40
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800039e:	7812      	ldrb	r2, [r2, #0]
 80003a0:	6919      	ldr	r1, [r3, #16]
 80003a2:	40aa      	lsls	r2, r5
 80003a4:	430a      	orrs	r2, r1
 80003a6:	611a      	str	r2, [r3, #16]
 80003a8:	bdf0      	pop	{r4, r5, r6, r7, pc}


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003aa:	6e04      	ldr	r4, [r0, #96]	; 0x60
 80003ac:	2601      	movs	r6, #1
 80003ae:	fa06 f101 	lsl.w	r1, r6, r1
 80003b2:	ea24 0101 	bic.w	r1, r4, r1
 80003b6:	6601      	str	r1, [r0, #96]	; 0x60
 80003b8:	e7f1      	b.n	800039e <XMC_GPIO_Init+0x62>
 80003ba:	bf00      	nop
 80003bc:	48028e00 	.word	0x48028e00
 80003c0:	48028f00 	.word	0x48028f00

080003c4 <XMC_SCU_RESET_DeassertPeripheralReset>:
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80003c4:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80003c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80003ca:	4a03      	ldr	r2, [pc, #12]	; (80003d8 <XMC_SCU_RESET_DeassertPeripheralReset+0x14>)

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80003cc:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80003d0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	50004414 	.word	0x50004414

080003dc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80003dc:	4b03      	ldr	r3, [pc, #12]	; (80003ec <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
  return SystemCoreClock;
 80003de:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x14>)
 80003e0:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80003e2:	6810      	ldr	r0, [r2, #0]
 80003e4:	f003 0301 	and.w	r3, r3, #1
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80003e8:	40d8      	lsrs	r0, r3
 80003ea:	4770      	bx	lr
 80003ec:	50004600 	.word	0x50004600
 80003f0:	2003ffc0 	.word	0x2003ffc0

080003f4 <XMC_SCU_CLOCK_SetUsbClockSource>:
}

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80003f4:	4a03      	ldr	r2, [pc, #12]	; (8000404 <XMC_SCU_CLOCK_SetUsbClockSource+0x10>)
 80003f6:	6993      	ldr	r3, [r2, #24]
 80003f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003fc:	4318      	orrs	r0, r3
 80003fe:	6190      	str	r0, [r2, #24]
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	50004600 	.word	0x50004600

08000408 <XMC_SCU_CLOCK_SetWdtClockSource>:
}

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000408:	4a03      	ldr	r2, [pc, #12]	; (8000418 <XMC_SCU_CLOCK_SetWdtClockSource+0x10>)
 800040a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800040c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000410:	4318      	orrs	r0, r3
 8000412:	6250      	str	r0, [r2, #36]	; 0x24
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	50004600 	.word	0x50004600

0800041c <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800041c:	4a05      	ldr	r2, [pc, #20]	; (8000434 <XMC_SCU_HIB_SetRtcClockSource+0x18>)
 800041e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8000422:	071b      	lsls	r3, r3, #28
 8000424:	d4fb      	bmi.n	800041e <XMC_SCU_HIB_SetRtcClockSource+0x2>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000426:	4a04      	ldr	r2, [pc, #16]	; (8000438 <XMC_SCU_HIB_SetRtcClockSource+0x1c>)
 8000428:	68d3      	ldr	r3, [r2, #12]
 800042a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800042e:	4318      	orrs	r0, r3
 8000430:	60d0      	str	r0, [r2, #12]
 8000432:	4770      	bx	lr
 8000434:	50004000 	.word	0x50004000
 8000438:	50004300 	.word	0x50004300

0800043c <XMC_SCU_CLOCK_SetUsbClockDivider>:
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800043c:	4a03      	ldr	r2, [pc, #12]	; (800044c <XMC_SCU_CLOCK_SetUsbClockDivider+0x10>)
 800043e:	6993      	ldr	r3, [r2, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8000440:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000442:	f023 0307 	bic.w	r3, r3, #7
 8000446:	4303      	orrs	r3, r0
 8000448:	6193      	str	r3, [r2, #24]
 800044a:	4770      	bx	lr
 800044c:	50004600 	.word	0x50004600

08000450 <XMC_SCU_CLOCK_SetEbuClockDivider>:
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000450:	4a03      	ldr	r2, [pc, #12]	; (8000460 <XMC_SCU_CLOCK_SetEbuClockDivider+0x10>)
 8000452:	69d3      	ldr	r3, [r2, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000454:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000456:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800045a:	4303      	orrs	r3, r0
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4770      	bx	lr
 8000460:	50004600 	.word	0x50004600

08000464 <XMC_SCU_CLOCK_SetWdtClockDivider>:
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000464:	4a03      	ldr	r2, [pc, #12]	; (8000474 <XMC_SCU_CLOCK_SetWdtClockDivider+0x10>)
 8000466:	6a53      	ldr	r3, [r2, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000468:	3801      	subs	r0, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800046a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800046e:	4303      	orrs	r3, r0
 8000470:	6253      	str	r3, [r2, #36]	; 0x24
 8000472:	4770      	bx	lr
 8000474:	50004600 	.word	0x50004600

08000478 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000478:	4b01      	ldr	r3, [pc, #4]	; (8000480 <XMC_SCU_CLOCK_EnableClock+0x8>)
 800047a:	6058      	str	r0, [r3, #4]
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	50004600 	.word	0x50004600

08000484 <XMC_SCU_CLOCK_UngatePeripheralClock>:
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000484:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000486:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800048a:	4a03      	ldr	r2, [pc, #12]	; (8000498 <XMC_SCU_CLOCK_UngatePeripheralClock+0x14>)

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800048c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000490:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	50004648 	.word	0x50004648

0800049c <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <XMC_SCU_CLOCK_StartUsbPll+0x40>)
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	f042 0201 	orr.w	r2, r2, #1
 80004a4:	615a      	str	r2, [r3, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80004a6:	695a      	ldr	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80004a8:	3801      	subs	r0, #1
 80004aa:	0600      	lsls	r0, r0, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80004ac:	3901      	subs	r1, #1
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80004ae:	f042 0210 	orr.w	r2, r2, #16

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80004b2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
{
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80004b6:	615a      	str	r2, [r3, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80004b8:	6158      	str	r0, [r3, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80004ba:	695a      	ldr	r2, [r3, #20]
 80004bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004c0:	615a      	str	r2, [r3, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80004c2:	695a      	ldr	r2, [r3, #20]
 80004c4:	f022 0210 	bic.w	r2, r2, #16
 80004c8:	615a      	str	r2, [r3, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80004ca:	695a      	ldr	r2, [r3, #20]
 80004cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80004d0:	615a      	str	r2, [r3, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80004d2:	691a      	ldr	r2, [r3, #16]
 80004d4:	0752      	lsls	r2, r2, #29
 80004d6:	d5fc      	bpl.n	80004d2 <XMC_SCU_CLOCK_StartUsbPll+0x36>
  {
    /* wait for PLL Lock */
  }

}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	50004710 	.word	0x50004710

080004e0 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	b083      	sub	sp, #12
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004e4:	4c64      	ldr	r4, [pc, #400]	; (8000678 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80004e6:	9e08      	ldr	r6, [sp, #32]

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80004e8:	b1c0      	cbz	r0, 800051c <XMC_SCU_CLOCK_StartSystemPll+0x3c>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004ea:	68e0      	ldr	r0, [r4, #12]
 80004ec:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80004f0:	f040 0001 	orr.w	r0, r0, #1
  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80004f4:	2901      	cmp	r1, #1
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80004f6:	60e0      	str	r0, [r4, #12]
  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80004f8:	f000 8086 	beq.w	8000608 <XMC_SCU_CLOCK_StartSystemPll+0x128>

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 80004fc:	4a5e      	ldr	r2, [pc, #376]	; (8000678 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 80004fe:	6893      	ldr	r3, [r2, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000500:	3e01      	subs	r6, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000502:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000506:	431e      	orrs	r6, r3
 8000508:	6096      	str	r6, [r2, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 800050a:	6853      	ldr	r3, [r2, #4]
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000512:	6813      	ldr	r3, [r2, #0]
 8000514:	07db      	lsls	r3, r3, #31
 8000516:	d5fc      	bpl.n	8000512 <XMC_SCU_CLOCK_StartSystemPll+0x32>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000518:	b003      	add	sp, #12
 800051a:	bdf0      	pop	{r4, r5, r6, r7, pc}
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800051c:	68e0      	ldr	r0, [r4, #12]
 800051e:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8000522:	f020 0001 	bic.w	r0, r0, #1
  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000526:	2901      	cmp	r1, #1
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000528:	60e0      	str	r0, [r4, #12]
  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 800052a:	d1e7      	bne.n	80004fc <XMC_SCU_CLOCK_StartSystemPll+0x1c>
 800052c:	e88d 000c 	stmia.w	sp, {r2, r3}
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000530:	f003 fa8c 	bl	8003a4c <OSCHP_GetFrequency>
 8000534:	4d51      	ldr	r5, [pc, #324]	; (800067c <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 8000536:	fba5 3500 	umull	r3, r5, r5, r0
 800053a:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800053e:	0cad      	lsrs	r5, r5, #18
 8000540:	05ad      	lsls	r5, r5, #22
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000542:	494d      	ldr	r1, [pc, #308]	; (8000678 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000544:	4c4e      	ldr	r4, [pc, #312]	; (8000680 <XMC_SCU_CLOCK_StartSystemPll+0x1a0>)

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000546:	684f      	ldr	r7, [r1, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000548:	484e      	ldr	r0, [pc, #312]	; (8000684 <XMC_SCU_CLOCK_StartSystemPll+0x1a4>)
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 800054a:	f047 0701 	orr.w	r7, r7, #1
 800054e:	604f      	str	r7, [r1, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000550:	684f      	ldr	r7, [r1, #4]
 8000552:	f047 0710 	orr.w	r7, r7, #16
 8000556:	604f      	str	r7, [r1, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000558:	f8d1 e008 	ldr.w	lr, [r1, #8]
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 800055c:	fb03 f505 	mul.w	r5, r3, r5

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000560:	1e57      	subs	r7, r2, #1
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000562:	fbb5 f5f2 	udiv	r5, r5, r2

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000566:	ea0e 0000 	and.w	r0, lr, r0
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 800056a:	fba4 4205 	umull	r4, r2, r4, r5
 800056e:	ea40 6007 	orr.w	r0, r0, r7, lsl #24
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000572:	1e5c      	subs	r4, r3, #1
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000574:	0e93      	lsrs	r3, r2, #26
 8000576:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 800057a:	3b01      	subs	r3, #1

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800057c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000580:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000582:	684b      	ldr	r3, [r1, #4]
 8000584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000588:	604b      	str	r3, [r1, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 800058a:	684b      	ldr	r3, [r1, #4]
 800058c:	f023 0310 	bic.w	r3, r3, #16
 8000590:	604b      	str	r3, [r1, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000592:	684b      	ldr	r3, [r1, #4]
 8000594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000598:	604b      	str	r3, [r1, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800059a:	6808      	ldr	r0, [r1, #0]
 800059c:	4b36      	ldr	r3, [pc, #216]	; (8000678 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 800059e:	0742      	lsls	r2, r0, #29
 80005a0:	d5fb      	bpl.n	800059a <XMC_SCU_CLOCK_StartSystemPll+0xba>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	f022 0201 	bic.w	r2, r2, #1
 80005a8:	605a      	str	r2, [r3, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80005aa:	4619      	mov	r1, r3
 80005ac:	680b      	ldr	r3, [r1, #0]
 80005ae:	4a32      	ldr	r2, [pc, #200]	; (8000678 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 80005b0:	f013 0401 	ands.w	r4, r3, #1
 80005b4:	d1fa      	bne.n	80005ac <XMC_SCU_CLOCK_StartSystemPll+0xcc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 80005b6:	4b34      	ldr	r3, [pc, #208]	; (8000688 <XMC_SCU_CLOCK_StartSystemPll+0x1a8>)
 80005b8:	fba3 1305 	umull	r1, r3, r3, r5
 80005bc:	0edb      	lsrs	r3, r3, #27
    if (kdiv < kdiv_temp)
 80005be:	429e      	cmp	r6, r3
 80005c0:	d33f      	bcc.n	8000642 <XMC_SCU_CLOCK_StartSystemPll+0x162>
 80005c2:	4f32      	ldr	r7, [pc, #200]	; (800068c <XMC_SCU_CLOCK_StartSystemPll+0x1ac>)
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 80005c4:	4b32      	ldr	r3, [pc, #200]	; (8000690 <XMC_SCU_CLOCK_StartSystemPll+0x1b0>)
 80005c6:	086d      	lsrs	r5, r5, #1
 80005c8:	fba3 2305 	umull	r2, r3, r3, r5
 80005cc:	0edb      	lsrs	r3, r3, #27
    if (kdiv < kdiv_temp)
 80005ce:	429e      	cmp	r6, r3
 80005d0:	d31d      	bcc.n	800060e <XMC_SCU_CLOCK_StartSystemPll+0x12e>
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80005d2:	4a29      	ldr	r2, [pc, #164]	; (8000678 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 80005d4:	6893      	ldr	r3, [r2, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 80005d6:	3e01      	subs	r6, #1
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80005d8:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005dc:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80005e0:	6096      	str	r6, [r2, #8]
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
 80005e2:	f7ff fe5b 	bl	800029c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	4a24      	ldr	r2, [pc, #144]	; (800067c <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 80005ea:	fba2 3203 	umull	r3, r2, r2, r3
 80005ee:	0c92      	lsrs	r2, r2, #18
 80005f0:	2332      	movs	r3, #50	; 0x32
 80005f2:	fb03 f202 	mul.w	r2, r3, r2

  for (i = 0U; i < delay; ++i)
 80005f6:	2300      	movs	r3, #0
 80005f8:	2a00      	cmp	r2, #0
 80005fa:	d08d      	beq.n	8000518 <XMC_SCU_CLOCK_StartSystemPll+0x38>
  {
    __NOP();
 80005fc:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80005fe:	3301      	adds	r3, #1
 8000600:	4293      	cmp	r3, r2
 8000602:	d1fb      	bne.n	80005fc <XMC_SCU_CLOCK_StartSystemPll+0x11c>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 8000604:	b003      	add	sp, #12
 8000606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000608:	f04f 65c0 	mov.w	r5, #100663296	; 0x6000000
 800060c:	e799      	b.n	8000542 <XMC_SCU_CLOCK_StartSystemPll+0x62>
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800060e:	491a      	ldr	r1, [pc, #104]	; (8000678 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000610:	688a      	ldr	r2, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000612:	3b01      	subs	r3, #1
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000614:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000618:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800061c:	608b      	str	r3, [r1, #8]
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
 800061e:	f7ff fe3d 	bl	800029c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	4a15      	ldr	r2, [pc, #84]	; (800067c <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 8000626:	fba2 3203 	umull	r3, r2, r2, r3
 800062a:	0c92      	lsrs	r2, r2, #18
 800062c:	2332      	movs	r3, #50	; 0x32
 800062e:	fb03 f202 	mul.w	r2, r3, r2

  for (i = 0U; i < delay; ++i)
 8000632:	2a00      	cmp	r2, #0
 8000634:	d0cd      	beq.n	80005d2 <XMC_SCU_CLOCK_StartSystemPll+0xf2>
 8000636:	2300      	movs	r3, #0
  {
    __NOP();
 8000638:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800063a:	3301      	adds	r3, #1
 800063c:	4293      	cmp	r3, r2
 800063e:	d1fb      	bne.n	8000638 <XMC_SCU_CLOCK_StartSystemPll+0x158>
 8000640:	e7c7      	b.n	80005d2 <XMC_SCU_CLOCK_StartSystemPll+0xf2>
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000642:	6891      	ldr	r1, [r2, #8]
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000644:	4f11      	ldr	r7, [pc, #68]	; (800068c <XMC_SCU_CLOCK_StartSystemPll+0x1ac>)
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000646:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 800064a:	3b01      	subs	r3, #1
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800064c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000650:	6093      	str	r3, [r2, #8]
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
 8000652:	f7ff fe23 	bl	800029c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	4a08      	ldr	r2, [pc, #32]	; (800067c <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 800065a:	fba2 3203 	umull	r3, r2, r2, r3
 800065e:	0c92      	lsrs	r2, r2, #18
 8000660:	2332      	movs	r3, #50	; 0x32
 8000662:	fb03 f202 	mul.w	r2, r3, r2

  for (i = 0U; i < delay; ++i)
 8000666:	2a00      	cmp	r2, #0
 8000668:	d0ac      	beq.n	80005c4 <XMC_SCU_CLOCK_StartSystemPll+0xe4>
 800066a:	4623      	mov	r3, r4
  {
    __NOP();
 800066c:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800066e:	3301      	adds	r3, #1
 8000670:	4293      	cmp	r3, r2
 8000672:	d1fb      	bne.n	800066c <XMC_SCU_CLOCK_StartSystemPll+0x18c>
 8000674:	e7a6      	b.n	80005c4 <XMC_SCU_CLOCK_StartSystemPll+0xe4>
 8000676:	bf00      	nop
 8000678:	50004710 	.word	0x50004710
 800067c:	431bde83 	.word	0x431bde83
 8000680:	aaaaaaab 	.word	0xaaaaaaab
 8000684:	f08080ff 	.word	0xf08080ff
 8000688:	88888889 	.word	0x88888889
 800068c:	2003ffc0 	.word	0x2003ffc0
 8000690:	b60b60b7 	.word	0xb60b60b7

08000694 <XMC_SCU_CLOCK_Init>:
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000694:	4977      	ldr	r1, [pc, #476]	; (8000874 <XMC_SCU_CLOCK_Init+0x1e0>)

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000696:	4a78      	ldr	r2, [pc, #480]	; (8000878 <XMC_SCU_CLOCK_Init+0x1e4>)
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000698:	68cb      	ldr	r3, [r1, #12]
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800069a:	b5f0      	push	{r4, r5, r6, r7, lr}
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 800069c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006a0:	60cb      	str	r3, [r1, #12]

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80006a2:	6813      	ldr	r3, [r2, #0]
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80006a4:	4605      	mov	r5, r0

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80006a6:	07d8      	lsls	r0, r3, #31
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80006a8:	b083      	sub	sp, #12

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80006aa:	d404      	bmi.n	80006b6 <XMC_SCU_CLOCK_Init+0x22>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80006ac:	2301      	movs	r3, #1
 80006ae:	6053      	str	r3, [r2, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80006b0:	6813      	ldr	r3, [r2, #0]
 80006b2:	07db      	lsls	r3, r3, #31
 80006b4:	d5fc      	bpl.n	80006b0 <XMC_SCU_CLOCK_Init+0x1c>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80006b6:	4a71      	ldr	r2, [pc, #452]	; (800087c <XMC_SCU_CLOCK_Init+0x1e8>)
 80006b8:	6813      	ldr	r3, [r2, #0]
 80006ba:	0599      	lsls	r1, r3, #22
 80006bc:	d505      	bpl.n	80006ca <XMC_SCU_CLOCK_Init+0x36>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80006be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006c2:	6093      	str	r3, [r2, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 80006c4:	6813      	ldr	r3, [r2, #0]
 80006c6:	059f      	lsls	r7, r3, #22
 80006c8:	d4fc      	bmi.n	80006c4 <XMC_SCU_CLOCK_Init+0x30>

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);

  XMC_SCU_HIB_EnableHibernateDomain();

  if (config->enable_osculp == true)
 80006ca:	79eb      	ldrb	r3, [r5, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	f040 8091 	bne.w	80007f4 <XMC_SCU_CLOCK_Init+0x160>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80006d2:	7a68      	ldrb	r0, [r5, #9]
}

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80006d4:	4a6a      	ldr	r2, [pc, #424]	; (8000880 <XMC_SCU_CLOCK_Init+0x1ec>)
 80006d6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80006da:	071b      	lsls	r3, r3, #28
 80006dc:	d4fb      	bmi.n	80006d6 <XMC_SCU_CLOCK_Init+0x42>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80006de:	4969      	ldr	r1, [pc, #420]	; (8000884 <XMC_SCU_CLOCK_Init+0x1f0>)
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
  return(SCU_GENERAL->MIRRSTS);
 80006e0:	4b67      	ldr	r3, [pc, #412]	; (8000880 <XMC_SCU_CLOCK_Init+0x1ec>)
 80006e2:	68ca      	ldr	r2, [r1, #12]
 80006e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006e8:	4302      	orrs	r2, r0
 80006ea:	60ca      	str	r2, [r1, #12]
 80006ec:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
  while (XMC_SCU_GetMirrorStatus() != 0)
 80006f0:	2c00      	cmp	r4, #0
 80006f2:	d1fb      	bne.n	80006ec <XMC_SCU_CLOCK_Init+0x58>

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80006f4:	4a64      	ldr	r2, [pc, #400]	; (8000888 <XMC_SCU_CLOCK_Init+0x1f4>)
  while (XMC_SCU_GetMirrorStatus() != 0)
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80006f6:	7a29      	ldrb	r1, [r5, #8]

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80006f8:	6853      	ldr	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80006fa:	2901      	cmp	r1, #1

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80006fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000700:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000702:	f000 809d 	beq.w	8000840 <XMC_SCU_CLOCK_Init+0x1ac>
 8000706:	4e61      	ldr	r6, [pc, #388]	; (800088c <XMC_SCU_CLOCK_Init+0x1f8>)
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
 8000708:	f7ff fdc8 	bl	800029c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800070c:	6833      	ldr	r3, [r6, #0]
 800070e:	4a60      	ldr	r2, [pc, #384]	; (8000890 <XMC_SCU_CLOCK_Init+0x1fc>)
 8000710:	fba2 3203 	umull	r3, r2, r2, r3
 8000714:	0c92      	lsrs	r2, r2, #18
 8000716:	2364      	movs	r3, #100	; 0x64
 8000718:	fb03 f202 	mul.w	r2, r3, r2

  for (i = 0U; i < delay; ++i)
 800071c:	b122      	cbz	r2, 8000728 <XMC_SCU_CLOCK_Init+0x94>
 800071e:	2300      	movs	r3, #0
  {
    __NOP();
 8000720:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000722:	3301      	adds	r3, #1
 8000724:	4293      	cmp	r3, r2
 8000726:	d1fb      	bne.n	8000720 <XMC_SCU_CLOCK_Init+0x8c>
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000728:	4b52      	ldr	r3, [pc, #328]	; (8000874 <XMC_SCU_CLOCK_Init+0x1e0>)
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 800072a:	7c2c      	ldrb	r4, [r5, #16]
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800072c:	68da      	ldr	r2, [r3, #12]
  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);

  if (config->enable_oschp == true)
 800072e:	79a8      	ldrb	r0, [r5, #6]
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000730:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000734:	1e62      	subs	r2, r4, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000736:	430a      	orrs	r2, r1
 8000738:	60da      	str	r2, [r3, #12]
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800073a:	691a      	ldr	r2, [r3, #16]
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800073c:	7c6c      	ldrb	r4, [r5, #17]
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800073e:	f022 0101 	bic.w	r1, r2, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000742:	1e62      	subs	r2, r4, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000744:	430a      	orrs	r2, r1
 8000746:	611a      	str	r2, [r3, #16]
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000748:	6a1a      	ldr	r2, [r3, #32]

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 800074a:	7cac      	ldrb	r4, [r5, #18]
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800074c:	f022 0101 	bic.w	r1, r2, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000750:	1e62      	subs	r2, r4, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000752:	430a      	orrs	r2, r1
 8000754:	621a      	str	r2, [r3, #32]
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000756:	695a      	ldr	r2, [r3, #20]
  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8000758:	7cec      	ldrb	r4, [r5, #19]
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800075a:	f022 0101 	bic.w	r1, r2, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800075e:	1e62      	subs	r2, r4, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000760:	430a      	orrs	r2, r1
 8000762:	615a      	str	r2, [r3, #20]
  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);

  if (config->enable_oschp == true)
 8000764:	bb28      	cbnz	r0, 80007b2 <XMC_SCU_CLOCK_Init+0x11e>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000766:	78e9      	ldrb	r1, [r5, #3]
 8000768:	b9a1      	cbnz	r1, 8000794 <XMC_SCU_CLOCK_Init+0x100>
}

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800076a:	4a47      	ldr	r2, [pc, #284]	; (8000888 <XMC_SCU_CLOCK_Init+0x1f4>)
 800076c:	6853      	ldr	r3, [r2, #4]
 800076e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000772:	f043 0302 	orr.w	r3, r3, #2
 8000776:	6053      	str	r3, [r2, #4]
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000778:	68eb      	ldr	r3, [r5, #12]
 800077a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800077e:	d104      	bne.n	800078a <XMC_SCU_CLOCK_Init+0xf6>
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000780:	4a3c      	ldr	r2, [pc, #240]	; (8000874 <XMC_SCU_CLOCK_Init+0x1e0>)
 8000782:	68d3      	ldr	r3, [r2, #12]
 8000784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000788:	60d3      	str	r3, [r2, #12]
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
  }
  SystemCoreClockUpdate();
}
 800078a:	b003      	add	sp, #12
 800078c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
  }
  SystemCoreClockUpdate();
 8000790:	f7ff bd84 	b.w	800029c <SystemCoreClockUpdate>
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000794:	4a3c      	ldr	r2, [pc, #240]	; (8000888 <XMC_SCU_CLOCK_Init+0x1f4>)
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000796:	88a8      	ldrh	r0, [r5, #4]
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000798:	6853      	ldr	r3, [r2, #4]
 800079a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800079e:	f023 0302 	bic.w	r3, r3, #2
 80007a2:	6053      	str	r3, [r2, #4]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80007a4:	78ac      	ldrb	r4, [r5, #2]
 80007a6:	786a      	ldrb	r2, [r5, #1]
 80007a8:	782b      	ldrb	r3, [r5, #0]
 80007aa:	9400      	str	r4, [sp, #0]
 80007ac:	f7ff fe98 	bl	80004e0 <XMC_SCU_CLOCK_StartSystemPll>
 80007b0:	e7e2      	b.n	8000778 <XMC_SCU_CLOCK_Init+0xe4>
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80007b2:	4c35      	ldr	r4, [pc, #212]	; (8000888 <XMC_SCU_CLOCK_Init+0x1f4>)

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80007b4:	4f37      	ldr	r7, [pc, #220]	; (8000894 <XMC_SCU_CLOCK_Init+0x200>)
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80007b6:	6863      	ldr	r3, [r4, #4]
 80007b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007bc:	6063      	str	r3, [r4, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80007be:	687e      	ldr	r6, [r7, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80007c0:	f003 f944 	bl	8003a4c <OSCHP_GetFrequency>
 80007c4:	4a34      	ldr	r2, [pc, #208]	; (8000898 <XMC_SCU_CLOCK_Init+0x204>)
 80007c6:	fba2 3200 	umull	r3, r2, r2, r0
 80007ca:	0d12      	lsrs	r2, r2, #20
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80007cc:	f426 2370 	bic.w	r3, r6, #983040	; 0xf0000
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80007d0:	3a01      	subs	r2, #1
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80007d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80007d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007da:	607b      	str	r3, [r7, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 80007dc:	6863      	ldr	r3, [r4, #4]
 80007de:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80007e2:	6063      	str	r3, [r4, #4]
}

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 80007e4:	4622      	mov	r2, r4
 80007e6:	6813      	ldr	r3, [r2, #0]
 80007e8:	f403 7360 	and.w	r3, r3, #896	; 0x380
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);

  if (config->enable_oschp == true)
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80007ec:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80007f0:	d1f9      	bne.n	80007e6 <XMC_SCU_CLOCK_Init+0x152>
 80007f2:	e7b8      	b.n	8000766 <XMC_SCU_CLOCK_Init+0xd2>

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80007f4:	4a22      	ldr	r2, [pc, #136]	; (8000880 <XMC_SCU_CLOCK_Init+0x1ec>)
 80007f6:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 80007fa:	061e      	lsls	r6, r3, #24
 80007fc:	d4fb      	bmi.n	80007f6 <XMC_SCU_CLOCK_Init+0x162>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80007fe:	4921      	ldr	r1, [pc, #132]	; (8000884 <XMC_SCU_CLOCK_Init+0x1f0>)

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000800:	4a1f      	ldr	r2, [pc, #124]	; (8000880 <XMC_SCU_CLOCK_Init+0x1ec>)
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000802:	69cb      	ldr	r3, [r1, #28]
 8000804:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000808:	61cb      	str	r3, [r1, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800080a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800080e:	071c      	lsls	r4, r3, #28
 8000810:	d4fb      	bmi.n	800080a <XMC_SCU_CLOCK_Init+0x176>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000812:	491c      	ldr	r1, [pc, #112]	; (8000884 <XMC_SCU_CLOCK_Init+0x1f0>)

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000814:	4a1a      	ldr	r2, [pc, #104]	; (8000880 <XMC_SCU_CLOCK_Init+0x1ec>)
  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000816:	68cb      	ldr	r3, [r1, #12]
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	60cb      	str	r3, [r1, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 800081e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8000822:	0758      	lsls	r0, r3, #29
 8000824:	d4fb      	bmi.n	800081e <XMC_SCU_CLOCK_Init+0x18a>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <XMC_SCU_CLOCK_Init+0x1f0>)
 8000828:	4a15      	ldr	r2, [pc, #84]	; (8000880 <XMC_SCU_CLOCK_Init+0x1ec>)
 800082a:	2108      	movs	r1, #8
 800082c:	6099      	str	r1, [r3, #8]
 800082e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4

  while (XMC_SCU_GetMirrorStatus() != 0)
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1fb      	bne.n	800082e <XMC_SCU_CLOCK_Init+0x19a>

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000836:	4a13      	ldr	r2, [pc, #76]	; (8000884 <XMC_SCU_CLOCK_Init+0x1f0>)
 8000838:	6813      	ldr	r3, [r2, #0]
  XMC_SCU_HIB_EnableHibernateDomain();

  if (config->enable_osculp == true)
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800083a:	0719      	lsls	r1, r3, #28
 800083c:	d4fc      	bmi.n	8000838 <XMC_SCU_CLOCK_Init+0x1a4>
 800083e:	e748      	b.n	80006d2 <XMC_SCU_CLOCK_Init+0x3e>
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000840:	6853      	ldr	r3, [r2, #4]
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000842:	4e12      	ldr	r6, [pc, #72]	; (800088c <XMC_SCU_CLOCK_Init+0x1f8>)
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000844:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000848:	6053      	str	r3, [r2, #4]
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
  uint32_t i;

  SystemCoreClockUpdate();
 800084a:	f7ff fd27 	bl	800029c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <XMC_SCU_CLOCK_Init+0x1fc>)
 8000850:	6833      	ldr	r3, [r6, #0]
 8000852:	fba2 2303 	umull	r2, r3, r2, r3
 8000856:	0c9a      	lsrs	r2, r3, #18
 8000858:	2364      	movs	r3, #100	; 0x64
 800085a:	fb03 f302 	mul.w	r3, r3, r2

  for (i = 0U; i < delay; ++i)
 800085e:	b11b      	cbz	r3, 8000868 <XMC_SCU_CLOCK_Init+0x1d4>
  {
    __NOP();
 8000860:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000862:	3401      	adds	r4, #1
 8000864:	429c      	cmp	r4, r3
 8000866:	d1fb      	bne.n	8000860 <XMC_SCU_CLOCK_Init+0x1cc>
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
    XMC_SCU_lDelay(100UL);

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000868:	4a07      	ldr	r2, [pc, #28]	; (8000888 <XMC_SCU_CLOCK_Init+0x1f4>)
 800086a:	6853      	ldr	r3, [r2, #4]
 800086c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000870:	6053      	str	r3, [r2, #4]
 8000872:	e749      	b.n	8000708 <XMC_SCU_CLOCK_Init+0x74>
 8000874:	50004600 	.word	0x50004600
 8000878:	50004200 	.word	0x50004200
 800087c:	50004400 	.word	0x50004400
 8000880:	50004000 	.word	0x50004000
 8000884:	50004300 	.word	0x50004300
 8000888:	50004710 	.word	0x50004710
 800088c:	2003ffc0 	.word	0x2003ffc0
 8000890:	431bde83 	.word	0x431bde83
 8000894:	50004700 	.word	0x50004700
 8000898:	6b5fca6b 	.word	0x6b5fca6b

0800089c <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 800089c:	b538      	push	{r3, r4, r5, lr}
 800089e:	4604      	mov	r4, r0
{
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80008a0:	2010      	movs	r0, #16
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80008a2:	460d      	mov	r5, r1
{
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80008a4:	f7ff fde8 	bl	8000478 <XMC_SCU_CLOCK_EnableClock>
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <XMC_CCU4_Init+0x74>)
 80008aa:	429c      	cmp	r4, r3
 80008ac:	d01a      	beq.n	80008e4 <XMC_CCU4_Init+0x48>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
  }
#if defined(CCU41)
  else if (module == CCU41)
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <XMC_CCU4_Init+0x78>)
 80008b0:	429c      	cmp	r4, r3
 80008b2:	d01e      	beq.n	80008f2 <XMC_CCU4_Init+0x56>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <XMC_CCU4_Init+0x7c>)
 80008b6:	429c      	cmp	r4, r3
 80008b8:	d022      	beq.n	8000900 <XMC_CCU4_Init+0x64>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <XMC_CCU4_Init+0x80>)
 80008bc:	429c      	cmp	r4, r3
 80008be:	d00a      	beq.n	80008d6 <XMC_CCU4_Init+0x3a>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80008c0:	68e3      	ldr	r3, [r4, #12]
 80008c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c6:	60e3      	str	r3, [r4, #12]
  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
  
  gctrl = module->GCTRL;
 80008c8:	6821      	ldr	r1, [r4, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80008ca:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 80008ce:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
  
  module->GCTRL = gctrl;
 80008d2:	6021      	str	r1, [r4, #0]
 80008d4:	bd38      	pop	{r3, r4, r5, pc}
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 80008d6:	4812      	ldr	r0, [pc, #72]	; (8000920 <XMC_CCU4_Init+0x84>)
 80008d8:	f7ff fdd4 	bl	8000484 <XMC_SCU_CLOCK_UngatePeripheralClock>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80008dc:	4810      	ldr	r0, [pc, #64]	; (8000920 <XMC_CCU4_Init+0x84>)
 80008de:	f7ff fd71 	bl	80003c4 <XMC_SCU_RESET_DeassertPeripheralReset>
 80008e2:	e7ed      	b.n	80008c0 <XMC_CCU4_Init+0x24>

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 80008e4:	2004      	movs	r0, #4
 80008e6:	f7ff fdcd 	bl	8000484 <XMC_SCU_CLOCK_UngatePeripheralClock>

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  if (module == CCU40)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80008ea:	2004      	movs	r0, #4
 80008ec:	f7ff fd6a 	bl	80003c4 <XMC_SCU_RESET_DeassertPeripheralReset>
 80008f0:	e7e6      	b.n	80008c0 <XMC_CCU4_Init+0x24>
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
  }
#if defined(CCU41)
  else if (module == CCU41)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 80008f2:	2008      	movs	r0, #8
 80008f4:	f7ff fdc6 	bl	8000484 <XMC_SCU_CLOCK_UngatePeripheralClock>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
  }
#if defined(CCU41)
  else if (module == CCU41)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80008f8:	2008      	movs	r0, #8
 80008fa:	f7ff fd63 	bl	80003c4 <XMC_SCU_RESET_DeassertPeripheralReset>
 80008fe:	e7df      	b.n	80008c0 <XMC_CCU4_Init+0x24>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8000900:	2010      	movs	r0, #16
 8000902:	f7ff fdbf 	bl	8000484 <XMC_SCU_CLOCK_UngatePeripheralClock>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000906:	2010      	movs	r0, #16
 8000908:	f7ff fd5c 	bl	80003c4 <XMC_SCU_RESET_DeassertPeripheralReset>
 800090c:	e7d8      	b.n	80008c0 <XMC_CCU4_Init+0x24>
 800090e:	bf00      	nop
 8000910:	4000c000 	.word	0x4000c000
 8000914:	40010000 	.word	0x40010000
 8000918:	40014000 	.word	0x40014000
 800091c:	48004000 	.word	0x48004000
 8000920:	10000001 	.word	0x10000001

08000924 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000924:	b470      	push	{r4, r5, r6}
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000926:	794b      	ldrb	r3, [r1, #5]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000928:	790e      	ldrb	r6, [r1, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 800092a:	6809      	ldr	r1, [r1, #0]
 800092c:	6141      	str	r1, [r0, #20]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 800092e:	461c      	mov	r4, r3
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000930:	461d      	mov	r5, r3
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000932:	4632      	mov	r2, r6
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000934:	f3c3 1340 	ubfx	r3, r3, #5, #1
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000938:	f006 060f 	and.w	r6, r6, #15
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800093c:	f005 050f 	and.w	r5, r5, #15
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000940:	f3c4 1100 	ubfx	r1, r4, #4, #1
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000944:	051b      	lsls	r3, r3, #20
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000946:	0912      	lsrs	r2, r2, #4
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000948:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800094a:	6246      	str	r6, [r0, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800094c:	6205      	str	r5, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 800094e:	6181      	str	r1, [r0, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
}
 8000950:	bc70      	pop	{r4, r5, r6}
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000952:	62c2      	str	r2, [r0, #44]	; 0x2c
}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000958:	2909      	cmp	r1, #9
 800095a:	b430      	push	{r4, r5}

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 800095c:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
 8000960:	d80d      	bhi.n	800097e <XMC_CCU4_SLICE_SetInterruptNode+0x26>
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <XMC_CCU4_SLICE_SetInterruptNode+0x30>)
 8000964:	4d09      	ldr	r5, [pc, #36]	; (800098c <XMC_CCU4_SLICE_SetInterruptNode+0x34>)
 8000966:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800096a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800096e:	43db      	mvns	r3, r3
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
 8000970:	4023      	ands	r3, r4
  srs |= (uint32_t)sr << pos;
 8000972:	408a      	lsls	r2, r1
 8000974:	431a      	orrs	r2, r3
  slice->SRS = srs;
 8000976:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
}
 800097a:	bc30      	pop	{r4, r5}
 800097c:	4770      	bx	lr

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 800097e:	210c      	movs	r1, #12
 8000980:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 8000984:	e7f4      	b.n	8000970 <XMC_CCU4_SLICE_SetInterruptNode+0x18>
 8000986:	bf00      	nop
 8000988:	0800e32c 	.word	0x0800e32c
 800098c:	0800e304 	.word	0x0800e304

08000990 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8000990:	b538      	push	{r3, r4, r5, lr}
 8000992:	4604      	mov	r4, r0
{
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000994:	2010      	movs	r0, #16
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8000996:	460d      	mov	r5, r1
{
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000998:	f7ff fd6e 	bl	8000478 <XMC_SCU_CLOCK_EnableClock>
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
  if (module == CCU80)
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <XMC_CCU8_Init+0x50>)
 800099e:	429c      	cmp	r4, r3
 80009a0:	d016      	beq.n	80009d0 <XMC_CCU8_Init+0x40>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
  }
#if defined(CCU81)
  else if (module == CCU81)
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <XMC_CCU8_Init+0x54>)
 80009a4:	429c      	cmp	r4, r3
 80009a6:	d00a      	beq.n	80009be <XMC_CCU8_Init+0x2e>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 80009a8:	68e3      	ldr	r3, [r4, #12]
 80009aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ae:	60e3      	str	r3, [r4, #12]
  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
  
  gctrl = module->GCTRL;
 80009b0:	6823      	ldr	r3, [r4, #0]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 80009b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 80009b6:	ea43 3185 	orr.w	r1, r3, r5, lsl #14
  
  module->GCTRL = gctrl;
 80009ba:	6021      	str	r1, [r4, #0]
 80009bc:	bd38      	pop	{r3, r4, r5, pc}
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
  }
#if defined(CCU81)
  else if (module == CCU81)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 80009be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009c2:	f7ff fd5f 	bl	8000484 <XMC_SCU_CLOCK_UngatePeripheralClock>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
  }
#if defined(CCU81)
  else if (module == CCU81)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 80009c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009ca:	f7ff fcfb 	bl	80003c4 <XMC_SCU_RESET_DeassertPeripheralReset>
 80009ce:	e7eb      	b.n	80009a8 <XMC_CCU8_Init+0x18>

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
  if (module == CCU80)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 80009d0:	2080      	movs	r0, #128	; 0x80
 80009d2:	f7ff fd57 	bl	8000484 <XMC_SCU_CLOCK_UngatePeripheralClock>

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
  if (module == CCU80)
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 80009d6:	2080      	movs	r0, #128	; 0x80
 80009d8:	f7ff fcf4 	bl	80003c4 <XMC_SCU_RESET_DeassertPeripheralReset>
 80009dc:	e7e4      	b.n	80009a8 <XMC_CCU8_Init+0x18>
 80009de:	bf00      	nop
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40024000 	.word	0x40024000

080009e8 <XMC_CCU8_SLICE_CompareInit>:
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 80009e8:	7b4b      	ldrb	r3, [r1, #13]
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80009ea:	b470      	push	{r4, r5, r6}
  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80009ec:	7b0d      	ldrb	r5, [r1, #12]
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 80009ee:	2601      	movs	r6, #1
 80009f0:	6106      	str	r6, [r0, #16]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80009f2:	462c      	mov	r4, r5
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80009f4:	461a      	mov	r2, r3
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 80009f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80009fa:	680e      	ldr	r6, [r1, #0]
 80009fc:	6146      	str	r6, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 80009fe:	051b      	lsls	r3, r3, #20
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000a00:	f005 050f 	and.w	r5, r5, #15
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000a04:	0924      	lsrs	r4, r4, #4
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000a06:	f002 020f 	and.w	r2, r2, #15
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
  /* Program the timer mode */
  slice->TC = compare_init->tc;
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8000a0a:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000a0c:	6245      	str	r5, [r0, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000a0e:	62c4      	str	r4, [r0, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000a10:	6202      	str	r2, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8000a12:	684b      	ldr	r3, [r1, #4]
 8000a14:	6183      	str	r3, [r0, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8000a16:	688b      	ldr	r3, [r1, #8]
 8000a18:	f083 0314 	eor.w	r3, r3, #20
 8000a1c:	6483      	str	r3, [r0, #72]	; 0x48
#endif
}
 8000a1e:	bc70      	pop	{r4, r5, r6}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <XMC_CCU8_SetMultiChannelShadowTransferMode>:
{
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8000a24:	6802      	ldr	r2, [r0, #0]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8000a26:	b28b      	uxth	r3, r1
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  
  gctrl = module->GCTRL;
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8000a28:	ea22 4111 	bic.w	r1, r2, r1, lsr #16
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8000a2c:	4319      	orrs	r1, r3
  module->GCTRL = gctrl;
 8000a2e:	6001      	str	r1, [r0, #0]
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <XMC_CCU8_SLICE_StartConfig>:
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 8000a34:	6843      	ldr	r3, [r0, #4]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 8000a36:	f023 0303 	bic.w	r3, r3, #3
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 8000a3a:	4319      	orrs	r1, r3

  slice->CMC = cmc;
 8000a3c:	6041      	str	r1, [r0, #4]

  tc  = slice->TC;
 8000a3e:	6943      	ldr	r3, [r0, #20]

  if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 8000a40:	2a01      	cmp	r2, #1
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 8000a42:	bf0c      	ite	eq
 8000a44:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 8000a48:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
  }

  slice->TC = tc;
 8000a4c:	6143      	str	r3, [r0, #20]
 8000a4e:	4770      	bx	lr

08000a50 <XMC_CCU8_SLICE_StopConfig>:

  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid End Mode", XMC_CCU8_SLICE_CHECK_END_MODE(end_mode));

  cmc = slice->CMC;
 8000a50:	6843      	ldr	r3, [r0, #4]
  /* First, Bind the event with the stop function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_ENDS_Msk);
 8000a52:	f023 030c 	bic.w	r3, r3, #12
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_ENDS_Pos;
 8000a56:	ea43 0181 	orr.w	r1, r3, r1, lsl #2

  slice->CMC = cmc;
 8000a5a:	6041      	str	r1, [r0, #4]

  /* Configure the stop mode */
  tc = slice->TC;
 8000a5c:	6943      	ldr	r3, [r0, #20]
  tc &= ~((uint32_t) CCU8_CC8_TC_ENDM_Msk);
 8000a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tc |= ((uint32_t) end_mode) << CCU8_CC8_TC_ENDM_Pos;
 8000a62:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

  slice->TC = tc;
 8000a66:	6142      	str	r2, [r0, #20]
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <XMC_CCU8_SLICE_LoadConfig>:
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8000a6c:	6843      	ldr	r3, [r0, #4]

  /* First, Bind the event with the load function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_LDS_Msk);
 8000a6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_LDS_Pos;
 8000a72:	ea43 3101 	orr.w	r1, r3, r1, lsl #12

  slice->CMC = cmc;
 8000a76:	6041      	str	r1, [r0, #4]
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <XMC_CCU8_SLICE_LoadSelector>:
  uint32_t tc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Channel number", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(ch_num));

  tc = slice->TC;
 8000a7c:	6943      	ldr	r3, [r0, #20]

  /* First, Bind the event with the load function */
  tc &= ~((uint32_t) CCU8_CC8_TC_TLS_Msk);
 8000a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tc |= (uint32_t)ch_num << CCU8_CC8_TC_TLS_Pos;
 8000a82:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7

  slice->TC = tc;
 8000a86:	6141      	str	r1, [r0, #20]
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <XMC_CCU8_SLICE_ModulationConfig>:
void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_EVENT_t event,
                                     const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
                                     const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
                                     const bool synch_with_pwm)
{
 8000a8c:	b430      	push	{r4, r5}
             XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel));
  XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Modulation Mode", 
             ((mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT) ||\
              (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));

  cmc = slice->CMC;
 8000a8e:	6844      	ldr	r4, [r0, #4]
void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_EVENT_t event,
                                     const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
                                     const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
                                     const bool synch_with_pwm)
{
 8000a90:	f89d 5008 	ldrb.w	r5, [sp, #8]
              (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));

  cmc = slice->CMC;

  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_MOS_Msk);
 8000a94:	f424 2440 	bic.w	r4, r4, #786432	; 0xc0000
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_MOS_Pos;
 8000a98:	ea44 4181 	orr.w	r1, r4, r1, lsl #18

  slice->CMC = cmc;
 8000a9c:	6041      	str	r1, [r0, #4]

  tc  = slice->TC;
 8000a9e:	6941      	ldr	r1, [r0, #20]

  /* Next, Modulation mode */
  if(mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)
 8000aa0:	2a01      	cmp	r2, #1
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMT_Msk;
 8000aa2:	bf0c      	ite	eq
 8000aa4:	f041 7180 	orreq.w	r1, r1, #16777216	; 0x1000000
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMT_Msk);
 8000aa8:	f021 7180 	bicne.w	r1, r1, #16777216	; 0x1000000
  }

  /* Synchronization of modulation effect with PWM cycle */
  if(synch_with_pwm == true)
 8000aac:	b945      	cbnz	r5, 8000ac0 <XMC_CCU8_SLICE_ModulationConfig+0x34>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMS_Msk);
 8000aae:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  }
  
  /* Configure on which channel external modulation to be applied */
  tc &= ~((uint32_t) CCU8_CC8_TC_EME_Msk);
 8000ab2:	f021 51c0 	bic.w	r1, r1, #402653184	; 0x18000000
  tc |= (uint32_t)channel << CCU8_CC8_TC_EME_Pos;
 8000ab6:	ea41 63c3 	orr.w	r3, r1, r3, lsl #27

  slice->TC = tc;
 8000aba:	6143      	str	r3, [r0, #20]
}
 8000abc:	bc30      	pop	{r4, r5}
 8000abe:	4770      	bx	lr
  }

  /* Synchronization of modulation effect with PWM cycle */
  if(synch_with_pwm == true)
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
 8000ac0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ac4:	e7f5      	b.n	8000ab2 <XMC_CCU8_SLICE_ModulationConfig+0x26>
 8000ac6:	bf00      	nop

08000ac8 <XMC_CCU8_SLICE_CountConfig>:
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8000ac8:	6843      	ldr	r3, [r0, #4]

  /* First, Bind the event with the count function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_CNTS_Msk);
 8000aca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CNTS_Pos;
 8000ace:	ea43 3181 	orr.w	r1, r3, r1, lsl #14

  slice->CMC = cmc;
 8000ad2:	6041      	str	r1, [r0, #4]
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <XMC_CCU8_SLICE_GateConfig>:
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8000ad8:	6843      	ldr	r3, [r0, #4]

  /* First, Bind the event with the gate function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_GATES_Msk);
 8000ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_GATES_Pos;
 8000ade:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  slice->CMC = cmc;
 8000ae2:	6041      	str	r1, [r0, #4]
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <XMC_CCU8_SLICE_DirectionConfig>:
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8000ae8:	6843      	ldr	r3, [r0, #4]

  /* First, Bind the event with the direction function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
 8000aea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
 8000aee:	ea43 2181 	orr.w	r1, r3, r1, lsl #10

  slice->CMC = cmc;
 8000af2:	6041      	str	r1, [r0, #4]
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <XMC_CCU8_SLICE_StatusBitOverrideConfig>:
{
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  cmc = slice->CMC;
 8000af8:	6843      	ldr	r3, [r0, #4]

  /* Map status bit trigger override to Event 1 &
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_OFS_Msk);
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_OFS_Pos;
 8000afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000

  slice->CMC = cmc;
 8000afe:	6043      	str	r3, [r0, #4]
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <XMC_CCU8_SLICE_TrapConfig>:

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 8000b04:	6843      	ldr	r3, [r0, #4]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 8000b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000

  slice->CMC = cmc;
 8000b0a:	6043      	str	r3, [r0, #4]

  tc = slice->TC;
 8000b0c:	6943      	ldr	r3, [r0, #20]

  /* Configure synchronization option */
  if(synch_with_pwm == true)
 8000b0e:	b14a      	cbz	r2, 8000b24 <XMC_CCU8_SLICE_TrapConfig+0x20>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 8000b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
  }

  /* Configure exit mode */
  if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 8000b14:	2901      	cmp	r1, #1
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 8000b16:	bf0c      	ite	eq
 8000b18:	f443 0380 	orreq.w	r3, r3, #4194304	; 0x400000
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 8000b1c:	f423 0380 	bicne.w	r3, r3, #4194304	; 0x400000
  }

  slice->TC = tc;
 8000b20:	6143      	str	r3, [r0, #20]
 8000b22:	4770      	bx	lr
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 8000b24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b28:	e7f4      	b.n	8000b14 <XMC_CCU8_SLICE_TrapConfig+0x10>
 8000b2a:	bf00      	nop

08000b2c <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 8000b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS1_EV2IS_Pos;

  slice->INS1 = ins;  
#else
  ins = slice->INS;
 8000b2e:	6803      	ldr	r3, [r0, #0]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
  ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
 8000b30:	784e      	ldrb	r6, [r1, #1]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
  ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;

  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
  ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
 8000b32:	f891 e002 	ldrb.w	lr, [r1, #2]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
  ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;

  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
  ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
 8000b36:	78cf      	ldrb	r7, [r1, #3]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
  ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;

  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
 8000b38:	780d      	ldrb	r5, [r1, #0]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
  ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;

  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
  ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
 8000b3a:	7851      	ldrb	r1, [r2, #1]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
  ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
  ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
 8000b3c:	f892 c002 	ldrb.w	ip, [r2, #2]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
 8000b40:	7814      	ldrb	r4, [r2, #0]
  slice->INS1 = ins;  
#else
  ins = slice->INS;

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
 8000b42:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
  ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
 8000b46:	ea43 4686 	orr.w	r6, r3, r6, lsl #18

  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
 8000b4a:	f426 1640 	bic.w	r6, r6, #3145728	; 0x300000
  ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
 8000b4e:	ea46 5101 	orr.w	r1, r6, r1, lsl #20

  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
 8000b52:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
 8000b56:	ea41 51ce 	orr.w	r1, r1, lr, lsl #23

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
 8000b5a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
  ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
  ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
 8000b5e:	78d3      	ldrb	r3, [r2, #3]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
  ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
  ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
 8000b60:	ea41 620c 	orr.w	r2, r1, ip, lsl #24

  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
 8000b64:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
  ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
 8000b68:	ea42 62c7 	orr.w	r2, r2, r7, lsl #27

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
 8000b6c:	f022 42c0 	bic.w	r2, r2, #1610612736	; 0x60000000
  ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
 8000b70:	ea42 7243 	orr.w	r2, r2, r3, lsl #29

  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
 8000b74:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
 8000b78:	ea42 1305 	orr.w	r3, r2, r5, lsl #4

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
 8000b7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
 8000b80:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  slice->INS = ins;
 8000b84:	6003      	str	r3, [r0, #0]
 8000b86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b88 <XMC_CCU8_SLICE_ConfigureEvent>:
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8000b88:	1e4b      	subs	r3, r1, #1

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 8000b8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8000b8e:	b2db      	uxtb	r3, r3

#else
  ins = slice->INS;

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8000b90:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8000b94:	fa5f f888 	uxtb.w	r8, r8
 8000b98:	f108 0910 	add.w	r9, r8, #16
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8000b9c:	6807      	ldr	r7, [r0, #0]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->edge) << pos;
 8000b9e:	f892 c001 	ldrb.w	ip, [r2, #1]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
  ins |= ((uint32_t) (config->level)) << pos;
 8000ba2:	7896      	ldrb	r6, [r2, #2]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->duration) << pos;
 8000ba4:	78d4      	ldrb	r4, [r2, #3]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->mapped_input) << pos;
 8000ba6:	f892 e000 	ldrb.w	lr, [r2]
#else
  ins = slice->INS;

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8000baa:	fa5f f989 	uxtb.w	r9, r9
 8000bae:	2503      	movs	r5, #3
 8000bb0:	fa05 f209 	lsl.w	r2, r5, r9
  ins |= ((uint32_t) config->edge) << pos;

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 8000bb4:	3115      	adds	r1, #21
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8000bb6:	b2c9      	uxtb	r1, r1
#else
  ins = slice->INS;

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8000bb8:	ea27 0202 	bic.w	r2, r7, r2
  ins |= ((uint32_t) config->edge) << pos;
 8000bbc:	fa0c fc09 	lsl.w	ip, ip, r9

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8000bc0:	2701      	movs	r7, #1
  ins = slice->INS;

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->edge) << pos;
 8000bc2:	ea42 0c0c 	orr.w	ip, r2, ip

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8000bc6:	408f      	lsls	r7, r1
  ins |= ((uint32_t) (config->level)) << pos;

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8000bc8:	f108 0819 	add.w	r8, r8, #25
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8000bcc:	fa5f f288 	uxtb.w	r2, r8
  ins |= ((uint32_t) config->edge) << pos;

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
  ins |= ((uint32_t) (config->level)) << pos;
 8000bd0:	408e      	lsls	r6, r1
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->edge) << pos;

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8000bd2:	ea2c 0707 	bic.w	r7, ip, r7
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->duration) << pos;

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 8000bd6:	0099      	lsls	r1, r3, #2
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
  ins |= ((uint32_t) (config->level)) << pos;

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8000bd8:	4095      	lsls	r5, r2
  ins |= ((uint32_t) config->edge) << pos;

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
  ins |= ((uint32_t) (config->level)) << pos;
 8000bda:	433e      	orrs	r6, r7
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->duration) << pos;

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8000bdc:	b2c9      	uxtb	r1, r1
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
  ins |= ((uint32_t) (config->level)) << pos;

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8000bde:	ea26 0505 	bic.w	r5, r6, r5
  ins |= ((uint32_t) config->duration) << pos;
 8000be2:	fa04 f202 	lsl.w	r2, r4, r2

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8000be6:	230f      	movs	r3, #15
  ins |= ((uint32_t) (config->level)) << pos;

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->duration) << pos;
 8000be8:	432a      	orrs	r2, r5

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8000bea:	408b      	lsls	r3, r1
  ins |= ((uint32_t) config->mapped_input) << pos;
 8000bec:	fa0e fe01 	lsl.w	lr, lr, r1
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
  ins |= ((uint32_t) config->duration) << pos;

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8000bf0:	ea22 0303 	bic.w	r3, r2, r3
  ins |= ((uint32_t) config->mapped_input) << pos;
 8000bf4:	ea43 030e 	orr.w	r3, r3, lr

  slice->INS = ins;
 8000bf8:	6003      	str	r3, [r0, #0]
 8000bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bfe:	bf00      	nop

08000c00 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8000c00:	6341      	str	r1, [r0, #52]	; 0x34
 8000c02:	4770      	bx	lr

08000c04 <XMC_CCU8_SLICE_SetTimerCompareMatch>:
                                         const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8000c04:	b109      	cbz	r1, 8000c0a <XMC_CCU8_SLICE_SetTimerCompareMatch+0x6>
  {
    slice->CR1S = (uint32_t) compare_val;
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 8000c06:	6442      	str	r2, [r0, #68]	; 0x44
 8000c08:	4770      	bx	lr
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
  {
    slice->CR1S = (uint32_t) compare_val;
 8000c0a:	63c2      	str	r2, [r0, #60]	; 0x3c
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 8000c10:	2909      	cmp	r1, #9
 8000c12:	b430      	push	{r4, r5}

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 8000c14:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
 8000c18:	d80d      	bhi.n	8000c36 <XMC_CCU8_SLICE_SetInterruptNode+0x26>
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <XMC_CCU8_SLICE_SetInterruptNode+0x30>)
 8000c1c:	4d09      	ldr	r5, [pc, #36]	; (8000c44 <XMC_CCU8_SLICE_SetInterruptNode+0x34>)
 8000c1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c22:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8000c26:	43db      	mvns	r3, r3
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
      pos  = CCU8_CC8_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask;
 8000c28:	4023      	ands	r3, r4
  srs |= (uint32_t)sr << pos;
 8000c2a:	408a      	lsls	r2, r1
 8000c2c:	431a      	orrs	r2, r3
  
  slice->SRS = srs;
 8000c2e:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
}
 8000c32:	bc30      	pop	{r4, r5}
 8000c34:	4770      	bx	lr

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 8000c36:	210c      	movs	r1, #12
 8000c38:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 8000c3c:	e7f4      	b.n	8000c28 <XMC_CCU8_SLICE_SetInterruptNode+0x18>
 8000c3e:	bf00      	nop
 8000c40:	0800e354 	.word	0x0800e354
 8000c44:	0800e37c 	.word	0x0800e37c

08000c48 <XMC_CCU8_SLICE_DeadTimeInit>:
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 8000c48:	684b      	ldr	r3, [r1, #4]
 8000c4a:	6503      	str	r3, [r0, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 8000c4c:	688b      	ldr	r3, [r1, #8]
 8000c4e:	6543      	str	r3, [r0, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 8000c50:	680b      	ldr	r3, [r1, #0]
 8000c52:	64c3      	str	r3, [r0, #76]	; 0x4c
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000c58:	b410      	push	{r4}
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8000c5e:	2303      	movs	r3, #3
 8000c60:	408b      	lsls	r3, r1
 8000c62:	ea24 0303 	bic.w	r3, r4, r3
 8000c66:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000c68:	6f43      	ldr	r3, [r0, #116]	; 0x74
}
 8000c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000c6e:	408a      	lsls	r2, r1
 8000c70:	4313      	orrs	r3, r2
 8000c72:	6743      	str	r3, [r0, #116]	; 0x74
}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	460d      	mov	r5, r1
 8000c7c:	4604      	mov	r4, r0
  XMC_USIC_CH_Enable(channel);
 8000c7e:	f000 f869 	bl	8000d54 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8000c82:	792b      	ldrb	r3, [r5, #4]
 8000c84:	b153      	cbz	r3, 8000c9c <XMC_SPI_CH_Init+0x24>
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <XMC_SPI_CH_Init+0x48>)
 8000c88:	6363      	str	r3, [r4, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8000c8a:	f44f 63a2 	mov.w	r3, #1296	; 0x510
 8000c8e:	63a3      	str	r3, [r4, #56]	; 0x38

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8000c90:	88eb      	ldrh	r3, [r5, #6]
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8000c92:	f04f 32ff 	mov.w	r2, #4294967295
 8000c96:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8000c98:	6423      	str	r3, [r4, #64]	; 0x40
 8000c9a:	bd38      	pop	{r3, r4, r5, pc}
  XMC_USIC_CH_Enable(channel);
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configure baud rate */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	6829      	ldr	r1, [r5, #0]
 8000ca2:	f000 f899 	bl	8000dd8 <XMC_USIC_CH_SetBaudrate>
 8000ca6:	792b      	ldrb	r3, [r5, #4]
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 8000ca8:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <XMC_SPI_CH_Init+0x48>)
 8000caa:	6362      	str	r2, [r4, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8000cac:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8000cb0:	63a2      	str	r2, [r4, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1ec      	bne.n	8000c90 <XMC_SPI_CH_Init+0x18>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8000cb6:	796b      	ldrb	r3, [r5, #5]
 8000cb8:	f043 030b 	orr.w	r3, r3, #11
 8000cbc:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000cbe:	e7e7      	b.n	8000c90 <XMC_SPI_CH_Init+0x18>
 8000cc0:	073f0102 	.word	0x073f0102

08000cc4 <XMC_SPI_CH_EnableSlaveSelect>:

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 8000cc4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000cc6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000cca:	63c3      	str	r3, [r0, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 8000ccc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000cce:	4319      	orrs	r1, r3
 8000cd0:	63c1      	str	r1, [r0, #60]	; 0x3c
 8000cd2:	4770      	bx	lr

08000cd4 <XMC_SPI_CH_DisableSlaveSelect>:
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR |= flag;
 8000cd4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	64c3      	str	r3, [r0, #76]	; 0x4c
void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel)
{
  XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_MSLS);
  
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 8000cdc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000cde:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000ce2:	63c3      	str	r3, [r0, #60]	; 0x3c
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <XMC_SPI_CH_Transmit>:

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8000ce8:	6c03      	ldr	r3, [r0, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
}

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{
 8000cea:	b430      	push	{r4, r5}

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8000cec:	0195      	lsls	r5, r2, #6

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8000cee:	f023 04c0 	bic.w	r4, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8000cf2:	b2eb      	uxtb	r3, r5

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	6403      	str	r3, [r0, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);


  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8000cf8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000cfc:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 8000d00:	d004      	beq.n	8000d0c <XMC_SPI_CH_Transmit+0x24>
  
    channel->TBUF[mode] = data;
  }
  else
  {
    channel->IN[mode] = data;
 8000d02:	3260      	adds	r2, #96	; 0x60
  }
}
 8000d04:	bc30      	pop	{r4, r5}
  
    channel->TBUF[mode] = data;
  }
  else
  {
    channel->IN[mode] = data;
 8000d06:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  }
}
 8000d0a:	4770      	bx	lr
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000d0c:	6b83      	ldr	r3, [r0, #56]	; 0x38


  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
  {
    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000d0e:	061b      	lsls	r3, r3, #24
 8000d10:	d4fc      	bmi.n	8000d0c <XMC_SPI_CH_Transmit+0x24>
 8000d12:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    {
    }
  
    XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
  
    channel->TBUF[mode] = data;
 8000d14:	3220      	adds	r2, #32
 8000d16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d1a:	64c3      	str	r3, [r0, #76]	; 0x4c
  }
  else
  {
    channel->IN[mode] = data;
  }
}
 8000d1c:	bc30      	pop	{r4, r5}
    {
    }
  
    XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
  
    channel->TBUF[mode] = data;
 8000d1e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  }
  else
  {
    channel->IN[mode] = data;
  }
}
 8000d22:	4770      	bx	lr

08000d24 <XMC_SPI_CH_GetReceivedData>:
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8000d24:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8000d28:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
  {
    retval = (uint16_t)channel->RBUF;
 8000d2c:	bf0c      	ite	eq
 8000d2e:	6d40      	ldreq	r0, [r0, #84]	; 0x54
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8000d30:	f8d0 011c 	ldrne.w	r0, [r0, #284]	; 0x11c
 8000d34:	b280      	uxth	r0, r0
  }

  return retval;
}
 8000d36:	4770      	bx	lr

08000d38 <XMC_SPI_CH_DisableEvent>:
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
}

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 8000d38:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000d3a:	f401 32fe 	and.w	r2, r1, #130048	; 0x1fc00
 8000d3e:	ea23 0302 	bic.w	r3, r3, r2
 8000d42:	6403      	str	r3, [r0, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 8000d44:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000d46:	0349      	lsls	r1, r1, #13
 8000d48:	b289      	uxth	r1, r1
 8000d4a:	ea23 0101 	bic.w	r1, r3, r1
 8000d4e:	63c1      	str	r1, [r0, #60]	; 0x3c
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <XMC_USIC_CH_Enable>:

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <XMC_USIC_CH_Enable+0x70>)
 8000d56:	4298      	cmp	r0, r3
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8000d58:	b510      	push	{r4, lr}
 8000d5a:	4604      	mov	r4, r0
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8000d5c:	d01b      	beq.n	8000d96 <XMC_USIC_CH_Enable+0x42>
 8000d5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d62:	4298      	cmp	r0, r3
 8000d64:	d017      	beq.n	8000d96 <XMC_USIC_CH_Enable+0x42>
  {
    XMC_USIC_Enable(XMC_USIC0);
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <XMC_USIC_CH_Enable+0x74>)
 8000d68:	4298      	cmp	r0, r3
 8000d6a:	d024      	beq.n	8000db6 <XMC_USIC_CH_Enable+0x62>
 8000d6c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d70:	4298      	cmp	r0, r3
 8000d72:	d020      	beq.n	8000db6 <XMC_USIC_CH_Enable+0x62>
  {
    XMC_USIC_Enable(XMC_USIC1);
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <XMC_USIC_CH_Enable+0x78>)
 8000d76:	4298      	cmp	r0, r3
 8000d78:	d016      	beq.n	8000da8 <XMC_USIC_CH_Enable+0x54>
 8000d7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d012      	beq.n	8000da8 <XMC_USIC_CH_Enable+0x54>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8000d82:	2303      	movs	r3, #3
 8000d84:	60e3      	str	r3, [r4, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8000d86:	68e3      	ldr	r3, [r4, #12]
 8000d88:	07db      	lsls	r3, r3, #31
 8000d8a:	d5fc      	bpl.n	8000d86 <XMC_USIC_CH_Enable+0x32>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8000d8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d8e:	f023 030f 	bic.w	r3, r3, #15
 8000d92:	6423      	str	r3, [r4, #64]	; 0x40
 8000d94:	bd10      	pop	{r4, pc}
void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
  if (usic == USIC0)
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8000d96:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d9a:	f7ff fb73 	bl	8000484 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8000d9e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000da2:	f7ff fb0f 	bl	80003c4 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000da6:	e7ec      	b.n	8000d82 <XMC_USIC_CH_Enable+0x2e>
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <XMC_USIC_CH_Enable+0x7c>)
 8000daa:	f7ff fb6b 	bl	8000484 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8000dae:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <XMC_USIC_CH_Enable+0x7c>)
 8000db0:	f7ff fb08 	bl	80003c4 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000db4:	e7e5      	b.n	8000d82 <XMC_USIC_CH_Enable+0x2e>
  }
#if defined(USIC1)  
  else if (usic == USIC1)
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8000db6:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <XMC_USIC_CH_Enable+0x80>)
 8000db8:	f7ff fb64 	bl	8000484 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <XMC_USIC_CH_Enable+0x80>)
 8000dbe:	f7ff fb01 	bl	80003c4 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000dc2:	e7de      	b.n	8000d82 <XMC_USIC_CH_Enable+0x2e>
 8000dc4:	40030000 	.word	0x40030000
 8000dc8:	48020000 	.word	0x48020000
 8000dcc:	48024000 	.word	0x48024000
 8000dd0:	10000100 	.word	0x10000100
 8000dd4:	10000080 	.word	0x10000080

08000dd8 <XMC_USIC_CH_SetBaudrate>:
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8000dd8:	2963      	cmp	r1, #99	; 0x63
 8000dda:	d900      	bls.n	8000dde <XMC_USIC_CH_SetBaudrate+0x6>
 8000ddc:	b90a      	cbnz	r2, 8000de2 <XMC_USIC_CH_SetBaudrate+0xa>
                    
    status = XMC_USIC_CH_STATUS_OK;
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8000dde:	2001      	movs	r0, #1
 8000de0:	4770      	bx	lr
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8000de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000de6:	4617      	mov	r7, r2
 8000de8:	460c      	mov	r4, r1
 8000dea:	4606      	mov	r6, r0
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8000dec:	f7ff faf6 	bl	80003dc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8000df0:	4d18      	ldr	r5, [pc, #96]	; (8000e54 <XMC_USIC_CH_SetBaudrate+0x7c>)
 8000df2:	fba5 3200 	umull	r3, r2, r5, r0
    rate = rate / 100U;
 8000df6:	fba5 3504 	umull	r3, r5, r5, r4
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8000dfa:	0952      	lsrs	r2, r2, #5
    rate = rate / 100U;
 8000dfc:	096d      	lsrs	r5, r5, #5

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;
 8000dfe:	f240 3eff 	movw	lr, #1023	; 0x3ff
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
 8000e02:	f04f 0c01 	mov.w	ip, #1
 8000e06:	fb07 f505 	mul.w	r5, r7, r5
 8000e0a:	ebc2 2182 	rsb	r1, r2, r2, lsl #10
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8000e0e:	4670      	mov	r0, lr
  if ((rate >= 100U) && (oversampling != 0U))
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
    rate = rate / 100U;

    clock_divider_min = 1U;
 8000e10:	46e0      	mov	r8, ip
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8000e12:	fbb1 f3f5 	udiv	r3, r1, r5
      pdiv_int = pdiv >> 10U;
 8000e16:	0a9c      	lsrs	r4, r3, #10
      pdiv_frac = pdiv & 0x3ffU;

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8000e18:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
      pdiv_int = pdiv >> 10U;
      pdiv_frac = pdiv & 0x3ffU;
 8000e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e20:	eba1 0102 	sub.w	r1, r1, r2

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8000e24:	d204      	bcs.n	8000e30 <XMC_USIC_CH_SetBaudrate+0x58>
 8000e26:	4573      	cmp	r3, lr
 8000e28:	d202      	bcs.n	8000e30 <XMC_USIC_CH_SetBaudrate+0x58>
 8000e2a:	469e      	mov	lr, r3
 8000e2c:	46a4      	mov	ip, r4
 8000e2e:	4680      	mov	r8, r0

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8000e30:	3801      	subs	r0, #1
 8000e32:	d1ee      	bne.n	8000e12 <XMC_USIC_CH_SetBaudrate+0x3a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8000e34:	f448 4300 	orr.w	r3, r8, #32768	; 0x8000
 8000e38:	6133      	str	r3, [r6, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000e3a:	6972      	ldr	r2, [r6, #20]
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <XMC_USIC_CH_SetBaudrate+0x80>)
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000e3e:	3f01      	subs	r7, #1
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000e40:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8000e42:	f10c 3cff 	add.w	ip, ip, #4294967295
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8000e46:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000e4a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000e4e:	6173      	str	r3, [r6, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8000e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e54:	51eb851f 	.word	0x51eb851f
 8000e58:	fc0080ef 	.word	0xfc0080ef

08000e5c <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8000e5c:	b430      	push	{r4, r5}
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8000e5e:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8000e62:	4c08      	ldr	r4, [pc, #32]	; (8000e84 <XMC_USIC_CH_TXFIFO_Configure+0x28>)
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8000e64:	f025 65e0 	bic.w	r5, r5, #117440512	; 0x7000000
 8000e68:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8000e6c:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 8000e70:	402c      	ands	r4, r5
 8000e72:	4321      	orrs	r1, r4
 8000e74:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8000e78:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8000e7c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8000e80:	bc30      	pop	{r4, r5}
 8000e82:	4770      	bx	lr
 8000e84:	f8ffc0c0 	.word	0xf8ffc0c0

08000e88 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8000e88:	b430      	push	{r4, r5}
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8000e8a:	f8d0 510c 	ldr.w	r5, [r0, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8000e8e:	4c09      	ldr	r4, [pc, #36]	; (8000eb4 <XMC_USIC_CH_RXFIFO_Configure+0x2c>)
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8000e90:	f025 65e0 	bic.w	r5, r5, #117440512	; 0x7000000
 8000e94:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8000e98:	f8d0 510c 	ldr.w	r5, [r0, #268]	; 0x10c
 8000e9c:	402c      	ands	r4, r5
 8000e9e:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8000ea2:	4321      	orrs	r1, r4
 8000ea4:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 8000ea8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000eac:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8000eb0:	bc30      	pop	{r4, r5}
 8000eb2:	4770      	bx	lr
 8000eb4:	efffc0c0 	.word	0xefffc0c0

08000eb8 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8000eb8:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8000ebc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ec0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8000ec4:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8000ec8:	0609      	lsls	r1, r1, #24
 8000eca:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8000ece:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8000edc:	b410      	push	{r4}
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000ede:	6983      	ldr	r3, [r0, #24]
 8000ee0:	2407      	movs	r4, #7
 8000ee2:	408c      	lsls	r4, r1
 8000ee4:	ea23 0304 	bic.w	r3, r3, r4
                  (service_request << (uint32_t)interrupt_node));
 8000ee8:	408a      	lsls	r2, r1

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000eea:	431a      	orrs	r2, r3
 8000eec:	6182      	str	r2, [r0, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8000eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8000ef4:	b410      	push	{r4}
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000ef6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8000efa:	2407      	movs	r4, #7
 8000efc:	408c      	lsls	r4, r1
 8000efe:	ea23 0304 	bic.w	r3, r3, r4
                   (service_request << (uint32_t)interrupt_node));
 8000f02:	408a      	lsls	r2, r1

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000f04:	431a      	orrs	r2, r3
 8000f06:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 8000f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8000f10:	b410      	push	{r4}
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000f12:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8000f16:	2407      	movs	r4, #7
 8000f18:	408c      	lsls	r4, r1
 8000f1a:	ea23 0304 	bic.w	r3, r3, r4
                   (service_request << (uint32_t)interrupt_node));
 8000f1e:	408a      	lsls	r2, r1

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8000f20:	431a      	orrs	r2, r3
 8000f22:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8000f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_sbrk>:
caddr_t _sbrk(int nbytes)
{
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <_sbrk+0x34>)

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8000f2e:	b508      	push	{r3, lr}
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8000f30:	6813      	ldr	r3, [r2, #0]
 8000f32:	b18b      	cbz	r3, 8000f58 <_sbrk+0x2c>
  }

  base = heap_ptr;

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8000f34:	3003      	adds	r0, #3
 8000f36:	f020 0003 	bic.w	r0, r0, #3
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8000f3a:	490a      	ldr	r1, [pc, #40]	; (8000f64 <_sbrk+0x38>)
 8000f3c:	4418      	add	r0, r3
 8000f3e:	4288      	cmp	r0, r1
 8000f40:	d202      	bcs.n	8000f48 <_sbrk+0x1c>
  {
    heap_ptr += nbytes;
 8000f42:	6010      	str	r0, [r2, #0]
  {
    /* Heap overflow */
    errno = ENOMEM;
    return ((caddr_t)-1);
  }
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	bd08      	pop	{r3, pc}
    return (base);
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8000f48:	f00c fd88 	bl	800da5c <__errno>
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	6003      	str	r3, [r0, #0]
    return ((caddr_t)-1);
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd08      	pop	{r3, pc}
{
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <_sbrk+0x3c>)
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	e7ea      	b.n	8000f34 <_sbrk+0x8>
 8000f5e:	bf00      	nop
 8000f60:	1ffe8a58 	.word	0x1ffe8a58
 8000f64:	2003ffc0 	.word	0x2003ffc0
 8000f68:	20000000 	.word	0x20000000

08000f6c <_init>:
  }
}

/* Init */
void _init(void)
{}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8000f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8000f72:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d12f      	bne.n	8000fda <TIMER_Init+0x6a>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8000f7a:	f890 6021 	ldrb.w	r6, [r0, #33]	; 0x21
 8000f7e:	b116      	cbz	r6, 8000f86 <TIMER_Init+0x16>
{
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8000f80:	461d      	mov	r5, r3
    }
#endif
  }

  return (status);
}
 8000f82:	4628      	mov	r0, r5
 8000f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f86:	4604      	mov	r4, r0
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8000f88:	6900      	ldr	r0, [r0, #16]
 8000f8a:	f000 ff55 	bl	8001e38 <GLOBAL_CCU4_Init>

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8000f8e:	6923      	ldr	r3, [r4, #16]
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8000f90:	f894 e018 	ldrb.w	lr, [r4, #24]
 8000f94:	689f      	ldr	r7, [r3, #8]
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8000f96:	69e1      	ldr	r1, [r4, #28]
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	fa03 f30e 	lsl.w	r3, r3, lr
 8000fa0:	4313      	orrs	r3, r2
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8000fa2:	4605      	mov	r5, r0

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8000fa4:	6960      	ldr	r0, [r4, #20]
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	f7ff fcbc 	bl	8000924 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8000fac:	6923      	ldr	r3, [r4, #16]
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8000fae:	6960      	ldr	r0, [r4, #20]
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8000fb0:	689a      	ldr	r2, [r3, #8]
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8000fb2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8000fb6:	8c67      	ldrh	r7, [r4, #34]	; 0x22
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8000fb8:	68e1      	ldr	r1, [r4, #12]
 8000fba:	6347      	str	r7, [r0, #52]	; 0x34
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8000fbc:	63c6      	str	r6, [r0, #60]	; 0x3c
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8000fbe:	6111      	str	r1, [r2, #16]
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8000fc0:	b973      	cbnz	r3, 8000fe0 <TIMER_Init+0x70>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8000fc2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8000fc6:	2102      	movs	r1, #2
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	6101      	str	r1, [r0, #16]
 8000fcc:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8000fd0:	2a00      	cmp	r2, #0
 8000fd2:	d0d6      	beq.n	8000f82 <TIMER_Init+0x12>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8000fd4:	60c3      	str	r3, [r0, #12]
    }
#endif
  }

  return (status);
}
 8000fd6:	4628      	mov	r0, r5
 8000fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8000fda:	2500      	movs	r5, #0
    }
#endif
  }

  return (status);
}
 8000fdc:	4628      	mov	r0, r5
 8000fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000fe6:	f7ff fcb7 	bl	8000958 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8000fea:	6960      	ldr	r0, [r4, #20]
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8000fec:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
 8000ff8:	e7e3      	b.n	8000fc2 <TIMER_Init+0x52>
 8000ffa:	bf00      	nop

08000ffc <SPI_MASTER_lReceiveIRQ>:
#endif

#if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)

SPI_MASTER_STATUS_t SPI_MASTER_lReceiveIRQ(const SPI_MASTER_t *const handle, uint32_t count)
{
 8000ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffe:	4604      	mov	r4, r0
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD;; /* This is to support the word length 8 and 16.
                                                            Specify the number of bytes for the configured word length*/

  runtime_handle = handle->runtime;
  runtime_handle->rx_data_index = 0U;
 8001000:	2000      	movs	r0, #0
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD;; /* This is to support the word length 8 and 16.
                                                            Specify the number of bytes for the configured word length*/

  runtime_handle = handle->runtime;
 8001002:	68a5      	ldr	r5, [r4, #8]

  /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received */
  runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);

  /* Check if FIFO is enabled */
  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8001004:	6862      	ldr	r2, [r4, #4]
                                                            Specify the number of bytes for the configured word length*/

  runtime_handle = handle->runtime;
  runtime_handle->rx_data_index = 0U;

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001006:	682b      	ldr	r3, [r5, #0]

  /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received */
  runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);

  /* Check if FIFO is enabled */
  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8001008:	f892 207d 	ldrb.w	r2, [r2, #125]	; 0x7d
  {
    /* Clear the receive FIFO */
    XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 800100c:	6826      	ldr	r6, [r4, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD;; /* This is to support the word length 8 and 16.
                                                            Specify the number of bytes for the configured word length*/

  runtime_handle = handle->runtime;
  runtime_handle->rx_data_index = 0U;
 800100e:	6128      	str	r0, [r5, #16]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001010:	2b08      	cmp	r3, #8
 8001012:	bf94      	ite	ls
 8001014:	2300      	movls	r3, #0
 8001016:	2301      	movhi	r3, #1
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
  }

  /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received */
  runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8001018:	4099      	lsls	r1, r3
 800101a:	60e9      	str	r1, [r5, #12]

  /* Check if FIFO is enabled */
  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 800101c:	b302      	cbz	r2, 8001060 <SPI_MASTER_lReceiveIRQ+0x64>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 800101e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001022:	f8c6 3118 	str.w	r3, [r6, #280]	; 0x118
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8001026:	4630      	mov	r0, r6
 8001028:	f7ff fe7c 	bl	8000d24 <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 800102c:	4630      	mov	r0, r6
 800102e:	f7ff fe79 	bl	8000d24 <XMC_SPI_CH_GetReceivedData>
static void SPI_MASTER_lReconfigureRxFIFO(const SPI_MASTER_t * const handle, uint32_t data_size)
{
  uint32_t fifo_size;
  uint32_t ret_limit_val;

  if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
 8001032:	6863      	ldr	r3, [r4, #4]
    /* Clear the receive FIFO */
    XMC_USIC_CH_RXFIFO_Flush(handle->channel);
    SPI_MASTER_lStdRBUFFlush(handle->channel);

    /* Configure the FIFO trigger limit based on the required data size */
    SPI_MASTER_lReconfigureRxFIFO(handle, runtime_handle->rx_data_count);
 8001034:	68e8      	ldr	r0, [r5, #12]
static void SPI_MASTER_lReconfigureRxFIFO(const SPI_MASTER_t * const handle, uint32_t data_size)
{
  uint32_t fifo_size;
  uint32_t ret_limit_val;

  if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
 8001036:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 800103a:	b329      	cbz	r1, 8001088 <SPI_MASTER_lReceiveIRQ+0x8c>
 800103c:	b320      	cbz	r0, 8001088 <SPI_MASTER_lReceiveIRQ+0x8c>
  {
    fifo_size = (uint32_t)0x01 << handle->config->rx_fifo_size;

    if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 800103e:	68a3      	ldr	r3, [r4, #8]
 8001040:	681b      	ldr	r3, [r3, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val;

  if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
  {
    fifo_size = (uint32_t)0x01 << handle->config->rx_fifo_size;
 8001042:	2201      	movs	r2, #1
 8001044:	408a      	lsls	r2, r1

    if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001046:	2b08      	cmp	r3, #8
	{
	  /* Data size is divided by 2, to change the trigger limit according the word length */
	  data_size = (uint32_t)data_size >> 1U;
 8001048:	bf88      	it	hi
 800104a:	0840      	lsrhi	r0, r0, #1
	}

	/*If data size is more than FIFO size, configure the limit to the FIFO size*/
	if (data_size < (fifo_size >> 1))
 800104c:	0852      	lsrs	r2, r2, #1
 800104e:	4282      	cmp	r2, r0
	{
	  ret_limit_val = data_size - 1U;
 8001050:	bf88      	it	hi
 8001052:	f100 32ff 	addhi.w	r2, r0, #4294967295
	{
	  ret_limit_val = fifo_size >> 1;
	}

	/*Set the limit value*/
	XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, ret_limit_val);
 8001056:	6820      	ldr	r0, [r4, #0]
 8001058:	f7ff ff2e 	bl	8000eb8 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
 800105c:	6861      	ldr	r1, [r4, #4]
 800105e:	e014      	b.n	800108a <SPI_MASTER_lReceiveIRQ+0x8e>
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8001060:	4630      	mov	r0, r6
 8001062:	f7ff fe5f 	bl	8000d24 <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8001066:	4630      	mov	r0, r6
 8001068:	f7ff fe5c 	bl	8000d24 <XMC_SPI_CH_GetReceivedData>
  {
    /* Flush the RBUF0 and RBUF1 */
    SPI_MASTER_lStdRBUFFlush(handle->channel);

    /* Enable the standard receive events */
    XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	6861      	ldr	r1, [r4, #4]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
 8001070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  }
  /* Call the transmit, to receive the data synchronously */
  status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
 8001072:	69ae      	ldr	r6, [r5, #24]
 8001074:	6868      	ldr	r0, [r5, #4]
 8001076:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800107a:	641a      	str	r2, [r3, #64]	; 0x40
 800107c:	461a      	mov	r2, r3
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;

#if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 800107e:	f891 3084 	ldrb.w	r3, [r1, #132]	; 0x84
 8001082:	b183      	cbz	r3, 80010a6 <SPI_MASTER_lReceiveIRQ+0xaa>

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 8001084:	2001      	movs	r0, #1
  }
  /* Call the transmit, to receive the data synchronously */
  status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);

  return status;
}
 8001086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static void SPI_MASTER_lReconfigureRxFIFO(const SPI_MASTER_t * const handle, uint32_t data_size)
{
  uint32_t fifo_size;
  uint32_t ret_limit_val;

  if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
 8001088:	4619      	mov	r1, r3

    /* Configure the FIFO trigger limit based on the required data size */
    SPI_MASTER_lReconfigureRxFIFO(handle, runtime_handle->rx_data_count);

    /* Enable the receive FIFO events */
    XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 800108a:	6823      	ldr	r3, [r4, #0]

    /* Enable the standard receive events */
    XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
  }
  /* Call the transmit, to receive the data synchronously */
  status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
 800108c:	69ae      	ldr	r6, [r5, #24]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR |= event;
 800108e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001092:	6868      	ldr	r0, [r5, #4]
 8001094:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8001098:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 800109c:	461a      	mov	r2, r3
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;

#if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 800109e:	f891 3084 	ldrb.w	r3, [r1, #132]	; 0x84
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1ee      	bne.n	8001084 <SPI_MASTER_lReceiveIRQ+0x88>
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_StartTransmitIRQ:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
  runtime_handle = handle->runtime;
 80010a6:	68a4      	ldr	r4, [r4, #8]

  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
  {
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
 80010a8:	b106      	cbz	r6, 80010ac <SPI_MASTER_lReceiveIRQ+0xb0>
 80010aa:	b908      	cbnz	r0, 80010b0 <SPI_MASTER_lReceiveIRQ+0xb4>
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 80010ac:	2003      	movs	r0, #3
 80010ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
    {
      status = SPI_MASTER_STATUS_BUSY;
      /*Check data pointer is valid or not*/
      if (false == runtime_handle->tx_busy)
 80010b0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80010b4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80010b8:	b10b      	cbz	r3, 80010be <SPI_MASTER_lReceiveIRQ+0xc2>
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
  {
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
    {
      status = SPI_MASTER_STATUS_BUSY;
 80010ba:	2002      	movs	r0, #2
 80010bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      /*Check data pointer is valid or not*/
      if (false == runtime_handle->tx_busy)
      {
        if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 80010be:	6823      	ldr	r3, [r4, #0]
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
        runtime_handle->tx_busy = true;

        /* Enable the transmit buffer event */
        if ((uint32_t)handle->config->tx_fifo_size > 0U)
 80010c0:	f891 707c 	ldrb.w	r7, [r1, #124]	; 0x7c

        /* Obtain the address of data, size of data */
        runtime_handle->tx_data = dataptr;
        runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
 80010c4:	60a5      	str	r5, [r4, #8]
    {
      status = SPI_MASTER_STATUS_BUSY;
      /*Check data pointer is valid or not*/
      if (false == runtime_handle->tx_busy)
      {
        if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	bf94      	ite	ls
 80010ca:	2300      	movls	r3, #0
 80010cc:	2301      	movhi	r3, #1
          bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
        }

        /* Obtain the address of data, size of data */
        runtime_handle->tx_data = dataptr;
        runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 80010ce:	4098      	lsls	r0, r3
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
        runtime_handle->tx_busy = true;
 80010d0:	2301      	movs	r3, #1
        {
          bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
        }

        /* Obtain the address of data, size of data */
        runtime_handle->tx_data = dataptr;
 80010d2:	61a6      	str	r6, [r4, #24]
        runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 80010d4:	6060      	str	r0, [r4, #4]
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
        runtime_handle->tx_busy = true;
 80010d6:	f884 3020 	strb.w	r3, [r4, #32]

        /* Enable the transmit buffer event */
        if ((uint32_t)handle->config->tx_fifo_size > 0U)
 80010da:	b1d7      	cbz	r7, 8001112 <SPI_MASTER_lReceiveIRQ+0x116>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 80010dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e0:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR |= event;
 80010e4:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80010e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010ec:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
        }
        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 80010f0:	7f20      	ldrb	r0, [r4, #28]
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 80010f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 80010f4:	f891 4089 	ldrb.w	r4, [r1, #137]	; 0x89
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 80010f8:	0181      	lsls	r1, r0, #6
 80010fa:	b2c9      	uxtb	r1, r1
 80010fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8001100:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001104:	430b      	orrs	r3, r1
 8001106:	fa00 f104 	lsl.w	r1, r0, r4
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
        status = SPI_MASTER_STATUS_SUCCESS;
 800110c:	2000      	movs	r0, #0
 800110e:	6691      	str	r1, [r2, #104]	; 0x68
 8001110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR |= event;
 8001112:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001114:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	e7e9      	b.n	80010f0 <SPI_MASTER_lReceiveIRQ+0xf4>

0800111c <SPI_MASTER_Init>:
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 800111c:	6843      	ldr	r3, [r0, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4718      	bx	r3
 8001122:	bf00      	nop

08001124 <SPI_MASTER_Receive>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Receive(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8001124:	b470      	push	{r4, r5, r6}
  SPI_MASTER_STATUS_t status;

  status = SPI_MASTER_STATUS_FAILURE;

#if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)
  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 8001126:	6844      	ldr	r4, [r0, #4]
 8001128:	f894 4085 	ldrb.w	r4, [r4, #133]	; 0x85
 800112c:	b114      	cbz	r4, 8001134 <SPI_MASTER_Receive+0x10>

SPI_MASTER_STATUS_t SPI_MASTER_Receive(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
  SPI_MASTER_STATUS_t status;

  status = SPI_MASTER_STATUS_FAILURE;
 800112e:	2001      	movs	r0, #1
    status = SPI_MASTER_lStartReceivePolling(handle, dataptr, count);
  }
#endif

  return status;
}
 8001130:	bc70      	pop	{r4, r5, r6}
 8001132:	4770      	bx	lr
  static uint8_t dummy_data[2] = {0xFFU, 0xFFU};

  XMC_ASSERT("SPI_MASTER_StartReceiveIRQ:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
  runtime_handle = handle->runtime;
 8001134:	6883      	ldr	r3, [r0, #8]

  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
  {
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
 8001136:	b101      	cbz	r1, 800113a <SPI_MASTER_Receive+0x16>
 8001138:	b912      	cbnz	r2, 8001140 <SPI_MASTER_Receive+0x1c>

      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 800113a:	2003      	movs	r0, #3
    status = SPI_MASTER_lStartReceivePolling(handle, dataptr, count);
  }
#endif

  return status;
}
 800113c:	bc70      	pop	{r4, r5, r6}
 800113e:	4770      	bx	lr
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8001140:	7fdc      	ldrb	r4, [r3, #31]
 8001142:	b10c      	cbz	r4, 8001148 <SPI_MASTER_Receive+0x24>
  status = SPI_MASTER_STATUS_MODE_MISMATCH;
  runtime_handle = handle->runtime;

  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
  {
    status = SPI_MASTER_STATUS_BUSY;
 8001144:	2002      	movs	r0, #2
 8001146:	e7f3      	b.n	8001130 <SPI_MASTER_Receive+0xc>
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8001148:	f893 4020 	ldrb.w	r4, [r3, #32]
 800114c:	f004 05ff 	and.w	r5, r4, #255	; 0xff
 8001150:	2c00      	cmp	r4, #0
 8001152:	d1f7      	bne.n	8001144 <SPI_MASTER_Receive+0x20>
      {
        runtime_handle->rx_busy = true;
 8001154:	2401      	movs	r4, #1
        runtime_handle->rx_data = dataptr;
        runtime_handle->tx_data = &dummy_data[0];
 8001156:	4e06      	ldr	r6, [pc, #24]	; (8001170 <SPI_MASTER_Receive+0x4c>)
    if ((dataptr != NULL) && (count > 0U))
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
      {
        runtime_handle->rx_busy = true;
 8001158:	77dc      	strb	r4, [r3, #31]
        runtime_handle->rx_data = dataptr;
 800115a:	6159      	str	r1, [r3, #20]
        runtime_handle->tx_data = &dummy_data[0];
        runtime_handle->tx_data_count = count;
        runtime_handle->tx_data_dummy = true;
 800115c:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
      {
        runtime_handle->rx_busy = true;
        runtime_handle->rx_data = dataptr;
        runtime_handle->tx_data = &dummy_data[0];
 8001160:	619e      	str	r6, [r3, #24]
        runtime_handle->tx_data_count = count;
        runtime_handle->tx_data_dummy = true;
        runtime_handle->rx_data_dummy = false;
 8001162:	f883 5022 	strb.w	r5, [r3, #34]	; 0x22
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
      {
        runtime_handle->rx_busy = true;
        runtime_handle->rx_data = dataptr;
        runtime_handle->tx_data = &dummy_data[0];
        runtime_handle->tx_data_count = count;
 8001166:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = true;
        runtime_handle->rx_data_dummy = false;

        status = SPI_MASTER_lReceiveIRQ(handle, count);
 8001168:	4611      	mov	r1, r2
    status = SPI_MASTER_lStartReceivePolling(handle, dataptr, count);
  }
#endif

  return status;
}
 800116a:	bc70      	pop	{r4, r5, r6}
        runtime_handle->tx_data = &dummy_data[0];
        runtime_handle->tx_data_count = count;
        runtime_handle->tx_data_dummy = true;
        runtime_handle->rx_data_dummy = false;

        status = SPI_MASTER_lReceiveIRQ(handle, count);
 800116c:	f7ff bf46 	b.w	8000ffc <SPI_MASTER_lReceiveIRQ>
 8001170:	1ffe8840 	.word	0x1ffe8840

08001174 <SPI_MASTER_lTransmitHandler>:
 */
void SPI_MASTER_lTransmitHandler(const SPI_MASTER_t * const handle)
{
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.*/
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 8001174:	6883      	ldr	r3, [r0, #8]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001176:	6819      	ldr	r1, [r3, #0]
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
  }

  if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8001178:	689a      	ldr	r2, [r3, #8]
 * Transmit interrupt handler for the APP.
 * This is a common interrupt handling function called for different instances of the APP.
 *
 */
void SPI_MASTER_lTransmitHandler(const SPI_MASTER_t * const handle)
{
 800117a:	b470      	push	{r4, r5, r6}
  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
  }

  if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 800117c:	685c      	ldr	r4, [r3, #4]
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.*/
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 800117e:	2909      	cmp	r1, #9
 8001180:	bf34      	ite	cc
 8001182:	2501      	movcc	r5, #1
 8001184:	2502      	movcs	r5, #2
  }

  if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8001186:	42a2      	cmp	r2, r4
 8001188:	d22b      	bcs.n	80011e2 <SPI_MASTER_lTransmitHandler+0x6e>
  {
    data = 0U;
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
 800118a:	6842      	ldr	r2, [r0, #4]
 800118c:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 8001190:	2a00      	cmp	r2, #0
 8001192:	d040      	beq.n	8001216 <SPI_MASTER_lTransmitHandler+0xa2>
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001194:	6801      	ldr	r1, [r0, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8001196:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
 800119a:	04d2      	lsls	r2, r2, #19
 800119c:	d44c      	bmi.n	8001238 <SPI_MASTER_lTransmitHandler+0xc4>
      {
        if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	4294      	cmp	r4, r2
 80011a2:	d949      	bls.n	8001238 <SPI_MASTER_lTransmitHandler+0xc4>
 80011a4:	2d02      	cmp	r5, #2
 80011a6:	d058      	beq.n	800125a <SPI_MASTER_lTransmitHandler+0xe6>
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
                                                       const uint16_t data,
                                                       const uint32_t frame_length)
{
  channel->IN[frame_length] = data;
 80011a8:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80011ac:	e010      	b.n	80011d0 <SPI_MASTER_lTransmitHandler+0x5c>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 80011ae:	6898      	ldr	r0, [r3, #8]
            }
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 80011b0:	7f1a      	ldrb	r2, [r3, #28]
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 80011b2:	699e      	ldr	r6, [r3, #24]
 80011b4:	3260      	adds	r2, #96	; 0x60
 80011b6:	5c30      	ldrb	r0, [r6, r0]
 80011b8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
            }
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
          }
          (runtime_handle->tx_data_index)+= bytes_per_word;
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	3201      	adds	r2, #1
 80011c0:	609a      	str	r2, [r3, #8]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80011c2:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    data = 0U;
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 80011c6:	04d6      	lsls	r6, r2, #19
 80011c8:	d436      	bmi.n	8001238 <SPI_MASTER_lTransmitHandler+0xc4>
      {
        if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	4294      	cmp	r4, r2
 80011ce:	d933      	bls.n	8001238 <SPI_MASTER_lTransmitHandler+0xc4>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          if (runtime_handle->tx_data_dummy == true)
 80011d0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	d0ea      	beq.n	80011ae <SPI_MASTER_lTransmitHandler+0x3a>
          {
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 80011d8:	7f1a      	ldrb	r2, [r3, #28]
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
                                                       const uint16_t data,
                                                       const uint32_t frame_length)
{
  channel->IN[frame_length] = data;
 80011da:	3260      	adds	r2, #96	; 0x60
 80011dc:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 80011e0:	e7ec      	b.n	80011bc <SPI_MASTER_lTransmitHandler+0x48>
      (runtime_handle->tx_data_index)+= bytes_per_word;
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 80011e2:	6801      	ldr	r1, [r0, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 80011e4:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
 80011e8:	0514      	lsls	r4, r2, #20
 80011ea:	d525      	bpl.n	8001238 <SPI_MASTER_lTransmitHandler+0xc4>
    {
      /* Clear the flag */
      if ((uint32_t)handle->config->tx_fifo_size > 0U)
 80011ec:	6840      	ldr	r0, [r0, #4]
 80011ee:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 80011f2:	bb1a      	cbnz	r2, 800123c <SPI_MASTER_lTransmitHandler+0xc8>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->CCR &= (uint32_t)~event;
 80011f4:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80011f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011fa:	640a      	str	r2, [r1, #64]	; 0x40
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80011fc:	6b8a      	ldr	r2, [r1, #56]	; 0x38
        /* Clear the standard transmit event */
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
      }

      /* Wait for the transmit buffer to be free to ensure that all data is transmitted */
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80011fe:	0612      	lsls	r2, r2, #24
 8001200:	d4fc      	bmi.n	80011fc <SPI_MASTER_lTransmitHandler+0x88>

      /* All data is transmitted */
      runtime_handle->tx_busy = false;
      runtime_handle->tx_data = NULL;

      if ((handle->config->tx_cbhandler != NULL) && (runtime_handle->rx_busy == false))
 8001202:	6f01      	ldr	r1, [r0, #112]	; 0x70
      {

      }

      /* All data is transmitted */
      runtime_handle->tx_busy = false;
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2020 	strb.w	r2, [r3, #32]
      runtime_handle->tx_data = NULL;
 800120a:	619a      	str	r2, [r3, #24]

      if ((handle->config->tx_cbhandler != NULL) && (runtime_handle->rx_busy == false))
 800120c:	b1a1      	cbz	r1, 8001238 <SPI_MASTER_lTransmitHandler+0xc4>
 800120e:	7fdb      	ldrb	r3, [r3, #31]
 8001210:	b993      	cbnz	r3, 8001238 <SPI_MASTER_lTransmitHandler+0xc4>
        /* Execute the callback function provided in the SPI_MASTER APP UI */
        handle->config->tx_cbhandler();
      }
    }
  }
}
 8001212:	bc70      	pop	{r4, r5, r6}
      runtime_handle->tx_data = NULL;

      if ((handle->config->tx_cbhandler != NULL) && (runtime_handle->rx_busy == false))
      {
        /* Execute the callback function provided in the SPI_MASTER APP UI */
        handle->config->tx_cbhandler();
 8001214:	4708      	bx	r1
        }
      }
    }
    else/*When Transmit FIFO is disabled*/
    {
      if (runtime_handle->tx_data_dummy == true)
 8001216:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800121a:	b9b2      	cbnz	r2, 800124a <SPI_MASTER_lTransmitHandler+0xd6>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	6999      	ldr	r1, [r3, #24]
      {
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001220:	2d02      	cmp	r5, #2
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8001222:	bf0c      	ite	eq
 8001224:	5a8c      	ldrheq	r4, [r1, r2]
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8001226:	5c8c      	ldrbne	r4, [r1, r2]
        }
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8001228:	7f1a      	ldrb	r2, [r3, #28]
 800122a:	6801      	ldr	r1, [r0, #0]
 */
__STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
                                             const uint16_t data,
                                             const uint32_t transmit_control_information)
{
  channel->TBUF[transmit_control_information] = data;
 800122c:	3220      	adds	r2, #32
 800122e:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
      }
      (runtime_handle->tx_data_index)+= bytes_per_word;
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	4415      	add	r5, r2
 8001236:	609d      	str	r5, [r3, #8]
        /* Execute the callback function provided in the SPI_MASTER APP UI */
        handle->config->tx_cbhandler();
      }
    }
  }
}
 8001238:	bc70      	pop	{r4, r5, r6}
 800123a:	4770      	bx	lr
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->TBCTR &= (uint32_t)~event;
 800123c:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8001240:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001244:	f8c1 2108 	str.w	r2, [r1, #264]	; 0x108
 8001248:	e7d8      	b.n	80011fc <SPI_MASTER_lTransmitHandler+0x88>
    }
    else/*When Transmit FIFO is disabled*/
    {
      if (runtime_handle->tx_data_dummy == true)
      {
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 800124a:	7f1a      	ldrb	r2, [r3, #28]
 800124c:	6801      	ldr	r1, [r0, #0]
 */
__STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
                                             const uint16_t data,
                                             const uint32_t transmit_control_information)
{
  channel->TBUF[transmit_control_information] = data;
 800124e:	3220      	adds	r2, #32
 8001250:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001254:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8001258:	e7eb      	b.n	8001232 <SPI_MASTER_lTransmitHandler+0xbe>
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
                                                       const uint16_t data,
                                                       const uint32_t frame_length)
{
  channel->IN[frame_length] = data;
 800125a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800125e:	e010      	b.n	8001282 <SPI_MASTER_lTransmitHandler+0x10e>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8001260:	689d      	ldr	r5, [r3, #8]
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
            }
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8001262:	7f1a      	ldrb	r2, [r3, #28]
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8001264:	699e      	ldr	r6, [r3, #24]
 8001266:	3260      	adds	r2, #96	; 0x60
 8001268:	5b75      	ldrh	r5, [r6, r5]
 800126a:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
            }
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
          }
          (runtime_handle->tx_data_index)+= bytes_per_word;
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	3202      	adds	r2, #2
 8001272:	609a      	str	r2, [r3, #8]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8001274:	f8d1 2114 	ldr.w	r2, [r1, #276]	; 0x114
    data = 0U;
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001278:	04d5      	lsls	r5, r2, #19
 800127a:	d4dd      	bmi.n	8001238 <SPI_MASTER_lTransmitHandler+0xc4>
      {
        if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	4294      	cmp	r4, r2
 8001280:	d9da      	bls.n	8001238 <SPI_MASTER_lTransmitHandler+0xc4>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          if (runtime_handle->tx_data_dummy == true)
 8001282:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001286:	2a00      	cmp	r2, #0
 8001288:	d0ea      	beq.n	8001260 <SPI_MASTER_lTransmitHandler+0xec>
          {
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 800128a:	7f1a      	ldrb	r2, [r3, #28]
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
                                                       const uint16_t data,
                                                       const uint32_t frame_length)
{
  channel->IN[frame_length] = data;
 800128c:	3260      	adds	r2, #96	; 0x60
 800128e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 8001292:	e7ec      	b.n	800126e <SPI_MASTER_lTransmitHandler+0xfa>

08001294 <SPI_MASTER_lReceiveHandler>:
/*
 * Receive interrupt handler for the APP.
 * This is a common interrupt handling function for different instances of the SPI_MASTER APP.
 */
void SPI_MASTER_lReceiveHandler(const SPI_MASTER_t * const handle)
{
 8001294:	b570      	push	{r4, r5, r6, lr}
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16. */
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 8001296:	6884      	ldr	r4, [r0, #8]

  data = 0U;

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	2b08      	cmp	r3, #8
/*
 * Receive interrupt handler for the APP.
 * This is a common interrupt handling function for different instances of the SPI_MASTER APP.
 */
void SPI_MASTER_lReceiveHandler(const SPI_MASTER_t * const handle)
{
 800129c:	4605      	mov	r5, r0
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16. */
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;

  data = 0U;

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 800129e:	d91c      	bls.n	80012da <SPI_MASTER_lReceiveHandler+0x46>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
  }

  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 80012a0:	6843      	ldr	r3, [r0, #4]
 80012a2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d159      	bne.n	800135e <SPI_MASTER_lReceiveHandler+0xca>
    }
  }
  else
  {
    /* When RxFIFO is disabled */
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0) != 0U )
 80012aa:	6828      	ldr	r0, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 80012ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80012ae:	0499      	lsls	r1, r3, #18

  data = 0U;

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 80012b0:	f04f 0602 	mov.w	r6, #2
    }
  }
  else
  {
    /* When RxFIFO is disabled */
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0) != 0U )
 80012b4:	d51c      	bpl.n	80012f0 <SPI_MASTER_lReceiveHandler+0x5c>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 80012b6:	6922      	ldr	r2, [r4, #16]
 80012b8:	68e3      	ldr	r3, [r4, #12]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d219      	bcs.n	80012f2 <SPI_MASTER_lReceiveHandler+0x5e>
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
 80012be:	f7ff fd31 	bl	8000d24 <XMC_SPI_CH_GetReceivedData>

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 80012c2:	6923      	ldr	r3, [r4, #16]
 80012c4:	6962      	ldr	r2, [r4, #20]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80012c6:	2e02      	cmp	r6, #2
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 80012c8:	54d0      	strb	r0, [r2, r3]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80012ca:	f000 80b3 	beq.w	8001434 <SPI_MASTER_lReceiveHandler+0x1a0>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
 80012ce:	6922      	ldr	r2, [r4, #16]
 80012d0:	6828      	ldr	r0, [r5, #0]
 80012d2:	68e3      	ldr	r3, [r4, #12]
 80012d4:	4432      	add	r2, r6
 80012d6:	6122      	str	r2, [r4, #16]
 80012d8:	e00b      	b.n	80012f2 <SPI_MASTER_lReceiveHandler+0x5e>
  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
  }

  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 80012da:	6843      	ldr	r3, [r0, #4]
 80012dc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d159      	bne.n	8001398 <SPI_MASTER_lReceiveHandler+0x104>
    }
  }
  else
  {
    /* When RxFIFO is disabled */
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0) != 0U )
 80012e4:	6828      	ldr	r0, [r5, #0]
 80012e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80012e8:	0499      	lsls	r1, r3, #18
 * This is a common interrupt handling function for different instances of the SPI_MASTER APP.
 */
void SPI_MASTER_lReceiveHandler(const SPI_MASTER_t * const handle)
{
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16. */
 80012ea:	f04f 0601 	mov.w	r6, #1
    }
  }
  else
  {
    /* When RxFIFO is disabled */
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0) != 0U )
 80012ee:	d4e2      	bmi.n	80012b6 <SPI_MASTER_lReceiveHandler+0x22>
 80012f0:	68e3      	ldr	r3, [r4, #12]
 80012f2:	6d02      	ldr	r2, [r0, #80]	; 0x50
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
      }
    }
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) != 0U)
 80012f4:	0452      	lsls	r2, r2, #17
 80012f6:	d502      	bpl.n	80012fe <SPI_MASTER_lReceiveHandler+0x6a>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 80012f8:	6922      	ldr	r2, [r4, #16]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d323      	bcc.n	8001346 <SPI_MASTER_lReceiveHandler+0xb2>

        (runtime_handle->rx_data_index)+= bytes_per_word;
      }
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 80012fe:	6922      	ldr	r2, [r4, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d000      	beq.n	8001306 <SPI_MASTER_lReceiveHandler+0x72>
 8001304:	bd70      	pop	{r4, r5, r6, pc}
    {
      /* Disable both standard receive and alternative receive FIFO events */
      if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8001306:	686b      	ldr	r3, [r5, #4]
 8001308:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800130c:	b1a2      	cbz	r2, 8001338 <SPI_MASTER_lReceiveHandler+0xa4>
      {
        /* Enable the receive FIFO events */
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 800130e:	6829      	ldr	r1, [r5, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 8001310:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
 8001314:	f022 42c0 	bic.w	r2, r2, #1610612736	; 0x60000000
 8001318:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
      runtime_handle->rx_busy = false;
      runtime_handle->tx_data_dummy = false;
      runtime_handle->rx_data_dummy = true;
      runtime_handle->rx_data = NULL;

      if (handle->config->rx_cbhandler != NULL)
 800131c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
        XMC_SPI_CH_DisableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
      }
      /* Reception complete */
      runtime_handle->rx_busy = false;
      runtime_handle->tx_data_dummy = false;
      runtime_handle->rx_data_dummy = true;
 800131e:	2101      	movs	r1, #1
      else
      {
        XMC_SPI_CH_DisableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
      }
      /* Reception complete */
      runtime_handle->rx_busy = false;
 8001320:	2300      	movs	r3, #0
 8001322:	77e3      	strb	r3, [r4, #31]
      runtime_handle->tx_data_dummy = false;
      runtime_handle->rx_data_dummy = true;
      runtime_handle->rx_data = NULL;
 8001324:	6163      	str	r3, [r4, #20]
      {
        XMC_SPI_CH_DisableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
      }
      /* Reception complete */
      runtime_handle->rx_busy = false;
      runtime_handle->tx_data_dummy = false;
 8001326:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      runtime_handle->rx_data_dummy = true;
 800132a:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
      runtime_handle->rx_data = NULL;

      if (handle->config->rx_cbhandler != NULL)
 800132e:	2a00      	cmp	r2, #0
 8001330:	d0e8      	beq.n	8001304 <SPI_MASTER_lReceiveHandler+0x70>
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
      }
    }
  }
}
 8001332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      runtime_handle->rx_data = NULL;

      if (handle->config->rx_cbhandler != NULL)
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 8001336:	4710      	bx	r2
        /* Enable the receive FIFO events */
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
      }
      else
      {
        XMC_SPI_CH_DisableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 8001338:	6828      	ldr	r0, [r5, #0]
 800133a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800133e:	f7ff fcfb 	bl	8000d38 <XMC_SPI_CH_DisableEvent>
 8001342:	686b      	ldr	r3, [r5, #4]
 8001344:	e7ea      	b.n	800131c <SPI_MASTER_lReceiveHandler+0x88>
    }
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) != 0U)
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8001346:	f7ff fced 	bl	8000d24 <XMC_SPI_CH_GetReceivedData>

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 800134a:	6923      	ldr	r3, [r4, #16]
 800134c:	6962      	ldr	r2, [r4, #20]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 800134e:	2e02      	cmp	r6, #2
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8001350:	54d0      	strb	r0, [r2, r3]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001352:	d075      	beq.n	8001440 <SPI_MASTER_lReceiveHandler+0x1ac>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
 8001354:	6922      	ldr	r2, [r4, #16]
 8001356:	68e3      	ldr	r3, [r4, #12]
 8001358:	4416      	add	r6, r2
 800135a:	6126      	str	r6, [r4, #16]
 800135c:	e7cf      	b.n	80012fe <SPI_MASTER_lReceiveHandler+0x6a>
 800135e:	68e3      	ldr	r3, [r4, #12]
 8001360:	6828      	ldr	r0, [r5, #0]
 8001362:	e002      	b.n	800136a <SPI_MASTER_lReceiveHandler+0xd6>
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
      }
      (runtime_handle->rx_data_index)+= bytes_per_word;
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 8001364:	6922      	ldr	r2, [r4, #16]
 8001366:	429a      	cmp	r2, r3
 8001368:	d030      	beq.n	80013cc <SPI_MASTER_lReceiveHandler+0x138>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 800136a:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114

  runtime_handle = handle->runtime;
  data = 0U;

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 800136e:	0716      	lsls	r6, r2, #28
 8001370:	d43d      	bmi.n	80013ee <SPI_MASTER_lReceiveHandler+0x15a>
  {
    if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 8001372:	6922      	ldr	r2, [r4, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d2f5      	bcs.n	8001364 <SPI_MASTER_lReceiveHandler+0xd0>
    {
      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8001378:	f7ff fcd4 	bl	8000d24 <XMC_SPI_CH_GetReceivedData>
      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 800137c:	6923      	ldr	r3, [r4, #16]
 800137e:	6962      	ldr	r2, [r4, #20]
 8001380:	54d0      	strb	r0, [r2, r3]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8001382:	6923      	ldr	r3, [r4, #16]
 8001384:	6962      	ldr	r2, [r4, #20]
 8001386:	4413      	add	r3, r2
 8001388:	0a00      	lsrs	r0, r0, #8
 800138a:	7058      	strb	r0, [r3, #1]
      }
      (runtime_handle->rx_data_index)+= bytes_per_word;
 800138c:	6922      	ldr	r2, [r4, #16]
 800138e:	6828      	ldr	r0, [r5, #0]
 8001390:	68e3      	ldr	r3, [r4, #12]
 8001392:	3202      	adds	r2, #2
 8001394:	6122      	str	r2, [r4, #16]
 8001396:	e7e5      	b.n	8001364 <SPI_MASTER_lReceiveHandler+0xd0>
 8001398:	68e3      	ldr	r3, [r4, #12]
 800139a:	6828      	ldr	r0, [r5, #0]
 800139c:	e002      	b.n	80013a4 <SPI_MASTER_lReceiveHandler+0x110>
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 800139e:	6922      	ldr	r2, [r4, #16]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d013      	beq.n	80013cc <SPI_MASTER_lReceiveHandler+0x138>
 80013a4:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114

  runtime_handle = handle->runtime;
  data = 0U;

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 80013a8:	0712      	lsls	r2, r2, #28
 80013aa:	d420      	bmi.n	80013ee <SPI_MASTER_lReceiveHandler+0x15a>
  {
    if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 80013ac:	6922      	ldr	r2, [r4, #16]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d2f5      	bcs.n	800139e <SPI_MASTER_lReceiveHandler+0x10a>
    {
      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 80013b2:	f7ff fcb7 	bl	8000d24 <XMC_SPI_CH_GetReceivedData>
      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 80013b6:	6923      	ldr	r3, [r4, #16]
 80013b8:	6962      	ldr	r2, [r4, #20]
 80013ba:	54d0      	strb	r0, [r2, r3]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
      }
      (runtime_handle->rx_data_index)+= bytes_per_word;
 80013bc:	6922      	ldr	r2, [r4, #16]
 80013be:	6828      	ldr	r0, [r5, #0]
 80013c0:	68e3      	ldr	r3, [r4, #12]
 80013c2:	3201      	adds	r2, #1
 80013c4:	6122      	str	r2, [r4, #16]
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 80013c6:	6922      	ldr	r2, [r4, #16]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d1eb      	bne.n	80013a4 <SPI_MASTER_lReceiveHandler+0x110>
    {
      /*Reception complete*/
      runtime_handle->rx_busy = false;
 80013cc:	2100      	movs	r1, #0
 80013ce:	77e1      	strb	r1, [r4, #31]
      runtime_handle->tx_data_dummy = false;
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
      if (handle->config->rx_cbhandler != NULL)
 80013d0:	686a      	ldr	r2, [r5, #4]

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
    {
      /*Reception complete*/
      runtime_handle->rx_busy = false;
      runtime_handle->tx_data_dummy = false;
 80013d2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
  channel->RBCTR &= (uint32_t)~event;
 80013d6:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
      if (handle->config->rx_cbhandler != NULL)
 80013da:	6f56      	ldr	r6, [r2, #116]	; 0x74
 80013dc:	f021 41c0 	bic.w	r1, r1, #1610612736	; 0x60000000
 80013e0:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
 80013e4:	b126      	cbz	r6, 80013f0 <SPI_MASTER_lReceiveHandler+0x15c>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 80013e6:	47b0      	blx	r6
 80013e8:	68e3      	ldr	r3, [r4, #12]
 80013ea:	686a      	ldr	r2, [r5, #4]
 80013ec:	e000      	b.n	80013f0 <SPI_MASTER_lReceiveHandler+0x15c>
 80013ee:	686a      	ldr	r2, [r5, #4]
  if ((uint32_t)handle->config->rx_fifo_size > 0U)
  {
    /* read the FIFO */
    SPI_MASTER_lFIFORead(handle, bytes_per_word);
    /*Set the trigger limit if data still to be received*/
    if ((runtime_handle->rx_data_count - runtime_handle->rx_data_index) <= ((uint32_t)0x01 << (handle->config->rx_fifo_size - 1U)))
 80013f0:	f892 107d 	ldrb.w	r1, [r2, #125]	; 0x7d
 80013f4:	6922      	ldr	r2, [r4, #16]
 80013f6:	1e4e      	subs	r6, r1, #1
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f606 	lsl.w	r6, r0, r6
 80013fe:	1a9a      	subs	r2, r3, r2
 8001400:	42b2      	cmp	r2, r6
 8001402:	f63f af7f 	bhi.w	8001304 <SPI_MASTER_lReceiveHandler+0x70>
    {
      SPI_MASTER_lReconfigureRxFIFO(handle, \
                               (uint32_t)(runtime_handle->rx_data_count - runtime_handle->rx_data_index));
 8001406:	6922      	ldr	r2, [r4, #16]
static void SPI_MASTER_lReconfigureRxFIFO(const SPI_MASTER_t * const handle, uint32_t data_size)
{
  uint32_t fifo_size;
  uint32_t ret_limit_val;

  if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
 8001408:	2900      	cmp	r1, #0
 800140a:	f43f af7b 	beq.w	8001304 <SPI_MASTER_lReceiveHandler+0x70>
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	f43f af78 	beq.w	8001304 <SPI_MASTER_lReceiveHandler+0x70>
  {
    fifo_size = (uint32_t)0x01 << handle->config->rx_fifo_size;

    if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001414:	68aa      	ldr	r2, [r5, #8]
 8001416:	6812      	ldr	r2, [r2, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val;

  if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
  {
    fifo_size = (uint32_t)0x01 << handle->config->rx_fifo_size;
 8001418:	4088      	lsls	r0, r1

    if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 800141a:	2a08      	cmp	r2, #8
	{
	  /* Data size is divided by 2, to change the trigger limit according the word length */
	  data_size = (uint32_t)data_size >> 1U;
 800141c:	bf88      	it	hi
 800141e:	085b      	lsrhi	r3, r3, #1
	}

	/*If data size is more than FIFO size, configure the limit to the FIFO size*/
	if (data_size < (fifo_size >> 1))
 8001420:	0842      	lsrs	r2, r0, #1
 8001422:	429a      	cmp	r2, r3
	{
	  ret_limit_val = fifo_size >> 1;
	}

	/*Set the limit value*/
	XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, ret_limit_val);
 8001424:	6828      	ldr	r0, [r5, #0]
	}

	/*If data size is more than FIFO size, configure the limit to the FIFO size*/
	if (data_size < (fifo_size >> 1))
	{
	  ret_limit_val = data_size - 1U;
 8001426:	bf88      	it	hi
 8001428:	f103 32ff 	addhi.w	r2, r3, #4294967295
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
      }
    }
  }
}
 800142c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	{
	  ret_limit_val = fifo_size >> 1;
	}

	/*Set the limit value*/
	XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, ret_limit_val);
 8001430:	f7ff bd42 	b.w	8000eb8 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8001434:	6923      	ldr	r3, [r4, #16]
 8001436:	6962      	ldr	r2, [r4, #20]
 8001438:	4413      	add	r3, r2
 800143a:	0a00      	lsrs	r0, r0, #8
 800143c:	7058      	strb	r0, [r3, #1]
 800143e:	e746      	b.n	80012ce <SPI_MASTER_lReceiveHandler+0x3a>

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8001440:	6923      	ldr	r3, [r4, #16]
 8001442:	6962      	ldr	r2, [r4, #20]
 8001444:	4413      	add	r3, r2
 8001446:	0a00      	lsrs	r0, r0, #8
 8001448:	7058      	strb	r0, [r3, #1]
 800144a:	e783      	b.n	8001354 <SPI_MASTER_lReceiveHandler+0xc0>

0800144c <SPI_MASTER_1_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_1_lInit(void)
{
 800144c:	b510      	push	{r4, lr}
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI0_CH1, &SPI_MASTER_1_Channel_Config);
 800144e:	4c50      	ldr	r4, [pc, #320]	; (8001590 <SPI_MASTER_1_lInit+0x144>)
 8001450:	4950      	ldr	r1, [pc, #320]	; (8001594 <SPI_MASTER_1_lInit+0x148>)
 8001452:	4620      	mov	r0, r4
 8001454:	f7ff fc10 	bl	8000c78 <XMC_SPI_CH_Init>
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 8001458:	6b63      	ldr	r3, [r4, #52]	; 0x34
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI0_CH1, 2U);

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT6_BASE, (uint8_t)3, &SPI_MASTER_1_MISO_Config.port_config);
 800145a:	484f      	ldr	r0, [pc, #316]	; (8001598 <SPI_MASTER_1_lInit+0x14c>)
 800145c:	4a4f      	ldr	r2, [pc, #316]	; (800159c <SPI_MASTER_1_lInit+0x150>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6363      	str	r3, [r4, #52]	; 0x34
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8001464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001466:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800146a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800146e:	6363      	str	r3, [r4, #52]	; 0x34
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8001470:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001472:	f443 137c 	orr.w	r3, r3, #4128768	; 0x3f0000
 8001476:	6363      	str	r3, [r4, #52]	; 0x34
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8001478:	6963      	ldr	r3, [r4, #20]
 800147a:	f023 4350 	bic.w	r3, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 800147e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8001482:	6163      	str	r3, [r4, #20]
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001484:	6963      	ldr	r3, [r4, #20]
 8001486:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
								   USIC_CH_BRG_PCTQ_Msk)) |
 800148a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800148e:	6163      	str	r3, [r4, #20]
 8001490:	2103      	movs	r1, #3
 8001492:	f7fe ff53 	bl	800033c <XMC_GPIO_Init>
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 8001496:	69e3      	ldr	r3, [r4, #28]
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH1, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_C);
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI0_CH1);

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)13, &SPI_MASTER_1_MOSI_Config.port_config);
 8001498:	4841      	ldr	r0, [pc, #260]	; (80015a0 <SPI_MASTER_1_lInit+0x154>)
 800149a:	4a42      	ldr	r2, [pc, #264]	; (80015a4 <SPI_MASTER_1_lInit+0x158>)
 800149c:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	61e3      	str	r3, [r4, #28]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80014a6:	69e3      	ldr	r3, [r4, #28]
 80014a8:	f023 0307 	bic.w	r3, r3, #7
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	61e3      	str	r3, [r4, #28]
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 80014b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014b4:	f023 030f 	bic.w	r3, r3, #15
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6423      	str	r3, [r4, #64]	; 0x40
 80014be:	210d      	movs	r1, #13
 80014c0:	f7fe ff3c 	bl	800033c <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT6_BASE, (uint8_t)2, &SPI_MASTER_1_SCLKOUT_Config.port_config);
 80014c4:	4834      	ldr	r0, [pc, #208]	; (8001598 <SPI_MASTER_1_lInit+0x14c>)
 80014c6:	4a38      	ldr	r2, [pc, #224]	; (80015a8 <SPI_MASTER_1_lInit+0x15c>)
 80014c8:	2102      	movs	r1, #2
 80014ca:	f7fe ff37 	bl	800033c <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)11, &SPI_MASTER_1_SS_0_Config.port_config);
 80014ce:	4a37      	ldr	r2, [pc, #220]	; (80015ac <SPI_MASTER_1_lInit+0x160>)
 80014d0:	4833      	ldr	r0, [pc, #204]	; (80015a0 <SPI_MASTER_1_lInit+0x154>)
 80014d2:	210b      	movs	r1, #11
 80014d4:	f7fe ff32 	bl	800033c <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI0_CH1, XMC_SPI_CH_SLAVE_SELECT_2);
 80014d8:	4620      	mov	r0, r4
 80014da:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80014de:	f7ff fbf1 	bl	8000cc4 <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH1,
 80014e2:	4620      	mov	r0, r4
 80014e4:	2110      	movs	r1, #16
 80014e6:	2200      	movs	r2, #0
 80014e8:	f7ff fcf8 	bl	8000edc <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
            
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI0_CH1,
 80014ec:	2301      	movs	r3, #1
 80014ee:	4620      	mov	r0, r4
 80014f0:	2110      	movs	r1, #16
 80014f2:	2204      	movs	r2, #4
 80014f4:	f7ff fcb2 	bl	8000e5c <XMC_USIC_CH_TXFIFO_Configure>
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_SPI0_CH1,
 80014f8:	4620      	mov	r0, r4
 80014fa:	2110      	movs	r1, #16
 80014fc:	2203      	movs	r2, #3
 80014fe:	f7ff fcf9 	bl	8000ef4 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_3);
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI0_CH1,
 8001502:	2100      	movs	r1, #0
 8001504:	460b      	mov	r3, r1
 8001506:	4620      	mov	r0, r4
 8001508:	2204      	movs	r2, #4
 800150a:	f7ff fcbd 	bl	8000e88 <XMC_USIC_CH_RXFIFO_Configure>
                               0U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               0U);
             
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI0_CH1,
 800150e:	4620      	mov	r0, r4
 8001510:	2110      	movs	r1, #16
 8001512:	2205      	movs	r2, #5
 8001514:	f7ff fcfc 	bl	8000f10 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_5);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI0_CH1,
 8001518:	2113      	movs	r1, #19
 800151a:	4620      	mov	r0, r4
 800151c:	2205      	movs	r2, #5
 800151e:	f7ff fcf7 	bl	8000f10 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <SPI_MASTER_1_lInit+0x164>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152a:	f1c3 0107 	rsb	r1, r3, #7
 800152e:	2906      	cmp	r1, #6
 8001530:	bf28      	it	cs
 8001532:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001534:	b33b      	cbz	r3, 8001586 <SPI_MASTER_1_lInit+0x13a>
 8001536:	1e5a      	subs	r2, r3, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	2301      	movs	r3, #1
 800153a:	408b      	lsls	r3, r1
 800153c:	3b01      	subs	r3, #1
 800153e:	4093      	lsls	r3, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <SPI_MASTER_1_lInit+0x168>)
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	491a      	ldr	r1, [pc, #104]	; (80015b0 <SPI_MASTER_1_lInit+0x164>)
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001546:	b2db      	uxtb	r3, r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001548:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	f882 3357 	strb.w	r3, [r2, #855]	; 0x357
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001550:	6090      	str	r0, [r2, #8]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001552:	68cb      	ldr	r3, [r1, #12]
 8001554:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001558:	f1c3 0107 	rsb	r1, r3, #7
 800155c:	2906      	cmp	r1, #6
 800155e:	bf28      	it	cs
 8001560:	2106      	movcs	r1, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	b193      	cbz	r3, 800158a <SPI_MASTER_1_lInit+0x13e>
 8001564:	1e5a      	subs	r2, r3, #1

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001566:	2301      	movs	r3, #1
 8001568:	408b      	lsls	r3, r1
 800156a:	3b01      	subs	r3, #1
 800156c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001570:	4093      	lsls	r3, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <SPI_MASTER_1_lInit+0x168>)
 8001576:	b2db      	uxtb	r3, r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001578:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	f882 3359 	strb.w	r3, [r2, #857]	; 0x359
    
  /* Enable Receive interrupt */
  NVIC_EnableIRQ((IRQn_Type)89);
    
  return status;
}
 8001580:	2000      	movs	r0, #0
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001582:	6091      	str	r1, [r2, #8]
 8001584:	bd10      	pop	{r4, pc}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	461a      	mov	r2, r3
 8001588:	e7d6      	b.n	8001538 <SPI_MASTER_1_lInit+0xec>
 800158a:	461a      	mov	r2, r3
 800158c:	e7eb      	b.n	8001566 <SPI_MASTER_1_lInit+0x11a>
 800158e:	bf00      	nop
 8001590:	40030200 	.word	0x40030200
 8001594:	1ffe8888 	.word	0x1ffe8888
 8001598:	48028600 	.word	0x48028600
 800159c:	1ffe8a64 	.word	0x1ffe8a64
 80015a0:	48028300 	.word	0x48028300
 80015a4:	1ffe8874 	.word	0x1ffe8874
 80015a8:	0800e3c8 	.word	0x0800e3c8
 80015ac:	0800e3ac 	.word	0x0800e3ac
 80015b0:	e000ed00 	.word	0xe000ed00
 80015b4:	e000e100 	.word	0xe000e100

080015b8 <USIC0_3_IRQHandler>:
/*Transmit ISR*/
void SPI_MASTER_1_tx_handler()
{
  SPI_MASTER_lTransmitHandler(&SPI_MASTER_1);
 80015b8:	4801      	ldr	r0, [pc, #4]	; (80015c0 <USIC0_3_IRQHandler+0x8>)
 80015ba:	f7ff bddb 	b.w	8001174 <SPI_MASTER_lTransmitHandler>
 80015be:	bf00      	nop
 80015c0:	1ffe8844 	.word	0x1ffe8844

080015c4 <USIC0_5_IRQHandler>:
}

/*Receive ISR*/
void SPI_MASTER_1_rx_handler()
{
  SPI_MASTER_lReceiveHandler(&SPI_MASTER_1);
 80015c4:	4801      	ldr	r0, [pc, #4]	; (80015cc <USIC0_5_IRQHandler+0x8>)
 80015c6:	f7ff be65 	b.w	8001294 <SPI_MASTER_lReceiveHandler>
 80015ca:	bf00      	nop
 80015cc:	1ffe8844 	.word	0x1ffe8844

080015d0 <PWM_CCU8_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU8_STATUS_t PWM_CCU8_Init(PWM_CCU8_t* handle_ptr)
{
 80015d0:	b5f0      	push	{r4, r5, r6, r7, lr}

  status = PWM_CCU8_STATUS_FAILURE;
  status_ccu8_global = GLOBAL_CCU8_STATUS_FAILURE;
  XMC_ASSERT("PWM_CCU8_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU8_STATE_UNINITIALIZED == handle_ptr->state)
 80015d2:	7f05      	ldrb	r5, [r0, #28]
  return version;
}

/* This function initializes the app */
PWM_CCU8_STATUS_t PWM_CCU8_Init(PWM_CCU8_t* handle_ptr)
{
 80015d4:	b083      	sub	sp, #12

  status = PWM_CCU8_STATUS_FAILURE;
  status_ccu8_global = GLOBAL_CCU8_STATUS_FAILURE;
  XMC_ASSERT("PWM_CCU8_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU8_STATE_UNINITIALIZED == handle_ptr->state)
 80015d6:	b115      	cbz	r5, 80015de <PWM_CCU8_Init+0xe>
    }

  }
  else
  {
    status = PWM_CCU8_STATUS_ALREADY_INITIALIZED;
 80015d8:	2002      	movs	r0, #2
    XMC_DEBUG("PWM_CCU8_Init:PWM_CCU8_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
} /* end of PWM_CCU8_Init() api */
 80015da:	b003      	add	sp, #12
 80015dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  XMC_ASSERT("PWM_CCU8_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU8_STATE_UNINITIALIZED == handle_ptr->state)
  {
    /* Initialize consumed Apps */
    status_ccu8_global = GLOBAL_CCU8_Init(handle_ptr->config_ptr->global_ccu8_handle);
 80015de:	6803      	ldr	r3, [r0, #0]
 80015e0:	4604      	mov	r4, r0
 80015e2:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 80015e6:	f000 fc13 	bl	8001e10 <GLOBAL_CCU8_Init>

    /* Initialize CCU8x_CC8y slice */
    if (GLOBAL_CCU8_STATUS_SUCCESS == status_ccu8_global)
 80015ea:	4606      	mov	r6, r0
 80015ec:	b118      	cbz	r0, 80015f6 <PWM_CCU8_Init+0x26>
  PWM_CCU8_STATUS_t status;
  GLOBAL_CCU8_STATUS_t status_ccu8_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU8_STATUS_FAILURE;
 80015ee:	2001      	movs	r0, #1
      }

    }
    else
    {
      handle_ptr->state = PWM_CCU8_STATE_UNINITIALIZED;
 80015f0:	7725      	strb	r5, [r4, #28]
    status = PWM_CCU8_STATUS_ALREADY_INITIALIZED;
    XMC_DEBUG("PWM_CCU8_Init:PWM_CCU8_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
} /* end of PWM_CCU8_Init() api */
 80015f2:	b003      	add	sp, #12
 80015f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (GLOBAL_CCU8_STATUS_SUCCESS == status_ccu8_global)
    {
      XMC_DEBUG("PWM_CCU8_Init:Initilizing slice");

      /* Configure CCU8x_CC8y slice as timer */
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	68a0      	ldr	r0, [r4, #8]
 80015fa:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80015fc:	f7ff f9f4 	bl	80009e8 <XMC_CCU8_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	68a0      	ldr	r0, [r4, #8]
 8001604:	8859      	ldrh	r1, [r3, #2]
 8001606:	f7ff fafb 	bl	8000c00 <XMC_CCU8_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	68a0      	ldr	r0, [r4, #8]
 800160e:	889a      	ldrh	r2, [r3, #4]
 8001610:	4631      	mov	r1, r6
 8001612:	f7ff faf7 	bl	8000c04 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	68a0      	ldr	r0, [r4, #8]
 800161a:	88da      	ldrh	r2, [r3, #6]
 800161c:	2101      	movs	r1, #1
 800161e:	f7ff faf1 	bl	8000c04 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
 8001622:	6822      	ldr	r2, [r4, #0]
 8001624:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8001626:	78db      	ldrb	r3, [r3, #3]
 8001628:	f013 0f06 	tst.w	r3, #6
 800162c:	f040 8166 	bne.w	80018fc <PWM_CCU8_Init+0x32c>
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
      }

#if (UC_SERIES != XMC45) /*STC register not available on XMC45xx devices */
      XMC_CCU8_SLICE_SetShadowTransferMode(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->shadow_transfer_mode);
 8001630:	68a0      	ldr	r0, [r4, #8]
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
                                                          const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & ~(uint32_t)((uint32_t)CCU8_CC8_STC_STM_Msk << (uint32_t)CCU8_CC8_STC_STM_Pos)) |
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
 8001632:	f892 5044 	ldrb.w	r5, [r2, #68]	; 0x44
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
                                                          const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & ~(uint32_t)((uint32_t)CCU8_CC8_STC_STM_Msk << (uint32_t)CCU8_CC8_STC_STM_Pos)) |
 8001636:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->dither_shadow_txfr_msk);

      XMC_CCU8_SLICE_DeadTimeInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->dt_config_ptr);
 800163a:	6c11      	ldr	r1, [r2, #64]	; 0x40
        XMC_CCU8_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu8_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 800163c:	6866      	ldr	r6, [r4, #4]
 800163e:	f8d4 e010 	ldr.w	lr, [r4, #16]
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->dither_shadow_txfr_msk);
 8001642:	6967      	ldr	r7, [r4, #20]
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
 8001644:	006d      	lsls	r5, r5, #1
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
                                                          const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & ~(uint32_t)((uint32_t)CCU8_CC8_STC_STM_Msk << (uint32_t)CCU8_CC8_STC_STM_Pos)) |
 8001646:	f023 020c 	bic.w	r2, r3, #12
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
 800164a:	f005 0306 	and.w	r3, r5, #6
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
                                                          const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & ~(uint32_t)((uint32_t)CCU8_CC8_STC_STM_Msk << (uint32_t)CCU8_CC8_STC_STM_Pos)) |
 800164e:	4313      	orrs	r3, r2
 8001650:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8001654:	f8c6 e010 	str.w	lr, [r6, #16]
 8001658:	6137      	str	r7, [r6, #16]

      XMC_CCU8_SLICE_DeadTimeInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->dt_config_ptr);
 800165a:	f7ff faf5 	bl	8000c48 <XMC_CCU8_SLICE_DeadTimeInit>
}

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	68a0      	ldr	r0, [r4, #8]
 8001662:	69da      	ldr	r2, [r3, #28]
 8001664:	2101      	movs	r1, #1
 8001666:	f7ff fa8f 	bl	8000b88 <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
 800166a:	6823      	ldr	r3, [r4, #0]
 800166c:	68a0      	ldr	r0, [r4, #8]
 800166e:	6a1a      	ldr	r2, [r3, #32]
 8001670:	2102      	movs	r1, #2
 8001672:	f7ff fa89 	bl	8000b88 <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	68a0      	ldr	r0, [r4, #8]
 800167a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800167c:	2103      	movs	r1, #3
 800167e:	f7ff fa83 	bl	8000b88 <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001688:	2900      	cmp	r1, #0
 800168a:	f040 8130 	bne.w	80018ee <PWM_CCU8_Init+0x31e>
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
 800168e:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
 8001692:	2900      	cmp	r1, #0
 8001694:	f040 8124 	bne.w	80018e0 <PWM_CCU8_Init+0x310>
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
 8001698:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800169c:	2900      	cmp	r1, #0
 800169e:	f040 811a 	bne.w	80018d6 <PWM_CCU8_Init+0x306>
  {
    XMC_CCU8_SLICE_DirectionConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
 80016a2:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80016a6:	2900      	cmp	r1, #0
 80016a8:	f040 8110 	bne.w	80018cc <PWM_CCU8_Init+0x2fc>
  {
    XMC_CCU8_SLICE_GateConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
  }
  /* Timer increments on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
 80016ac:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 80016b0:	2900      	cmp	r1, #0
 80016b2:	f040 8106 	bne.w	80018c2 <PWM_CCU8_Init+0x2f2>
  {
    XMC_CCU8_SLICE_CountConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_event);
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
 80016b6:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80016ba:	2900      	cmp	r1, #0
 80016bc:	f040 80f6 	bne.w	80018ac <PWM_CCU8_Init+0x2dc>
  {
    XMC_CCU8_SLICE_LoadConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_event);
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
 80016c0:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 80016c4:	2900      	cmp	r1, #0
 80016c6:	f040 80e6 	bne.w	8001896 <PWM_CCU8_Init+0x2c6>
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
 80016ca:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 80016ce:	68a0      	ldr	r0, [r4, #8]
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
 80016d0:	2a03      	cmp	r2, #3
 80016d2:	f000 8119 	beq.w	8001908 <PWM_CCU8_Init+0x338>
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
 80016d6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80016d8:	b142      	cbz	r2, 80016ec <PWM_CCU8_Init+0x11c>
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 80016da:	6a19      	ldr	r1, [r3, #32]
 80016dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016de:	f7ff fa25 	bl	8000b2c <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU8_SLICE_StatusBitOverrideConfig(handle_ptr->ccu8_slice_ptr);
 80016e2:	68a0      	ldr	r0, [r4, #8]
 80016e4:	f7ff fa08 	bl	8000af8 <XMC_CCU8_SLICE_StatusBitOverrideConfig>
 80016e8:	6823      	ldr	r3, [r4, #0]
 80016ea:	68a0      	ldr	r0, [r4, #8]
static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 80016ec:	7c5a      	ldrb	r2, [r3, #17]
 80016ee:	2100      	movs	r1, #0
 80016f0:	f7ff fa8e 	bl	8000c10 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	68a0      	ldr	r0, [r4, #8]
 80016f8:	7c9a      	ldrb	r2, [r3, #18]
 80016fa:	2102      	movs	r1, #2
 80016fc:	f7ff fa88 	bl	8000c10 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	68a0      	ldr	r0, [r4, #8]
 8001704:	7cda      	ldrb	r2, [r3, #19]
 8001706:	2103      	movs	r1, #3
 8001708:	f7ff fa82 	bl	8000c10 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	68a0      	ldr	r0, [r4, #8]
 8001710:	7d1a      	ldrb	r2, [r3, #20]
 8001712:	2104      	movs	r1, #4
 8001714:	f7ff fa7c 	bl	8000c10 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	68a0      	ldr	r0, [r4, #8]
 800171c:	7d5a      	ldrb	r2, [r3, #21]
 800171e:	2105      	movs	r1, #5
 8001720:	f7ff fa76 	bl	8000c10 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	68a0      	ldr	r0, [r4, #8]
 8001728:	7d9a      	ldrb	r2, [r3, #22]
 800172a:	2101      	movs	r1, #1
 800172c:	f7ff fa70 	bl	8000c10 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	68a0      	ldr	r0, [r4, #8]
 8001734:	7dda      	ldrb	r2, [r3, #23]
 8001736:	2108      	movs	r1, #8
 8001738:	f7ff fa6a 	bl	8000c10 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	68a0      	ldr	r0, [r4, #8]
 8001740:	7e1a      	ldrb	r2, [r3, #24]
 8001742:	2109      	movs	r1, #9
 8001744:	f7ff fa64 	bl	8000c10 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	68a0      	ldr	r0, [r4, #8]
 800174c:	7e5a      	ldrb	r2, [r3, #25]
 800174e:	210a      	movs	r1, #10
 8001750:	f7ff fa5e 	bl	8000c10 <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e2);

  if ((bool) true == handle_ptr->config_ptr->int_per_match)
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	7a1a      	ldrb	r2, [r3, #8]
 8001758:	b132      	cbz	r2, 8001768 <PWM_CCU8_Init+0x198>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt period match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 800175a:	68a1      	ldr	r1, [r4, #8]
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 800175c:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
 8001760:	f042 0201 	orr.w	r2, r2, #1
 8001764:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_up)
 8001768:	7a5a      	ldrb	r2, [r3, #9]
 800176a:	b132      	cbz	r2, 800177a <PWM_CCU8_Init+0x1aa>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
 800176c:	68a1      	ldr	r1, [r4, #8]
 800176e:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
 8001772:	f042 0204 	orr.w	r2, r2, #4
 8001776:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_down)
 800177a:	7a9a      	ldrb	r2, [r3, #10]
 800177c:	b132      	cbz	r2, 800178c <PWM_CCU8_Init+0x1bc>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1);
 800177e:	68a1      	ldr	r1, [r4, #8]
 8001780:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
 8001784:	f042 0208 	orr.w	r2, r2, #8
 8001788:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_up)
 800178c:	7ada      	ldrb	r2, [r3, #11]
 800178e:	b132      	cbz	r2, 800179e <PWM_CCU8_Init+0x1ce>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
 8001790:	68a1      	ldr	r1, [r4, #8]
 8001792:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
 8001796:	f042 0210 	orr.w	r2, r2, #16
 800179a:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_down)
 800179e:	7b1a      	ldrb	r2, [r3, #12]
 80017a0:	b132      	cbz	r2, 80017b0 <PWM_CCU8_Init+0x1e0>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2);
 80017a2:	68a1      	ldr	r1, [r4, #8]
 80017a4:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
 80017a8:	f042 0220 	orr.w	r2, r2, #32
 80017ac:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
 80017b0:	7b5a      	ldrb	r2, [r3, #13]
 80017b2:	b132      	cbz	r2, 80017c2 <PWM_CCU8_Init+0x1f2>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt one match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
 80017b4:	68a1      	ldr	r1, [r4, #8]
 80017b6:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
 80017ba:	f042 0202 	orr.w	r2, r2, #2
 80017be:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
 80017c2:	7b9a      	ldrb	r2, [r3, #14]
 80017c4:	b132      	cbz	r2, 80017d4 <PWM_CCU8_Init+0x204>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 0 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0);
 80017c6:	68a1      	ldr	r1, [r4, #8]
 80017c8:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
 80017cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017d0:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
 80017d4:	7bda      	ldrb	r2, [r3, #15]
 80017d6:	b132      	cbz	r2, 80017e6 <PWM_CCU8_Init+0x216>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 1 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1);
 80017d8:	68a1      	ldr	r1, [r4, #8]
 80017da:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
 80017de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e2:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
 80017e6:	7c1a      	ldrb	r2, [r3, #16]
 80017e8:	b132      	cbz	r2, 80017f8 <PWM_CCU8_Init+0x228>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 2 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 80017ea:	68a1      	ldr	r1, [r4, #8]
 80017ec:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
 80017f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017f4:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
  }
}
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
 80017f8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80017fc:	2a00      	cmp	r2, #0
 80017fe:	d142      	bne.n	8001886 <PWM_CCU8_Init+0x2b6>
 8001800:	461d      	mov	r5, r3
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
 8001802:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 8001806:	2b00      	cmp	r3, #0
 8001808:	d135      	bne.n	8001876 <PWM_CCU8_Init+0x2a6>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
 800180a:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
 800180e:	bb53      	cbnz	r3, 8001866 <PWM_CCU8_Init+0x296>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
 8001810:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
 8001814:	b143      	cbz	r3, 8001828 <PWM_CCU8_Init+0x258>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
 8001816:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 800181a:	f895 1084 	ldrb.w	r1, [r5, #132]	; 0x84
 800181e:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8001822:	f7fe fd8b 	bl	800033c <XMC_GPIO_Init>
 8001826:	6825      	ldr	r5, [r4, #0]

      /*Initializes the GPIO*/
      PWM_CCU8_lInit_GPIO(handle_ptr);

      frequency_module = handle_ptr->config_ptr->global_ccu8_handle->module_frequency;
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->prescaler_initval;
 8001828:	6caa      	ldr	r2, [r5, #72]	; 0x48
      PWM_CCU8_lInit_Interrupt(handle_ptr);

      /*Initializes the GPIO*/
      PWM_CCU8_lInit_GPIO(handle_ptr);

      frequency_module = handle_ptr->config_ptr->global_ccu8_handle->module_frequency;
 800182a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->prescaler_initval;
 800182e:	7b12      	ldrb	r2, [r2, #12]
      PWM_CCU8_lInit_Interrupt(handle_ptr);

      /*Initializes the GPIO*/
      PWM_CCU8_lInit_GPIO(handle_ptr);

      frequency_module = handle_ptr->config_ptr->global_ccu8_handle->module_frequency;
 8001830:	681b      	ldr	r3, [r3, #0]

      handle_ptr->state = PWM_CCU8_STATE_INITIALIZED;
      status = PWM_CCU8_STATUS_SUCCESS;

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
 8001832:	7828      	ldrb	r0, [r5, #0]
      /*Initializes the GPIO*/
      PWM_CCU8_lInit_GPIO(handle_ptr);

      frequency_module = handle_ptr->config_ptr->global_ccu8_handle->module_frequency;
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->prescaler_initval;
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
 8001834:	f002 020f 	and.w	r2, r2, #15
 8001838:	40d3      	lsrs	r3, r2
      handle_ptr->frequency_tclk = frequency_module;

      handle_ptr->state = PWM_CCU8_STATE_INITIALIZED;
 800183a:	2201      	movs	r2, #1
      PWM_CCU8_lInit_GPIO(handle_ptr);

      frequency_module = handle_ptr->config_ptr->global_ccu8_handle->module_frequency;
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->prescaler_initval;
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
      handle_ptr->frequency_tclk = frequency_module;
 800183c:	6223      	str	r3, [r4, #32]

      handle_ptr->state = PWM_CCU8_STATE_INITIALIZED;
 800183e:	7722      	strb	r2, [r4, #28]
      status = PWM_CCU8_STATUS_SUCCESS;

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
 8001840:	2800      	cmp	r0, #0
 8001842:	f43f aeca 	beq.w	80015da <PWM_CCU8_Init+0xa>
  status = PWM_CCU8_STATUS_FAILURE;
  XMC_ASSERT("PWM_CCU8_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU8_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU8_STATE_STOPPED == handle_ptr->state))
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU8_EnableClock(handle_ptr->ccu8_module_ptr, handle_ptr->slice_number);
 8001846:	6861      	ldr	r1, [r4, #4]
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 8001848:	7b66      	ldrb	r6, [r4, #13]
 800184a:	68cb      	ldr	r3, [r1, #12]

    if (XMC_CCU8_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
 800184c:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
 8001850:	fa02 f506 	lsl.w	r5, r2, r6
 8001854:	432b      	orrs	r3, r5
 8001856:	60cb      	str	r3, [r1, #12]
 8001858:	b908      	cbnz	r0, 800185e <PWM_CCU8_Init+0x28e>
    {
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 800185a:	68a3      	ldr	r3, [r4, #8]
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 800185c:	60da      	str	r2, [r3, #12]
    }

    handle_ptr->state = PWM_CCU8_STATE_RUNNING;
 800185e:	2302      	movs	r3, #2
 8001860:	7723      	strb	r3, [r4, #28]
      status = PWM_CCU8_STATUS_SUCCESS;

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
      {
        status = PWM_CCU8_Start(handle_ptr);
 8001862:	2000      	movs	r0, #0
 8001864:	e6b9      	b.n	80015da <PWM_CCU8_Init+0xa>
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
 8001866:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8001868:	f895 1074 	ldrb.w	r1, [r5, #116]	; 0x74
 800186c:	6faa      	ldr	r2, [r5, #120]	; 0x78
 800186e:	f7fe fd65 	bl	800033c <XMC_GPIO_Init>
 8001872:	6825      	ldr	r5, [r4, #0]
 8001874:	e7cc      	b.n	8001810 <PWM_CCU8_Init+0x240>
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
 8001876:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8001878:	f895 1064 	ldrb.w	r1, [r5, #100]	; 0x64
 800187c:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800187e:	f7fe fd5d 	bl	800033c <XMC_GPIO_Init>
 8001882:	6825      	ldr	r5, [r4, #0]
 8001884:	e7c1      	b.n	800180a <PWM_CCU8_Init+0x23a>
}
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
 8001886:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001888:	f893 1054 	ldrb.w	r1, [r3, #84]	; 0x54
 800188c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800188e:	f7fe fd55 	bl	800033c <XMC_GPIO_Init>
 8001892:	6825      	ldr	r5, [r4, #0]
 8001894:	e7b5      	b.n	8001802 <PWM_CCU8_Init+0x232>
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8001896:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800189a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800189e:	68a0      	ldr	r0, [r4, #8]
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2303      	movs	r3, #3
 80018a4:	f7ff f8f2 	bl	8000a8c <XMC_CCU8_SLICE_ModulationConfig>
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	e70e      	b.n	80016ca <PWM_CCU8_Init+0xfa>
    XMC_CCU8_SLICE_CountConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_event);
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
  {
    XMC_CCU8_SLICE_LoadConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_event);
 80018ac:	68a0      	ldr	r0, [r4, #8]
 80018ae:	f7ff f8dd 	bl	8000a6c <XMC_CCU8_SLICE_LoadConfig>
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	68a0      	ldr	r0, [r4, #8]
 80018b6:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80018ba:	f7ff f8df 	bl	8000a7c <XMC_CCU8_SLICE_LoadSelector>
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	e6fe      	b.n	80016c0 <PWM_CCU8_Init+0xf0>
    XMC_CCU8_SLICE_GateConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
  }
  /* Timer increments on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
  {
    XMC_CCU8_SLICE_CountConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_event);
 80018c2:	68a0      	ldr	r0, [r4, #8]
 80018c4:	f7ff f900 	bl	8000ac8 <XMC_CCU8_SLICE_CountConfig>
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	e6f4      	b.n	80016b6 <PWM_CCU8_Init+0xe6>
    XMC_CCU8_SLICE_DirectionConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
  {
    XMC_CCU8_SLICE_GateConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
 80018cc:	68a0      	ldr	r0, [r4, #8]
 80018ce:	f7ff f903 	bl	8000ad8 <XMC_CCU8_SLICE_GateConfig>
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	e6ea      	b.n	80016ac <PWM_CCU8_Init+0xdc>
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
  {
    XMC_CCU8_SLICE_DirectionConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
 80018d6:	68a0      	ldr	r0, [r4, #8]
 80018d8:	f7ff f906 	bl	8000ae8 <XMC_CCU8_SLICE_DirectionConfig>
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	e6e0      	b.n	80016a2 <PWM_CCU8_Init+0xd2>
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 80018e0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80018e4:	68a0      	ldr	r0, [r4, #8]
 80018e6:	f7ff f8b3 	bl	8000a50 <XMC_CCU8_SLICE_StopConfig>
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	e6d4      	b.n	8001698 <PWM_CCU8_Init+0xc8>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 80018ee:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80018f2:	68a0      	ldr	r0, [r4, #8]
 80018f4:	f7ff f89e 	bl	8000a34 <XMC_CCU8_SLICE_StartConfig>
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	e6c8      	b.n	800168e <PWM_CCU8_Init+0xbe>
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
 80018fc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018fe:	6860      	ldr	r0, [r4, #4]
 8001900:	f7ff f890 	bl	8000a24 <XMC_CCU8_SetMultiChannelShadowTransferMode>
 8001904:	6822      	ldr	r2, [r4, #0]
 8001906:	e693      	b.n	8001630 <PWM_CCU8_Init+0x60>
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 8001908:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800190c:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 8001910:	f7ff f8f8 	bl	8000b04 <XMC_CCU8_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
 8001914:	6823      	ldr	r3, [r4, #0]
    {
      XMC_CCU8_SLICE_EnableTrap(
 8001916:	68a0      	ldr	r0, [r4, #8]
  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
                              handle_ptr->config_ptr->ext_trap_sync);
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
 8001918:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800191c:	2a00      	cmp	r2, #0
 800191e:	f43f aeda 	beq.w	80016d6 <PWM_CCU8_Init+0x106>
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 8001922:	6942      	ldr	r2, [r0, #20]
 8001924:	f442 12f0 	orr.w	r2, r2, #1966080	; 0x1e0000
 8001928:	6142      	str	r2, [r0, #20]
 800192a:	e6d4      	b.n	80016d6 <PWM_CCU8_Init+0x106>

0800192c <PWM_CCU8_Start>:
{
  PWM_CCU8_STATUS_t status;

  status = PWM_CCU8_STATUS_FAILURE;
  XMC_ASSERT("PWM_CCU8_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU8_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU8_STATE_STOPPED == handle_ptr->state))
 800192c:	7f03      	ldrb	r3, [r0, #28]
 800192e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001932:	2b01      	cmp	r3, #1
 8001934:	d001      	beq.n	800193a <PWM_CCU8_Start+0xe>
/*Starts the CCU8_CC8 slice. This needs to be called even if external start is configured.*/
PWM_CCU8_STATUS_t PWM_CCU8_Start(PWM_CCU8_t* handle_ptr)
{
  PWM_CCU8_STATUS_t status;

  status = PWM_CCU8_STATUS_FAILURE;
 8001936:	2001      	movs	r0, #1
 8001938:	4770      	bx	lr

}
/**********************************************************************************************************/
/*Starts the CCU8_CC8 slice. This needs to be called even if external start is configured.*/
PWM_CCU8_STATUS_t PWM_CCU8_Start(PWM_CCU8_t* handle_ptr)
{
 800193a:	b430      	push	{r4, r5}
  status = PWM_CCU8_STATUS_FAILURE;
  XMC_ASSERT("PWM_CCU8_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU8_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU8_STATE_STOPPED == handle_ptr->state))
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU8_EnableClock(handle_ptr->ccu8_module_ptr, handle_ptr->slice_number);
 800193c:	6841      	ldr	r1, [r0, #4]
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 800193e:	7b45      	ldrb	r5, [r0, #13]

    if (XMC_CCU8_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
 8001940:	6804      	ldr	r4, [r0, #0]
 8001942:	68ca      	ldr	r2, [r1, #12]
 8001944:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
 8001948:	fa03 f505 	lsl.w	r5, r3, r5
 800194c:	432a      	orrs	r2, r5
 800194e:	60ca      	str	r2, [r1, #12]
 8001950:	b90c      	cbnz	r4, 8001956 <PWM_CCU8_Start+0x2a>
    {
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 8001952:	6882      	ldr	r2, [r0, #8]
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8001954:	60d3      	str	r3, [r2, #12]
    }

    handle_ptr->state = PWM_CCU8_STATE_RUNNING;
 8001956:	2302      	movs	r3, #2
 8001958:	7703      	strb	r3, [r0, #28]
    status = PWM_CCU8_STATUS_SUCCESS;
    XMC_DEBUG("PWM_CCU8_Start:start PWM");
  }
  return (status);
} /* end of PWM_CCU8_Start() api */
 800195a:	bc30      	pop	{r4, r5}
    if (XMC_CCU8_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
    {
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
    }

    handle_ptr->state = PWM_CCU8_STATE_RUNNING;
 800195c:	2000      	movs	r0, #0
    status = PWM_CCU8_STATUS_SUCCESS;
    XMC_DEBUG("PWM_CCU8_Start:start PWM");
  }
  return (status);
} /* end of PWM_CCU8_Start() api */
 800195e:	4770      	bx	lr

08001960 <PWM_CCU8_SetDutyCycleSymmetric>:
/**********************************************************************************************************/

/*Sets the duty cycle (uint32_t) for CCU8_CC8 slice. */
PWM_CCU8_STATUS_t PWM_CCU8_SetDutyCycleSymmetric(PWM_CCU8_t* handle_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                                 uint32_t duty_cycle)
{
 8001960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t period;
  uint32_t compare;

  status = PWM_CCU8_STATUS_FAILURE;
  XMC_ASSERT("PWM_CCU8_SetDutyCycleSymmetric:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
 8001962:	7f03      	ldrb	r3, [r0, #28]
 8001964:	b11b      	cbz	r3, 800196e <PWM_CCU8_SetDutyCycleSymmetric+0xe>
  {
    /* duty cycle has to be in between 0 and 100 */
    if ((duty_cycle > PWM_CCU8_SYM_DUTY_MAX))
 8001966:	f242 7310 	movw	r3, #10000	; 0x2710
 800196a:	429a      	cmp	r2, r3
 800196c:	d901      	bls.n	8001972 <PWM_CCU8_SetDutyCycleSymmetric+0x12>
{
  PWM_CCU8_STATUS_t status;
  uint32_t period;
  uint32_t compare;

  status = PWM_CCU8_STATUS_FAILURE;
 800196e:	2001      	movs	r0, #1
      XMC_DEBUG("PWM_CCU8_SetDutyCycleSymmetric:dutycycle set");
      status = PWM_CCU8_STATUS_SUCCESS;
    }
  }
  return (status);
} /* end of PWM_CCU8_SetDutyCycleSymmetric() api */
 8001970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001972:	4604      	mov	r4, r0
    {
      XMC_DEBUG("PWM_CCU8_SetDutyCycleSymmetric:Cannot set duty cycle > 100%");
    }
    else
    {
      period = (uint32_t) XMC_CCU8_SLICE_GetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr) + 1U;
 8001974:	6880      	ldr	r0, [r0, #8]

      /* Duty Cycle(symmetric) = ((PR + 1)- CR) / (PR + 1) */
      compare = ((period * (PWM_CCU8_DUTY_FULL_SCALE - duty_cycle)) / PWM_CCU8_DUTY_FULL_SCALE);
 8001976:	4f0d      	ldr	r7, [pc, #52]	; (80019ac <PWM_CCU8_SetDutyCycleSymmetric+0x4c>)
 8001978:	4615      	mov	r5, r2
 *  XMC_CCU8_SLICE_SetTimerPeriodMatch().
 */
__STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerPeriodMatch(const XMC_CCU8_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU8_SLICE_GetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  return((uint16_t) slice->PR);
 800197a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800197c:	f5c5 531c 	rsb	r3, r5, #9984	; 0x2700
    {
      XMC_DEBUG("PWM_CCU8_SetDutyCycleSymmetric:Cannot set duty cycle > 100%");
    }
    else
    {
      period = (uint32_t) XMC_CCU8_SLICE_GetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr) + 1U;
 8001980:	b292      	uxth	r2, r2

      /* Duty Cycle(symmetric) = ((PR + 1)- CR) / (PR + 1) */
      compare = ((period * (PWM_CCU8_DUTY_FULL_SCALE - duty_cycle)) / PWM_CCU8_DUTY_FULL_SCALE);
 8001982:	3310      	adds	r3, #16
 8001984:	fb02 3303 	mla	r3, r2, r3, r3
 8001988:	fba7 3203 	umull	r3, r2, r7, r3

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, channel, (uint16_t) compare);
 800198c:	f3c2 324f 	ubfx	r2, r2, #13, #16
 8001990:	460e      	mov	r6, r1
 8001992:	f7ff f937 	bl	8000c04 <XMC_CCU8_SLICE_SetTimerCompareMatch>
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 8001996:	6863      	ldr	r3, [r4, #4]
 8001998:	6922      	ldr	r2, [r4, #16]
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 800199a:	611a      	str	r2, [r3, #16]

      if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 800199c:	b116      	cbz	r6, 80019a4 <PWM_CCU8_SetDutyCycleSymmetric+0x44>
      {
        handle_ptr->sym_duty1 = duty_cycle;
      }
      else
      {
        handle_ptr->sym_duty2 = duty_cycle;
 800199e:	62a5      	str	r5, [r4, #40]	; 0x28
      }

      XMC_DEBUG("PWM_CCU8_SetDutyCycleSymmetric:dutycycle set");
      status = PWM_CCU8_STATUS_SUCCESS;
 80019a0:	2000      	movs	r0, #0
 80019a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, channel, (uint16_t) compare);
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);

      if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
      {
        handle_ptr->sym_duty1 = duty_cycle;
 80019a4:	6265      	str	r5, [r4, #36]	; 0x24
      {
        handle_ptr->sym_duty2 = duty_cycle;
      }

      XMC_DEBUG("PWM_CCU8_SetDutyCycleSymmetric:dutycycle set");
      status = PWM_CCU8_STATUS_SUCCESS;
 80019a6:	4630      	mov	r0, r6
 80019a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019aa:	bf00      	nop
 80019ac:	d1b71759 	.word	0xd1b71759

080019b0 <INTERRUPT_Init>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <INTERRUPT_Init+0x84>)

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 80019b2:	b4f0      	push	{r4, r5, r6, r7}
 80019b4:	68db      	ldr	r3, [r3, #12]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80019b6:	7804      	ldrb	r4, [r0, #0]
 80019b8:	7841      	ldrb	r1, [r0, #1]
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 80019ba:	7887      	ldrb	r7, [r0, #2]
 80019bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	f1c3 0507 	rsb	r5, r3, #7
 80019c4:	2d06      	cmp	r5, #6
 80019c6:	bf28      	it	cs
 80019c8:	2506      	movcs	r5, #6
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ca:	b34b      	cbz	r3, 8001a20 <INTERRUPT_Init+0x70>
 80019cc:	1e5e      	subs	r6, r3, #1
 80019ce:	2201      	movs	r2, #1
 80019d0:	40b2      	lsls	r2, r6
 80019d2:	3a01      	subs	r2, #1
 80019d4:	ea02 0307 	and.w	r3, r2, r7

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	2201      	movs	r2, #1
 80019da:	40aa      	lsls	r2, r5
 80019dc:	3a01      	subs	r2, #1
 80019de:	400a      	ands	r2, r1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80019e0:	b261      	sxtb	r1, r4

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e2:	40b2      	lsls	r2, r6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80019e4:	2900      	cmp	r1, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80019e6:	ea43 0302 	orr.w	r3, r3, r2
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80019ea:	db1b      	blt.n	8001a24 <INTERRUPT_Init+0x74>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	f101 4260 	add.w	r2, r1, #3758096384	; 0xe0000000
 80019f0:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
  if (handler->enable_at_init == true)
 80019fc:	78c3      	ldrb	r3, [r0, #3]
 80019fe:	b163      	cbz	r3, 8001a1a <INTERRUPT_Init+0x6a>
 8001a00:	7802      	ldrb	r2, [r0, #0]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001a02:	b253      	sxtb	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db08      	blt.n	8001a1a <INTERRUPT_Init+0x6a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a08:	f002 021f 	and.w	r2, r2, #31
 8001a0c:	095b      	lsrs	r3, r3, #5
 8001a0e:	2101      	movs	r1, #1
 8001a10:	4809      	ldr	r0, [pc, #36]	; (8001a38 <INTERRUPT_Init+0x88>)
 8001a12:	fa01 f202 	lsl.w	r2, r1, r2
 8001a16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
}
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a1e:	4770      	bx	lr
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a20:	461e      	mov	r6, r3
 8001a22:	e7d9      	b.n	80019d8 <INTERRUPT_Init+0x28>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <INTERRUPT_Init+0x8c>)
 8001a26:	f004 040f 	and.w	r4, r4, #15
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4422      	add	r2, r4
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	7613      	strb	r3, [r2, #24]
 8001a32:	e7e3      	b.n	80019fc <INTERRUPT_Init+0x4c>
 8001a34:	e000ed00 	.word	0xe000ed00
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ecfc 	.word	0xe000ecfc

08001a40 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8001a40:	b508      	push	{r3, lr}
   static U32 aMemory[GUI_NUMBYTES / 4] __attribute__((section(".user_defined_section")));
#endif
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <GUI_X_Config+0x1c>)
 8001a44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a48:	f007 f854 	bl	8008af4 <GUI_ALLOC_AssignMemory>
  GUI_ALLOC_SetAvBlockSize(GUI_BLOCKSIZE);
 8001a4c:	2080      	movs	r0, #128	; 0x80
 8001a4e:	f007 f85b 	bl	8008b08 <GUI_ALLOC_SetAvBlockSize>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8001a52:	4803      	ldr	r0, [pc, #12]	; (8001a60 <GUI_X_Config+0x20>)
}
 8001a54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
  GUI_ALLOC_SetAvBlockSize(GUI_BLOCKSIZE);
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8001a58:	f005 bcc8 	b.w	80073ec <GUI_SetDefaultFont>
 8001a5c:	1ffe8a78 	.word	0x1ffe8a78
 8001a60:	0800e694 	.word	0x0800e694

08001a64 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop

08001a68 <LCD_X_Config>:
* Purpose:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*   
*/
void LCD_X_Config(void) {
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
  GUI_DEVICE * pDevice;
  GUI_PORT_API PortAPI = {0};
 8001a6a:	2100      	movs	r1, #0
* Purpose:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*   
*/
void LCD_X_Config(void) {
 8001a6c:	b0a1      	sub	sp, #132	; 0x84
  GUI_DEVICE * pDevice;
  GUI_PORT_API PortAPI = {0};
  CONFIG_FLEXCOLOR Config = {0};
 8001a6e:	460c      	mov	r4, r1
*   display driver configuration.
*   
*/
void LCD_X_Config(void) {
  GUI_DEVICE * pDevice;
  GUI_PORT_API PortAPI = {0};
 8001a70:	a806      	add	r0, sp, #24
 8001a72:	2268      	movs	r2, #104	; 0x68
 8001a74:	f00c f854 	bl	800db20 <memset>
  CONFIG_FLEXCOLOR Config = {0};

  //
  // Set display driver and color conversion for 1st layer
  //
  pDevice = GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER, COLOR_CONVERSION, 0, 0);
 8001a78:	4623      	mov	r3, r4
 8001a7a:	4622      	mov	r2, r4
 8001a7c:	4917      	ldr	r1, [pc, #92]	; (8001adc <LCD_X_Config+0x74>)
 8001a7e:	4818      	ldr	r0, [pc, #96]	; (8001ae0 <LCD_X_Config+0x78>)
*   
*/
void LCD_X_Config(void) {
  GUI_DEVICE * pDevice;
  GUI_PORT_API PortAPI = {0};
  CONFIG_FLEXCOLOR Config = {0};
 8001a80:	9401      	str	r4, [sp, #4]
 8001a82:	9402      	str	r4, [sp, #8]
 8001a84:	9403      	str	r4, [sp, #12]
 8001a86:	9404      	str	r4, [sp, #16]
 8001a88:	9405      	str	r4, [sp, #20]

  //
  // Set display driver and color conversion for 1st layer
  //
  pDevice = GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER, COLOR_CONVERSION, 0, 0);
 8001a8a:	f005 fc61 	bl	8007350 <GUI_DEVICE_CreateAndLink>
  //
  // Display size configuration
  //
  LCD_SetSizeEx (0, XSIZE_PHYS,  YSIZE_PHYS);
 8001a8e:	21a0      	movs	r1, #160	; 0xa0
  CONFIG_FLEXCOLOR Config = {0};

  //
  // Set display driver and color conversion for 1st layer
  //
  pDevice = GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER, COLOR_CONVERSION, 0, 0);
 8001a90:	4605      	mov	r5, r0
  //
  // Display size configuration
  //
  LCD_SetSizeEx (0, XSIZE_PHYS,  YSIZE_PHYS);
 8001a92:	2280      	movs	r2, #128	; 0x80
 8001a94:	4620      	mov	r0, r4
 8001a96:	f005 fa1f 	bl	8006ed8 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	21a0      	movs	r1, #160	; 0xa0
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	f005 fa02 	bl	8006ea8 <LCD_SetVSizeEx>
  #ifndef WIN32
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
	#if (DISPLAY_8BPP == 1)
		PortAPI.pfWrite8_A0  = GUI_SEGGERLIBRARY_WriteCmdByte;
		PortAPI.pfWrite8_A1  = GUI_SEGGERLIBRARY_WriteDataByte;
		PortAPI.pfWriteM8_A1 = GUI_SEGGERLIBRARY_WriteMultipleBytes;
 8001aa4:	4f0f      	ldr	r7, [pc, #60]	; (8001ae4 <LCD_X_Config+0x7c>)
  // Function selection, hardware routines (PortAPI) and operation mode (bus, bpp and cache)
  //
  #ifndef WIN32
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
	#if (DISPLAY_8BPP == 1)
		PortAPI.pfWrite8_A0  = GUI_SEGGERLIBRARY_WriteCmdByte;
 8001aa6:	f8df c04c 	ldr.w	ip, [pc, #76]	; 8001af4 <LCD_X_Config+0x8c>
		PortAPI.pfWrite8_A1  = GUI_SEGGERLIBRARY_WriteDataByte;
 8001aaa:	f8df e04c 	ldr.w	lr, [pc, #76]	; 8001af8 <LCD_X_Config+0x90>
		PortAPI.pfWriteM16_A1 = User_LCD_16_WriteMultiple;
		PortAPI.pfReadM16_A1  = User_LCD_16_Read;
#endif
#endif

		GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, pfFUNC, pfMODE);
 8001aae:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <LCD_X_Config+0x80>)
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
	#if (DISPLAY_8BPP == 1)
		PortAPI.pfWrite8_A0  = GUI_SEGGERLIBRARY_WriteCmdByte;
		PortAPI.pfWrite8_A1  = GUI_SEGGERLIBRARY_WriteDataByte;
		PortAPI.pfWriteM8_A1 = GUI_SEGGERLIBRARY_WriteMultipleBytes;
		PortAPI.pfReadM8_A1  = GUI_SEGGERLIBRARY_ReadMultipleBytes;
 8001ab0:	4e0e      	ldr	r6, [pc, #56]	; (8001aec <LCD_X_Config+0x84>)
		PortAPI.pfWriteM16_A1 = User_LCD_16_WriteMultiple;
		PortAPI.pfReadM16_A1  = User_LCD_16_Read;
#endif
#endif

		GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, pfFUNC, pfMODE);
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <LCD_X_Config+0x88>)
  // Function selection, hardware routines (PortAPI) and operation mode (bus, bpp and cache)
  //
  #ifndef WIN32
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
	#if (DISPLAY_8BPP == 1)
		PortAPI.pfWrite8_A0  = GUI_SEGGERLIBRARY_WriteCmdByte;
 8001ab4:	f8cd c018 	str.w	ip, [sp, #24]
		PortAPI.pfWriteM16_A1 = User_LCD_16_WriteMultiple;
		PortAPI.pfReadM16_A1  = User_LCD_16_Read;
#endif
#endif

		GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, pfFUNC, pfMODE);
 8001ab8:	a906      	add	r1, sp, #24
 8001aba:	4628      	mov	r0, r5
  //
  #ifndef WIN32
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
	#if (DISPLAY_8BPP == 1)
		PortAPI.pfWrite8_A0  = GUI_SEGGERLIBRARY_WriteCmdByte;
		PortAPI.pfWrite8_A1  = GUI_SEGGERLIBRARY_WriteDataByte;
 8001abc:	f8cd e01c 	str.w	lr, [sp, #28]
		PortAPI.pfWriteM8_A1 = GUI_SEGGERLIBRARY_WriteMultipleBytes;
 8001ac0:	9709      	str	r7, [sp, #36]	; 0x24
		PortAPI.pfReadM8_A1  = GUI_SEGGERLIBRARY_ReadMultipleBytes;
 8001ac2:	960d      	str	r6, [sp, #52]	; 0x34
		PortAPI.pfWriteM16_A1 = User_LCD_16_WriteMultiple;
		PortAPI.pfReadM16_A1  = User_LCD_16_Read;
#endif
#endif

		GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, pfFUNC, pfMODE);
 8001ac4:	f005 f9c0 	bl	8006e48 <GUIDRV_FlexColor_SetFunc>

	//
    // Orientation
    //
    Config.Orientation  = DISPLAY_ORIENTATION;
    Config.RegEntryMode = 0x60;
 8001ac8:	2360      	movs	r3, #96	; 0x60
    GUIDRV_FlexColor_Config(pDevice, &Config);
 8001aca:	4628      	mov	r0, r5
 8001acc:	a901      	add	r1, sp, #4
		GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, pfFUNC, pfMODE);

	//
    // Orientation
    //
    Config.Orientation  = DISPLAY_ORIENTATION;
 8001ace:	9403      	str	r4, [sp, #12]
    Config.RegEntryMode = 0x60;
 8001ad0:	f8ad 3010 	strh.w	r3, [sp, #16]
    GUIDRV_FlexColor_Config(pDevice, &Config);
 8001ad4:	f005 f984 	bl	8006de0 <GUIDRV_FlexColor_Config>
  #endif
}
 8001ad8:	b021      	add	sp, #132	; 0x84
 8001ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001adc:	0800f910 	.word	0x0800f910
 8001ae0:	0800f8d4 	.word	0x0800f8d4
 8001ae4:	08001d99 	.word	0x08001d99
 8001ae8:	080052dd 	.word	0x080052dd
 8001aec:	08001ded 	.word	0x08001ded
 8001af0:	080066d1 	.word	0x080066d1
 8001af4:	08001d05 	.word	0x08001d05
 8001af8:	08001d51 	.word	0x08001d51

08001afc <LCD_X_DisplayDriver>:
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
  int r;

  GUI_USE_PARA(LayerIndex);
  GUI_USE_PARA(pData);
  switch (Cmd) {
 8001afc:	2901      	cmp	r1, #1
 8001afe:	f040 80e8 	bne.w	8001cd2 <LCD_X_DisplayDriver+0x1d6>
* Parameter:
*   LayerIndex - Index of layer to be configured
*   Cmd        - Please refer to the details in the switch statement below
*   pData      - Pointer to a LCD_X_DATA structure
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 8001b02:	b510      	push	{r4, lr}
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001b04:	2006      	movs	r0, #6
 8001b06:	460c      	mov	r4, r1
 8001b08:	f000 f8fc 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f000 f91f 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001b12:	2005      	movs	r0, #5
 8001b14:	f000 f8f6 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f000 f919 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001b1e:	2004      	movs	r0, #4
 8001b20:	f000 f8f0 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001b24:	2003      	movs	r0, #3
 8001b26:	f000 f913 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001b2a:	2004      	movs	r0, #4
 8001b2c:	f000 f8ea 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001b30:	2000      	movs	r0, #0
 8001b32:	f000 f90d 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001b36:	203b      	movs	r0, #59	; 0x3b
 8001b38:	f000 f8e4 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f000 f907 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001b42:	2002      	movs	r0, #2
 8001b44:	f000 f8de 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f000 f901 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001b4e:	2003      	movs	r0, #3
 8001b50:	f000 f8d8 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001b54:	2090      	movs	r0, #144	; 0x90
 8001b56:	f000 f8fb 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001b5a:	2080      	movs	r0, #128	; 0x80
 8001b5c:	f000 f8d2 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f000 f8f5 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001b66:	2008      	movs	r0, #8
 8001b68:	f000 f8cc 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f000 f8ef 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001b72:	2009      	movs	r0, #9
 8001b74:	f000 f8c6 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f000 f8e9 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001b7e:	200a      	movs	r0, #10
 8001b80:	f000 f8c0 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001b84:	4620      	mov	r0, r4
 8001b86:	f000 f8e3 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001b8a:	200b      	movs	r0, #11
 8001b8c:	f000 f8ba 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001b90:	200a      	movs	r0, #10
 8001b92:	f000 f8dd 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001b96:	200c      	movs	r0, #12
 8001b98:	f000 f8b4 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001b9c:	200a      	movs	r0, #10
 8001b9e:	f000 f8d7 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001ba2:	200d      	movs	r0, #13
 8001ba4:	f000 f8ae 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001ba8:	200a      	movs	r0, #10
 8001baa:	f000 f8d1 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001bae:	2010      	movs	r0, #16
 8001bb0:	f000 f8a8 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001bb4:	2046      	movs	r0, #70	; 0x46
 8001bb6:	f000 f8cb 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001bba:	2011      	movs	r0, #17
 8001bbc:	f000 f8a2 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001bc0:	2038      	movs	r0, #56	; 0x38
 8001bc2:	f000 f8c5 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001bc6:	2012      	movs	r0, #18
 8001bc8:	f000 f89c 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001bcc:	203a      	movs	r0, #58	; 0x3a
 8001bce:	f000 f8bf 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001bd2:	2013      	movs	r0, #19
 8001bd4:	f000 f896 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f000 f8b9 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001bde:	2014      	movs	r0, #20
 8001be0:	f000 f890 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001be4:	2031      	movs	r0, #49	; 0x31
 8001be6:	f000 f8b3 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001bea:	200f      	movs	r0, #15
 8001bec:	f000 f88a 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f000 f8ad 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001bf6:	2016      	movs	r0, #22
 8001bf8:	f000 f884 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001bfc:	2066      	movs	r0, #102	; 0x66
 8001bfe:	f000 f8a7 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001c02:	2017      	movs	r0, #23
 8001c04:	f000 f87e 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f000 f8a1 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001c0e:	2018      	movs	r0, #24
 8001c10:	f000 f878 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001c14:	209f      	movs	r0, #159	; 0x9f
 8001c16:	f000 f89b 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001c1a:	2019      	movs	r0, #25
 8001c1c:	f000 f872 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f000 f895 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001c26:	201a      	movs	r0, #26
 8001c28:	f000 f86c 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001c2c:	207f      	movs	r0, #127	; 0x7f
 8001c2e:	f000 f88f 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001c32:	2020      	movs	r0, #32
 8001c34:	f000 f866 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f000 f889 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001c3e:	2021      	movs	r0, #33	; 0x21
 8001c40:	f000 f860 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001c44:	2000      	movs	r0, #0
 8001c46:	f000 f883 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001c4a:	2028      	movs	r0, #40	; 0x28
 8001c4c:	f000 f85a 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001c50:	207f      	movs	r0, #127	; 0x7f
 8001c52:	f000 f87d 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001c56:	2029      	movs	r0, #41	; 0x29
 8001c58:	f000 f854 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f000 f877 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001c62:	202e      	movs	r0, #46	; 0x2e
 8001c64:	f000 f84e 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f000 f871 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001c6e:	202f      	movs	r0, #47	; 0x2f
 8001c70:	f000 f848 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001c74:	2000      	movs	r0, #0
 8001c76:	f000 f86b 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001c7a:	2031      	movs	r0, #49	; 0x31
 8001c7c:	f000 f842 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f000 f865 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001c86:	2032      	movs	r0, #50	; 0x32
 8001c88:	f000 f83c 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f000 f85f 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001c92:	2033      	movs	r0, #51	; 0x33
 8001c94:	f000 f836 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f000 f859 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001c9e:	2034      	movs	r0, #52	; 0x34
 8001ca0:	f000 f830 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001ca4:	209f      	movs	r0, #159	; 0x9f
 8001ca6:	f000 f853 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001caa:	2035      	movs	r0, #53	; 0x35
 8001cac:	f000 f82a 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f000 f84d 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001cb6:	2036      	movs	r0, #54	; 0x36
 8001cb8:	f000 f824 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001cbc:	207f      	movs	r0, #127	; 0x7f
 8001cbe:	f000 f847 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8001cc2:	2006      	movs	r0, #6
 8001cc4:	f000 f81e 	bl	8001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f000 f841 	bl	8001d50 <GUI_SEGGERLIBRARY_WriteDataByte>
#if ((USER_DEFINED_LCD == 1) || (SPI_INTERFACE == 0))
	  User_LCD_Init();
#else
    OLED_SPI_InitController();
#endif
    return 0;
 8001cce:	2000      	movs	r0, #0
 8001cd0:	bd10      	pop	{r4, pc}
  }
  default:
    r = -1;
  }
  return r;
 8001cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd6:	4770      	bx	lr

08001cd8 <GUI_SEGGERLIBRARY_Init>:
}


/* API initializes the Segger library */
GUI_SEGGERLIBRARY_STATUS_t GUI_SEGGERLIBRARY_Init(GUI_SEGGERLIBRARY_t *handle)
{
 8001cd8:	b538      	push	{r3, r4, r5, lr}
 8001cda:	4605      	mov	r5, r0

  if (status == GUI_SEGGERLIBRARY_STATUS_SUCCESS)
  {
    /* Initialize SPI as well as the port and pin for GPIO */
    #if (SPI_INTERFACE == 1)
      status = (GUI_SEGGERLIBRARY_STATUS_t)SPI_MASTER_Init(handle->spi_master_handler);
 8001cdc:	6800      	ldr	r0, [r0, #0]
 8001cde:	f7ff fa1d 	bl	800111c <SPI_MASTER_Init>

      #if !USER_DEFINED_LCD
		if (status == GUI_SEGGERLIBRARY_STATUS_SUCCESS)
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	b130      	cbz	r0, 8001cf4 <GUI_SEGGERLIBRARY_Init+0x1c>

		  status = GUI_SEGGERLIBRARY_STATUS_SUCCESS;
		}
		else
		{
		  status = GUI_SEGGERLIBRARY_STATUS_FAILURE;
 8001ce6:	2401      	movs	r4, #1
		}
      #endif
    #endif

    if (handle->enable_at_init == true)
 8001ce8:	7a2b      	ldrb	r3, [r5, #8]
 8001cea:	b10b      	cbz	r3, 8001cf0 <GUI_SEGGERLIBRARY_Init+0x18>
    {
      GUI_Init();
 8001cec:	f005 fb9c 	bl	8007428 <GUI_Init>
  {
    status = GUI_SEGGERLIBRARY_STATUS_FAILURE;
  }

  return (status);
}
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	bd38      	pop	{r3, r4, r5, pc}
      status = (GUI_SEGGERLIBRARY_STATUS_t)SPI_MASTER_Init(handle->spi_master_handler);

      #if !USER_DEFINED_LCD
		if (status == GUI_SEGGERLIBRARY_STATUS_SUCCESS)
		{
		  XMC_GPIO_Init(handle->config->portNo, handle->config->pinNo, handle->config->gpio);
 8001cf4:	686b      	ldr	r3, [r5, #4]
 8001cf6:	6858      	ldr	r0, [r3, #4]
 8001cf8:	7a19      	ldrb	r1, [r3, #8]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	f7fe fb1e 	bl	800033c <XMC_GPIO_Init>
 8001d00:	e7f2      	b.n	8001ce8 <GUI_SEGGERLIBRARY_Init+0x10>
 8001d02:	bf00      	nop

08001d04 <GUI_SEGGERLIBRARY_WriteCmdByte>:
/*
 *  This routine writes to display controller using SPI bus, with A0 = 0
 *
 */
void GUI_SEGGERLIBRARY_WriteCmdByte(uint8_t cmd)
{
 8001d04:	b538      	push	{r3, r4, r5, lr}
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
    /* Clear the A0 pin */
  XMC_GPIO_SetOutputLow(IOHandle.portNo,IOHandle.pinNo);
#endif

  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel,SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);
 8001d06:	4c10      	ldr	r4, [pc, #64]	; (8001d48 <GUI_SEGGERLIBRARY_WriteCmdByte+0x44>)
 */
void GUI_SEGGERLIBRARY_WriteCmdByte(uint8_t cmd)
{
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
    /* Clear the A0 pin */
  XMC_GPIO_SetOutputLow(IOHandle.portNo,IOHandle.pinNo);
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <GUI_SEGGERLIBRARY_WriteCmdByte+0x48>)
#endif

  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel,SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);
 8001d0a:	6862      	ldr	r2, [r4, #4]

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001d0c:	7a1d      	ldrb	r5, [r3, #8]
 8001d0e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 */
void GUI_SEGGERLIBRARY_WriteCmdByte(uint8_t cmd)
{
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
    /* Clear the A0 pin */
  XMC_GPIO_SetOutputLow(IOHandle.portNo,IOHandle.pinNo);
 8001d10:	685a      	ldr	r2, [r3, #4]
#endif

  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel,SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);
 8001d12:	6909      	ldr	r1, [r1, #16]
 8001d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d18:	40ab      	lsls	r3, r5
 8001d1a:	6053      	str	r3, [r2, #4]
/*
 *  This routine writes to display controller using SPI bus, with A0 = 0
 *
 */
void GUI_SEGGERLIBRARY_WriteCmdByte(uint8_t cmd)
{
 8001d1c:	4605      	mov	r5, r0
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
    /* Clear the A0 pin */
  XMC_GPIO_SetOutputLow(IOHandle.portNo,IOHandle.pinNo);
#endif

  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel,SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);
 8001d1e:	6820      	ldr	r0, [r4, #0]
 8001d20:	f7fe ffd0 	bl	8000cc4 <XMC_SPI_CH_EnableSlaveSelect>
 8001d24:	6820      	ldr	r0, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR |= flag;
 8001d26:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d2c:	64c3      	str	r3, [r0, #76]	; 0x4c
/* Sends one byte of data to the OLED through SPI */
void GUI_SEGGERLIBRARY_SendByte(uint8_t data)
{
  SPI_MASTER_ClearFlag(&SPI_INSTANCE, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION);

  XMC_SPI_CH_Transmit(SPI_INSTANCE.channel, (uint16_t)data, XMC_SPI_CH_MODE_STANDARD);
 8001d2e:	4629      	mov	r1, r5
 8001d30:	2200      	movs	r2, #0
 8001d32:	f7fe ffd9 	bl	8000ce8 <XMC_SPI_CH_Transmit>
 8001d36:	6820      	ldr	r0, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_ClearStatusFlag()
 */
__STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
  return channel->PSR_SSCMode;
 8001d38:	6c83      	ldr	r3, [r0, #72]	; 0x48

  while(SPI_MASTER_GetFlagStatus(&SPI_INSTANCE, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION)!=
 8001d3a:	04db      	lsls	r3, r3, #19
 8001d3c:	d5fc      	bpl.n	8001d38 <GUI_SEGGERLIBRARY_WriteCmdByte+0x34>

  /* Write to the SPI Bus */
  GUI_SEGGERLIBRARY_SendByte(cmd);

  XMC_SPI_CH_DisableSlaveSelect(SPI_INSTANCE.channel);
}
 8001d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel,SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);

  /* Write to the SPI Bus */
  GUI_SEGGERLIBRARY_SendByte(cmd);

  XMC_SPI_CH_DisableSlaveSelect(SPI_INSTANCE.channel);
 8001d42:	f7fe bfc7 	b.w	8000cd4 <XMC_SPI_CH_DisableSlaveSelect>
 8001d46:	bf00      	nop
 8001d48:	1ffe8844 	.word	0x1ffe8844
 8001d4c:	0800e54c 	.word	0x0800e54c

08001d50 <GUI_SEGGERLIBRARY_WriteDataByte>:
/*
 *  This routine writes to display controller using SPI bus, with A0 = 1
 *
 */
void GUI_SEGGERLIBRARY_WriteDataByte(uint8_t data)
{
 8001d50:	b538      	push	{r3, r4, r5, lr}
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
    /* Set the A0 pin*/
  XMC_GPIO_SetOutputHigh(IOHandle.portNo,IOHandle.pinNo);
#endif

  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel, SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);
 8001d52:	4c0f      	ldr	r4, [pc, #60]	; (8001d90 <GUI_SEGGERLIBRARY_WriteDataByte+0x40>)
 */
void GUI_SEGGERLIBRARY_WriteDataByte(uint8_t data)
{
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
    /* Set the A0 pin*/
  XMC_GPIO_SetOutputHigh(IOHandle.portNo,IOHandle.pinNo);
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <GUI_SEGGERLIBRARY_WriteDataByte+0x44>)
#endif

  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel, SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);
 8001d56:	6862      	ldr	r2, [r4, #4]

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001d58:	7a1d      	ldrb	r5, [r3, #8]
 8001d5a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 */
void GUI_SEGGERLIBRARY_WriteDataByte(uint8_t data)
{
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
    /* Set the A0 pin*/
  XMC_GPIO_SetOutputHigh(IOHandle.portNo,IOHandle.pinNo);
 8001d5c:	685a      	ldr	r2, [r3, #4]
#endif

  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel, SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);
 8001d5e:	6909      	ldr	r1, [r1, #16]
 8001d60:	2301      	movs	r3, #1
 8001d62:	40ab      	lsls	r3, r5
 8001d64:	6053      	str	r3, [r2, #4]
/*
 *  This routine writes to display controller using SPI bus, with A0 = 1
 *
 */
void GUI_SEGGERLIBRARY_WriteDataByte(uint8_t data)
{
 8001d66:	4605      	mov	r5, r0
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
    /* Set the A0 pin*/
  XMC_GPIO_SetOutputHigh(IOHandle.portNo,IOHandle.pinNo);
#endif

  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel, SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);
 8001d68:	6820      	ldr	r0, [r4, #0]
 8001d6a:	f7fe ffab 	bl	8000cc4 <XMC_SPI_CH_EnableSlaveSelect>
 8001d6e:	6820      	ldr	r0, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR |= flag;
 8001d70:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001d72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d76:	64c3      	str	r3, [r0, #76]	; 0x4c
/* Sends one byte of data to the OLED through SPI */
void GUI_SEGGERLIBRARY_SendByte(uint8_t data)
{
  SPI_MASTER_ClearFlag(&SPI_INSTANCE, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION);

  XMC_SPI_CH_Transmit(SPI_INSTANCE.channel, (uint16_t)data, XMC_SPI_CH_MODE_STANDARD);
 8001d78:	4629      	mov	r1, r5
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f7fe ffb4 	bl	8000ce8 <XMC_SPI_CH_Transmit>
 8001d80:	6820      	ldr	r0, [r4, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_ClearStatusFlag()
 */
__STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
  return channel->PSR_SSCMode;
 8001d82:	6c83      	ldr	r3, [r0, #72]	; 0x48

  while(SPI_MASTER_GetFlagStatus(&SPI_INSTANCE, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION)!=
 8001d84:	04db      	lsls	r3, r3, #19
 8001d86:	d5fc      	bpl.n	8001d82 <GUI_SEGGERLIBRARY_WriteDataByte+0x32>
  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel, SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);

  GUI_SEGGERLIBRARY_SendByte(data);

  XMC_SPI_CH_DisableSlaveSelect(SPI_INSTANCE.channel);
}
 8001d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel, SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);

  GUI_SEGGERLIBRARY_SendByte(data);

  XMC_SPI_CH_DisableSlaveSelect(SPI_INSTANCE.channel);
 8001d8c:	f7fe bfa2 	b.w	8000cd4 <XMC_SPI_CH_DisableSlaveSelect>
 8001d90:	1ffe8844 	.word	0x1ffe8844
 8001d94:	0800e54c 	.word	0x0800e54c

08001d98 <GUI_SEGGERLIBRARY_WriteMultipleBytes>:
 *  This routine writes multiple bytes to display controller using SPI bus,
 *  with A0 = 1.
 *
 */
void GUI_SEGGERLIBRARY_WriteMultipleBytes(uint8_t *data, int numitems)
{
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
  /* Set the A0 pin*/
  XMC_GPIO_SetOutputHigh(IOHandle.portNo,IOHandle.pinNo);
#endif

  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel, SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);
 8001d9a:	4e12      	ldr	r6, [pc, #72]	; (8001de4 <GUI_SEGGERLIBRARY_WriteMultipleBytes+0x4c>)
{
  uint8_t datacopy;

#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
  /* Set the A0 pin*/
  XMC_GPIO_SetOutputHigh(IOHandle.portNo,IOHandle.pinNo);
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <GUI_SEGGERLIBRARY_WriteMultipleBytes+0x50>)
#endif

  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel, SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);
 8001d9e:	6872      	ldr	r2, [r6, #4]
 8001da0:	7a1c      	ldrb	r4, [r3, #8]
 8001da2:	6d17      	ldr	r7, [r2, #80]	; 0x50
{
  uint8_t datacopy;

#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
  /* Set the A0 pin*/
  XMC_GPIO_SetOutputHigh(IOHandle.portNo,IOHandle.pinNo);
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	2301      	movs	r3, #1
 8001da8:	40a3      	lsls	r3, r4
 *  This routine writes multiple bytes to display controller using SPI bus,
 *  with A0 = 1.
 *
 */
void GUI_SEGGERLIBRARY_WriteMultipleBytes(uint8_t *data, int numitems)
{
 8001daa:	4605      	mov	r5, r0
 8001dac:	460c      	mov	r4, r1
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
  /* Set the A0 pin*/
  XMC_GPIO_SetOutputHigh(IOHandle.portNo,IOHandle.pinNo);
#endif

  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel, SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);
 8001dae:	6830      	ldr	r0, [r6, #0]
 8001db0:	6053      	str	r3, [r2, #4]
 8001db2:	6939      	ldr	r1, [r7, #16]
 8001db4:	f7fe ff86 	bl	8000cc4 <XMC_SPI_CH_EnableSlaveSelect>
 8001db8:	6830      	ldr	r0, [r6, #0]
 8001dba:	3d01      	subs	r5, #1
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
  channel->PSCR |= flag;
 8001dbc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c

  do
  {
    datacopy = *data;
 8001dbe:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001dc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dc6:	64c3      	str	r3, [r0, #76]	; 0x4c
/* Sends one byte of data to the OLED through SPI */
void GUI_SEGGERLIBRARY_SendByte(uint8_t data)
{
  SPI_MASTER_ClearFlag(&SPI_INSTANCE, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION);

  XMC_SPI_CH_Transmit(SPI_INSTANCE.channel, (uint16_t)data, XMC_SPI_CH_MODE_STANDARD);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f7fe ff8d 	bl	8000ce8 <XMC_SPI_CH_Transmit>
 8001dce:	6830      	ldr	r0, [r6, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_ClearStatusFlag()
 */
__STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
  return channel->PSR_SSCMode;
 8001dd0:	6c83      	ldr	r3, [r0, #72]	; 0x48

  while(SPI_MASTER_GetFlagStatus(&SPI_INSTANCE, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION)!=
 8001dd2:	04db      	lsls	r3, r3, #19
 8001dd4:	d5fc      	bpl.n	8001dd0 <GUI_SEGGERLIBRARY_WriteMultipleBytes+0x38>
  do
  {
    datacopy = *data;
    GUI_SEGGERLIBRARY_SendByte(datacopy);
	data++;
  }while(--numitems);
 8001dd6:	3c01      	subs	r4, #1
 8001dd8:	d1f0      	bne.n	8001dbc <GUI_SEGGERLIBRARY_WriteMultipleBytes+0x24>

  XMC_SPI_CH_DisableSlaveSelect(SPI_INSTANCE.channel);
}
 8001dda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    datacopy = *data;
    GUI_SEGGERLIBRARY_SendByte(datacopy);
	data++;
  }while(--numitems);

  XMC_SPI_CH_DisableSlaveSelect(SPI_INSTANCE.channel);
 8001dde:	f7fe bf79 	b.w	8000cd4 <XMC_SPI_CH_DisableSlaveSelect>
 8001de2:	bf00      	nop
 8001de4:	1ffe8844 	.word	0x1ffe8844
 8001de8:	0800e54c 	.word	0x0800e54c

08001dec <GUI_SEGGERLIBRARY_ReadMultipleBytes>:
 *  This routine read multiple bytes from display controller using SPI bus,
 *  with A0 = 1.
 *
 */
void GUI_SEGGERLIBRARY_ReadMultipleBytes(uint8_t *data, int numitems)
{
 8001dec:	b430      	push	{r4, r5}
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
  XMC_GPIO_SetOutputHigh(IOHandle.portNo,IOHandle.pinNo);
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <GUI_SEGGERLIBRARY_ReadMultipleBytes+0x1c>)
 8001df0:	7a1d      	ldrb	r5, [r3, #8]
 8001df2:	685c      	ldr	r4, [r3, #4]
 8001df4:	2301      	movs	r3, #1
 8001df6:	40ab      	lsls	r3, r5
 *  This routine read multiple bytes from display controller using SPI bus,
 *  with A0 = 1.
 *
 */
void GUI_SEGGERLIBRARY_ReadMultipleBytes(uint8_t *data, int numitems)
{
 8001df8:	460a      	mov	r2, r1
 8001dfa:	6063      	str	r3, [r4, #4]
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
  XMC_GPIO_SetOutputHigh(IOHandle.portNo,IOHandle.pinNo);
#endif

  SPI_MASTER_Receive(&SPI_INSTANCE, data, numitems);
 8001dfc:	4601      	mov	r1, r0
}
 8001dfe:	bc30      	pop	{r4, r5}
{
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
  XMC_GPIO_SetOutputHigh(IOHandle.portNo,IOHandle.pinNo);
#endif

  SPI_MASTER_Receive(&SPI_INSTANCE, data, numitems);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <GUI_SEGGERLIBRARY_ReadMultipleBytes+0x20>)
 8001e02:	f7ff b98f 	b.w	8001124 <SPI_MASTER_Receive>
 8001e06:	bf00      	nop
 8001e08:	0800e54c 	.word	0x0800e54c
 8001e0c:	1ffe8844 	.word	0x1ffe8844

08001e10 <GLOBAL_CCU8_Init>:
/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8001e10:	7b43      	ldrb	r3, [r0, #13]
 8001e12:	b10b      	cbz	r3, 8001e18 <GLOBAL_CCU8_Init+0x8>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
}
 8001e14:	2000      	movs	r0, #0
 8001e16:	4770      	bx	lr
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8001e18:	b510      	push	{r4, lr}
 8001e1a:	4604      	mov	r4, r0
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 8001e1c:	6880      	ldr	r0, [r0, #8]
 8001e1e:	7b21      	ldrb	r1, [r4, #12]
 8001e20:	f7fe fdb6 	bl	8000990 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 8001e24:	68a2      	ldr	r2, [r4, #8]
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8001e26:	68d3      	ldr	r3, [r2, #12]
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8001e28:	2101      	movs	r1, #1
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2e:	60d3      	str	r3, [r2, #12]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
}
 8001e30:	2000      	movs	r0, #0
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8001e32:	7361      	strb	r1, [r4, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
}
 8001e34:	bd10      	pop	{r4, pc}
 8001e36:	bf00      	nop

08001e38 <GLOBAL_CCU4_Init>:
/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8001e38:	7b43      	ldrb	r3, [r0, #13]
 8001e3a:	b10b      	cbz	r3, 8001e40 <GLOBAL_CCU4_Init+0x8>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	4770      	bx	lr
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8001e40:	b510      	push	{r4, lr}
 8001e42:	4604      	mov	r4, r0
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8001e44:	6880      	ldr	r0, [r0, #8]
 8001e46:	7b21      	ldrb	r1, [r4, #12]
 8001e48:	f7fe fd28 	bl	800089c <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8001e4c:	68a2      	ldr	r2, [r4, #8]
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8001e4e:	68d3      	ldr	r3, [r2, #12]
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8001e50:	2101      	movs	r1, #1
 8001e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e56:	60d3      	str	r3, [r2, #12]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
 8001e58:	2000      	movs	r0, #0
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8001e5a:	7361      	strb	r1, [r4, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
 8001e5c:	bd10      	pop	{r4, pc}
 8001e5e:	bf00      	nop

08001e60 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001e60:	b510      	push	{r4, lr}
 8001e62:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
 8001e64:	f000 ff8e 	bl	8002d84 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f00b fe23 	bl	800dab4 <malloc>
 8001e6e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001e70:	f001 f834 	bl	8002edc <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 8001e74:	4620      	mov	r0, r4
 8001e76:	bd10      	pop	{r4, pc}

08001e78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
 8001e78:	b150      	cbz	r0, 8001e90 <vPortFree+0x18>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001e7a:	b510      	push	{r4, lr}
 8001e7c:	4604      	mov	r4, r0
	if( pv )
	{
		vTaskSuspendAll();
 8001e7e:	f000 ff81 	bl	8002d84 <vTaskSuspendAll>
		{
			free( pv );
 8001e82:	4620      	mov	r0, r4
 8001e84:	f00b fe1e 	bl	800dac4 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
	}
}
 8001e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vTaskSuspendAll();
		{
			free( pv );
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8001e8c:	f001 b826 	b.w	8002edc <xTaskResumeAll>
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop

08001e94 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e94:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e9c:	2200      	movs	r2, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e9e:	6081      	str	r1, [r0, #8]
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ea0:	e880 000c 	stmia.w	r0, {r2, r3}
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ea4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ea6:	6103      	str	r3, [r0, #16]
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop

08001eac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	6103      	str	r3, [r0, #16]
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop

08001eb4 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001eb4:	e890 000c 	ldmia.w	r0, {r2, r3}
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001eb8:	b410      	push	{r4}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001eba:	689c      	ldr	r4, [r3, #8]
 8001ebc:	608c      	str	r4, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ebe:	689c      	ldr	r4, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ec0:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001ec2:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ec4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ec6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 8001ec8:	f85d 4b04 	ldr.w	r4, [sp], #4

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ecc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001ece:	6002      	str	r2, [r0, #0]
}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop

08001ed4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ed4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ed6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ed8:	1c6b      	adds	r3, r5, #1
 8001eda:	d011      	beq.n	8001f00 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001edc:	f100 0208 	add.w	r2, r0, #8
 8001ee0:	e000      	b.n	8001ee4 <vListInsert+0x10>
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	6853      	ldr	r3, [r2, #4]
 8001ee6:	681c      	ldr	r4, [r3, #0]
 8001ee8:	42a5      	cmp	r5, r4
 8001eea:	d2fa      	bcs.n	8001ee2 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001eec:	6804      	ldr	r4, [r0, #0]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001eee:	604b      	str	r3, [r1, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001ef0:	3401      	adds	r4, #1
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ef2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ef4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ef6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ef8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001efa:	6004      	str	r4, [r0, #0]
}
 8001efc:	bc30      	pop	{r4, r5}
 8001efe:	4770      	bx	lr
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f00:	6902      	ldr	r2, [r0, #16]
 8001f02:	6853      	ldr	r3, [r2, #4]
 8001f04:	e7f2      	b.n	8001eec <vListInsert+0x18>
 8001f06:	bf00      	nop

08001f08 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f08:	6843      	ldr	r3, [r0, #4]
 8001f0a:	6881      	ldr	r1, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f0c:	6902      	ldr	r2, [r0, #16]
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f0e:	b410      	push	{r4}
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f10:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f12:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f14:	6854      	ldr	r4, [r2, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f16:	604b      	str	r3, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8001f18:	6813      	ldr	r3, [r2, #0]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f1a:	4284      	cmp	r4, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f1c:	bf08      	it	eq
 8001f1e:	6051      	streq	r1, [r2, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8001f20:	3b01      	subs	r3, #1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f22:	2100      	movs	r1, #0
 8001f24:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8001f26:	f85d 4b04 	ldr.w	r4, [sp], #4
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8001f2a:	6013      	str	r3, [r2, #0]

	return pxList->uxNumberOfItems;
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	4770      	bx	lr

08001f30 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <prvTaskExitError+0x2c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	3301      	adds	r3, #1
 8001f36:	d008      	beq.n	8001f4a <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f38:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001f3c:	f383 8811 	msr	BASEPRI, r3
 8001f40:	f3bf 8f6f 	isb	sy
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	e7fe      	b.n	8001f48 <prvTaskExitError+0x18>
 8001f4a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001f4e:	f383 8811 	msr	BASEPRI, r3
 8001f52:	f3bf 8f6f 	isb	sy
 8001f56:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	for( ;; );
 8001f5a:	e7fe      	b.n	8001f5a <prvTaskExitError+0x2a>
 8001f5c:	1ffe88f0 	.word	0x1ffe88f0

08001f60 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001f60:	4806      	ldr	r0, [pc, #24]	; (8001f7c <prvPortStartFirstTask+0x1c>)
 8001f62:	6800      	ldr	r0, [r0, #0]
 8001f64:	6800      	ldr	r0, [r0, #0]
 8001f66:	f380 8808 	msr	MSP, r0
 8001f6a:	b662      	cpsie	i
 8001f6c:	b661      	cpsie	f
 8001f6e:	f3bf 8f4f 	dsb	sy
 8001f72:	f3bf 8f6f 	isb	sy
 8001f76:	df00      	svc	0
 8001f78:	bf00      	nop
 8001f7a:	0000      	.short	0x0000
 8001f7c:	e000ed08 	.word	0xe000ed08

08001f80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001f80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001f90 <vPortEnableVFP+0x10>
 8001f84:	6801      	ldr	r1, [r0, #0]
 8001f86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001f8a:	6001      	str	r1, [r0, #0]
 8001f8c:	4770      	bx	lr
 8001f8e:	0000      	.short	0x0000
 8001f90:	e000ed88 	.word	0xe000ed88

08001f94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001f94:	b430      	push	{r4, r5}
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001f96:	f021 0101 	bic.w	r1, r1, #1

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001f9a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001f9e:	4c07      	ldr	r4, [pc, #28]	; (8001fbc <pxPortInitialiseStack+0x28>)
 8001fa0:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001fa4:	f06f 0302 	mvn.w	r3, #2
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001fa8:	f840 2c20 	str.w	r2, [r0, #-32]

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001fac:	e900 0022 	stmdb	r0, {r1, r5}
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001fb0:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8001fb4:	bc30      	pop	{r4, r5}
 8001fb6:	3844      	subs	r0, #68	; 0x44
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	08001f31 	.word	0x08001f31

08001fc0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <pxCurrentTCBConst2>)
 8001fc2:	6819      	ldr	r1, [r3, #0]
 8001fc4:	6808      	ldr	r0, [r1, #0]
 8001fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fca:	f380 8809 	msr	PSP, r0
 8001fce:	f3bf 8f6f 	isb	sy
 8001fd2:	f04f 0000 	mov.w	r0, #0
 8001fd6:	f380 8811 	msr	BASEPRI, r0
 8001fda:	4770      	bx	lr
 8001fdc:	f3af 8000 	nop.w

08001fe0 <pxCurrentTCBConst2>:
 8001fe0:	1ffe9b24 	.word	0x1ffe9b24
 8001fe4:	f3af 8000 	nop.w
 8001fe8:	f3af 8000 	nop.w
 8001fec:	f3af 8000 	nop.w

08001ff0 <vPortEnterCritical>:
 8001ff0:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8001ff4:	f383 8811 	msr	BASEPRI, r3
 8001ff8:	f3bf 8f6f 	isb	sy
 8001ffc:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <vPortEnterCritical+0x3c>)
 8002002:	6813      	ldr	r3, [r2, #0]
 8002004:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002006:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002008:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800200a:	d000      	beq.n	800200e <vPortEnterCritical+0x1e>
 800200c:	4770      	bx	lr
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <vPortEnterCritical+0x40>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002016:	d0f9      	beq.n	800200c <vPortEnterCritical+0x1c>
 8002018:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800201c:	f383 8811 	msr	BASEPRI, r3
 8002020:	f3bf 8f6f 	isb	sy
 8002024:	f3bf 8f4f 	dsb	sy
 8002028:	e7fe      	b.n	8002028 <vPortEnterCritical+0x38>
 800202a:	bf00      	nop
 800202c:	1ffe88f0 	.word	0x1ffe88f0
 8002030:	e000ed04 	.word	0xe000ed04

08002034 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8002034:	4a08      	ldr	r2, [pc, #32]	; (8002058 <vPortExitCritical+0x24>)
 8002036:	6813      	ldr	r3, [r2, #0]
 8002038:	b943      	cbnz	r3, 800204c <vPortExitCritical+0x18>
 800203a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800203e:	f383 8811 	msr	BASEPRI, r3
 8002042:	f3bf 8f6f 	isb	sy
 8002046:	f3bf 8f4f 	dsb	sy
 800204a:	e7fe      	b.n	800204a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800204c:	3b01      	subs	r3, #1
 800204e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002050:	b90b      	cbnz	r3, 8002056 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002052:	f383 8811 	msr	BASEPRI, r3
 8002056:	4770      	bx	lr
 8002058:	1ffe88f0 	.word	0x1ffe88f0
 800205c:	00000000 	.word	0x00000000

08002060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002060:	f3ef 8009 	mrs	r0, PSP
 8002064:	f3bf 8f6f 	isb	sy
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <pxCurrentTCBConst>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	f01e 0f10 	tst.w	lr, #16
 8002070:	bf08      	it	eq
 8002072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800207a:	6010      	str	r0, [r2, #0]
 800207c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002080:	f04f 00fc 	mov.w	r0, #252	; 0xfc
 8002084:	f380 8811 	msr	BASEPRI, r0
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	f3bf 8f6f 	isb	sy
 8002090:	f001 f83a 	bl	8003108 <vTaskSwitchContext>
 8002094:	f04f 0000 	mov.w	r0, #0
 8002098:	f380 8811 	msr	BASEPRI, r0
 800209c:	bc08      	pop	{r3}
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	6808      	ldr	r0, [r1, #0]
 80020a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020a6:	f01e 0f10 	tst.w	lr, #16
 80020aa:	bf08      	it	eq
 80020ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80020b0:	f380 8809 	msr	PSP, r0
 80020b4:	f3bf 8f6f 	isb	sy
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	f3af 8000 	nop.w

080020c0 <pxCurrentTCBConst>:
 80020c0:	1ffe9b24 	.word	0x1ffe9b24
 80020c4:	f3af 8000 	nop.w
 80020c8:	f3af 8000 	nop.w
 80020cc:	f3af 8000 	nop.w

080020d0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80020d0:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020d2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80020d6:	f383 8811 	msr	BASEPRI, r3
 80020da:	f3bf 8f6f 	isb	sy
 80020de:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80020e2:	f000 fe5d 	bl	8002da0 <xTaskIncrementTick>
 80020e6:	b118      	cbz	r0, 80020f0 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <SysTick_Handler+0x28>)
 80020ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ee:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80020f0:	2300      	movs	r3, #0
 80020f2:	f383 8811 	msr	BASEPRI, r3
 80020f6:	bd08      	pop	{r3, pc}
 80020f8:	e000ed04 	.word	0xe000ed04

080020fc <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <vPortSetupTimerInterrupt+0x1c>)
 80020fe:	4907      	ldr	r1, [pc, #28]	; (800211c <vPortSetupTimerInterrupt+0x20>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4807      	ldr	r0, [pc, #28]	; (8002120 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <vPortSetupTimerInterrupt+0x28>)
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002106:	fba1 1303 	umull	r1, r3, r1, r3
 800210a:	099b      	lsrs	r3, r3, #6
 800210c:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800210e:	2107      	movs	r1, #7
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002110:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002112:	6011      	str	r1, [r2, #0]
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	2003ffc0 	.word	0x2003ffc0
 800211c:	10624dd3 	.word	0x10624dd3
 8002120:	e000e014 	.word	0xe000e014
 8002124:	e000e010 	.word	0xe000e010

08002128 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002128:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <xPortStartScheduler+0xc8>)
 800212a:	4a32      	ldr	r2, [pc, #200]	; (80021f4 <xPortStartScheduler+0xcc>)
 800212c:	6819      	ldr	r1, [r3, #0]
 800212e:	4291      	cmp	r1, r2
 8002130:	d04c      	beq.n	80021cc <xPortStartScheduler+0xa4>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <xPortStartScheduler+0xd0>)
 8002136:	429a      	cmp	r2, r3
 8002138:	d051      	beq.n	80021de <xPortStartScheduler+0xb6>

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800213a:	b510      	push	{r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800213c:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <xPortStartScheduler+0xd4>)

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800213e:	4c30      	ldr	r4, [pc, #192]	; (8002200 <xPortStartScheduler+0xd8>)
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002140:	781a      	ldrb	r2, [r3, #0]
		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002142:	4830      	ldr	r0, [pc, #192]	; (8002204 <xPortStartScheduler+0xdc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002144:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002146:	b2d2      	uxtb	r2, r2

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002148:	21ff      	movs	r1, #255	; 0xff
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800214a:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800214c:	7019      	strb	r1, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002156:	f89d 2003 	ldrb.w	r2, [sp, #3]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800215a:	f89d 1003 	ldrb.w	r1, [sp, #3]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800215e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002162:	2307      	movs	r3, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002164:	0609      	lsls	r1, r1, #24

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002166:	7022      	strb	r2, [r4, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002168:	6003      	str	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800216a:	d50e      	bpl.n	800218a <xPortStartScheduler+0x62>
 800216c:	2306      	movs	r3, #6
 800216e:	e000      	b.n	8002172 <xPortStartScheduler+0x4a>
 8002170:	460b      	mov	r3, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002172:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002176:	0052      	lsls	r2, r2, #1
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	f88d 2003 	strb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800217e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002182:	0612      	lsls	r2, r2, #24
 8002184:	f103 31ff 	add.w	r1, r3, #4294967295
 8002188:	d4f2      	bmi.n	8002170 <xPortStartScheduler+0x48>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800218a:	9901      	ldr	r1, [sp, #4]
 800218c:	4c1b      	ldr	r4, [pc, #108]	; (80021fc <xPortStartScheduler+0xd4>)
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800218e:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <xPortStartScheduler+0xe0>)
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002190:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002192:	b2c9      	uxtb	r1, r1
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002194:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002198:	6003      	str	r3, [r0, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800219a:	7021      	strb	r1, [r4, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800219c:	6813      	ldr	r3, [r2, #0]
 800219e:	f443 037c 	orr.w	r3, r3, #16515072	; 0xfc0000
 80021a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80021a4:	6813      	ldr	r3, [r2, #0]
 80021a6:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 80021aa:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80021ac:	f7ff ffa6 	bl	80020fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <xPortStartScheduler+0xe4>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80021b6:	f7ff fee3 	bl	8001f80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80021ba:	4a15      	ldr	r2, [pc, #84]	; (8002210 <xPortStartScheduler+0xe8>)
 80021bc:	6813      	ldr	r3, [r2, #0]
 80021be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80021c2:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80021c4:	f7ff fecc 	bl	8001f60 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80021c8:	f7ff feb2 	bl	8001f30 <prvTaskExitError>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021cc:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80021d0:	f383 8811 	msr	BASEPRI, r3
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	f3bf 8f4f 	dsb	sy
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80021dc:	e7fe      	b.n	80021dc <xPortStartScheduler+0xb4>
 80021de:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80021e2:	f383 8811 	msr	BASEPRI, r3
 80021e6:	f3bf 8f6f 	isb	sy
 80021ea:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80021ee:	e7fe      	b.n	80021ee <xPortStartScheduler+0xc6>
 80021f0:	e000ed00 	.word	0xe000ed00
 80021f4:	410fc271 	.word	0x410fc271
 80021f8:	410fc270 	.word	0x410fc270
 80021fc:	e000e400 	.word	0xe000e400
 8002200:	1ffe9a78 	.word	0x1ffe9a78
 8002204:	1ffe9a7c 	.word	0x1ffe9a7c
 8002208:	e000ed20 	.word	0xe000ed20
 800220c:	1ffe88f0 	.word	0x1ffe88f0
 8002210:	e000ef34 	.word	0xe000ef34

08002214 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002214:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d90e      	bls.n	800223a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800221c:	4910      	ldr	r1, [pc, #64]	; (8002260 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800221e:	4a11      	ldr	r2, [pc, #68]	; (8002264 <vPortValidateInterruptPriority+0x50>)

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002220:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002222:	7812      	ldrb	r2, [r2, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d908      	bls.n	800223a <vPortValidateInterruptPriority+0x26>
 8002228:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800222c:	f383 8811 	msr	BASEPRI, r3
 8002230:	f3bf 8f6f 	isb	sy
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	e7fe      	b.n	8002238 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <vPortValidateInterruptPriority+0x54>)
 800223c:	4a0b      	ldr	r2, [pc, #44]	; (800226c <vPortValidateInterruptPriority+0x58>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002246:	4293      	cmp	r3, r2
 8002248:	d908      	bls.n	800225c <vPortValidateInterruptPriority+0x48>
 800224a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800224e:	f383 8811 	msr	BASEPRI, r3
 8002252:	f3bf 8f6f 	isb	sy
 8002256:	f3bf 8f4f 	dsb	sy
 800225a:	e7fe      	b.n	800225a <vPortValidateInterruptPriority+0x46>
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000e3f0 	.word	0xe000e3f0
 8002264:	1ffe9a78 	.word	0x1ffe9a78
 8002268:	e000ed0c 	.word	0xe000ed0c
 800226c:	1ffe9a7c 	.word	0x1ffe9a7c

08002270 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002274:	6c02      	ldr	r2, [r0, #64]	; 0x40
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002276:	6b85      	ldr	r5, [r0, #56]	; 0x38

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002278:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800227a:	b932      	cbnz	r2, 800228a <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800227c:	6806      	ldr	r6, [r0, #0]
 800227e:	bb3e      	cbnz	r6, 80022d0 <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002280:	6840      	ldr	r0, [r0, #4]
 8002282:	f001 f93f 	bl	8003504 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002286:	6066      	str	r6, [r4, #4]
 8002288:	e029      	b.n	80022de <prvCopyDataToQueue+0x6e>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800228a:	b96e      	cbnz	r6, 80022a8 <prvCopyDataToQueue+0x38>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800228c:	6880      	ldr	r0, [r0, #8]
 800228e:	f00b fc21 	bl	800dad4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002292:	68a1      	ldr	r1, [r4, #8]
 8002294:	6c23      	ldr	r3, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002296:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002298:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800229a:	4293      	cmp	r3, r2
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800229c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800229e:	d319      	bcc.n	80022d4 <prvCopyDataToQueue+0x64>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 80022a4:	4630      	mov	r0, r6
 80022a6:	e01a      	b.n	80022de <prvCopyDataToQueue+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022a8:	68c0      	ldr	r0, [r0, #12]
 80022aa:	f00b fc13 	bl	800dad4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80022ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022b0:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022b2:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80022b4:	425b      	negs	r3, r3
 80022b6:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022b8:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80022ba:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022bc:	d202      	bcs.n	80022c4 <prvCopyDataToQueue+0x54>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80022be:	6862      	ldr	r2, [r4, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80022c4:	2e02      	cmp	r6, #2
 80022c6:	d107      	bne.n	80022d8 <prvCopyDataToQueue+0x68>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022c8:	b145      	cbz	r5, 80022dc <prvCopyDataToQueue+0x6c>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80022ca:	3d01      	subs	r5, #1
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 80022cc:	2000      	movs	r0, #0
 80022ce:	e006      	b.n	80022de <prvCopyDataToQueue+0x6e>
 80022d0:	4610      	mov	r0, r2
 80022d2:	e004      	b.n	80022de <prvCopyDataToQueue+0x6e>
 80022d4:	4630      	mov	r0, r6
 80022d6:	e002      	b.n	80022de <prvCopyDataToQueue+0x6e>
 80022d8:	2000      	movs	r0, #0
 80022da:	e000      	b.n	80022de <prvCopyDataToQueue+0x6e>
 80022dc:	4628      	mov	r0, r5
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80022de:	3501      	adds	r5, #1
 80022e0:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 80022e2:	bd70      	pop	{r4, r5, r6, pc}

080022e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80022e4:	6c02      	ldr	r2, [r0, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80022e6:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80022e8:	b17a      	cbz	r2, 800230a <prvCopyDataFromQueue+0x26>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80022ea:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80022ec:	68c4      	ldr	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80022ee:	6840      	ldr	r0, [r0, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80022f0:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80022f2:	4284      	cmp	r4, r0
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80022f4:	bf28      	it	cs
 80022f6:	6818      	ldrcs	r0, [r3, #0]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80022f8:	60dc      	str	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80022fa:	bf28      	it	cs
 80022fc:	60d8      	strcs	r0, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 80022fe:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002302:	4608      	mov	r0, r1
 8002304:	68d9      	ldr	r1, [r3, #12]
 8002306:	f00b bbe5 	b.w	800dad4 <memcpy>
 800230a:	4770      	bx	lr

0800230c <prvNotifyQueueSetContainer.part.0>:
 800230c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002310:	f383 8811 	msr	BASEPRI, r3
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	e7fe      	b.n	800231c <prvNotifyQueueSetContainer.part.0+0x10>
 800231e:	bf00      	nop

08002320 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8002320:	b570      	push	{r4, r5, r6, lr}
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002322:	6c84      	ldr	r4, [r0, #72]	; 0x48
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8002324:	b082      	sub	sp, #8
 8002326:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8002328:	b1a4      	cbz	r4, 8002354 <prvNotifyQueueSetContainer+0x34>
 800232a:	460a      	mov	r2, r1
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 800232c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800232e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002330:	4299      	cmp	r1, r3
 8002332:	d308      	bcc.n	8002346 <prvNotifyQueueSetContainer+0x26>
 8002334:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	e7fe      	b.n	8002344 <prvNotifyQueueSetContainer+0x24>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002346:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002348:	428b      	cmp	r3, r1
 800234a:	d805      	bhi.n	8002358 <prvNotifyQueueSetContainer+0x38>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
 800234c:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 800234e:	4630      	mov	r0, r6
 8002350:	b002      	add	sp, #8
 8002352:	bd70      	pop	{r4, r5, r6, pc}
 8002354:	f7ff ffda 	bl	800230c <prvNotifyQueueSetContainer.part.0>
		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002358:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 800235c:	4620      	mov	r0, r4
 800235e:	a901      	add	r1, sp, #4
 8002360:	f7ff ff86 	bl	8002270 <prvCopyDataToQueue>
		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002364:	b2ed      	uxtb	r5, r5
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );

			if( cTxLock == queueUNLOCKED )
 8002366:	2dff      	cmp	r5, #255	; 0xff
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8002368:	4606      	mov	r6, r0

			if( cTxLock == queueUNLOCKED )
 800236a:	d006      	beq.n	800237a <prvNotifyQueueSetContainer+0x5a>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800236c:	1c6b      	adds	r3, r5, #1
 800236e:	b2db      	uxtb	r3, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8002370:	4630      	mov	r0, r6
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002372:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8002376:	b002      	add	sp, #8
 8002378:	bd70      	pop	{r4, r5, r6, pc}
			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );

			if( cTxLock == queueUNLOCKED )
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 800237a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0e6      	beq.n	800234e <prvNotifyQueueSetContainer+0x2e>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002380:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002384:	f000 ffb0 	bl	80032e8 <xTaskRemoveFromEventList>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8002388:	2800      	cmp	r0, #0
 800238a:	bf18      	it	ne
 800238c:	2601      	movne	r6, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 800238e:	4630      	mov	r0, r6
 8002390:	b002      	add	sp, #8
 8002392:	bd70      	pop	{r4, r5, r6, pc}

08002394 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002398:	4604      	mov	r4, r0
 800239a:	b083      	sub	sp, #12

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800239c:	f7ff fe28 	bl	8001ff0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80023a0:	f894 7045 	ldrb.w	r7, [r4, #69]	; 0x45
 80023a4:	b2ff      	uxtb	r7, r7

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023a6:	b27b      	sxtb	r3, r7
 80023a8:	2b00      	cmp	r3, #0
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023aa:	bfc8      	it	gt
 80023ac:	f104 0824 	addgt.w	r8, r4, #36	; 0x24
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023b0:	dd18      	ble.n	80023e4 <prvUnlockQueue+0x50>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 80023b2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80023b4:	2d00      	cmp	r5, #0
 80023b6:	d03c      	beq.n	8002432 <prvUnlockQueue+0x9e>
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80023b8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80023ba:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80023bc:	9401      	str	r4, [sp, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d308      	bcc.n	80023d4 <prvUnlockQueue+0x40>
 80023c2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	e7fe      	b.n	80023d2 <prvUnlockQueue+0x3e>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80023d4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d836      	bhi.n	8002448 <prvUnlockQueue+0xb4>
 80023da:	1e7b      	subs	r3, r7, #1
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	b2df      	uxtb	r7, r3
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1e6      	bne.n	80023b2 <prvUnlockQueue+0x1e>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80023e4:	23ff      	movs	r3, #255	; 0xff
 80023e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80023ea:	f7ff fe23 	bl	8002034 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80023ee:	f7ff fdff 	bl	8001ff0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80023f2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80023f6:	b2ed      	uxtb	r5, r5

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023f8:	b26b      	sxtb	r3, r5
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	dd11      	ble.n	8002422 <prvUnlockQueue+0x8e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023fe:	6923      	ldr	r3, [r4, #16]
 8002400:	b17b      	cbz	r3, 8002422 <prvUnlockQueue+0x8e>
 8002402:	f104 0610 	add.w	r6, r4, #16
 8002406:	e001      	b.n	800240c <prvUnlockQueue+0x78>
 8002408:	6923      	ldr	r3, [r4, #16]
 800240a:	b153      	cbz	r3, 8002422 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800240c:	4630      	mov	r0, r6
 800240e:	f000 ff6b 	bl	80032e8 <xTaskRemoveFromEventList>
 8002412:	b108      	cbz	r0, 8002418 <prvUnlockQueue+0x84>
				{
					vTaskMissedYield();
 8002414:	f001 f812 	bl	800343c <vTaskMissedYield>
 8002418:	3d01      	subs	r5, #1
 800241a:	b2eb      	uxtb	r3, r5
 800241c:	b2dd      	uxtb	r5, r3
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f2      	bne.n	8002408 <prvUnlockQueue+0x74>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002422:	23ff      	movs	r3, #255	; 0xff
 8002424:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002428:	f7ff fe04 	bl	8002034 <vPortExitCritical>
}
 800242c:	b003      	add	sp, #12
 800242e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0d5      	beq.n	80023e4 <prvUnlockQueue+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002438:	4640      	mov	r0, r8
 800243a:	f000 ff55 	bl	80032e8 <xTaskRemoveFromEventList>
 800243e:	2800      	cmp	r0, #0
 8002440:	d0cb      	beq.n	80023da <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8002442:	f000 fffb 	bl	800343c <vTaskMissedYield>
 8002446:	e7c8      	b.n	80023da <prvUnlockQueue+0x46>
		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002448:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 800244c:	4628      	mov	r0, r5
 800244e:	a901      	add	r1, sp, #4
 8002450:	2200      	movs	r2, #0
 8002452:	f7ff ff0d 	bl	8002270 <prvCopyDataToQueue>
		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002456:	b2f6      	uxtb	r6, r6
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );

			if( cTxLock == queueUNLOCKED )
 8002458:	2eff      	cmp	r6, #255	; 0xff
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 800245a:	4681      	mov	r9, r0

			if( cTxLock == queueUNLOCKED )
 800245c:	d007      	beq.n	800246e <prvUnlockQueue+0xda>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800245e:	1c73      	adds	r3, r6, #1
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 8002466:	f1b9 0f00 	cmp.w	r9, #0
 800246a:	d1ea      	bne.n	8002442 <prvUnlockQueue+0xae>
 800246c:	e7b5      	b.n	80023da <prvUnlockQueue+0x46>
			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );

			if( cTxLock == queueUNLOCKED )
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 800246e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f8      	beq.n	8002466 <prvUnlockQueue+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002474:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002478:	f000 ff36 	bl	80032e8 <xTaskRemoveFromEventList>
 800247c:	2800      	cmp	r0, #0
 800247e:	d0f2      	beq.n	8002466 <prvUnlockQueue+0xd2>
 8002480:	e7df      	b.n	8002442 <prvUnlockQueue+0xae>
 8002482:	bf00      	nop

08002484 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002486:	4606      	mov	r6, r0
 8002488:	b940      	cbnz	r0, 800249c <xQueueGenericCreate+0x18>
 800248a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800248e:	f383 8811 	msr	BASEPRI, r3
 8002492:	f3bf 8f6f 	isb	sy
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	e7fe      	b.n	800249a <xQueueGenericCreate+0x16>
 800249c:	460f      	mov	r7, r1
 800249e:	4615      	mov	r5, r2

		if( uxItemSize == ( UBaseType_t ) 0 )
 80024a0:	b151      	cbz	r1, 80024b8 <xQueueGenericCreate+0x34>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024a2:	fb01 f000 	mul.w	r0, r1, r0
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80024a6:	3054      	adds	r0, #84	; 0x54
 80024a8:	f7ff fcda 	bl	8001e60 <pvPortMalloc>

		if( pxNewQueue != NULL )
 80024ac:	4604      	mov	r4, r0
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80024ae:	f100 0354 	add.w	r3, r0, #84	; 0x54
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );

		if( pxNewQueue != NULL )
 80024b2:	b938      	cbnz	r0, 80024c4 <xQueueGenericCreate+0x40>

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
 80024b4:	4620      	mov	r0, r4
 80024b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80024b8:	2054      	movs	r0, #84	; 0x54
 80024ba:	f7ff fcd1 	bl	8001e60 <pvPortMalloc>

		if( pxNewQueue != NULL )
 80024be:	4604      	mov	r4, r0
 80024c0:	4603      	mov	r3, r0
 80024c2:	b318      	cbz	r0, 800250c <xQueueGenericCreate+0x88>
 80024c4:	6023      	str	r3, [r4, #0]
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024c6:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024c8:	6427      	str	r7, [r4, #64]	; 0x40
{
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 80024ca:	f7ff fd91 	bl	8001ff0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024d2:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024d4:	60a1      	str	r1, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024d6:	fb03 f302 	mul.w	r3, r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80024da:	1a9a      	subs	r2, r3, r2
 80024dc:	440a      	add	r2, r1

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024de:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024e0:	2600      	movs	r6, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 80024e2:	21ff      	movs	r1, #255	; 0xff
	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80024e4:	60e2      	str	r2, [r4, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024e6:	6063      	str	r3, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024e8:	63a6      	str	r6, [r4, #56]	; 0x38
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024ea:	f104 0010 	add.w	r0, r4, #16
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 80024ee:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80024f2:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024f6:	f7ff fccd 	bl	8001e94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80024fe:	f7ff fcc9 	bl	8001e94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002502:	f7ff fd97 	bl	8002034 <vPortExitCritical>
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8002506:	64a6      	str	r6, [r4, #72]	; 0x48
	pxNewQueue->uxItemSize = uxItemSize;
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002508:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
 800250c:	4620      	mov	r0, r4
 800250e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002510 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002518:	2800      	cmp	r0, #0
 800251a:	f000 80be 	beq.w	800269a <xQueueGenericSend+0x18a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800251e:	2900      	cmp	r1, #0
 8002520:	f000 80ae 	beq.w	8002680 <xQueueGenericSend+0x170>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002524:	2b02      	cmp	r3, #2
 8002526:	f000 809e 	beq.w	8002666 <xQueueGenericSend+0x156>
 800252a:	4604      	mov	r4, r0
 800252c:	461e      	mov	r6, r3
 800252e:	4688      	mov	r8, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002530:	f000 ff8a 	bl	8003448 <xTaskGetSchedulerState>
 8002534:	b950      	cbnz	r0, 800254c <xQueueGenericSend+0x3c>
 8002536:	9f01      	ldr	r7, [sp, #4]
 8002538:	b14f      	cbz	r7, 800254e <xQueueGenericSend+0x3e>
 800253a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800253e:	f383 8811 	msr	BASEPRI, r3
 8002542:	f3bf 8f6f 	isb	sy
 8002546:	f3bf 8f4f 	dsb	sy
 800254a:	e7fe      	b.n	800254a <xQueueGenericSend+0x3a>
 800254c:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800254e:	f7ff fd4f 	bl	8001ff0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002552:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002554:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8002556:	f8df a154 	ldr.w	sl, [pc, #340]	; 80026ac <xQueueGenericSend+0x19c>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800255a:	429a      	cmp	r2, r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 800255c:	f04f 0900 	mov.w	r9, #0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002560:	d24a      	bcs.n	80025f8 <xQueueGenericSend+0xe8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002562:	4641      	mov	r1, r8
 8002564:	4620      	mov	r0, r4
 8002566:	4632      	mov	r2, r6
 8002568:	f7ff fe82 	bl	8002270 <prvCopyDataToQueue>

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 800256c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800256e:	2b00      	cmp	r3, #0
 8002570:	d066      	beq.n	8002640 <xQueueGenericSend+0x130>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8002572:	4620      	mov	r0, r4
 8002574:	4631      	mov	r1, r6
 8002576:	f7ff fed3 	bl	8002320 <prvNotifyQueueSetContainer>
 800257a:	b138      	cbz	r0, 800258c <xQueueGenericSend+0x7c>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 800257c:	4b4b      	ldr	r3, [pc, #300]	; (80026ac <xQueueGenericSend+0x19c>)
 800257e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800258c:	f7ff fd52 	bl	8002034 <vPortExitCritical>
				return pdPASS;
 8002590:	2001      	movs	r0, #1
 8002592:	e052      	b.n	800263a <xQueueGenericSend+0x12a>
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002594:	a802      	add	r0, sp, #8
 8002596:	f000 feeb 	bl	8003370 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800259a:	f7ff fd4b 	bl	8002034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800259e:	f000 fbf1 	bl	8002d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025a2:	f7ff fd25 	bl	8001ff0 <vPortEnterCritical>
 80025a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80025aa:	2bff      	cmp	r3, #255	; 0xff
 80025ac:	bf08      	it	eq
 80025ae:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 80025b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80025b6:	2bff      	cmp	r3, #255	; 0xff
 80025b8:	bf08      	it	eq
 80025ba:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 80025be:	f7ff fd39 	bl	8002034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025c2:	a802      	add	r0, sp, #8
 80025c4:	a901      	add	r1, sp, #4
 80025c6:	f000 fee9 	bl	800339c <xTaskCheckForTimeOut>
 80025ca:	2800      	cmp	r0, #0
 80025cc:	d13d      	bne.n	800264a <xQueueGenericSend+0x13a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025ce:	f7ff fd0f 	bl	8001ff0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80025d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80025d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d015      	beq.n	8002606 <xQueueGenericSend+0xf6>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80025da:	f7ff fd2b 	bl	8002034 <vPortExitCritical>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025de:	4620      	mov	r0, r4
 80025e0:	f7ff fed8 	bl	8002394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025e4:	f000 fc7a 	bl	8002edc <xTaskResumeAll>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025e8:	f7ff fd02 	bl	8001ff0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80025ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025f0:	429a      	cmp	r2, r3
 80025f2:	f04f 0701 	mov.w	r7, #1
 80025f6:	d3b4      	bcc.n	8002562 <xQueueGenericSend+0x52>
 80025f8:	2e02      	cmp	r6, #2
 80025fa:	d0b2      	beq.n	8002562 <xQueueGenericSend+0x52>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025fc:	9d01      	ldr	r5, [sp, #4]
 80025fe:	b1cd      	cbz	r5, 8002634 <xQueueGenericSend+0x124>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
 8002600:	2f00      	cmp	r7, #0
 8002602:	d1ca      	bne.n	800259a <xQueueGenericSend+0x8a>
 8002604:	e7c6      	b.n	8002594 <xQueueGenericSend+0x84>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002606:	f7ff fd15 	bl	8002034 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800260a:	f104 0010 	add.w	r0, r4, #16
 800260e:	9901      	ldr	r1, [sp, #4]
 8002610:	f000 fdb2 	bl	8003178 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002614:	4620      	mov	r0, r4
 8002616:	f7ff febd 	bl	8002394 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800261a:	f000 fc5f 	bl	8002edc <xTaskResumeAll>
 800261e:	2800      	cmp	r0, #0
 8002620:	d1e2      	bne.n	80025e8 <xQueueGenericSend+0xd8>
				{
					portYIELD_WITHIN_API();
 8002622:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002626:	f8ca 3000 	str.w	r3, [sl]
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	e7d9      	b.n	80025e8 <xQueueGenericSend+0xd8>
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002634:	f7ff fcfe 	bl	8002034 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002638:	4628      	mov	r0, r5

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
 800263a:	b004      	add	sp, #16
 800263c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002642:	b94b      	cbnz	r3, 8002658 <xQueueGenericSend+0x148>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8002644:	2800      	cmp	r0, #0
 8002646:	d199      	bne.n	800257c <xQueueGenericSend+0x6c>
 8002648:	e7a0      	b.n	800258c <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800264a:	4620      	mov	r0, r4
 800264c:	f7ff fea2 	bl	8002394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002650:	f000 fc44 	bl	8002edc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002654:	2000      	movs	r0, #0
 8002656:	e7f0      	b.n	800263a <xQueueGenericSend+0x12a>
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002658:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800265c:	f000 fe44 	bl	80032e8 <xTaskRemoveFromEventList>
 8002660:	2800      	cmp	r0, #0
 8002662:	d18b      	bne.n	800257c <xQueueGenericSend+0x6c>
 8002664:	e792      	b.n	800258c <xQueueGenericSend+0x7c>
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002666:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002668:	2a01      	cmp	r2, #1
 800266a:	f43f af5e 	beq.w	800252a <xQueueGenericSend+0x1a>
 800266e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	e7fe      	b.n	800267e <xQueueGenericSend+0x16e>
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002680:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002682:	2a00      	cmp	r2, #0
 8002684:	f43f af4e 	beq.w	8002524 <xQueueGenericSend+0x14>
 8002688:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	e7fe      	b.n	8002698 <xQueueGenericSend+0x188>
 800269a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800269e:	f383 8811 	msr	BASEPRI, r3
 80026a2:	f3bf 8f6f 	isb	sy
 80026a6:	f3bf 8f4f 	dsb	sy
{
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80026aa:	e7fe      	b.n	80026aa <xQueueGenericSend+0x19a>
 80026ac:	e000ed04 	.word	0xe000ed04

080026b0 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80026b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80026b4:	b1f0      	cbz	r0, 80026f4 <xQueueGenericSendFromISR+0x44>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026b6:	2900      	cmp	r1, #0
 80026b8:	d041      	beq.n	800273e <xQueueGenericSendFromISR+0x8e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d033      	beq.n	8002726 <xQueueGenericSendFromISR+0x76>
 80026be:	4604      	mov	r4, r0
 80026c0:	461f      	mov	r7, r3
 80026c2:	4690      	mov	r8, r2
 80026c4:	4689      	mov	r9, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026c6:	f7ff fda5 	bl	8002214 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026ca:	f3ef 8611 	mrs	r6, BASEPRI
 80026ce:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80026e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d30f      	bcc.n	8002706 <xQueueGenericSendFromISR+0x56>
 80026e6:	2f02      	cmp	r7, #2
 80026e8:	d00d      	beq.n	8002706 <xQueueGenericSendFromISR+0x56>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026ea:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026ec:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 80026f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026f4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002704:	e7fe      	b.n	8002704 <xQueueGenericSendFromISR+0x54>
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002706:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800270a:	4649      	mov	r1, r9
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800270c:	b2ed      	uxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800270e:	4620      	mov	r0, r4
 8002710:	463a      	mov	r2, r7
 8002712:	f7ff fdad 	bl	8002270 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002716:	2dff      	cmp	r5, #255	; 0xff
 8002718:	d01d      	beq.n	8002756 <xQueueGenericSendFromISR+0xa6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800271a:	1c6b      	adds	r3, r5, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002722:	2001      	movs	r0, #1
 8002724:	e7e2      	b.n	80026ec <xQueueGenericSendFromISR+0x3c>
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002726:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002728:	2c01      	cmp	r4, #1
 800272a:	d0c8      	beq.n	80026be <xQueueGenericSendFromISR+0xe>
 800272c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	e7fe      	b.n	800273c <xQueueGenericSendFromISR+0x8c>
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800273e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002740:	2c00      	cmp	r4, #0
 8002742:	d0ba      	beq.n	80026ba <xQueueGenericSendFromISR+0xa>
 8002744:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	e7fe      	b.n	8002754 <xQueueGenericSendFromISR+0xa4>
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8002756:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002758:	b163      	cbz	r3, 8002774 <xQueueGenericSendFromISR+0xc4>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 800275a:	4620      	mov	r0, r4
 800275c:	4639      	mov	r1, r7
 800275e:	f7ff fddf 	bl	8002320 <prvNotifyQueueSetContainer>
 8002762:	2800      	cmp	r0, #0
 8002764:	d0dd      	beq.n	8002722 <xQueueGenericSendFromISR+0x72>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002766:	f1b8 0f00 	cmp.w	r8, #0
 800276a:	d0da      	beq.n	8002722 <xQueueGenericSendFromISR+0x72>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800276c:	2001      	movs	r0, #1
 800276e:	f8c8 0000 	str.w	r0, [r8]
 8002772:	e7bb      	b.n	80026ec <xQueueGenericSendFromISR+0x3c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0d3      	beq.n	8002722 <xQueueGenericSendFromISR+0x72>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800277a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800277e:	f000 fdb3 	bl	80032e8 <xTaskRemoveFromEventList>
 8002782:	2800      	cmp	r0, #0
 8002784:	d1ef      	bne.n	8002766 <xQueueGenericSendFromISR+0xb6>
 8002786:	e7cc      	b.n	8002722 <xQueueGenericSendFromISR+0x72>

08002788 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8002788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002790:	2800      	cmp	r0, #0
 8002792:	f000 80c4 	beq.w	800291e <xQueueGenericReceive+0x196>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002796:	2900      	cmp	r1, #0
 8002798:	f000 808c 	beq.w	80028b4 <xQueueGenericReceive+0x12c>
 800279c:	4604      	mov	r4, r0
 800279e:	4698      	mov	r8, r3
 80027a0:	460f      	mov	r7, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027a2:	f000 fe51 	bl	8003448 <xTaskGetSchedulerState>
 80027a6:	b950      	cbnz	r0, 80027be <xQueueGenericReceive+0x36>
 80027a8:	9d01      	ldr	r5, [sp, #4]
 80027aa:	b14d      	cbz	r5, 80027c0 <xQueueGenericReceive+0x38>
 80027ac:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	e7fe      	b.n	80027bc <xQueueGenericReceive+0x34>
 80027be:	2500      	movs	r5, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80027c0:	f7ff fc16 	bl	8001ff0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027c4:	6ba6      	ldr	r6, [r4, #56]	; 0x38

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 80027c6:	f8df a168 	ldr.w	sl, [pc, #360]	; 8002930 <xQueueGenericReceive+0x1a8>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 80027ca:	f04f 0900 	mov.w	r9, #0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027ce:	2e00      	cmp	r6, #0
 80027d0:	d144      	bne.n	800285c <xQueueGenericReceive+0xd4>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027d2:	9b01      	ldr	r3, [sp, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8082 	beq.w	80028de <xQueueGenericReceive+0x156>
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
 80027da:	b915      	cbnz	r5, 80027e2 <xQueueGenericReceive+0x5a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80027dc:	a802      	add	r0, sp, #8
 80027de:	f000 fdc7 	bl	8003370 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027e2:	f7ff fc27 	bl	8002034 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027e6:	f000 facd 	bl	8002d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027ea:	f7ff fc01 	bl	8001ff0 <vPortEnterCritical>
 80027ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80027f2:	2bff      	cmp	r3, #255	; 0xff
 80027f4:	bf08      	it	eq
 80027f6:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 80027fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80027fe:	2bff      	cmp	r3, #255	; 0xff
 8002800:	bf08      	it	eq
 8002802:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8002806:	f7ff fc15 	bl	8002034 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800280a:	a802      	add	r0, sp, #8
 800280c:	a901      	add	r1, sp, #4
 800280e:	f000 fdc5 	bl	800339c <xTaskCheckForTimeOut>
 8002812:	2800      	cmp	r0, #0
 8002814:	d141      	bne.n	800289a <xQueueGenericReceive+0x112>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002816:	f7ff fbeb 	bl	8001ff0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800281a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800281c:	2b00      	cmp	r3, #0
 800281e:	d133      	bne.n	8002888 <xQueueGenericReceive+0x100>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002820:	f7ff fc08 	bl	8002034 <vPortExitCritical>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d051      	beq.n	80028ce <xQueueGenericReceive+0x146>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800282a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800282e:	9901      	ldr	r1, [sp, #4]
 8002830:	f000 fca2 	bl	8003178 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002834:	4620      	mov	r0, r4
 8002836:	f7ff fdad 	bl	8002394 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800283a:	f000 fb4f 	bl	8002edc <xTaskResumeAll>
 800283e:	b938      	cbnz	r0, 8002850 <xQueueGenericReceive+0xc8>
				{
					portYIELD_WITHIN_API();
 8002840:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002844:	f8ca 3000 	str.w	r3, [sl]
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	2501      	movs	r5, #1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002852:	f7ff fbcd 	bl	8001ff0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002856:	6ba6      	ldr	r6, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002858:	2e00      	cmp	r6, #0
 800285a:	d0ba      	beq.n	80027d2 <xQueueGenericReceive+0x4a>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800285c:	4639      	mov	r1, r7
 800285e:	4620      	mov	r0, r4
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002860:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002862:	f7ff fd3f 	bl	80022e4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8002866:	f1b8 0f00 	cmp.w	r8, #0
 800286a:	d13e      	bne.n	80028ea <xQueueGenericReceive+0x162>
					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800286c:	6823      	ldr	r3, [r4, #0]
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800286e:	3e01      	subs	r6, #1
 8002870:	63a6      	str	r6, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002872:	b913      	cbnz	r3, 800287a <xQueueGenericReceive+0xf2>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002874:	f000 fea0 	bl	80035b8 <pvTaskIncrementMutexHeldCount>
 8002878:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800287a:	6923      	ldr	r3, [r4, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d147      	bne.n	8002910 <xQueueGenericReceive+0x188>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8002880:	f7ff fbd8 	bl	8002034 <vPortExitCritical>
				return pdPASS;
 8002884:	2001      	movs	r0, #1
 8002886:	e02d      	b.n	80028e4 <xQueueGenericReceive+0x15c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002888:	f7ff fbd4 	bl	8002034 <vPortExitCritical>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800288c:	4620      	mov	r0, r4
 800288e:	f7ff fd81 	bl	8002394 <prvUnlockQueue>
 8002892:	2501      	movs	r5, #1
				( void ) xTaskResumeAll();
 8002894:	f000 fb22 	bl	8002edc <xTaskResumeAll>
 8002898:	e7db      	b.n	8002852 <xQueueGenericReceive+0xca>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800289a:	4620      	mov	r0, r4
 800289c:	f7ff fd7a 	bl	8002394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028a0:	f000 fb1c 	bl	8002edc <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028a4:	f7ff fba4 	bl	8001ff0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028aa:	b1c3      	cbz	r3, 80028de <xQueueGenericReceive+0x156>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80028ac:	f7ff fbc2 	bl	8002034 <vPortExitCritical>
 80028b0:	2501      	movs	r5, #1
 80028b2:	e7ce      	b.n	8002852 <xQueueGenericReceive+0xca>
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80028b6:	2a00      	cmp	r2, #0
 80028b8:	f43f af70 	beq.w	800279c <xQueueGenericReceive+0x14>
 80028bc:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	e7fe      	b.n	80028cc <xQueueGenericReceive+0x144>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
					{
						taskENTER_CRITICAL();
 80028ce:	f7ff fb8f 	bl	8001ff0 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80028d2:	6860      	ldr	r0, [r4, #4]
 80028d4:	f000 fdc8 	bl	8003468 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80028d8:	f7ff fbac 	bl	8002034 <vPortExitCritical>
 80028dc:	e7a5      	b.n	800282a <xQueueGenericReceive+0xa2>
			{
				if( xTicksToWait == ( TickType_t ) 0 )
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028de:	f7ff fba9 	bl	8002034 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028e2:	2000      	movs	r0, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80028e4:	b004      	add	sp, #16
 80028e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80028ec:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0c6      	beq.n	8002880 <xQueueGenericReceive+0xf8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028f6:	f000 fcf7 	bl	80032e8 <xTaskRemoveFromEventList>
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d0c0      	beq.n	8002880 <xQueueGenericReceive+0xf8>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <xQueueGenericReceive+0x1a8>)
 8002900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	f3bf 8f6f 	isb	sy
 800290e:	e7b7      	b.n	8002880 <xQueueGenericReceive+0xf8>
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002910:	f104 0010 	add.w	r0, r4, #16
 8002914:	f000 fce8 	bl	80032e8 <xTaskRemoveFromEventList>
 8002918:	2800      	cmp	r0, #0
 800291a:	d1f0      	bne.n	80028fe <xQueueGenericReceive+0x176>
 800291c:	e7b0      	b.n	8002880 <xQueueGenericReceive+0xf8>
 800291e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002922:	f383 8811 	msr	BASEPRI, r3
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	f3bf 8f4f 	dsb	sy
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800292e:	e7fe      	b.n	800292e <xQueueGenericReceive+0x1a6>
 8002930:	e000ed04 	.word	0xe000ed04

08002934 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002934:	4b14      	ldr	r3, [pc, #80]	; (8002988 <vQueueAddToRegistry+0x54>)
 8002936:	681a      	ldr	r2, [r3, #0]
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002938:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800293a:	b18a      	cbz	r2, 8002960 <vQueueAddToRegistry+0x2c>
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	b1ba      	cbz	r2, 8002970 <vQueueAddToRegistry+0x3c>
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	b1ba      	cbz	r2, 8002974 <vQueueAddToRegistry+0x40>
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	b1ba      	cbz	r2, 8002978 <vQueueAddToRegistry+0x44>
 8002948:	6a1a      	ldr	r2, [r3, #32]
 800294a:	b1ba      	cbz	r2, 800297c <vQueueAddToRegistry+0x48>
 800294c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800294e:	b1ba      	cbz	r2, 8002980 <vQueueAddToRegistry+0x4c>
 8002950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002952:	b122      	cbz	r2, 800295e <vQueueAddToRegistry+0x2a>
 8002954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002956:	b1aa      	cbz	r2, 8002984 <vQueueAddToRegistry+0x50>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800295c:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800295e:	2206      	movs	r2, #6
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002960:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002964:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002968:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800296a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800296e:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002970:	2201      	movs	r2, #1
 8002972:	e7f5      	b.n	8002960 <vQueueAddToRegistry+0x2c>
 8002974:	2202      	movs	r2, #2
 8002976:	e7f3      	b.n	8002960 <vQueueAddToRegistry+0x2c>
 8002978:	2203      	movs	r2, #3
 800297a:	e7f1      	b.n	8002960 <vQueueAddToRegistry+0x2c>
 800297c:	2204      	movs	r2, #4
 800297e:	e7ef      	b.n	8002960 <vQueueAddToRegistry+0x2c>
 8002980:	2205      	movs	r2, #5
 8002982:	e7ed      	b.n	8002960 <vQueueAddToRegistry+0x2c>
 8002984:	2207      	movs	r2, #7
 8002986:	e7eb      	b.n	8002960 <vQueueAddToRegistry+0x2c>
 8002988:	1ffe9c44 	.word	0x1ffe9c44

0800298c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800298c:	b570      	push	{r4, r5, r6, lr}
 800298e:	4604      	mov	r4, r0
 8002990:	460e      	mov	r6, r1
 8002992:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002994:	f7ff fb2c 	bl	8001ff0 <vPortEnterCritical>
 8002998:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800299c:	2bff      	cmp	r3, #255	; 0xff
 800299e:	bf04      	itt	eq
 80029a0:	2300      	moveq	r3, #0
 80029a2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80029a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80029aa:	2bff      	cmp	r3, #255	; 0xff
 80029ac:	bf04      	itt	eq
 80029ae:	2300      	moveq	r3, #0
 80029b0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80029b4:	f7ff fb3e 	bl	8002034 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029ba:	b92b      	cbnz	r3, 80029c8 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029bc:	4631      	mov	r1, r6
 80029be:	462a      	mov	r2, r5
 80029c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029c4:	f000 fc30 	bl	8003228 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80029c8:	4620      	mov	r0, r4
	}
 80029ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80029ce:	f7ff bce1 	b.w	8002394 <prvUnlockQueue>
 80029d2:	bf00      	nop

080029d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <prvAddCurrentTaskToDelayedList+0x78>)
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80029d8:	4d1d      	ldr	r5, [pc, #116]	; (8002a50 <prvAddCurrentTaskToDelayedList+0x7c>)


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80029da:	681e      	ldr	r6, [r3, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80029dc:	682a      	ldr	r2, [r5, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029de:	682b      	ldr	r3, [r5, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80029e0:	2700      	movs	r7, #0
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80029e2:	4604      	mov	r4, r0
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80029e4:	f882 706d 	strb.w	r7, [r2, #109]	; 0x6d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029e8:	1d18      	adds	r0, r3, #4
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80029ea:	460f      	mov	r7, r1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029ec:	f7ff fa8c 	bl	8001f08 <uxListRemove>
 80029f0:	b940      	cbnz	r0, 8002a04 <prvAddCurrentTaskToDelayedList+0x30>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80029f2:	682b      	ldr	r3, [r5, #0]
 80029f4:	4917      	ldr	r1, [pc, #92]	; (8002a54 <prvAddCurrentTaskToDelayedList+0x80>)
 80029f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80029f8:	680a      	ldr	r2, [r1, #0]
 80029fa:	2301      	movs	r3, #1
 80029fc:	4083      	lsls	r3, r0
 80029fe:	ea22 0303 	bic.w	r3, r2, r3
 8002a02:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a04:	1c63      	adds	r3, r4, #1
 8002a06:	d107      	bne.n	8002a18 <prvAddCurrentTaskToDelayedList+0x44>
 8002a08:	b137      	cbz	r7, 8002a18 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a0a:	6829      	ldr	r1, [r5, #0]
 8002a0c:	4812      	ldr	r0, [pc, #72]	; (8002a58 <prvAddCurrentTaskToDelayedList+0x84>)
 8002a0e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a14:	f7ff ba4e 	b.w	8001eb4 <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a18:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a1a:	682b      	ldr	r3, [r5, #0]
 8002a1c:	4a0c      	ldr	r2, [pc, #48]	; (8002a50 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002a1e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002a20:	42b4      	cmp	r4, r6
 8002a22:	d207      	bcs.n	8002a34 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a24:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <prvAddCurrentTaskToDelayedList+0x88>)
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	6811      	ldr	r1, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a2e:	3104      	adds	r1, #4
 8002a30:	f7ff ba50 	b.w	8001ed4 <vListInsert>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a34:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <prvAddCurrentTaskToDelayedList+0x8c>)
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	6811      	ldr	r1, [r2, #0]
 8002a3a:	3104      	adds	r1, #4
 8002a3c:	f7ff fa4a 	bl	8001ed4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <prvAddCurrentTaskToDelayedList+0x90>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002a46:	bf38      	it	cc
 8002a48:	601c      	strcc	r4, [r3, #0]
 8002a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a4c:	1ffe9b30 	.word	0x1ffe9b30
 8002a50:	1ffe9b24 	.word	0x1ffe9b24
 8002a54:	1ffe9b7c 	.word	0x1ffe9b7c
 8002a58:	1ffe9b68 	.word	0x1ffe9b68
 8002a5c:	1ffe9b34 	.word	0x1ffe9b34
 8002a60:	1ffe9a84 	.word	0x1ffe9a84
 8002a64:	1ffe9b28 	.word	0x1ffe9b28

08002a68 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a68:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <prvResetNextTaskUnblockTime+0x20>)
 8002a6a:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <prvResetNextTaskUnblockTime+0x24>)
 8002a6c:	6819      	ldr	r1, [r3, #0]
 8002a6e:	6809      	ldr	r1, [r1, #0]
 8002a70:	b919      	cbnz	r1, 8002a7a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002a72:	f04f 33ff 	mov.w	r3, #4294967295
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	1ffe9a84 	.word	0x1ffe9a84
 8002a8c:	1ffe9b28 	.word	0x1ffe9b28

08002a90 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a94:	0096      	lsls	r6, r2, #2
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002a96:	4682      	mov	sl, r0
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a98:	4630      	mov	r0, r6
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002a9a:	460d      	mov	r5, r1
 8002a9c:	4699      	mov	r9, r3
 8002a9e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aa2:	f7ff f9dd 	bl	8001e60 <pvPortMalloc>

			if( pxStack != NULL )
 8002aa6:	4607      	mov	r7, r0
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	f000 80dd 	beq.w	8002c68 <xTaskCreate+0x1d8>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002aae:	2070      	movs	r0, #112	; 0x70
 8002ab0:	f7ff f9d6 	bl	8001e60 <pvPortMalloc>

				if( pxNewTCB != NULL )
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	f000 80d3 	beq.w	8002c62 <xTaskCreate+0x1d2>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002abc:	6307      	str	r7, [r0, #48]	; 0x30

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002abe:	4632      	mov	r2, r6
 8002ac0:	4638      	mov	r0, r7
 8002ac2:	21a5      	movs	r1, #165	; 0xa5
 8002ac4:	f00b f82c 	bl	800db20 <memset>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ac8:	782b      	ldrb	r3, [r5, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002aca:	6b27      	ldr	r7, [r4, #48]	; 0x30
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002acc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002ad0:	3e04      	subs	r6, #4
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002ad2:	782b      	ldrb	r3, [r5, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002ad4:	4437      	add	r7, r6
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ad6:	f027 0707 	bic.w	r7, r7, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d047      	beq.n	8002b6e <xTaskCreate+0xde>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ade:	786b      	ldrb	r3, [r5, #1]
 8002ae0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002ae4:	786b      	ldrb	r3, [r5, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d041      	beq.n	8002b6e <xTaskCreate+0xde>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002aea:	78ab      	ldrb	r3, [r5, #2]
 8002aec:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002af0:	78ab      	ldrb	r3, [r5, #2]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d03b      	beq.n	8002b6e <xTaskCreate+0xde>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002af6:	78eb      	ldrb	r3, [r5, #3]
 8002af8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002afc:	78eb      	ldrb	r3, [r5, #3]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d035      	beq.n	8002b6e <xTaskCreate+0xde>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b02:	792b      	ldrb	r3, [r5, #4]
 8002b04:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b08:	792b      	ldrb	r3, [r5, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d02f      	beq.n	8002b6e <xTaskCreate+0xde>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b0e:	796b      	ldrb	r3, [r5, #5]
 8002b10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b14:	796b      	ldrb	r3, [r5, #5]
 8002b16:	b353      	cbz	r3, 8002b6e <xTaskCreate+0xde>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b18:	79ab      	ldrb	r3, [r5, #6]
 8002b1a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b1e:	79ab      	ldrb	r3, [r5, #6]
 8002b20:	b32b      	cbz	r3, 8002b6e <xTaskCreate+0xde>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b22:	79eb      	ldrb	r3, [r5, #7]
 8002b24:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b28:	79eb      	ldrb	r3, [r5, #7]
 8002b2a:	b303      	cbz	r3, 8002b6e <xTaskCreate+0xde>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b2c:	7a2b      	ldrb	r3, [r5, #8]
 8002b2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b32:	7a2b      	ldrb	r3, [r5, #8]
 8002b34:	b1db      	cbz	r3, 8002b6e <xTaskCreate+0xde>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b36:	7a6b      	ldrb	r3, [r5, #9]
 8002b38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b3c:	7a6b      	ldrb	r3, [r5, #9]
 8002b3e:	b1b3      	cbz	r3, 8002b6e <xTaskCreate+0xde>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b40:	7aab      	ldrb	r3, [r5, #10]
 8002b42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b46:	7aab      	ldrb	r3, [r5, #10]
 8002b48:	b18b      	cbz	r3, 8002b6e <xTaskCreate+0xde>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b4a:	7aeb      	ldrb	r3, [r5, #11]
 8002b4c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b50:	7aeb      	ldrb	r3, [r5, #11]
 8002b52:	b163      	cbz	r3, 8002b6e <xTaskCreate+0xde>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b54:	7b2b      	ldrb	r3, [r5, #12]
 8002b56:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b5a:	7b2b      	ldrb	r3, [r5, #12]
 8002b5c:	b13b      	cbz	r3, 8002b6e <xTaskCreate+0xde>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b5e:	7b6b      	ldrb	r3, [r5, #13]
 8002b60:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b64:	7b6b      	ldrb	r3, [r5, #13]
 8002b66:	b113      	cbz	r3, 8002b6e <xTaskCreate+0xde>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b68:	7bab      	ldrb	r3, [r5, #14]
 8002b6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b6e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002b70:	2e04      	cmp	r6, #4
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b72:	f04f 0500 	mov.w	r5, #0
 8002b76:	bf28      	it	cs
 8002b78:	2604      	movcs	r6, #4
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b7a:	f104 0b04 	add.w	fp, r4, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b7e:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b80:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b82:	4658      	mov	r0, fp
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b84:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43

	pxNewTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
 8002b88:	6525      	str	r5, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b8a:	f7ff f98f 	bl	8001eac <vListInitialiseItem>
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b8e:	f1c6 0605 	rsb	r6, r6, #5
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b92:	f104 0018 	add.w	r0, r4, #24
 8002b96:	f7ff f989 	bl	8001eac <vListInitialiseItem>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b9a:	66a5      	str	r5, [r4, #104]	; 0x68
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b9c:	61a6      	str	r6, [r4, #24]

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 8002b9e:	6565      	str	r5, [r4, #84]	; 0x54
 8002ba0:	65a5      	str	r5, [r4, #88]	; 0x58
 8002ba2:	65e5      	str	r5, [r4, #92]	; 0x5c
 8002ba4:	6625      	str	r5, [r4, #96]	; 0x60
 8002ba6:	6665      	str	r5, [r4, #100]	; 0x64
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ba8:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8002bac:	f884 506d 	strb.w	r5, [r4, #109]	; 0x6d
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bb0:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bb2:	6264      	str	r4, [r4, #36]	; 0x24
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bb4:	4638      	mov	r0, r7
 8002bb6:	4651      	mov	r1, sl
 8002bb8:	464a      	mov	r2, r9
 8002bba:	f7ff f9eb 	bl	8001f94 <pxPortInitialiseStack>
 8002bbe:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002bc0:	f1b8 0f00 	cmp.w	r8, #0
 8002bc4:	d001      	beq.n	8002bca <xTaskCreate+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bc6:	f8c8 4000 	str.w	r4, [r8]

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002bca:	f7ff fa11 	bl	8001ff0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bce:	4a3f      	ldr	r2, [pc, #252]	; (8002ccc <xTaskCreate+0x23c>)
		if( pxCurrentTCB == NULL )
 8002bd0:	4f3f      	ldr	r7, [pc, #252]	; (8002cd0 <xTaskCreate+0x240>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 8002bd2:	6813      	ldr	r3, [r2, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d048      	beq.n	8002c70 <xTaskCreate+0x1e0>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bde:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8002cf4 <xTaskCreate+0x264>
 8002be2:	f8d8 3000 	ldr.w	r3, [r8]
 8002be6:	b383      	cbz	r3, 8002c4a <xTaskCreate+0x1ba>
 8002be8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bea:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8002cf8 <xTaskCreate+0x268>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bee:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8002cfc <xTaskCreate+0x26c>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bf2:	f8df e10c 	ldr.w	lr, [pc, #268]	; 8002d00 <xTaskCreate+0x270>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bf6:	f8dc 2000 	ldr.w	r2, [ip]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bfa:	f8de 0000 	ldr.w	r0, [lr]
 8002bfe:	2501      	movs	r5, #1
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c00:	442a      	add	r2, r5
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c02:	fa05 f603 	lsl.w	r6, r5, r3
 8002c06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c0a:	4659      	mov	r1, fp
		uxTaskNumber++;

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c0c:	6462      	str	r2, [r4, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c0e:	4306      	orrs	r6, r0
 8002c10:	eb09 0083 	add.w	r0, r9, r3, lsl #2
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c14:	f8cc 2000 	str.w	r2, [ip]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c18:	f8ce 6000 	str.w	r6, [lr]
 8002c1c:	f7ff f94a 	bl	8001eb4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c20:	f7ff fa08 	bl	8002034 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c24:	f8d8 3000 	ldr.w	r3, [r8]
 8002c28:	b1c3      	cbz	r3, 8002c5c <xTaskCreate+0x1cc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d213      	bcs.n	8002c5c <xTaskCreate+0x1cc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c34:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <xTaskCreate+0x244>)
 8002c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	f3bf 8f6f 	isb	sy
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
 8002c44:	4628      	mov	r0, r5
 8002c46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c50:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002cf8 <xTaskCreate+0x268>
 8002c54:	429a      	cmp	r2, r3
				{
					pxCurrentTCB = pxNewTCB;
 8002c56:	bf98      	it	ls
 8002c58:	603c      	strls	r4, [r7, #0]
 8002c5a:	e7c8      	b.n	8002bee <xTaskCreate+0x15e>
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c62:	4638      	mov	r0, r7
 8002c64:	f7ff f908 	bl	8001e78 <vPortFree>
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 8002c6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uxCurrentNumberOfTasks++;
		if( pxCurrentTCB == NULL )
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c70:	603c      	str	r4, [r7, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c72:	6813      	ldr	r3, [r2, #0]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d005      	beq.n	8002c84 <xTaskCreate+0x1f4>
 8002c78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c7a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8002cf8 <xTaskCreate+0x268>
 8002c7e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8002cf4 <xTaskCreate+0x264>
 8002c82:	e7b4      	b.n	8002bee <xTaskCreate+0x15e>
 8002c84:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8002cf8 <xTaskCreate+0x268>
 8002c88:	464d      	mov	r5, r9
 8002c8a:	f109 0664 	add.w	r6, r9, #100	; 0x64
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c8e:	4628      	mov	r0, r5
 8002c90:	3514      	adds	r5, #20
 8002c92:	f7ff f8ff 	bl	8001e94 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c96:	42b5      	cmp	r5, r6
 8002c98:	d1f9      	bne.n	8002c8e <xTaskCreate+0x1fe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002c9a:	4e0f      	ldr	r6, [pc, #60]	; (8002cd8 <xTaskCreate+0x248>)
	vListInitialise( &xDelayedTaskList2 );
 8002c9c:	4d0f      	ldr	r5, [pc, #60]	; (8002cdc <xTaskCreate+0x24c>)
 8002c9e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8002cf4 <xTaskCreate+0x264>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	f7ff f8f6 	bl	8001e94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ca8:	4628      	mov	r0, r5
 8002caa:	f7ff f8f3 	bl	8001e94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002cae:	480c      	ldr	r0, [pc, #48]	; (8002ce0 <xTaskCreate+0x250>)
 8002cb0:	f7ff f8f0 	bl	8001e94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002cb4:	480b      	ldr	r0, [pc, #44]	; (8002ce4 <xTaskCreate+0x254>)
 8002cb6:	f7ff f8ed 	bl	8001e94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002cba:	480b      	ldr	r0, [pc, #44]	; (8002ce8 <xTaskCreate+0x258>)
 8002cbc:	f7ff f8ea 	bl	8001e94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <xTaskCreate+0x25c>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cc2:	4a0b      	ldr	r2, [pc, #44]	; (8002cf0 <xTaskCreate+0x260>)
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002cc4:	601e      	str	r6, [r3, #0]
 8002cc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cc8:	6015      	str	r5, [r2, #0]
 8002cca:	e790      	b.n	8002bee <xTaskCreate+0x15e>
 8002ccc:	1ffe9b50 	.word	0x1ffe9b50
 8002cd0:	1ffe9b24 	.word	0x1ffe9b24
 8002cd4:	e000ed04 	.word	0xe000ed04
 8002cd8:	1ffe9a90 	.word	0x1ffe9a90
 8002cdc:	1ffe9b54 	.word	0x1ffe9b54
 8002ce0:	1ffe9b38 	.word	0x1ffe9b38
 8002ce4:	1ffe9b0c 	.word	0x1ffe9b0c
 8002ce8:	1ffe9b68 	.word	0x1ffe9b68
 8002cec:	1ffe9a84 	.word	0x1ffe9a84
 8002cf0:	1ffe9b34 	.word	0x1ffe9b34
 8002cf4:	1ffe9a88 	.word	0x1ffe9a88
 8002cf8:	1ffe9aa8 	.word	0x1ffe9aa8
 8002cfc:	1ffe9b4c 	.word	0x1ffe9b4c
 8002d00:	1ffe9b7c 	.word	0x1ffe9b7c

08002d04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d04:	b530      	push	{r4, r5, lr}
 8002d06:	b083      	sub	sp, #12
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002d08:	2400      	movs	r4, #0
 8002d0a:	4a18      	ldr	r2, [pc, #96]	; (8002d6c <vTaskStartScheduler+0x68>)
 8002d0c:	9201      	str	r2, [sp, #4]
 8002d0e:	9400      	str	r4, [sp, #0]
 8002d10:	4623      	mov	r3, r4
 8002d12:	4817      	ldr	r0, [pc, #92]	; (8002d70 <vTaskStartScheduler+0x6c>)
 8002d14:	4917      	ldr	r1, [pc, #92]	; (8002d74 <vTaskStartScheduler+0x70>)
 8002d16:	2282      	movs	r2, #130	; 0x82
 8002d18:	f7ff feba 	bl	8002a90 <xTaskCreate>
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002d1c:	2801      	cmp	r0, #1
 8002d1e:	d00c      	beq.n	8002d3a <vTaskStartScheduler+0x36>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d20:	3001      	adds	r0, #1
 8002d22:	d001      	beq.n	8002d28 <vTaskStartScheduler+0x24>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d24:	b003      	add	sp, #12
 8002d26:	bd30      	pop	{r4, r5, pc}
 8002d28:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d38:	e7fe      	b.n	8002d38 <vTaskStartScheduler+0x34>

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
		{
			xReturn = xTimerCreateTimerTask();
 8002d3a:	f000 fc97 	bl	800366c <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d3e:	2801      	cmp	r0, #1
 8002d40:	d1ee      	bne.n	8002d20 <vTaskStartScheduler+0x1c>
 8002d42:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d52:	4909      	ldr	r1, [pc, #36]	; (8002d78 <vTaskStartScheduler+0x74>)
		xSchedulerRunning = pdTRUE;
 8002d54:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <vTaskStartScheduler+0x78>)
		xTickCount = ( TickType_t ) 0U;
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <vTaskStartScheduler+0x7c>)
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d58:	f04f 35ff 	mov.w	r5, #4294967295
 8002d5c:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8002d5e:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8002d60:	601c      	str	r4, [r3, #0]
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d62:	b003      	add	sp, #12
 8002d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d68:	f7ff b9de 	b.w	8002128 <xPortStartScheduler>
 8002d6c:	1ffe9b2c 	.word	0x1ffe9b2c
 8002d70:	08003071 	.word	0x08003071
 8002d74:	0800e564 	.word	0x0800e564
 8002d78:	1ffe9b28 	.word	0x1ffe9b28
 8002d7c:	1ffe9a88 	.word	0x1ffe9a88
 8002d80:	1ffe9b30 	.word	0x1ffe9b30

08002d84 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002d84:	4a02      	ldr	r2, [pc, #8]	; (8002d90 <vTaskSuspendAll+0xc>)
 8002d86:	6813      	ldr	r3, [r2, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	1ffe9a8c 	.word	0x1ffe9a8c

08002d94 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002d94:	4b01      	ldr	r3, [pc, #4]	; (8002d9c <xTaskGetTickCount+0x8>)
 8002d96:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	1ffe9b30 	.word	0x1ffe9b30

08002da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002da4:	4b42      	ldr	r3, [pc, #264]	; (8002eb0 <xTaskIncrementTick+0x110>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	b9bb      	cbnz	r3, 8002dda <xTaskIncrementTick+0x3a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8002daa:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <xTaskIncrementTick+0x114>)
 8002dac:	681c      	ldr	r4, [r3, #0]
 8002dae:	3401      	adds	r4, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002db0:	601c      	str	r4, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8002db2:	b30c      	cbz	r4, 8002df8 <xTaskIncrementTick+0x58>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002db4:	4e40      	ldr	r6, [pc, #256]	; (8002eb8 <xTaskIncrementTick+0x118>)
 8002db6:	6833      	ldr	r3, [r6, #0]
 8002db8:	429c      	cmp	r4, r3
 8002dba:	d22b      	bcs.n	8002e14 <xTaskIncrementTick+0x74>
 8002dbc:	4f3f      	ldr	r7, [pc, #252]	; (8002ebc <xTaskIncrementTick+0x11c>)
 8002dbe:	4d40      	ldr	r5, [pc, #256]	; (8002ec0 <xTaskIncrementTick+0x120>)

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002dc0:	f04f 0b00 	mov.w	fp, #0
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002dc4:	682a      	ldr	r2, [r5, #0]
 8002dc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002dc8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002dcc:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
			{
				xSwitchRequired = pdTRUE;
 8002dd0:	2a02      	cmp	r2, #2
 8002dd2:	bf28      	it	cs
 8002dd4:	f04f 0b01 	movcs.w	fp, #1
 8002dd8:	e005      	b.n	8002de6 <xTaskIncrementTick+0x46>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002dda:	4a3a      	ldr	r2, [pc, #232]	; (8002ec4 <xTaskIncrementTick+0x124>)
 8002ddc:	6813      	ldr	r3, [r2, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002de2:	f04f 0b00 	mov.w	fp, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002de6:	4a38      	ldr	r2, [pc, #224]	; (8002ec8 <xTaskIncrementTick+0x128>)
 8002de8:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8002dea:	2a00      	cmp	r2, #0
 8002dec:	bf18      	it	ne
 8002dee:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8002df2:	4658      	mov	r0, fp
 8002df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;

		if( xConstTickCount == ( TickType_t ) 0U )
		{
			taskSWITCH_DELAYED_LISTS();
 8002df8:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <xTaskIncrementTick+0x12c>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	2a00      	cmp	r2, #0
 8002e00:	d047      	beq.n	8002e92 <xTaskIncrementTick+0xf2>
 8002e02:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	e7fe      	b.n	8002e12 <xTaskIncrementTick+0x72>
 8002e14:	4f29      	ldr	r7, [pc, #164]	; (8002ebc <xTaskIncrementTick+0x11c>)
 8002e16:	4d2a      	ldr	r5, [pc, #168]	; (8002ec0 <xTaskIncrementTick+0x120>)
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e18:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8002ed8 <xTaskIncrementTick+0x138>
 8002e1c:	f04f 0b00 	mov.w	fp, #0
 8002e20:	e02e      	b.n	8002e80 <xTaskIncrementTick+0xe0>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e22:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <xTaskIncrementTick+0x12c>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68d2      	ldr	r2, [r2, #12]
 8002e28:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e30:	f108 0a04 	add.w	sl, r8, #4
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );

					if( xConstTickCount < xItemValue )
 8002e34:	428c      	cmp	r4, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e36:	4650      	mov	r0, sl
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );

					if( xConstTickCount < xItemValue )
 8002e38:	d337      	bcc.n	8002eaa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e3a:	f7ff f865 	bl	8001f08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e3e:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e42:	f108 0018 	add.w	r0, r8, #24
					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e46:	b109      	cbz	r1, 8002e4c <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e48:	f7ff f85e 	bl	8001f08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e4c:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8002e50:	f8d9 3000 	ldr.w	r3, [r9]
 8002e54:	2201      	movs	r2, #1
 8002e56:	fa02 fc00 	lsl.w	ip, r2, r0
 8002e5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e5e:	4651      	mov	r1, sl
 8002e60:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8002e64:	ea4c 0303 	orr.w	r3, ip, r3
 8002e68:	f8c9 3000 	str.w	r3, [r9]
 8002e6c:	f7ff f822 	bl	8001eb4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e70:	6828      	ldr	r0, [r5, #0]
 8002e72:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8002e76:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 8002e78:	4291      	cmp	r1, r2
 8002e7a:	bf28      	it	cs
 8002e7c:	f04f 0b01 	movcs.w	fp, #1
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e80:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <xTaskIncrementTick+0x12c>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	2a00      	cmp	r2, #0
 8002e88:	d1cb      	bne.n	8002e22 <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8e:	6032      	str	r2, [r6, #0]
					break;
 8002e90:	e798      	b.n	8002dc4 <xTaskIncrementTick+0x24>
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;

		if( xConstTickCount == ( TickType_t ) 0U )
		{
			taskSWITCH_DELAYED_LISTS();
 8002e92:	490f      	ldr	r1, [pc, #60]	; (8002ed0 <xTaskIncrementTick+0x130>)
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	4a0f      	ldr	r2, [pc, #60]	; (8002ed4 <xTaskIncrementTick+0x134>)
 8002e98:	680d      	ldr	r5, [r1, #0]
 8002e9a:	601d      	str	r5, [r3, #0]
 8002e9c:	6008      	str	r0, [r1, #0]
 8002e9e:	6813      	ldr	r3, [r2, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	f7ff fde0 	bl	8002a68 <prvResetNextTaskUnblockTime>
 8002ea8:	e784      	b.n	8002db4 <xTaskIncrementTick+0x14>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002eaa:	6031      	str	r1, [r6, #0]
						break;
 8002eac:	e78a      	b.n	8002dc4 <xTaskIncrementTick+0x24>
 8002eae:	bf00      	nop
 8002eb0:	1ffe9a8c 	.word	0x1ffe9a8c
 8002eb4:	1ffe9b30 	.word	0x1ffe9b30
 8002eb8:	1ffe9b28 	.word	0x1ffe9b28
 8002ebc:	1ffe9aa8 	.word	0x1ffe9aa8
 8002ec0:	1ffe9b24 	.word	0x1ffe9b24
 8002ec4:	1ffe9aa4 	.word	0x1ffe9aa4
 8002ec8:	1ffe9b80 	.word	0x1ffe9b80
 8002ecc:	1ffe9a84 	.word	0x1ffe9a84
 8002ed0:	1ffe9b34 	.word	0x1ffe9b34
 8002ed4:	1ffe9a80 	.word	0x1ffe9a80
 8002ed8:	1ffe9b7c 	.word	0x1ffe9b7c

08002edc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ee0:	4c33      	ldr	r4, [pc, #204]	; (8002fb0 <xTaskResumeAll+0xd4>)
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	b943      	cbnz	r3, 8002ef8 <xTaskResumeAll+0x1c>
 8002ee6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	e7fe      	b.n	8002ef6 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ef8:	f7ff f87a 	bl	8001ff0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f02:	6824      	ldr	r4, [r4, #0]
 8002f04:	2c00      	cmp	r4, #0
 8002f06:	d14d      	bne.n	8002fa4 <xTaskResumeAll+0xc8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f08:	4b2a      	ldr	r3, [pc, #168]	; (8002fb4 <xTaskResumeAll+0xd8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d049      	beq.n	8002fa4 <xTaskResumeAll+0xc8>
 8002f10:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002fcc <xTaskResumeAll+0xf0>
 8002f14:	4d28      	ldr	r5, [pc, #160]	; (8002fb8 <xTaskResumeAll+0xdc>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8002f16:	4e29      	ldr	r6, [pc, #164]	; (8002fbc <xTaskResumeAll+0xe0>)
 8002f18:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8002fd0 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f1c:	46d3      	mov	fp, sl
 8002f1e:	f8da 3000 	ldr.w	r3, [sl]
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8002f22:	2701      	movs	r7, #1
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f24:	b323      	cbz	r3, 8002f70 <xTaskResumeAll+0x94>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002f26:	f8db 300c 	ldr.w	r3, [fp, #12]
 8002f2a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f2c:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f30:	f104 0018 	add.w	r0, r4, #24
 8002f34:	f7fe ffe8 	bl	8001f08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f38:	4648      	mov	r0, r9
 8002f3a:	f7fe ffe5 	bl	8001f08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f3e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002f40:	6833      	ldr	r3, [r6, #0]
 8002f42:	fa07 f200 	lsl.w	r2, r7, r0
 8002f46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	4649      	mov	r1, r9
 8002f4e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8002f52:	6033      	str	r3, [r6, #0]
 8002f54:	f7fe ffae 	bl	8001eb4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <xTaskResumeAll+0xe4>)
 8002f5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d3dc      	bcc.n	8002f1e <xTaskResumeAll+0x42>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f64:	f8da 3000 	ldr.w	r3, [sl]

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldPending = pdTRUE;
 8002f68:	602f      	str	r7, [r5, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8002f6a:	2701      	movs	r7, #1
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1da      	bne.n	8002f26 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f70:	b10c      	cbz	r4, 8002f76 <xTaskResumeAll+0x9a>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f72:	f7ff fd79 	bl	8002a68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f76:	4e13      	ldr	r6, [pc, #76]	; (8002fc4 <xTaskResumeAll+0xe8>)
 8002f78:	6834      	ldr	r4, [r6, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f7a:	b13c      	cbz	r4, 8002f8c <xTaskResumeAll+0xb0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
 8002f7c:	2701      	movs	r7, #1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f7e:	f7ff ff0f 	bl	8002da0 <xTaskIncrementTick>
 8002f82:	b100      	cbz	r0, 8002f86 <xTaskResumeAll+0xaa>
							{
								xYieldPending = pdTRUE;
 8002f84:	602f      	str	r7, [r5, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f86:	3c01      	subs	r4, #1
 8002f88:	d1f9      	bne.n	8002f7e <xTaskResumeAll+0xa2>

						uxPendedTicks = 0;
 8002f8a:	6034      	str	r4, [r6, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	b14b      	cbz	r3, 8002fa4 <xTaskResumeAll+0xc8>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <xTaskResumeAll+0xec>)
 8002f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002fa0:	2401      	movs	r4, #1
 8002fa2:	e000      	b.n	8002fa6 <xTaskResumeAll+0xca>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8002fa4:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002fa6:	f7ff f845 	bl	8002034 <vPortExitCritical>

	return xAlreadyYielded;
}
 8002faa:	4620      	mov	r0, r4
 8002fac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fb0:	1ffe9a8c 	.word	0x1ffe9a8c
 8002fb4:	1ffe9b50 	.word	0x1ffe9b50
 8002fb8:	1ffe9b80 	.word	0x1ffe9b80
 8002fbc:	1ffe9b7c 	.word	0x1ffe9b7c
 8002fc0:	1ffe9b24 	.word	0x1ffe9b24
 8002fc4:	1ffe9aa4 	.word	0x1ffe9aa4
 8002fc8:	e000ed04 	.word	0xe000ed04
 8002fcc:	1ffe9b38 	.word	0x1ffe9b38
 8002fd0:	1ffe9aa8 	.word	0x1ffe9aa8

08002fd4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002fd4:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
 8002fd6:	b1a8      	cbz	r0, 8003004 <vTaskDelayUntil+0x30>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002fd8:	b941      	cbnz	r1, 8002fec <vTaskDelayUntil+0x18>
 8002fda:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	e7fe      	b.n	8002fea <vTaskDelayUntil+0x16>
		configASSERT( uxSchedulerSuspended == 0 );
 8002fec:	4c1d      	ldr	r4, [pc, #116]	; (8003064 <vTaskDelayUntil+0x90>)
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	b18b      	cbz	r3, 8003016 <vTaskDelayUntil+0x42>
 8002ff2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	e7fe      	b.n	8003002 <vTaskDelayUntil+0x2e>
 8003004:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
 8003014:	e7fe      	b.n	8003014 <vTaskDelayUntil+0x40>
 8003016:	4602      	mov	r2, r0
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003018:	6820      	ldr	r0, [r4, #0]

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800301a:	4d13      	ldr	r5, [pc, #76]	; (8003068 <vTaskDelayUntil+0x94>)
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800301c:	3001      	adds	r0, #1
 800301e:	6020      	str	r0, [r4, #0]
 8003020:	460b      	mov	r3, r1

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003022:	6828      	ldr	r0, [r5, #0]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003024:	6811      	ldr	r1, [r2, #0]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003026:	4288      	cmp	r0, r1
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003028:	440b      	add	r3, r1

			if( xConstTickCount < *pxPreviousWakeTime )
 800302a:	d214      	bcs.n	8003056 <vTaskDelayUntil+0x82>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800302c:	4299      	cmp	r1, r3
 800302e:	d916      	bls.n	800305e <vTaskDelayUntil+0x8a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003030:	4298      	cmp	r0, r3
 8003032:	d214      	bcs.n	800305e <vTaskDelayUntil+0x8a>
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003034:	6013      	str	r3, [r2, #0]
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003036:	1a18      	subs	r0, r3, r0
 8003038:	2100      	movs	r1, #0
 800303a:	f7ff fccb 	bl	80029d4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800303e:	f7ff ff4d 	bl	8002edc <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003042:	b958      	cbnz	r0, 800305c <vTaskDelayUntil+0x88>
		{
			portYIELD_WITHIN_API();
 8003044:	4b09      	ldr	r3, [pc, #36]	; (800306c <vTaskDelayUntil+0x98>)
 8003046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	bd38      	pop	{r3, r4, r5, pc}
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003056:	4299      	cmp	r1, r3
 8003058:	d8ec      	bhi.n	8003034 <vTaskDelayUntil+0x60>
 800305a:	e7e9      	b.n	8003030 <vTaskDelayUntil+0x5c>
 800305c:	bd38      	pop	{r3, r4, r5, pc}
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	e7ed      	b.n	800303e <vTaskDelayUntil+0x6a>
 8003062:	bf00      	nop
 8003064:	1ffe9a8c 	.word	0x1ffe9a8c
 8003068:	1ffe9b30 	.word	0x1ffe9b30
 800306c:	e000ed04 	.word	0xe000ed04

08003070 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003070:	4e1f      	ldr	r6, [pc, #124]	; (80030f0 <prvIdleTask+0x80>)
 8003072:	4d20      	ldr	r5, [pc, #128]	; (80030f4 <prvIdleTask+0x84>)
 8003074:	4c20      	ldr	r4, [pc, #128]	; (80030f8 <prvIdleTask+0x88>)
 8003076:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8003100 <prvIdleTask+0x90>
 800307a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003104 <prvIdleTask+0x94>
 800307e:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003082:	46b2      	mov	sl, r6
 8003084:	e006      	b.n	8003094 <prvIdleTask+0x24>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003086:	6823      	ldr	r3, [r4, #0]
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003088:	6837      	ldr	r7, [r6, #0]
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800308a:	3301      	adds	r3, #1
 800308c:	6023      	str	r3, [r4, #0]
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
 800308e:	f7ff ff25 	bl	8002edc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003092:	b97f      	cbnz	r7, 80030b4 <prvIdleTask+0x44>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003094:	682b      	ldr	r3, [r5, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f5      	bne.n	8003086 <prvIdleTask+0x16>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800309a:	f8d9 3000 	ldr.w	r3, [r9]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d9f8      	bls.n	8003094 <prvIdleTask+0x24>
			{
				taskYIELD();
 80030a2:	4b16      	ldr	r3, [pc, #88]	; (80030fc <prvIdleTask+0x8c>)
 80030a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	e7ef      	b.n	8003094 <prvIdleTask+0x24>

			if( xListIsEmpty == pdFALSE )
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80030b4:	f7fe ff9c 	bl	8001ff0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80030b8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80030bc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030c0:	f10b 0004 	add.w	r0, fp, #4
 80030c4:	f7fe ff20 	bl	8001f08 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80030c8:	f8d8 3000 	ldr.w	r3, [r8]
					--uxDeletedTasksWaitingCleanUp;
 80030cc:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <prvIdleTask+0x84>)

				taskENTER_CRITICAL();
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					--uxCurrentNumberOfTasks;
 80030ce:	3b01      	subs	r3, #1
 80030d0:	f8c8 3000 	str.w	r3, [r8]
					--uxDeletedTasksWaitingCleanUp;
 80030d4:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <prvIdleTask+0x84>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3b01      	subs	r3, #1
 80030da:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80030dc:	f7fe ffaa 	bl	8002034 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80030e0:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 80030e4:	f7fe fec8 	bl	8001e78 <vPortFree>
			vPortFree( pxTCB );
 80030e8:	4658      	mov	r0, fp
 80030ea:	f7fe fec5 	bl	8001e78 <vPortFree>
 80030ee:	e7d1      	b.n	8003094 <prvIdleTask+0x24>
 80030f0:	1ffe9b0c 	.word	0x1ffe9b0c
 80030f4:	1ffe9b20 	.word	0x1ffe9b20
 80030f8:	1ffe9a8c 	.word	0x1ffe9a8c
 80030fc:	e000ed04 	.word	0xe000ed04
 8003100:	1ffe9b50 	.word	0x1ffe9b50
 8003104:	1ffe9aa8 	.word	0x1ffe9aa8

08003108 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003108:	4b16      	ldr	r3, [pc, #88]	; (8003164 <vTaskSwitchContext+0x5c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	bb33      	cbnz	r3, 800315c <vTaskSwitchContext+0x54>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 800310e:	4916      	ldr	r1, [pc, #88]	; (8003168 <vTaskSwitchContext+0x60>)
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003110:	4a16      	ldr	r2, [pc, #88]	; (800316c <vTaskSwitchContext+0x64>)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8003112:	600b      	str	r3, [r1, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003114:	6813      	ldr	r3, [r2, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f1c3 031f 	rsb	r3, r3, #31
 8003120:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4812      	ldr	r0, [pc, #72]	; (8003170 <vTaskSwitchContext+0x68>)
 8003128:	58c2      	ldr	r2, [r0, r3]
 800312a:	18c1      	adds	r1, r0, r3
 800312c:	b942      	cbnz	r2, 8003140 <vTaskSwitchContext+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800312e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	e7fe      	b.n	800313e <vTaskSwitchContext+0x36>
 8003140:	684a      	ldr	r2, [r1, #4]
 8003142:	3308      	adds	r3, #8
 8003144:	6852      	ldr	r2, [r2, #4]
 8003146:	604a      	str	r2, [r1, #4]
 8003148:	4403      	add	r3, r0
 800314a:	429a      	cmp	r2, r3
 800314c:	bf08      	it	eq
 800314e:	6852      	ldreq	r2, [r2, #4]
 8003150:	4b08      	ldr	r3, [pc, #32]	; (8003174 <vTaskSwitchContext+0x6c>)
 8003152:	bf08      	it	eq
 8003154:	604a      	streq	r2, [r1, #4]
 8003156:	68d2      	ldr	r2, [r2, #12]
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	4770      	bx	lr
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800315c:	4b02      	ldr	r3, [pc, #8]	; (8003168 <vTaskSwitchContext+0x60>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	4770      	bx	lr
 8003164:	1ffe9a8c 	.word	0x1ffe9a8c
 8003168:	1ffe9b80 	.word	0x1ffe9b80
 800316c:	1ffe9b7c 	.word	0x1ffe9b7c
 8003170:	1ffe9aa8 	.word	0x1ffe9aa8
 8003174:	1ffe9b24 	.word	0x1ffe9b24

08003178 <vTaskPlaceOnEventList>:
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
	configASSERT( pxEventList );
 8003178:	2800      	cmp	r0, #0
 800317a:	d02e      	beq.n	80031da <vTaskPlaceOnEventList+0x62>
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800317c:	b570      	push	{r4, r5, r6, lr}

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800317e:	4d23      	ldr	r5, [pc, #140]	; (800320c <vTaskPlaceOnEventList+0x94>)
 8003180:	460c      	mov	r4, r1
 8003182:	6829      	ldr	r1, [r5, #0]
 8003184:	3118      	adds	r1, #24
 8003186:	f7fe fea5 	bl	8001ed4 <vListInsert>


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <vTaskPlaceOnEventList+0x98>)
 800318c:	681e      	ldr	r6, [r3, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800318e:	682b      	ldr	r3, [r5, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003190:	6828      	ldr	r0, [r5, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003192:	2200      	movs	r2, #0
 8003194:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003198:	3004      	adds	r0, #4
 800319a:	f7fe feb5 	bl	8001f08 <uxListRemove>
 800319e:	b940      	cbnz	r0, 80031b2 <vTaskPlaceOnEventList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80031a0:	682b      	ldr	r3, [r5, #0]
 80031a2:	491c      	ldr	r1, [pc, #112]	; (8003214 <vTaskPlaceOnEventList+0x9c>)
 80031a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80031a6:	680b      	ldr	r3, [r1, #0]
 80031a8:	2201      	movs	r2, #1
 80031aa:	4082      	lsls	r2, r0
 80031ac:	ea23 0302 	bic.w	r3, r3, r2
 80031b0:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031b2:	1c63      	adds	r3, r4, #1
 80031b4:	d01a      	beq.n	80031ec <vTaskPlaceOnEventList+0x74>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80031b6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031b8:	682a      	ldr	r2, [r5, #0]
 80031ba:	4b14      	ldr	r3, [pc, #80]	; (800320c <vTaskPlaceOnEventList+0x94>)
 80031bc:	6054      	str	r4, [r2, #4]

			if( xTimeToWake < xConstTickCount )
 80031be:	42a6      	cmp	r6, r4
 80031c0:	d81b      	bhi.n	80031fa <vTaskPlaceOnEventList+0x82>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031c2:	4a15      	ldr	r2, [pc, #84]	; (8003218 <vTaskPlaceOnEventList+0xa0>)
 80031c4:	6810      	ldr	r0, [r2, #0]
 80031c6:	6819      	ldr	r1, [r3, #0]
 80031c8:	3104      	adds	r1, #4
 80031ca:	f7fe fe83 	bl	8001ed4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80031ce:	4b13      	ldr	r3, [pc, #76]	; (800321c <vTaskPlaceOnEventList+0xa4>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 80031d4:	bf38      	it	cc
 80031d6:	601c      	strcc	r4, [r3, #0]
 80031d8:	bd70      	pop	{r4, r5, r6, pc}
 80031da:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
	configASSERT( pxEventList );
 80031ea:	e7fe      	b.n	80031ea <vTaskPlaceOnEventList+0x72>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031ec:	6829      	ldr	r1, [r5, #0]
 80031ee:	480c      	ldr	r0, [pc, #48]	; (8003220 <vTaskPlaceOnEventList+0xa8>)
 80031f0:	3104      	adds	r1, #4
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
 80031f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031f6:	f7fe be5d 	b.w	8001eb4 <vListInsertEnd>

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031fa:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <vTaskPlaceOnEventList+0xac>)
 80031fc:	6810      	ldr	r0, [r2, #0]
 80031fe:	6819      	ldr	r1, [r3, #0]
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
 8003200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003204:	3104      	adds	r1, #4
 8003206:	f7fe be65 	b.w	8001ed4 <vListInsert>
 800320a:	bf00      	nop
 800320c:	1ffe9b24 	.word	0x1ffe9b24
 8003210:	1ffe9b30 	.word	0x1ffe9b30
 8003214:	1ffe9b7c 	.word	0x1ffe9b7c
 8003218:	1ffe9a84 	.word	0x1ffe9a84
 800321c:	1ffe9b28 	.word	0x1ffe9b28
 8003220:	1ffe9b68 	.word	0x1ffe9b68
 8003224:	1ffe9b34 	.word	0x1ffe9b34

08003228 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 800322a:	2800      	cmp	r0, #0
 800322c:	d033      	beq.n	8003296 <vTaskPlaceOnEventListRestricted+0x6e>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800322e:	4d27      	ldr	r5, [pc, #156]	; (80032cc <vTaskPlaceOnEventListRestricted+0xa4>)
 8003230:	460c      	mov	r4, r1
 8003232:	6829      	ldr	r1, [r5, #0]
 8003234:	3118      	adds	r1, #24
 8003236:	4617      	mov	r7, r2
 8003238:	f7fe fe3c 	bl	8001eb4 <vListInsertEnd>


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <vTaskPlaceOnEventListRestricted+0xa8>)
 800323e:	681e      	ldr	r6, [r3, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003240:	682b      	ldr	r3, [r5, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003242:	6828      	ldr	r0, [r5, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003244:	2200      	movs	r2, #0
		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
		{
			xTicksToWait = portMAX_DELAY;
 8003246:	4297      	cmp	r7, r2
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003248:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800324c:	f100 0004 	add.w	r0, r0, #4
		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
		{
			xTicksToWait = portMAX_DELAY;
 8003250:	bf18      	it	ne
 8003252:	f04f 34ff 	movne.w	r4, #4294967295
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003256:	f7fe fe57 	bl	8001f08 <uxListRemove>
 800325a:	b940      	cbnz	r0, 800326e <vTaskPlaceOnEventListRestricted+0x46>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	491d      	ldr	r1, [pc, #116]	; (80032d4 <vTaskPlaceOnEventListRestricted+0xac>)
 8003260:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003262:	680b      	ldr	r3, [r1, #0]
 8003264:	2201      	movs	r2, #1
 8003266:	4082      	lsls	r2, r0
 8003268:	ea23 0302 	bic.w	r3, r3, r2
 800326c:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800326e:	1c63      	adds	r3, r4, #1
 8003270:	d022      	beq.n	80032b8 <vTaskPlaceOnEventListRestricted+0x90>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003272:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003274:	682a      	ldr	r2, [r5, #0]
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <vTaskPlaceOnEventListRestricted+0xa4>)
 8003278:	6054      	str	r4, [r2, #4]

			if( xTimeToWake < xConstTickCount )
 800327a:	42a6      	cmp	r6, r4
 800327c:	d814      	bhi.n	80032a8 <vTaskPlaceOnEventListRestricted+0x80>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800327e:	4a16      	ldr	r2, [pc, #88]	; (80032d8 <vTaskPlaceOnEventListRestricted+0xb0>)
 8003280:	6810      	ldr	r0, [r2, #0]
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	3104      	adds	r1, #4
 8003286:	f7fe fe25 	bl	8001ed4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800328a:	4b14      	ldr	r3, [pc, #80]	; (80032dc <vTaskPlaceOnEventListRestricted+0xb4>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003290:	bf38      	it	cc
 8003292:	601c      	strcc	r4, [r3, #0]
 8003294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003296:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
		configASSERT( pxEventList );
 80032a6:	e7fe      	b.n	80032a6 <vTaskPlaceOnEventListRestricted+0x7e>

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032a8:	4a0d      	ldr	r2, [pc, #52]	; (80032e0 <vTaskPlaceOnEventListRestricted+0xb8>)
 80032aa:	6810      	ldr	r0, [r2, #0]
 80032ac:	6819      	ldr	r1, [r3, #0]
			xTicksToWait = portMAX_DELAY;
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
	}
 80032ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032b2:	3104      	adds	r1, #4
 80032b4:	f7fe be0e 	b.w	8001ed4 <vListInsert>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032b8:	2f00      	cmp	r7, #0
 80032ba:	d0da      	beq.n	8003272 <vTaskPlaceOnEventListRestricted+0x4a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032bc:	6829      	ldr	r1, [r5, #0]
 80032be:	4809      	ldr	r0, [pc, #36]	; (80032e4 <vTaskPlaceOnEventListRestricted+0xbc>)
 80032c0:	3104      	adds	r1, #4
			xTicksToWait = portMAX_DELAY;
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
	}
 80032c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032c6:	f7fe bdf5 	b.w	8001eb4 <vListInsertEnd>
 80032ca:	bf00      	nop
 80032cc:	1ffe9b24 	.word	0x1ffe9b24
 80032d0:	1ffe9b30 	.word	0x1ffe9b30
 80032d4:	1ffe9b7c 	.word	0x1ffe9b7c
 80032d8:	1ffe9a84 	.word	0x1ffe9a84
 80032dc:	1ffe9b28 	.word	0x1ffe9b28
 80032e0:	1ffe9b34 	.word	0x1ffe9b34
 80032e4:	1ffe9b68 	.word	0x1ffe9b68

080032e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80032ea:	68c3      	ldr	r3, [r0, #12]
 80032ec:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80032ee:	b32c      	cbz	r4, 800333c <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80032f0:	f104 0518 	add.w	r5, r4, #24
 80032f4:	4628      	mov	r0, r5
 80032f6:	f7fe fe07 	bl	8001f08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032fa:	4b17      	ldr	r3, [pc, #92]	; (8003358 <xTaskRemoveFromEventList+0x70>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	bb33      	cbnz	r3, 800334e <xTaskRemoveFromEventList+0x66>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003300:	1d27      	adds	r7, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003302:	4e16      	ldr	r6, [pc, #88]	; (800335c <xTaskRemoveFromEventList+0x74>)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003304:	4638      	mov	r0, r7
 8003306:	f7fe fdff 	bl	8001f08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800330a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800330c:	6832      	ldr	r2, [r6, #0]
 800330e:	4814      	ldr	r0, [pc, #80]	; (8003360 <xTaskRemoveFromEventList+0x78>)
 8003310:	2501      	movs	r5, #1
 8003312:	409d      	lsls	r5, r3
 8003314:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003318:	432a      	orrs	r2, r5
 800331a:	4639      	mov	r1, r7
 800331c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003320:	6032      	str	r2, [r6, #0]
 8003322:	f7fe fdc7 	bl	8001eb4 <vListInsertEnd>
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <xTaskRemoveFromEventList+0x7c>)
 8003328:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003330:	bf83      	ittte	hi
 8003332:	4b0d      	ldrhi	r3, [pc, #52]	; (8003368 <xTaskRemoveFromEventList+0x80>)
 8003334:	2001      	movhi	r0, #1
 8003336:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 8003338:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 800333a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800333c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
	configASSERT( pxUnblockedTCB );
 800334c:	e7fe      	b.n	800334c <xTaskRemoveFromEventList+0x64>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800334e:	4629      	mov	r1, r5
 8003350:	4806      	ldr	r0, [pc, #24]	; (800336c <xTaskRemoveFromEventList+0x84>)
 8003352:	f7fe fdaf 	bl	8001eb4 <vListInsertEnd>
 8003356:	e7e6      	b.n	8003326 <xTaskRemoveFromEventList+0x3e>
 8003358:	1ffe9a8c 	.word	0x1ffe9a8c
 800335c:	1ffe9b7c 	.word	0x1ffe9b7c
 8003360:	1ffe9aa8 	.word	0x1ffe9aa8
 8003364:	1ffe9b24 	.word	0x1ffe9b24
 8003368:	1ffe9b80 	.word	0x1ffe9b80
 800336c:	1ffe9b38 	.word	0x1ffe9b38

08003370 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
 8003370:	b130      	cbz	r0, 8003380 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003372:	4a08      	ldr	r2, [pc, #32]	; (8003394 <vTaskSetTimeOutState+0x24>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <vTaskSetTimeOutState+0x28>)
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003376:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	e880 000c 	stmia.w	r0, {r2, r3}
 800337e:	4770      	bx	lr
 8003380:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	e7fe      	b.n	8003390 <vTaskSetTimeOutState+0x20>
 8003392:	bf00      	nop
 8003394:	1ffe9a80 	.word	0x1ffe9a80
 8003398:	1ffe9b30 	.word	0x1ffe9b30

0800339c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800339e:	2800      	cmp	r0, #0
 80033a0:	d037      	beq.n	8003412 <xTaskCheckForTimeOut+0x76>
	configASSERT( pxTicksToWait );
 80033a2:	b369      	cbz	r1, 8003400 <xTaskCheckForTimeOut+0x64>
 80033a4:	460e      	mov	r6, r1
 80033a6:	4605      	mov	r5, r0

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80033a8:	4f21      	ldr	r7, [pc, #132]	; (8003430 <xTaskCheckForTimeOut+0x94>)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 80033aa:	f7fe fe21 	bl	8001ff0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 80033ae:	4b21      	ldr	r3, [pc, #132]	; (8003434 <xTaskCheckForTimeOut+0x98>)
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80033b0:	6839      	ldr	r1, [r7, #0]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	f892 406d 	ldrb.w	r4, [r2, #109]	; 0x6d
 80033b8:	b9cc      	cbnz	r4, 80033ee <xTaskCheckForTimeOut+0x52>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80033ba:	6832      	ldr	r2, [r6, #0]
 80033bc:	1c53      	adds	r3, r2, #1
 80033be:	d012      	beq.n	80033e6 <xTaskCheckForTimeOut+0x4a>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80033c0:	481d      	ldr	r0, [pc, #116]	; (8003438 <xTaskCheckForTimeOut+0x9c>)
 80033c2:	682c      	ldr	r4, [r5, #0]
 80033c4:	6803      	ldr	r3, [r0, #0]
 80033c6:	429c      	cmp	r4, r3
 80033c8:	686b      	ldr	r3, [r5, #4]
 80033ca:	d001      	beq.n	80033d0 <xTaskCheckForTimeOut+0x34>
 80033cc:	4299      	cmp	r1, r3
 80033ce:	d229      	bcs.n	8003424 <xTaskCheckForTimeOut+0x88>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80033d0:	1acc      	subs	r4, r1, r3
 80033d2:	42a2      	cmp	r2, r4
 80033d4:	d926      	bls.n	8003424 <xTaskCheckForTimeOut+0x88>
 80033d6:	1a52      	subs	r2, r2, r1
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80033d8:	4413      	add	r3, r2
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033da:	6801      	ldr	r1, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80033dc:	683a      	ldr	r2, [r7, #0]
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80033de:	6033      	str	r3, [r6, #0]

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
	pxTimeOut->xTimeOnEntering = xTickCount;
 80033e0:	e885 0006 	stmia.w	r5, {r1, r2}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
 80033e4:	2400      	movs	r4, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 80033e6:	f7fe fe25 	bl	8002034 <vPortExitCritical>

	return xReturn;
}
 80033ea:	4620      	mov	r0, r4
 80033ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
				xReturn = pdTRUE;
 80033f6:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 80033f8:	f7fe fe1c 	bl	8002034 <vPortExitCritical>

	return xReturn;
}
 80033fc:	4620      	mov	r0, r4
 80033fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003400:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );
 8003410:	e7fe      	b.n	8003410 <xTaskCheckForTimeOut+0x74>
 8003412:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003422:	e7fe      	b.n	8003422 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003424:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8003426:	f7fe fe05 	bl	8002034 <vPortExitCritical>

	return xReturn;
}
 800342a:	4620      	mov	r0, r4
 800342c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800342e:	bf00      	nop
 8003430:	1ffe9b30 	.word	0x1ffe9b30
 8003434:	1ffe9b24 	.word	0x1ffe9b24
 8003438:	1ffe9a80 	.word	0x1ffe9a80

0800343c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 800343c:	4b01      	ldr	r3, [pc, #4]	; (8003444 <vTaskMissedYield+0x8>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	4770      	bx	lr
 8003444:	1ffe9b80 	.word	0x1ffe9b80

08003448 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <xTaskGetSchedulerState+0x18>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	b133      	cbz	r3, 800345c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <xTaskGetSchedulerState+0x1c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003454:	bf0c      	ite	eq
 8003456:	2002      	moveq	r0, #2
 8003458:	2000      	movne	r0, #0
 800345a:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800345c:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 800345e:	4770      	bx	lr
 8003460:	1ffe9a88 	.word	0x1ffe9a88
 8003464:	1ffe9a8c 	.word	0x1ffe9a8c

08003468 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8003468:	2800      	cmp	r0, #0
 800346a:	d042      	beq.n	80034f2 <vTaskPriorityInherit+0x8a>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800346c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003470:	4c21      	ldr	r4, [pc, #132]	; (80034f8 <vTaskPriorityInherit+0x90>)
 8003472:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003474:	6822      	ldr	r2, [r4, #0]
 8003476:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003478:	4293      	cmp	r3, r2
 800347a:	d212      	bcs.n	80034a2 <vTaskPriorityInherit+0x3a>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800347c:	6982      	ldr	r2, [r0, #24]
 800347e:	2a00      	cmp	r2, #0
 8003480:	db04      	blt.n	800348c <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003486:	f1c2 0205 	rsb	r2, r2, #5
 800348a:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800348c:	4d1b      	ldr	r5, [pc, #108]	; (80034fc <vTaskPriorityInherit+0x94>)
 800348e:	6942      	ldr	r2, [r0, #20]
 8003490:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003494:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003498:	429a      	cmp	r2, r3
 800349a:	d004      	beq.n	80034a6 <vTaskPriorityInherit+0x3e>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80034a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034a6:	f100 0804 	add.w	r8, r0, #4
 80034aa:	4607      	mov	r7, r0
 80034ac:	4640      	mov	r0, r8
 80034ae:	f7fe fd2b 	bl	8001f08 <uxListRemove>
 80034b2:	b9f8      	cbnz	r0, 80034f4 <vTaskPriorityInherit+0x8c>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	4e12      	ldr	r6, [pc, #72]	; (8003500 <vTaskPriorityInherit+0x98>)
 80034b8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80034bc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80034c0:	b932      	cbnz	r2, 80034d0 <vTaskPriorityInherit+0x68>
 80034c2:	6832      	ldr	r2, [r6, #0]
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	ea22 0303 	bic.w	r3, r2, r3
 80034ce:	6033      	str	r3, [r6, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80034d0:	6823      	ldr	r3, [r4, #0]
					prvAddTaskToReadyList( pxTCB );
 80034d2:	6832      	ldr	r2, [r6, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80034d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80034d6:	62f8      	str	r0, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80034d8:	2301      	movs	r3, #1
 80034da:	4083      	lsls	r3, r0
 80034dc:	4313      	orrs	r3, r2
 80034de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034e2:	4641      	mov	r1, r8
 80034e4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80034e8:	6033      	str	r3, [r6, #0]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 80034ee:	f7fe bce1 	b.w	8001eb4 <vListInsertEnd>
 80034f2:	4770      	bx	lr
 80034f4:	4e02      	ldr	r6, [pc, #8]	; (8003500 <vTaskPriorityInherit+0x98>)
 80034f6:	e7eb      	b.n	80034d0 <vTaskPriorityInherit+0x68>
 80034f8:	1ffe9b24 	.word	0x1ffe9b24
 80034fc:	1ffe9aa8 	.word	0x1ffe9aa8
 8003500:	1ffe9b7c 	.word	0x1ffe9b7c

08003504 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8003504:	b308      	cbz	r0, 800354a <xTaskPriorityDisinherit+0x46>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003508:	4b28      	ldr	r3, [pc, #160]	; (80035ac <xTaskPriorityDisinherit+0xa8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4298      	cmp	r0, r3
 800350e:	d008      	beq.n	8003522 <xTaskPriorityDisinherit+0x1e>
 8003510:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	e7fe      	b.n	8003520 <xTaskPriorityDisinherit+0x1c>

			configASSERT( pxTCB->uxMutexesHeld );
 8003522:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003524:	b943      	cbnz	r3, 8003538 <xTaskPriorityDisinherit+0x34>
 8003526:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	e7fe      	b.n	8003536 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003538:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800353a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800353c:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800353e:	4291      	cmp	r1, r2
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8003540:	6503      	str	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003542:	d000      	beq.n	8003546 <xTaskPriorityDisinherit+0x42>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003544:	b11b      	cbz	r3, 800354e <xTaskPriorityDisinherit+0x4a>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8003546:	2000      	movs	r0, #0
 8003548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800354a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 800354c:	4770      	bx	lr
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800354e:	1d07      	adds	r7, r0, #4
 8003550:	4604      	mov	r4, r0
 8003552:	4638      	mov	r0, r7
 8003554:	f7fe fcd8 	bl	8001f08 <uxListRemove>
 8003558:	b1b8      	cbz	r0, 800358a <xTaskPriorityDisinherit+0x86>
 800355a:	4815      	ldr	r0, [pc, #84]	; (80035b0 <xTaskPriorityDisinherit+0xac>)
 800355c:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <xTaskPriorityDisinherit+0xb0>)
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800355e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 8003560:	6816      	ldr	r6, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003562:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 8003564:	2501      	movs	r5, #1
 8003566:	fa05 fc03 	lsl.w	ip, r5, r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800356a:	f1c3 0e05 	rsb	lr, r3, #5
					prvAddTaskToReadyList( pxTCB );
 800356e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003572:	ea4c 0606 	orr.w	r6, ip, r6
 8003576:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800357a:	4639      	mov	r1, r7
					pxTCB->uxPriority = pxTCB->uxBasePriority;

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800357c:	f8c4 e018 	str.w	lr, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003580:	6016      	str	r6, [r2, #0]
 8003582:	f7fe fc97 	bl	8001eb4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003586:	4628      	mov	r0, r5
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8003588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800358a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800358c:	4808      	ldr	r0, [pc, #32]	; (80035b0 <xTaskPriorityDisinherit+0xac>)
 800358e:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <xTaskPriorityDisinherit+0xb0>)
 8003590:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003594:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e0      	bne.n	800355e <xTaskPriorityDisinherit+0x5a>
 800359c:	6813      	ldr	r3, [r2, #0]
 800359e:	2501      	movs	r5, #1
 80035a0:	408d      	lsls	r5, r1
 80035a2:	ea23 0305 	bic.w	r3, r3, r5
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	e7d9      	b.n	800355e <xTaskPriorityDisinherit+0x5a>
 80035aa:	bf00      	nop
 80035ac:	1ffe9b24 	.word	0x1ffe9b24
 80035b0:	1ffe9aa8 	.word	0x1ffe9aa8
 80035b4:	1ffe9b7c 	.word	0x1ffe9b7c

080035b8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <pvTaskIncrementMutexHeldCount+0x14>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	b11a      	cbz	r2, 80035c6 <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80035c2:	3201      	adds	r2, #1
 80035c4:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 80035c6:	6818      	ldr	r0, [r3, #0]
	}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	1ffe9b24 	.word	0x1ffe9b24

080035d0 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80035d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d4:	4d22      	ldr	r5, [pc, #136]	; (8003660 <prvSwitchTimerLists+0x90>)

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80035d6:	4e23      	ldr	r6, [pc, #140]	; (8003664 <prvSwitchTimerLists+0x94>)
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80035d8:	b084      	sub	sp, #16

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80035da:	46a8      	mov	r8, r5
	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80035dc:	f04f 0a00 	mov.w	sl, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80035e0:	e00d      	b.n	80035fe <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035e2:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035e4:	68dc      	ldr	r4, [r3, #12]
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035e6:	681f      	ldr	r7, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035e8:	f104 0904 	add.w	r9, r4, #4
 80035ec:	4648      	mov	r0, r9
 80035ee:	f7fe fc8b 	bl	8001f08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035f4:	4620      	mov	r0, r4
 80035f6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80035f8:	69e3      	ldr	r3, [r4, #28]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d00b      	beq.n	8003616 <prvSwitchTimerLists+0x46>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80035fe:	682b      	ldr	r3, [r5, #0]
 8003600:	4917      	ldr	r1, [pc, #92]	; (8003660 <prvSwitchTimerLists+0x90>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2a00      	cmp	r2, #0
 8003606:	d1ec      	bne.n	80035e2 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8003608:	4a17      	ldr	r2, [pc, #92]	; (8003668 <prvSwitchTimerLists+0x98>)
 800360a:	6810      	ldr	r0, [r2, #0]
 800360c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800360e:	6013      	str	r3, [r2, #0]
}
 8003610:	b004      	add	sp, #16
 8003612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003616:	69a3      	ldr	r3, [r4, #24]
 8003618:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 800361a:	42bb      	cmp	r3, r7
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800361c:	4649      	mov	r1, r9
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
			if( xReloadTime > xNextExpireTime )
 800361e:	d818      	bhi.n	8003652 <prvSwitchTimerLists+0x82>

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003620:	6833      	ldr	r3, [r6, #0]
 8003622:	b16b      	cbz	r3, 8003640 <prvSwitchTimerLists+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003624:	f8cd a000 	str.w	sl, [sp]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003628:	9701      	str	r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800362a:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800362c:	f7ff ff0c 	bl	8003448 <xTaskGetSchedulerState>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003630:	2200      	movs	r2, #0
 8003632:	4613      	mov	r3, r2
 8003634:	6830      	ldr	r0, [r6, #0]
 8003636:	4669      	mov	r1, sp
 8003638:	f7fe ff6a 	bl	8002510 <xQueueGenericSend>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
				configASSERT( xResult );
 800363c:	2800      	cmp	r0, #0
 800363e:	d1de      	bne.n	80035fe <prvSwitchTimerLists+0x2e>
 8003640:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	e7fe      	b.n	8003650 <prvSwitchTimerLists+0x80>
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
			if( xReloadTime > xNextExpireTime )
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003652:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003654:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003656:	f8d8 0000 	ldr.w	r0, [r8]
 800365a:	f7fe fc3b 	bl	8001ed4 <vListInsert>
 800365e:	e7ce      	b.n	80035fe <prvSwitchTimerLists+0x2e>
 8003660:	1ffe9b84 	.word	0x1ffe9b84
 8003664:	1ffe9bb0 	.word	0x1ffe9bb0
 8003668:	1ffe9bb4 	.word	0x1ffe9bb4

0800366c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800366c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800366e:	4c1c      	ldr	r4, [pc, #112]	; (80036e0 <xTimerCreateTimerTask+0x74>)
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003670:	b083      	sub	sp, #12
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003672:	f7fe fcbd 	bl	8001ff0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003676:	6826      	ldr	r6, [r4, #0]
 8003678:	b1d6      	cbz	r6, 80036b0 <xTimerCreateTimerTask+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800367a:	f7fe fcdb 	bl	8002034 <vPortExitCritical>
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();

	if( xTimerQueue != NULL )
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	b16b      	cbz	r3, 800369e <xTimerCreateTimerTask+0x32>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003682:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <xTimerCreateTimerTask+0x78>)
 8003684:	4818      	ldr	r0, [pc, #96]	; (80036e8 <xTimerCreateTimerTask+0x7c>)
 8003686:	4919      	ldr	r1, [pc, #100]	; (80036ec <xTimerCreateTimerTask+0x80>)
 8003688:	2202      	movs	r2, #2
 800368a:	e88d 000c 	stmia.w	sp, {r2, r3}
 800368e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003692:	2300      	movs	r3, #0
 8003694:	f7ff f9fc 	bl	8002a90 <xTaskCreate>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003698:	b108      	cbz	r0, 800369e <xTimerCreateTimerTask+0x32>
	return xReturn;
}
 800369a:	b003      	add	sp, #12
 800369c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800369e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80036a2:	f383 8811 	msr	BASEPRI, r3
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	f3bf 8f4f 	dsb	sy
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80036ae:	e7fe      	b.n	80036ae <xTimerCreateTimerTask+0x42>
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 80036b0:	4f0f      	ldr	r7, [pc, #60]	; (80036f0 <xTimerCreateTimerTask+0x84>)
			vListInitialise( &xActiveTimerList2 );
 80036b2:	4d10      	ldr	r5, [pc, #64]	; (80036f4 <xTimerCreateTimerTask+0x88>)
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 80036b4:	4638      	mov	r0, r7
 80036b6:	f7fe fbed 	bl	8001e94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80036ba:	4628      	mov	r0, r5
 80036bc:	f7fe fbea 	bl	8001e94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80036c0:	4a0d      	ldr	r2, [pc, #52]	; (80036f8 <xTimerCreateTimerTask+0x8c>)
			pxOverflowTimerList = &xActiveTimerList2;
 80036c2:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <xTimerCreateTimerTask+0x90>)
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
 80036c4:	6017      	str	r7, [r2, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80036c6:	2005      	movs	r0, #5
 80036c8:	4632      	mov	r2, r6
 80036ca:	2110      	movs	r1, #16
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
 80036cc:	601d      	str	r5, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80036ce:	f7fe fed9 	bl	8002484 <xQueueGenericCreate>
 80036d2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80036d4:	2800      	cmp	r0, #0
 80036d6:	d0d0      	beq.n	800367a <xTimerCreateTimerTask+0xe>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80036d8:	4909      	ldr	r1, [pc, #36]	; (8003700 <xTimerCreateTimerTask+0x94>)
 80036da:	f7ff f92b 	bl	8002934 <vQueueAddToRegistry>
 80036de:	e7cc      	b.n	800367a <xTimerCreateTimerTask+0xe>
 80036e0:	1ffe9bb0 	.word	0x1ffe9bb0
 80036e4:	1ffe9bb8 	.word	0x1ffe9bb8
 80036e8:	0800376d 	.word	0x0800376d
 80036ec:	0800e584 	.word	0x0800e584
 80036f0:	1ffe9b88 	.word	0x1ffe9b88
 80036f4:	1ffe9b9c 	.word	0x1ffe9b9c
 80036f8:	1ffe9b84 	.word	0x1ffe9b84
 80036fc:	1ffe9bb4 	.word	0x1ffe9bb4
 8003700:	0800e57c 	.word	0x0800e57c

08003704 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003704:	b570      	push	{r4, r5, r6, lr}
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003706:	4604      	mov	r4, r0
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003708:	b084      	sub	sp, #16
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800370a:	b320      	cbz	r0, 8003756 <xTimerGenericCommand+0x52>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800370c:	4d16      	ldr	r5, [pc, #88]	; (8003768 <xTimerGenericCommand+0x64>)
 800370e:	6828      	ldr	r0, [r5, #0]
 8003710:	b188      	cbz	r0, 8003736 <xTimerGenericCommand+0x32>
 8003712:	4616      	mov	r6, r2
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003714:	2905      	cmp	r1, #5
 8003716:	461a      	mov	r2, r3
 8003718:	460b      	mov	r3, r1
	on a particular timer definition. */
	if( xTimerQueue != NULL )
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800371a:	e88d 0048 	stmia.w	sp, {r3, r6}
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800371e:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003720:	dc0b      	bgt.n	800373a <xTimerGenericCommand+0x36>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003722:	f7ff fe91 	bl	8003448 <xTaskGetSchedulerState>
 8003726:	2802      	cmp	r0, #2
 8003728:	d00d      	beq.n	8003746 <xTimerGenericCommand+0x42>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800372a:	2200      	movs	r2, #0
 800372c:	6828      	ldr	r0, [r5, #0]
 800372e:	4613      	mov	r3, r2
 8003730:	4669      	mov	r1, sp
 8003732:	f7fe feed 	bl	8002510 <xQueueGenericSend>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8003736:	b004      	add	sp, #16
 8003738:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800373a:	4669      	mov	r1, sp
 800373c:	2300      	movs	r3, #0
 800373e:	f7fe ffb7 	bl	80026b0 <xQueueGenericSendFromISR>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8003742:	b004      	add	sp, #16
 8003744:	bd70      	pop	{r4, r5, r6, pc}

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003746:	6828      	ldr	r0, [r5, #0]
 8003748:	9a08      	ldr	r2, [sp, #32]
 800374a:	4669      	mov	r1, sp
 800374c:	2300      	movs	r3, #0
 800374e:	f7fe fedf 	bl	8002510 <xQueueGenericSend>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8003752:	b004      	add	sp, #16
 8003754:	bd70      	pop	{r4, r5, r6, pc}
 8003756:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	e7fe      	b.n	8003766 <xTimerGenericCommand+0x62>
 8003768:	1ffe9bb0 	.word	0x1ffe9bb0

0800376c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800376c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003770:	4d8b      	ldr	r5, [pc, #556]	; (80039a0 <prvTimerTask+0x234>)
 8003772:	f8df 823c 	ldr.w	r8, [pc, #572]	; 80039b0 <prvTimerTask+0x244>
 8003776:	4c8b      	ldr	r4, [pc, #556]	; (80039a4 <prvTimerTask+0x238>)
 8003778:	b089      	sub	sp, #36	; 0x24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
 800377a:	46aa      	mov	sl, r5
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800377c:	4b8a      	ldr	r3, [pc, #552]	; (80039a8 <prvTimerTask+0x23c>)
 800377e:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003780:	681e      	ldr	r6, [r3, #0]
 8003782:	2e00      	cmp	r6, #0
 8003784:	d053      	beq.n	800382e <prvTimerTask+0xc2>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f8d3 b000 	ldr.w	fp, [r3]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800378c:	f7ff fafa 	bl	8002d84 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003790:	f7ff fb00 	bl	8002d94 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	4283      	cmp	r3, r0
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003798:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
 800379a:	d85a      	bhi.n	8003852 <prvTimerTask+0xe6>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800379c:	4583      	cmp	fp, r0
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 800379e:	f8ca 0000 	str.w	r0, [sl]
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80037a2:	d962      	bls.n	800386a <prvTimerTask+0xfe>
 80037a4:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80037a6:	ebc9 010b 	rsb	r1, r9, fp
 80037aa:	6820      	ldr	r0, [r4, #0]
 80037ac:	f7ff f8ee 	bl	800298c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80037b0:	f7ff fb94 	bl	8002edc <xTaskResumeAll>
 80037b4:	b938      	cbnz	r0, 80037c6 <prvTimerTask+0x5a>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 80037b6:	4a7d      	ldr	r2, [pc, #500]	; (80039ac <prvTimerTask+0x240>)
 80037b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	2601      	movs	r6, #1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037c8:	f04f 0900 	mov.w	r9, #0
 80037cc:	2200      	movs	r2, #0
 80037ce:	4613      	mov	r3, r2
 80037d0:	6820      	ldr	r0, [r4, #0]
 80037d2:	a904      	add	r1, sp, #16
 80037d4:	f7fe ffd8 	bl	8002788 <xQueueGenericReceive>
 80037d8:	2800      	cmp	r0, #0
 80037da:	d0cf      	beq.n	800377c <prvTimerTask+0x10>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80037dc:	9b04      	ldr	r3, [sp, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	db1d      	blt.n	800381e <prvTimerTask+0xb2>
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80037e2:	9f06      	ldr	r7, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	b112      	cbz	r2, 80037ee <prvTimerTask+0x82>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037e8:	1d38      	adds	r0, r7, #4
 80037ea:	f7fe fb8d 	bl	8001f08 <uxListRemove>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80037ee:	f7ff fad1 	bl	8002d94 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 80037f2:	682a      	ldr	r2, [r5, #0]
 80037f4:	4290      	cmp	r0, r2
 80037f6:	d333      	bcc.n	8003860 <prvTimerTask+0xf4>
 80037f8:	9a04      	ldr	r2, [sp, #16]
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 80037fa:	6028      	str	r0, [r5, #0]
 80037fc:	2a09      	cmp	r2, #9
 80037fe:	d8e5      	bhi.n	80037cc <prvTimerTask+0x60>
 8003800:	fa06 f202 	lsl.w	r2, r6, r2
 8003804:	f412 7f04 	tst.w	r2, #528	; 0x210
 8003808:	d171      	bne.n	80038ee <prvTimerTask+0x182>
 800380a:	f012 0fc7 	tst.w	r2, #199	; 0xc7
 800380e:	f040 8081 	bne.w	8003914 <prvTimerTask+0x1a8>
 8003812:	0693      	lsls	r3, r2, #26
 8003814:	d5da      	bpl.n	80037cc <prvTimerTask+0x60>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8003816:	4638      	mov	r0, r7
 8003818:	f7fe fb2e 	bl	8001e78 <vPortFree>
 800381c:	e7d6      	b.n	80037cc <prvTimerTask+0x60>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800381e:	9b05      	ldr	r3, [sp, #20]
 8003820:	9806      	ldr	r0, [sp, #24]
 8003822:	9907      	ldr	r1, [sp, #28]
 8003824:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003826:	9b04      	ldr	r3, [sp, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	dbcf      	blt.n	80037cc <prvTimerTask+0x60>
 800382c:	e7d9      	b.n	80037e2 <prvTimerTask+0x76>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800382e:	f7ff faa9 	bl	8002d84 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003832:	f7ff faaf 	bl	8002d94 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 8003836:	682b      	ldr	r3, [r5, #0]
 8003838:	4298      	cmp	r0, r3
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800383a:	4681      	mov	r9, r0

	if( xTimeNow < xLastTime )
 800383c:	d309      	bcc.n	8003852 <prvTimerTask+0xe6>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800383e:	f8d8 3000 	ldr.w	r3, [r8]
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 8003842:	f8ca 0000 	str.w	r0, [sl]
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	fab2 f282 	clz	r2, r2
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800384c:	46b3      	mov	fp, r6
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800384e:	0952      	lsrs	r2, r2, #5
 8003850:	e7a9      	b.n	80037a6 <prvTimerTask+0x3a>

	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
 8003852:	f7ff febd 	bl	80035d0 <prvSwitchTimerLists>
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 8003856:	f8c5 9000 	str.w	r9, [r5]
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 800385a:	f7ff fb3f 	bl	8002edc <xTaskResumeAll>
 800385e:	e7b2      	b.n	80037c6 <prvTimerTask+0x5a>
 8003860:	9003      	str	r0, [sp, #12]

	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
 8003862:	f7ff feb5 	bl	80035d0 <prvSwitchTimerLists>
 8003866:	9803      	ldr	r0, [sp, #12]
 8003868:	e7c6      	b.n	80037f8 <prvTimerTask+0x8c>
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
			{
				( void ) xTaskResumeAll();
 800386a:	f7ff fb37 	bl	8002edc <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800386e:	4b4e      	ldr	r3, [pc, #312]	; (80039a8 <prvTimerTask+0x23c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	68de      	ldr	r6, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003876:	1d31      	adds	r1, r6, #4
 8003878:	4608      	mov	r0, r1
 800387a:	9103      	str	r1, [sp, #12]
 800387c:	f7fe fb44 	bl	8001f08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003880:	69f2      	ldr	r2, [r6, #28]
 8003882:	9903      	ldr	r1, [sp, #12]
 8003884:	2a01      	cmp	r2, #1
 8003886:	d003      	beq.n	8003890 <prvTimerTask+0x124>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003888:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800388a:	4630      	mov	r0, r6
 800388c:	4798      	blx	r3
 800388e:	e79a      	b.n	80037c6 <prvTimerTask+0x5a>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003890:	69b2      	ldr	r2, [r6, #24]
static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003892:	6136      	str	r6, [r6, #16]
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003894:	eb0b 0002 	add.w	r0, fp, r2
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8003898:	4548      	cmp	r0, r9

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800389a:	6070      	str	r0, [r6, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800389c:	d822      	bhi.n	80038e4 <prvTimerTask+0x178>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800389e:	ebcb 0909 	rsb	r9, fp, r9
 80038a2:	454a      	cmp	r2, r9
 80038a4:	d85d      	bhi.n	8003962 <prvTimerTask+0x1f6>

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80038a6:	6822      	ldr	r2, [r4, #0]
 80038a8:	4b3e      	ldr	r3, [pc, #248]	; (80039a4 <prvTimerTask+0x238>)
 80038aa:	b192      	cbz	r2, 80038d2 <prvTimerTask+0x166>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80038ac:	f04f 0900 	mov.w	r9, #0
 80038b0:	9303      	str	r3, [sp, #12]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80038b2:	f8cd b014 	str.w	fp, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80038b6:	9606      	str	r6, [sp, #24]
	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80038b8:	f8cd 9010 	str.w	r9, [sp, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80038bc:	f7ff fdc4 	bl	8003448 <xTaskGetSchedulerState>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80038c0:	9b03      	ldr	r3, [sp, #12]
 80038c2:	464a      	mov	r2, r9
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	a904      	add	r1, sp, #16
 80038c8:	464b      	mov	r3, r9
 80038ca:	f7fe fe21 	bl	8002510 <xQueueGenericSend>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
			configASSERT( xResult );
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d1da      	bne.n	8003888 <prvTimerTask+0x11c>
 80038d2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	e7fe      	b.n	80038e2 <prvTimerTask+0x176>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038e4:	4b30      	ldr	r3, [pc, #192]	; (80039a8 <prvTimerTask+0x23c>)
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	f7fe faf4 	bl	8001ed4 <vListInsert>
 80038ec:	e7cc      	b.n	8003888 <prvTimerTask+0x11c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80038ee:	9a05      	ldr	r2, [sp, #20]
 80038f0:	61ba      	str	r2, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80038f2:	2a00      	cmp	r2, #0
 80038f4:	d04a      	beq.n	800398c <prvTimerTask+0x220>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80038f6:	4402      	add	r2, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 80038f8:	4282      	cmp	r2, r0
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038fa:	bf88      	it	hi
 80038fc:	4b2a      	ldrhi	r3, [pc, #168]	; (80039a8 <prvTimerTask+0x23c>)

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80038fe:	607a      	str	r2, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003900:	613f      	str	r7, [r7, #16]
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003902:	f107 0104 	add.w	r1, r7, #4
 8003906:	bf94      	ite	ls
 8003908:	f8d8 0000 	ldrls.w	r0, [r8]
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800390c:	6818      	ldrhi	r0, [r3, #0]
 800390e:	f7fe fae1 	bl	8001ed4 <vListInsert>
 8003912:	e75b      	b.n	80037cc <prvTimerTask+0x60>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003914:	9a05      	ldr	r2, [sp, #20]
 8003916:	69bb      	ldr	r3, [r7, #24]
static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003918:	613f      	str	r7, [r7, #16]
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800391a:	1899      	adds	r1, r3, r2
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800391c:	4281      	cmp	r1, r0

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800391e:	6079      	str	r1, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8003920:	d824      	bhi.n	800396c <prvTimerTask+0x200>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003922:	1a82      	subs	r2, r0, r2
 8003924:	4293      	cmp	r3, r2
 8003926:	d82b      	bhi.n	8003980 <prvTimerTask+0x214>
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392a:	4638      	mov	r0, r7
 800392c:	4790      	blx	r2
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	2a01      	cmp	r2, #1
 8003932:	f47f af4b 	bne.w	80037cc <prvTimerTask+0x60>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	9a05      	ldr	r2, [sp, #20]
 800393a:	f8cd 9000 	str.w	r9, [sp]
 800393e:	2100      	movs	r1, #0
 8003940:	441a      	add	r2, r3
 8003942:	4638      	mov	r0, r7
 8003944:	460b      	mov	r3, r1
 8003946:	f7ff fedd 	bl	8003704 <xTimerGenericCommand>
							configASSERT( xResult );
 800394a:	2800      	cmp	r0, #0
 800394c:	f47f af3e 	bne.w	80037cc <prvTimerTask+0x60>
 8003950:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	e7fe      	b.n	8003960 <prvTimerTask+0x1f4>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003962:	f8d8 0000 	ldr.w	r0, [r8]
 8003966:	f7fe fab5 	bl	8001ed4 <vListInsert>
 800396a:	e78d      	b.n	8003888 <prvTimerTask+0x11c>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800396c:	4282      	cmp	r2, r0
 800396e:	d901      	bls.n	8003974 <prvTimerTask+0x208>
 8003970:	428a      	cmp	r2, r1
 8003972:	d9d9      	bls.n	8003928 <prvTimerTask+0x1bc>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <prvTimerTask+0x23c>)
 8003976:	1d39      	adds	r1, r7, #4
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	f7fe faab 	bl	8001ed4 <vListInsert>
 800397e:	e725      	b.n	80037cc <prvTimerTask+0x60>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003980:	1d39      	adds	r1, r7, #4
 8003982:	f8d8 0000 	ldr.w	r0, [r8]
 8003986:	f7fe faa5 	bl	8001ed4 <vListInsert>
 800398a:	e71f      	b.n	80037cc <prvTimerTask+0x60>
 800398c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	e7fe      	b.n	800399c <prvTimerTask+0x230>
 800399e:	bf00      	nop
 80039a0:	1ffe9bbc 	.word	0x1ffe9bbc
 80039a4:	1ffe9bb0 	.word	0x1ffe9bb0
 80039a8:	1ffe9b84 	.word	0x1ffe9b84
 80039ac:	e000ed04 	.word	0xe000ed04
 80039b0:	1ffe9bb4 	.word	0x1ffe9bb4

080039b4 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 80039b4:	b510      	push	{r4, lr}
 80039b6:	4604      	mov	r4, r0
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 80039b8:	1d02      	adds	r2, r0, #4
 80039ba:	7c21      	ldrb	r1, [r4, #16]
 80039bc:	6800      	ldr	r0, [r0, #0]
 80039be:	f7fc fcbd 	bl	800033c <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 80039c2:	6820      	ldr	r0, [r4, #0]
 80039c4:	7c21      	ldrb	r1, [r4, #16]
 80039c6:	7c62      	ldrb	r2, [r4, #17]
 80039c8:	f7fd f946 	bl	8000c58 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
}
 80039cc:	2000      	movs	r0, #0
 80039ce:	bd10      	pop	{r4, pc}

080039d0 <SystemCoreSetup>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039d0:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <SystemCoreSetup+0x64>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80039d2:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <SystemCoreSetup+0x68>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039d4:	68d8      	ldr	r0, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039d6:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80039da:	4001      	ands	r1, r0
  reg_value  =  (reg_value                                   |
 80039dc:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80039de:	60da      	str	r2, [r3, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039e0:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80039e2:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <SystemCoreSetup+0x6c>)
 80039e4:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80039e6:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80039ea:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80039ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80039f0:	4813      	ldr	r0, [pc, #76]	; (8003a40 <SystemCoreSetup+0x70>)

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80039f2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80039f6:	f241 0114 	movw	r1, #4116	; 0x1014

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80039fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80039fe:	5842      	ldr	r2, [r0, r1]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8003a00:	f022 020f 	bic.w	r2, r2, #15
  temp |= PMU_FLASH_WS;
 8003a04:	f042 0204 	orr.w	r2, r2, #4
  FLASH0->FCON = temp;
 8003a08:	5042      	str	r2, [r0, r1]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	f022 0210 	bic.w	r2, r2, #16
 8003a10:	615a      	str	r2, [r3, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8003a12:	695a      	ldr	r2, [r3, #20]
 8003a14:	f022 0208 	bic.w	r2, r2, #8
 8003a18:	615a      	str	r2, [r3, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8003a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a24:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8003a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24
 8003a32:	4770      	bx	lr
 8003a34:	e000ed00 	.word	0xe000ed00
 8003a38:	05fa0100 	.word	0x05fa0100
 8003a3c:	08000000 	.word	0x08000000
 8003a40:	58001000 	.word	0x58001000

08003a44 <CLOCK_XMC4_Init>:
{
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8003a44:	2301      	movs	r3, #1
 8003a46:	7003      	strb	r3, [r0, #0]

  return (status);
}
 8003a48:	2000      	movs	r0, #0
 8003a4a:	4770      	bx	lr

08003a4c <OSCHP_GetFrequency>:
#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
}
 8003a4c:	4800      	ldr	r0, [pc, #0]	; (8003a50 <OSCHP_GetFrequency+0x4>)
 8003a4e:	4770      	bx	lr
 8003a50:	00b71b00 	.word	0x00b71b00

08003a54 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8003a54:	b530      	push	{r4, r5, lr}
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8003a56:	4d11      	ldr	r5, [pc, #68]	; (8003a9c <SystemCoreClockSetup+0x48>)
 8003a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8003a5a:	b087      	sub	sp, #28
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8003a5c:	ac01      	add	r4, sp, #4
 8003a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a60:	682b      	ldr	r3, [r5, #0]
 8003a62:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8003a64:	a801      	add	r0, sp, #4
 8003a66:	f7fc fe15 	bl	8000694 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	f7fc fcd6 	bl	800041c <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8003a70:	2000      	movs	r0, #0
 8003a72:	f7fc fcbf 	bl	80003f4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8003a76:	2004      	movs	r0, #4
 8003a78:	f7fc fce0 	bl	800043c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8003a7c:	2120      	movs	r1, #32
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f7fc fd0c 	bl	800049c <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8003a84:	2000      	movs	r0, #0
 8003a86:	f7fc fcbf 	bl	8000408 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	f7fc fcea 	bl	8000464 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8003a90:	2001      	movs	r0, #1
 8003a92:	f7fc fcdd 	bl	8000450 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8003a96:	b007      	add	sp, #28
 8003a98:	bd30      	pop	{r4, r5, pc}
 8003a9a:	bf00      	nop
 8003a9c:	0800e618 	.word	0x0800e618

08003aa0 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8003aa0:	b508      	push	{r3, lr}
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8003aa2:	481e      	ldr	r0, [pc, #120]	; (8003b1c <DAVE_Init+0x7c>)
 8003aa4:	f7ff ffce 	bl	8003a44 <CLOCK_XMC4_Init>

  if (init_status == DAVE_STATUS_SUCCESS)
 8003aa8:	b100      	cbz	r0, 8003aac <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance TEST_PIN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&TEST_PIN); 
   }  
  return init_status;
} /**  End of function DAVE_Init */
 8003aaa:	bd08      	pop	{r3, pc}
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);

  if (init_status == DAVE_STATUS_SUCCESS)
  {
	 /**  Initialization of DIGITAL_IO APP instance LED1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED1); 
 8003aac:	481c      	ldr	r0, [pc, #112]	; (8003b20 <DAVE_Init+0x80>)
 8003aae:	f7ff ff81 	bl	80039b4 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d1f9      	bne.n	8003aaa <DAVE_Init+0xa>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED2); 
 8003ab6:	481b      	ldr	r0, [pc, #108]	; (8003b24 <DAVE_Init+0x84>)
 8003ab8:	f7ff ff7c 	bl	80039b4 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003abc:	2800      	cmp	r0, #0
 8003abe:	d1f4      	bne.n	8003aaa <DAVE_Init+0xa>
  {
	 /**  Initialization of DIGITAL_IO APP instance ENC_B */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ENC_B); 
 8003ac0:	4819      	ldr	r0, [pc, #100]	; (8003b28 <DAVE_Init+0x88>)
 8003ac2:	f7ff ff77 	bl	80039b4 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d1ef      	bne.n	8003aaa <DAVE_Init+0xa>
  {
	 /**  Initialization of DIGITAL_IO APP instance ENC_A */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ENC_A); 
 8003aca:	4818      	ldr	r0, [pc, #96]	; (8003b2c <DAVE_Init+0x8c>)
 8003acc:	f7ff ff72 	bl	80039b4 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d1ea      	bne.n	8003aaa <DAVE_Init+0xa>
  {
	 /**  Initialization of INTERRUPT APP instance ENCODER_INTERRUPT */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&ENCODER_INTERRUPT); 
 8003ad4:	4816      	ldr	r0, [pc, #88]	; (8003b30 <DAVE_Init+0x90>)
 8003ad6:	f7fd ff6b 	bl	80019b0 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d1e5      	bne.n	8003aaa <DAVE_Init+0xa>
  {
	 /**  Initialization of TIMER APP instance ENCODER_TIMER */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&ENCODER_TIMER); 
 8003ade:	4815      	ldr	r0, [pc, #84]	; (8003b34 <DAVE_Init+0x94>)
 8003ae0:	f7fd fa46 	bl	8000f70 <TIMER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	d1e0      	bne.n	8003aaa <DAVE_Init+0xa>
  {
	 /**  Initialization of GUI_SEGGERLIBRARY APP instance GUI_SEGGERLIBRARY_0 */
	 init_status = (DAVE_STATUS_t)GUI_SEGGERLIBRARY_Init(&GUI_SEGGERLIBRARY_0); 
 8003ae8:	4813      	ldr	r0, [pc, #76]	; (8003b38 <DAVE_Init+0x98>)
 8003aea:	f7fe f8f5 	bl	8001cd8 <GUI_SEGGERLIBRARY_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d1db      	bne.n	8003aaa <DAVE_Init+0xa>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_CCU8_0 */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_CCU8_0); 
 8003af2:	4812      	ldr	r0, [pc, #72]	; (8003b3c <DAVE_Init+0x9c>)
 8003af4:	f7fd fd6c 	bl	80015d0 <PWM_CCU8_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d1d6      	bne.n	8003aaa <DAVE_Init+0xa>
  {
	 /**  Initialization of DIGITAL_IO APP instance INH_1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INH_1); 
 8003afc:	4810      	ldr	r0, [pc, #64]	; (8003b40 <DAVE_Init+0xa0>)
 8003afe:	f7ff ff59 	bl	80039b4 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003b02:	2800      	cmp	r0, #0
 8003b04:	d1d1      	bne.n	8003aaa <DAVE_Init+0xa>
  {
	 /**  Initialization of DIGITAL_IO APP instance INH_2 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INH_2); 
 8003b06:	480f      	ldr	r0, [pc, #60]	; (8003b44 <DAVE_Init+0xa4>)
 8003b08:	f7ff ff54 	bl	80039b4 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d1cc      	bne.n	8003aaa <DAVE_Init+0xa>
  {
	 /**  Initialization of DIGITAL_IO APP instance TEST_PIN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&TEST_PIN); 
 8003b10:	480d      	ldr	r0, [pc, #52]	; (8003b48 <DAVE_Init+0xa8>)
   }  
  return init_status;
} /**  End of function DAVE_Init */
 8003b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INH_2); 
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
  {
	 /**  Initialization of DIGITAL_IO APP instance TEST_PIN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&TEST_PIN); 
 8003b16:	f7ff bf4d 	b.w	80039b4 <DIGITAL_IO_Init>
 8003b1a:	bf00      	nop
 8003b1c:	1ffe9bc0 	.word	0x1ffe9bc0
 8003b20:	0800e5a0 	.word	0x0800e5a0
 8003b24:	0800e5b4 	.word	0x0800e5b4
 8003b28:	0800e5f0 	.word	0x0800e5f0
 8003b2c:	0800e5dc 	.word	0x0800e5dc
 8003b30:	0800e548 	.word	0x0800e548
 8003b34:	1ffe8818 	.word	0x1ffe8818
 8003b38:	1ffe88c4 	.word	0x1ffe88c4
 8003b3c:	1ffe8890 	.word	0x1ffe8890
 8003b40:	0800e604 	.word	0x0800e604
 8003b44:	0800e5c8 	.word	0x0800e5c8
 8003b48:	0800e58c 	.word	0x0800e58c

08003b4c <CCU43_1_IRQHandler>:
		0, // 11 to 11
};

uint32_t counter = 0,  direction = 0, lut_index = 0;

void encoderInterrupt(void){
 8003b4c:	4a16      	ldr	r2, [pc, #88]	; (8003ba8 <CCU43_1_IRQHandler+0x5c>)
 8003b4e:	4b17      	ldr	r3, [pc, #92]	; (8003bac <CCU43_1_IRQHandler+0x60>)
 8003b50:	6811      	ldr	r1, [r2, #0]
 8003b52:	6818      	ldr	r0, [r3, #0]

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8003b54:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8003b56:	b4f0      	push	{r4, r5, r6, r7}
 8003b58:	7c1f      	ldrb	r7, [r3, #16]
 8003b5a:	6a43      	ldr	r3, [r0, #36]	; 0x24

	lut_index |= DIGITAL_IO_GetInput(&ENC_A)<<1 | DIGITAL_IO_GetInput(&ENC_B);
 8003b5c:	4814      	ldr	r0, [pc, #80]	; (8003bb0 <CCU43_1_IRQHandler+0x64>)
 8003b5e:	7c16      	ldrb	r6, [r2, #16]
 8003b60:	6802      	ldr	r2, [r0, #0]
	counter += counter_lut[lut_index];
 8003b62:	4d14      	ldr	r5, [pc, #80]	; (8003bb4 <CCU43_1_IRQHandler+0x68>)
 8003b64:	4c14      	ldr	r4, [pc, #80]	; (8003bb8 <CCU43_1_IRQHandler+0x6c>)
 8003b66:	40fb      	lsrs	r3, r7
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	40f1      	lsrs	r1, r6
 8003b6e:	f001 0101 	and.w	r1, r1, #1
 8003b72:	431a      	orrs	r2, r3

uint32_t counter = 0,  direction = 0, lut_index = 0;

void encoderInterrupt(void){

	lut_index |= DIGITAL_IO_GetInput(&ENC_A)<<1 | DIGITAL_IO_GetInput(&ENC_B);
 8003b74:	ea42 0341 	orr.w	r3, r2, r1, lsl #1
	counter += counter_lut[lut_index];
 8003b78:	6821      	ldr	r1, [r4, #0]
 8003b7a:	5ced      	ldrb	r5, [r5, r3]
 8003b7c:	b26a      	sxtb	r2, r5
 8003b7e:	4411      	add	r1, r2
 8003b80:	6021      	str	r1, [r4, #0]

	if (counter_lut[lut_index] != 0){
 8003b82:	b16d      	cbz	r5, 8003ba0 <CCU43_1_IRQHandler+0x54>
		direction = (counter_lut[lut_index] > 0) ? 1 : 0;
 8003b84:	2a00      	cmp	r2, #0
 8003b86:	490d      	ldr	r1, [pc, #52]	; (8003bbc <CCU43_1_IRQHandler+0x70>)
 8003b88:	bfd4      	ite	le
 8003b8a:	2200      	movle	r2, #0
 8003b8c:	2201      	movgt	r2, #1
 8003b8e:	600a      	str	r2, [r1, #0]
	}

	//Prepare for next iteration by shifting current state
	//bits to old state bits and also the direction bit
	lut_index = ((lut_index << 2) & 0b1100) | (direction<<4);
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003b9a:	6003      	str	r3, [r0, #0]
}
 8003b9c:	bcf0      	pop	{r4, r5, r6, r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	4a06      	ldr	r2, [pc, #24]	; (8003bbc <CCU43_1_IRQHandler+0x70>)
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	e7f4      	b.n	8003b90 <CCU43_1_IRQHandler+0x44>
 8003ba6:	bf00      	nop
 8003ba8:	0800e5dc 	.word	0x0800e5dc
 8003bac:	0800e5f0 	.word	0x0800e5f0
 8003bb0:	1ffe9bc8 	.word	0x1ffe9bc8
 8003bb4:	1ffe88f4 	.word	0x1ffe88f4
 8003bb8:	1ffe9bcc 	.word	0x1ffe9bcc
 8003bbc:	1ffe9bc4 	.word	0x1ffe9bc4

08003bc0 <getEncoderValue>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bc0:	b672      	cpsid	i

uint32_t getEncoderValue(void){
	__disable_irq();
	uint32_t encoder_value = counter;
 8003bc2:	4b02      	ldr	r3, [pc, #8]	; (8003bcc <getEncoderValue+0xc>)
 8003bc4:	6818      	ldr	r0, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003bc6:	b662      	cpsie	i
	__enable_irq();
	return encoder_value;
}
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	1ffe9bcc 	.word	0x1ffe9bcc

08003bd0 <setupFuzzyController>:
void inference (void);
float fuzzyAnd(float a, float b);
float defuzzify(struct fuzzy_variable fuzzy_var, float samples, uint32_t number_of_mf);


void setupFuzzyController(void){
 8003bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t i;

	// Allocate memory for each fuzzy variable
	speed_error_fuzzy.mf = malloc(sizeof(struct mf_struct)*speed_error_mf_count);
 8003bd4:	203c      	movs	r0, #60	; 0x3c
void inference (void);
float fuzzyAnd(float a, float b);
float defuzzify(struct fuzzy_variable fuzzy_var, float samples, uint32_t number_of_mf);


void setupFuzzyController(void){
 8003bd6:	b085      	sub	sp, #20
	uint8_t i;

	// Allocate memory for each fuzzy variable
	speed_error_fuzzy.mf = malloc(sizeof(struct mf_struct)*speed_error_mf_count);
 8003bd8:	f009 ff6c 	bl	800dab4 <malloc>
 8003bdc:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 8003eb8 <setupFuzzyController+0x2e8>
	speed_error_fuzzy.mf_values = malloc(sizeof(float)*speed_error_mf_count);

	accel_fuzzy.mf = malloc(sizeof(struct mf_struct)*accel_mf_count);
 8003be0:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 8003ebc <setupFuzzyController+0x2ec>
	accel_fuzzy.mf_values = malloc(sizeof(float)*accel_mf_count);

	position_error_fuzzy.mf = malloc(sizeof(struct mf_struct)*position_error_mf_count);
 8003be4:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 8003ec0 <setupFuzzyController+0x2f0>

void setupFuzzyController(void){
	uint8_t i;

	// Allocate memory for each fuzzy variable
	speed_error_fuzzy.mf = malloc(sizeof(struct mf_struct)*speed_error_mf_count);
 8003be8:	4607      	mov	r7, r0
	speed_error_fuzzy.mf_values = malloc(sizeof(float)*speed_error_mf_count);
 8003bea:	2014      	movs	r0, #20

void setupFuzzyController(void){
	uint8_t i;

	// Allocate memory for each fuzzy variable
	speed_error_fuzzy.mf = malloc(sizeof(struct mf_struct)*speed_error_mf_count);
 8003bec:	f8cb 7000 	str.w	r7, [fp]
	speed_error_fuzzy.mf_values = malloc(sizeof(float)*speed_error_mf_count);
 8003bf0:	f009 ff60 	bl	800dab4 <malloc>
 8003bf4:	4684      	mov	ip, r0

	accel_fuzzy.mf = malloc(sizeof(struct mf_struct)*accel_mf_count);
 8003bf6:	2024      	movs	r0, #36	; 0x24
void setupFuzzyController(void){
	uint8_t i;

	// Allocate memory for each fuzzy variable
	speed_error_fuzzy.mf = malloc(sizeof(struct mf_struct)*speed_error_mf_count);
	speed_error_fuzzy.mf_values = malloc(sizeof(float)*speed_error_mf_count);
 8003bf8:	f8cb c004 	str.w	ip, [fp, #4]
 8003bfc:	f8cd c000 	str.w	ip, [sp]

	accel_fuzzy.mf = malloc(sizeof(struct mf_struct)*accel_mf_count);
 8003c00:	f009 ff58 	bl	800dab4 <malloc>
 8003c04:	4680      	mov	r8, r0
	accel_fuzzy.mf_values = malloc(sizeof(float)*accel_mf_count);
 8003c06:	200c      	movs	r0, #12

	// Allocate memory for each fuzzy variable
	speed_error_fuzzy.mf = malloc(sizeof(struct mf_struct)*speed_error_mf_count);
	speed_error_fuzzy.mf_values = malloc(sizeof(float)*speed_error_mf_count);

	accel_fuzzy.mf = malloc(sizeof(struct mf_struct)*accel_mf_count);
 8003c08:	f8ca 8000 	str.w	r8, [sl]
	accel_fuzzy.mf_values = malloc(sizeof(float)*accel_mf_count);
 8003c0c:	f009 ff52 	bl	800dab4 <malloc>
 8003c10:	4603      	mov	r3, r0

	position_error_fuzzy.mf = malloc(sizeof(struct mf_struct)*position_error_mf_count);
 8003c12:	203c      	movs	r0, #60	; 0x3c
	// Allocate memory for each fuzzy variable
	speed_error_fuzzy.mf = malloc(sizeof(struct mf_struct)*speed_error_mf_count);
	speed_error_fuzzy.mf_values = malloc(sizeof(float)*speed_error_mf_count);

	accel_fuzzy.mf = malloc(sizeof(struct mf_struct)*accel_mf_count);
	accel_fuzzy.mf_values = malloc(sizeof(float)*accel_mf_count);
 8003c14:	f8ca 3004 	str.w	r3, [sl, #4]
 8003c18:	9303      	str	r3, [sp, #12]

	position_error_fuzzy.mf = malloc(sizeof(struct mf_struct)*position_error_mf_count);
 8003c1a:	f009 ff4b 	bl	800dab4 <malloc>
 8003c1e:	4606      	mov	r6, r0
	position_error_fuzzy.mf_values = malloc(sizeof(float)*position_error_mf_count);
 8003c20:	2014      	movs	r0, #20
	speed_error_fuzzy.mf_values = malloc(sizeof(float)*speed_error_mf_count);

	accel_fuzzy.mf = malloc(sizeof(struct mf_struct)*accel_mf_count);
	accel_fuzzy.mf_values = malloc(sizeof(float)*accel_mf_count);

	position_error_fuzzy.mf = malloc(sizeof(struct mf_struct)*position_error_mf_count);
 8003c22:	f8c9 6000 	str.w	r6, [r9]
	position_error_fuzzy.mf_values = malloc(sizeof(float)*position_error_mf_count);
 8003c26:	f009 ff45 	bl	800dab4 <malloc>
 8003c2a:	4601      	mov	r1, r0

	pwm_fuzzy.mf = malloc(sizeof(struct mf_struct)*pwm_mf_count);
 8003c2c:	2054      	movs	r0, #84	; 0x54

	accel_fuzzy.mf = malloc(sizeof(struct mf_struct)*accel_mf_count);
	accel_fuzzy.mf_values = malloc(sizeof(float)*accel_mf_count);

	position_error_fuzzy.mf = malloc(sizeof(struct mf_struct)*position_error_mf_count);
	position_error_fuzzy.mf_values = malloc(sizeof(float)*position_error_mf_count);
 8003c2e:	f8c9 1004 	str.w	r1, [r9, #4]
 8003c32:	9102      	str	r1, [sp, #8]

	pwm_fuzzy.mf = malloc(sizeof(struct mf_struct)*pwm_mf_count);
 8003c34:	f009 ff3e 	bl	800dab4 <malloc>
 8003c38:	4b94      	ldr	r3, [pc, #592]	; (8003e8c <setupFuzzyController+0x2bc>)
 8003c3a:	4604      	mov	r4, r0
	pwm_fuzzy.mf_values = malloc(sizeof(float)*pwm_mf_count);
 8003c3c:	201c      	movs	r0, #28
	accel_fuzzy.mf_values = malloc(sizeof(float)*accel_mf_count);

	position_error_fuzzy.mf = malloc(sizeof(struct mf_struct)*position_error_mf_count);
	position_error_fuzzy.mf_values = malloc(sizeof(float)*position_error_mf_count);

	pwm_fuzzy.mf = malloc(sizeof(struct mf_struct)*pwm_mf_count);
 8003c3e:	601c      	str	r4, [r3, #0]
	pwm_fuzzy.mf_values = malloc(sizeof(float)*pwm_mf_count);
 8003c40:	f009 ff38 	bl	800dab4 <malloc>
 8003c44:	4b91      	ldr	r3, [pc, #580]	; (8003e8c <setupFuzzyController+0x2bc>)
 8003c46:	4602      	mov	r2, r0

	speed_ref_fuzzy.mf = malloc(sizeof(struct mf_struct)*speed_ref_mf_count);
 8003c48:	203c      	movs	r0, #60	; 0x3c

	position_error_fuzzy.mf = malloc(sizeof(struct mf_struct)*position_error_mf_count);
	position_error_fuzzy.mf_values = malloc(sizeof(float)*position_error_mf_count);

	pwm_fuzzy.mf = malloc(sizeof(struct mf_struct)*pwm_mf_count);
	pwm_fuzzy.mf_values = malloc(sizeof(float)*pwm_mf_count);
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	9201      	str	r2, [sp, #4]

	speed_ref_fuzzy.mf = malloc(sizeof(struct mf_struct)*speed_ref_mf_count);
 8003c4e:	f009 ff31 	bl	800dab4 <malloc>
 8003c52:	4b8f      	ldr	r3, [pc, #572]	; (8003e90 <setupFuzzyController+0x2c0>)
 8003c54:	4605      	mov	r5, r0
	speed_ref_fuzzy.mf_values = malloc(sizeof(float)*speed_ref_mf_count);
 8003c56:	2014      	movs	r0, #20
	position_error_fuzzy.mf_values = malloc(sizeof(float)*position_error_mf_count);

	pwm_fuzzy.mf = malloc(sizeof(struct mf_struct)*pwm_mf_count);
	pwm_fuzzy.mf_values = malloc(sizeof(float)*pwm_mf_count);

	speed_ref_fuzzy.mf = malloc(sizeof(struct mf_struct)*speed_ref_mf_count);
 8003c58:	601d      	str	r5, [r3, #0]
	speed_ref_fuzzy.mf_values = malloc(sizeof(float)*speed_ref_mf_count);
 8003c5a:	f009 ff2b 	bl	800dab4 <malloc>
 8003c5e:	f8dd c000 	ldr.w	ip, [sp]
 8003c62:	9902      	ldr	r1, [sp, #8]
 8003c64:	4a8a      	ldr	r2, [pc, #552]	; (8003e90 <setupFuzzyController+0x2c0>)
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003c66:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8003e94 <setupFuzzyController+0x2c4>
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003c6a:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8003e98 <setupFuzzyController+0x2c8>
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003c6e:	ed9f 5a8b 	vldr	s10, [pc, #556]	; 8003e9c <setupFuzzyController+0x2cc>
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003c72:	ed88 7a00 	vstr	s14, [r8]
 8003c76:	46e6      	mov	lr, ip

	pwm_fuzzy.mf = malloc(sizeof(struct mf_struct)*pwm_mf_count);
	pwm_fuzzy.mf_values = malloc(sizeof(float)*pwm_mf_count);

	speed_ref_fuzzy.mf = malloc(sizeof(struct mf_struct)*speed_ref_mf_count);
	speed_ref_fuzzy.mf_values = malloc(sizeof(float)*speed_ref_mf_count);
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f84e 0b04 	str.w	r0, [lr], #4
 8003c80:	f10e 0e04 	add.w	lr, lr, #4
 8003c84:	f8cc 0004 	str.w	r0, [ip, #4]
 8003c88:	f84e 0b04 	str.w	r0, [lr], #4
 8003c8c:	f84e 0b04 	str.w	r0, [lr], #4
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003c90:	eeb8 6a00 	vmov.f32	s12, #128	; 0x80
	mf->params[2] = p3;
 8003c94:	eef0 6a00 	vmov.f32	s13, #0

	pwm_fuzzy.mf = malloc(sizeof(struct mf_struct)*pwm_mf_count);
	pwm_fuzzy.mf_values = malloc(sizeof(float)*pwm_mf_count);

	speed_ref_fuzzy.mf = malloc(sizeof(struct mf_struct)*speed_ref_mf_count);
	speed_ref_fuzzy.mf_values = malloc(sizeof(float)*speed_ref_mf_count);
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	6053      	str	r3, [r2, #4]
 8003c9c:	f8ce 0000 	str.w	r0, [lr]
	assignMembershipFunctionParams(&(accel_fuzzy.mf[accel_N]), -180, -120,    0);
	assignMembershipFunctionParams(&(accel_fuzzy.mf[accel_Z]), -120,    0,  120);
	assignMembershipFunctionParams(&(accel_fuzzy.mf[accel_P]),    0,  120,  180);

	for(i=0; i<accel_mf_count; i++){
		accel_fuzzy.mf_values[i] = 0.0F;
 8003ca0:	9b03      	ldr	r3, [sp, #12]

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003ca2:	edc8 7a08 	vstr	s15, [r8, #32]
 8003ca6:	468e      	mov	lr, r1
 8003ca8:	f04f 0c00 	mov.w	ip, #0
 8003cac:	eebf 7a00 	vmov.f32	s14, #240	; 0xf0
 8003cb0:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003cb4:	eeb8 4a08 	vmov.f32	s8, #136	; 0x88
	for(i=0; i<speed_error_mf_count; i++){
		speed_error_fuzzy.mf_values[i] = 0.0F;
	}

	// Set the input range
	speed_error_fuzzy.range[0] = -2;
 8003cb8:	ed8b 6a02 	vstr	s12, [fp, #8]
	speed_error_fuzzy.range[1] = 2;
 8003cbc:	edcb 6a03 	vstr	s13, [fp, #12]

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003cc0:	f8df b200 	ldr.w	fp, [pc, #512]	; 8003ec4 <setupFuzzyController+0x2f4>
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003cc4:	ed87 4a00 	vstr	s8, [r7]
	mf->params[1] = p2;
 8003cc8:	ed87 6a01 	vstr	s12, [r7, #4]
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003ccc:	ed87 6a03 	vstr	s12, [r7, #12]
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003cd0:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003cd4:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
	mf->params[2] = p3;
 8003cd8:	ed87 7a02 	vstr	s14, [r7, #8]
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003cdc:	ed87 7a04 	vstr	s14, [r7, #16]
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003ce0:	ed87 7a06 	vstr	s14, [r7, #24]
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003ce4:	f8c7 c014 	str.w	ip, [r7, #20]
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003ce8:	f8c7 c01c 	str.w	ip, [r7, #28]
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003cec:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003cf0:	f8c8 c008 	str.w	ip, [r8, #8]
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003cf4:	f8c8 c010 	str.w	ip, [r8, #16]
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003cf8:	f8c8 c018 	str.w	ip, [r8, #24]
	assignMembershipFunctionParams(&(accel_fuzzy.mf[accel_N]), -180, -120,    0);
	assignMembershipFunctionParams(&(accel_fuzzy.mf[accel_Z]), -120,    0,  120);
	assignMembershipFunctionParams(&(accel_fuzzy.mf[accel_P]),    0,  120,  180);

	for(i=0; i<accel_mf_count; i++){
		accel_fuzzy.mf_values[i] = 0.0F;
 8003cfc:	f8c3 c000 	str.w	ip, [r3]

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003d00:	edc7 7a08 	vstr	s15, [r7, #32]
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003d04:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003d08:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003d0c:	f8c7 b038 	str.w	fp, [r7, #56]	; 0x38
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003d10:	ed88 5a01 	vstr	s10, [r8, #4]
 8003d14:	f84e 0b04 	str.w	r0, [lr], #4
 8003d18:	f10e 0e04 	add.w	lr, lr, #4
 8003d1c:	6048      	str	r0, [r1, #4]
 8003d1e:	9a01      	ldr	r2, [sp, #4]
 8003d20:	f84e 0b04 	str.w	r0, [lr], #4
	mf->params[2] = p3;
 8003d24:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003ea0 <setupFuzzyController+0x2d0>
 8003d28:	f84e 0b04 	str.w	r0, [lr], #4
	assignMembershipFunctionParams(&(accel_fuzzy.mf[accel_N]), -180, -120,    0);
	assignMembershipFunctionParams(&(accel_fuzzy.mf[accel_Z]), -120,    0,  120);
	assignMembershipFunctionParams(&(accel_fuzzy.mf[accel_P]),    0,  120,  180);

	for(i=0; i<accel_mf_count; i++){
		accel_fuzzy.mf_values[i] = 0.0F;
 8003d2c:	f8c3 c004 	str.w	ip, [r3, #4]
 8003d30:	f8c3 c008 	str.w	ip, [r3, #8]
 8003d34:	4613      	mov	r3, r2

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003d36:	f04f 473f 	mov.w	r7, #3204448256	; 0xbf000000
 8003d3a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003d3e:	ed88 5a03 	vstr	s10, [r8, #12]

	for(i=0; i<accel_mf_count; i++){
		accel_fuzzy.mf_values[i] = 0.0F;
	}

	accel_fuzzy.range[0] = -120;
 8003d42:	ed8a 5a02 	vstr	s10, [sl, #8]
	accel_fuzzy.range[1] = 120;
 8003d46:	edca 5a03 	vstr	s11, [sl, #12]
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003d4a:	eebf 5a08 	vmov.f32	s10, #248	; 0xf8
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003d4e:	f04f 5a7f 	mov.w	sl, #1069547520	; 0x3fc00000
 8003d52:	edc8 5a05 	vstr	s11, [r8, #20]
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003d56:	edc8 5a07 	vstr	s11, [r8, #28]
 8003d5a:	ed86 7a01 	vstr	s14, [r6, #4]
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003d5e:	ed86 7a03 	vstr	s14, [r6, #12]
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003d62:	f8c6 c014 	str.w	ip, [r6, #20]
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003d66:	f8c6 c01c 	str.w	ip, [r6, #28]
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003d6a:	f8c6 c024 	str.w	ip, [r6, #36]	; 0x24
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003d6e:	edc6 7a0b 	vstr	s15, [r6, #44]	; 0x2c
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003d72:	edc6 7a0d 	vstr	s15, [r6, #52]	; 0x34

	for(i=0; i<position_error_mf_count; i++){
		position_error_fuzzy.mf_values[i] = 0.0F;
	}

	position_error_fuzzy.range[0] = -1;
 8003d76:	ed89 7a02 	vstr	s14, [r9, #8]
	position_error_fuzzy.range[1] = 1;
 8003d7a:	edc9 7a03 	vstr	s15, [r9, #12]
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003d7e:	ed86 5a00 	vstr	s10, [r6]
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003d82:	f8c6 a038 	str.w	sl, [r6, #56]	; 0x38
 8003d86:	f8ce 0000 	str.w	r0, [lr]
 8003d8a:	60b7      	str	r7, [r6, #8]
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003d8c:	6137      	str	r7, [r6, #16]
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003d8e:	61b7      	str	r7, [r6, #24]
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003d90:	6231      	str	r1, [r6, #32]
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003d92:	62b1      	str	r1, [r6, #40]	; 0x28
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003d94:	ed84 4a00 	vstr	s8, [r4]
	mf->params[1] = p2;
 8003d98:	ed84 6a01 	vstr	s12, [r4, #4]
	mf->params[2] = p3;
 8003d9c:	ed84 7a02 	vstr	s14, [r4, #8]
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003da0:	ed84 7a03 	vstr	s14, [r4, #12]
 8003da4:	6331      	str	r1, [r6, #48]	; 0x30
 8003da6:	f843 0b04 	str.w	r0, [r3], #4
 8003daa:	3304      	adds	r3, #4
 8003dac:	6050      	str	r0, [r2, #4]
 8003dae:	f843 0b04 	str.w	r0, [r3], #4
 8003db2:	f843 0b04 	str.w	r0, [r3], #4
 8003db6:	f843 0b04 	str.w	r0, [r3], #4
 8003dba:	9a00      	ldr	r2, [sp, #0]
 8003dbc:	f843 0b04 	str.w	r0, [r3], #4
	mf->params[1] = p2;
 8003dc0:	eddf 4a38 	vldr	s9, [pc, #224]	; 8003ea4 <setupFuzzyController+0x2d4>
	mf->params[2] = p3;
 8003dc4:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8003ec8 <setupFuzzyController+0x2f8>

	for(i=0; i<pwm_mf_count; i++){
		pwm_fuzzy.mf_values[i] = 0.0F;
	}

	pwm_fuzzy.range[0] = -2;
 8003dc8:	4930      	ldr	r1, [pc, #192]	; (8003e8c <setupFuzzyController+0x2bc>)
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003dca:	eddf 5a37 	vldr	s11, [pc, #220]	; 8003ea8 <setupFuzzyController+0x2d8>
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003dce:	f8c4 8014 	str.w	r8, [r4, #20]
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003dd2:	f8c4 801c 	str.w	r8, [r4, #28]
 8003dd6:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8003ecc <setupFuzzyController+0x2fc>
	mf->params[2] = p3;
 8003dda:	4f34      	ldr	r7, [pc, #208]	; (8003eac <setupFuzzyController+0x2dc>)
 8003ddc:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8003ed0 <setupFuzzyController+0x300>
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003de0:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8003ed4 <setupFuzzyController+0x304>
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003de4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8003ed8 <setupFuzzyController+0x308>
 8003de8:	6018      	str	r0, [r3, #0]
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003dea:	edc4 4a04 	vstr	s9, [r4, #16]
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003dee:	edc4 4a06 	vstr	s9, [r4, #24]
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003df2:	f8c4 c020 	str.w	ip, [r4, #32]
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003df6:	f8c4 c028 	str.w	ip, [r4, #40]	; 0x28
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003dfa:	f8c4 c030 	str.w	ip, [r4, #48]	; 0x30
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003dfe:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003e02:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
	mf->params[1] = p2;
 8003e06:	edc4 6a13 	vstr	s13, [r4, #76]	; 0x4c
	mf->params[2] = p3;
 8003e0a:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50

	for(i=0; i<pwm_mf_count; i++){
		pwm_fuzzy.mf_values[i] = 0.0F;
	}

	pwm_fuzzy.range[0] = -2;
 8003e0e:	ed81 6a02 	vstr	s12, [r1, #8]
	pwm_fuzzy.range[1] = 2;
 8003e12:	edc1 6a03 	vstr	s13, [r1, #12]
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003e16:	ed85 6a00 	vstr	s12, [r5]
	mf->params[1] = p2;
 8003e1a:	ed85 7a01 	vstr	s14, [r5, #4]
	mf->params[2] = p3;
 8003e1e:	f8c5 c008 	str.w	ip, [r5, #8]
 8003e22:	f8c5 c014 	str.w	ip, [r5, #20]
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003e26:	f8c5 c01c 	str.w	ip, [r5, #28]
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003e2a:	f8c5 c024 	str.w	ip, [r5, #36]	; 0x24
 8003e2e:	edc4 5a09 	vstr	s11, [r4, #36]	; 0x24
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003e32:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003e36:	f8c5 9018 	str.w	r9, [r5, #24]
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003e3a:	f8c5 8020 	str.w	r8, [r5, #32]
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003e3e:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003e42:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
	mf->params[1] = p2;
	mf->params[2] = p3;
 8003e46:	63a7      	str	r7, [r4, #56]	; 0x38
 8003e48:	f842 0b04 	str.w	r0, [r2], #4
 8003e4c:	9b00      	ldr	r3, [sp, #0]
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003e4e:	4e18      	ldr	r6, [pc, #96]	; (8003eb0 <setupFuzzyController+0x2e0>)
 8003e50:	6058      	str	r0, [r3, #4]
 8003e52:	3204      	adds	r2, #4
	mf->params[1] = p2;
 8003e54:	ed9f 5a17 	vldr	s10, [pc, #92]	; 8003eb4 <setupFuzzyController+0x2e4>
 8003e58:	f842 0b04 	str.w	r0, [r2], #4

	for(i=0; i<speed_ref_mf_count; i++){
		speed_ref_fuzzy.mf_values[i] = 0.0F;
	}

	speed_ref_fuzzy.range[0] = -2;
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <setupFuzzyController+0x2c0>)
 8003e5e:	f842 0b04 	str.w	r0, [r2], #4
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
	mf->params[1] = p2;
 8003e62:	6427      	str	r7, [r4, #64]	; 0x40
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003e64:	60ee      	str	r6, [r5, #12]
	mf->params[1] = p2;
 8003e66:	612e      	str	r6, [r5, #16]
 8003e68:	ed85 5a0a 	vstr	s10, [r5, #40]	; 0x28
	mf->params[2] = p3;
 8003e6c:	ed85 5a0b 	vstr	s10, [r5, #44]	; 0x2c
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
}

// Assigns the 3 parameters of a triangular membership function
void assignMembershipFunctionParams(struct mf_struct* mf, float p1, float p2, float p3){
	mf->params[0] = p1;
 8003e70:	f8c5 c030 	str.w	ip, [r5, #48]	; 0x30
	mf->params[1] = p2;
 8003e74:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
	mf->params[2] = p3;
 8003e78:	edc5 6a0e 	vstr	s13, [r5, #56]	; 0x38

	for(i=0; i<speed_ref_mf_count; i++){
		speed_ref_fuzzy.mf_values[i] = 0.0F;
	}

	speed_ref_fuzzy.range[0] = -2;
 8003e7c:	ed83 6a02 	vstr	s12, [r3, #8]
	speed_ref_fuzzy.range[1] = 2;
 8003e80:	edc3 6a03 	vstr	s13, [r3, #12]
 8003e84:	6010      	str	r0, [r2, #0]
}
 8003e86:	b005      	add	sp, #20
 8003e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e8c:	1ffe9c94 	.word	0x1ffe9c94
 8003e90:	1ffe9c84 	.word	0x1ffe9c84
 8003e94:	c3340000 	.word	0xc3340000
 8003e98:	43340000 	.word	0x43340000
 8003e9c:	c2f00000 	.word	0xc2f00000
 8003ea0:	42f00000 	.word	0x42f00000
 8003ea4:	bf333333 	.word	0xbf333333
 8003ea8:	be99999a 	.word	0xbe99999a
 8003eac:	3f333333 	.word	0x3f333333
 8003eb0:	bf4ccccd 	.word	0xbf4ccccd
 8003eb4:	3f4ccccd 	.word	0x3f4ccccd
 8003eb8:	1ffe9ca4 	.word	0x1ffe9ca4
 8003ebc:	1ffe9cb4 	.word	0x1ffe9cb4
 8003ec0:	1ffe9cc4 	.word	0x1ffe9cc4
 8003ec4:	40400000 	.word	0x40400000
 8003ec8:	becccccd 	.word	0xbecccccd
 8003ecc:	3ecccccd 	.word	0x3ecccccd
 8003ed0:	3e99999a 	.word	0x3e99999a
 8003ed4:	be4ccccd 	.word	0xbe4ccccd
 8003ed8:	3e4ccccd 	.word	0x3e4ccccd

08003edc <inference>:
	}

	return ((mf.params[2] - input) / (mf.params[2] - mf.params[1]));
}

void inference (void){
 8003edc:	b538      	push	{r3, r4, r5, lr}
 8003ede:	4bbd      	ldr	r3, [pc, #756]	; (80041d4 <inference+0x2f8>)
 8003ee0:	685c      	ldr	r4, [r3, #4]
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	221c      	movs	r2, #28
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	f009 fe1a 	bl	800db20 <memset>
 8003eec:	4bba      	ldr	r3, [pc, #744]	; (80041d8 <inference+0x2fc>)
 8003eee:	685d      	ldr	r5, [r3, #4]
 8003ef0:	2214      	movs	r2, #20
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	f009 fe13 	bl	800db20 <memset>
	for(i=0; i<speed_ref_mf_count; i++){
		speed_ref_fuzzy.mf_values[i] = 0;
	}

	// 1) If Speed_Error is Z and Accel is Z then PWM is NoChange
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_Z],accel_fuzzy.mf_values[accel_Z]);
 8003efa:	4ab8      	ldr	r2, [pc, #736]	; (80041dc <inference+0x300>)
 8003efc:	4bb8      	ldr	r3, [pc, #736]	; (80041e0 <inference+0x304>)
 8003efe:	6852      	ldr	r2, [r2, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	edd2 7a02 	vldr	s15, [r2, #8]
 8003f06:	ed93 7a01 	vldr	s14, [r3, #4]

	if(and_result > pwm_fuzzy.mf_values[pwm_NoChange]){
 8003f0a:	ed94 6a03 	vldr	s12, [r4, #12]
	}

}

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
 8003f0e:	eef4 7a47 	vcmp.f32	s15, s14
 8003f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f16:	bf48      	it	mi
 8003f18:	eeb0 7a67 	vmovmi.f32	s14, s15
	}

	// 1) If Speed_Error is Z and Accel is Z then PWM is NoChange
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_Z],accel_fuzzy.mf_values[accel_Z]);

	if(and_result > pwm_fuzzy.mf_values[pwm_NoChange]){
 8003f1c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8003f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f24:	d505      	bpl.n	8003f32 <inference+0x56>
		pwm_fuzzy.mf_values[pwm_NoChange] = and_result;
 8003f26:	ed84 7a03 	vstr	s14, [r4, #12]
 8003f2a:	edd2 7a02 	vldr	s15, [r2, #8]
 8003f2e:	eeb0 6a47 	vmov.f32	s12, s14
	}

	// 2) If Speed_Error is Z and Accel is P then PWM is SDecrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_Z],accel_fuzzy.mf_values[accel_P]);
 8003f32:	ed93 7a02 	vldr	s14, [r3, #8]

	if(and_result > pwm_fuzzy.mf_values[pwm_SDecrease]){
 8003f36:	edd4 6a02 	vldr	s13, [r4, #8]
	}

}

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
 8003f3a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f42:	bfc8      	it	gt
 8003f44:	eeb0 7a67 	vmovgt.f32	s14, s15
	}

	// 2) If Speed_Error is Z and Accel is P then PWM is SDecrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_Z],accel_fuzzy.mf_values[accel_P]);

	if(and_result > pwm_fuzzy.mf_values[pwm_SDecrease]){
 8003f48:	eef4 6ac7 	vcmpe.f32	s13, s14
 8003f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f50:	d505      	bpl.n	8003f5e <inference+0x82>
			pwm_fuzzy.mf_values[pwm_SDecrease] = and_result;
 8003f52:	ed84 7a02 	vstr	s14, [r4, #8]
 8003f56:	edd2 7a02 	vldr	s15, [r2, #8]
 8003f5a:	eef0 6a47 	vmov.f32	s13, s14
	}

	// 3) If Speed_Error is Z and Accel is N then PWM is SIncrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_Z],accel_fuzzy.mf_values[accel_N]);
 8003f5e:	ed93 7a00 	vldr	s14, [r3]

	if(and_result > pwm_fuzzy.mf_values[pwm_SIncrease]){
 8003f62:	edd4 5a04 	vldr	s11, [r4, #16]
	}

}

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
 8003f66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6e:	bfd8      	it	le
 8003f70:	eef0 7a47 	vmovle.f32	s15, s14
	}

	// 3) If Speed_Error is Z and Accel is N then PWM is SIncrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_Z],accel_fuzzy.mf_values[accel_N]);

	if(and_result > pwm_fuzzy.mf_values[pwm_SIncrease]){
 8003f74:	eef4 5ae7 	vcmpe.f32	s11, s15
 8003f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			pwm_fuzzy.mf_values[pwm_SIncrease] = and_result;
 8003f7c:	bf44      	itt	mi
 8003f7e:	edc4 7a04 	vstrmi	s15, [r4, #16]
 8003f82:	eef0 5a67 	vmovmi.f32	s11, s15
	}

	// 4) If Speed_Error is P and Accel is Z then PWM is SIncrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_P],accel_fuzzy.mf_values[accel_Z]);
 8003f86:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f8a:	edd2 7a03 	vldr	s15, [r2, #12]
	}

}

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
 8003f8e:	eef4 7a47 	vcmp.f32	s15, s14
 8003f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f96:	bf48      	it	mi
 8003f98:	eeb0 7a67 	vmovmi.f32	s14, s15
	}

	// 4) If Speed_Error is P and Accel is Z then PWM is SIncrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_P],accel_fuzzy.mf_values[accel_Z]);

	if(and_result > pwm_fuzzy.mf_values[pwm_SIncrease]){
 8003f9c:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8003fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			pwm_fuzzy.mf_values[pwm_SIncrease] = and_result;
 8003fa4:	bfc4      	itt	gt
 8003fa6:	ed84 7a04 	vstrgt	s14, [r4, #16]
 8003faa:	edd2 7a03 	vldrgt	s15, [r2, #12]
	}

	// 5) If Speed_Error is P and Accel is P then PWM is NoChange
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_P],accel_fuzzy.mf_values[accel_P]);
 8003fae:	ed93 7a02 	vldr	s14, [r3, #8]
	}

}

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
 8003fb2:	eeb4 7a67 	vcmp.f32	s14, s15
 8003fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fba:	bfc8      	it	gt
 8003fbc:	eeb0 7a67 	vmovgt.f32	s14, s15
	}

	// 5) If Speed_Error is P and Accel is P then PWM is NoChange
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_P],accel_fuzzy.mf_values[accel_P]);

	if(and_result > pwm_fuzzy.mf_values[pwm_NoChange]){
 8003fc0:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8003fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc8:	d505      	bpl.n	8003fd6 <inference+0xfa>
			pwm_fuzzy.mf_values[pwm_NoChange] = and_result;
 8003fca:	ed84 7a03 	vstr	s14, [r4, #12]
 8003fce:	edd2 7a03 	vldr	s15, [r2, #12]
 8003fd2:	eeb0 6a47 	vmov.f32	s12, s14
	}

	// 6) If Speed_Error is P and Accel is N then PWM is MIncrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_P],accel_fuzzy.mf_values[accel_N]);
 8003fd6:	ed93 7a00 	vldr	s14, [r3]

	if(and_result > pwm_fuzzy.mf_values[pwm_MIncrease]){
 8003fda:	edd4 5a05 	vldr	s11, [r4, #20]
	}

}

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
 8003fde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe6:	bfd8      	it	le
 8003fe8:	eef0 7a47 	vmovle.f32	s15, s14
	}

	// 6) If Speed_Error is P and Accel is N then PWM is MIncrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_P],accel_fuzzy.mf_values[accel_N]);

	if(and_result > pwm_fuzzy.mf_values[pwm_MIncrease]){
 8003fec:	eef4 5ae7 	vcmpe.f32	s11, s15
 8003ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			pwm_fuzzy.mf_values[pwm_MIncrease] = and_result;
 8003ff4:	bf48      	it	mi
 8003ff6:	edc4 7a05 	vstrmi	s15, [r4, #20]
	}

	// 7) If Speed_Error is VP and Accel is Z then PWM is MIncrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_VP],accel_fuzzy.mf_values[accel_Z]);
 8003ffa:	ed93 7a01 	vldr	s14, [r3, #4]

	// 6) If Speed_Error is P and Accel is N then PWM is MIncrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_P],accel_fuzzy.mf_values[accel_N]);

	if(and_result > pwm_fuzzy.mf_values[pwm_MIncrease]){
			pwm_fuzzy.mf_values[pwm_MIncrease] = and_result;
 8003ffe:	bf48      	it	mi
 8004000:	eef0 5a67 	vmovmi.f32	s11, s15
	}

	// 7) If Speed_Error is VP and Accel is Z then PWM is MIncrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_VP],accel_fuzzy.mf_values[accel_Z]);
 8004004:	edd2 7a04 	vldr	s15, [r2, #16]
	}

}

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
 8004008:	eef4 7a47 	vcmp.f32	s15, s14
 800400c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004010:	bf48      	it	mi
 8004012:	eeb0 7a67 	vmovmi.f32	s14, s15
	}

	// 7) If Speed_Error is VP and Accel is Z then PWM is MIncrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_VP],accel_fuzzy.mf_values[accel_Z]);

	if(and_result > pwm_fuzzy.mf_values[pwm_MIncrease]){
 8004016:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800401a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			pwm_fuzzy.mf_values[pwm_MIncrease] = and_result;
 800401e:	bfc4      	itt	gt
 8004020:	ed84 7a05 	vstrgt	s14, [r4, #20]
 8004024:	edd2 7a04 	vldrgt	s15, [r2, #16]
	}

	// 8) If Speed_Error is VP and Accel is P then PWM is SIncrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_VP],accel_fuzzy.mf_values[accel_P]);
 8004028:	ed93 7a02 	vldr	s14, [r3, #8]

	if(and_result > pwm_fuzzy.mf_values[pwm_SIncrease]){
 800402c:	edd4 5a04 	vldr	s11, [r4, #16]
	}

}

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
 8004030:	eeb4 7a67 	vcmp.f32	s14, s15
 8004034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004038:	bfc8      	it	gt
 800403a:	eeb0 7a67 	vmovgt.f32	s14, s15
	}

	// 8) If Speed_Error is VP and Accel is P then PWM is SIncrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_VP],accel_fuzzy.mf_values[accel_P]);

	if(and_result > pwm_fuzzy.mf_values[pwm_SIncrease]){
 800403e:	eef4 5ac7 	vcmpe.f32	s11, s14
 8004042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			pwm_fuzzy.mf_values[pwm_SIncrease] = and_result;
 8004046:	bf44      	itt	mi
 8004048:	ed84 7a04 	vstrmi	s14, [r4, #16]
 800404c:	edd2 7a04 	vldrmi	s15, [r2, #16]
	}

	// 9) If Speed_Error is VP and Accel is N then PWM is BIncrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_VP],accel_fuzzy.mf_values[accel_N]);
 8004050:	ed93 7a00 	vldr	s14, [r3]

	if(and_result > pwm_fuzzy.mf_values[pwm_BIncrease]){
 8004054:	edd4 5a06 	vldr	s11, [r4, #24]
	}

}

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
 8004058:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800405c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004060:	bfd8      	it	le
 8004062:	eef0 7a47 	vmovle.f32	s15, s14
	}

	// 9) If Speed_Error is VP and Accel is N then PWM is BIncrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_VP],accel_fuzzy.mf_values[accel_N]);

	if(and_result > pwm_fuzzy.mf_values[pwm_BIncrease]){
 8004066:	eef4 5ae7 	vcmpe.f32	s11, s15
 800406a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			pwm_fuzzy.mf_values[pwm_BIncrease] = and_result;
 800406e:	bf48      	it	mi
 8004070:	edc4 7a06 	vstrmi	s15, [r4, #24]
	}

	// 10) If Speed_Error is N and Accel is Z then PWM is SDecrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_N],accel_fuzzy.mf_values[accel_Z]);
 8004074:	edd2 7a01 	vldr	s15, [r2, #4]
 8004078:	ed93 7a01 	vldr	s14, [r3, #4]
	}

}

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
 800407c:	eef4 7a47 	vcmp.f32	s15, s14
 8004080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004084:	bf48      	it	mi
 8004086:	eeb0 7a67 	vmovmi.f32	s14, s15
	}

	// 10) If Speed_Error is N and Accel is Z then PWM is SDecrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_N],accel_fuzzy.mf_values[accel_Z]);

	if(and_result > pwm_fuzzy.mf_values[pwm_SDecrease]){
 800408a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800408e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004092:	d505      	bpl.n	80040a0 <inference+0x1c4>
			pwm_fuzzy.mf_values[pwm_SDecrease] = and_result;
 8004094:	ed84 7a02 	vstr	s14, [r4, #8]
 8004098:	edd2 7a01 	vldr	s15, [r2, #4]
 800409c:	eef0 6a47 	vmov.f32	s13, s14
	}

	// 11) If Speed_Error is N and Accel is P then PWM is MDecrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_N],accel_fuzzy.mf_values[accel_P]);
 80040a0:	ed93 7a02 	vldr	s14, [r3, #8]

	if(and_result > pwm_fuzzy.mf_values[pwm_MDecrease]){
 80040a4:	edd4 5a01 	vldr	s11, [r4, #4]
	}

}

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
 80040a8:	eeb4 7a67 	vcmp.f32	s14, s15
 80040ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b0:	bfc8      	it	gt
 80040b2:	eeb0 7a67 	vmovgt.f32	s14, s15
	}

	// 11) If Speed_Error is N and Accel is P then PWM is MDecrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_N],accel_fuzzy.mf_values[accel_P]);

	if(and_result > pwm_fuzzy.mf_values[pwm_MDecrease]){
 80040b6:	eef4 5ac7 	vcmpe.f32	s11, s14
 80040ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040be:	d505      	bpl.n	80040cc <inference+0x1f0>
			pwm_fuzzy.mf_values[pwm_MDecrease] = and_result;
 80040c0:	ed84 7a01 	vstr	s14, [r4, #4]
 80040c4:	edd2 7a01 	vldr	s15, [r2, #4]
 80040c8:	eef0 5a47 	vmov.f32	s11, s14
	}

	// 12) If Speed_Error is N and Accel is N then PWM is NoChange
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_N],accel_fuzzy.mf_values[accel_N]);
 80040cc:	ed93 7a00 	vldr	s14, [r3]
	}

}

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
 80040d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d8:	bfd8      	it	le
 80040da:	eef0 7a47 	vmovle.f32	s15, s14
	}

	// 12) If Speed_Error is N and Accel is N then PWM is NoChange
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_N],accel_fuzzy.mf_values[accel_N]);

	if(and_result > pwm_fuzzy.mf_values[pwm_NoChange]){
 80040de:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80040e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			pwm_fuzzy.mf_values[pwm_NoChange] = and_result;
 80040e6:	bf48      	it	mi
 80040e8:	edc4 7a03 	vstrmi	s15, [r4, #12]
	}

	// 13) If Speed_Error is VN and Accel is Z then PWM is MDecrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_VN],accel_fuzzy.mf_values[accel_Z]);
 80040ec:	edd2 7a00 	vldr	s15, [r2]
 80040f0:	ed93 7a01 	vldr	s14, [r3, #4]
	}

	// 14) If Speed_Error is VN and Accel is P then PWM is BDecrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_VN],accel_fuzzy.mf_values[accel_P]);

	if(and_result > pwm_fuzzy.mf_values[pwm_BDecrease]){
 80040f4:	ed94 6a00 	vldr	s12, [r4]
	}

}

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
 80040f8:	eef4 7a47 	vcmp.f32	s15, s14
 80040fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004100:	bf48      	it	mi
 8004102:	eeb0 7a67 	vmovmi.f32	s14, s15
	}

	// 13) If Speed_Error is VN and Accel is Z then PWM is MDecrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_VN],accel_fuzzy.mf_values[accel_Z]);

	if(and_result > pwm_fuzzy.mf_values[pwm_MDecrease]){
 8004106:	eef4 5ac7 	vcmpe.f32	s11, s14
 800410a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			pwm_fuzzy.mf_values[pwm_MDecrease] = and_result;
 800410e:	bf44      	itt	mi
 8004110:	ed84 7a01 	vstrmi	s14, [r4, #4]
 8004114:	edd2 7a00 	vldrmi	s15, [r2]
	}

	// 14) If Speed_Error is VN and Accel is P then PWM is BDecrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_VN],accel_fuzzy.mf_values[accel_P]);
 8004118:	ed93 7a02 	vldr	s14, [r3, #8]
	}

}

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
 800411c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004124:	bfc8      	it	gt
 8004126:	eeb0 7a67 	vmovgt.f32	s14, s15
	}

	// 14) If Speed_Error is VN and Accel is P then PWM is BDecrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_VN],accel_fuzzy.mf_values[accel_P]);

	if(and_result > pwm_fuzzy.mf_values[pwm_BDecrease]){
 800412a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800412e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			pwm_fuzzy.mf_values[pwm_BDecrease] = and_result;
 8004132:	bf48      	it	mi
 8004134:	ed84 7a00 	vstrmi	s14, [r4]
	}

	// 15) If Speed_Error is VN and Accel is N then PWM is SDecrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_VN],accel_fuzzy.mf_values[accel_N]);
 8004138:	ed93 7a00 	vldr	s14, [r3]
 800413c:	bf48      	it	mi
 800413e:	edd2 7a00 	vldrmi	s15, [r2]
	if(and_result > pwm_fuzzy.mf_values[pwm_SDecrease]){
			pwm_fuzzy.mf_values[pwm_SDecrease] = and_result;
	}

	// 16) If Position_Error is VN then Speed_Ref is VN
	if(position_error_fuzzy.mf_values[position_error_VN] > speed_ref_fuzzy.mf_values[speed_ref_VN]){
 8004142:	4b28      	ldr	r3, [pc, #160]	; (80041e4 <inference+0x308>)
	}

}

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
 8004144:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414c:	bfd8      	it	le
 800414e:	eef0 7a47 	vmovle.f32	s15, s14
	}

	// 15) If Speed_Error is VN and Accel is N then PWM is SDecrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_VN],accel_fuzzy.mf_values[accel_N]);

	if(and_result > pwm_fuzzy.mf_values[pwm_SDecrease]){
 8004152:	eef4 6ae7 	vcmpe.f32	s13, s15
			pwm_fuzzy.mf_values[pwm_SDecrease] = and_result;
	}

	// 16) If Position_Error is VN then Speed_Ref is VN
	if(position_error_fuzzy.mf_values[position_error_VN] > speed_ref_fuzzy.mf_values[speed_ref_VN]){
 8004156:	685b      	ldr	r3, [r3, #4]
	}

	// 15) If Speed_Error is VN and Accel is N then PWM is SDecrease
	and_result = fuzzyAnd(speed_error_fuzzy.mf_values[speed_error_VN],accel_fuzzy.mf_values[accel_N]);

	if(and_result > pwm_fuzzy.mf_values[pwm_SDecrease]){
 8004158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			pwm_fuzzy.mf_values[pwm_SDecrease] = and_result;
 800415c:	bf48      	it	mi
 800415e:	edc4 7a02 	vstrmi	s15, [r4, #8]
	}

	// 16) If Position_Error is VN then Speed_Ref is VN
	if(position_error_fuzzy.mf_values[position_error_VN] > speed_ref_fuzzy.mf_values[speed_ref_VN]){
 8004162:	edd3 7a00 	vldr	s15, [r3]
 8004166:	ed95 7a00 	vldr	s14, [r5]
 800416a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800416e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		speed_ref_fuzzy.mf_values[speed_ref_VN] = position_error_fuzzy.mf_values[position_error_VN];
 8004172:	bfc8      	it	gt
 8004174:	edc5 7a00 	vstrgt	s15, [r5]
	}

	// 17) If Position_Error is N then Speed_Ref is N
	if(position_error_fuzzy.mf_values[position_error_N] > speed_ref_fuzzy.mf_values[speed_ref_N]){
 8004178:	edd3 7a01 	vldr	s15, [r3, #4]
 800417c:	ed95 7a01 	vldr	s14, [r5, #4]
 8004180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		speed_ref_fuzzy.mf_values[speed_ref_N] = position_error_fuzzy.mf_values[position_error_N];
 8004188:	bfc8      	it	gt
 800418a:	edc5 7a01 	vstrgt	s15, [r5, #4]
	}

	// 18) If Position_Error is Z then Speed_Ref is Z
	if(position_error_fuzzy.mf_values[position_error_Z] > speed_ref_fuzzy.mf_values[speed_ref_Z]){
 800418e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004192:	ed95 7a02 	vldr	s14, [r5, #8]
 8004196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		speed_ref_fuzzy.mf_values[speed_ref_Z] = position_error_fuzzy.mf_values[position_error_Z];
 800419e:	bfc8      	it	gt
 80041a0:	edc5 7a02 	vstrgt	s15, [r5, #8]
	}

	// 19) If Position_Error is P then Speed_Ref is P
	if(position_error_fuzzy.mf_values[position_error_P] > speed_ref_fuzzy.mf_values[speed_ref_P]){
 80041a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80041a8:	ed95 7a03 	vldr	s14, [r5, #12]
 80041ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		speed_ref_fuzzy.mf_values[speed_ref_P] = position_error_fuzzy.mf_values[position_error_P];
 80041b4:	bfc8      	it	gt
 80041b6:	edc5 7a03 	vstrgt	s15, [r5, #12]
	}

	// 20) If Position_Error is VP then Speed_Ref is VP
	if(position_error_fuzzy.mf_values[position_error_VP] > speed_ref_fuzzy.mf_values[speed_ref_VP]){
 80041ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80041be:	ed95 7a04 	vldr	s14, [r5, #16]
 80041c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		speed_ref_fuzzy.mf_values[speed_ref_VP] = position_error_fuzzy.mf_values[position_error_VP];
 80041ca:	bfc8      	it	gt
 80041cc:	edc5 7a04 	vstrgt	s15, [r5, #16]
 80041d0:	bd38      	pop	{r3, r4, r5, pc}
 80041d2:	bf00      	nop
 80041d4:	1ffe9c94 	.word	0x1ffe9c94
 80041d8:	1ffe9c84 	.word	0x1ffe9c84
 80041dc:	1ffe9ca4 	.word	0x1ffe9ca4
 80041e0:	1ffe9cb4 	.word	0x1ffe9cb4
 80041e4:	1ffe9cc4 	.word	0x1ffe9cc4

080041e8 <defuzzify>:

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
}

float defuzzify(struct fuzzy_variable fuzzy_var, float samples, uint32_t number_of_mf){
 80041e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ea:	b085      	sub	sp, #20
 80041ec:	ac04      	add	r4, sp, #16
 80041ee:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80041f2:	eddd 6a02 	vldr	s13, [sp, #8]
 80041f6:	ed9d 4a03 	vldr	s8, [sp, #12]
 80041fa:	eddd 4a0a 	vldr	s9, [sp, #40]	; 0x28
	static float truth_value;

	current_x = fuzzy_var.range[0];
	x_increment = (fuzzy_var.range[1] - fuzzy_var.range[0])/samples;

	top_sum = 0;
 80041fe:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 8004330 <defuzzify+0x148>
	static float top_sum;
	static float bottom_sum;
	static float truth_value;

	current_x = fuzzy_var.range[0];
	x_increment = (fuzzy_var.range[1] - fuzzy_var.range[0])/samples;
 8004202:	4b4c      	ldr	r3, [pc, #304]	; (8004334 <defuzzify+0x14c>)
	static float x_increment;
	static float top_sum;
	static float bottom_sum;
	static float truth_value;

	current_x = fuzzy_var.range[0];
 8004204:	4e4c      	ldr	r6, [pc, #304]	; (8004338 <defuzzify+0x150>)
	x_increment = (fuzzy_var.range[1] - fuzzy_var.range[0])/samples;

	top_sum = 0;
 8004206:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8004344 <defuzzify+0x15c>
	bottom_sum = 0;
 800420a:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8004348 <defuzzify+0x160>
	truth_value = 0;
 800420e:	4f4b      	ldr	r7, [pc, #300]	; (800433c <defuzzify+0x154>)
	static float x_increment;
	static float top_sum;
	static float bottom_sum;
	static float truth_value;

	current_x = fuzzy_var.range[0];
 8004210:	edc6 6a00 	vstr	s13, [r6]
	x_increment = (fuzzy_var.range[1] - fuzzy_var.range[0])/samples;
 8004214:	ee74 7a66 	vsub.f32	s15, s8, s13

	top_sum = 0;
	bottom_sum = 0;
	truth_value = 0;

	while(current_x <= fuzzy_var.range[1]){
 8004218:	eef4 6ac4 	vcmpe.f32	s13, s8
	static float top_sum;
	static float bottom_sum;
	static float truth_value;

	current_x = fuzzy_var.range[0];
	x_increment = (fuzzy_var.range[1] - fuzzy_var.range[0])/samples;
 800421c:	eec7 4aa4 	vdiv.f32	s9, s15, s9
 8004220:	9c01      	ldr	r4, [sp, #4]

float fuzzyAnd(float a, float b){
	return (a<b) ? a : b;
}

float defuzzify(struct fuzzy_variable fuzzy_var, float samples, uint32_t number_of_mf){
 8004222:	980b      	ldr	r0, [sp, #44]	; 0x2c

	top_sum = 0;
	bottom_sum = 0;
	truth_value = 0;

	while(current_x <= fuzzy_var.range[1]){
 8004224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	static float truth_value;

	current_x = fuzzy_var.range[0];
	x_increment = (fuzzy_var.range[1] - fuzzy_var.range[0])/samples;

	top_sum = 0;
 8004228:	ed8c 6a00 	vstr	s12, [ip]
	bottom_sum = 0;
 800422c:	ed8e 6a00 	vstr	s12, [lr]
	static float top_sum;
	static float bottom_sum;
	static float truth_value;

	current_x = fuzzy_var.range[0];
	x_increment = (fuzzy_var.range[1] - fuzzy_var.range[0])/samples;
 8004230:	edc3 4a00 	vstr	s9, [r3]

	top_sum = 0;
	bottom_sum = 0;
	truth_value = 0;
 8004234:	ed87 6a00 	vstr	s12, [r7]

	while(current_x <= fuzzy_var.range[1]){
 8004238:	d870      	bhi.n	800431c <defuzzify+0x134>
 800423a:	9d00      	ldr	r5, [sp, #0]
 800423c:	eeb0 5a46 	vmov.f32	s10, s12
 8004240:	eef0 7a46 	vmov.f32	s15, s12
 8004244:	eeb0 7a46 	vmov.f32	s14, s12
 8004248:	eef0 5a46 	vmov.f32	s11, s12
 800424c:	eb04 0180 	add.w	r1, r4, r0, lsl #2
		for(i=0; i<number_of_mf; i++){
 8004250:	2800      	cmp	r0, #0
 8004252:	d045      	beq.n	80042e0 <defuzzify+0xf8>
 8004254:	eeb0 5a47 	vmov.f32	s10, s14
 8004258:	eeb0 6a65 	vmov.f32	s12, s11
 800425c:	1d2b      	adds	r3, r5, #4
 800425e:	4622      	mov	r2, r4
 8004260:	e029      	b.n	80042b6 <defuzzify+0xce>

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
	if(input >= mf.params[2])  return 0;
 8004262:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426a:	d92f      	bls.n	80042cc <defuzzify+0xe4>
	if(input == mf.params[1]) return 1;
 800426c:	eef4 6a47 	vcmp.f32	s13, s14
 8004270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004274:	d02d      	beq.n	80042d2 <defuzzify+0xea>

	if((input > mf.params[0]) && (input < mf.params[1])){
 8004276:	eef4 5ae6 	vcmpe.f32	s11, s13
 800427a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427e:	d546      	bpl.n	800430e <defuzzify+0x126>
 8004280:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8004284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004288:	dd41      	ble.n	800430e <defuzzify+0x126>
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
 800428a:	ee37 7a65 	vsub.f32	s14, s14, s11
 800428e:	ee76 5ae5 	vsub.f32	s11, s13, s11
 8004292:	ee85 7a87 	vdiv.f32	s14, s11, s14
 8004296:	330c      	adds	r3, #12
	truth_value = 0;

	while(current_x <= fuzzy_var.range[1]){
		for(i=0; i<number_of_mf; i++){
			truth_value = getTruthValue(fuzzy_var.mf[i], current_x);
			if(truth_value>fuzzy_var.mf_values[i]){
 8004298:	ecf2 7a01 	vldmia	r2!, {s15}
 800429c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a4:	bf58      	it	pl
 80042a6:	eef0 7a47 	vmovpl.f32	s15, s14
	top_sum = 0;
	bottom_sum = 0;
	truth_value = 0;

	while(current_x <= fuzzy_var.range[1]){
		for(i=0; i<number_of_mf; i++){
 80042aa:	428a      	cmp	r2, r1
			truth_value = getTruthValue(fuzzy_var.mf[i], current_x);
			if(truth_value>fuzzy_var.mf_values[i]){
				truth_value = fuzzy_var.mf_values[i];
			}
			top_sum += current_x * truth_value;
 80042ac:	eea6 6aa7 	vfma.f32	s12, s13, s15
			bottom_sum += truth_value;
 80042b0:	ee35 5a27 	vadd.f32	s10, s10, s15
	top_sum = 0;
	bottom_sum = 0;
	truth_value = 0;

	while(current_x <= fuzzy_var.range[1]){
		for(i=0; i<number_of_mf; i++){
 80042b4:	d010      	beq.n	80042d8 <defuzzify+0xf0>
 80042b6:	ed53 5a01 	vldr	s11, [r3, #-4]
 80042ba:	ed93 7a00 	vldr	s14, [r3]
 80042be:	edd3 7a01 	vldr	s15, [r3, #4]
}

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
 80042c2:	eef4 5ae6 	vcmpe.f32	s11, s13
 80042c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ca:	dbca      	blt.n	8004262 <defuzzify+0x7a>
 80042cc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004330 <defuzzify+0x148>
 80042d0:	e7e1      	b.n	8004296 <defuzzify+0xae>
	if(input >= mf.params[2])  return 0;
	if(input == mf.params[1]) return 1;
 80042d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 80042d6:	e7de      	b.n	8004296 <defuzzify+0xae>
			truth_value = getTruthValue(fuzzy_var.mf[i], current_x);
			if(truth_value>fuzzy_var.mf_values[i]){
				truth_value = fuzzy_var.mf_values[i];
			}
			top_sum += current_x * truth_value;
			bottom_sum += truth_value;
 80042d8:	eeb0 7a45 	vmov.f32	s14, s10
		for(i=0; i<number_of_mf; i++){
			truth_value = getTruthValue(fuzzy_var.mf[i], current_x);
			if(truth_value>fuzzy_var.mf_values[i]){
				truth_value = fuzzy_var.mf_values[i];
			}
			top_sum += current_x * truth_value;
 80042dc:	eef0 5a46 	vmov.f32	s11, s12
			bottom_sum += truth_value;
		}
		current_x += x_increment;
 80042e0:	ee76 6aa4 	vadd.f32	s13, s13, s9

	top_sum = 0;
	bottom_sum = 0;
	truth_value = 0;

	while(current_x <= fuzzy_var.range[1]){
 80042e4:	eef4 6ac4 	vcmpe.f32	s13, s8
 80042e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ec:	d9b0      	bls.n	8004250 <defuzzify+0x68>
 80042ee:	edc7 7a00 	vstr	s15, [r7]
			bottom_sum += truth_value;
		}
		current_x += x_increment;
	}
	return (top_sum/bottom_sum);
}
 80042f2:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80042f6:	4b12      	ldr	r3, [pc, #72]	; (8004340 <defuzzify+0x158>)
 80042f8:	6018      	str	r0, [r3, #0]
 80042fa:	ed8c 6a00 	vstr	s12, [ip]
 80042fe:	ee17 0a90 	vmov	r0, s15
 8004302:	ed8e 5a00 	vstr	s10, [lr]
 8004306:	edc6 6a00 	vstr	s13, [r6]
 800430a:	b005      	add	sp, #20
 800430c:	bdf0      	pop	{r4, r5, r6, r7, pc}

	if((input > mf.params[0]) && (input < mf.params[1])){
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
	}

	return ((mf.params[2] - input) / (mf.params[2] - mf.params[1]));
 800430e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004312:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004316:	ee87 7a87 	vdiv.f32	s14, s15, s14
 800431a:	e7bc      	b.n	8004296 <defuzzify+0xae>

	top_sum = 0;
	bottom_sum = 0;
	truth_value = 0;

	while(current_x <= fuzzy_var.range[1]){
 800431c:	eeb0 7a46 	vmov.f32	s14, s12
 8004320:	eef0 5a46 	vmov.f32	s11, s12
			bottom_sum += truth_value;
		}
		current_x += x_increment;
	}
	return (top_sum/bottom_sum);
}
 8004324:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8004328:	ee17 0a90 	vmov	r0, s15
 800432c:	b005      	add	sp, #20
 800432e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004330:	00000000 	.word	0x00000000
 8004334:	1ffe9bd8 	.word	0x1ffe9bd8
 8004338:	1ffe9be0 	.word	0x1ffe9be0
 800433c:	1ffe9be8 	.word	0x1ffe9be8
 8004340:	1ffe9be4 	.word	0x1ffe9be4
 8004344:	1ffe9bd4 	.word	0x1ffe9bd4
 8004348:	1ffe9bd0 	.word	0x1ffe9bd0

0800434c <computeFuzzy>:

	speed_ref_fuzzy.range[0] = -2;
	speed_ref_fuzzy.range[1] = 2;
}

void computeFuzzy(float speed_error_val, float accel_val, float position_error_val, float* pwm_increment, float* speed_reference){
 800434c:	b5f0      	push	{r4, r5, r6, r7, lr}
// Fuzzyfies an input of a given fuzzy variable. Takes as argument the number of mfs
void fuzzify(struct fuzzy_variable* fuzzy_var, float input, uint32_t number_of_mf){
	static uint32_t i;

	// Limit input
	if(input < fuzzy_var->range[0]){
 800434e:	4ce1      	ldr	r4, [pc, #900]	; (80046d4 <computeFuzzy+0x388>)

	speed_ref_fuzzy.range[0] = -2;
	speed_ref_fuzzy.range[1] = 2;
}

void computeFuzzy(float speed_error_val, float accel_val, float position_error_val, float* pwm_increment, float* speed_reference){
 8004350:	ee07 0a10 	vmov	s14, r0
// Fuzzyfies an input of a given fuzzy variable. Takes as argument the number of mfs
void fuzzify(struct fuzzy_variable* fuzzy_var, float input, uint32_t number_of_mf){
	static uint32_t i;

	// Limit input
	if(input < fuzzy_var->range[0]){
 8004354:	edd4 7a02 	vldr	s15, [r4, #8]
 8004358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

	speed_ref_fuzzy.range[0] = -2;
	speed_ref_fuzzy.range[1] = 2;
}

void computeFuzzy(float speed_error_val, float accel_val, float position_error_val, float* pwm_increment, float* speed_reference){
 8004360:	b083      	sub	sp, #12
 8004362:	461d      	mov	r5, r3
 8004364:	ee05 1a90 	vmov	s11, r1
 8004368:	ee06 2a90 	vmov	s13, r2
// Fuzzyfies an input of a given fuzzy variable. Takes as argument the number of mfs
void fuzzify(struct fuzzy_variable* fuzzy_var, float input, uint32_t number_of_mf){
	static uint32_t i;

	// Limit input
	if(input < fuzzy_var->range[0]){
 800436c:	d408      	bmi.n	8004380 <computeFuzzy+0x34>
		input = fuzzy_var->range[0];
	} else if (input > fuzzy_var->range[1]){
 800436e:	edd4 7a03 	vldr	s15, [r4, #12]
		input = fuzzy_var->range[1];
 8004372:	eeb4 7a67 	vcmp.f32	s14, s15
 8004376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437a:	bfd8      	it	le
 800437c:	eef0 7a47 	vmovle.f32	s15, s14
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	6862      	ldr	r2, [r4, #4]
 8004384:	ed93 7a00 	vldr	s14, [r3]
 8004388:	ed93 5a01 	vldr	s10, [r3, #4]
 800438c:	ed93 6a02 	vldr	s12, [r3, #8]
}

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
 8004390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004398:	f200 8280 	bhi.w	800489c <computeFuzzy+0x550>
 800439c:	ed9f 7ace 	vldr	s14, [pc, #824]	; 80046d8 <computeFuzzy+0x38c>
	} else if (input > fuzzy_var->range[1]){
		input = fuzzy_var->range[1];
	}

	for(i=0; i<number_of_mf; i++){
		fuzzy_var->mf_values[i] = getTruthValue(fuzzy_var->mf[i],input);
 80043a0:	ed82 7a00 	vstr	s14, [r2]
 80043a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80043a8:	ed93 5a04 	vldr	s10, [r3, #16]
 80043ac:	ed93 6a05 	vldr	s12, [r3, #20]
}

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
 80043b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b8:	f200 8254 	bhi.w	8004864 <computeFuzzy+0x518>
 80043bc:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 80046d8 <computeFuzzy+0x38c>
	} else if (input > fuzzy_var->range[1]){
		input = fuzzy_var->range[1];
	}

	for(i=0; i<number_of_mf; i++){
		fuzzy_var->mf_values[i] = getTruthValue(fuzzy_var->mf[i],input);
 80043c0:	ed82 7a01 	vstr	s14, [r2, #4]
 80043c4:	ed93 7a06 	vldr	s14, [r3, #24]
 80043c8:	ed93 5a07 	vldr	s10, [r3, #28]
 80043cc:	ed93 6a08 	vldr	s12, [r3, #32]
}

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
 80043d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d8:	f200 8226 	bhi.w	8004828 <computeFuzzy+0x4dc>
 80043dc:	ed9f 7abe 	vldr	s14, [pc, #760]	; 80046d8 <computeFuzzy+0x38c>
	} else if (input > fuzzy_var->range[1]){
		input = fuzzy_var->range[1];
	}

	for(i=0; i<number_of_mf; i++){
		fuzzy_var->mf_values[i] = getTruthValue(fuzzy_var->mf[i],input);
 80043e0:	ed82 7a02 	vstr	s14, [r2, #8]
 80043e4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80043e8:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
 80043ec:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
}

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
 80043f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f8:	f200 81f8 	bhi.w	80047ec <computeFuzzy+0x4a0>
 80043fc:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 80046d8 <computeFuzzy+0x38c>
	} else if (input > fuzzy_var->range[1]){
		input = fuzzy_var->range[1];
	}

	for(i=0; i<number_of_mf; i++){
		fuzzy_var->mf_values[i] = getTruthValue(fuzzy_var->mf[i],input);
 8004400:	ed82 7a03 	vstr	s14, [r2, #12]
 8004404:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004408:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
 800440c:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
}

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
 8004410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004418:	f2c0 81c9 	blt.w	80047ae <computeFuzzy+0x462>
 800441c:	eddf 7aae 	vldr	s15, [pc, #696]	; 80046d8 <computeFuzzy+0x38c>
// Fuzzyfies an input of a given fuzzy variable. Takes as argument the number of mfs
void fuzzify(struct fuzzy_variable* fuzzy_var, float input, uint32_t number_of_mf){
	static uint32_t i;

	// Limit input
	if(input < fuzzy_var->range[0]){
 8004420:	49ae      	ldr	r1, [pc, #696]	; (80046dc <computeFuzzy+0x390>)
	} else if (input > fuzzy_var->range[1]){
		input = fuzzy_var->range[1];
	}

	for(i=0; i<number_of_mf; i++){
		fuzzy_var->mf_values[i] = getTruthValue(fuzzy_var->mf[i],input);
 8004422:	edc2 7a04 	vstr	s15, [r2, #16]
// Fuzzyfies an input of a given fuzzy variable. Takes as argument the number of mfs
void fuzzify(struct fuzzy_variable* fuzzy_var, float input, uint32_t number_of_mf){
	static uint32_t i;

	// Limit input
	if(input < fuzzy_var->range[0]){
 8004426:	edd1 7a02 	vldr	s15, [r1, #8]
 800442a:	eef4 7ae5 	vcmpe.f32	s15, s11
 800442e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004432:	f340 80a2 	ble.w	800457a <computeFuzzy+0x22e>
 8004436:	680b      	ldr	r3, [r1, #0]
 8004438:	6849      	ldr	r1, [r1, #4]
 800443a:	ed93 7a00 	vldr	s14, [r3]
 800443e:	edd3 5a01 	vldr	s11, [r3, #4]
 8004442:	ed93 6a02 	vldr	s12, [r3, #8]
}

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
 8004446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800444a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444e:	f200 818f 	bhi.w	8004770 <computeFuzzy+0x424>
 8004452:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80046d8 <computeFuzzy+0x38c>
	} else if (input > fuzzy_var->range[1]){
		input = fuzzy_var->range[1];
	}

	for(i=0; i<number_of_mf; i++){
		fuzzy_var->mf_values[i] = getTruthValue(fuzzy_var->mf[i],input);
 8004456:	ed81 7a00 	vstr	s14, [r1]
 800445a:	ed93 7a03 	vldr	s14, [r3, #12]
 800445e:	edd3 5a04 	vldr	s11, [r3, #16]
 8004462:	ed93 6a05 	vldr	s12, [r3, #20]
}

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
 8004466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800446a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446e:	f200 8160 	bhi.w	8004732 <computeFuzzy+0x3e6>
 8004472:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80046d8 <computeFuzzy+0x38c>
	} else if (input > fuzzy_var->range[1]){
		input = fuzzy_var->range[1];
	}

	for(i=0; i<number_of_mf; i++){
		fuzzy_var->mf_values[i] = getTruthValue(fuzzy_var->mf[i],input);
 8004476:	ed81 7a01 	vstr	s14, [r1, #4]
 800447a:	ed93 7a06 	vldr	s14, [r3, #24]
 800447e:	edd3 5a07 	vldr	s11, [r3, #28]
 8004482:	ed93 6a08 	vldr	s12, [r3, #32]
}

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
 8004486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800448a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448e:	f2c0 8131 	blt.w	80046f4 <computeFuzzy+0x3a8>
 8004492:	eddf 7a91 	vldr	s15, [pc, #580]	; 80046d8 <computeFuzzy+0x38c>
// Fuzzyfies an input of a given fuzzy variable. Takes as argument the number of mfs
void fuzzify(struct fuzzy_variable* fuzzy_var, float input, uint32_t number_of_mf){
	static uint32_t i;

	// Limit input
	if(input < fuzzy_var->range[0]){
 8004496:	4a92      	ldr	r2, [pc, #584]	; (80046e0 <computeFuzzy+0x394>)
	} else if (input > fuzzy_var->range[1]){
		input = fuzzy_var->range[1];
	}

	for(i=0; i<number_of_mf; i++){
		fuzzy_var->mf_values[i] = getTruthValue(fuzzy_var->mf[i],input);
 8004498:	edc1 7a02 	vstr	s15, [r1, #8]
// Fuzzyfies an input of a given fuzzy variable. Takes as argument the number of mfs
void fuzzify(struct fuzzy_variable* fuzzy_var, float input, uint32_t number_of_mf){
	static uint32_t i;

	// Limit input
	if(input < fuzzy_var->range[0]){
 800449c:	edd2 7a02 	vldr	s15, [r2, #8]
 80044a0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80044a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a8:	dd71      	ble.n	800458e <computeFuzzy+0x242>
 80044aa:	6813      	ldr	r3, [r2, #0]
 80044ac:	6852      	ldr	r2, [r2, #4]
 80044ae:	ed93 7a00 	vldr	s14, [r3]
 80044b2:	ed93 6a01 	vldr	s12, [r3, #4]
 80044b6:	edd3 6a02 	vldr	s13, [r3, #8]
}

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
 80044ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c2:	f200 80e8 	bhi.w	8004696 <computeFuzzy+0x34a>
 80044c6:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80046d8 <computeFuzzy+0x38c>
	} else if (input > fuzzy_var->range[1]){
		input = fuzzy_var->range[1];
	}

	for(i=0; i<number_of_mf; i++){
		fuzzy_var->mf_values[i] = getTruthValue(fuzzy_var->mf[i],input);
 80044ca:	ed82 7a00 	vstr	s14, [r2]
 80044ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80044d2:	ed93 6a04 	vldr	s12, [r3, #16]
 80044d6:	edd3 6a05 	vldr	s13, [r3, #20]
}

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
 80044da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e2:	f200 80b9 	bhi.w	8004658 <computeFuzzy+0x30c>
 80044e6:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80046d8 <computeFuzzy+0x38c>
	} else if (input > fuzzy_var->range[1]){
		input = fuzzy_var->range[1];
	}

	for(i=0; i<number_of_mf; i++){
		fuzzy_var->mf_values[i] = getTruthValue(fuzzy_var->mf[i],input);
 80044ea:	ed82 7a01 	vstr	s14, [r2, #4]
 80044ee:	ed93 7a06 	vldr	s14, [r3, #24]
 80044f2:	ed93 6a07 	vldr	s12, [r3, #28]
 80044f6:	edd3 6a08 	vldr	s13, [r3, #32]
}

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
 80044fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004502:	f200 808a 	bhi.w	800461a <computeFuzzy+0x2ce>
 8004506:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80046d8 <computeFuzzy+0x38c>
	} else if (input > fuzzy_var->range[1]){
		input = fuzzy_var->range[1];
	}

	for(i=0; i<number_of_mf; i++){
		fuzzy_var->mf_values[i] = getTruthValue(fuzzy_var->mf[i],input);
 800450a:	ed82 7a02 	vstr	s14, [r2, #8]
 800450e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004512:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8004516:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
}

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
 800451a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800451e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004522:	d85c      	bhi.n	80045de <computeFuzzy+0x292>
 8004524:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80046d8 <computeFuzzy+0x38c>
	} else if (input > fuzzy_var->range[1]){
		input = fuzzy_var->range[1];
	}

	for(i=0; i<number_of_mf; i++){
		fuzzy_var->mf_values[i] = getTruthValue(fuzzy_var->mf[i],input);
 8004528:	ed82 7a03 	vstr	s14, [r2, #12]
 800452c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004530:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8004534:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
}

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
 8004538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004540:	d82f      	bhi.n	80045a2 <computeFuzzy+0x256>
 8004542:	eddf 7a65 	vldr	s15, [pc, #404]	; 80046d8 <computeFuzzy+0x38c>
 8004546:	4b67      	ldr	r3, [pc, #412]	; (80046e4 <computeFuzzy+0x398>)
	} else if (input > fuzzy_var->range[1]){
		input = fuzzy_var->range[1];
	}

	for(i=0; i<number_of_mf; i++){
		fuzzy_var->mf_values[i] = getTruthValue(fuzzy_var->mf[i],input);
 8004548:	edc2 7a04 	vstr	s15, [r2, #16]
 800454c:	2605      	movs	r6, #5
 800454e:	601e      	str	r6, [r3, #0]
	fuzzify(&accel_fuzzy, accel_val, accel_mf_count);
	fuzzify(&position_error_fuzzy, position_error_val, position_error_mf_count);

	inference();

	*pwm_increment = defuzzify(pwm_fuzzy, 180, pwm_mf_count);
 8004550:	4c65      	ldr	r4, [pc, #404]	; (80046e8 <computeFuzzy+0x39c>)

	fuzzify(&speed_error_fuzzy, speed_error_val, speed_error_mf_count);
	fuzzify(&accel_fuzzy, accel_val, accel_mf_count);
	fuzzify(&position_error_fuzzy, position_error_val, position_error_mf_count);

	inference();
 8004552:	f7ff fcc3 	bl	8003edc <inference>

	*pwm_increment = defuzzify(pwm_fuzzy, 180, pwm_mf_count);
 8004556:	4b65      	ldr	r3, [pc, #404]	; (80046ec <computeFuzzy+0x3a0>)
 8004558:	9400      	str	r4, [sp, #0]
 800455a:	2707      	movs	r7, #7
 800455c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800455e:	9701      	str	r7, [sp, #4]
 8004560:	f7ff fe42 	bl	80041e8 <defuzzify>
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
 8004564:	4b62      	ldr	r3, [pc, #392]	; (80046f0 <computeFuzzy+0x3a4>)
	fuzzify(&accel_fuzzy, accel_val, accel_mf_count);
	fuzzify(&position_error_fuzzy, position_error_val, position_error_mf_count);

	inference();

	*pwm_increment = defuzzify(pwm_fuzzy, 180, pwm_mf_count);
 8004566:	6028      	str	r0, [r5, #0]
	*speed_reference = defuzzify(speed_ref_fuzzy, 180, speed_ref_mf_count);
 8004568:	9601      	str	r6, [sp, #4]
 800456a:	9400      	str	r4, [sp, #0]
 800456c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800456e:	f7ff fe3b 	bl	80041e8 <defuzzify>
 8004572:	9b08      	ldr	r3, [sp, #32]
 8004574:	6018      	str	r0, [r3, #0]
}
 8004576:	b003      	add	sp, #12
 8004578:	bdf0      	pop	{r4, r5, r6, r7, pc}
	static uint32_t i;

	// Limit input
	if(input < fuzzy_var->range[0]){
		input = fuzzy_var->range[0];
	} else if (input > fuzzy_var->range[1]){
 800457a:	edd1 7a03 	vldr	s15, [r1, #12]
		input = fuzzy_var->range[1];
 800457e:	eef4 5a67 	vcmp.f32	s11, s15
 8004582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004586:	bfd8      	it	le
 8004588:	eef0 7a65 	vmovle.f32	s15, s11
 800458c:	e753      	b.n	8004436 <computeFuzzy+0xea>
	static uint32_t i;

	// Limit input
	if(input < fuzzy_var->range[0]){
		input = fuzzy_var->range[0];
	} else if (input > fuzzy_var->range[1]){
 800458e:	edd2 7a03 	vldr	s15, [r2, #12]
		input = fuzzy_var->range[1];
 8004592:	eef4 6a67 	vcmp.f32	s13, s15
 8004596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459a:	bfd8      	it	le
 800459c:	eef0 7a66 	vmovle.f32	s15, s13
 80045a0:	e783      	b.n	80044aa <computeFuzzy+0x15e>

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
	if(input >= mf.params[2])  return 0;
 80045a2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80045a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045aa:	daca      	bge.n	8004542 <computeFuzzy+0x1f6>
	if(input == mf.params[1]) return 1;
 80045ac:	eeb4 6a67 	vcmp.f32	s12, s15
 80045b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b4:	f000 81b2 	beq.w	800491c <computeFuzzy+0x5d0>

	if((input > mf.params[0]) && (input < mf.params[1])){
 80045b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c0:	f340 81d2 	ble.w	8004968 <computeFuzzy+0x61c>
 80045c4:	eef4 7ac6 	vcmpe.f32	s15, s12
 80045c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045cc:	f140 81cc 	bpl.w	8004968 <computeFuzzy+0x61c>
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
 80045d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045d4:	ee36 7a47 	vsub.f32	s14, s12, s14
 80045d8:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80045dc:	e7b3      	b.n	8004546 <computeFuzzy+0x1fa>

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
	if(input >= mf.params[2])  return 0;
 80045de:	eef4 7ae6 	vcmpe.f32	s15, s13
 80045e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e6:	da9d      	bge.n	8004524 <computeFuzzy+0x1d8>
	if(input == mf.params[1]) return 1;
 80045e8:	eeb4 6a67 	vcmp.f32	s12, s15
 80045ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f0:	f000 8191 	beq.w	8004916 <computeFuzzy+0x5ca>

	if((input > mf.params[0]) && (input < mf.params[1])){
 80045f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045fc:	f340 819f 	ble.w	800493e <computeFuzzy+0x5f2>
 8004600:	eef4 7ac6 	vcmpe.f32	s15, s12
 8004604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004608:	f140 8199 	bpl.w	800493e <computeFuzzy+0x5f2>
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
 800460c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8004610:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004614:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8004618:	e786      	b.n	8004528 <computeFuzzy+0x1dc>

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
	if(input >= mf.params[2])  return 0;
 800461a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004622:	f6bf af70 	bge.w	8004506 <computeFuzzy+0x1ba>
	if(input == mf.params[1]) return 1;
 8004626:	eeb4 6a67 	vcmp.f32	s12, s15
 800462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462e:	f000 816f 	beq.w	8004910 <computeFuzzy+0x5c4>

	if((input > mf.params[0]) && (input < mf.params[1])){
 8004632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463a:	f340 818e 	ble.w	800495a <computeFuzzy+0x60e>
 800463e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8004642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004646:	f140 8188 	bpl.w	800495a <computeFuzzy+0x60e>
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
 800464a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800464e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004652:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8004656:	e758      	b.n	800450a <computeFuzzy+0x1be>

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
	if(input >= mf.params[2])  return 0;
 8004658:	eef4 7ae6 	vcmpe.f32	s15, s13
 800465c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004660:	f6bf af41 	bge.w	80044e6 <computeFuzzy+0x19a>
	if(input == mf.params[1]) return 1;
 8004664:	eeb4 6a67 	vcmp.f32	s12, s15
 8004668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466c:	f000 814d 	beq.w	800490a <computeFuzzy+0x5be>

	if((input > mf.params[0]) && (input < mf.params[1])){
 8004670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004678:	f340 8168 	ble.w	800494c <computeFuzzy+0x600>
 800467c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8004680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004684:	f140 8162 	bpl.w	800494c <computeFuzzy+0x600>
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
 8004688:	ee36 6a47 	vsub.f32	s12, s12, s14
 800468c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004690:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8004694:	e729      	b.n	80044ea <computeFuzzy+0x19e>

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
	if(input >= mf.params[2])  return 0;
 8004696:	eef4 7ae6 	vcmpe.f32	s15, s13
 800469a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469e:	f6bf af12 	bge.w	80044c6 <computeFuzzy+0x17a>
	if(input == mf.params[1]) return 1;
 80046a2:	eeb4 6a67 	vcmp.f32	s12, s15
 80046a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046aa:	f000 812b 	beq.w	8004904 <computeFuzzy+0x5b8>

	if((input > mf.params[0]) && (input < mf.params[1])){
 80046ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b6:	f340 8188 	ble.w	80049ca <computeFuzzy+0x67e>
 80046ba:	eef4 7ac6 	vcmpe.f32	s15, s12
 80046be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c2:	f140 8182 	bpl.w	80049ca <computeFuzzy+0x67e>
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
 80046c6:	ee36 6a47 	vsub.f32	s12, s12, s14
 80046ca:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80046ce:	ee87 7a06 	vdiv.f32	s14, s14, s12
 80046d2:	e6fa      	b.n	80044ca <computeFuzzy+0x17e>
 80046d4:	1ffe9ca4 	.word	0x1ffe9ca4
 80046d8:	00000000 	.word	0x00000000
 80046dc:	1ffe9cb4 	.word	0x1ffe9cb4
 80046e0:	1ffe9cc4 	.word	0x1ffe9cc4
 80046e4:	1ffe9bdc 	.word	0x1ffe9bdc
 80046e8:	43340000 	.word	0x43340000
 80046ec:	1ffe9c94 	.word	0x1ffe9c94
 80046f0:	1ffe9c84 	.word	0x1ffe9c84

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
	if(input >= mf.params[2])  return 0;
 80046f4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80046f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fc:	f67f aec9 	bls.w	8004492 <computeFuzzy+0x146>
	if(input == mf.params[1]) return 1;
 8004700:	eef4 5a67 	vcmp.f32	s11, s15
 8004704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004708:	f000 80f9 	beq.w	80048fe <computeFuzzy+0x5b2>

	if((input > mf.params[0]) && (input < mf.params[1])){
 800470c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004714:	f140 8152 	bpl.w	80049bc <computeFuzzy+0x670>
 8004718:	eef4 5ae7 	vcmpe.f32	s11, s15
 800471c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004720:	f340 814c 	ble.w	80049bc <computeFuzzy+0x670>
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
 8004724:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004728:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800472c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8004730:	e6b1      	b.n	8004496 <computeFuzzy+0x14a>

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
	if(input >= mf.params[2])  return 0;
 8004732:	eef4 7ac6 	vcmpe.f32	s15, s12
 8004736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473a:	f6bf ae9a 	bge.w	8004472 <computeFuzzy+0x126>
	if(input == mf.params[1]) return 1;
 800473e:	eef4 5a67 	vcmp.f32	s11, s15
 8004742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004746:	f000 80d7 	beq.w	80048f8 <computeFuzzy+0x5ac>

	if((input > mf.params[0]) && (input < mf.params[1])){
 800474a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004752:	f340 812c 	ble.w	80049ae <computeFuzzy+0x662>
 8004756:	eef4 7ae5 	vcmpe.f32	s15, s11
 800475a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475e:	f140 8126 	bpl.w	80049ae <computeFuzzy+0x662>
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
 8004762:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8004766:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800476a:	ee87 7a25 	vdiv.f32	s14, s14, s11
 800476e:	e682      	b.n	8004476 <computeFuzzy+0x12a>

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
	if(input >= mf.params[2])  return 0;
 8004770:	eef4 7ac6 	vcmpe.f32	s15, s12
 8004774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004778:	f6bf ae6b 	bge.w	8004452 <computeFuzzy+0x106>
	if(input == mf.params[1]) return 1;
 800477c:	eef4 5a67 	vcmp.f32	s11, s15
 8004780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004784:	f000 80b5 	beq.w	80048f2 <computeFuzzy+0x5a6>

	if((input > mf.params[0]) && (input < mf.params[1])){
 8004788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800478c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004790:	f340 8106 	ble.w	80049a0 <computeFuzzy+0x654>
 8004794:	eef4 7ae5 	vcmpe.f32	s15, s11
 8004798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479c:	f140 8100 	bpl.w	80049a0 <computeFuzzy+0x654>
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
 80047a0:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80047a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80047a8:	ee87 7a25 	vdiv.f32	s14, s14, s11
 80047ac:	e653      	b.n	8004456 <computeFuzzy+0x10a>

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
	if(input >= mf.params[2])  return 0;
 80047ae:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80047b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b6:	f67f ae31 	bls.w	800441c <computeFuzzy+0xd0>
	if(input == mf.params[1]) return 1;
 80047ba:	eeb4 5a67 	vcmp.f32	s10, s15
 80047be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c2:	f000 8093 	beq.w	80048ec <computeFuzzy+0x5a0>

	if((input > mf.params[0]) && (input < mf.params[1])){
 80047c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ce:	f140 80a8 	bpl.w	8004922 <computeFuzzy+0x5d6>
 80047d2:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80047d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047da:	f340 80a2 	ble.w	8004922 <computeFuzzy+0x5d6>
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
 80047de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047e2:	ee35 7a47 	vsub.f32	s14, s10, s14
 80047e6:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80047ea:	e619      	b.n	8004420 <computeFuzzy+0xd4>

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
	if(input >= mf.params[2])  return 0;
 80047ec:	eef4 7ac6 	vcmpe.f32	s15, s12
 80047f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f4:	f6bf ae02 	bge.w	80043fc <computeFuzzy+0xb0>
	if(input == mf.params[1]) return 1;
 80047f8:	eeb4 5a67 	vcmp.f32	s10, s15
 80047fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004800:	d071      	beq.n	80048e6 <computeFuzzy+0x59a>

	if((input > mf.params[0]) && (input < mf.params[1])){
 8004802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480a:	f340 80b4 	ble.w	8004976 <computeFuzzy+0x62a>
 800480e:	eef4 7ac5 	vcmpe.f32	s15, s10
 8004812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004816:	f140 80ae 	bpl.w	8004976 <computeFuzzy+0x62a>
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
 800481a:	ee35 5a47 	vsub.f32	s10, s10, s14
 800481e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004822:	ee87 7a05 	vdiv.f32	s14, s14, s10
 8004826:	e5eb      	b.n	8004400 <computeFuzzy+0xb4>

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
	if(input >= mf.params[2])  return 0;
 8004828:	eef4 7ac6 	vcmpe.f32	s15, s12
 800482c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004830:	f6bf add4 	bge.w	80043dc <computeFuzzy+0x90>
	if(input == mf.params[1]) return 1;
 8004834:	eeb4 5a67 	vcmp.f32	s10, s15
 8004838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483c:	d050      	beq.n	80048e0 <computeFuzzy+0x594>

	if((input > mf.params[0]) && (input < mf.params[1])){
 800483e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004846:	f340 80a4 	ble.w	8004992 <computeFuzzy+0x646>
 800484a:	eef4 7ac5 	vcmpe.f32	s15, s10
 800484e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004852:	f140 809e 	bpl.w	8004992 <computeFuzzy+0x646>
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
 8004856:	ee35 5a47 	vsub.f32	s10, s10, s14
 800485a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800485e:	ee87 7a05 	vdiv.f32	s14, s14, s10
 8004862:	e5bd      	b.n	80043e0 <computeFuzzy+0x94>

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
	if(input >= mf.params[2])  return 0;
 8004864:	eef4 7ac6 	vcmpe.f32	s15, s12
 8004868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486c:	f6bf ada6 	bge.w	80043bc <computeFuzzy+0x70>
	if(input == mf.params[1]) return 1;
 8004870:	eeb4 5a67 	vcmp.f32	s10, s15
 8004874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004878:	d02f      	beq.n	80048da <computeFuzzy+0x58e>

	if((input > mf.params[0]) && (input < mf.params[1])){
 800487a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800487e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004882:	dd7f      	ble.n	8004984 <computeFuzzy+0x638>
 8004884:	eef4 7ac5 	vcmpe.f32	s15, s10
 8004888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488c:	d57a      	bpl.n	8004984 <computeFuzzy+0x638>
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
 800488e:	ee35 5a47 	vsub.f32	s10, s10, s14
 8004892:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004896:	ee87 7a05 	vdiv.f32	s14, s14, s10
 800489a:	e591      	b.n	80043c0 <computeFuzzy+0x74>

// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
	if(input >= mf.params[2])  return 0;
 800489c:	eef4 7ac6 	vcmpe.f32	s15, s12
 80048a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a4:	f6bf ad7a 	bge.w	800439c <computeFuzzy+0x50>
	if(input == mf.params[1]) return 1;
 80048a8:	eeb4 5a67 	vcmp.f32	s10, s15
 80048ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b0:	d010      	beq.n	80048d4 <computeFuzzy+0x588>

	if((input > mf.params[0]) && (input < mf.params[1])){
 80048b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ba:	dd39      	ble.n	8004930 <computeFuzzy+0x5e4>
 80048bc:	eef4 7ac5 	vcmpe.f32	s15, s10
 80048c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c4:	d534      	bpl.n	8004930 <computeFuzzy+0x5e4>
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
 80048c6:	ee35 5a47 	vsub.f32	s10, s10, s14
 80048ca:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80048ce:	ee87 7a05 	vdiv.f32	s14, s14, s10
 80048d2:	e565      	b.n	80043a0 <computeFuzzy+0x54>
// Given a membership function, returns the truth value for a given input
float getTruthValue(struct mf_struct mf, float input){

	if(input <= mf.params[0])  return 0;
	if(input >= mf.params[2])  return 0;
	if(input == mf.params[1]) return 1;
 80048d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 80048d8:	e562      	b.n	80043a0 <computeFuzzy+0x54>
 80048da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 80048de:	e56f      	b.n	80043c0 <computeFuzzy+0x74>
 80048e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 80048e4:	e57c      	b.n	80043e0 <computeFuzzy+0x94>
 80048e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 80048ea:	e589      	b.n	8004400 <computeFuzzy+0xb4>
 80048ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80048f0:	e596      	b.n	8004420 <computeFuzzy+0xd4>
 80048f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 80048f6:	e5ae      	b.n	8004456 <computeFuzzy+0x10a>
 80048f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 80048fc:	e5bb      	b.n	8004476 <computeFuzzy+0x12a>
 80048fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8004902:	e5c8      	b.n	8004496 <computeFuzzy+0x14a>
 8004904:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8004908:	e5df      	b.n	80044ca <computeFuzzy+0x17e>
 800490a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 800490e:	e5ec      	b.n	80044ea <computeFuzzy+0x19e>
 8004910:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8004914:	e5f9      	b.n	800450a <computeFuzzy+0x1be>
 8004916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 800491a:	e605      	b.n	8004528 <computeFuzzy+0x1dc>
 800491c:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8004920:	e611      	b.n	8004546 <computeFuzzy+0x1fa>

	if((input > mf.params[0]) && (input < mf.params[1])){
		return ((input - mf.params[0]) / (mf.params[1] -  mf.params[0]));
	}

	return ((mf.params[2] - input) / (mf.params[2] - mf.params[1]));
 8004922:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004926:	ee36 6a45 	vsub.f32	s12, s12, s10
 800492a:	eec7 7a86 	vdiv.f32	s15, s15, s12
 800492e:	e577      	b.n	8004420 <computeFuzzy+0xd4>
 8004930:	ee36 7a45 	vsub.f32	s14, s12, s10
 8004934:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004938:	ee86 7a07 	vdiv.f32	s14, s12, s14
 800493c:	e530      	b.n	80043a0 <computeFuzzy+0x54>
 800493e:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8004942:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004946:	ee86 7a87 	vdiv.f32	s14, s13, s14
 800494a:	e5ed      	b.n	8004528 <computeFuzzy+0x1dc>
 800494c:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8004950:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004954:	ee86 7a87 	vdiv.f32	s14, s13, s14
 8004958:	e5c7      	b.n	80044ea <computeFuzzy+0x19e>
 800495a:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800495e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004962:	ee86 7a87 	vdiv.f32	s14, s13, s14
 8004966:	e5d0      	b.n	800450a <computeFuzzy+0x1be>
 8004968:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800496c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8004970:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 8004974:	e5e7      	b.n	8004546 <computeFuzzy+0x1fa>
 8004976:	ee36 7a45 	vsub.f32	s14, s12, s10
 800497a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800497e:	ee86 7a07 	vdiv.f32	s14, s12, s14
 8004982:	e53d      	b.n	8004400 <computeFuzzy+0xb4>
 8004984:	ee36 7a45 	vsub.f32	s14, s12, s10
 8004988:	ee36 6a67 	vsub.f32	s12, s12, s15
 800498c:	ee86 7a07 	vdiv.f32	s14, s12, s14
 8004990:	e516      	b.n	80043c0 <computeFuzzy+0x74>
 8004992:	ee36 7a45 	vsub.f32	s14, s12, s10
 8004996:	ee36 6a67 	vsub.f32	s12, s12, s15
 800499a:	ee86 7a07 	vdiv.f32	s14, s12, s14
 800499e:	e51f      	b.n	80043e0 <computeFuzzy+0x94>
 80049a0:	ee36 7a65 	vsub.f32	s14, s12, s11
 80049a4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80049a8:	ee86 7a07 	vdiv.f32	s14, s12, s14
 80049ac:	e553      	b.n	8004456 <computeFuzzy+0x10a>
 80049ae:	ee36 7a65 	vsub.f32	s14, s12, s11
 80049b2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80049b6:	ee86 7a07 	vdiv.f32	s14, s12, s14
 80049ba:	e55c      	b.n	8004476 <computeFuzzy+0x12a>
 80049bc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80049c0:	ee36 6a65 	vsub.f32	s12, s12, s11
 80049c4:	eec7 7a86 	vdiv.f32	s15, s15, s12
 80049c8:	e565      	b.n	8004496 <computeFuzzy+0x14a>
 80049ca:	ee36 7ac6 	vsub.f32	s14, s13, s12
 80049ce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80049d2:	ee86 7a87 	vdiv.f32	s14, s13, s14
 80049d6:	e578      	b.n	80044ca <computeFuzzy+0x17e>

080049d8 <setMotorData>:
// A file-scope variable for sharing motor data between tasks
struct motor_data_struct shared_motor_data = {0,0,50};

struct control_params_struct shared_control_params = {true, 0, 0};

void setMotorData(struct motor_data_struct new_motor_data){
 80049d8:	b510      	push	{r4, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	ac01      	add	r4, sp, #4
 80049de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	taskENTER_CRITICAL();
 80049e2:	f7fd fb05 	bl	8001ff0 <vPortEnterCritical>
	shared_motor_data = new_motor_data;
 80049e6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80049ea:	4b04      	ldr	r3, [pc, #16]	; (80049fc <setMotorData+0x24>)
 80049ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	taskEXIT_CRITICAL();
}
 80049f0:	b004      	add	sp, #16
 80049f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
struct control_params_struct shared_control_params = {true, 0, 0};

void setMotorData(struct motor_data_struct new_motor_data){
	taskENTER_CRITICAL();
	shared_motor_data = new_motor_data;
	taskEXIT_CRITICAL();
 80049f6:	f7fd bb1d 	b.w	8002034 <vPortExitCritical>
 80049fa:	bf00      	nop
 80049fc:	1ffe8920 	.word	0x1ffe8920

08004a00 <getMotorData>:
}


struct motor_data_struct getMotorData(void){
 8004a00:	b510      	push	{r4, lr}
 8004a02:	4604      	mov	r4, r0
	struct motor_data_struct result;
	taskENTER_CRITICAL();
 8004a04:	f7fd faf4 	bl	8001ff0 <vPortEnterCritical>
	result = shared_motor_data;
 8004a08:	4b04      	ldr	r3, [pc, #16]	; (8004a1c <getMotorData+0x1c>)
 8004a0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	taskEXIT_CRITICAL();
 8004a12:	f7fd fb0f 	bl	8002034 <vPortExitCritical>
	return result;
}
 8004a16:	4620      	mov	r0, r4
 8004a18:	bd10      	pop	{r4, pc}
 8004a1a:	bf00      	nop
 8004a1c:	1ffe8920 	.word	0x1ffe8920

08004a20 <setControlParams>:

void setControlParams(struct control_params_struct new_control_params){
 8004a20:	b510      	push	{r4, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	ac01      	add	r4, sp, #4
 8004a26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	taskENTER_CRITICAL();
 8004a2a:	f7fd fae1 	bl	8001ff0 <vPortEnterCritical>
	shared_control_params = new_control_params;
 8004a2e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004a32:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <setControlParams+0x24>)
 8004a34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	taskEXIT_CRITICAL();
}
 8004a38:	b004      	add	sp, #16
 8004a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void setControlParams(struct control_params_struct new_control_params){
	taskENTER_CRITICAL();
	shared_control_params = new_control_params;
	taskEXIT_CRITICAL();
 8004a3e:	f7fd baf9 	b.w	8002034 <vPortExitCritical>
 8004a42:	bf00      	nop
 8004a44:	1ffe8914 	.word	0x1ffe8914

08004a48 <getControlParams>:
}

struct control_params_struct getControlParams(void){
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	4604      	mov	r4, r0
	struct control_params_struct result;
	taskENTER_CRITICAL();
 8004a4c:	f7fd fad0 	bl	8001ff0 <vPortEnterCritical>
	result = shared_control_params;
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <getControlParams+0x1c>)
 8004a52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	taskEXIT_CRITICAL();
 8004a5a:	f7fd faeb 	bl	8002034 <vPortExitCritical>
	return result;
}
 8004a5e:	4620      	mov	r0, r4
 8004a60:	bd10      	pop	{r4, pc}
 8004a62:	bf00      	nop
 8004a64:	1ffe8914 	.word	0x1ffe8914

08004a68 <lcdTask>:
		vTaskDelayUntil(&prev_wake_time, 500/portTICK_PERIOD_MS);
	}
}
*/

static void lcdTask(void){
 8004a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a6a:	ed2d 8b02 	vpush	{d8}
 8004a6e:	b08d      	sub	sp, #52	; 0x34
	static TickType_t prev_wake_time;
	static struct motor_data_struct motor_data;

	prev_wake_time=xTaskGetTickCount();
 8004a70:	f7fe f990 	bl	8002d94 <xTaskGetTickCount>
 8004a74:	4b44      	ldr	r3, [pc, #272]	; (8004b88 <lcdTask+0x120>)
 8004a76:	4d45      	ldr	r5, [pc, #276]	; (8004b8c <lcdTask+0x124>)
 8004a78:	6018      	str	r0, [r3, #0]


	char buffer[30];

	GUI_Clear();
 8004a7a:	f002 fcbd 	bl	80073f8 <GUI_Clear>
	GUI_SetFont(&GUI_Font16B_1);  // Set the font-type
 8004a7e:	4844      	ldr	r0, [pc, #272]	; (8004b90 <lcdTask+0x128>)
 8004a80:	f002 fb46 	bl	8007110 <GUI_SetFont>
 8004a84:	466e      	mov	r6, sp

	while(1){

		motor_data = getMotorData();
 8004a86:	4630      	mov	r0, r6
 8004a88:	f7ff ffba 	bl	8004a00 <getMotorData>
 8004a8c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004a90:	e885 0007 	stmia.w	r5, {r0, r1, r2}



		GUI_SetColor(GUI_LIGHTCYAN);
 8004a94:	483f      	ldr	r0, [pc, #252]	; (8004b94 <lcdTask+0x12c>)
		GUI_DispStringAt("Speed:", 0, 38);
		GUI_DispStringAt("PWM:", 0, 58);

		GUI_SetColor(GUI_WHITE);

		sprintf(buffer, "%"PRId32".%"PRId32"    ", (int32_t) motor_data.position, ((int32_t)(motor_data.position*10)%10));
 8004a96:	4f40      	ldr	r7, [pc, #256]	; (8004b98 <lcdTask+0x130>)

		motor_data = getMotorData();



		GUI_SetColor(GUI_LIGHTCYAN);
 8004a98:	f002 fb44 	bl	8007124 <GUI_SetColor>

		GUI_DispStringAt("Position:", 0, 18);
 8004a9c:	483f      	ldr	r0, [pc, #252]	; (8004b9c <lcdTask+0x134>)
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	2212      	movs	r2, #18
 8004aa2:	f002 fb41 	bl	8007128 <GUI_DispStringAt>
		GUI_DispStringAt("Speed:", 0, 38);
 8004aa6:	483e      	ldr	r0, [pc, #248]	; (8004ba0 <lcdTask+0x138>)
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	2226      	movs	r2, #38	; 0x26
 8004aac:	f002 fb3c 	bl	8007128 <GUI_DispStringAt>
		GUI_DispStringAt("PWM:", 0, 58);
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	223a      	movs	r2, #58	; 0x3a
 8004ab4:	483b      	ldr	r0, [pc, #236]	; (8004ba4 <lcdTask+0x13c>)
 8004ab6:	f002 fb37 	bl	8007128 <GUI_DispStringAt>

		GUI_SetColor(GUI_WHITE);
 8004aba:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8004abe:	f002 fb31 	bl	8007124 <GUI_SetColor>

		sprintf(buffer, "%"PRId32".%"PRId32"    ", (int32_t) motor_data.position, ((int32_t)(motor_data.position*10)%10));
 8004ac2:	ed95 7a00 	vldr	s14, [r5]
 8004ac6:	4938      	ldr	r1, [pc, #224]	; (8004ba8 <lcdTask+0x140>)
 8004ac8:	eeb2 8a04 	vmov.f32	s16, #36	; 0x24
 8004acc:	ee67 7a08 	vmul.f32	s15, s14, s16
 8004ad0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ad8:	ee17 2a10 	vmov	r2, s14
 8004adc:	ee17 3a90 	vmov	r3, s15
 8004ae0:	fb87 4e03 	smull	r4, lr, r7, r3
 8004ae4:	17dc      	asrs	r4, r3, #31
 8004ae6:	ebc4 04ae 	rsb	r4, r4, lr, asr #2
 8004aea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004aee:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8004af2:	a804      	add	r0, sp, #16
 8004af4:	f009 f8c6 	bl	800dc84 <siprintf>
		GUI_DispStringAt(buffer, 60, 18);
 8004af8:	a804      	add	r0, sp, #16
 8004afa:	213c      	movs	r1, #60	; 0x3c
 8004afc:	2212      	movs	r2, #18
 8004afe:	f002 fb13 	bl	8007128 <GUI_DispStringAt>

		sprintf(buffer, "%"PRId32".%"PRId32"    ", (int32_t) motor_data.speed, ((int32_t)(motor_data.speed*10)%10));
 8004b02:	ed95 7a01 	vldr	s14, [r5, #4]
 8004b06:	4928      	ldr	r1, [pc, #160]	; (8004ba8 <lcdTask+0x140>)
 8004b08:	ee67 7a08 	vmul.f32	s15, s14, s16
 8004b0c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b14:	ee17 2a10 	vmov	r2, s14
 8004b18:	ee17 3a90 	vmov	r3, s15
 8004b1c:	fb87 4e03 	smull	r4, lr, r7, r3
 8004b20:	17dc      	asrs	r4, r3, #31
 8004b22:	ebc4 04ae 	rsb	r4, r4, lr, asr #2
 8004b26:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004b2a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8004b2e:	a804      	add	r0, sp, #16
 8004b30:	f009 f8a8 	bl	800dc84 <siprintf>
		GUI_DispStringAt(buffer, 60, 38);
 8004b34:	a804      	add	r0, sp, #16
 8004b36:	213c      	movs	r1, #60	; 0x3c
 8004b38:	2226      	movs	r2, #38	; 0x26
 8004b3a:	f002 faf5 	bl	8007128 <GUI_DispStringAt>

		sprintf(buffer, "%"PRId32".%"PRId32"    ", (int32_t) motor_data.current_pwm, ((int32_t)(motor_data.current_pwm*10)%10));
 8004b3e:	edd5 7a02 	vldr	s15, [r5, #8]
 8004b42:	4919      	ldr	r1, [pc, #100]	; (8004ba8 <lcdTask+0x140>)
 8004b44:	ee27 8a88 	vmul.f32	s16, s15, s16
 8004b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b4c:	a804      	add	r0, sp, #16
 8004b4e:	ee17 2a90 	vmov	r2, s15
 8004b52:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004b56:	ee17 4a90 	vmov	r4, s15
 8004b5a:	fb87 3704 	smull	r3, r7, r7, r4
 8004b5e:	17e3      	asrs	r3, r4, #31
 8004b60:	ebc3 03a7 	rsb	r3, r3, r7, asr #2
 8004b64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004b68:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
 8004b6c:	f009 f88a 	bl	800dc84 <siprintf>
		GUI_DispStringAt(buffer, 60, 58);
 8004b70:	a804      	add	r0, sp, #16
 8004b72:	213c      	movs	r1, #60	; 0x3c
 8004b74:	223a      	movs	r2, #58	; 0x3a
 8004b76:	f002 fad7 	bl	8007128 <GUI_DispStringAt>

		vTaskDelayUntil(&prev_wake_time, 500/portTICK_PERIOD_MS);
 8004b7a:	4803      	ldr	r0, [pc, #12]	; (8004b88 <lcdTask+0x120>)
 8004b7c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004b80:	f7fe fa28 	bl	8002fd4 <vTaskDelayUntil>
	}
 8004b84:	e77f      	b.n	8004a86 <lcdTask+0x1e>
 8004b86:	bf00      	nop
 8004b88:	1ffe9c10 	.word	0x1ffe9c10
 8004b8c:	1ffe9c24 	.word	0x1ffe9c24
 8004b90:	0800edac 	.word	0x0800edac
 8004b94:	00ffff80 	.word	0x00ffff80
 8004b98:	66666667 	.word	0x66666667
 8004b9c:	0800e62c 	.word	0x0800e62c
 8004ba0:	0800e638 	.word	0x0800e638
 8004ba4:	0800e640 	.word	0x0800e640
 8004ba8:	0800e648 	.word	0x0800e648

08004bac <controlTask>:
	xTaskCreate((void*) lcdTask, 	 "LCD Task", 	 task_stacks[lcdTaskEnum], 	   NULL, task_priorities[lcdTaskEnum],	   &task_handlers[lcdTaskEnum]);

}

// A task for the fuzzy controller
static void controlTask(void){
 8004bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb0:	ed2d 8b06 	vpush	{d8-d10}
 8004bb4:	b08f      	sub	sp, #60	; 0x3c

	// Current control parameters to follow
	struct control_params_struct current_control_params;

	// Initialize the fuzzy controller
	setupFuzzyController();
 8004bb6:	f7ff f80b 	bl	8003bd0 <setupFuzzyController>
 8004bba:	4ba4      	ldr	r3, [pc, #656]	; (8004e4c <controlTask+0x2a0>)
 8004bbc:	4aa4      	ldr	r2, [pc, #656]	; (8004e50 <controlTask+0x2a4>)

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8004bbe:	7c1c      	ldrb	r4, [r3, #16]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f892 e010 	ldrb.w	lr, [r2, #16]
 8004bc6:	6811      	ldr	r1, [r2, #0]
	// Turn on H-bridge
	DIGITAL_IO_SetOutputHigh(&INH_1);
	DIGITAL_IO_SetOutputHigh(&INH_2);

	// Start H-bridge PWM at 50% Duty Cycle (i.e. brake motor)
	PWM_CCU8_Start(&PWM_CCU8_0);
 8004bc8:	48a2      	ldr	r0, [pc, #648]	; (8004e54 <controlTask+0x2a8>)
 8004bca:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 8004eb8 <controlTask+0x30c>
 8004bce:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8004e7c <controlTask+0x2d0>
 8004bd2:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 8004ebc <controlTask+0x310>
 8004bd6:	4fa0      	ldr	r7, [pc, #640]	; (8004e58 <controlTask+0x2ac>)
 8004bd8:	4ea0      	ldr	r6, [pc, #640]	; (8004e5c <controlTask+0x2b0>)
 8004bda:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 8004e94 <controlTask+0x2e8>
			// Normal difference
			encoder_value_diff = ((int64_t)encoder_value) - ((int64_t)prev_encoder_value);
		}

		// Compute motor speed in RPMs
		motor_speed = ((float)encoder_value_diff) * control_freq;
 8004bde:	eddf 9aa0 	vldr	s19, [pc, #640]	; 8004e60 <controlTask+0x2b4>
		motor_speed = (motor_speed / ((float)full_rotation_counts)) * 60.0F;
 8004be2:	ed9f 9aa0 	vldr	s18, [pc, #640]	; 8004e64 <controlTask+0x2b8>
 8004be6:	ed9f aaa0 	vldr	s20, [pc, #640]	; 8004e68 <controlTask+0x2bc>
		}
		*/

		// If position control is activated, then use last cycle's speed reference
		if(current_control_params.control_position == true){
			current_control_params.speed_ref = fuzzy_out_speed_reference * max_rpm;
 8004bea:	eddf 8aa0 	vldr	s17, [pc, #640]	; 8004e6c <controlTask+0x2c0>
 8004bee:	461d      	mov	r5, r3
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	fa03 f20e 	lsl.w	r2, r3, lr
 8004bf6:	fa03 f404 	lsl.w	r4, r3, r4
 8004bfa:	604a      	str	r2, [r1, #4]
 8004bfc:	606c      	str	r4, [r5, #4]
 8004bfe:	9304      	str	r3, [sp, #16]
	// Turn on H-bridge
	DIGITAL_IO_SetOutputHigh(&INH_1);
	DIGITAL_IO_SetOutputHigh(&INH_2);

	// Start H-bridge PWM at 50% Duty Cycle (i.e. brake motor)
	PWM_CCU8_Start(&PWM_CCU8_0);
 8004c00:	f7fc fe94 	bl	800192c <PWM_CCU8_Start>
	PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_0,XMC_CCU8_SLICE_COMPARE_CHANNEL_1, 50*100);
 8004c04:	2100      	movs	r1, #0
 8004c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0a:	4892      	ldr	r0, [pc, #584]	; (8004e54 <controlTask+0x2a8>)
 8004c0c:	f7fc fea8 	bl	8001960 <PWM_CCU8_SetDutyCycleSymmetric>

	// Get current "wake" time to execute properly the very first task wait
	prev_wake_time=xTaskGetTickCount();
 8004c10:	f7fe f8c0 	bl	8002d94 <xTaskGetTickCount>
 8004c14:	4996      	ldr	r1, [pc, #600]	; (8004e70 <controlTask+0x2c4>)
 8004c16:	9b04      	ldr	r3, [sp, #16]
 8004c18:	7c0a      	ldrb	r2, [r1, #16]
 8004c1a:	680c      	ldr	r4, [r1, #0]
 8004c1c:	f8df e284 	ldr.w	lr, [pc, #644]	; 8004ea4 <controlTask+0x2f8>
 8004c20:	9404      	str	r4, [sp, #16]
 8004c22:	4093      	lsls	r3, r2
 8004c24:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004c28:	9305      	str	r3, [sp, #20]
 8004c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8004c2e:	f8ce 0000 	str.w	r0, [lr]
 8004c32:	9306      	str	r3, [sp, #24]
 8004c34:	4622      	mov	r2, r4
 8004c36:	e098      	b.n	8004d6a <controlTask+0x1be>
		current_control_params = getControlParams();

		encoder_value = getEncoderValue();

		// Handle overflow or underflow
		if((prev_encoder_value > ((UINT32_MAX/4)*3)) && (encoder_value < (UINT32_MAX/4))){
 8004c38:	4b8e      	ldr	r3, [pc, #568]	; (8004e74 <controlTask+0x2c8>)
 8004c3a:	4298      	cmp	r0, r3
 8004c3c:	f200 80bb 	bhi.w	8004db6 <controlTask+0x20a>
			// Overflow
			encoder_value_diff = ((int64_t) UINT32_MAX - prev_encoder_value + encoder_value + 1);
 8004c40:	f04f 34ff 	mov.w	r4, #4294967295
 8004c44:	1aa4      	subs	r4, r4, r2
 8004c46:	f04f 0500 	mov.w	r5, #0
 8004c4a:	f165 0500 	sbc.w	r5, r5, #0
 8004c4e:	1822      	adds	r2, r4, r0
 8004c50:	f145 0300 	adc.w	r3, r5, #0
 8004c54:	1c54      	adds	r4, r2, #1
 8004c56:	f143 0500 	adc.w	r5, r3, #0
 8004c5a:	4b87      	ldr	r3, [pc, #540]	; (8004e78 <controlTask+0x2cc>)
 8004c5c:	e9c3 4500 	strd	r4, r5, [r3]
			// Normal difference
			encoder_value_diff = ((int64_t)encoder_value) - ((int64_t)prev_encoder_value);
		}

		// Compute motor speed in RPMs
		motor_speed = ((float)encoder_value_diff) * control_freq;
 8004c60:	4629      	mov	r1, r5
 8004c62:	4620      	mov	r0, r4
 8004c64:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004c68:	f008 feba 	bl	800d9e0 <__aeabi_l2f>
 8004c6c:	ee07 0a90 	vmov	s15, r0
 8004c70:	ee67 7aa9 	vmul.f32	s15, s15, s19
		motor_speed = (motor_speed / ((float)full_rotation_counts)) * 60.0F;

		// Compute motor position (in encoder counts)
		motor_position += encoder_value_diff;
 8004c74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
			encoder_value_diff = ((int64_t)encoder_value) - ((int64_t)prev_encoder_value);
		}

		// Compute motor speed in RPMs
		motor_speed = ((float)encoder_value_diff) * control_freq;
		motor_speed = (motor_speed / ((float)full_rotation_counts)) * 60.0F;
 8004c78:	eec7 7a89 	vdiv.f32	s15, s15, s18

		// Compute motor position (in encoder counts)
		motor_position += encoder_value_diff;
 8004c7c:	f8d8 0000 	ldr.w	r0, [r8]
			setControlParams(current_control_params);
		}
		*/

		// If position control is activated, then use last cycle's speed reference
		if(current_control_params.control_position == true){
 8004c80:	f89d 1020 	ldrb.w	r1, [sp, #32]
			encoder_value_diff = ((int64_t)encoder_value) - ((int64_t)prev_encoder_value);
		}

		// Compute motor speed in RPMs
		motor_speed = ((float)encoder_value_diff) * control_freq;
		motor_speed = (motor_speed / ((float)full_rotation_counts)) * 60.0F;
 8004c84:	4b7d      	ldr	r3, [pc, #500]	; (8004e7c <controlTask+0x2d0>)

		// Compute motor position (in encoder counts)
		motor_position += encoder_value_diff;
 8004c86:	f8df c234 	ldr.w	ip, [pc, #564]	; 8004ebc <controlTask+0x310>
 8004c8a:	1822      	adds	r2, r4, r0
 8004c8c:	f8c8 2000 	str.w	r2, [r8]
			encoder_value_diff = ((int64_t)encoder_value) - ((int64_t)prev_encoder_value);
		}

		// Compute motor speed in RPMs
		motor_speed = ((float)encoder_value_diff) * control_freq;
		motor_speed = (motor_speed / ((float)full_rotation_counts)) * 60.0F;
 8004c90:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8004c94:	edc9 7a00 	vstr	s15, [r9]
			setControlParams(current_control_params);
		}
		*/

		// If position control is activated, then use last cycle's speed reference
		if(current_control_params.control_position == true){
 8004c98:	2900      	cmp	r1, #0
 8004c9a:	f040 8093 	bne.w	8004dc4 <controlTask+0x218>

		// Compute normalized error
		speed_error = (current_control_params.speed_ref - motor_speed) / max_rpm;

		// Compute normalized acceleration
		accel = ((motor_speed/max_rpm) - (prev_motor_speed/max_rpm)) * control_freq;
 8004c9e:	edd7 6a00 	vldr	s13, [r7]
			// Force speed setting so that the user can read it back
			setControlParams(current_control_params);
		}

		// Compute normalized error
		speed_error = (current_control_params.speed_ref - motor_speed) / max_rpm;
 8004ca2:	4d77      	ldr	r5, [pc, #476]	; (8004e80 <controlTask+0x2d4>)

		// Compute normalized position
		motor_position_normalized = (((float)motor_position) / ((float)full_rotation_counts));
		position_error = current_control_params.position_ref - motor_position_normalized;

		computeFuzzy(speed_error, accel, position_error, &fuzzy_out_pwm_increment, &fuzzy_out_speed_reference);
 8004ca4:	4b77      	ldr	r3, [pc, #476]	; (8004e84 <controlTask+0x2d8>)
 8004ca6:	9300      	str	r3, [sp, #0]

		// Compute normalized error
		speed_error = (current_control_params.speed_ref - motor_speed) / max_rpm;

		// Compute normalized acceleration
		accel = ((motor_speed/max_rpm) - (prev_motor_speed/max_rpm)) * control_freq;
 8004ca8:	ee87 6aa8 	vdiv.f32	s12, s15, s17

		// Compute normalized position
		motor_position_normalized = (((float)motor_position) / ((float)full_rotation_counts));
		position_error = current_control_params.position_ref - motor_position_normalized;

		computeFuzzy(speed_error, accel, position_error, &fuzzy_out_pwm_increment, &fuzzy_out_speed_reference);
 8004cac:	4b76      	ldr	r3, [pc, #472]	; (8004e88 <controlTask+0x2dc>)

		// Compute normalized acceleration
		accel = ((motor_speed/max_rpm) - (prev_motor_speed/max_rpm)) * control_freq;

		// Compute normalized position
		motor_position_normalized = (((float)motor_position) / ((float)full_rotation_counts));
 8004cae:	ee07 2a10 	vmov	s14, r2

		// Compute normalized error
		speed_error = (current_control_params.speed_ref - motor_speed) / max_rpm;

		// Compute normalized acceleration
		accel = ((motor_speed/max_rpm) - (prev_motor_speed/max_rpm)) * control_freq;
 8004cb2:	eec6 6aa8 	vdiv.f32	s13, s13, s17
			// Force speed setting so that the user can read it back
			setControlParams(current_control_params);
		}

		// Compute normalized error
		speed_error = (current_control_params.speed_ref - motor_speed) / max_rpm;
 8004cb6:	ee78 7a67 	vsub.f32	s15, s16, s15

		// Compute normalized acceleration
		accel = ((motor_speed/max_rpm) - (prev_motor_speed/max_rpm)) * control_freq;

		// Compute normalized position
		motor_position_normalized = (((float)motor_position) / ((float)full_rotation_counts));
 8004cba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			// Force speed setting so that the user can read it back
			setControlParams(current_control_params);
		}

		// Compute normalized error
		speed_error = (current_control_params.speed_ref - motor_speed) / max_rpm;
 8004cbe:	eec7 7aa8 	vdiv.f32	s15, s15, s17

		// Compute normalized acceleration
		accel = ((motor_speed/max_rpm) - (prev_motor_speed/max_rpm)) * control_freq;

		// Compute normalized position
		motor_position_normalized = (((float)motor_position) / ((float)full_rotation_counts));
 8004cc2:	ee87 7a09 	vdiv.f32	s14, s14, s18

		// Compute normalized error
		speed_error = (current_control_params.speed_ref - motor_speed) / max_rpm;

		// Compute normalized acceleration
		accel = ((motor_speed/max_rpm) - (prev_motor_speed/max_rpm)) * control_freq;
 8004cc6:	ee76 6a66 	vsub.f32	s13, s12, s13
			// Force speed setting so that the user can read it back
			setControlParams(current_control_params);
		}

		// Compute normalized error
		speed_error = (current_control_params.speed_ref - motor_speed) / max_rpm;
 8004cca:	edc5 7a00 	vstr	s15, [r5]

		// Compute normalized acceleration
		accel = ((motor_speed/max_rpm) - (prev_motor_speed/max_rpm)) * control_freq;
 8004cce:	ee66 6aa9 	vmul.f32	s13, s13, s19

		// Compute normalized position
		motor_position_normalized = (((float)motor_position) / ((float)full_rotation_counts));
		position_error = current_control_params.position_ref - motor_position_normalized;
 8004cd2:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24

		// Compute normalized error
		speed_error = (current_control_params.speed_ref - motor_speed) / max_rpm;

		// Compute normalized acceleration
		accel = ((motor_speed/max_rpm) - (prev_motor_speed/max_rpm)) * control_freq;
 8004cd6:	4d6d      	ldr	r5, [pc, #436]	; (8004e8c <controlTask+0x2e0>)

		// Compute normalized position
		motor_position_normalized = (((float)motor_position) / ((float)full_rotation_counts));
 8004cd8:	ed86 7a00 	vstr	s14, [r6]
		position_error = current_control_params.position_ref - motor_position_normalized;
 8004cdc:	ee35 6ac7 	vsub.f32	s12, s11, s14

		// Compute normalized error
		speed_error = (current_control_params.speed_ref - motor_speed) / max_rpm;

		// Compute normalized acceleration
		accel = ((motor_speed/max_rpm) - (prev_motor_speed/max_rpm)) * control_freq;
 8004ce0:	edc5 6a00 	vstr	s13, [r5]

		// Compute normalized position
		motor_position_normalized = (((float)motor_position) / ((float)full_rotation_counts));
		position_error = current_control_params.position_ref - motor_position_normalized;
 8004ce4:	4d6a      	ldr	r5, [pc, #424]	; (8004e90 <controlTask+0x2e4>)

		computeFuzzy(speed_error, accel, position_error, &fuzzy_out_pwm_increment, &fuzzy_out_speed_reference);
 8004ce6:	ee17 0a90 	vmov	r0, s15
 8004cea:	ee16 2a10 	vmov	r2, s12
 8004cee:	ee16 1a90 	vmov	r1, s13
		// Compute normalized acceleration
		accel = ((motor_speed/max_rpm) - (prev_motor_speed/max_rpm)) * control_freq;

		// Compute normalized position
		motor_position_normalized = (((float)motor_position) / ((float)full_rotation_counts));
		position_error = current_control_params.position_ref - motor_position_normalized;
 8004cf2:	ed85 6a00 	vstr	s12, [r5]

		computeFuzzy(speed_error, accel, position_error, &fuzzy_out_pwm_increment, &fuzzy_out_speed_reference);
 8004cf6:	f7ff fb29 	bl	800434c <computeFuzzy>

		fuzzy_sum += fuzzy_out_pwm_increment;
 8004cfa:	4b63      	ldr	r3, [pc, #396]	; (8004e88 <controlTask+0x2dc>)
 8004cfc:	ed9b 7a00 	vldr	s14, [fp]
 8004d00:	edd3 7a00 	vldr	s15, [r3]
 8004d04:	4b63      	ldr	r3, [pc, #396]	; (8004e94 <controlTask+0x2e8>)
 8004d06:	ee77 7a27 	vadd.f32	s15, s14, s15

		if(fuzzy_sum > 1){
 8004d0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8004d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d16:	dd6c      	ble.n	8004df2 <controlTask+0x246>
			fuzzy_sum = 1;
 8004d18:	ed83 7a00 	vstr	s14, [r3]
 8004d1c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004e98 <controlTask+0x2ec>
 8004d20:	f242 7210 	movw	r2, #10000	; 0x2710
		} else if(fuzzy_sum < -1){
			fuzzy_sum = -1;
		}

		fuzzy_pwm = ((fuzzy_sum/2) + 0.5)*100;
 8004d24:	4b5d      	ldr	r3, [pc, #372]	; (8004e9c <controlTask+0x2f0>)

		PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_0,XMC_CCU8_SLICE_COMPARE_CHANNEL_1, fuzzy_pwm*100);
 8004d26:	484b      	ldr	r0, [pc, #300]	; (8004e54 <controlTask+0x2a8>)
			fuzzy_sum = 1;
		} else if(fuzzy_sum < -1){
			fuzzy_sum = -1;
		}

		fuzzy_pwm = ((fuzzy_sum/2) + 0.5)*100;
 8004d28:	ed83 7a00 	vstr	s14, [r3]

		PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_0,XMC_CCU8_SLICE_COMPARE_CHANNEL_1, fuzzy_pwm*100);
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	f7fc fe17 	bl	8001960 <PWM_CCU8_SetDutyCycleSymmetric>

		// Prepare encoder value for next iteration
		prev_encoder_value = encoder_value;

		//Save motor data
		struct motor_data_struct motor_data = {motor_position_normalized, motor_speed, fuzzy_pwm};
 8004d32:	4b5a      	ldr	r3, [pc, #360]	; (8004e9c <controlTask+0x2f0>)
		fuzzy_pwm = ((fuzzy_sum/2) + 0.5)*100;

		PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_0,XMC_CCU8_SLICE_COMPARE_CHANNEL_1, fuzzy_pwm*100);

		// Prepare motor speed for next iteration
		prev_motor_speed = motor_speed;
 8004d34:	f8d9 e000 	ldr.w	lr, [r9]

		// Prepare encoder value for next iteration
		prev_encoder_value = encoder_value;

		//Save motor data
		struct motor_data_struct motor_data = {motor_position_normalized, motor_speed, fuzzy_pwm};
 8004d38:	6832      	ldr	r2, [r6, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 8004d40:	930d      	str	r3, [sp, #52]	; 0x34
 8004d42:	920b      	str	r2, [sp, #44]	; 0x2c
		setMotorData(motor_data);
 8004d44:	ab0b      	add	r3, sp, #44	; 0x2c

		// Prepare motor speed for next iteration
		prev_motor_speed = motor_speed;

		// Prepare encoder value for next iteration
		prev_encoder_value = encoder_value;
 8004d46:	4d56      	ldr	r5, [pc, #344]	; (8004ea0 <controlTask+0x2f4>)
		fuzzy_pwm = ((fuzzy_sum/2) + 0.5)*100;

		PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_0,XMC_CCU8_SLICE_COMPARE_CHANNEL_1, fuzzy_pwm*100);

		// Prepare motor speed for next iteration
		prev_motor_speed = motor_speed;
 8004d48:	f8c7 e000 	str.w	lr, [r7]
		// Prepare encoder value for next iteration
		prev_encoder_value = encoder_value;

		//Save motor data
		struct motor_data_struct motor_data = {motor_position_normalized, motor_speed, fuzzy_pwm};
		setMotorData(motor_data);
 8004d4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}

		// Prepare motor speed for next iteration
		prev_motor_speed = motor_speed;

		// Prepare encoder value for next iteration
		prev_encoder_value = encoder_value;
 8004d50:	f8da 3000 	ldr.w	r3, [sl]
 8004d54:	602b      	str	r3, [r5, #0]

		//Save motor data
		struct motor_data_struct motor_data = {motor_position_normalized, motor_speed, fuzzy_pwm};
		setMotorData(motor_data);
 8004d56:	f7ff fe3f 	bl	80049d8 <setMotorData>

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8004d5a:	9a04      	ldr	r2, [sp, #16]
 8004d5c:	9b06      	ldr	r3, [sp, #24]
 8004d5e:	6053      	str	r3, [r2, #4]

		DIGITAL_IO_SetOutputLow(&TEST_PIN);
		vTaskDelayUntil(&prev_wake_time, ((1.0F/control_freq) * 1000.0F)/portTICK_PERIOD_MS);
 8004d60:	4850      	ldr	r0, [pc, #320]	; (8004ea4 <controlTask+0x2f8>)
 8004d62:	2105      	movs	r1, #5
 8004d64:	f7fe f936 	bl	8002fd4 <vTaskDelayUntil>
 8004d68:	9a04      	ldr	r2, [sp, #16]

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8004d6a:	9b05      	ldr	r3, [sp, #20]
 8004d6c:	6053      	str	r3, [r2, #4]
	prev_wake_time=xTaskGetTickCount();

	while(1){
		DIGITAL_IO_SetOutputHigh(&TEST_PIN);

		current_control_params = getControlParams();
 8004d6e:	a808      	add	r0, sp, #32
 8004d70:	f7ff fe6a 	bl	8004a48 <getControlParams>
 8004d74:	ed9d 8a0a 	vldr	s16, [sp, #40]	; 0x28

		encoder_value = getEncoderValue();
 8004d78:	f7fe ff22 	bl	8003bc0 <getEncoderValue>

		// Handle overflow or underflow
		if((prev_encoder_value > ((UINT32_MAX/4)*3)) && (encoder_value < (UINT32_MAX/4))){
 8004d7c:	4b48      	ldr	r3, [pc, #288]	; (8004ea0 <controlTask+0x2f4>)
	while(1){
		DIGITAL_IO_SetOutputHigh(&TEST_PIN);

		current_control_params = getControlParams();

		encoder_value = getEncoderValue();
 8004d7e:	f8ca 0000 	str.w	r0, [sl]

		// Handle overflow or underflow
		if((prev_encoder_value > ((UINT32_MAX/4)*3)) && (encoder_value < (UINT32_MAX/4))){
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4b48      	ldr	r3, [pc, #288]	; (8004ea8 <controlTask+0x2fc>)
 8004d86:	429a      	cmp	r2, r3
 8004d88:	f63f af56 	bhi.w	8004c38 <controlTask+0x8c>
			// Overflow
			encoder_value_diff = ((int64_t) UINT32_MAX - prev_encoder_value + encoder_value + 1);
		} else if((prev_encoder_value < (UINT32_MAX/4)) && (encoder_value > ((UINT32_MAX/4)*3))){
 8004d8c:	4939      	ldr	r1, [pc, #228]	; (8004e74 <controlTask+0x2c8>)
 8004d8e:	428a      	cmp	r2, r1
 8004d90:	d811      	bhi.n	8004db6 <controlTask+0x20a>
 8004d92:	4298      	cmp	r0, r3
 8004d94:	d90f      	bls.n	8004db6 <controlTask+0x20a>
			// Underflow
			encoder_value_diff = -((int64_t)UINT32_MAX - encoder_value + prev_encoder_value + 1);
 8004d96:	f04f 34ff 	mov.w	r4, #4294967295
 8004d9a:	1a24      	subs	r4, r4, r0
 8004d9c:	f04f 0500 	mov.w	r5, #0
 8004da0:	f165 0500 	sbc.w	r5, r5, #0
 8004da4:	18a0      	adds	r0, r4, r2
 8004da6:	f145 0100 	adc.w	r1, r5, #0
 8004daa:	4b33      	ldr	r3, [pc, #204]	; (8004e78 <controlTask+0x2cc>)
 8004dac:	43c4      	mvns	r4, r0
 8004dae:	43cd      	mvns	r5, r1
 8004db0:	e9c3 4500 	strd	r4, r5, [r3]
 8004db4:	e754      	b.n	8004c60 <controlTask+0xb4>
		} else {
			// Normal difference
			encoder_value_diff = ((int64_t)encoder_value) - ((int64_t)prev_encoder_value);
 8004db6:	1a84      	subs	r4, r0, r2
 8004db8:	4b2f      	ldr	r3, [pc, #188]	; (8004e78 <controlTask+0x2cc>)
 8004dba:	eb60 0500 	sbc.w	r5, r0, r0
 8004dbe:	e9c3 4500 	strd	r4, r5, [r3]
 8004dc2:	e74d      	b.n	8004c60 <controlTask+0xb4>
 8004dc4:	9302      	str	r3, [sp, #8]
		}
		*/

		// If position control is activated, then use last cycle's speed reference
		if(current_control_params.control_position == true){
			current_control_params.speed_ref = fuzzy_out_speed_reference * max_rpm;
 8004dc6:	4b2f      	ldr	r3, [pc, #188]	; (8004e84 <controlTask+0x2d8>)
 8004dc8:	f8cd c01c 	str.w	ip, [sp, #28]
 8004dcc:	ed93 8a00 	vldr	s16, [r3]
 8004dd0:	ee28 8a28 	vmul.f32	s16, s16, s17
			// Force speed setting so that the user can read it back
			setControlParams(current_control_params);
 8004dd4:	ab08      	add	r3, sp, #32
 8004dd6:	ed8d 8a0a 	vstr	s16, [sp, #40]	; 0x28
 8004dda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004dde:	f7ff fe1f 	bl	8004a20 <setControlParams>
 8004de2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8004de6:	9b02      	ldr	r3, [sp, #8]
 8004de8:	f8dc 2000 	ldr.w	r2, [ip]
 8004dec:	edd3 7a00 	vldr	s15, [r3]
 8004df0:	e755      	b.n	8004c9e <controlTask+0xf2>

		fuzzy_sum += fuzzy_out_pwm_increment;

		if(fuzzy_sum > 1){
			fuzzy_sum = 1;
		} else if(fuzzy_sum < -1){
 8004df2:	eeff 6a00 	vmov.f32	s13, #240	; 0xf0
 8004df6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfe:	d41e      	bmi.n	8004e3e <controlTask+0x292>
 8004e00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 8004e04:	ee27 7a87 	vmul.f32	s14, s15, s14
		motor_position_normalized = (((float)motor_position) / ((float)full_rotation_counts));
		position_error = current_control_params.position_ref - motor_position_normalized;

		computeFuzzy(speed_error, accel, position_error, &fuzzy_out_pwm_increment, &fuzzy_out_speed_reference);

		fuzzy_sum += fuzzy_out_pwm_increment;
 8004e08:	edc3 7a00 	vstr	s15, [r3]
 8004e0c:	ee17 0a10 	vmov	r0, s14
 8004e10:	f008 fa60 	bl	800d2d4 <__aeabi_f2d>
 8004e14:	2200      	movs	r2, #0
 8004e16:	4b25      	ldr	r3, [pc, #148]	; (8004eac <controlTask+0x300>)
 8004e18:	f008 f8fe 	bl	800d018 <__adddf3>
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <controlTask+0x304>)
 8004e20:	f008 faac 	bl	800d37c <__aeabi_dmul>
 8004e24:	f008 fcbc 	bl	800d7a0 <__aeabi_d2f>
 8004e28:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8004e98 <controlTask+0x2ec>
 8004e2c:	ee07 0a10 	vmov	s14, r0
 8004e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e38:	ee17 2a90 	vmov	r2, s15
 8004e3c:	e772      	b.n	8004d24 <controlTask+0x178>

		if(fuzzy_sum > 1){
			fuzzy_sum = 1;
		} else if(fuzzy_sum < -1){
			fuzzy_sum = -1;
 8004e3e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004eb4 <controlTask+0x308>
 8004e42:	edc3 6a00 	vstr	s13, [r3]
 8004e46:	2200      	movs	r2, #0
 8004e48:	e76c      	b.n	8004d24 <controlTask+0x178>
 8004e4a:	bf00      	nop
 8004e4c:	0800e5c8 	.word	0x0800e5c8
 8004e50:	0800e604 	.word	0x0800e604
 8004e54:	1ffe8890 	.word	0x1ffe8890
 8004e58:	1ffe9bfc 	.word	0x1ffe9bfc
 8004e5c:	1ffe9c1c 	.word	0x1ffe9c1c
 8004e60:	43480000 	.word	0x43480000
 8004e64:	459c4000 	.word	0x459c4000
 8004e68:	42700000 	.word	0x42700000
 8004e6c:	43870000 	.word	0x43870000
 8004e70:	0800e58c 	.word	0x0800e58c
 8004e74:	3ffffffe 	.word	0x3ffffffe
 8004e78:	1ffe9c08 	.word	0x1ffe9c08
 8004e7c:	1ffe9bf8 	.word	0x1ffe9bf8
 8004e80:	1ffe9c30 	.word	0x1ffe9c30
 8004e84:	1ffe9c04 	.word	0x1ffe9c04
 8004e88:	1ffe9bf0 	.word	0x1ffe9bf0
 8004e8c:	1ffe9c34 	.word	0x1ffe9c34
 8004e90:	1ffe9c20 	.word	0x1ffe9c20
 8004e94:	1ffe9c00 	.word	0x1ffe9c00
 8004e98:	42c80000 	.word	0x42c80000
 8004e9c:	1ffe9c18 	.word	0x1ffe9c18
 8004ea0:	1ffe9bec 	.word	0x1ffe9bec
 8004ea4:	1ffe9c38 	.word	0x1ffe9c38
 8004ea8:	bffffffd 	.word	0xbffffffd
 8004eac:	3fe00000 	.word	0x3fe00000
 8004eb0:	40590000 	.word	0x40590000
 8004eb4:	00000000 	.word	0x00000000
 8004eb8:	1ffe9c14 	.word	0x1ffe9c14
 8004ebc:	1ffe9bf4 	.word	0x1ffe9bf4

08004ec0 <startTasks>:
	tskIDLE_PRIORITY+1
};

TaskHandle_t task_handlers[NumberOfTasks];

void startTasks(void){
 8004ec0:	b570      	push	{r4, r5, r6, lr}

	xTaskCreate((void*) controlTask, "Control Task", task_stacks[controlTaskEnum], NULL, task_priorities[controlTaskEnum], &task_handlers[controlTaskEnum]);
 8004ec2:	4d0c      	ldr	r5, [pc, #48]	; (8004ef4 <startTasks+0x34>)
 8004ec4:	4e0c      	ldr	r6, [pc, #48]	; (8004ef8 <startTasks+0x38>)
 8004ec6:	682b      	ldr	r3, [r5, #0]
 8004ec8:	4c0c      	ldr	r4, [pc, #48]	; (8004efc <startTasks+0x3c>)
 8004eca:	8832      	ldrh	r2, [r6, #0]
 8004ecc:	490c      	ldr	r1, [pc, #48]	; (8004f00 <startTasks+0x40>)
 8004ece:	480d      	ldr	r0, [pc, #52]	; (8004f04 <startTasks+0x44>)
	tskIDLE_PRIORITY+1
};

TaskHandle_t task_handlers[NumberOfTasks];

void startTasks(void){
 8004ed0:	b082      	sub	sp, #8

	xTaskCreate((void*) controlTask, "Control Task", task_stacks[controlTaskEnum], NULL, task_priorities[controlTaskEnum], &task_handlers[controlTaskEnum]);
 8004ed2:	e88d 0018 	stmia.w	sp, {r3, r4}
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f7fd fdda 	bl	8002a90 <xTaskCreate>
	xTaskCreate((void*) lcdTask, 	 "LCD Task", 	 task_stacks[lcdTaskEnum], 	   NULL, task_priorities[lcdTaskEnum],	   &task_handlers[lcdTaskEnum]);
 8004edc:	3404      	adds	r4, #4
 8004ede:	686b      	ldr	r3, [r5, #4]
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	8872      	ldrh	r2, [r6, #2]
 8004ee4:	9401      	str	r4, [sp, #4]
 8004ee6:	4908      	ldr	r1, [pc, #32]	; (8004f08 <startTasks+0x48>)
 8004ee8:	4808      	ldr	r0, [pc, #32]	; (8004f0c <startTasks+0x4c>)
 8004eea:	2300      	movs	r3, #0
 8004eec:	f7fd fdd0 	bl	8002a90 <xTaskCreate>

}
 8004ef0:	b002      	add	sp, #8
 8004ef2:	bd70      	pop	{r4, r5, r6, pc}
 8004ef4:	1ffe892c 	.word	0x1ffe892c
 8004ef8:	1ffe8934 	.word	0x1ffe8934
 8004efc:	1ffe9cd4 	.word	0x1ffe9cd4
 8004f00:	0800e654 	.word	0x0800e654
 8004f04:	08004bad 	.word	0x08004bad
 8004f08:	0800e664 	.word	0x0800e664
 8004f0c:	08004a69 	.word	0x08004a69

08004f10 <main>:
#include "FREERTOS/FreeRTOS.h"
#include "FREERTOS/task.h"

#include "UserTasks.h"

int main(void){
 8004f10:	b508      	push	{r3, lr}

  if(DAVE_Init() != DAVE_STATUS_SUCCESS){
 8004f12:	f7fe fdc5 	bl	8003aa0 <DAVE_Init>
 8004f16:	b100      	cbz	r0, 8004f1a <main+0xa>
    while(1);
 8004f18:	e7fe      	b.n	8004f18 <main+0x8>
  }

  startTasks();
 8004f1a:	f7ff ffd1 	bl	8004ec0 <startTasks>

  vTaskStartScheduler();
 8004f1e:	f7fd fef1 	bl	8002d04 <vTaskStartScheduler>

  while(1);
 8004f22:	e7fe      	b.n	8004f22 <main+0x12>

08004f24 <_SetPhysRAMAddr>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f28:	4604      	mov	r4, r0
 8004f2a:	460e      	mov	r6, r1
 8004f2c:	4615      	mov	r5, r2
 8004f2e:	b9e3      	cbnz	r3, 8004f6a <_SetPhysRAMAddr+0x46>
 8004f30:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8004f34:	2120      	movs	r1, #32
 8004f36:	4790      	blx	r2
 8004f38:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004f3a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004f3e:	1872      	adds	r2, r6, r1
 8004f40:	b291      	uxth	r1, r2
 8004f42:	4620      	mov	r0, r4
 8004f44:	4798      	blx	r3
 8004f46:	4620      	mov	r0, r4
 8004f48:	2121      	movs	r1, #33	; 0x21
 8004f4a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004f4e:	4798      	blx	r3
 8004f50:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004f52:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004f56:	1829      	adds	r1, r5, r0
 8004f58:	4620      	mov	r0, r4
 8004f5a:	b289      	uxth	r1, r1
 8004f5c:	4798      	blx	r3
 8004f5e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004f62:	4620      	mov	r0, r4
 8004f64:	2122      	movs	r1, #34	; 0x22
 8004f66:	4798      	blx	r3
 8004f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f6a:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 8004f6e:	47b8      	blx	r7
 8004f70:	462a      	mov	r2, r5
 8004f72:	4631      	mov	r1, r6
 8004f74:	4607      	mov	r7, r0
 8004f76:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	47a8      	blx	r5
 8004f7e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004f82:	4606      	mov	r6, r0
 8004f84:	2120      	movs	r1, #32
 8004f86:	4620      	mov	r0, r4
 8004f88:	4790      	blx	r2
 8004f8a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8004f8c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004f90:	1979      	adds	r1, r7, r5
 8004f92:	4620      	mov	r0, r4
 8004f94:	b289      	uxth	r1, r1
 8004f96:	4798      	blx	r3
 8004f98:	4620      	mov	r0, r4
 8004f9a:	2121      	movs	r1, #33	; 0x21
 8004f9c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004fa0:	4790      	blx	r2
 8004fa2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004fa4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004fa8:	1831      	adds	r1, r6, r0
 8004faa:	e7d5      	b.n	8004f58 <_SetPhysRAMAddr+0x34>

08004fac <_SetRect>:
 8004fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb0:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8004fb2:	9e08      	ldr	r6, [sp, #32]
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	4688      	mov	r8, r1
 8004fb8:	4691      	mov	r9, r2
 8004fba:	461d      	mov	r5, r3
 8004fbc:	2f00      	cmp	r7, #0
 8004fbe:	d075      	beq.n	80050ac <_SetRect+0x100>
 8004fc0:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 8004fc4:	47b8      	blx	r7
 8004fc6:	4632      	mov	r2, r6
 8004fc8:	4607      	mov	r7, r0
 8004fca:	4629      	mov	r1, r5
 8004fcc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	4798      	blx	r3
 8004fd4:	464a      	mov	r2, r9
 8004fd6:	4682      	mov	sl, r0
 8004fd8:	4641      	mov	r1, r8
 8004fda:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004fde:	4620      	mov	r0, r4
 8004fe0:	4798      	blx	r3
 8004fe2:	4632      	mov	r2, r6
 8004fe4:	4680      	mov	r8, r0
 8004fe6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004fea:	4629      	mov	r1, r5
 8004fec:	4620      	mov	r0, r4
 8004fee:	4798      	blx	r3
 8004ff0:	4557      	cmp	r7, sl
 8004ff2:	bfca      	itet	gt
 8004ff4:	4656      	movgt	r6, sl
 8004ff6:	463e      	movle	r6, r7
 8004ff8:	46ba      	movgt	sl, r7
 8004ffa:	4580      	cmp	r8, r0
 8004ffc:	bfcc      	ite	gt
 8004ffe:	4681      	movgt	r9, r0
 8005000:	46c1      	movle	r9, r8
 8005002:	4605      	mov	r5, r0
 8005004:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005008:	bfc8      	it	gt
 800500a:	4645      	movgt	r5, r8
 800500c:	4620      	mov	r0, r4
 800500e:	2119      	movs	r1, #25
 8005010:	4790      	blx	r2
 8005012:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005014:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005018:	eb09 0100 	add.w	r1, r9, r0
 800501c:	b289      	uxth	r1, r1
 800501e:	4620      	mov	r0, r4
 8005020:	4798      	blx	r3
 8005022:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005026:	4620      	mov	r0, r4
 8005028:	211a      	movs	r1, #26
 800502a:	4790      	blx	r2
 800502c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800502e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005032:	1829      	adds	r1, r5, r0
 8005034:	b289      	uxth	r1, r1
 8005036:	4620      	mov	r0, r4
 8005038:	4798      	blx	r3
 800503a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800503e:	4620      	mov	r0, r4
 8005040:	2117      	movs	r1, #23
 8005042:	4790      	blx	r2
 8005044:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005046:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800504a:	1831      	adds	r1, r6, r0
 800504c:	b289      	uxth	r1, r1
 800504e:	4620      	mov	r0, r4
 8005050:	4798      	blx	r3
 8005052:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005056:	4620      	mov	r0, r4
 8005058:	2118      	movs	r1, #24
 800505a:	4790      	blx	r2
 800505c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800505e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005062:	eb0a 0100 	add.w	r1, sl, r0
 8005066:	b289      	uxth	r1, r1
 8005068:	4620      	mov	r0, r4
 800506a:	4798      	blx	r3
 800506c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005070:	4620      	mov	r0, r4
 8005072:	2120      	movs	r1, #32
 8005074:	4790      	blx	r2
 8005076:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005078:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800507c:	1839      	adds	r1, r7, r0
 800507e:	b289      	uxth	r1, r1
 8005080:	4620      	mov	r0, r4
 8005082:	4798      	blx	r3
 8005084:	4620      	mov	r0, r4
 8005086:	2121      	movs	r1, #33	; 0x21
 8005088:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800508c:	4790      	blx	r2
 800508e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005090:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005094:	eb08 0100 	add.w	r1, r8, r0
 8005098:	b289      	uxth	r1, r1
 800509a:	4620      	mov	r0, r4
 800509c:	4798      	blx	r3
 800509e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80050a2:	4620      	mov	r0, r4
 80050a4:	2122      	movs	r1, #34	; 0x22
 80050a6:	4790      	blx	r2
 80050a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ac:	2119      	movs	r1, #25
 80050ae:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80050b2:	4798      	blx	r3
 80050b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80050b6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80050ba:	fa1f f989 	uxth.w	r9, r9
 80050be:	eb09 0301 	add.w	r3, r9, r1
 80050c2:	b299      	uxth	r1, r3
 80050c4:	4620      	mov	r0, r4
 80050c6:	4790      	blx	r2
 80050c8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80050cc:	4620      	mov	r0, r4
 80050ce:	211a      	movs	r1, #26
 80050d0:	4790      	blx	r2
 80050d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80050d4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80050d8:	1831      	adds	r1, r6, r0
 80050da:	b289      	uxth	r1, r1
 80050dc:	4620      	mov	r0, r4
 80050de:	4798      	blx	r3
 80050e0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80050e4:	4620      	mov	r0, r4
 80050e6:	2117      	movs	r1, #23
 80050e8:	4790      	blx	r2
 80050ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80050ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80050f0:	fa1f f888 	uxth.w	r8, r8
 80050f4:	eb08 0100 	add.w	r1, r8, r0
 80050f8:	b289      	uxth	r1, r1
 80050fa:	4620      	mov	r0, r4
 80050fc:	4798      	blx	r3
 80050fe:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005102:	4620      	mov	r0, r4
 8005104:	2118      	movs	r1, #24
 8005106:	4790      	blx	r2
 8005108:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800510a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800510e:	1829      	adds	r1, r5, r0
 8005110:	b289      	uxth	r1, r1
 8005112:	4620      	mov	r0, r4
 8005114:	4798      	blx	r3
 8005116:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800511a:	4620      	mov	r0, r4
 800511c:	2120      	movs	r1, #32
 800511e:	4790      	blx	r2
 8005120:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005122:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005126:	eb08 0100 	add.w	r1, r8, r0
 800512a:	b289      	uxth	r1, r1
 800512c:	4620      	mov	r0, r4
 800512e:	4798      	blx	r3
 8005130:	4620      	mov	r0, r4
 8005132:	2121      	movs	r1, #33	; 0x21
 8005134:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005138:	4790      	blx	r2
 800513a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800513c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005140:	eb09 0100 	add.w	r1, r9, r0
 8005144:	b289      	uxth	r1, r1
 8005146:	4620      	mov	r0, r4
 8005148:	4798      	blx	r3
 800514a:	e7a8      	b.n	800509e <_SetRect+0xf2>

0800514c <_SetOrientation>:
 800514c:	b530      	push	{r4, r5, lr}
 800514e:	f64f 038c 	movw	r3, #63628	; 0xf88c
 8005152:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005156:	4604      	mov	r4, r0
 8005158:	b083      	sub	sp, #12
 800515a:	6859      	ldr	r1, [r3, #4]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005162:	466d      	mov	r5, sp
 8005164:	c503      	stmia	r5!, {r0, r1}
 8005166:	4620      	mov	r0, r4
 8005168:	2116      	movs	r1, #22
 800516a:	4790      	blx	r2
 800516c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800516e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8005170:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8005174:	a902      	add	r1, sp, #8
 8005176:	180a      	adds	r2, r1, r0
 8005178:	f023 0007 	bic.w	r0, r3, #7
 800517c:	0403      	lsls	r3, r0, #16
 800517e:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8005182:	0c1a      	lsrs	r2, r3, #16
 8005184:	4620      	mov	r0, r4
 8005186:	4311      	orrs	r1, r2
 8005188:	47a8      	blx	r5
 800518a:	b003      	add	sp, #12
 800518c:	bd30      	pop	{r4, r5, pc}
 800518e:	bf00      	nop

08005190 <_ReadPixel_16bpp_B8>:
 8005190:	b510      	push	{r4, lr}
 8005192:	6a01      	ldr	r1, [r0, #32]
 8005194:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 8005198:	b082      	sub	sp, #8
 800519a:	4604      	mov	r4, r0
 800519c:	3102      	adds	r1, #2
 800519e:	4668      	mov	r0, sp
 80051a0:	4798      	blx	r3
 80051a2:	6a23      	ldr	r3, [r4, #32]
 80051a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80051a6:	f81d 0003 	ldrb.w	r0, [sp, r3]
 80051aa:	a900      	add	r1, sp, #0
 80051ac:	18cb      	adds	r3, r1, r3
 80051ae:	7859      	ldrb	r1, [r3, #1]
 80051b0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 80051b4:	4010      	ands	r0, r2
 80051b6:	b002      	add	sp, #8
 80051b8:	bd10      	pop	{r4, pc}
 80051ba:	bf00      	nop

080051bc <_ReadPixel_18bpp_B9>:
 80051bc:	b510      	push	{r4, lr}
 80051be:	6a01      	ldr	r1, [r0, #32]
 80051c0:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 80051c4:	b084      	sub	sp, #16
 80051c6:	4604      	mov	r4, r0
 80051c8:	3102      	adds	r1, #2
 80051ca:	4668      	mov	r0, sp
 80051cc:	4798      	blx	r3
 80051ce:	6a23      	ldr	r3, [r4, #32]
 80051d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80051d2:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 80051d6:	a900      	add	r1, sp, #0
 80051d8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80051dc:	8859      	ldrh	r1, [r3, #2]
 80051de:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 80051e2:	4010      	ands	r0, r2
 80051e4:	b004      	add	sp, #16
 80051e6:	bd10      	pop	{r4, pc}

080051e8 <_ReadPixel_16bpp_B16>:
 80051e8:	b510      	push	{r4, lr}
 80051ea:	4604      	mov	r4, r0
 80051ec:	b084      	sub	sp, #16
 80051ee:	6a21      	ldr	r1, [r4, #32]
 80051f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 80051f4:	a801      	add	r0, sp, #4
 80051f6:	3101      	adds	r1, #1
 80051f8:	4798      	blx	r3
 80051fa:	6a20      	ldr	r0, [r4, #32]
 80051fc:	aa04      	add	r2, sp, #16
 80051fe:	eb02 0140 	add.w	r1, r2, r0, lsl #1
 8005202:	f831 0c0c 	ldrh.w	r0, [r1, #-12]
 8005206:	b004      	add	sp, #16
 8005208:	bd10      	pop	{r4, pc}
 800520a:	bf00      	nop

0800520c <_SetReg_B8>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4604      	mov	r4, r0
 8005210:	460d      	mov	r5, r1
 8005212:	0a08      	lsrs	r0, r1, #8
 8005214:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8005218:	4798      	blx	r3
 800521a:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 800521e:	b2e8      	uxtb	r0, r5
 8005220:	4788      	blx	r1
 8005222:	bd38      	pop	{r3, r4, r5, pc}

08005224 <_SetReg_B9>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4604      	mov	r4, r0
 8005228:	0a08      	lsrs	r0, r1, #8
 800522a:	460d      	mov	r5, r1
 800522c:	0040      	lsls	r0, r0, #1
 800522e:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8005232:	4798      	blx	r3
 8005234:	b2e9      	uxtb	r1, r5
 8005236:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 800523a:	0048      	lsls	r0, r1, #1
 800523c:	4790      	blx	r2
 800523e:	bd38      	pop	{r3, r4, r5, pc}

08005240 <_SetReg_B16>:
 8005240:	b508      	push	{r3, lr}
 8005242:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8005246:	4608      	mov	r0, r1
 8005248:	4798      	blx	r3
 800524a:	bd08      	pop	{r3, pc}

0800524c <_WritePara_B8>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4604      	mov	r4, r0
 8005250:	460d      	mov	r5, r1
 8005252:	0a08      	lsrs	r0, r1, #8
 8005254:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8005258:	4798      	blx	r3
 800525a:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 800525e:	b2e8      	uxtb	r0, r5
 8005260:	4788      	blx	r1
 8005262:	bd38      	pop	{r3, r4, r5, pc}

08005264 <_WritePara_B9>:
 8005264:	b538      	push	{r3, r4, r5, lr}
 8005266:	4604      	mov	r4, r0
 8005268:	0a08      	lsrs	r0, r1, #8
 800526a:	460d      	mov	r5, r1
 800526c:	0040      	lsls	r0, r0, #1
 800526e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8005272:	4798      	blx	r3
 8005274:	b2e9      	uxtb	r1, r5
 8005276:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 800527a:	0048      	lsls	r0, r1, #1
 800527c:	4790      	blx	r2
 800527e:	bd38      	pop	{r3, r4, r5, pc}

08005280 <_WritePara_B16>:
 8005280:	b508      	push	{r3, lr}
 8005282:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8005286:	4608      	mov	r0, r1
 8005288:	4798      	blx	r3
 800528a:	bd08      	pop	{r3, pc}

0800528c <_SetInterface>:
 800528c:	2909      	cmp	r1, #9
 800528e:	d012      	beq.n	80052b6 <_SetInterface+0x2a>
 8005290:	2910      	cmp	r1, #16
 8005292:	d009      	beq.n	80052a8 <_SetInterface+0x1c>
 8005294:	2908      	cmp	r1, #8
 8005296:	d000      	beq.n	800529a <_SetInterface+0xe>
 8005298:	4770      	bx	lr
 800529a:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <_SetInterface+0x38>)
 800529c:	490a      	ldr	r1, [pc, #40]	; (80052c8 <_SetInterface+0x3c>)
 800529e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 80052a2:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
 80052a6:	4770      	bx	lr
 80052a8:	4a08      	ldr	r2, [pc, #32]	; (80052cc <_SetInterface+0x40>)
 80052aa:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <_SetInterface+0x44>)
 80052ac:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 80052b0:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 80052b4:	4770      	bx	lr
 80052b6:	4907      	ldr	r1, [pc, #28]	; (80052d4 <_SetInterface+0x48>)
 80052b8:	4a07      	ldr	r2, [pc, #28]	; (80052d8 <_SetInterface+0x4c>)
 80052ba:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 80052be:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 80052c2:	4770      	bx	lr
 80052c4:	0800520d 	.word	0x0800520d
 80052c8:	0800524d 	.word	0x0800524d
 80052cc:	08005241 	.word	0x08005241
 80052d0:	08005281 	.word	0x08005281
 80052d4:	08005225 	.word	0x08005225
 80052d8:	08005265 	.word	0x08005265

080052dc <GUIDRV_FlexColor_SetFunc66718>:
 80052dc:	b510      	push	{r4, lr}
 80052de:	4604      	mov	r4, r0
 80052e0:	f001 fd62 	bl	8006da8 <GUIDRV_FlexColor__InitOnce>
 80052e4:	68a3      	ldr	r3, [r4, #8]
 80052e6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80052e8:	f644 7125 	movw	r1, #20261	; 0x4f25
 80052ec:	f022 0003 	bic.w	r0, r2, #3
 80052f0:	f644 72ad 	movw	r2, #20397	; 0x4fad
 80052f4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80052f8:	f6c0 0200 	movt	r2, #2048	; 0x800
 80052fc:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
 8005300:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005304:	f245 114d 	movw	r1, #20813	; 0x514d
 8005308:	f245 1291 	movw	r2, #20881	; 0x5191
 800530c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005310:	f6c0 0200 	movt	r2, #2048	; 0x800
 8005314:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 8005318:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800531c:	f245 11bd 	movw	r1, #20925	; 0x51bd
 8005320:	f245 12e9 	movw	r2, #20969	; 0x51e9
 8005324:	84d8      	strh	r0, [r3, #38]	; 0x26
 8005326:	f245 208d 	movw	r0, #21133	; 0x528d
 800532a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800532e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8005332:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005336:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 800533a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800533e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
 8005342:	bd10      	pop	{r4, pc}

08005344 <_ReadData>:
 8005344:	b508      	push	{r3, lr}
 8005346:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 800534a:	4798      	blx	r3
 800534c:	bd08      	pop	{r3, pc}
 800534e:	bf00      	nop

08005350 <_WriteData>:
 8005350:	b508      	push	{r3, lr}
 8005352:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005356:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 800535a:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
 800535e:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 8005362:	2102      	movs	r1, #2
 8005364:	3071      	adds	r0, #113	; 0x71
 8005366:	4790      	blx	r2
 8005368:	bd08      	pop	{r3, pc}
 800536a:	bf00      	nop

0800536c <_FillRect>:
 800536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005370:	4db2      	ldr	r5, [pc, #712]	; (800563c <_FillRect+0x2d0>)
 8005372:	b089      	sub	sp, #36	; 0x24
 8005374:	682c      	ldr	r4, [r5, #0]
 8005376:	9007      	str	r0, [sp, #28]
 8005378:	7c20      	ldrb	r0, [r4, #16]
 800537a:	9e07      	ldr	r6, [sp, #28]
 800537c:	9105      	str	r1, [sp, #20]
 800537e:	07c0      	lsls	r0, r0, #31
 8005380:	68b4      	ldr	r4, [r6, #8]
 8005382:	4616      	mov	r6, r2
 8005384:	f140 815c 	bpl.w	8005640 <_FillRect+0x2d4>
 8005388:	9812      	ldr	r0, [sp, #72]	; 0x48
 800538a:	4282      	cmp	r2, r0
 800538c:	f300 810b 	bgt.w	80055a6 <_FillRect+0x23a>
 8005390:	1a5f      	subs	r7, r3, r1
 8005392:	f107 0b01 	add.w	fp, r7, #1
 8005396:	465d      	mov	r5, fp
 8005398:	4689      	mov	r9, r1
 800539a:	4617      	mov	r7, r2
 800539c:	469b      	mov	fp, r3
 800539e:	f8d4 60c8 	ldr.w	r6, [r4, #200]	; 0xc8
 80053a2:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 80053a6:	2e00      	cmp	r6, #0
 80053a8:	f000 8109 	beq.w	80055be <_FillRect+0x252>
 80053ac:	e88d 0180 	stmia.w	sp, {r7, r8}
 80053b0:	9807      	ldr	r0, [sp, #28]
 80053b2:	9905      	ldr	r1, [sp, #20]
 80053b4:	463a      	mov	r2, r7
 80053b6:	465b      	mov	r3, fp
 80053b8:	47b0      	blx	r6
 80053ba:	2d00      	cmp	r5, #0
 80053bc:	f000 80ad 	beq.w	800551a <_FillRect+0x1ae>
 80053c0:	f3c8 0140 	ubfx	r1, r8, #1, #1
 80053c4:	42a9      	cmp	r1, r5
 80053c6:	bf28      	it	cs
 80053c8:	4629      	movcs	r1, r5
 80053ca:	2d01      	cmp	r5, #1
 80053cc:	bf98      	it	ls
 80053ce:	4629      	movls	r1, r5
 80053d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80053d2:	2900      	cmp	r1, #0
 80053d4:	f000 81c7 	beq.w	8005766 <_FillRect+0x3fa>
 80053d8:	4642      	mov	r2, r8
 80053da:	f04f 0c01 	mov.w	ip, #1
 80053de:	f832 0b02 	ldrh.w	r0, [r2], #2
 80053e2:	4058      	eors	r0, r3
 80053e4:	1e4e      	subs	r6, r1, #1
 80053e6:	f822 0c02 	strh.w	r0, [r2, #-2]
 80053ea:	1e68      	subs	r0, r5, #1
 80053ec:	4561      	cmp	r1, ip
 80053ee:	ea06 060c 	and.w	r6, r6, ip
 80053f2:	4696      	mov	lr, r2
 80053f4:	d91f      	bls.n	8005436 <_FillRect+0xca>
 80053f6:	b156      	cbz	r6, 800540e <_FillRect+0xa2>
 80053f8:	f832 6b02 	ldrh.w	r6, [r2], #2
 80053fc:	f04f 0c02 	mov.w	ip, #2
 8005400:	405e      	eors	r6, r3
 8005402:	3801      	subs	r0, #1
 8005404:	4561      	cmp	r1, ip
 8005406:	f822 6c02 	strh.w	r6, [r2, #-2]
 800540a:	4696      	mov	lr, r2
 800540c:	d913      	bls.n	8005436 <_FillRect+0xca>
 800540e:	f8b2 e000 	ldrh.w	lr, [r2]
 8005412:	4616      	mov	r6, r2
 8005414:	ea8e 0e03 	eor.w	lr, lr, r3
 8005418:	f826 eb02 	strh.w	lr, [r6], #2
 800541c:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 8005420:	f10c 0c02 	add.w	ip, ip, #2
 8005424:	1cb2      	adds	r2, r6, #2
 8005426:	3802      	subs	r0, #2
 8005428:	ea8e 0603 	eor.w	r6, lr, r3
 800542c:	4561      	cmp	r1, ip
 800542e:	f822 6c02 	strh.w	r6, [r2, #-2]
 8005432:	4696      	mov	lr, r2
 8005434:	d8eb      	bhi.n	800540e <_FillRect+0xa2>
 8005436:	428d      	cmp	r5, r1
 8005438:	d06f      	beq.n	800551a <_FillRect+0x1ae>
 800543a:	1a6a      	subs	r2, r5, r1
 800543c:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8005440:	ea4f 064c 	mov.w	r6, ip, lsl #1
 8005444:	9206      	str	r2, [sp, #24]
 8005446:	9604      	str	r6, [sp, #16]
 8005448:	f1bc 0f00 	cmp.w	ip, #0
 800544c:	d041      	beq.n	80054d2 <_FillRect+0x166>
 800544e:	2600      	movs	r6, #0
 8005450:	f858 2011 	ldr.w	r2, [r8, r1, lsl #1]
 8005454:	f363 060f 	bfi	r6, r3, #0, #16
 8005458:	f10c 3aff 	add.w	sl, ip, #4294967295
 800545c:	f363 461f 	bfi	r6, r3, #16, #16
 8005460:	f8cd a00c 	str.w	sl, [sp, #12]
 8005464:	4072      	eors	r2, r6
 8005466:	eb08 0a41 	add.w	sl, r8, r1, lsl #1
 800546a:	f04f 0901 	mov.w	r9, #1
 800546e:	f848 2011 	str.w	r2, [r8, r1, lsl #1]
 8005472:	9903      	ldr	r1, [sp, #12]
 8005474:	45e1      	cmp	r9, ip
 8005476:	ea01 0209 	and.w	r2, r1, r9
 800547a:	f10a 0104 	add.w	r1, sl, #4
 800547e:	d21f      	bcs.n	80054c0 <_FillRect+0x154>
 8005480:	b142      	cbz	r2, 8005494 <_FillRect+0x128>
 8005482:	680a      	ldr	r2, [r1, #0]
 8005484:	f04f 0902 	mov.w	r9, #2
 8005488:	4072      	eors	r2, r6
 800548a:	45e1      	cmp	r9, ip
 800548c:	468a      	mov	sl, r1
 800548e:	f841 2b04 	str.w	r2, [r1], #4
 8005492:	d215      	bcs.n	80054c0 <_FillRect+0x154>
 8005494:	9303      	str	r3, [sp, #12]
 8005496:	f8da 3004 	ldr.w	r3, [sl, #4]
 800549a:	460a      	mov	r2, r1
 800549c:	ea86 0803 	eor.w	r8, r6, r3
 80054a0:	f842 8b04 	str.w	r8, [r2], #4
 80054a4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80054a8:	f109 0902 	add.w	r9, r9, #2
 80054ac:	ea86 0803 	eor.w	r8, r6, r3
 80054b0:	f8c1 8004 	str.w	r8, [r1, #4]
 80054b4:	1d11      	adds	r1, r2, #4
 80054b6:	45e1      	cmp	r9, ip
 80054b8:	f10a 0a08 	add.w	sl, sl, #8
 80054bc:	d3eb      	bcc.n	8005496 <_FillRect+0x12a>
 80054be:	9b03      	ldr	r3, [sp, #12]
 80054c0:	9e04      	ldr	r6, [sp, #16]
 80054c2:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80054c6:	45b1      	cmp	r9, r6
 80054c8:	ebc6 0000 	rsb	r0, r6, r0
 80054cc:	eb0e 0e46 	add.w	lr, lr, r6, lsl #1
 80054d0:	d023      	beq.n	800551a <_FillRect+0x1ae>
 80054d2:	f8be 1000 	ldrh.w	r1, [lr]
 80054d6:	4672      	mov	r2, lr
 80054d8:	4059      	eors	r1, r3
 80054da:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 80054de:	f822 1b02 	strh.w	r1, [r2], #2
 80054e2:	ebce 0e00 	rsb	lr, lr, r0
 80054e6:	f1ae 0602 	sub.w	r6, lr, #2
 80054ea:	4282      	cmp	r2, r0
 80054ec:	f3c6 0140 	ubfx	r1, r6, #1, #1
 80054f0:	d013      	beq.n	800551a <_FillRect+0x1ae>
 80054f2:	b129      	cbz	r1, 8005500 <_FillRect+0x194>
 80054f4:	8816      	ldrh	r6, [r2, #0]
 80054f6:	405e      	eors	r6, r3
 80054f8:	f822 6b02 	strh.w	r6, [r2], #2
 80054fc:	4282      	cmp	r2, r0
 80054fe:	d00c      	beq.n	800551a <_FillRect+0x1ae>
 8005500:	8816      	ldrh	r6, [r2, #0]
 8005502:	4611      	mov	r1, r2
 8005504:	405e      	eors	r6, r3
 8005506:	f821 6b02 	strh.w	r6, [r1], #2
 800550a:	8856      	ldrh	r6, [r2, #2]
 800550c:	460a      	mov	r2, r1
 800550e:	ea86 0103 	eor.w	r1, r6, r3
 8005512:	f822 1b02 	strh.w	r1, [r2], #2
 8005516:	4282      	cmp	r2, r0
 8005518:	d1f2      	bne.n	8005500 <_FillRect+0x194>
 800551a:	9700      	str	r7, [sp, #0]
 800551c:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8005520:	9905      	ldr	r1, [sp, #20]
 8005522:	463a      	mov	r2, r7
 8005524:	465b      	mov	r3, fp
 8005526:	4620      	mov	r0, r4
 8005528:	47b0      	blx	r6
 800552a:	2100      	movs	r1, #0
 800552c:	07ea      	lsls	r2, r5, #31
 800552e:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8005530:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005532:	4688      	mov	r8, r1
 8005534:	d513      	bpl.n	800555e <_FillRect+0x1f2>
 8005536:	f836 2b02 	ldrh.w	r2, [r6], #2
 800553a:	2101      	movs	r1, #1
 800553c:	0a10      	lsrs	r0, r2, #8
 800553e:	7018      	strb	r0, [r3, #0]
 8005540:	705a      	strb	r2, [r3, #1]
 8005542:	4688      	mov	r8, r1
 8005544:	3302      	adds	r3, #2
 8005546:	e00a      	b.n	800555e <_FillRect+0x1f2>
 8005548:	f836 3b02 	ldrh.w	r3, [r6], #2
 800554c:	1c41      	adds	r1, r0, #1
 800554e:	7053      	strb	r3, [r2, #1]
 8005550:	0a18      	lsrs	r0, r3, #8
 8005552:	1c93      	adds	r3, r2, #2
 8005554:	29fa      	cmp	r1, #250	; 0xfa
 8005556:	7010      	strb	r0, [r2, #0]
 8005558:	d028      	beq.n	80055ac <_FillRect+0x240>
 800555a:	f108 0801 	add.w	r8, r8, #1
 800555e:	1c48      	adds	r0, r1, #1
 8005560:	4545      	cmp	r5, r8
 8005562:	f103 0202 	add.w	r2, r3, #2
 8005566:	f108 0801 	add.w	r8, r8, #1
 800556a:	d011      	beq.n	8005590 <_FillRect+0x224>
 800556c:	f836 1b02 	ldrh.w	r1, [r6], #2
 8005570:	28fa      	cmp	r0, #250	; 0xfa
 8005572:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 8005576:	f883 c000 	strb.w	ip, [r3]
 800557a:	7059      	strb	r1, [r3, #1]
 800557c:	d1e4      	bne.n	8005548 <_FillRect+0x1dc>
 800557e:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
 8005582:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005584:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005588:	4790      	blx	r2
 800558a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800558c:	2000      	movs	r0, #0
 800558e:	e7db      	b.n	8005548 <_FillRect+0x1dc>
 8005590:	b121      	cbz	r1, 800559c <_FillRect+0x230>
 8005592:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8005596:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005598:	0049      	lsls	r1, r1, #1
 800559a:	4798      	blx	r3
 800559c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800559e:	3701      	adds	r7, #1
 80055a0:	42be      	cmp	r6, r7
 80055a2:	f6bf aefc 	bge.w	800539e <_FillRect+0x32>
 80055a6:	b009      	add	sp, #36	; 0x24
 80055a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80055b0:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
 80055b4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80055b6:	4790      	blx	r2
 80055b8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80055ba:	2100      	movs	r1, #0
 80055bc:	e7cd      	b.n	800555a <_FillRect+0x1ee>
 80055be:	9905      	ldr	r1, [sp, #20]
 80055c0:	4559      	cmp	r1, fp
 80055c2:	f73f aefa 	bgt.w	80053ba <_FillRect+0x4e>
 80055c6:	463a      	mov	r2, r7
 80055c8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 80055cc:	9807      	ldr	r0, [sp, #28]
 80055ce:	ebc1 060b 	rsb	r6, r1, fp
 80055d2:	4798      	blx	r3
 80055d4:	9a05      	ldr	r2, [sp, #20]
 80055d6:	f828 0b02 	strh.w	r0, [r8], #2
 80055da:	f102 0901 	add.w	r9, r2, #1
 80055de:	45cb      	cmp	fp, r9
 80055e0:	f006 0601 	and.w	r6, r6, #1
 80055e4:	db26      	blt.n	8005634 <_FillRect+0x2c8>
 80055e6:	b15e      	cbz	r6, 8005600 <_FillRect+0x294>
 80055e8:	4649      	mov	r1, r9
 80055ea:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 80055ee:	9807      	ldr	r0, [sp, #28]
 80055f0:	463a      	mov	r2, r7
 80055f2:	4798      	blx	r3
 80055f4:	f109 0901 	add.w	r9, r9, #1
 80055f8:	45cb      	cmp	fp, r9
 80055fa:	f828 0b02 	strh.w	r0, [r8], #2
 80055fe:	db19      	blt.n	8005634 <_FillRect+0x2c8>
 8005600:	9e07      	ldr	r6, [sp, #28]
 8005602:	4649      	mov	r1, r9
 8005604:	463a      	mov	r2, r7
 8005606:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800560a:	4630      	mov	r0, r6
 800560c:	4798      	blx	r3
 800560e:	46c2      	mov	sl, r8
 8005610:	f109 0901 	add.w	r9, r9, #1
 8005614:	f82a 0b02 	strh.w	r0, [sl], #2
 8005618:	4649      	mov	r1, r9
 800561a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 800561e:	4630      	mov	r0, r6
 8005620:	463a      	mov	r2, r7
 8005622:	4798      	blx	r3
 8005624:	f109 0901 	add.w	r9, r9, #1
 8005628:	45cb      	cmp	fp, r9
 800562a:	f8a8 0002 	strh.w	r0, [r8, #2]
 800562e:	f10a 0802 	add.w	r8, sl, #2
 8005632:	dae6      	bge.n	8005602 <_FillRect+0x296>
 8005634:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 8005638:	e6bf      	b.n	80053ba <_FillRect+0x4e>
 800563a:	bf00      	nop
 800563c:	1ffe8808 	.word	0x1ffe8808
 8005640:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005642:	1a5f      	subs	r7, r3, r1
 8005644:	9000      	str	r0, [sp, #0]
 8005646:	ebc2 0e00 	rsb	lr, r2, r0
 800564a:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800564e:	4620      	mov	r0, r4
 8005650:	3701      	adds	r7, #1
 8005652:	4689      	mov	r9, r1
 8005654:	fb0e 7707 	mla	r7, lr, r7, r7
 8005658:	47b0      	blx	r6
 800565a:	682a      	ldr	r2, [r5, #0]
 800565c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800565e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005660:	6808      	ldr	r0, [r1, #0]
 8005662:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8005666:	b2c0      	uxtb	r0, r0
 8005668:	2f00      	cmp	r7, #0
 800566a:	d09c      	beq.n	80055a6 <_FillRect+0x23a>
 800566c:	2ff9      	cmp	r7, #249	; 0xf9
 800566e:	bf34      	ite	cc
 8005670:	46b8      	movcc	r8, r7
 8005672:	f04f 08f9 	movcs.w	r8, #249	; 0xf9
 8005676:	ea4f 0e58 	mov.w	lr, r8, lsr #1
 800567a:	f103 0901 	add.w	r9, r3, #1
 800567e:	f108 3aff 	add.w	sl, r8, #4294967295
 8005682:	ea4f 0c4e 	mov.w	ip, lr, lsl #1
 8005686:	f1be 0f00 	cmp.w	lr, #0
 800568a:	d06a      	beq.n	8005762 <_FillRect+0x3f6>
 800568c:	f019 0f03 	tst.w	r9, #3
 8005690:	bf14      	ite	ne
 8005692:	2200      	movne	r2, #0
 8005694:	2201      	moveq	r2, #1
 8005696:	f1b8 0f01 	cmp.w	r8, #1
 800569a:	bf94      	ite	ls
 800569c:	2200      	movls	r2, #0
 800569e:	f002 0201 	andhi.w	r2, r2, #1
 80056a2:	f082 0501 	eor.w	r5, r2, #1
 80056a6:	2a00      	cmp	r2, #0
 80056a8:	d05b      	beq.n	8005762 <_FillRect+0x3f6>
 80056aa:	f366 0507 	bfi	r5, r6, #0, #8
 80056ae:	f360 250f 	bfi	r5, r0, #8, #8
 80056b2:	f10e 31ff 	add.w	r1, lr, #4294967295
 80056b6:	2201      	movs	r2, #1
 80056b8:	f366 4517 	bfi	r5, r6, #16, #8
 80056bc:	f360 651f 	bfi	r5, r0, #24, #8
 80056c0:	ea01 0b02 	and.w	fp, r1, r2
 80056c4:	1d59      	adds	r1, r3, #5
 80056c6:	4572      	cmp	r2, lr
 80056c8:	f8c9 5000 	str.w	r5, [r9]
 80056cc:	d210      	bcs.n	80056f0 <_FillRect+0x384>
 80056ce:	f1bb 0f00 	cmp.w	fp, #0
 80056d2:	d005      	beq.n	80056e0 <_FillRect+0x374>
 80056d4:	2202      	movs	r2, #2
 80056d6:	4572      	cmp	r2, lr
 80056d8:	600d      	str	r5, [r1, #0]
 80056da:	f103 0109 	add.w	r1, r3, #9
 80056de:	d207      	bcs.n	80056f0 <_FillRect+0x384>
 80056e0:	460b      	mov	r3, r1
 80056e2:	3202      	adds	r2, #2
 80056e4:	f843 5b04 	str.w	r5, [r3], #4
 80056e8:	604d      	str	r5, [r1, #4]
 80056ea:	1d19      	adds	r1, r3, #4
 80056ec:	4572      	cmp	r2, lr
 80056ee:	d3f7      	bcc.n	80056e0 <_FillRect+0x374>
 80056f0:	45e0      	cmp	r8, ip
 80056f2:	eb09 024c 	add.w	r2, r9, ip, lsl #1
 80056f6:	ebcc 0a0a 	rsb	sl, ip, sl
 80056fa:	d028      	beq.n	800574e <_FillRect+0x3e2>
 80056fc:	1d15      	adds	r5, r2, #4
 80056fe:	eb05 014a 	add.w	r1, r5, sl, lsl #1
 8005702:	3202      	adds	r2, #2
 8005704:	1a8b      	subs	r3, r1, r2
 8005706:	1e9d      	subs	r5, r3, #2
 8005708:	1c93      	adds	r3, r2, #2
 800570a:	428b      	cmp	r3, r1
 800570c:	f802 6c02 	strb.w	r6, [r2, #-2]
 8005710:	f802 0c01 	strb.w	r0, [r2, #-1]
 8005714:	f3c5 0540 	ubfx	r5, r5, #1, #1
 8005718:	d019      	beq.n	800574e <_FillRect+0x3e2>
 800571a:	b135      	cbz	r5, 800572a <_FillRect+0x3be>
 800571c:	f803 6c02 	strb.w	r6, [r3, #-2]
 8005720:	f803 0c01 	strb.w	r0, [r3, #-1]
 8005724:	3302      	adds	r3, #2
 8005726:	428b      	cmp	r3, r1
 8005728:	d011      	beq.n	800574e <_FillRect+0x3e2>
 800572a:	461a      	mov	r2, r3
 800572c:	f803 6c02 	strb.w	r6, [r3, #-2]
 8005730:	f803 0c01 	strb.w	r0, [r3, #-1]
 8005734:	f802 6b02 	strb.w	r6, [r2], #2
 8005738:	1c93      	adds	r3, r2, #2
 800573a:	428b      	cmp	r3, r1
 800573c:	f802 0c01 	strb.w	r0, [r2, #-1]
 8005740:	d1f3      	bne.n	800572a <_FillRect+0x3be>
 8005742:	e004      	b.n	800574e <_FillRect+0x3e2>
 8005744:	2ff9      	cmp	r7, #249	; 0xf9
 8005746:	bf34      	ite	cc
 8005748:	46b8      	movcc	r8, r7
 800574a:	f04f 08f9 	movcs.w	r8, #249	; 0xf9
 800574e:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8005752:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8005756:	4648      	mov	r0, r9
 8005758:	4798      	blx	r3
 800575a:	ebb7 0708 	subs.w	r7, r7, r8
 800575e:	d1f1      	bne.n	8005744 <_FillRect+0x3d8>
 8005760:	e721      	b.n	80055a6 <_FillRect+0x23a>
 8005762:	464a      	mov	r2, r9
 8005764:	e7ca      	b.n	80056fc <_FillRect+0x390>
 8005766:	46c6      	mov	lr, r8
 8005768:	4628      	mov	r0, r5
 800576a:	e666      	b.n	800543a <_FillRect+0xce>

0800576c <_DrawBitmap>:
 800576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005770:	b093      	sub	sp, #76	; 0x4c
 8005772:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8005774:	9107      	str	r1, [sp, #28]
 8005776:	1e66      	subs	r6, r4, #1
 8005778:	9606      	str	r6, [sp, #24]
 800577a:	9906      	ldr	r1, [sp, #24]
 800577c:	900c      	str	r0, [sp, #48]	; 0x30
 800577e:	6880      	ldr	r0, [r0, #8]
 8005780:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8005782:	9309      	str	r3, [sp, #36]	; 0x24
 8005784:	2901      	cmp	r1, #1
 8005786:	4616      	mov	r6, r2
 8005788:	900d      	str	r0, [sp, #52]	; 0x34
 800578a:	f240 82da 	bls.w	8005d42 <_DrawBitmap+0x5d6>
 800578e:	2c04      	cmp	r4, #4
 8005790:	f000 82d7 	beq.w	8005d42 <_DrawBitmap+0x5d6>
 8005794:	2c08      	cmp	r4, #8
 8005796:	f000 82d4 	beq.w	8005d42 <_DrawBitmap+0x5d6>
 800579a:	9a07      	ldr	r2, [sp, #28]
 800579c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800579e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057a0:	1974      	adds	r4, r6, r5
 80057a2:	18d1      	adds	r1, r2, r3
 80057a4:	3c01      	subs	r4, #1
 80057a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80057a8:	9400      	str	r4, [sp, #0]
 80057aa:	180b      	adds	r3, r1, r0
 80057ac:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 80057b0:	4610      	mov	r0, r2
 80057b2:	3b01      	subs	r3, #1
 80057b4:	4632      	mov	r2, r6
 80057b6:	47a0      	blx	r4
 80057b8:	2d00      	cmp	r5, #0
 80057ba:	dd3a      	ble.n	8005832 <_DrawBitmap+0xc6>
 80057bc:	9c07      	ldr	r4, [sp, #28]
 80057be:	9604      	str	r6, [sp, #16]
 80057c0:	9820      	ldr	r0, [sp, #128]	; 0x80
 80057c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80057c4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80057c6:	1823      	adds	r3, r4, r0
 80057c8:	1e71      	subs	r1, r6, #1
 80057ca:	9110      	str	r1, [sp, #64]	; 0x40
 80057cc:	930e      	str	r3, [sp, #56]	; 0x38
 80057ce:	1b16      	subs	r6, r2, r4
 80057d0:	9904      	ldr	r1, [sp, #16]
 80057d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80057d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80057d6:	9605      	str	r6, [sp, #20]
 80057d8:	194d      	adds	r5, r1, r5
 80057da:	1823      	adds	r3, r4, r0
 80057dc:	950b      	str	r5, [sp, #44]	; 0x2c
 80057de:	9311      	str	r3, [sp, #68]	; 0x44
 80057e0:	9a05      	ldr	r2, [sp, #20]
 80057e2:	9e07      	ldr	r6, [sp, #28]
 80057e4:	9906      	ldr	r1, [sp, #24]
 80057e6:	1994      	adds	r4, r2, r6
 80057e8:	290f      	cmp	r1, #15
 80057ea:	d817      	bhi.n	800581c <_DrawBitmap+0xb0>
 80057ec:	e8df f011 	tbh	[pc, r1, lsl #1]
 80057f0:	01710224 	.word	0x01710224
 80057f4:	00bf0016 	.word	0x00bf0016
 80057f8:	00160016 	.word	0x00160016
 80057fc:	00560016 	.word	0x00560016
 8005800:	00160016 	.word	0x00160016
 8005804:	00160016 	.word	0x00160016
 8005808:	00160016 	.word	0x00160016
 800580c:	00240016 	.word	0x00240016
 8005810:	b121      	cbz	r1, 800581c <_DrawBitmap+0xb0>
 8005812:	f8d5 6118 	ldr.w	r6, [r5, #280]	; 0x118
 8005816:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8005818:	0049      	lsls	r1, r1, #1
 800581a:	47b0      	blx	r6
 800581c:	9904      	ldr	r1, [sp, #16]
 800581e:	9805      	ldr	r0, [sp, #20]
 8005820:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005822:	1c4e      	adds	r6, r1, #1
 8005824:	9604      	str	r6, [sp, #16]
 8005826:	9e04      	ldr	r6, [sp, #16]
 8005828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800582a:	1883      	adds	r3, r0, r2
 800582c:	428e      	cmp	r6, r1
 800582e:	9305      	str	r3, [sp, #20]
 8005830:	d1d6      	bne.n	80057e0 <_DrawBitmap+0x74>
 8005832:	b013      	add	sp, #76	; 0x4c
 8005834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005838:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800583a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800583c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800583e:	2100      	movs	r1, #0
 8005840:	07fd      	lsls	r5, r7, #31
 8005842:	460a      	mov	r2, r1
 8005844:	f100 8286 	bmi.w	8005d54 <_DrawBitmap+0x5e8>
 8005848:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800584c:	1c56      	adds	r6, r2, #1
 800584e:	1c4d      	adds	r5, r1, #1
 8005850:	42ba      	cmp	r2, r7
 8005852:	f103 0002 	add.w	r0, r3, #2
 8005856:	d018      	beq.n	800588a <_DrawBitmap+0x11e>
 8005858:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 800585c:	0a11      	lsrs	r1, r2, #8
 800585e:	2dfa      	cmp	r5, #250	; 0xfa
 8005860:	7019      	strb	r1, [r3, #0]
 8005862:	705a      	strb	r2, [r3, #1]
 8005864:	f000 8281 	beq.w	8005d6a <_DrawBitmap+0x5fe>
 8005868:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
 800586c:	1c69      	adds	r1, r5, #1
 800586e:	0a1a      	lsrs	r2, r3, #8
 8005870:	7043      	strb	r3, [r0, #1]
 8005872:	1c83      	adds	r3, r0, #2
 8005874:	29fa      	cmp	r1, #250	; 0xfa
 8005876:	7002      	strb	r2, [r0, #0]
 8005878:	f000 8257 	beq.w	8005d2a <_DrawBitmap+0x5be>
 800587c:	1c72      	adds	r2, r6, #1
 800587e:	1c56      	adds	r6, r2, #1
 8005880:	1c4d      	adds	r5, r1, #1
 8005882:	42ba      	cmp	r2, r7
 8005884:	f103 0002 	add.w	r0, r3, #2
 8005888:	d1e6      	bne.n	8005858 <_DrawBitmap+0xec>
 800588a:	2900      	cmp	r1, #0
 800588c:	d0c6      	beq.n	800581c <_DrawBitmap+0xb0>
 800588e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005890:	0049      	lsls	r1, r1, #1
 8005892:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 8005896:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005898:	4798      	blx	r3
 800589a:	e7bf      	b.n	800581c <_DrawBitmap+0xb0>
 800589c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800589e:	9821      	ldr	r0, [sp, #132]	; 0x84
 80058a0:	68b5      	ldr	r5, [r6, #8]
 80058a2:	2800      	cmp	r0, #0
 80058a4:	d0ba      	beq.n	800581c <_DrawBitmap+0xb0>
 80058a6:	f648 0308 	movw	r3, #34824	; 0x8808
 80058aa:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 80058ae:	6819      	ldr	r1, [r3, #0]
 80058b0:	7c0a      	ldrb	r2, [r1, #16]
 80058b2:	f012 0603 	ands.w	r6, r2, #3
 80058b6:	f040 8263 	bne.w	8005d80 <_DrawBitmap+0x614>
 80058ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80058bc:	2e00      	cmp	r6, #0
 80058be:	ddad      	ble.n	800581c <_DrawBitmap+0xb0>
 80058c0:	46a0      	mov	r8, r4
 80058c2:	9f07      	ldr	r7, [sp, #28]
 80058c4:	f818 2b01 	ldrb.w	r2, [r8], #1
 80058c8:	9921      	ldr	r1, [sp, #132]	; 0x84
 80058ca:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 80058ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80058d2:	19f0      	adds	r0, r6, r7
 80058d4:	9e05      	ldr	r6, [sp, #20]
 80058d6:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 80058da:	1987      	adds	r7, r0, r6
 80058dc:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80058e0:	f105 0671 	add.w	r6, r5, #113	; 0x71
 80058e4:	43e4      	mvns	r4, r4
 80058e6:	f885 0071 	strb.w	r0, [r5, #113]	; 0x71
 80058ea:	2102      	movs	r1, #2
 80058ec:	4630      	mov	r0, r6
 80058ee:	193c      	adds	r4, r7, r4
 80058f0:	4798      	blx	r3
 80058f2:	45b8      	cmp	r8, r7
 80058f4:	f004 0401 	and.w	r4, r4, #1
 80058f8:	d090      	beq.n	800581c <_DrawBitmap+0xb0>
 80058fa:	b194      	cbz	r4, 8005922 <_DrawBitmap+0x1b6>
 80058fc:	f818 2b01 	ldrb.w	r2, [r8], #1
 8005900:	9921      	ldr	r1, [sp, #132]	; 0x84
 8005902:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005906:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800590a:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800590e:	f885 0072 	strb.w	r0, [r5, #114]	; 0x72
 8005912:	2102      	movs	r1, #2
 8005914:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
 8005918:	4630      	mov	r0, r6
 800591a:	4798      	blx	r3
 800591c:	45b8      	cmp	r8, r7
 800591e:	f43f af7d 	beq.w	800581c <_DrawBitmap+0xb0>
 8005922:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 8005926:	4644      	mov	r4, r8
 8005928:	4630      	mov	r0, r6
 800592a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800592e:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005932:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
 8005936:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 800593a:	2102      	movs	r1, #2
 800593c:	f885 c071 	strb.w	ip, [r5, #113]	; 0x71
 8005940:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 8005944:	4798      	blx	r3
 8005946:	f898 0001 	ldrb.w	r0, [r8, #1]
 800594a:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 800594e:	f859 2020 	ldr.w	r2, [r9, r0, lsl #2]
 8005952:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005956:	f885 1071 	strb.w	r1, [r5, #113]	; 0x71
 800595a:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 800595e:	2102      	movs	r1, #2
 8005960:	4630      	mov	r0, r6
 8005962:	f104 0801 	add.w	r8, r4, #1
 8005966:	4798      	blx	r3
 8005968:	45b8      	cmp	r8, r7
 800596a:	d1dc      	bne.n	8005926 <_DrawBitmap+0x1ba>
 800596c:	e756      	b.n	800581c <_DrawBitmap+0xb0>
 800596e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005970:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8005972:	68ad      	ldr	r5, [r5, #8]
 8005974:	2e00      	cmp	r6, #0
 8005976:	f43f af51 	beq.w	800581c <_DrawBitmap+0xb0>
 800597a:	f648 0008 	movw	r0, #34824	; 0x8808
 800597e:	f6c1 70fe 	movt	r0, #8190	; 0x1ffe
 8005982:	9a05      	ldr	r2, [sp, #20]
 8005984:	6803      	ldr	r3, [r0, #0]
 8005986:	9907      	ldr	r1, [sp, #28]
 8005988:	f893 b010 	ldrb.w	fp, [r3, #16]
 800598c:	f812 9001 	ldrb.w	r9, [r2, r1]
 8005990:	f01b 0b03 	ands.w	fp, fp, #3
 8005994:	f040 8259 	bne.w	8005e4a <_DrawBitmap+0x6de>
 8005998:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800599a:	f1c7 0601 	rsb	r6, r7, #1
 800599e:	00b1      	lsls	r1, r6, #2
 80059a0:	f1c1 0004 	rsb	r0, r1, #4
 80059a4:	27f0      	movs	r7, #240	; 0xf0
 80059a6:	fa47 f200 	asr.w	r2, r7, r0
 80059aa:	ea02 0309 	and.w	r3, r2, r9
 80059ae:	fa23 f101 	lsr.w	r1, r3, r1
 80059b2:	9821      	ldr	r0, [sp, #132]	; 0x84
 80059b4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 80059b8:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 80059bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059be:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 80059c2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80059c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80059c8:	f885 0071 	strb.w	r0, [r5, #113]	; 0x71
 80059cc:	f105 0671 	add.w	r6, r5, #113	; 0x71
 80059d0:	f101 38ff 	add.w	r8, r1, #4294967295
 80059d4:	f102 0a01 	add.w	sl, r2, #1
 80059d8:	2102      	movs	r1, #2
 80059da:	4630      	mov	r0, r6
 80059dc:	4798      	blx	r3
 80059de:	f1ba 0f02 	cmp.w	sl, #2
 80059e2:	f008 0801 	and.w	r8, r8, #1
 80059e6:	f000 8594 	beq.w	8006512 <_DrawBitmap+0xda6>
 80059ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ec:	f1b3 0b01 	subs.w	fp, r3, #1
 80059f0:	f43f af14 	beq.w	800581c <_DrawBitmap+0xb0>
 80059f4:	f1b8 0f00 	cmp.w	r8, #0
 80059f8:	d022      	beq.n	8005a40 <_DrawBitmap+0x2d4>
 80059fa:	f1ca 0001 	rsb	r0, sl, #1
 80059fe:	0081      	lsls	r1, r0, #2
 8005a00:	f1c1 0204 	rsb	r2, r1, #4
 8005a04:	fa47 f302 	asr.w	r3, r7, r2
 8005a08:	ea03 0209 	and.w	r2, r3, r9
 8005a0c:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005a0e:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005a12:	fa22 f201 	lsr.w	r2, r2, r1
 8005a16:	f10a 0a01 	add.w	sl, sl, #1
 8005a1a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005a1e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005a22:	f885 1071 	strb.w	r1, [r5, #113]	; 0x71
 8005a26:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 8005a2a:	2102      	movs	r1, #2
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	4798      	blx	r3
 8005a30:	f1ba 0f02 	cmp.w	sl, #2
 8005a34:	f000 8606 	beq.w	8006644 <_DrawBitmap+0xed8>
 8005a38:	f1bb 0b01 	subs.w	fp, fp, #1
 8005a3c:	f43f aeee 	beq.w	800581c <_DrawBitmap+0xb0>
 8005a40:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005a44:	e01f      	b.n	8005a86 <_DrawBitmap+0x31a>
 8005a46:	f1ca 0201 	rsb	r2, sl, #1
 8005a4a:	0093      	lsls	r3, r2, #2
 8005a4c:	f1c3 0204 	rsb	r2, r3, #4
 8005a50:	fa47 f202 	asr.w	r2, r7, r2
 8005a54:	ea02 0209 	and.w	r2, r2, r9
 8005a58:	fa22 f203 	lsr.w	r2, r2, r3
 8005a5c:	f10a 0a01 	add.w	sl, sl, #1
 8005a60:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8005a64:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005a68:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 8005a6c:	f3c2 2e07 	ubfx	lr, r2, #8, #8
 8005a70:	f885 e071 	strb.w	lr, [r5, #113]	; 0x71
 8005a74:	4798      	blx	r3
 8005a76:	f1ba 0f02 	cmp.w	sl, #2
 8005a7a:	f000 83f6 	beq.w	800626a <_DrawBitmap+0xafe>
 8005a7e:	f1bb 0b01 	subs.w	fp, fp, #1
 8005a82:	f43f aecb 	beq.w	800581c <_DrawBitmap+0xb0>
 8005a86:	f1ca 0301 	rsb	r3, sl, #1
 8005a8a:	0098      	lsls	r0, r3, #2
 8005a8c:	f1c0 0204 	rsb	r2, r0, #4
 8005a90:	fa47 f102 	asr.w	r1, r7, r2
 8005a94:	ea01 0309 	and.w	r3, r1, r9
 8005a98:	fa23 f000 	lsr.w	r0, r3, r0
 8005a9c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005aa0:	f858 2020 	ldr.w	r2, [r8, r0, lsl #2]
 8005aa4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f885 1071 	strb.w	r1, [r5, #113]	; 0x71
 8005aae:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 8005ab2:	2102      	movs	r1, #2
 8005ab4:	4798      	blx	r3
 8005ab6:	f10a 0a01 	add.w	sl, sl, #1
 8005aba:	2102      	movs	r1, #2
 8005abc:	458a      	cmp	sl, r1
 8005abe:	4630      	mov	r0, r6
 8005ac0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ac4:	d1bf      	bne.n	8005a46 <_DrawBitmap+0x2da>
 8005ac6:	f894 9001 	ldrb.w	r9, [r4, #1]
 8005aca:	f04f 0a00 	mov.w	sl, #0
 8005ace:	3401      	adds	r4, #1
 8005ad0:	e7b9      	b.n	8005a46 <_DrawBitmap+0x2da>
 8005ad2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ad4:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8005ad6:	68ad      	ldr	r5, [r5, #8]
 8005ad8:	2e00      	cmp	r6, #0
 8005ada:	f43f ae9f 	beq.w	800581c <_DrawBitmap+0xb0>
 8005ade:	f648 0008 	movw	r0, #34824	; 0x8808
 8005ae2:	f6c1 70fe 	movt	r0, #8190	; 0x1ffe
 8005ae6:	9b05      	ldr	r3, [sp, #20]
 8005ae8:	6801      	ldr	r1, [r0, #0]
 8005aea:	9a07      	ldr	r2, [sp, #28]
 8005aec:	f891 c010 	ldrb.w	ip, [r1, #16]
 8005af0:	f813 9002 	ldrb.w	r9, [r3, r2]
 8005af4:	f01c 0b03 	ands.w	fp, ip, #3
 8005af8:	f040 822e 	bne.w	8005f58 <_DrawBitmap+0x7ec>
 8005afc:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8005afe:	f1c7 0603 	rsb	r6, r7, #3
 8005b02:	0071      	lsls	r1, r6, #1
 8005b04:	f1c1 0006 	rsb	r0, r1, #6
 8005b08:	27c0      	movs	r7, #192	; 0xc0
 8005b0a:	fa47 f200 	asr.w	r2, r7, r0
 8005b0e:	ea02 0309 	and.w	r3, r2, r9
 8005b12:	fa23 f101 	lsr.w	r1, r3, r1
 8005b16:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005b18:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005b1c:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8005b20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b22:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 8005b26:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8005b2a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b2c:	f885 0071 	strb.w	r0, [r5, #113]	; 0x71
 8005b30:	f105 0671 	add.w	r6, r5, #113	; 0x71
 8005b34:	f101 38ff 	add.w	r8, r1, #4294967295
 8005b38:	f102 0a01 	add.w	sl, r2, #1
 8005b3c:	2102      	movs	r1, #2
 8005b3e:	4630      	mov	r0, r6
 8005b40:	4798      	blx	r3
 8005b42:	f1ba 0f04 	cmp.w	sl, #4
 8005b46:	f008 0801 	and.w	r8, r8, #1
 8005b4a:	f000 84ed 	beq.w	8006528 <_DrawBitmap+0xdbc>
 8005b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b50:	f1b3 0b01 	subs.w	fp, r3, #1
 8005b54:	f43f ae62 	beq.w	800581c <_DrawBitmap+0xb0>
 8005b58:	f1b8 0f00 	cmp.w	r8, #0
 8005b5c:	d022      	beq.n	8005ba4 <_DrawBitmap+0x438>
 8005b5e:	f1ca 0003 	rsb	r0, sl, #3
 8005b62:	0041      	lsls	r1, r0, #1
 8005b64:	f1c1 0206 	rsb	r2, r1, #6
 8005b68:	fa47 f302 	asr.w	r3, r7, r2
 8005b6c:	ea03 0209 	and.w	r2, r3, r9
 8005b70:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005b72:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005b76:	fa22 f201 	lsr.w	r2, r2, r1
 8005b7a:	f10a 0a01 	add.w	sl, sl, #1
 8005b7e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005b82:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005b86:	f885 1071 	strb.w	r1, [r5, #113]	; 0x71
 8005b8a:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 8005b8e:	2102      	movs	r1, #2
 8005b90:	4630      	mov	r0, r6
 8005b92:	4798      	blx	r3
 8005b94:	f1ba 0f04 	cmp.w	sl, #4
 8005b98:	f000 855b 	beq.w	8006652 <_DrawBitmap+0xee6>
 8005b9c:	f1bb 0b01 	subs.w	fp, fp, #1
 8005ba0:	f43f ae3c 	beq.w	800581c <_DrawBitmap+0xb0>
 8005ba4:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005ba8:	e01f      	b.n	8005bea <_DrawBitmap+0x47e>
 8005baa:	f1ca 0203 	rsb	r2, sl, #3
 8005bae:	0053      	lsls	r3, r2, #1
 8005bb0:	f1c3 0206 	rsb	r2, r3, #6
 8005bb4:	fa47 f202 	asr.w	r2, r7, r2
 8005bb8:	ea02 0209 	and.w	r2, r2, r9
 8005bbc:	fa22 f203 	lsr.w	r2, r2, r3
 8005bc0:	f10a 0a01 	add.w	sl, sl, #1
 8005bc4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8005bc8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005bcc:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 8005bd0:	f3c2 2e07 	ubfx	lr, r2, #8, #8
 8005bd4:	f885 e071 	strb.w	lr, [r5, #113]	; 0x71
 8005bd8:	4798      	blx	r3
 8005bda:	f1ba 0f04 	cmp.w	sl, #4
 8005bde:	f000 833e 	beq.w	800625e <_DrawBitmap+0xaf2>
 8005be2:	f1bb 0b01 	subs.w	fp, fp, #1
 8005be6:	f43f ae19 	beq.w	800581c <_DrawBitmap+0xb0>
 8005bea:	f1ca 0303 	rsb	r3, sl, #3
 8005bee:	0058      	lsls	r0, r3, #1
 8005bf0:	f1c0 0206 	rsb	r2, r0, #6
 8005bf4:	fa47 f102 	asr.w	r1, r7, r2
 8005bf8:	ea01 0309 	and.w	r3, r1, r9
 8005bfc:	fa23 f000 	lsr.w	r0, r3, r0
 8005c00:	f10a 0a01 	add.w	sl, sl, #1
 8005c04:	f858 2020 	ldr.w	r2, [r8, r0, lsl #2]
 8005c08:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005c0c:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 8005c10:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005c14:	4630      	mov	r0, r6
 8005c16:	f885 1071 	strb.w	r1, [r5, #113]	; 0x71
 8005c1a:	2102      	movs	r1, #2
 8005c1c:	4798      	blx	r3
 8005c1e:	2102      	movs	r1, #2
 8005c20:	f1ba 0f04 	cmp.w	sl, #4
 8005c24:	4630      	mov	r0, r6
 8005c26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c2a:	d1be      	bne.n	8005baa <_DrawBitmap+0x43e>
 8005c2c:	f894 9001 	ldrb.w	r9, [r4, #1]
 8005c30:	f04f 0a00 	mov.w	sl, #0
 8005c34:	3401      	adds	r4, #1
 8005c36:	e7b8      	b.n	8005baa <_DrawBitmap+0x43e>
 8005c38:	f648 0508 	movw	r5, #34824	; 0x8808
 8005c3c:	f6c1 75fe 	movt	r5, #8190	; 0x1ffe
 8005c40:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005c42:	6828      	ldr	r0, [r5, #0]
 8005c44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c46:	7c01      	ldrb	r1, [r0, #16]
 8005c48:	68b5      	ldr	r5, [r6, #8]
 8005c4a:	e893 0044 	ldmia.w	r3, {r2, r6}
 8005c4e:	f001 0003 	and.w	r0, r1, #3
 8005c52:	2802      	cmp	r0, #2
 8005c54:	960a      	str	r6, [sp, #40]	; 0x28
 8005c56:	f000 8289 	beq.w	800616c <_DrawBitmap+0xa00>
 8005c5a:	2803      	cmp	r0, #3
 8005c5c:	f000 8208 	beq.w	8006070 <_DrawBitmap+0x904>
 8005c60:	2801      	cmp	r0, #1
 8005c62:	f000 8205 	beq.w	8006070 <_DrawBitmap+0x904>
 8005c66:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005c68:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8005c6a:	7821      	ldrb	r1, [r4, #0]
 8005c6c:	f04f 0880 	mov.w	r8, #128	; 0x80
 8005c70:	1e78      	subs	r0, r7, #1
 8005c72:	fa48 f306 	asr.w	r3, r8, r6
 8005c76:	fa1f f982 	uxth.w	r9, r2
 8005c7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c7c:	f000 0001 	and.w	r0, r0, #1
 8005c80:	4219      	tst	r1, r3
 8005c82:	f105 0771 	add.w	r7, r5, #113	; 0x71
 8005c86:	fa1f fb82 	uxth.w	fp, r2
 8005c8a:	9008      	str	r0, [sp, #32]
 8005c8c:	f040 81ee 	bne.w	800606c <_DrawBitmap+0x900>
 8005c90:	4649      	mov	r1, r9
 8005c92:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c94:	f885 1072 	strb.w	r1, [r5, #114]	; 0x72
 8005c98:	0a0e      	lsrs	r6, r1, #8
 8005c9a:	f885 6071 	strb.w	r6, [r5, #113]	; 0x71
 8005c9e:	2102      	movs	r1, #2
 8005ca0:	1c56      	adds	r6, r2, #1
 8005ca2:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	4798      	blx	r3
 8005caa:	2e08      	cmp	r6, #8
 8005cac:	f000 84eb 	beq.w	8006686 <_DrawBitmap+0xf1a>
 8005cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cb2:	f1b0 0a01 	subs.w	sl, r0, #1
 8005cb6:	f43f adb1 	beq.w	800581c <_DrawBitmap+0xb0>
 8005cba:	9908      	ldr	r1, [sp, #32]
 8005cbc:	b1b9      	cbz	r1, 8005cee <_DrawBitmap+0x582>
 8005cbe:	7822      	ldrb	r2, [r4, #0]
 8005cc0:	fa48 f306 	asr.w	r3, r8, r6
 8005cc4:	421a      	tst	r2, r3
 8005cc6:	d02e      	beq.n	8005d26 <_DrawBitmap+0x5ba>
 8005cc8:	4658      	mov	r0, fp
 8005cca:	0a01      	lsrs	r1, r0, #8
 8005ccc:	f885 1071 	strb.w	r1, [r5, #113]	; 0x71
 8005cd0:	f885 0072 	strb.w	r0, [r5, #114]	; 0x72
 8005cd4:	2102      	movs	r1, #2
 8005cd6:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8005cda:	4638      	mov	r0, r7
 8005cdc:	3601      	adds	r6, #1
 8005cde:	4790      	blx	r2
 8005ce0:	2e08      	cmp	r6, #8
 8005ce2:	f000 82b9 	beq.w	8006258 <_DrawBitmap+0xaec>
 8005ce6:	f1ba 0a01 	subs.w	sl, sl, #1
 8005cea:	f43f ad97 	beq.w	800581c <_DrawBitmap+0xb0>
 8005cee:	7820      	ldrb	r0, [r4, #0]
 8005cf0:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8005cf4:	fa48 f306 	asr.w	r3, r8, r6
 8005cf8:	4218      	tst	r0, r3
 8005cfa:	bf14      	ite	ne
 8005cfc:	465b      	movne	r3, fp
 8005cfe:	464b      	moveq	r3, r9
 8005d00:	0a19      	lsrs	r1, r3, #8
 8005d02:	f885 1071 	strb.w	r1, [r5, #113]	; 0x71
 8005d06:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
 8005d0a:	2102      	movs	r1, #2
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	3601      	adds	r6, #1
 8005d10:	4790      	blx	r2
 8005d12:	2e08      	cmp	r6, #8
 8005d14:	f000 82af 	beq.w	8006276 <_DrawBitmap+0xb0a>
 8005d18:	7820      	ldrb	r0, [r4, #0]
 8005d1a:	fa48 f306 	asr.w	r3, r8, r6
 8005d1e:	4218      	tst	r0, r3
 8005d20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d24:	d1d0      	bne.n	8005cc8 <_DrawBitmap+0x55c>
 8005d26:	4648      	mov	r0, r9
 8005d28:	e7cf      	b.n	8005cca <_DrawBitmap+0x55e>
 8005d2a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005d2e:	f8d8 5118 	ldr.w	r5, [r8, #280]	; 0x118
 8005d32:	f8d8 0068 	ldr.w	r0, [r8, #104]	; 0x68
 8005d36:	47a8      	blx	r5
 8005d38:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	1c72      	adds	r2, r6, #1
 8005d40:	e59d      	b.n	800587e <_DrawBitmap+0x112>
 8005d42:	4bb7      	ldr	r3, [pc, #732]	; (8006020 <_DrawBitmap+0x8b4>)
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	7c10      	ldrb	r0, [r2, #16]
 8005d48:	f000 0103 	and.w	r1, r0, #3
 8005d4c:	2902      	cmp	r1, #2
 8005d4e:	f47f ad24 	bne.w	800579a <_DrawBitmap+0x2e>
 8005d52:	e531      	b.n	80057b8 <_DrawBitmap+0x4c>
 8005d54:	5a60      	ldrh	r0, [r4, r1]
 8005d56:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8005d5a:	7058      	strb	r0, [r3, #1]
 8005d5c:	0a02      	lsrs	r2, r0, #8
 8005d5e:	2101      	movs	r1, #1
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005d64:	3302      	adds	r3, #2
 8005d66:	460a      	mov	r2, r1
 8005d68:	e570      	b.n	800584c <_DrawBitmap+0xe0>
 8005d6a:	f8d8 5118 	ldr.w	r5, [r8, #280]	; 0x118
 8005d6e:	f8d8 0068 	ldr.w	r0, [r8, #104]	; 0x68
 8005d72:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005d76:	47a8      	blx	r5
 8005d78:	f8d8 0068 	ldr.w	r0, [r8, #104]	; 0x68
 8005d7c:	2500      	movs	r5, #0
 8005d7e:	e573      	b.n	8005868 <_DrawBitmap+0xfc>
 8005d80:	2e02      	cmp	r6, #2
 8005d82:	f47f ad4b 	bne.w	800581c <_DrawBitmap+0xb0>
 8005d86:	9c07      	ldr	r4, [sp, #28]
 8005d88:	f8d5 a06c 	ldr.w	sl, [r5, #108]	; 0x6c
 8005d8c:	9408      	str	r4, [sp, #32]
 8005d8e:	f04f 0800 	mov.w	r8, #0
 8005d92:	46ab      	mov	fp, r5
 8005d94:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005d96:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005d9a:	4645      	mov	r5, r8
 8005d9c:	e00e      	b.n	8005dbc <_DrawBitmap+0x650>
 8005d9e:	b915      	cbnz	r5, 8005da6 <_DrawBitmap+0x63a>
 8005da0:	f8db a06c 	ldr.w	sl, [fp, #108]	; 0x6c
 8005da4:	9408      	str	r4, [sp, #32]
 8005da6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005da8:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8005dac:	f82a 0b02 	strh.w	r0, [sl], #2
 8005db0:	f108 0801 	add.w	r8, r8, #1
 8005db4:	2501      	movs	r5, #1
 8005db6:	3401      	adds	r4, #1
 8005db8:	3f01      	subs	r7, #1
 8005dba:	d00a      	beq.n	8005dd2 <_DrawBitmap+0x666>
 8005dbc:	f819 6004 	ldrb.w	r6, [r9, r4]
 8005dc0:	2e00      	cmp	r6, #0
 8005dc2:	d1ec      	bne.n	8005d9e <_DrawBitmap+0x632>
 8005dc4:	2d01      	cmp	r5, #1
 8005dc6:	f000 82f7 	beq.w	80063b8 <_DrawBitmap+0xc4c>
 8005dca:	3401      	adds	r4, #1
 8005dcc:	3f01      	subs	r7, #1
 8005dce:	4635      	mov	r5, r6
 8005dd0:	d1f4      	bne.n	8005dbc <_DrawBitmap+0x650>
 8005dd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005dd4:	9b07      	ldr	r3, [sp, #28]
 8005dd6:	465d      	mov	r5, fp
 8005dd8:	18d3      	adds	r3, r2, r3
 8005dda:	f1b8 0f00 	cmp.w	r8, #0
 8005dde:	f43f ad1d 	beq.w	800581c <_DrawBitmap+0xb0>
 8005de2:	9e04      	ldr	r6, [sp, #16]
 8005de4:	9908      	ldr	r1, [sp, #32]
 8005de6:	9600      	str	r6, [sp, #0]
 8005de8:	f8db 40a8 	ldr.w	r4, [fp, #168]	; 0xa8
 8005dec:	4658      	mov	r0, fp
 8005dee:	4632      	mov	r2, r6
 8005df0:	47a0      	blx	r4
 8005df2:	f018 0f01 	tst.w	r8, #1
 8005df6:	f8db 406c 	ldr.w	r4, [fp, #108]	; 0x6c
 8005dfa:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
 8005dfe:	4639      	mov	r1, r7
 8005e00:	d007      	beq.n	8005e12 <_DrawBitmap+0x6a6>
 8005e02:	f834 7b02 	ldrh.w	r7, [r4], #2
 8005e06:	0a39      	lsrs	r1, r7, #8
 8005e08:	7019      	strb	r1, [r3, #0]
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	705f      	strb	r7, [r3, #1]
 8005e0e:	3302      	adds	r3, #2
 8005e10:	460f      	mov	r7, r1
 8005e12:	1c48      	adds	r0, r1, #1
 8005e14:	4547      	cmp	r7, r8
 8005e16:	f103 0202 	add.w	r2, r3, #2
 8005e1a:	f107 0701 	add.w	r7, r7, #1
 8005e1e:	f43f acf7 	beq.w	8005810 <_DrawBitmap+0xa4>
 8005e22:	f834 1b02 	ldrh.w	r1, [r4], #2
 8005e26:	0a0e      	lsrs	r6, r1, #8
 8005e28:	28fa      	cmp	r0, #250	; 0xfa
 8005e2a:	701e      	strb	r6, [r3, #0]
 8005e2c:	7059      	strb	r1, [r3, #1]
 8005e2e:	f000 83ee 	beq.w	800660e <_DrawBitmap+0xea2>
 8005e32:	f834 6b02 	ldrh.w	r6, [r4], #2
 8005e36:	1c41      	adds	r1, r0, #1
 8005e38:	1c93      	adds	r3, r2, #2
 8005e3a:	0a30      	lsrs	r0, r6, #8
 8005e3c:	29fa      	cmp	r1, #250	; 0xfa
 8005e3e:	7010      	strb	r0, [r2, #0]
 8005e40:	7056      	strb	r6, [r2, #1]
 8005e42:	f000 835c 	beq.w	80064fe <_DrawBitmap+0xd92>
 8005e46:	3701      	adds	r7, #1
 8005e48:	e7e3      	b.n	8005e12 <_DrawBitmap+0x6a6>
 8005e4a:	f1bb 0f02 	cmp.w	fp, #2
 8005e4e:	f47f ace5 	bne.w	800581c <_DrawBitmap+0xb0>
 8005e52:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 8005e54:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005e56:	9608      	str	r6, [sp, #32]
 8005e58:	f04f 0c00 	mov.w	ip, #0
 8005e5c:	940a      	str	r4, [sp, #40]	; 0x28
 8005e5e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e60:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8005e62:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8005e66:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8005e6a:	46e3      	mov	fp, ip
 8005e6c:	4664      	mov	r4, ip
 8005e6e:	e016      	b.n	8005e9e <_DrawBitmap+0x732>
 8005e70:	b91c      	cbnz	r4, 8005e7a <_DrawBitmap+0x70e>
 8005e72:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8005e74:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8005e78:	9408      	str	r4, [sp, #32]
 8005e7a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005e7c:	9b08      	ldr	r3, [sp, #32]
 8005e7e:	f850 202c 	ldr.w	r2, [r0, ip, lsl #2]
 8005e82:	f823 2b02 	strh.w	r2, [r3], #2
 8005e86:	f10b 0b01 	add.w	fp, fp, #1
 8005e8a:	9308      	str	r3, [sp, #32]
 8005e8c:	2401      	movs	r4, #1
 8005e8e:	3601      	adds	r6, #1
 8005e90:	2e02      	cmp	r6, #2
 8005e92:	f10a 0a01 	add.w	sl, sl, #1
 8005e96:	d018      	beq.n	8005eca <_DrawBitmap+0x75e>
 8005e98:	f1b8 0801 	subs.w	r8, r8, #1
 8005e9c:	d01f      	beq.n	8005ede <_DrawBitmap+0x772>
 8005e9e:	f1c6 0301 	rsb	r3, r6, #1
 8005ea2:	009a      	lsls	r2, r3, #2
 8005ea4:	20f0      	movs	r0, #240	; 0xf0
 8005ea6:	f1c2 0104 	rsb	r1, r2, #4
 8005eaa:	fa40 fc01 	asr.w	ip, r0, r1
 8005eae:	ea0c 0309 	and.w	r3, ip, r9
 8005eb2:	fa33 fc02 	lsrs.w	ip, r3, r2
 8005eb6:	d1db      	bne.n	8005e70 <_DrawBitmap+0x704>
 8005eb8:	2c01      	cmp	r4, #1
 8005eba:	f000 822e 	beq.w	800631a <_DrawBitmap+0xbae>
 8005ebe:	3601      	adds	r6, #1
 8005ec0:	2e02      	cmp	r6, #2
 8005ec2:	4664      	mov	r4, ip
 8005ec4:	f10a 0a01 	add.w	sl, sl, #1
 8005ec8:	d1e6      	bne.n	8005e98 <_DrawBitmap+0x72c>
 8005eca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005ecc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ece:	f896 9001 	ldrb.w	r9, [r6, #1]
 8005ed2:	1c48      	adds	r0, r1, #1
 8005ed4:	2600      	movs	r6, #0
 8005ed6:	f1b8 0801 	subs.w	r8, r8, #1
 8005eda:	900a      	str	r0, [sp, #40]	; 0x28
 8005edc:	d1df      	bne.n	8005e9e <_DrawBitmap+0x732>
 8005ede:	f1bb 0f00 	cmp.w	fp, #0
 8005ee2:	f43f ac9b 	beq.w	800581c <_DrawBitmap+0xb0>
 8005ee6:	9a04      	ldr	r2, [sp, #16]
 8005ee8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005eea:	9200      	str	r2, [sp, #0]
 8005eec:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 8005ef0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ef2:	f8cd b00c 	str.w	fp, [sp, #12]
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	47a0      	blx	r4
 8005efa:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005efe:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8005f00:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8005f02:	f01c 0f01 	tst.w	ip, #1
 8005f06:	4641      	mov	r1, r8
 8005f08:	f040 8351 	bne.w	80065ae <_DrawBitmap+0xe42>
 8005f0c:	4666      	mov	r6, ip
 8005f0e:	e00b      	b.n	8005f28 <_DrawBitmap+0x7bc>
 8005f10:	f834 3b02 	ldrh.w	r3, [r4], #2
 8005f14:	1c41      	adds	r1, r0, #1
 8005f16:	7053      	strb	r3, [r2, #1]
 8005f18:	0a18      	lsrs	r0, r3, #8
 8005f1a:	1c93      	adds	r3, r2, #2
 8005f1c:	29fa      	cmp	r1, #250	; 0xfa
 8005f1e:	7010      	strb	r0, [r2, #0]
 8005f20:	f000 8387 	beq.w	8006632 <_DrawBitmap+0xec6>
 8005f24:	f108 0801 	add.w	r8, r8, #1
 8005f28:	1c48      	adds	r0, r1, #1
 8005f2a:	45b0      	cmp	r8, r6
 8005f2c:	f103 0202 	add.w	r2, r3, #2
 8005f30:	f108 0801 	add.w	r8, r8, #1
 8005f34:	f43f ac6c 	beq.w	8005810 <_DrawBitmap+0xa4>
 8005f38:	f834 1b02 	ldrh.w	r1, [r4], #2
 8005f3c:	0a0f      	lsrs	r7, r1, #8
 8005f3e:	28fa      	cmp	r0, #250	; 0xfa
 8005f40:	701f      	strb	r7, [r3, #0]
 8005f42:	7059      	strb	r1, [r3, #1]
 8005f44:	d1e4      	bne.n	8005f10 <_DrawBitmap+0x7a4>
 8005f46:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8005f48:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005f4c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005f50:	4798      	blx	r3
 8005f52:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8005f54:	2000      	movs	r0, #0
 8005f56:	e7db      	b.n	8005f10 <_DrawBitmap+0x7a4>
 8005f58:	f1bb 0f02 	cmp.w	fp, #2
 8005f5c:	f47f ac5e 	bne.w	800581c <_DrawBitmap+0xb0>
 8005f60:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 8005f62:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005f64:	9608      	str	r6, [sp, #32]
 8005f66:	f04f 0000 	mov.w	r0, #0
 8005f6a:	940a      	str	r4, [sp, #40]	; 0x28
 8005f6c:	910f      	str	r1, [sp, #60]	; 0x3c
 8005f6e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8005f70:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8005f74:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8005f78:	4683      	mov	fp, r0
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	e016      	b.n	8005fac <_DrawBitmap+0x840>
 8005f7e:	b91c      	cbnz	r4, 8005f88 <_DrawBitmap+0x81c>
 8005f80:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8005f82:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8005f86:	9408      	str	r4, [sp, #32]
 8005f88:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005f8a:	9b08      	ldr	r3, [sp, #32]
 8005f8c:	f850 202c 	ldr.w	r2, [r0, ip, lsl #2]
 8005f90:	f823 2b02 	strh.w	r2, [r3], #2
 8005f94:	f10b 0b01 	add.w	fp, fp, #1
 8005f98:	9308      	str	r3, [sp, #32]
 8005f9a:	2401      	movs	r4, #1
 8005f9c:	3601      	adds	r6, #1
 8005f9e:	2e04      	cmp	r6, #4
 8005fa0:	f10a 0a01 	add.w	sl, sl, #1
 8005fa4:	d018      	beq.n	8005fd8 <_DrawBitmap+0x86c>
 8005fa6:	f1b8 0801 	subs.w	r8, r8, #1
 8005faa:	d01f      	beq.n	8005fec <_DrawBitmap+0x880>
 8005fac:	f1c6 0303 	rsb	r3, r6, #3
 8005fb0:	005a      	lsls	r2, r3, #1
 8005fb2:	f1c2 0c06 	rsb	ip, r2, #6
 8005fb6:	20c0      	movs	r0, #192	; 0xc0
 8005fb8:	fa40 f10c 	asr.w	r1, r0, ip
 8005fbc:	ea01 0309 	and.w	r3, r1, r9
 8005fc0:	fa33 fc02 	lsrs.w	ip, r3, r2
 8005fc4:	d1db      	bne.n	8005f7e <_DrawBitmap+0x812>
 8005fc6:	2c01      	cmp	r4, #1
 8005fc8:	f000 8158 	beq.w	800627c <_DrawBitmap+0xb10>
 8005fcc:	3601      	adds	r6, #1
 8005fce:	2e04      	cmp	r6, #4
 8005fd0:	4664      	mov	r4, ip
 8005fd2:	f10a 0a01 	add.w	sl, sl, #1
 8005fd6:	d1e6      	bne.n	8005fa6 <_DrawBitmap+0x83a>
 8005fd8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005fda:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005fdc:	f896 9001 	ldrb.w	r9, [r6, #1]
 8005fe0:	1c48      	adds	r0, r1, #1
 8005fe2:	2600      	movs	r6, #0
 8005fe4:	f1b8 0801 	subs.w	r8, r8, #1
 8005fe8:	900a      	str	r0, [sp, #40]	; 0x28
 8005fea:	d1df      	bne.n	8005fac <_DrawBitmap+0x840>
 8005fec:	f1bb 0f00 	cmp.w	fp, #0
 8005ff0:	f43f ac14 	beq.w	800581c <_DrawBitmap+0xb0>
 8005ff4:	9a04      	ldr	r2, [sp, #16]
 8005ff6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005ff8:	9200      	str	r2, [sp, #0]
 8005ffa:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 8005ffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006000:	f8cd b00c 	str.w	fp, [sp, #12]
 8006004:	4628      	mov	r0, r5
 8006006:	47a0      	blx	r4
 8006008:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800600c:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 800600e:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8006010:	f01c 0f01 	tst.w	ip, #1
 8006014:	4641      	mov	r1, r8
 8006016:	f040 82c0 	bne.w	800659a <_DrawBitmap+0xe2e>
 800601a:	4666      	mov	r6, ip
 800601c:	e00e      	b.n	800603c <_DrawBitmap+0x8d0>
 800601e:	bf00      	nop
 8006020:	1ffe8808 	.word	0x1ffe8808
 8006024:	f834 3b02 	ldrh.w	r3, [r4], #2
 8006028:	1c41      	adds	r1, r0, #1
 800602a:	7053      	strb	r3, [r2, #1]
 800602c:	0a18      	lsrs	r0, r3, #8
 800602e:	1c93      	adds	r3, r2, #2
 8006030:	29fa      	cmp	r1, #250	; 0xfa
 8006032:	7010      	strb	r0, [r2, #0]
 8006034:	f000 82f4 	beq.w	8006620 <_DrawBitmap+0xeb4>
 8006038:	f108 0801 	add.w	r8, r8, #1
 800603c:	1c48      	adds	r0, r1, #1
 800603e:	45b0      	cmp	r8, r6
 8006040:	f103 0202 	add.w	r2, r3, #2
 8006044:	f108 0801 	add.w	r8, r8, #1
 8006048:	f43f abe2 	beq.w	8005810 <_DrawBitmap+0xa4>
 800604c:	f834 1b02 	ldrh.w	r1, [r4], #2
 8006050:	0a0f      	lsrs	r7, r1, #8
 8006052:	28fa      	cmp	r0, #250	; 0xfa
 8006054:	701f      	strb	r7, [r3, #0]
 8006056:	7059      	strb	r1, [r3, #1]
 8006058:	d1e4      	bne.n	8006024 <_DrawBitmap+0x8b8>
 800605a:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800605c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8006060:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006064:	4798      	blx	r3
 8006066:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8006068:	2000      	movs	r0, #0
 800606a:	e7db      	b.n	8006024 <_DrawBitmap+0x8b8>
 800606c:	4659      	mov	r1, fp
 800606e:	e610      	b.n	8005c92 <_DrawBitmap+0x526>
 8006070:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006072:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006074:	7827      	ldrb	r7, [r4, #0]
 8006076:	f04f 0b80 	mov.w	fp, #128	; 0x80
 800607a:	fa4b f201 	asr.w	r2, fp, r1
 800607e:	f106 3aff 	add.w	sl, r6, #4294967295
 8006082:	4217      	tst	r7, r2
 8006084:	f00a 0601 	and.w	r6, sl, #1
 8006088:	f040 82ea 	bne.w	8006660 <_DrawBitmap+0xef4>
 800608c:	9820      	ldr	r0, [sp, #128]	; 0x80
 800608e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006090:	1c47      	adds	r7, r0, #1
 8006092:	2f08      	cmp	r7, #8
 8006094:	f102 0801 	add.w	r8, r2, #1
 8006098:	f000 82f2 	beq.w	8006680 <_DrawBitmap+0xf14>
 800609c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800609e:	f1b3 0901 	subs.w	r9, r3, #1
 80060a2:	f43f abbb 	beq.w	800581c <_DrawBitmap+0xb0>
 80060a6:	b17e      	cbz	r6, 80060c8 <_DrawBitmap+0x95c>
 80060a8:	7826      	ldrb	r6, [r4, #0]
 80060aa:	fa4b f107 	asr.w	r1, fp, r7
 80060ae:	420e      	tst	r6, r1
 80060b0:	f040 82ed 	bne.w	800668e <_DrawBitmap+0xf22>
 80060b4:	3701      	adds	r7, #1
 80060b6:	2f08      	cmp	r7, #8
 80060b8:	f108 0801 	add.w	r8, r8, #1
 80060bc:	f000 82fc 	beq.w	80066b8 <_DrawBitmap+0xf4c>
 80060c0:	f1b9 0901 	subs.w	r9, r9, #1
 80060c4:	f43f abaa 	beq.w	800581c <_DrawBitmap+0xb0>
 80060c8:	46c4      	mov	ip, r8
 80060ca:	46a8      	mov	r8, r5
 80060cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060ce:	e00f      	b.n	80060f0 <_DrawBitmap+0x984>
 80060d0:	2e08      	cmp	r6, #8
 80060d2:	d02c      	beq.n	800612e <_DrawBitmap+0x9c2>
 80060d4:	7822      	ldrb	r2, [r4, #0]
 80060d6:	fa4b f006 	asr.w	r0, fp, r6
 80060da:	4202      	tst	r2, r0
 80060dc:	d12e      	bne.n	800613c <_DrawBitmap+0x9d0>
 80060de:	1c77      	adds	r7, r6, #1
 80060e0:	2f08      	cmp	r7, #8
 80060e2:	f10a 0c01 	add.w	ip, sl, #1
 80060e6:	d03e      	beq.n	8006166 <_DrawBitmap+0x9fa>
 80060e8:	f1b9 0901 	subs.w	r9, r9, #1
 80060ec:	f43f ab96 	beq.w	800581c <_DrawBitmap+0xb0>
 80060f0:	7820      	ldrb	r0, [r4, #0]
 80060f2:	fa4b f107 	asr.w	r1, fp, r7
 80060f6:	1c7e      	adds	r6, r7, #1
 80060f8:	4208      	tst	r0, r1
 80060fa:	f10c 0a01 	add.w	sl, ip, #1
 80060fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8006102:	d0e5      	beq.n	80060d0 <_DrawBitmap+0x964>
 8006104:	4661      	mov	r1, ip
 8006106:	f8d8 70ec 	ldr.w	r7, [r8, #236]	; 0xec
 800610a:	9a04      	ldr	r2, [sp, #16]
 800610c:	f8cd c00c 	str.w	ip, [sp, #12]
 8006110:	4628      	mov	r0, r5
 8006112:	47b8      	blx	r7
 8006114:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8006118:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800611c:	f8d8 70f0 	ldr.w	r7, [r8, #240]	; 0xf0
 8006120:	9a04      	ldr	r2, [sp, #16]
 8006122:	4043      	eors	r3, r0
 8006124:	4661      	mov	r1, ip
 8006126:	4628      	mov	r0, r5
 8006128:	47b8      	blx	r7
 800612a:	2e08      	cmp	r6, #8
 800612c:	d1d2      	bne.n	80060d4 <_DrawBitmap+0x968>
 800612e:	3401      	adds	r4, #1
 8006130:	2600      	movs	r6, #0
 8006132:	7822      	ldrb	r2, [r4, #0]
 8006134:	fa4b f006 	asr.w	r0, fp, r6
 8006138:	4202      	tst	r2, r0
 800613a:	d0d0      	beq.n	80060de <_DrawBitmap+0x972>
 800613c:	4651      	mov	r1, sl
 800613e:	9a04      	ldr	r2, [sp, #16]
 8006140:	f8d8 30ec 	ldr.w	r3, [r8, #236]	; 0xec
 8006144:	4628      	mov	r0, r5
 8006146:	4798      	blx	r3
 8006148:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 800614c:	f8d8 70f0 	ldr.w	r7, [r8, #240]	; 0xf0
 8006150:	9a04      	ldr	r2, [sp, #16]
 8006152:	ea80 0301 	eor.w	r3, r0, r1
 8006156:	4651      	mov	r1, sl
 8006158:	4628      	mov	r0, r5
 800615a:	47b8      	blx	r7
 800615c:	1c77      	adds	r7, r6, #1
 800615e:	2f08      	cmp	r7, #8
 8006160:	f10a 0c01 	add.w	ip, sl, #1
 8006164:	d1c0      	bne.n	80060e8 <_DrawBitmap+0x97c>
 8006166:	3401      	adds	r4, #1
 8006168:	2700      	movs	r7, #0
 800616a:	e7bd      	b.n	80060e8 <_DrawBitmap+0x97c>
 800616c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 800616e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006170:	9608      	str	r6, [sp, #32]
 8006172:	f04f 0a00 	mov.w	sl, #0
 8006176:	46ac      	mov	ip, r5
 8006178:	4625      	mov	r5, r4
 800617a:	920f      	str	r2, [sp, #60]	; 0x3c
 800617c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8006180:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8006182:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006186:	4654      	mov	r4, sl
 8006188:	46ab      	mov	fp, r5
 800618a:	e018      	b.n	80061be <_DrawBitmap+0xa52>
 800618c:	b924      	cbnz	r4, 8006198 <_DrawBitmap+0xa2c>
 800618e:	f8dc 506c 	ldr.w	r5, [ip, #108]	; 0x6c
 8006192:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8006196:	9508      	str	r5, [sp, #32]
 8006198:	9808      	ldr	r0, [sp, #32]
 800619a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800619c:	f820 2b02 	strh.w	r2, [r0], #2
 80061a0:	f10a 0a01 	add.w	sl, sl, #1
 80061a4:	9008      	str	r0, [sp, #32]
 80061a6:	2401      	movs	r4, #1
 80061a8:	3601      	adds	r6, #1
 80061aa:	2e08      	cmp	r6, #8
 80061ac:	bf04      	itt	eq
 80061ae:	f10b 0b01 	addeq.w	fp, fp, #1
 80061b2:	2600      	moveq	r6, #0
 80061b4:	f1b8 0801 	subs.w	r8, r8, #1
 80061b8:	f109 0901 	add.w	r9, r9, #1
 80061bc:	d00b      	beq.n	80061d6 <_DrawBitmap+0xa6a>
 80061be:	2380      	movs	r3, #128	; 0x80
 80061c0:	f89b 0000 	ldrb.w	r0, [fp]
 80061c4:	4133      	asrs	r3, r6
 80061c6:	ea10 0503 	ands.w	r5, r0, r3
 80061ca:	d1df      	bne.n	800618c <_DrawBitmap+0xa20>
 80061cc:	2c01      	cmp	r4, #1
 80061ce:	f000 813a 	beq.w	8006446 <_DrawBitmap+0xcda>
 80061d2:	462c      	mov	r4, r5
 80061d4:	e7e8      	b.n	80061a8 <_DrawBitmap+0xa3c>
 80061d6:	4665      	mov	r5, ip
 80061d8:	f1ba 0f00 	cmp.w	sl, #0
 80061dc:	f43f ab1e 	beq.w	800581c <_DrawBitmap+0xb0>
 80061e0:	9b04      	ldr	r3, [sp, #16]
 80061e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	f8dc 40a8 	ldr.w	r4, [ip, #168]	; 0xa8
 80061ea:	461a      	mov	r2, r3
 80061ec:	4660      	mov	r0, ip
 80061ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061f0:	47a0      	blx	r4
 80061f2:	f01a 0f01 	tst.w	sl, #1
 80061f6:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 80061f8:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80061fa:	4641      	mov	r1, r8
 80061fc:	d014      	beq.n	8006228 <_DrawBitmap+0xabc>
 80061fe:	f834 0b02 	ldrh.w	r0, [r4], #2
 8006202:	0a01      	lsrs	r1, r0, #8
 8006204:	7019      	strb	r1, [r3, #0]
 8006206:	2101      	movs	r1, #1
 8006208:	7058      	strb	r0, [r3, #1]
 800620a:	4688      	mov	r8, r1
 800620c:	3302      	adds	r3, #2
 800620e:	e00b      	b.n	8006228 <_DrawBitmap+0xabc>
 8006210:	f834 6b02 	ldrh.w	r6, [r4], #2
 8006214:	1c41      	adds	r1, r0, #1
 8006216:	1c93      	adds	r3, r2, #2
 8006218:	0a30      	lsrs	r0, r6, #8
 800621a:	29fa      	cmp	r1, #250	; 0xfa
 800621c:	7010      	strb	r0, [r2, #0]
 800621e:	7056      	strb	r6, [r2, #1]
 8006220:	f000 824d 	beq.w	80066be <_DrawBitmap+0xf52>
 8006224:	f108 0801 	add.w	r8, r8, #1
 8006228:	1c48      	adds	r0, r1, #1
 800622a:	45d0      	cmp	r8, sl
 800622c:	f103 0202 	add.w	r2, r3, #2
 8006230:	f108 0801 	add.w	r8, r8, #1
 8006234:	f43f aaec 	beq.w	8005810 <_DrawBitmap+0xa4>
 8006238:	f834 1b02 	ldrh.w	r1, [r4], #2
 800623c:	0a0e      	lsrs	r6, r1, #8
 800623e:	28fa      	cmp	r0, #250	; 0xfa
 8006240:	701e      	strb	r6, [r3, #0]
 8006242:	7059      	strb	r1, [r3, #1]
 8006244:	d1e4      	bne.n	8006210 <_DrawBitmap+0xaa4>
 8006246:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8006248:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 800624c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006250:	4798      	blx	r3
 8006252:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8006254:	2000      	movs	r0, #0
 8006256:	e7db      	b.n	8006210 <_DrawBitmap+0xaa4>
 8006258:	3401      	adds	r4, #1
 800625a:	2600      	movs	r6, #0
 800625c:	e543      	b.n	8005ce6 <_DrawBitmap+0x57a>
 800625e:	f894 9001 	ldrb.w	r9, [r4, #1]
 8006262:	f04f 0a00 	mov.w	sl, #0
 8006266:	3401      	adds	r4, #1
 8006268:	e4bb      	b.n	8005be2 <_DrawBitmap+0x476>
 800626a:	f894 9001 	ldrb.w	r9, [r4, #1]
 800626e:	f04f 0a00 	mov.w	sl, #0
 8006272:	3401      	adds	r4, #1
 8006274:	e403      	b.n	8005a7e <_DrawBitmap+0x312>
 8006276:	3401      	adds	r4, #1
 8006278:	2600      	movs	r6, #0
 800627a:	e54d      	b.n	8005d18 <_DrawBitmap+0x5ac>
 800627c:	9f04      	ldr	r7, [sp, #16]
 800627e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006280:	9700      	str	r7, [sp, #0]
 8006282:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 8006286:	9a04      	ldr	r2, [sp, #16]
 8006288:	f8cd c00c 	str.w	ip, [sp, #12]
 800628c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006290:	4628      	mov	r0, r5
 8006292:	47b8      	blx	r7
 8006294:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006298:	6eef      	ldr	r7, [r5, #108]	; 0x6c
 800629a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800629c:	f01b 0f01 	tst.w	fp, #1
 80062a0:	4661      	mov	r1, ip
 80062a2:	d029      	beq.n	80062f8 <_DrawBitmap+0xb8c>
 80062a4:	f837 2b02 	ldrh.w	r2, [r7], #2
 80062a8:	4621      	mov	r1, r4
 80062aa:	0a10      	lsrs	r0, r2, #8
 80062ac:	f04f 0c01 	mov.w	ip, #1
 80062b0:	7018      	strb	r0, [r3, #0]
 80062b2:	705a      	strb	r2, [r3, #1]
 80062b4:	1c48      	adds	r0, r1, #1
 80062b6:	3302      	adds	r3, #2
 80062b8:	45dc      	cmp	ip, fp
 80062ba:	f103 0202 	add.w	r2, r3, #2
 80062be:	f10c 0401 	add.w	r4, ip, #1
 80062c2:	d120      	bne.n	8006306 <_DrawBitmap+0xb9a>
 80062c4:	2900      	cmp	r1, #0
 80062c6:	f040 8153 	bne.w	8006570 <_DrawBitmap+0xe04>
 80062ca:	468b      	mov	fp, r1
 80062cc:	460c      	mov	r4, r1
 80062ce:	e665      	b.n	8005f9c <_DrawBitmap+0x830>
 80062d0:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 80062d4:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80062d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80062da:	4790      	blx	r2
 80062dc:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 80062de:	2000      	movs	r0, #0
 80062e0:	f837 3b02 	ldrh.w	r3, [r7], #2
 80062e4:	1c41      	adds	r1, r0, #1
 80062e6:	7053      	strb	r3, [r2, #1]
 80062e8:	0a18      	lsrs	r0, r3, #8
 80062ea:	1c93      	adds	r3, r2, #2
 80062ec:	29fa      	cmp	r1, #250	; 0xfa
 80062ee:	7010      	strb	r0, [r2, #0]
 80062f0:	f000 8172 	beq.w	80065d8 <_DrawBitmap+0xe6c>
 80062f4:	f104 0c01 	add.w	ip, r4, #1
 80062f8:	1c48      	adds	r0, r1, #1
 80062fa:	45dc      	cmp	ip, fp
 80062fc:	f103 0202 	add.w	r2, r3, #2
 8006300:	f10c 0401 	add.w	r4, ip, #1
 8006304:	d0de      	beq.n	80062c4 <_DrawBitmap+0xb58>
 8006306:	f837 1b02 	ldrh.w	r1, [r7], #2
 800630a:	28fa      	cmp	r0, #250	; 0xfa
 800630c:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8006310:	f883 e000 	strb.w	lr, [r3]
 8006314:	7059      	strb	r1, [r3, #1]
 8006316:	d1e3      	bne.n	80062e0 <_DrawBitmap+0xb74>
 8006318:	e7da      	b.n	80062d0 <_DrawBitmap+0xb64>
 800631a:	9f04      	ldr	r7, [sp, #16]
 800631c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800631e:	9700      	str	r7, [sp, #0]
 8006320:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 8006324:	9a04      	ldr	r2, [sp, #16]
 8006326:	f8cd c00c 	str.w	ip, [sp, #12]
 800632a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800632e:	4628      	mov	r0, r5
 8006330:	47b8      	blx	r7
 8006332:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006336:	6eef      	ldr	r7, [r5, #108]	; 0x6c
 8006338:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800633a:	f01b 0f01 	tst.w	fp, #1
 800633e:	4661      	mov	r1, ip
 8006340:	d029      	beq.n	8006396 <_DrawBitmap+0xc2a>
 8006342:	f837 2b02 	ldrh.w	r2, [r7], #2
 8006346:	0a11      	lsrs	r1, r2, #8
 8006348:	7019      	strb	r1, [r3, #0]
 800634a:	f04f 0c01 	mov.w	ip, #1
 800634e:	4621      	mov	r1, r4
 8006350:	705a      	strb	r2, [r3, #1]
 8006352:	1c48      	adds	r0, r1, #1
 8006354:	3302      	adds	r3, #2
 8006356:	45dc      	cmp	ip, fp
 8006358:	f103 0202 	add.w	r2, r3, #2
 800635c:	f10c 0401 	add.w	r4, ip, #1
 8006360:	d120      	bne.n	80063a4 <_DrawBitmap+0xc38>
 8006362:	2900      	cmp	r1, #0
 8006364:	f040 80f1 	bne.w	800654a <_DrawBitmap+0xdde>
 8006368:	468b      	mov	fp, r1
 800636a:	460c      	mov	r4, r1
 800636c:	e58f      	b.n	8005e8e <_DrawBitmap+0x722>
 800636e:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8006372:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8006374:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006378:	4790      	blx	r2
 800637a:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800637c:	2000      	movs	r0, #0
 800637e:	f837 3b02 	ldrh.w	r3, [r7], #2
 8006382:	1c41      	adds	r1, r0, #1
 8006384:	7053      	strb	r3, [r2, #1]
 8006386:	0a18      	lsrs	r0, r3, #8
 8006388:	1c93      	adds	r3, r2, #2
 800638a:	29fa      	cmp	r1, #250	; 0xfa
 800638c:	7010      	strb	r0, [r2, #0]
 800638e:	f000 812c 	beq.w	80065ea <_DrawBitmap+0xe7e>
 8006392:	f104 0c01 	add.w	ip, r4, #1
 8006396:	1c48      	adds	r0, r1, #1
 8006398:	45dc      	cmp	ip, fp
 800639a:	f103 0202 	add.w	r2, r3, #2
 800639e:	f10c 0401 	add.w	r4, ip, #1
 80063a2:	d0de      	beq.n	8006362 <_DrawBitmap+0xbf6>
 80063a4:	f837 1b02 	ldrh.w	r1, [r7], #2
 80063a8:	28fa      	cmp	r0, #250	; 0xfa
 80063aa:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 80063ae:	f883 e000 	strb.w	lr, [r3]
 80063b2:	7059      	strb	r1, [r3, #1]
 80063b4:	d1e3      	bne.n	800637e <_DrawBitmap+0xc12>
 80063b6:	e7da      	b.n	800636e <_DrawBitmap+0xc02>
 80063b8:	9804      	ldr	r0, [sp, #16]
 80063ba:	9908      	ldr	r1, [sp, #32]
 80063bc:	9000      	str	r0, [sp, #0]
 80063be:	1e63      	subs	r3, r4, #1
 80063c0:	9a04      	ldr	r2, [sp, #16]
 80063c2:	9603      	str	r6, [sp, #12]
 80063c4:	4658      	mov	r0, fp
 80063c6:	f8db 60a8 	ldr.w	r6, [fp, #168]	; 0xa8
 80063ca:	47b0      	blx	r6
 80063cc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80063d0:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
 80063d4:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
 80063d8:	f018 0f01 	tst.w	r8, #1
 80063dc:	4661      	mov	r1, ip
 80063de:	f000 80ae 	beq.w	800653e <_DrawBitmap+0xdd2>
 80063e2:	f832 1b02 	ldrh.w	r1, [r2], #2
 80063e6:	0a08      	lsrs	r0, r1, #8
 80063e8:	7059      	strb	r1, [r3, #1]
 80063ea:	7018      	strb	r0, [r3, #0]
 80063ec:	4629      	mov	r1, r5
 80063ee:	3302      	adds	r3, #2
 80063f0:	f04f 0601 	mov.w	r6, #1
 80063f4:	4615      	mov	r5, r2
 80063f6:	1c48      	adds	r0, r1, #1
 80063f8:	4546      	cmp	r6, r8
 80063fa:	f103 0202 	add.w	r2, r3, #2
 80063fe:	f106 0601 	add.w	r6, r6, #1
 8006402:	d01a      	beq.n	800643a <_DrawBitmap+0xcce>
 8006404:	f835 1b02 	ldrh.w	r1, [r5], #2
 8006408:	28fa      	cmp	r0, #250	; 0xfa
 800640a:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 800640e:	f883 e000 	strb.w	lr, [r3]
 8006412:	7059      	strb	r1, [r3, #1]
 8006414:	f000 80d5 	beq.w	80065c2 <_DrawBitmap+0xe56>
 8006418:	f835 3b02 	ldrh.w	r3, [r5], #2
 800641c:	1c41      	adds	r1, r0, #1
 800641e:	7053      	strb	r3, [r2, #1]
 8006420:	0a18      	lsrs	r0, r3, #8
 8006422:	1c93      	adds	r3, r2, #2
 8006424:	29fa      	cmp	r1, #250	; 0xfa
 8006426:	7010      	strb	r0, [r2, #0]
 8006428:	d053      	beq.n	80064d2 <_DrawBitmap+0xd66>
 800642a:	3601      	adds	r6, #1
 800642c:	1c48      	adds	r0, r1, #1
 800642e:	4546      	cmp	r6, r8
 8006430:	f103 0202 	add.w	r2, r3, #2
 8006434:	f106 0601 	add.w	r6, r6, #1
 8006438:	d1e4      	bne.n	8006404 <_DrawBitmap+0xc98>
 800643a:	2900      	cmp	r1, #0
 800643c:	f040 808e 	bne.w	800655c <_DrawBitmap+0xdf0>
 8006440:	4688      	mov	r8, r1
 8006442:	460d      	mov	r5, r1
 8006444:	e4b7      	b.n	8005db6 <_DrawBitmap+0x64a>
 8006446:	9a04      	ldr	r2, [sp, #16]
 8006448:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800644a:	9200      	str	r2, [sp, #0]
 800644c:	f8dc 70a8 	ldr.w	r7, [ip, #168]	; 0xa8
 8006450:	f8cd c00c 	str.w	ip, [sp, #12]
 8006454:	4660      	mov	r0, ip
 8006456:	f109 33ff 	add.w	r3, r9, #4294967295
 800645a:	47b8      	blx	r7
 800645c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006460:	f01a 0f01 	tst.w	sl, #1
 8006464:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8006468:	f8dc 3068 	ldr.w	r3, [ip, #104]	; 0x68
 800646c:	4629      	mov	r1, r5
 800646e:	d069      	beq.n	8006544 <_DrawBitmap+0xdd8>
 8006470:	f837 0b02 	ldrh.w	r0, [r7], #2
 8006474:	0a01      	lsrs	r1, r0, #8
 8006476:	7019      	strb	r1, [r3, #0]
 8006478:	7058      	strb	r0, [r3, #1]
 800647a:	4621      	mov	r1, r4
 800647c:	3302      	adds	r3, #2
 800647e:	2401      	movs	r4, #1
 8006480:	4665      	mov	r5, ip
 8006482:	1c48      	adds	r0, r1, #1
 8006484:	4554      	cmp	r4, sl
 8006486:	f103 0202 	add.w	r2, r3, #2
 800648a:	f104 0401 	add.w	r4, r4, #1
 800648e:	d01a      	beq.n	80064c6 <_DrawBitmap+0xd5a>
 8006490:	f837 1b02 	ldrh.w	r1, [r7], #2
 8006494:	28fa      	cmp	r0, #250	; 0xfa
 8006496:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 800649a:	f883 e000 	strb.w	lr, [r3]
 800649e:	7059      	strb	r1, [r3, #1]
 80064a0:	f000 80ac 	beq.w	80065fc <_DrawBitmap+0xe90>
 80064a4:	f837 3b02 	ldrh.w	r3, [r7], #2
 80064a8:	1c41      	adds	r1, r0, #1
 80064aa:	7053      	strb	r3, [r2, #1]
 80064ac:	0a18      	lsrs	r0, r3, #8
 80064ae:	1c93      	adds	r3, r2, #2
 80064b0:	29fa      	cmp	r1, #250	; 0xfa
 80064b2:	7010      	strb	r0, [r2, #0]
 80064b4:	d019      	beq.n	80064ea <_DrawBitmap+0xd7e>
 80064b6:	3401      	adds	r4, #1
 80064b8:	1c48      	adds	r0, r1, #1
 80064ba:	4554      	cmp	r4, sl
 80064bc:	f103 0202 	add.w	r2, r3, #2
 80064c0:	f104 0401 	add.w	r4, r4, #1
 80064c4:	d1e4      	bne.n	8006490 <_DrawBitmap+0xd24>
 80064c6:	46ac      	mov	ip, r5
 80064c8:	2900      	cmp	r1, #0
 80064ca:	d15a      	bne.n	8006582 <_DrawBitmap+0xe16>
 80064cc:	468a      	mov	sl, r1
 80064ce:	460c      	mov	r4, r1
 80064d0:	e66a      	b.n	80061a8 <_DrawBitmap+0xa3c>
 80064d2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80064d6:	f8db 2118 	ldr.w	r2, [fp, #280]	; 0x118
 80064da:	f8db 0068 	ldr.w	r0, [fp, #104]	; 0x68
 80064de:	4790      	blx	r2
 80064e0:	3601      	adds	r6, #1
 80064e2:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
 80064e6:	2100      	movs	r1, #0
 80064e8:	e7a0      	b.n	800642c <_DrawBitmap+0xcc0>
 80064ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80064ee:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 80064f2:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80064f4:	4790      	blx	r2
 80064f6:	3401      	adds	r4, #1
 80064f8:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80064fa:	2100      	movs	r1, #0
 80064fc:	e7dc      	b.n	80064b8 <_DrawBitmap+0xd4c>
 80064fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006502:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8006506:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8006508:	4790      	blx	r2
 800650a:	3701      	adds	r7, #1
 800650c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800650e:	2100      	movs	r1, #0
 8006510:	e47f      	b.n	8005e12 <_DrawBitmap+0x6a6>
 8006512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006514:	f894 9001 	ldrb.w	r9, [r4, #1]
 8006518:	46da      	mov	sl, fp
 800651a:	3401      	adds	r4, #1
 800651c:	f1b3 0b01 	subs.w	fp, r3, #1
 8006520:	f47f aa68 	bne.w	80059f4 <_DrawBitmap+0x288>
 8006524:	f7ff b97a 	b.w	800581c <_DrawBitmap+0xb0>
 8006528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800652a:	f894 9001 	ldrb.w	r9, [r4, #1]
 800652e:	46da      	mov	sl, fp
 8006530:	3401      	adds	r4, #1
 8006532:	f1b3 0b01 	subs.w	fp, r3, #1
 8006536:	f47f ab0f 	bne.w	8005b58 <_DrawBitmap+0x3ec>
 800653a:	f7ff b96f 	b.w	800581c <_DrawBitmap+0xb0>
 800653e:	4615      	mov	r5, r2
 8006540:	4666      	mov	r6, ip
 8006542:	e758      	b.n	80063f6 <_DrawBitmap+0xc8a>
 8006544:	462c      	mov	r4, r5
 8006546:	4665      	mov	r5, ip
 8006548:	e79b      	b.n	8006482 <_DrawBitmap+0xd16>
 800654a:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 800654e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8006550:	0049      	lsls	r1, r1, #1
 8006552:	f04f 0b00 	mov.w	fp, #0
 8006556:	4798      	blx	r3
 8006558:	465c      	mov	r4, fp
 800655a:	e498      	b.n	8005e8e <_DrawBitmap+0x722>
 800655c:	f8db 3118 	ldr.w	r3, [fp, #280]	; 0x118
 8006560:	f8db 0068 	ldr.w	r0, [fp, #104]	; 0x68
 8006564:	0049      	lsls	r1, r1, #1
 8006566:	f04f 0800 	mov.w	r8, #0
 800656a:	4798      	blx	r3
 800656c:	4645      	mov	r5, r8
 800656e:	e422      	b.n	8005db6 <_DrawBitmap+0x64a>
 8006570:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8006574:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8006576:	0049      	lsls	r1, r1, #1
 8006578:	f04f 0b00 	mov.w	fp, #0
 800657c:	4798      	blx	r3
 800657e:	465c      	mov	r4, fp
 8006580:	e50c      	b.n	8005f9c <_DrawBitmap+0x830>
 8006582:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8006586:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8006588:	9503      	str	r5, [sp, #12]
 800658a:	0049      	lsls	r1, r1, #1
 800658c:	f04f 0a00 	mov.w	sl, #0
 8006590:	4798      	blx	r3
 8006592:	4654      	mov	r4, sl
 8006594:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006598:	e606      	b.n	80061a8 <_DrawBitmap+0xa3c>
 800659a:	f834 6b02 	ldrh.w	r6, [r4], #2
 800659e:	0a31      	lsrs	r1, r6, #8
 80065a0:	7019      	strb	r1, [r3, #0]
 80065a2:	2101      	movs	r1, #1
 80065a4:	705e      	strb	r6, [r3, #1]
 80065a6:	4688      	mov	r8, r1
 80065a8:	3302      	adds	r3, #2
 80065aa:	4666      	mov	r6, ip
 80065ac:	e546      	b.n	800603c <_DrawBitmap+0x8d0>
 80065ae:	f834 6b02 	ldrh.w	r6, [r4], #2
 80065b2:	0a31      	lsrs	r1, r6, #8
 80065b4:	7019      	strb	r1, [r3, #0]
 80065b6:	2101      	movs	r1, #1
 80065b8:	705e      	strb	r6, [r3, #1]
 80065ba:	4688      	mov	r8, r1
 80065bc:	3302      	adds	r3, #2
 80065be:	4666      	mov	r6, ip
 80065c0:	e4b2      	b.n	8005f28 <_DrawBitmap+0x7bc>
 80065c2:	f8db 2118 	ldr.w	r2, [fp, #280]	; 0x118
 80065c6:	f8db 0068 	ldr.w	r0, [fp, #104]	; 0x68
 80065ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80065ce:	4790      	blx	r2
 80065d0:	f8db 2068 	ldr.w	r2, [fp, #104]	; 0x68
 80065d4:	2000      	movs	r0, #0
 80065d6:	e71f      	b.n	8006418 <_DrawBitmap+0xcac>
 80065d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80065dc:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 80065e0:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80065e2:	4790      	blx	r2
 80065e4:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80065e6:	2100      	movs	r1, #0
 80065e8:	e684      	b.n	80062f4 <_DrawBitmap+0xb88>
 80065ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80065ee:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 80065f2:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80065f4:	4790      	blx	r2
 80065f6:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80065f8:	2100      	movs	r1, #0
 80065fa:	e6ca      	b.n	8006392 <_DrawBitmap+0xc26>
 80065fc:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8006600:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8006602:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006606:	4790      	blx	r2
 8006608:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800660a:	2000      	movs	r0, #0
 800660c:	e74a      	b.n	80064a4 <_DrawBitmap+0xd38>
 800660e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8006610:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8006614:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006618:	4798      	blx	r3
 800661a:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800661c:	2000      	movs	r0, #0
 800661e:	e408      	b.n	8005e32 <_DrawBitmap+0x6c6>
 8006620:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006624:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8006628:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800662a:	4790      	blx	r2
 800662c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800662e:	2100      	movs	r1, #0
 8006630:	e502      	b.n	8006038 <_DrawBitmap+0x8cc>
 8006632:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006636:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 800663a:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800663c:	4790      	blx	r2
 800663e:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8006640:	2100      	movs	r1, #0
 8006642:	e46f      	b.n	8005f24 <_DrawBitmap+0x7b8>
 8006644:	f894 9001 	ldrb.w	r9, [r4, #1]
 8006648:	f04f 0a00 	mov.w	sl, #0
 800664c:	3401      	adds	r4, #1
 800664e:	f7ff b9f3 	b.w	8005a38 <_DrawBitmap+0x2cc>
 8006652:	f894 9001 	ldrb.w	r9, [r4, #1]
 8006656:	f04f 0a00 	mov.w	sl, #0
 800665a:	3401      	adds	r4, #1
 800665c:	f7ff ba9e 	b.w	8005b9c <_DrawBitmap+0x430>
 8006660:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006662:	9a04      	ldr	r2, [sp, #16]
 8006664:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
 8006668:	980c      	ldr	r0, [sp, #48]	; 0x30
 800666a:	4798      	blx	r3
 800666c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800666e:	f8d5 70f0 	ldr.w	r7, [r5, #240]	; 0xf0
 8006672:	9a04      	ldr	r2, [sp, #16]
 8006674:	ea80 0301 	eor.w	r3, r0, r1
 8006678:	990e      	ldr	r1, [sp, #56]	; 0x38
 800667a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800667c:	47b8      	blx	r7
 800667e:	e505      	b.n	800608c <_DrawBitmap+0x920>
 8006680:	3401      	adds	r4, #1
 8006682:	2700      	movs	r7, #0
 8006684:	e50a      	b.n	800609c <_DrawBitmap+0x930>
 8006686:	3401      	adds	r4, #1
 8006688:	2600      	movs	r6, #0
 800668a:	f7ff bb11 	b.w	8005cb0 <_DrawBitmap+0x544>
 800668e:	4641      	mov	r1, r8
 8006690:	9a04      	ldr	r2, [sp, #16]
 8006692:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
 8006696:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006698:	4798      	blx	r3
 800669a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800669c:	f8d5 60f0 	ldr.w	r6, [r5, #240]	; 0xf0
 80066a0:	ea80 0302 	eor.w	r3, r0, r2
 80066a4:	4641      	mov	r1, r8
 80066a6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80066a8:	9a04      	ldr	r2, [sp, #16]
 80066aa:	3701      	adds	r7, #1
 80066ac:	47b0      	blx	r6
 80066ae:	2f08      	cmp	r7, #8
 80066b0:	f108 0801 	add.w	r8, r8, #1
 80066b4:	f47f ad04 	bne.w	80060c0 <_DrawBitmap+0x954>
 80066b8:	3401      	adds	r4, #1
 80066ba:	2700      	movs	r7, #0
 80066bc:	e500      	b.n	80060c0 <_DrawBitmap+0x954>
 80066be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80066c2:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 80066c6:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80066c8:	4790      	blx	r2
 80066ca:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80066cc:	2100      	movs	r1, #0
 80066ce:	e5a9      	b.n	8006224 <_DrawBitmap+0xab8>

080066d0 <GUIDRV_FlexColor_SetMode16bppC0B8>:
 80066d0:	b510      	push	{r4, lr}
 80066d2:	4604      	mov	r4, r0
 80066d4:	f000 fb68 	bl	8006da8 <GUIDRV_FlexColor__InitOnce>
 80066d8:	68a4      	ldr	r4, [r4, #8]
 80066da:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 80066de:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80066e2:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc
 80066e6:	f245 706d 	movw	r0, #22381	; 0x576d
 80066ea:	f245 316d 	movw	r1, #21357	; 0x536d
 80066ee:	f646 42e9 	movw	r2, #27881	; 0x6ce9
 80066f2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80066f6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80066fa:	f6c0 0200 	movt	r2, #2048	; 0x800
 80066fe:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
 8006702:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
 8006706:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
 800670a:	f646 4051 	movw	r0, #27729	; 0x6c51
 800670e:	f245 3145 	movw	r1, #21317	; 0x5345
 8006712:	f245 3251 	movw	r2, #21329	; 0x5351
 8006716:	f6c0 0000 	movt	r0, #2048	; 0x800
 800671a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800671e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8006722:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
 8006726:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
 800672a:	4620      	mov	r0, r4
 800672c:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 8006730:	2108      	movs	r1, #8
 8006732:	4798      	blx	r3
 8006734:	f64f 1028 	movw	r0, #63784	; 0xf928
 8006738:	2310      	movs	r3, #16
 800673a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800673e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006740:	6460      	str	r0, [r4, #68]	; 0x44
 8006742:	bd10      	pop	{r4, pc}

08006744 <_Log2PhysX_X0Y0S0>:
 8006744:	4608      	mov	r0, r1
 8006746:	4770      	bx	lr

08006748 <_Log2PhysX_X1Y0S0>:
 8006748:	6800      	ldr	r0, [r0, #0]
 800674a:	1a41      	subs	r1, r0, r1
 800674c:	1e48      	subs	r0, r1, #1
 800674e:	4770      	bx	lr

08006750 <_Log2PhysX_X0Y1S0>:
 8006750:	4608      	mov	r0, r1
 8006752:	4770      	bx	lr

08006754 <_Log2PhysX_X1Y1S0>:
 8006754:	6800      	ldr	r0, [r0, #0]
 8006756:	1a41      	subs	r1, r0, r1
 8006758:	1e48      	subs	r0, r1, #1
 800675a:	4770      	bx	lr

0800675c <_Log2PhysX_X0Y0S1>:
 800675c:	4610      	mov	r0, r2
 800675e:	4770      	bx	lr

08006760 <_Log2PhysX_X1Y0S1>:
 8006760:	6840      	ldr	r0, [r0, #4]
 8006762:	1a81      	subs	r1, r0, r2
 8006764:	1e48      	subs	r0, r1, #1
 8006766:	4770      	bx	lr

08006768 <_Log2PhysX_X0Y1S1>:
 8006768:	4610      	mov	r0, r2
 800676a:	4770      	bx	lr

0800676c <_Log2PhysX_X1Y1S1>:
 800676c:	6840      	ldr	r0, [r0, #4]
 800676e:	1a81      	subs	r1, r0, r2
 8006770:	1e48      	subs	r0, r1, #1
 8006772:	4770      	bx	lr

08006774 <_Log2PhysY_X0Y0S0>:
 8006774:	4610      	mov	r0, r2
 8006776:	4770      	bx	lr

08006778 <_Log2PhysY_X1Y0S0>:
 8006778:	4610      	mov	r0, r2
 800677a:	4770      	bx	lr

0800677c <_Log2PhysY_X0Y1S0>:
 800677c:	6840      	ldr	r0, [r0, #4]
 800677e:	1a81      	subs	r1, r0, r2
 8006780:	1e48      	subs	r0, r1, #1
 8006782:	4770      	bx	lr

08006784 <_Log2PhysY_X1Y1S0>:
 8006784:	6840      	ldr	r0, [r0, #4]
 8006786:	1a81      	subs	r1, r0, r2
 8006788:	1e48      	subs	r0, r1, #1
 800678a:	4770      	bx	lr

0800678c <_Log2PhysY_X0Y0S1>:
 800678c:	4608      	mov	r0, r1
 800678e:	4770      	bx	lr

08006790 <_Log2PhysY_X1Y0S1>:
 8006790:	4608      	mov	r0, r1
 8006792:	4770      	bx	lr

08006794 <_Log2PhysY_X0Y1S1>:
 8006794:	6800      	ldr	r0, [r0, #0]
 8006796:	1a41      	subs	r1, r0, r1
 8006798:	1e48      	subs	r0, r1, #1
 800679a:	4770      	bx	lr

0800679c <_Log2PhysY_X1Y1S1>:
 800679c:	6800      	ldr	r0, [r0, #0]
 800679e:	1a41      	subs	r1, r0, r1
 80067a0:	1e48      	subs	r0, r1, #1
 80067a2:	4770      	bx	lr

080067a4 <_SetPixelIndex>:
 80067a4:	b510      	push	{r4, lr}
 80067a6:	6884      	ldr	r4, [r0, #8]
 80067a8:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 80067ac:	47a0      	blx	r4
 80067ae:	bd10      	pop	{r4, pc}

080067b0 <_GetPixelIndex>:
 80067b0:	b508      	push	{r3, lr}
 80067b2:	6883      	ldr	r3, [r0, #8]
 80067b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80067b8:	4798      	blx	r3
 80067ba:	bd08      	pop	{r3, pc}

080067bc <_XorPixel>:
 80067bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067be:	6885      	ldr	r5, [r0, #8]
 80067c0:	b083      	sub	sp, #12
 80067c2:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
 80067c6:	4604      	mov	r4, r0
 80067c8:	460f      	mov	r7, r1
 80067ca:	4616      	mov	r6, r2
 80067cc:	4798      	blx	r3
 80067ce:	9001      	str	r0, [sp, #4]
 80067d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80067d4:	68a0      	ldr	r0, [r4, #8]
 80067d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80067d8:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
 80067dc:	4639      	mov	r1, r7
 80067de:	4620      	mov	r0, r4
 80067e0:	4632      	mov	r2, r6
 80067e2:	ea8e 0303 	eor.w	r3, lr, r3
 80067e6:	47a8      	blx	r5
 80067e8:	b003      	add	sp, #12
 80067ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067ec <_DrawHLine>:
 80067ec:	b510      	push	{r4, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	6884      	ldr	r4, [r0, #8]
 80067f2:	9200      	str	r2, [sp, #0]
 80067f4:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 80067f8:	47a0      	blx	r4
 80067fa:	b002      	add	sp, #8
 80067fc:	bd10      	pop	{r4, pc}
 80067fe:	bf00      	nop

08006800 <_DrawVLine>:
 8006800:	b510      	push	{r4, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	6884      	ldr	r4, [r0, #8]
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 800680c:	460b      	mov	r3, r1
 800680e:	47a0      	blx	r4
 8006810:	b002      	add	sp, #8
 8006812:	bd10      	pop	{r4, pc}

08006814 <_FillRect>:
 8006814:	b530      	push	{r4, r5, lr}
 8006816:	b083      	sub	sp, #12
 8006818:	6885      	ldr	r5, [r0, #8]
 800681a:	9c06      	ldr	r4, [sp, #24]
 800681c:	9400      	str	r4, [sp, #0]
 800681e:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8006822:	47a0      	blx	r4
 8006824:	b003      	add	sp, #12
 8006826:	bd30      	pop	{r4, r5, pc}

08006828 <_DrawBitmap>:
 8006828:	b530      	push	{r4, r5, lr}
 800682a:	b087      	sub	sp, #28
 800682c:	6885      	ldr	r5, [r0, #8]
 800682e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006830:	9400      	str	r4, [sp, #0]
 8006832:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006834:	9401      	str	r4, [sp, #4]
 8006836:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006838:	9402      	str	r4, [sp, #8]
 800683a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800683c:	9403      	str	r4, [sp, #12]
 800683e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006840:	9404      	str	r4, [sp, #16]
 8006842:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8006844:	9405      	str	r4, [sp, #20]
 8006846:	f8d5 40e4 	ldr.w	r4, [r5, #228]	; 0xe4
 800684a:	47a0      	blx	r4
 800684c:	b007      	add	sp, #28
 800684e:	bd30      	pop	{r4, r5, pc}

08006850 <_GetDevFunc_SetRect>:
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop

08006854 <_GetDevFunc_SetRectOutside>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	6885      	ldr	r5, [r0, #8]
 800685a:	9c07      	ldr	r4, [sp, #28]
 800685c:	b124      	cbz	r4, 8006868 <_GetDevFunc_SetRectOutside+0x14>
 800685e:	4c0d      	ldr	r4, [pc, #52]	; (8006894 <_GetDevFunc_SetRectOutside+0x40>)
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	b148      	cbz	r0, 8006878 <_GetDevFunc_SetRectOutside+0x24>
 8006864:	b002      	add	sp, #8
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <_GetDevFunc_SetRectOutside+0x40>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	2a00      	cmp	r2, #0
 800686e:	d0f9      	beq.n	8006864 <_GetDevFunc_SetRectOutside+0x10>
 8006870:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
 8006874:	601c      	str	r4, [r3, #0]
 8006876:	e7f5      	b.n	8006864 <_GetDevFunc_SetRectOutside+0x10>
 8006878:	9e06      	ldr	r6, [sp, #24]
 800687a:	9600      	str	r6, [sp, #0]
 800687c:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8006880:	4628      	mov	r0, r5
 8006882:	47b0      	blx	r6
 8006884:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8006888:	4b03      	ldr	r3, [pc, #12]	; (8006898 <_GetDevFunc_SetRectOutside+0x44>)
 800688a:	6021      	str	r1, [r4, #0]
 800688c:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 8006890:	e7e8      	b.n	8006864 <_GetDevFunc_SetRectOutside+0x10>
 8006892:	bf00      	nop
 8006894:	1ffe89a0 	.word	0x1ffe89a0
 8006898:	08006851 	.word	0x08006851

0800689c <_ReadPixelCust_16bpp>:
 800689c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800689e:	b508      	push	{r3, lr}
 80068a0:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 80068a4:	6990      	ldr	r0, [r2, #24]
 80068a6:	4798      	blx	r3
 80068a8:	bd08      	pop	{r3, pc}
 80068aa:	bf00      	nop

080068ac <_ReadPixelCust_18bpp>:
 80068ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80068ae:	b508      	push	{r3, lr}
 80068b0:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80068b4:	6990      	ldr	r0, [r2, #24]
 80068b6:	4798      	blx	r3
 80068b8:	bd08      	pop	{r3, pc}
 80068ba:	bf00      	nop

080068bc <_ReadRectCust_16bpp>:
 80068bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068c0:	b083      	sub	sp, #12
 80068c2:	6884      	ldr	r4, [r0, #8]
 80068c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80068c6:	9500      	str	r5, [sp, #0]
 80068c8:	4620      	mov	r0, r4
 80068ca:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 80068ce:	4691      	mov	r9, r2
 80068d0:	4698      	mov	r8, r3
 80068d2:	460f      	mov	r7, r1
 80068d4:	47b0      	blx	r6
 80068d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80068d8:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80068dc:	6990      	ldr	r0, [r2, #24]
 80068de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068e0:	ebc9 0505 	rsb	r5, r9, r5
 80068e4:	ebc7 0708 	rsb	r7, r7, r8
 80068e8:	1c6a      	adds	r2, r5, #1
 80068ea:	fb07 2202 	mla	r2, r7, r2, r2
 80068ee:	4798      	blx	r3
 80068f0:	b003      	add	sp, #12
 80068f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068f6:	bf00      	nop

080068f8 <_ReadRectCust_18bpp>:
 80068f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068fc:	b083      	sub	sp, #12
 80068fe:	6884      	ldr	r4, [r0, #8]
 8006900:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006902:	9500      	str	r5, [sp, #0]
 8006904:	4620      	mov	r0, r4
 8006906:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800690a:	4691      	mov	r9, r2
 800690c:	4698      	mov	r8, r3
 800690e:	460f      	mov	r7, r1
 8006910:	47b0      	blx	r6
 8006912:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006914:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006918:	6990      	ldr	r0, [r2, #24]
 800691a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800691c:	ebc9 0505 	rsb	r5, r9, r5
 8006920:	ebc7 0708 	rsb	r7, r7, r8
 8006924:	1c6a      	adds	r2, r5, #1
 8006926:	fb07 2202 	mla	r2, r7, r2, r2
 800692a:	4798      	blx	r3
 800692c:	b003      	add	sp, #12
 800692e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006932:	bf00      	nop

08006934 <_GetDevFunc>:
 8006934:	3901      	subs	r1, #1
 8006936:	2917      	cmp	r1, #23
 8006938:	d80f      	bhi.n	800695a <_GetDevFunc+0x26>
 800693a:	e8df f001 	tbb	[pc, r1]
 800693e:	0e10      	.short	0x0e10
 8006940:	0e0e0e0e 	.word	0x0e0e0e0e
 8006944:	150e0e0e 	.word	0x150e0e0e
 8006948:	0e1b1917 	.word	0x0e1b1917
 800694c:	0e0e0e0e 	.word	0x0e0e0e0e
 8006950:	200e0e0e 	.word	0x200e0e0e
 8006954:	0c22      	.short	0x0c22
 8006956:	480d      	ldr	r0, [pc, #52]	; (800698c <_GetDevFunc+0x58>)
 8006958:	4770      	bx	lr
 800695a:	2000      	movs	r0, #0
 800695c:	4770      	bx	lr
 800695e:	6803      	ldr	r3, [r0, #0]
 8006960:	6898      	ldr	r0, [r3, #8]
 8006962:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8006966:	4770      	bx	lr
 8006968:	4809      	ldr	r0, [pc, #36]	; (8006990 <_GetDevFunc+0x5c>)
 800696a:	4770      	bx	lr
 800696c:	4809      	ldr	r0, [pc, #36]	; (8006994 <_GetDevFunc+0x60>)
 800696e:	4770      	bx	lr
 8006970:	4809      	ldr	r0, [pc, #36]	; (8006998 <_GetDevFunc+0x64>)
 8006972:	4770      	bx	lr
 8006974:	6802      	ldr	r2, [r0, #0]
 8006976:	6891      	ldr	r1, [r2, #8]
 8006978:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
 800697c:	4770      	bx	lr
 800697e:	4807      	ldr	r0, [pc, #28]	; (800699c <_GetDevFunc+0x68>)
 8006980:	4770      	bx	lr
 8006982:	6803      	ldr	r3, [r0, #0]
 8006984:	6898      	ldr	r0, [r3, #8]
 8006986:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 800698a:	4770      	bx	lr
 800698c:	08006855 	.word	0x08006855
 8006990:	08006a91 	.word	0x08006a91
 8006994:	08006c11 	.word	0x08006c11
 8006998:	08006b99 	.word	0x08006b99
 800699c:	08006ad1 	.word	0x08006ad1

080069a0 <_GetDevProp>:
 80069a0:	3901      	subs	r1, #1
 80069a2:	6880      	ldr	r0, [r0, #8]
 80069a4:	290d      	cmp	r1, #13
 80069a6:	d81f      	bhi.n	80069e8 <_GetDevProp+0x48>
 80069a8:	e8df f001 	tbb	[pc, r1]
 80069ac:	27252321 	.word	0x27252321
 80069b0:	291e1e1e 	.word	0x291e1e1e
 80069b4:	070c0c0e 	.word	0x070c0c0e
 80069b8:	1017      	.short	0x1017
 80069ba:	b120      	cbz	r0, 80069c6 <_GetDevProp+0x26>
 80069bc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80069be:	f012 0001 	ands.w	r0, r2, #1
 80069c2:	d000      	beq.n	80069c6 <_GetDevProp+0x26>
 80069c4:	2001      	movs	r0, #1
 80069c6:	4770      	bx	lr
 80069c8:	2000      	movs	r0, #0
 80069ca:	4770      	bx	lr
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d0fa      	beq.n	80069c6 <_GetDevProp+0x26>
 80069d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069d2:	f013 0004 	ands.w	r0, r3, #4
 80069d6:	d1f5      	bne.n	80069c4 <_GetDevProp+0x24>
 80069d8:	4770      	bx	lr
 80069da:	2800      	cmp	r0, #0
 80069dc:	d0f3      	beq.n	80069c6 <_GetDevProp+0x26>
 80069de:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80069e0:	f010 0002 	ands.w	r0, r0, #2
 80069e4:	d1ee      	bne.n	80069c4 <_GetDevProp+0x24>
 80069e6:	4770      	bx	lr
 80069e8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ec:	4770      	bx	lr
 80069ee:	6800      	ldr	r0, [r0, #0]
 80069f0:	4770      	bx	lr
 80069f2:	6840      	ldr	r0, [r0, #4]
 80069f4:	4770      	bx	lr
 80069f6:	6880      	ldr	r0, [r0, #8]
 80069f8:	4770      	bx	lr
 80069fa:	68c0      	ldr	r0, [r0, #12]
 80069fc:	4770      	bx	lr
 80069fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop

08006a04 <_GetDevData>:
 8006a04:	6883      	ldr	r3, [r0, #8]
 8006a06:	2901      	cmp	r1, #1
 8006a08:	bf0c      	ite	eq
 8006a0a:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 8006a0c:	2000      	movne	r0, #0
 8006a0e:	4770      	bx	lr

08006a10 <_GetRect>:
 8006a10:	6883      	ldr	r3, [r0, #8]
 8006a12:	e893 0005 	ldmia.w	r3, {r0, r2}
 8006a16:	2300      	movs	r3, #0
 8006a18:	3801      	subs	r0, #1
 8006a1a:	3a01      	subs	r2, #1
 8006a1c:	800b      	strh	r3, [r1, #0]
 8006a1e:	804b      	strh	r3, [r1, #2]
 8006a20:	8088      	strh	r0, [r1, #4]
 8006a22:	80ca      	strh	r2, [r1, #6]
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop

08006a28 <GUIDRV_FlexColor__SetLog2Phys>:
 8006a28:	b4f0      	push	{r4, r5, r6, r7}
 8006a2a:	f64f 0594 	movw	r5, #63636	; 0xf894
 8006a2e:	f6c0 0500 	movt	r5, #2048	; 0x800
 8006a32:	462e      	mov	r6, r5
 8006a34:	4607      	mov	r7, r0
 8006a36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006a38:	b090      	sub	sp, #64	; 0x40
 8006a3a:	466c      	mov	r4, sp
 8006a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a3e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006a42:	3520      	adds	r5, #32
 8006a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a4a:	ac08      	add	r4, sp, #32
 8006a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006a52:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8006a54:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8006a58:	eb0c 0586 	add.w	r5, ip, r6, lsl #2
 8006a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006a60:	f855 3c40 	ldr.w	r3, [r5, #-64]
 8006a64:	f855 0c20 	ldr.w	r0, [r5, #-32]
 8006a68:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a6c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 8006a70:	b010      	add	sp, #64	; 0x40
 8006a72:	bcf0      	pop	{r4, r5, r6, r7}
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop

08006a78 <_SetOrg>:
 8006a78:	b500      	push	{lr}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	e88d 0006 	stmia.w	sp, {r1, r2}
 8006a80:	6980      	ldr	r0, [r0, #24]
 8006a82:	2103      	movs	r1, #3
 8006a84:	466a      	mov	r2, sp
 8006a86:	f7fb f839 	bl	8001afc <LCD_X_DisplayDriver>
 8006a8a:	b003      	add	sp, #12
 8006a8c:	bd00      	pop	{pc}
 8006a8e:	bf00      	nop

08006a90 <_GetDevFunc_SetVSize>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	6884      	ldr	r4, [r0, #8]
 8006a94:	4605      	mov	r5, r0
 8006a96:	460f      	mov	r7, r1
 8006a98:	4616      	mov	r6, r2
 8006a9a:	b114      	cbz	r4, 8006aa2 <_GetDevFunc_SetVSize+0x12>
 8006a9c:	60a7      	str	r7, [r4, #8]
 8006a9e:	60e6      	str	r6, [r4, #12]
 8006aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aa2:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8006aa6:	f001 ff29 	bl	80088fc <GUI_ALLOC_GetFixedBlock>
 8006aaa:	4621      	mov	r1, r4
 8006aac:	60a8      	str	r0, [r5, #8]
 8006aae:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8006ab2:	f000 fa41 	bl	8006f38 <GUI__memset>
 8006ab6:	68ab      	ldr	r3, [r5, #8]
 8006ab8:	4904      	ldr	r1, [pc, #16]	; (8006acc <_GetDevFunc_SetVSize+0x3c>)
 8006aba:	641d      	str	r5, [r3, #64]	; 0x40
 8006abc:	2202      	movs	r2, #2
 8006abe:	2001      	movs	r0, #1
 8006ac0:	84da      	strh	r2, [r3, #38]	; 0x26
 8006ac2:	6218      	str	r0, [r3, #32]
 8006ac4:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 8006ac8:	68ac      	ldr	r4, [r5, #8]
 8006aca:	e7e7      	b.n	8006a9c <_GetDevFunc_SetVSize+0xc>
 8006acc:	08006a29 	.word	0x08006a29

08006ad0 <_SetDevFunc>:
 8006ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad2:	6884      	ldr	r4, [r0, #8]
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	460d      	mov	r5, r1
 8006ad8:	4617      	mov	r7, r2
 8006ada:	b304      	cbz	r4, 8006b1e <_SetDevFunc+0x4e>
 8006adc:	2d26      	cmp	r5, #38	; 0x26
 8006ade:	d011      	beq.n	8006b04 <_SetDevFunc+0x34>
 8006ae0:	2d27      	cmp	r5, #39	; 0x27
 8006ae2:	d000      	beq.n	8006ae6 <_SetDevFunc+0x16>
 8006ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ae6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ae8:	2b10      	cmp	r3, #16
 8006aea:	d037      	beq.n	8006b5c <_SetDevFunc+0x8c>
 8006aec:	2b12      	cmp	r3, #18
 8006aee:	d1f9      	bne.n	8006ae4 <_SetDevFunc+0x14>
 8006af0:	2f00      	cmp	r7, #0
 8006af2:	d03c      	beq.n	8006b6e <_SetDevFunc+0x9e>
 8006af4:	4a23      	ldr	r2, [pc, #140]	; (8006b84 <_SetDevFunc+0xb4>)
 8006af6:	f8c4 70e0 	str.w	r7, [r4, #224]	; 0xe0
 8006afa:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
 8006afe:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
 8006b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b04:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b06:	2910      	cmp	r1, #16
 8006b08:	d020      	beq.n	8006b4c <_SetDevFunc+0x7c>
 8006b0a:	2912      	cmp	r1, #18
 8006b0c:	d1ea      	bne.n	8006ae4 <_SetDevFunc+0x14>
 8006b0e:	4b1e      	ldr	r3, [pc, #120]	; (8006b88 <_SetDevFunc+0xb8>)
 8006b10:	f8c4 70d8 	str.w	r7, [r4, #216]	; 0xd8
 8006b14:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8006b18:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8006b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b1e:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8006b22:	f001 feeb 	bl	80088fc <GUI_ALLOC_GetFixedBlock>
 8006b26:	4621      	mov	r1, r4
 8006b28:	60b0      	str	r0, [r6, #8]
 8006b2a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8006b2e:	f000 fa03 	bl	8006f38 <GUI__memset>
 8006b32:	68b3      	ldr	r3, [r6, #8]
 8006b34:	4915      	ldr	r1, [pc, #84]	; (8006b8c <_SetDevFunc+0xbc>)
 8006b36:	641e      	str	r6, [r3, #64]	; 0x40
 8006b38:	2202      	movs	r2, #2
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	84da      	strh	r2, [r3, #38]	; 0x26
 8006b3e:	6218      	str	r0, [r3, #32]
 8006b40:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 8006b44:	68b4      	ldr	r4, [r6, #8]
 8006b46:	2c00      	cmp	r4, #0
 8006b48:	d1c8      	bne.n	8006adc <_SetDevFunc+0xc>
 8006b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b4c:	4a10      	ldr	r2, [pc, #64]	; (8006b90 <_SetDevFunc+0xc0>)
 8006b4e:	f8c4 70d4 	str.w	r7, [r4, #212]	; 0xd4
 8006b52:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
 8006b56:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8006b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b5c:	b167      	cbz	r7, 8006b78 <_SetDevFunc+0xa8>
 8006b5e:	480d      	ldr	r0, [pc, #52]	; (8006b94 <_SetDevFunc+0xc4>)
 8006b60:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
 8006b64:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 8006b68:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8006b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b6e:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
 8006b72:	f8c4 70d0 	str.w	r7, [r4, #208]	; 0xd0
 8006b76:	e7b5      	b.n	8006ae4 <_SetDevFunc+0x14>
 8006b78:	f8c4 70c8 	str.w	r7, [r4, #200]	; 0xc8
 8006b7c:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
 8006b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b82:	bf00      	nop
 8006b84:	080068f9 	.word	0x080068f9
 8006b88:	080068ad 	.word	0x080068ad
 8006b8c:	08006a29 	.word	0x08006a29
 8006b90:	0800689d 	.word	0x0800689d
 8006b94:	080068bd 	.word	0x080068bd

08006b98 <_GetDevFunc_Init>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	6884      	ldr	r4, [r0, #8]
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	b304      	cbz	r4, 8006be2 <_GetDevFunc_Init+0x4a>
 8006ba0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ba4:	f001 feaa 	bl	80088fc <GUI_ALLOC_GetFixedBlock>
 8006ba8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	66a0      	str	r0, [r4, #104]	; 0x68
 8006bae:	1dd0      	adds	r0, r2, #7
 8006bb0:	10c0      	asrs	r0, r0, #3
 8006bb2:	fb03 f000 	mul.w	r0, r3, r0
 8006bb6:	f001 fea1 	bl	80088fc <GUI_ALLOC_GetFixedBlock>
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	66e0      	str	r0, [r4, #108]	; 0x6c
 8006bc0:	69a8      	ldr	r0, [r5, #24]
 8006bc2:	f7fa ff9b 	bl	8001afc <LCD_X_DisplayDriver>
 8006bc6:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
 8006bca:	4605      	mov	r5, r0
 8006bcc:	4620      	mov	r0, r4
 8006bce:	4788      	blx	r1
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8006bd6:	4790      	blx	r2
 8006bd8:	2d00      	cmp	r5, #0
 8006bda:	bfd4      	ite	le
 8006bdc:	2000      	movle	r0, #0
 8006bde:	2001      	movgt	r0, #1
 8006be0:	bd38      	pop	{r3, r4, r5, pc}
 8006be2:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8006be6:	f001 fe89 	bl	80088fc <GUI_ALLOC_GetFixedBlock>
 8006bea:	4621      	mov	r1, r4
 8006bec:	60a8      	str	r0, [r5, #8]
 8006bee:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8006bf2:	f000 f9a1 	bl	8006f38 <GUI__memset>
 8006bf6:	68ab      	ldr	r3, [r5, #8]
 8006bf8:	4904      	ldr	r1, [pc, #16]	; (8006c0c <_GetDevFunc_Init+0x74>)
 8006bfa:	641d      	str	r5, [r3, #64]	; 0x40
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	2001      	movs	r0, #1
 8006c00:	84da      	strh	r2, [r3, #38]	; 0x26
 8006c02:	6218      	str	r0, [r3, #32]
 8006c04:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 8006c08:	68ac      	ldr	r4, [r5, #8]
 8006c0a:	e7c9      	b.n	8006ba0 <_GetDevFunc_Init+0x8>
 8006c0c:	08006a29 	.word	0x08006a29

08006c10 <_GetDevFunc_SetSize>:
 8006c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c12:	6884      	ldr	r4, [r0, #8]
 8006c14:	4605      	mov	r5, r0
 8006c16:	460f      	mov	r7, r1
 8006c18:	4616      	mov	r6, r2
 8006c1a:	b114      	cbz	r4, 8006c22 <_GetDevFunc_SetSize+0x12>
 8006c1c:	6027      	str	r7, [r4, #0]
 8006c1e:	6066      	str	r6, [r4, #4]
 8006c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c22:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8006c26:	f001 fe69 	bl	80088fc <GUI_ALLOC_GetFixedBlock>
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	60a8      	str	r0, [r5, #8]
 8006c2e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8006c32:	f000 f981 	bl	8006f38 <GUI__memset>
 8006c36:	68ab      	ldr	r3, [r5, #8]
 8006c38:	4904      	ldr	r1, [pc, #16]	; (8006c4c <_GetDevFunc_SetSize+0x3c>)
 8006c3a:	641d      	str	r5, [r3, #64]	; 0x40
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	2001      	movs	r0, #1
 8006c40:	84da      	strh	r2, [r3, #38]	; 0x26
 8006c42:	6218      	str	r0, [r3, #32]
 8006c44:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 8006c48:	68ac      	ldr	r4, [r5, #8]
 8006c4a:	e7e7      	b.n	8006c1c <_GetDevFunc_SetSize+0xc>
 8006c4c:	08006a29 	.word	0x08006a29

08006c50 <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 8006c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c54:	6884      	ldr	r4, [r0, #8]
 8006c56:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8006c58:	f000 0502 	and.w	r5, r0, #2
 8006c5c:	b2a8      	uxth	r0, r5
 8006c5e:	b082      	sub	sp, #8
 8006c60:	4688      	mov	r8, r1
 8006c62:	4617      	mov	r7, r2
 8006c64:	461d      	mov	r5, r3
 8006c66:	b338      	cbz	r0, 8006cb8 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x68>
 8006c68:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	47b0      	blx	r6
 8006c70:	4641      	mov	r1, r8
 8006c72:	4606      	mov	r6, r0
 8006c74:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8006c78:	463a      	mov	r2, r7
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	4798      	blx	r3
 8006c7e:	6921      	ldr	r1, [r4, #16]
 8006c80:	69a2      	ldr	r2, [r4, #24]
 8006c82:	42b1      	cmp	r1, r6
 8006c84:	4680      	mov	r8, r0
 8006c86:	bfd4      	ite	le
 8006c88:	2100      	movle	r1, #0
 8006c8a:	2101      	movgt	r1, #1
 8006c8c:	6960      	ldr	r0, [r4, #20]
 8006c8e:	42b2      	cmp	r2, r6
 8006c90:	bfac      	ite	ge
 8006c92:	460b      	movge	r3, r1
 8006c94:	f041 0301 	orrlt.w	r3, r1, #1
 8006c98:	4540      	cmp	r0, r8
 8006c9a:	bfd4      	ite	le
 8006c9c:	4619      	movle	r1, r3
 8006c9e:	f043 0101 	orrgt.w	r1, r3, #1
 8006ca2:	b9a9      	cbnz	r1, 8006cd0 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 8006ca4:	69e2      	ldr	r2, [r4, #28]
 8006ca6:	4542      	cmp	r2, r8
 8006ca8:	db12      	blt.n	8006cd0 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 8006caa:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8006cae:	4620      	mov	r0, r4
 8006cb0:	4631      	mov	r1, r6
 8006cb2:	4642      	mov	r2, r8
 8006cb4:	4798      	blx	r3
 8006cb6:	e003      	b.n	8006cc0 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x70>
 8006cb8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	4798      	blx	r3
 8006cc0:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	4790      	blx	r2
 8006cca:	b002      	add	sp, #8
 8006ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd0:	6867      	ldr	r7, [r4, #4]
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	1e78      	subs	r0, r7, #1
 8006cd6:	9000      	str	r0, [sp, #0]
 8006cd8:	2100      	movs	r1, #0
 8006cda:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8006cde:	4620      	mov	r0, r4
 8006ce0:	460a      	mov	r2, r1
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	47b8      	blx	r7
 8006ce6:	e7e0      	b.n	8006caa <GUIDRV_FlexColor__SetPixelIndexNoCache+0x5a>

08006ce8 <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 8006ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cea:	6884      	ldr	r4, [r0, #8]
 8006cec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006cee:	f003 0002 	and.w	r0, r3, #2
 8006cf2:	b285      	uxth	r5, r0
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	460f      	mov	r7, r1
 8006cf8:	4616      	mov	r6, r2
 8006cfa:	2d00      	cmp	r5, #0
 8006cfc:	d03b      	beq.n	8006d76 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x8e>
 8006cfe:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
 8006d02:	4620      	mov	r0, r4
 8006d04:	47a8      	blx	r5
 8006d06:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8006d0a:	4632      	mov	r2, r6
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	4639      	mov	r1, r7
 8006d10:	4620      	mov	r0, r4
 8006d12:	4798      	blx	r3
 8006d14:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8006d18:	4606      	mov	r6, r0
 8006d1a:	b11b      	cbz	r3, 8006d24 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x3c>
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	2101      	movs	r1, #1
 8006d20:	2200      	movs	r2, #0
 8006d22:	4798      	blx	r3
 8006d24:	6920      	ldr	r0, [r4, #16]
 8006d26:	69a2      	ldr	r2, [r4, #24]
 8006d28:	6961      	ldr	r1, [r4, #20]
 8006d2a:	42a8      	cmp	r0, r5
 8006d2c:	bfd4      	ite	le
 8006d2e:	2000      	movle	r0, #0
 8006d30:	2001      	movgt	r0, #1
 8006d32:	42aa      	cmp	r2, r5
 8006d34:	bfac      	ite	ge
 8006d36:	4603      	movge	r3, r0
 8006d38:	f040 0301 	orrlt.w	r3, r0, #1
 8006d3c:	42b1      	cmp	r1, r6
 8006d3e:	bfd4      	ite	le
 8006d40:	4618      	movle	r0, r3
 8006d42:	f043 0001 	orrgt.w	r0, r3, #1
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d121      	bne.n	8006d8e <GUIDRV_FlexColor__GetPixelIndexNoCache+0xa6>
 8006d4a:	69e2      	ldr	r2, [r4, #28]
 8006d4c:	42b2      	cmp	r2, r6
 8006d4e:	db1e      	blt.n	8006d8e <GUIDRV_FlexColor__GetPixelIndexNoCache+0xa6>
 8006d50:	4629      	mov	r1, r5
 8006d52:	4620      	mov	r0, r4
 8006d54:	4632      	mov	r2, r6
 8006d56:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 8006d5a:	47a8      	blx	r5
 8006d5c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8006d60:	4620      	mov	r0, r4
 8006d62:	4790      	blx	r2
 8006d64:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8006d68:	4605      	mov	r5, r0
 8006d6a:	b16b      	cbz	r3, 8006d88 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xa0>
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	2100      	movs	r1, #0
 8006d70:	2201      	movs	r2, #1
 8006d72:	4798      	blx	r3
 8006d74:	e008      	b.n	8006d88 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xa0>
 8006d76:	4620      	mov	r0, r4
 8006d78:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8006d7c:	4798      	blx	r3
 8006d7e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8006d82:	4620      	mov	r0, r4
 8006d84:	4788      	blx	r1
 8006d86:	4605      	mov	r5, r0
 8006d88:	4628      	mov	r0, r5
 8006d8a:	b003      	add	sp, #12
 8006d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d8e:	6867      	ldr	r7, [r4, #4]
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	1e79      	subs	r1, r7, #1
 8006d94:	9100      	str	r1, [sp, #0]
 8006d96:	2100      	movs	r1, #0
 8006d98:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	460a      	mov	r2, r1
 8006da0:	3b01      	subs	r3, #1
 8006da2:	47b8      	blx	r7
 8006da4:	e7d4      	b.n	8006d50 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x68>
 8006da6:	bf00      	nop

08006da8 <GUIDRV_FlexColor__InitOnce>:
 8006da8:	b538      	push	{r3, r4, r5, lr}
 8006daa:	6885      	ldr	r5, [r0, #8]
 8006dac:	4604      	mov	r4, r0
 8006dae:	b105      	cbz	r5, 8006db2 <GUIDRV_FlexColor__InitOnce+0xa>
 8006db0:	bd38      	pop	{r3, r4, r5, pc}
 8006db2:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8006db6:	f001 fda1 	bl	80088fc <GUI_ALLOC_GetFixedBlock>
 8006dba:	4629      	mov	r1, r5
 8006dbc:	60a0      	str	r0, [r4, #8]
 8006dbe:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8006dc2:	f000 f8b9 	bl	8006f38 <GUI__memset>
 8006dc6:	68a3      	ldr	r3, [r4, #8]
 8006dc8:	4904      	ldr	r1, [pc, #16]	; (8006ddc <GUIDRV_FlexColor__InitOnce+0x34>)
 8006dca:	641c      	str	r4, [r3, #64]	; 0x40
 8006dcc:	2202      	movs	r2, #2
 8006dce:	2001      	movs	r0, #1
 8006dd0:	84da      	strh	r2, [r3, #38]	; 0x26
 8006dd2:	6218      	str	r0, [r3, #32]
 8006dd4:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 8006dd8:	bd38      	pop	{r3, r4, r5, pc}
 8006dda:	bf00      	nop
 8006ddc:	08006a29 	.word	0x08006a29

08006de0 <GUIDRV_FlexColor_Config>:
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	6884      	ldr	r4, [r0, #8]
 8006de4:	4606      	mov	r6, r0
 8006de6:	460d      	mov	r5, r1
 8006de8:	b1b4      	cbz	r4, 8006e18 <GUIDRV_FlexColor_Config+0x38>
 8006dea:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8006dee:	6363      	str	r3, [r4, #52]	; 0x34
 8006df0:	075b      	lsls	r3, r3, #29
 8006df2:	62e1      	str	r1, [r4, #44]	; 0x2c
 8006df4:	6322      	str	r2, [r4, #48]	; 0x30
 8006df6:	d507      	bpl.n	8006e08 <GUIDRV_FlexColor_Config+0x28>
 8006df8:	e894 0005 	ldmia.w	r4, {r0, r2}
 8006dfc:	68a1      	ldr	r1, [r4, #8]
 8006dfe:	68e3      	ldr	r3, [r4, #12]
 8006e00:	6022      	str	r2, [r4, #0]
 8006e02:	6060      	str	r0, [r4, #4]
 8006e04:	60a3      	str	r3, [r4, #8]
 8006e06:	60e1      	str	r1, [r4, #12]
 8006e08:	89aa      	ldrh	r2, [r5, #12]
 8006e0a:	6928      	ldr	r0, [r5, #16]
 8006e0c:	84a2      	strh	r2, [r4, #36]	; 0x24
 8006e0e:	b110      	cbz	r0, 8006e16 <GUIDRV_FlexColor_Config+0x36>
 8006e10:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 8006e14:	6221      	str	r1, [r4, #32]
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8006e1c:	f001 fd6e 	bl	80088fc <GUI_ALLOC_GetFixedBlock>
 8006e20:	4621      	mov	r1, r4
 8006e22:	60b0      	str	r0, [r6, #8]
 8006e24:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8006e28:	f000 f886 	bl	8006f38 <GUI__memset>
 8006e2c:	68b3      	ldr	r3, [r6, #8]
 8006e2e:	4905      	ldr	r1, [pc, #20]	; (8006e44 <GUIDRV_FlexColor_Config+0x64>)
 8006e30:	641e      	str	r6, [r3, #64]	; 0x40
 8006e32:	2202      	movs	r2, #2
 8006e34:	2001      	movs	r0, #1
 8006e36:	84da      	strh	r2, [r3, #38]	; 0x26
 8006e38:	6218      	str	r0, [r3, #32]
 8006e3a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 8006e3e:	68b4      	ldr	r4, [r6, #8]
 8006e40:	e7d3      	b.n	8006dea <GUIDRV_FlexColor_Config+0xa>
 8006e42:	bf00      	nop
 8006e44:	08006a29 	.word	0x08006a29

08006e48 <GUIDRV_FlexColor_SetFunc>:
 8006e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4c:	6885      	ldr	r5, [r0, #8]
 8006e4e:	4604      	mov	r4, r0
 8006e50:	4688      	mov	r8, r1
 8006e52:	4616      	mov	r6, r2
 8006e54:	461f      	mov	r7, r3
 8006e56:	b17d      	cbz	r5, 8006e78 <GUIDRV_FlexColor_SetFunc+0x30>
 8006e58:	4641      	mov	r1, r8
 8006e5a:	2268      	movs	r2, #104	; 0x68
 8006e5c:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 8006e60:	f006 fe38 	bl	800dad4 <memcpy>
 8006e64:	4620      	mov	r0, r4
 8006e66:	47b0      	blx	r6
 8006e68:	4620      	mov	r0, r4
 8006e6a:	47b8      	blx	r7
 8006e6c:	6923      	ldr	r3, [r4, #16]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	4790      	blx	r2
 8006e72:	62a8      	str	r0, [r5, #40]	; 0x28
 8006e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e78:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8006e7c:	f001 fd3e 	bl	80088fc <GUI_ALLOC_GetFixedBlock>
 8006e80:	4629      	mov	r1, r5
 8006e82:	60a0      	str	r0, [r4, #8]
 8006e84:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8006e88:	f000 f856 	bl	8006f38 <GUI__memset>
 8006e8c:	68a3      	ldr	r3, [r4, #8]
 8006e8e:	4905      	ldr	r1, [pc, #20]	; (8006ea4 <GUIDRV_FlexColor_SetFunc+0x5c>)
 8006e90:	641c      	str	r4, [r3, #64]	; 0x40
 8006e92:	2202      	movs	r2, #2
 8006e94:	2001      	movs	r0, #1
 8006e96:	84da      	strh	r2, [r3, #38]	; 0x26
 8006e98:	6218      	str	r0, [r3, #32]
 8006e9a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 8006e9e:	68a5      	ldr	r5, [r4, #8]
 8006ea0:	e7da      	b.n	8006e58 <GUIDRV_FlexColor_SetFunc+0x10>
 8006ea2:	bf00      	nop
 8006ea4:	08006a29 	.word	0x08006a29

08006ea8 <LCD_SetVSizeEx>:
 8006ea8:	b530      	push	{r4, r5, lr}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	460d      	mov	r5, r1
 8006eae:	4614      	mov	r4, r2
 8006eb0:	f000 f9de 	bl	8007270 <GUI_DEVICE__GetpDriver>
 8006eb4:	9001      	str	r0, [sp, #4]
 8006eb6:	b168      	cbz	r0, 8006ed4 <LCD_SetVSizeEx+0x2c>
 8006eb8:	68c3      	ldr	r3, [r0, #12]
 8006eba:	210a      	movs	r1, #10
 8006ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ebe:	a801      	add	r0, sp, #4
 8006ec0:	4790      	blx	r2
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	b130      	cbz	r0, 8006ed4 <LCD_SetVSizeEx+0x2c>
 8006ec6:	9801      	ldr	r0, [sp, #4]
 8006ec8:	4629      	mov	r1, r5
 8006eca:	4622      	mov	r2, r4
 8006ecc:	4798      	blx	r3
 8006ece:	2000      	movs	r0, #0
 8006ed0:	b003      	add	sp, #12
 8006ed2:	bd30      	pop	{r4, r5, pc}
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	e7fb      	b.n	8006ed0 <LCD_SetVSizeEx+0x28>

08006ed8 <LCD_SetSizeEx>:
 8006ed8:	b530      	push	{r4, r5, lr}
 8006eda:	b083      	sub	sp, #12
 8006edc:	460d      	mov	r5, r1
 8006ede:	4614      	mov	r4, r2
 8006ee0:	f000 f9c6 	bl	8007270 <GUI_DEVICE__GetpDriver>
 8006ee4:	9001      	str	r0, [sp, #4]
 8006ee6:	b168      	cbz	r0, 8006f04 <LCD_SetSizeEx+0x2c>
 8006ee8:	68c3      	ldr	r3, [r0, #12]
 8006eea:	210b      	movs	r1, #11
 8006eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eee:	a801      	add	r0, sp, #4
 8006ef0:	4790      	blx	r2
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	b130      	cbz	r0, 8006f04 <LCD_SetSizeEx+0x2c>
 8006ef6:	9801      	ldr	r0, [sp, #4]
 8006ef8:	4629      	mov	r1, r5
 8006efa:	4622      	mov	r2, r4
 8006efc:	4798      	blx	r3
 8006efe:	2000      	movs	r0, #0
 8006f00:	b003      	add	sp, #12
 8006f02:	bd30      	pop	{r4, r5, pc}
 8006f04:	2001      	movs	r0, #1
 8006f06:	e7fb      	b.n	8006f00 <LCD_SetSizeEx+0x28>

08006f08 <LCD_SetLUTEntryEx>:
 8006f08:	b530      	push	{r4, r5, lr}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	460d      	mov	r5, r1
 8006f0e:	4614      	mov	r4, r2
 8006f10:	f000 f9ae 	bl	8007270 <GUI_DEVICE__GetpDriver>
 8006f14:	9001      	str	r0, [sp, #4]
 8006f16:	b168      	cbz	r0, 8006f34 <LCD_SetLUTEntryEx+0x2c>
 8006f18:	68c3      	ldr	r3, [r0, #12]
 8006f1a:	2110      	movs	r1, #16
 8006f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f1e:	a801      	add	r0, sp, #4
 8006f20:	4790      	blx	r2
 8006f22:	4603      	mov	r3, r0
 8006f24:	b130      	cbz	r0, 8006f34 <LCD_SetLUTEntryEx+0x2c>
 8006f26:	9801      	ldr	r0, [sp, #4]
 8006f28:	4629      	mov	r1, r5
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	4798      	blx	r3
 8006f2e:	2000      	movs	r0, #0
 8006f30:	b003      	add	sp, #12
 8006f32:	bd30      	pop	{r4, r5, pc}
 8006f34:	2001      	movs	r0, #1
 8006f36:	e7fb      	b.n	8006f30 <LCD_SetLUTEntryEx+0x28>

08006f38 <GUI__memset>:
 8006f38:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8006f3c:	2a00      	cmp	r2, #0
 8006f3e:	f000 80cf 	beq.w	80070e0 <GUI__memset+0x1a8>
 8006f42:	f010 0f03 	tst.w	r0, #3
 8006f46:	4603      	mov	r3, r0
 8006f48:	d00d      	beq.n	8006f66 <GUI__memset+0x2e>
 8006f4a:	1e54      	subs	r4, r2, #1
 8006f4c:	f014 0f01 	tst.w	r4, #1
 8006f50:	f000 80d5 	beq.w	80070fe <GUI__memset+0x1c6>
 8006f54:	4603      	mov	r3, r0
 8006f56:	4622      	mov	r2, r4
 8006f58:	f803 1b01 	strb.w	r1, [r3], #1
 8006f5c:	f013 0f03 	tst.w	r3, #3
 8006f60:	4618      	mov	r0, r3
 8006f62:	f040 80cc 	bne.w	80070fe <GUI__memset+0x1c6>
 8006f66:	0897      	lsrs	r7, r2, #2
 8006f68:	d048      	beq.n	8006ffc <GUI__memset+0xc4>
 8006f6a:	eb01 2401 	add.w	r4, r1, r1, lsl #8
 8006f6e:	2f03      	cmp	r7, #3
 8006f70:	f002 0203 	and.w	r2, r2, #3
 8006f74:	eb04 4304 	add.w	r3, r4, r4, lsl #16
 8006f78:	dd28      	ble.n	8006fcc <GUI__memset+0x94>
 8006f7a:	1f3d      	subs	r5, r7, #4
 8006f7c:	462e      	mov	r6, r5
 8006f7e:	2e03      	cmp	r6, #3
 8006f80:	6003      	str	r3, [r0, #0]
 8006f82:	6043      	str	r3, [r0, #4]
 8006f84:	6083      	str	r3, [r0, #8]
 8006f86:	60c3      	str	r3, [r0, #12]
 8006f88:	f3c5 0580 	ubfx	r5, r5, #2, #1
 8006f8c:	f100 0410 	add.w	r4, r0, #16
 8006f90:	dd14      	ble.n	8006fbc <GUI__memset+0x84>
 8006f92:	b13d      	cbz	r5, 8006fa4 <GUI__memset+0x6c>
 8006f94:	3e04      	subs	r6, #4
 8006f96:	6023      	str	r3, [r4, #0]
 8006f98:	6063      	str	r3, [r4, #4]
 8006f9a:	60a3      	str	r3, [r4, #8]
 8006f9c:	60e3      	str	r3, [r4, #12]
 8006f9e:	3410      	adds	r4, #16
 8006fa0:	2e03      	cmp	r6, #3
 8006fa2:	dd0b      	ble.n	8006fbc <GUI__memset+0x84>
 8006fa4:	3e08      	subs	r6, #8
 8006fa6:	6023      	str	r3, [r4, #0]
 8006fa8:	6063      	str	r3, [r4, #4]
 8006faa:	60a3      	str	r3, [r4, #8]
 8006fac:	60e3      	str	r3, [r4, #12]
 8006fae:	6123      	str	r3, [r4, #16]
 8006fb0:	6163      	str	r3, [r4, #20]
 8006fb2:	61a3      	str	r3, [r4, #24]
 8006fb4:	61e3      	str	r3, [r4, #28]
 8006fb6:	3420      	adds	r4, #32
 8006fb8:	2e03      	cmp	r6, #3
 8006fba:	dcf3      	bgt.n	8006fa4 <GUI__memset+0x6c>
 8006fbc:	3f04      	subs	r7, #4
 8006fbe:	08bc      	lsrs	r4, r7, #2
 8006fc0:	1c65      	adds	r5, r4, #1
 8006fc2:	ebb7 0784 	subs.w	r7, r7, r4, lsl #2
 8006fc6:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8006fca:	d015      	beq.n	8006ff8 <GUI__memset+0xc0>
 8006fcc:	1e7e      	subs	r6, r7, #1
 8006fce:	4604      	mov	r4, r0
 8006fd0:	4635      	mov	r5, r6
 8006fd2:	f844 3b04 	str.w	r3, [r4], #4
 8006fd6:	f006 0601 	and.w	r6, r6, #1
 8006fda:	b15d      	cbz	r5, 8006ff4 <GUI__memset+0xbc>
 8006fdc:	b11e      	cbz	r6, 8006fe6 <GUI__memset+0xae>
 8006fde:	3d01      	subs	r5, #1
 8006fe0:	f844 3b04 	str.w	r3, [r4], #4
 8006fe4:	d006      	beq.n	8006ff4 <GUI__memset+0xbc>
 8006fe6:	4626      	mov	r6, r4
 8006fe8:	f846 3b04 	str.w	r3, [r6], #4
 8006fec:	6063      	str	r3, [r4, #4]
 8006fee:	1d34      	adds	r4, r6, #4
 8006ff0:	3d02      	subs	r5, #2
 8006ff2:	d1f8      	bne.n	8006fe6 <GUI__memset+0xae>
 8006ff4:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8006ff8:	2a00      	cmp	r2, #0
 8006ffa:	d071      	beq.n	80070e0 <GUI__memset+0x1a8>
 8006ffc:	4243      	negs	r3, r0
 8006ffe:	f003 0703 	and.w	r7, r3, #3
 8007002:	4297      	cmp	r7, r2
 8007004:	bf28      	it	cs
 8007006:	4617      	movcs	r7, r2
 8007008:	2a03      	cmp	r2, #3
 800700a:	bf98      	it	ls
 800700c:	4617      	movls	r7, r2
 800700e:	4691      	mov	r9, r2
 8007010:	2f00      	cmp	r7, #0
 8007012:	d07b      	beq.n	800710c <GUI__memset+0x1d4>
 8007014:	4603      	mov	r3, r0
 8007016:	43c5      	mvns	r5, r0
 8007018:	f803 1b01 	strb.w	r1, [r3], #1
 800701c:	1944      	adds	r4, r0, r5
 800701e:	1a1d      	subs	r5, r3, r0
 8007020:	19e6      	adds	r6, r4, r7
 8007022:	3a01      	subs	r2, #1
 8007024:	42bd      	cmp	r5, r7
 8007026:	f006 0401 	and.w	r4, r6, #1
 800702a:	461e      	mov	r6, r3
 800702c:	d211      	bcs.n	8007052 <GUI__memset+0x11a>
 800702e:	b134      	cbz	r4, 800703e <GUI__memset+0x106>
 8007030:	f803 1b01 	strb.w	r1, [r3], #1
 8007034:	1a1c      	subs	r4, r3, r0
 8007036:	3a01      	subs	r2, #1
 8007038:	42bc      	cmp	r4, r7
 800703a:	461e      	mov	r6, r3
 800703c:	d209      	bcs.n	8007052 <GUI__memset+0x11a>
 800703e:	461c      	mov	r4, r3
 8007040:	3a02      	subs	r2, #2
 8007042:	f804 1b01 	strb.w	r1, [r4], #1
 8007046:	7059      	strb	r1, [r3, #1]
 8007048:	1c63      	adds	r3, r4, #1
 800704a:	1a1c      	subs	r4, r3, r0
 800704c:	42bc      	cmp	r4, r7
 800704e:	461e      	mov	r6, r3
 8007050:	d3f5      	bcc.n	800703e <GUI__memset+0x106>
 8007052:	45b9      	cmp	r9, r7
 8007054:	d044      	beq.n	80070e0 <GUI__memset+0x1a8>
 8007056:	ebc7 0909 	rsb	r9, r7, r9
 800705a:	ea4f 0c99 	mov.w	ip, r9, lsr #2
 800705e:	ea4f 088c 	mov.w	r8, ip, lsl #2
 8007062:	f1bc 0f00 	cmp.w	ip, #0
 8007066:	d025      	beq.n	80070b4 <GUI__memset+0x17c>
 8007068:	2500      	movs	r5, #0
 800706a:	f361 0507 	bfi	r5, r1, #0, #8
 800706e:	f361 250f 	bfi	r5, r1, #8, #8
 8007072:	2401      	movs	r4, #1
 8007074:	f361 4517 	bfi	r5, r1, #16, #8
 8007078:	19c0      	adds	r0, r0, r7
 800707a:	f361 651f 	bfi	r5, r1, #24, #8
 800707e:	f10c 33ff 	add.w	r3, ip, #4294967295
 8007082:	4564      	cmp	r4, ip
 8007084:	f840 5b04 	str.w	r5, [r0], #4
 8007088:	ea03 0304 	and.w	r3, r3, r4
 800708c:	d20d      	bcs.n	80070aa <GUI__memset+0x172>
 800708e:	b123      	cbz	r3, 800709a <GUI__memset+0x162>
 8007090:	2402      	movs	r4, #2
 8007092:	4564      	cmp	r4, ip
 8007094:	f840 5b04 	str.w	r5, [r0], #4
 8007098:	d207      	bcs.n	80070aa <GUI__memset+0x172>
 800709a:	4603      	mov	r3, r0
 800709c:	3402      	adds	r4, #2
 800709e:	f843 5b04 	str.w	r5, [r3], #4
 80070a2:	6045      	str	r5, [r0, #4]
 80070a4:	1d18      	adds	r0, r3, #4
 80070a6:	4564      	cmp	r4, ip
 80070a8:	d3f7      	bcc.n	800709a <GUI__memset+0x162>
 80070aa:	45c1      	cmp	r9, r8
 80070ac:	4446      	add	r6, r8
 80070ae:	ebc8 0202 	rsb	r2, r8, r2
 80070b2:	d015      	beq.n	80070e0 <GUI__memset+0x1a8>
 80070b4:	4633      	mov	r3, r6
 80070b6:	18b2      	adds	r2, r6, r2
 80070b8:	f803 1b01 	strb.w	r1, [r3], #1
 80070bc:	43f6      	mvns	r6, r6
 80070be:	1990      	adds	r0, r2, r6
 80070c0:	4293      	cmp	r3, r2
 80070c2:	f000 0601 	and.w	r6, r0, #1
 80070c6:	d00b      	beq.n	80070e0 <GUI__memset+0x1a8>
 80070c8:	b11e      	cbz	r6, 80070d2 <GUI__memset+0x19a>
 80070ca:	f803 1b01 	strb.w	r1, [r3], #1
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d006      	beq.n	80070e0 <GUI__memset+0x1a8>
 80070d2:	4618      	mov	r0, r3
 80070d4:	f800 1b01 	strb.w	r1, [r0], #1
 80070d8:	7059      	strb	r1, [r3, #1]
 80070da:	1c43      	adds	r3, r0, #1
 80070dc:	4293      	cmp	r3, r2
 80070de:	d1f8      	bne.n	80070d2 <GUI__memset+0x19a>
 80070e0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80070e4:	4770      	bx	lr
 80070e6:	f010 0f03 	tst.w	r0, #3
 80070ea:	f43f af3c 	beq.w	8006f66 <GUI__memset+0x2e>
 80070ee:	f803 1b01 	strb.w	r1, [r3], #1
 80070f2:	3a01      	subs	r2, #1
 80070f4:	f013 0f03 	tst.w	r3, #3
 80070f8:	4618      	mov	r0, r3
 80070fa:	f43f af34 	beq.w	8006f66 <GUI__memset+0x2e>
 80070fe:	4618      	mov	r0, r3
 8007100:	3a01      	subs	r2, #1
 8007102:	f800 1b01 	strb.w	r1, [r0], #1
 8007106:	4603      	mov	r3, r0
 8007108:	d1ed      	bne.n	80070e6 <GUI__memset+0x1ae>
 800710a:	e7e9      	b.n	80070e0 <GUI__memset+0x1a8>
 800710c:	4606      	mov	r6, r0
 800710e:	e7a2      	b.n	8007056 <GUI__memset+0x11e>

08007110 <GUI_SetFont>:
 8007110:	4b03      	ldr	r3, [pc, #12]	; (8007120 <GUI_SetFont+0x10>)
 8007112:	6819      	ldr	r1, [r3, #0]
 8007114:	4602      	mov	r2, r0
 8007116:	69c8      	ldr	r0, [r1, #28]
 8007118:	b102      	cbz	r2, 800711c <GUI_SetFont+0xc>
 800711a:	61ca      	str	r2, [r1, #28]
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	1ffe8808 	.word	0x1ffe8808

08007124 <GUI_SetColor>:
 8007124:	f004 bb1e 	b.w	800b764 <LCD_SetColor>

08007128 <GUI_DispStringAt>:
 8007128:	f648 0308 	movw	r3, #34824	; 0x8808
 800712c:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	8459      	strh	r1, [r3, #34]	; 0x22
 8007134:	849a      	strh	r2, [r3, #36]	; 0x24
 8007136:	f000 b801 	b.w	800713c <GUI_DispString>
 800713a:	bf00      	nop

0800713c <GUI_DispString>:
 800713c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007140:	4604      	mov	r4, r0
 8007142:	b085      	sub	sp, #20
 8007144:	2800      	cmp	r0, #0
 8007146:	d06f      	beq.n	8007228 <GUI_DispString+0xec>
 8007148:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800726c <GUI_DispString+0x130>
 800714c:	f000 fc56 	bl	80079fc <GUI_GetFontDistY>
 8007150:	f8d8 3000 	ldr.w	r3, [r8]
 8007154:	4681      	mov	r9, r0
 8007156:	8c58      	ldrh	r0, [r3, #34]	; 0x22
 8007158:	9000      	str	r0, [sp, #0]
 800715a:	f000 fc37 	bl	80079cc <GUI_GetYAdjust>
 800715e:	f8d8 2000 	ldr.w	r2, [r8]
 8007162:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8007164:	b280      	uxth	r0, r0
 8007166:	1a0b      	subs	r3, r1, r0
 8007168:	b29b      	uxth	r3, r3
 800716a:	8493      	strh	r3, [r2, #36]	; 0x24
 800716c:	7821      	ldrb	r1, [r4, #0]
 800716e:	9001      	str	r0, [sp, #4]
 8007170:	2900      	cmp	r1, #0
 8007172:	d053      	beq.n	800721c <GUI_DispString+0xe0>
 8007174:	fa1f f989 	uxth.w	r9, r9
 8007178:	46c2      	mov	sl, r8
 800717a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800717e:	4620      	mov	r0, r4
 8007180:	f000 fb7e 	bl	8007880 <GUI__GetLineNumChars>
 8007184:	4605      	mov	r5, r0
 8007186:	4629      	mov	r1, r5
 8007188:	4620      	mov	r0, r4
 800718a:	f000 fbbf 	bl	800790c <GUI__GetLineDistX>
 800718e:	f8d8 3000 	ldr.w	r3, [r8]
 8007192:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007194:	f002 0603 	and.w	r6, r2, #3
 8007198:	2e01      	cmp	r6, #1
 800719a:	d064      	beq.n	8007266 <GUI_DispString+0x12a>
 800719c:	2e02      	cmp	r6, #2
 800719e:	d05b      	beq.n	8007258 <GUI_DispString+0x11c>
 80071a0:	fa1f fb80 	uxth.w	fp, r0
 80071a4:	f04f 0700 	mov.w	r7, #0
 80071a8:	8c58      	ldrh	r0, [r3, #34]	; 0x22
 80071aa:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
 80071ac:	1bc1      	subs	r1, r0, r7
 80071ae:	fa1f fc81 	uxth.w	ip, r1
 80071b2:	fa1f f78c 	uxth.w	r7, ip
 80071b6:	f10b 32ff 	add.w	r2, fp, #4294967295
 80071ba:	f106 3eff 	add.w	lr, r6, #4294967295
 80071be:	4494      	add	ip, r2
 80071c0:	44ce      	add	lr, r9
 80071c2:	aa02      	add	r2, sp, #8
 80071c4:	4620      	mov	r0, r4
 80071c6:	4629      	mov	r1, r5
 80071c8:	845f      	strh	r7, [r3, #34]	; 0x22
 80071ca:	f8ad c00c 	strh.w	ip, [sp, #12]
 80071ce:	f8ad e00e 	strh.w	lr, [sp, #14]
 80071d2:	f8ad 7008 	strh.w	r7, [sp, #8]
 80071d6:	f8ad 600a 	strh.w	r6, [sp, #10]
 80071da:	f000 fbd7 	bl	800798c <GUI__DispLine>
 80071de:	f8d8 3000 	ldr.w	r3, [r8]
 80071e2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80071e6:	4620      	mov	r0, r4
 80071e8:	8499      	strh	r1, [r3, #36]	; 0x24
 80071ea:	4629      	mov	r1, r5
 80071ec:	f004 fba8 	bl	800b940 <GUI_UC__NumChars2NumBytes>
 80071f0:	5c22      	ldrb	r2, [r4, r0]
 80071f2:	2a0a      	cmp	r2, #10
 80071f4:	eb04 0300 	add.w	r3, r4, r0
 80071f8:	d019      	beq.n	800722e <GUI_DispString+0xf2>
 80071fa:	2a0d      	cmp	r2, #13
 80071fc:	d017      	beq.n	800722e <GUI_DispString+0xf2>
 80071fe:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8007202:	f8da 2000 	ldr.w	r2, [sl]
 8007206:	4483      	add	fp, r0
 8007208:	f8a2 b022 	strh.w	fp, [r2, #34]	; 0x22
 800720c:	7819      	ldrb	r1, [r3, #0]
 800720e:	b119      	cbz	r1, 8007218 <GUI_DispString+0xdc>
 8007210:	7858      	ldrb	r0, [r3, #1]
 8007212:	1c5c      	adds	r4, r3, #1
 8007214:	2800      	cmp	r0, #0
 8007216:	d1b0      	bne.n	800717a <GUI_DispString+0x3e>
 8007218:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 800721a:	9801      	ldr	r0, [sp, #4]
 800721c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800721e:	18c3      	adds	r3, r0, r3
 8007220:	f021 0003 	bic.w	r0, r1, #3
 8007224:	8493      	strh	r3, [r2, #36]	; 0x24
 8007226:	8590      	strh	r0, [r2, #44]	; 0x2c
 8007228:	b005      	add	sp, #20
 800722a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722e:	f8d8 2000 	ldr.w	r2, [r8]
 8007232:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007234:	f001 0103 	and.w	r1, r1, #3
 8007238:	3901      	subs	r1, #1
 800723a:	2901      	cmp	r1, #1
 800723c:	bf8b      	itete	hi
 800723e:	8c11      	ldrhhi	r1, [r2, #32]
 8007240:	9800      	ldrls	r0, [sp, #0]
 8007242:	8451      	strhhi	r1, [r2, #34]	; 0x22
 8007244:	8450      	strhls	r0, [r2, #34]	; 0x22
 8007246:	7819      	ldrb	r1, [r3, #0]
 8007248:	290a      	cmp	r1, #10
 800724a:	d1e0      	bne.n	800720e <GUI_DispString+0xd2>
 800724c:	8c90      	ldrh	r0, [r2, #36]	; 0x24
 800724e:	eb09 0100 	add.w	r1, r9, r0
 8007252:	8491      	strh	r1, [r2, #36]	; 0x24
 8007254:	7819      	ldrb	r1, [r3, #0]
 8007256:	e7da      	b.n	800720e <GUI_DispString+0xd2>
 8007258:	eb00 7cd0 	add.w	ip, r0, r0, lsr #31
 800725c:	f3cc 074f 	ubfx	r7, ip, #1, #16
 8007260:	fa1f fb80 	uxth.w	fp, r0
 8007264:	e7a0      	b.n	80071a8 <GUI_DispString+0x6c>
 8007266:	b287      	uxth	r7, r0
 8007268:	46bb      	mov	fp, r7
 800726a:	e79d      	b.n	80071a8 <GUI_DispString+0x6c>
 800726c:	1ffe8808 	.word	0x1ffe8808

08007270 <GUI_DEVICE__GetpDriver>:
 8007270:	2800      	cmp	r0, #0
 8007272:	dc0e      	bgt.n	8007292 <GUI_DEVICE__GetpDriver+0x22>
 8007274:	4b08      	ldr	r3, [pc, #32]	; (8007298 <GUI_DEVICE__GetpDriver+0x28>)
 8007276:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800727a:	b158      	cbz	r0, 8007294 <GUI_DEVICE__GetpDriver+0x24>
 800727c:	68c1      	ldr	r1, [r0, #12]
 800727e:	680a      	ldr	r2, [r1, #0]
 8007280:	b91a      	cbnz	r2, 800728a <GUI_DEVICE__GetpDriver+0x1a>
 8007282:	e008      	b.n	8007296 <GUI_DEVICE__GetpDriver+0x26>
 8007284:	68c3      	ldr	r3, [r0, #12]
 8007286:	6819      	ldr	r1, [r3, #0]
 8007288:	b121      	cbz	r1, 8007294 <GUI_DEVICE__GetpDriver+0x24>
 800728a:	6800      	ldr	r0, [r0, #0]
 800728c:	2800      	cmp	r0, #0
 800728e:	d1f9      	bne.n	8007284 <GUI_DEVICE__GetpDriver+0x14>
 8007290:	4770      	bx	lr
 8007292:	2000      	movs	r0, #0
 8007294:	4770      	bx	lr
 8007296:	4770      	bx	lr
 8007298:	1ffe9d08 	.word	0x1ffe9d08

0800729c <GUI_DEVICE_Unlink>:
 800729c:	4a09      	ldr	r2, [pc, #36]	; (80072c4 <GUI_DEVICE_Unlink+0x28>)
 800729e:	6981      	ldr	r1, [r0, #24]
 80072a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072a4:	4298      	cmp	r0, r3
 80072a6:	6803      	ldr	r3, [r0, #0]
 80072a8:	bf08      	it	eq
 80072aa:	f842 3021 	streq.w	r3, [r2, r1, lsl #2]
 80072ae:	6842      	ldr	r2, [r0, #4]
 80072b0:	b10a      	cbz	r2, 80072b6 <GUI_DEVICE_Unlink+0x1a>
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	6803      	ldr	r3, [r0, #0]
 80072b6:	b103      	cbz	r3, 80072ba <GUI_DEVICE_Unlink+0x1e>
 80072b8:	605a      	str	r2, [r3, #4]
 80072ba:	2100      	movs	r1, #0
 80072bc:	6001      	str	r1, [r0, #0]
 80072be:	6041      	str	r1, [r0, #4]
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	1ffe9d08 	.word	0x1ffe9d08

080072c8 <GUI_DEVICE_Link>:
 80072c8:	b470      	push	{r4, r5, r6}
 80072ca:	b110      	cbz	r0, 80072d2 <GUI_DEVICE_Link+0xa>
 80072cc:	6984      	ldr	r4, [r0, #24]
 80072ce:	2c00      	cmp	r4, #0
 80072d0:	dd02      	ble.n	80072d8 <GUI_DEVICE_Link+0x10>
 80072d2:	2001      	movs	r0, #1
 80072d4:	bc70      	pop	{r4, r5, r6}
 80072d6:	4770      	bx	lr
 80072d8:	4d1c      	ldr	r5, [pc, #112]	; (800734c <GUI_DEVICE_Link+0x84>)
 80072da:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80072de:	b90b      	cbnz	r3, 80072e4 <GUI_DEVICE_Link+0x1c>
 80072e0:	e030      	b.n	8007344 <GUI_DEVICE_Link+0x7c>
 80072e2:	4613      	mov	r3, r2
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	2a00      	cmp	r2, #0
 80072e8:	d1fb      	bne.n	80072e2 <GUI_DEVICE_Link+0x1a>
 80072ea:	68c1      	ldr	r1, [r0, #12]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	6809      	ldr	r1, [r1, #0]
 80072f0:	6812      	ldr	r2, [r2, #0]
 80072f2:	428a      	cmp	r2, r1
 80072f4:	dd06      	ble.n	8007304 <GUI_DEVICE_Link+0x3c>
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0ea      	beq.n	80072d2 <GUI_DEVICE_Link+0xa>
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	6812      	ldr	r2, [r2, #0]
 8007300:	428a      	cmp	r2, r1
 8007302:	dcf8      	bgt.n	80072f6 <GUI_DEVICE_Link+0x2e>
 8007304:	4291      	cmp	r1, r2
 8007306:	d00b      	beq.n	8007320 <GUI_DEVICE_Link+0x58>
 8007308:	6859      	ldr	r1, [r3, #4]
 800730a:	b1c1      	cbz	r1, 800733e <GUI_DEVICE_Link+0x76>
 800730c:	6008      	str	r0, [r1, #0]
 800730e:	6041      	str	r1, [r0, #4]
 8007310:	4283      	cmp	r3, r0
 8007312:	bf14      	ite	ne
 8007314:	461a      	movne	r2, r3
 8007316:	2200      	moveq	r2, #0
 8007318:	6058      	str	r0, [r3, #4]
 800731a:	6002      	str	r2, [r0, #0]
 800731c:	2000      	movs	r0, #0
 800731e:	e7d9      	b.n	80072d4 <GUI_DEVICE_Link+0xc>
 8007320:	8a82      	ldrh	r2, [r0, #20]
 8007322:	2a01      	cmp	r2, #1
 8007324:	d1f0      	bne.n	8007308 <GUI_DEVICE_Link+0x40>
 8007326:	461e      	mov	r6, r3
 8007328:	e004      	b.n	8007334 <GUI_DEVICE_Link+0x6c>
 800732a:	68de      	ldr	r6, [r3, #12]
 800732c:	6832      	ldr	r2, [r6, #0]
 800732e:	428a      	cmp	r2, r1
 8007330:	461e      	mov	r6, r3
 8007332:	dbe9      	blt.n	8007308 <GUI_DEVICE_Link+0x40>
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1f7      	bne.n	800732a <GUI_DEVICE_Link+0x62>
 800733a:	4633      	mov	r3, r6
 800733c:	e7e4      	b.n	8007308 <GUI_DEVICE_Link+0x40>
 800733e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8007342:	e7e5      	b.n	8007310 <GUI_DEVICE_Link+0x48>
 8007344:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8007348:	4618      	mov	r0, r3
 800734a:	e7c3      	b.n	80072d4 <GUI_DEVICE_Link+0xc>
 800734c:	1ffe9d08 	.word	0x1ffe9d08

08007350 <GUI_DEVICE_CreateAndLink>:
 8007350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007354:	1e1d      	subs	r5, r3, #0
 8007356:	4607      	mov	r7, r0
 8007358:	460e      	mov	r6, r1
 800735a:	4690      	mov	r8, r2
 800735c:	dc1c      	bgt.n	8007398 <GUI_DEVICE_CreateAndLink+0x48>
 800735e:	201c      	movs	r0, #28
 8007360:	f001 facc 	bl	80088fc <GUI_ALLOC_GetFixedBlock>
 8007364:	4604      	mov	r4, r0
 8007366:	b1b8      	cbz	r0, 8007398 <GUI_DEVICE_CreateAndLink+0x48>
 8007368:	b1d6      	cbz	r6, 80073a0 <GUI_DEVICE_CreateAndLink+0x50>
 800736a:	6106      	str	r6, [r0, #16]
 800736c:	2300      	movs	r3, #0
 800736e:	61a5      	str	r5, [r4, #24]
 8007370:	f8a4 8014 	strh.w	r8, [r4, #20]
 8007374:	60e7      	str	r7, [r4, #12]
 8007376:	6023      	str	r3, [r4, #0]
 8007378:	6063      	str	r3, [r4, #4]
 800737a:	60a3      	str	r3, [r4, #8]
 800737c:	4620      	mov	r0, r4
 800737e:	f7ff ffa3 	bl	80072c8 <GUI_DEVICE_Link>
 8007382:	68e0      	ldr	r0, [r4, #12]
 8007384:	6801      	ldr	r1, [r0, #0]
 8007386:	b921      	cbnz	r1, 8007392 <GUI_DEVICE_CreateAndLink+0x42>
 8007388:	4a0b      	ldr	r2, [pc, #44]	; (80073b8 <GUI_DEVICE_CreateAndLink+0x68>)
 800738a:	6813      	ldr	r3, [r2, #0]
 800738c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007390:	646c      	str	r4, [r5, #68]	; 0x44
 8007392:	4620      	mov	r0, r4
 8007394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007398:	2400      	movs	r4, #0
 800739a:	4620      	mov	r0, r4
 800739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a0:	4b06      	ldr	r3, [pc, #24]	; (80073bc <GUI_DEVICE_CreateAndLink+0x6c>)
 80073a2:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80073a6:	b90a      	cbnz	r2, 80073ac <GUI_DEVICE_CreateAndLink+0x5c>
 80073a8:	e7e0      	b.n	800736c <GUI_DEVICE_CreateAndLink+0x1c>
 80073aa:	4602      	mov	r2, r0
 80073ac:	6810      	ldr	r0, [r2, #0]
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d1fb      	bne.n	80073aa <GUI_DEVICE_CreateAndLink+0x5a>
 80073b2:	6911      	ldr	r1, [r2, #16]
 80073b4:	6121      	str	r1, [r4, #16]
 80073b6:	e7d9      	b.n	800736c <GUI_DEVICE_CreateAndLink+0x1c>
 80073b8:	1ffe8808 	.word	0x1ffe8808
 80073bc:	1ffe9d08 	.word	0x1ffe9d08

080073c0 <_OnExit>:
 80073c0:	f648 10bc 	movw	r0, #35260	; 0x89bc
 80073c4:	f6c1 70fe 	movt	r0, #8190	; 0x1ffe
 80073c8:	b510      	push	{r4, lr}
 80073ca:	2400      	movs	r4, #0
 80073cc:	f840 4b04 	str.w	r4, [r0], #4
 80073d0:	4621      	mov	r1, r4
 80073d2:	2258      	movs	r2, #88	; 0x58
 80073d4:	f7ff fdb0 	bl	8006f38 <GUI__memset>
 80073d8:	f649 5008 	movw	r0, #40200	; 0x9d08
 80073dc:	f6c1 70fe 	movt	r0, #8190	; 0x1ffe
 80073e0:	4621      	mov	r1, r4
 80073e2:	2204      	movs	r2, #4
 80073e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073e8:	f7ff bda6 	b.w	8006f38 <GUI__memset>

080073ec <GUI_SetDefaultFont>:
 80073ec:	f648 0300 	movw	r3, #34816	; 0x8800
 80073f0:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 80073f4:	6058      	str	r0, [r3, #4]
 80073f6:	4770      	bx	lr

080073f8 <GUI_Clear>:
 80073f8:	2000      	movs	r0, #0
 80073fa:	b510      	push	{r4, lr}
 80073fc:	4601      	mov	r1, r0
 80073fe:	f004 fb1b 	bl	800ba38 <GUI_GotoXY>
 8007402:	2004      	movs	r0, #4
 8007404:	f003 faf2 	bl	800a9ec <LCD_SetDrawMode>
 8007408:	4604      	mov	r4, r0
 800740a:	f24c 0001 	movw	r0, #49153	; 0xc001
 800740e:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8007412:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8007416:	4601      	mov	r1, r0
 8007418:	4613      	mov	r3, r2
 800741a:	f003 fb45 	bl	800aaa8 <LCD_FillRect>
 800741e:	4620      	mov	r0, r4
 8007420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007424:	f003 bae2 	b.w	800a9ec <LCD_SetDrawMode>

08007428 <GUI_Init>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	4c24      	ldr	r4, [pc, #144]	; (80074bc <GUI_Init+0x94>)
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	b963      	cbnz	r3, 800744a <GUI_Init+0x22>
 8007430:	2001      	movs	r0, #1
 8007432:	6020      	str	r0, [r4, #0]
 8007434:	f7fa fb04 	bl	8001a40 <GUI_X_Config>
 8007438:	f7fa fb16 	bl	8001a68 <LCD_X_Config>
 800743c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800743e:	4a20      	ldr	r2, [pc, #128]	; (80074c0 <GUI_Init+0x98>)
 8007440:	6621      	str	r1, [r4, #96]	; 0x60
 8007442:	f104 055c 	add.w	r5, r4, #92	; 0x5c
 8007446:	65e2      	str	r2, [r4, #92]	; 0x5c
 8007448:	6665      	str	r5, [r4, #100]	; 0x64
 800744a:	4d1e      	ldr	r5, [pc, #120]	; (80074c4 <GUI_Init+0x9c>)
 800744c:	4f1e      	ldr	r7, [pc, #120]	; (80074c8 <GUI_Init+0xa0>)
 800744e:	262e      	movs	r6, #46	; 0x2e
 8007450:	703e      	strb	r6, [r7, #0]
 8007452:	f7fa fb07 	bl	8001a64 <GUI_X_Init>
 8007456:	68ab      	ldr	r3, [r5, #8]
 8007458:	4a1c      	ldr	r2, [pc, #112]	; (80074cc <GUI_Init+0xa4>)
 800745a:	7c58      	ldrb	r0, [r3, #17]
 800745c:	491c      	ldr	r1, [pc, #112]	; (80074d0 <GUI_Init+0xa8>)
 800745e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8007462:	639b      	str	r3, [r3, #56]	; 0x38
 8007464:	68c2      	ldr	r2, [r0, #12]
 8007466:	641b      	str	r3, [r3, #64]	; 0x40
 8007468:	1d1f      	adds	r7, r3, #4
 800746a:	f103 0608 	add.w	r6, r3, #8
 800746e:	63df      	str	r7, [r3, #60]	; 0x3c
 8007470:	61a6      	str	r6, [r4, #24]
 8007472:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007474:	4798      	blx	r3
 8007476:	6869      	ldr	r1, [r5, #4]
 8007478:	68aa      	ldr	r2, [r5, #8]
 800747a:	6221      	str	r1, [r4, #32]
 800747c:	4915      	ldr	r1, [pc, #84]	; (80074d4 <GUI_Init+0xac>)
 800747e:	3208      	adds	r2, #8
 8007480:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007484:	2000      	movs	r0, #0
 8007486:	6521      	str	r1, [r4, #80]	; 0x50
 8007488:	61a2      	str	r2, [r4, #24]
 800748a:	2103      	movs	r1, #3
 800748c:	2201      	movs	r2, #1
 800748e:	7722      	strb	r2, [r4, #28]
 8007490:	6363      	str	r3, [r4, #52]	; 0x34
 8007492:	63a3      	str	r3, [r4, #56]	; 0x38
 8007494:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 8007498:	f004 f95a 	bl	800b750 <LCD_SetBkColor>
 800749c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80074a0:	f004 f960 	bl	800b764 <LCD_SetColor>
 80074a4:	4c0c      	ldr	r4, [pc, #48]	; (80074d8 <GUI_Init+0xb0>)
 80074a6:	480d      	ldr	r0, [pc, #52]	; (80074dc <GUI_Init+0xb4>)
 80074a8:	6004      	str	r4, [r0, #0]
 80074aa:	f004 f8a1 	bl	800b5f0 <LCD_Init>
 80074ae:	4604      	mov	r4, r0
 80074b0:	2000      	movs	r0, #0
 80074b2:	4601      	mov	r1, r0
 80074b4:	f004 fa76 	bl	800b9a4 <GUI_SetOrg>
 80074b8:	4620      	mov	r0, r4
 80074ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074bc:	1ffe89bc 	.word	0x1ffe89bc
 80074c0:	080073c1 	.word	0x080073c1
 80074c4:	1ffe8800 	.word	0x1ffe8800
 80074c8:	1ffe9cdd 	.word	0x1ffe9cdd
 80074cc:	1ffe9d08 	.word	0x1ffe9d08
 80074d0:	1ffe89c8 	.word	0x1ffe89c8
 80074d4:	0800f908 	.word	0x0800f908
 80074d8:	08010790 	.word	0x08010790
 80074dc:	1ffe9d00 	.word	0x1ffe9d00

080074e0 <GUI__RegisterExit>:
 80074e0:	f648 13bc 	movw	r3, #35260	; 0x89bc
 80074e4:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 80074e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80074ea:	6658      	str	r0, [r3, #100]	; 0x64
 80074ec:	6042      	str	r2, [r0, #4]
 80074ee:	4770      	bx	lr

080074f0 <GUIPROP_DispChar>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	4c3a      	ldr	r4, [pc, #232]	; (80075e0 <GUIPROP_DispChar+0xf0>)
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	69da      	ldr	r2, [r3, #28]
 80074fa:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
 80074fc:	69d3      	ldr	r3, [r2, #28]
 80074fe:	b089      	sub	sp, #36	; 0x24
 8007500:	b143      	cbz	r3, 8007514 <GUIPROP_DispChar+0x24>
 8007502:	881a      	ldrh	r2, [r3, #0]
 8007504:	4290      	cmp	r0, r2
 8007506:	d302      	bcc.n	800750e <GUIPROP_DispChar+0x1e>
 8007508:	8859      	ldrh	r1, [r3, #2]
 800750a:	4281      	cmp	r1, r0
 800750c:	d205      	bcs.n	800751a <GUIPROP_DispChar+0x2a>
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1f6      	bne.n	8007502 <GUIPROP_DispChar+0x12>
 8007514:	b009      	add	sp, #36	; 0x24
 8007516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800751a:	685f      	ldr	r7, [r3, #4]
 800751c:	ebc2 0800 	rsb	r8, r2, r0
 8007520:	fa0f fa85 	sxth.w	sl, r5
 8007524:	eb07 05c8 	add.w	r5, r7, r8, lsl #3
 8007528:	4650      	mov	r0, sl
 800752a:	f895 b002 	ldrb.w	fp, [r5, #2]
 800752e:	f003 fa5d 	bl	800a9ec <LCD_SetDrawMode>
 8007532:	6826      	ldr	r6, [r4, #0]
 8007534:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 8007538:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 800753c:	f9b6 1024 	ldrsh.w	r1, [r6, #36]	; 0x24
 8007540:	f89e c01a 	ldrb.w	ip, [lr, #26]
 8007544:	f89e 3018 	ldrb.w	r3, [lr, #24]
 8007548:	4681      	mov	r9, r0
 800754a:	f9b6 0022 	ldrsh.w	r0, [r6, #34]	; 0x22
 800754e:	f8cd c000 	str.w	ip, [sp]
 8007552:	f89e e01b 	ldrb.w	lr, [lr, #27]
 8007556:	f8cd b00c 	str.w	fp, [sp, #12]
 800755a:	f04f 0b01 	mov.w	fp, #1
 800755e:	f8cd b008 	str.w	fp, [sp, #8]
 8007562:	f8cd e004 	str.w	lr, [sp, #4]
 8007566:	9306      	str	r3, [sp, #24]
 8007568:	686b      	ldr	r3, [r5, #4]
 800756a:	9304      	str	r3, [sp, #16]
 800756c:	6bb6      	ldr	r6, [r6, #56]	; 0x38
 800756e:	9b06      	ldr	r3, [sp, #24]
 8007570:	9605      	str	r6, [sp, #20]
 8007572:	f003 fd41 	bl	800aff8 <LCD_DrawBitmap>
 8007576:	6820      	ldr	r0, [r4, #0]
 8007578:	69c6      	ldr	r6, [r0, #28]
 800757a:	f896 b019 	ldrb.w	fp, [r6, #25]
 800757e:	7e32      	ldrb	r2, [r6, #24]
 8007580:	4593      	cmp	fp, r2
 8007582:	d921      	bls.n	80075c8 <GUIPROP_DispChar+0xd8>
 8007584:	f1ba 0f02 	cmp.w	sl, #2
 8007588:	7ef6      	ldrb	r6, [r6, #27]
 800758a:	d01d      	beq.n	80075c8 <GUIPROP_DispChar+0xd8>
 800758c:	9207      	str	r2, [sp, #28]
 800758e:	f004 fa65 	bl	800ba5c <GUI_GetColor>
 8007592:	4682      	mov	sl, r0
 8007594:	f004 fa5a 	bl	800ba4c <GUI_GetBkColor>
 8007598:	f7ff fdc4 	bl	8007124 <GUI_SetColor>
 800759c:	4910      	ldr	r1, [pc, #64]	; (80075e0 <GUIPROP_DispChar+0xf0>)
 800759e:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 80075a2:	680b      	ldr	r3, [r1, #0]
 80075a4:	9907      	ldr	r1, [sp, #28]
 80075a6:	69da      	ldr	r2, [r3, #28]
 80075a8:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 80075ac:	7ed2      	ldrb	r2, [r2, #27]
 80075ae:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80075b2:	fb07 0202 	mla	r2, r7, r2, r0
 80075b6:	fb01 3106 	mla	r1, r1, r6, r3
 80075ba:	fb0b 3306 	mla	r3, fp, r6, r3
 80075be:	f003 fa73 	bl	800aaa8 <LCD_FillRect>
 80075c2:	4650      	mov	r0, sl
 80075c4:	f7ff fdae 	bl	8007124 <GUI_SetColor>
 80075c8:	4648      	mov	r0, r9
 80075ca:	f003 fa0f 	bl	800a9ec <LCD_SetDrawMode>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	7868      	ldrb	r0, [r5, #1]
 80075d2:	69da      	ldr	r2, [r3, #28]
 80075d4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80075d6:	7e92      	ldrb	r2, [r2, #26]
 80075d8:	fb00 1002 	mla	r0, r0, r2, r1
 80075dc:	8458      	strh	r0, [r3, #34]	; 0x22
 80075de:	e799      	b.n	8007514 <GUIPROP_DispChar+0x24>
 80075e0:	1ffe8808 	.word	0x1ffe8808

080075e4 <GUIPROP_GetCharDistX>:
 80075e4:	4b10      	ldr	r3, [pc, #64]	; (8007628 <GUIPROP_GetCharDistX+0x44>)
 80075e6:	b470      	push	{r4, r5, r6}
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	69d5      	ldr	r5, [r2, #28]
 80075ec:	69eb      	ldr	r3, [r5, #28]
 80075ee:	b143      	cbz	r3, 8007602 <GUIPROP_GetCharDistX+0x1e>
 80075f0:	881a      	ldrh	r2, [r3, #0]
 80075f2:	4290      	cmp	r0, r2
 80075f4:	d302      	bcc.n	80075fc <GUIPROP_GetCharDistX+0x18>
 80075f6:	885c      	ldrh	r4, [r3, #2]
 80075f8:	4284      	cmp	r4, r0
 80075fa:	d205      	bcs.n	8007608 <GUIPROP_GetCharDistX+0x24>
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1f6      	bne.n	80075f0 <GUIPROP_GetCharDistX+0xc>
 8007602:	4618      	mov	r0, r3
 8007604:	bc70      	pop	{r4, r5, r6}
 8007606:	4770      	bx	lr
 8007608:	685e      	ldr	r6, [r3, #4]
 800760a:	7eac      	ldrb	r4, [r5, #26]
 800760c:	1a82      	subs	r2, r0, r2
 800760e:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8007612:	7843      	ldrb	r3, [r0, #1]
 8007614:	fb13 f004 	smulbb	r0, r3, r4
 8007618:	2900      	cmp	r1, #0
 800761a:	d0f3      	beq.n	8007604 <GUIPROP_GetCharDistX+0x20>
 800761c:	f816 2032 	ldrb.w	r2, [r6, r2, lsl #3]
 8007620:	fb14 f302 	smulbb	r3, r4, r2
 8007624:	600b      	str	r3, [r1, #0]
 8007626:	e7ed      	b.n	8007604 <GUIPROP_GetCharDistX+0x20>
 8007628:	1ffe8808 	.word	0x1ffe8808

0800762c <GUIPROP_GetFontInfo>:
 800762c:	2301      	movs	r3, #1
 800762e:	800b      	strh	r3, [r1, #0]
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop

08007634 <GUIPROP_IsInFont>:
 8007634:	69c0      	ldr	r0, [r0, #28]
 8007636:	b150      	cbz	r0, 800764e <GUIPROP_IsInFont+0x1a>
 8007638:	8803      	ldrh	r3, [r0, #0]
 800763a:	428b      	cmp	r3, r1
 800763c:	d802      	bhi.n	8007644 <GUIPROP_IsInFont+0x10>
 800763e:	8842      	ldrh	r2, [r0, #2]
 8007640:	428a      	cmp	r2, r1
 8007642:	d203      	bcs.n	800764c <GUIPROP_IsInFont+0x18>
 8007644:	6880      	ldr	r0, [r0, #8]
 8007646:	2800      	cmp	r0, #0
 8007648:	d1f6      	bne.n	8007638 <GUIPROP_IsInFont+0x4>
 800764a:	4770      	bx	lr
 800764c:	2001      	movs	r0, #1
 800764e:	4770      	bx	lr

08007650 <GUIMONO_DispChar>:
 8007650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	f8df b150 	ldr.w	fp, [pc, #336]	; 80077a8 <GUIMONO_DispChar+0x158>
 8007658:	f8db 3000 	ldr.w	r3, [fp]
 800765c:	69d9      	ldr	r1, [r3, #28]
 800765e:	f8b3 c022 	ldrh.w	ip, [r3, #34]	; 0x22
 8007662:	69cc      	ldr	r4, [r1, #28]
 8007664:	8c9f      	ldrh	r7, [r3, #36]	; 0x24
 8007666:	89a2      	ldrh	r2, [r4, #12]
 8007668:	4282      	cmp	r2, r0
 800766a:	b08d      	sub	sp, #52	; 0x34
 800766c:	f200 8085 	bhi.w	800777a <GUIMONO_DispChar+0x12a>
 8007670:	89e5      	ldrh	r5, [r4, #14]
 8007672:	4285      	cmp	r5, r0
 8007674:	f0c0 8081 	bcc.w	800777a <GUIMONO_DispChar+0x12a>
 8007678:	1a82      	subs	r2, r0, r2
 800767a:	6826      	ldr	r6, [r4, #0]
 800767c:	f04f 30ff 	mov.w	r0, #4294967295
 8007680:	900a      	str	r0, [sp, #40]	; 0x28
 8007682:	1c50      	adds	r0, r2, #1
 8007684:	d071      	beq.n	800776a <GUIMONO_DispChar+0x11a>
 8007686:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 800768a:	7e0d      	ldrb	r5, [r1, #24]
 800768c:	7ca3      	ldrb	r3, [r4, #18]
 800768e:	f894 8010 	ldrb.w	r8, [r4, #16]
 8007692:	9207      	str	r2, [sp, #28]
 8007694:	fa0f f18a 	sxth.w	r1, sl
 8007698:	fb15 f303 	smulbb	r3, r5, r3
 800769c:	4608      	mov	r0, r1
 800769e:	fa0f f98c 	sxth.w	r9, ip
 80076a2:	9109      	str	r1, [sp, #36]	; 0x24
 80076a4:	9308      	str	r3, [sp, #32]
 80076a6:	f003 f9a1 	bl	800a9ec <LCD_SetDrawMode>
 80076aa:	f8db 3000 	ldr.w	r3, [fp]
 80076ae:	900b      	str	r0, [sp, #44]	; 0x2c
 80076b0:	69da      	ldr	r2, [r3, #28]
 80076b2:	7e90      	ldrb	r0, [r2, #26]
 80076b4:	9000      	str	r0, [sp, #0]
 80076b6:	7ed1      	ldrb	r1, [r2, #27]
 80076b8:	9808      	ldr	r0, [sp, #32]
 80076ba:	9101      	str	r1, [sp, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	9202      	str	r2, [sp, #8]
 80076c0:	9a07      	ldr	r2, [sp, #28]
 80076c2:	7ca1      	ldrb	r1, [r4, #18]
 80076c4:	fb00 6202 	mla	r2, r0, r2, r6
 80076c8:	9103      	str	r1, [sp, #12]
 80076ca:	9204      	str	r2, [sp, #16]
 80076cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ce:	b23f      	sxth	r7, r7
 80076d0:	9305      	str	r3, [sp, #20]
 80076d2:	4639      	mov	r1, r7
 80076d4:	4648      	mov	r0, r9
 80076d6:	4642      	mov	r2, r8
 80076d8:	462b      	mov	r3, r5
 80076da:	f003 fc8d 	bl	800aff8 <LCD_DrawBitmap>
 80076de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80076e0:	3101      	adds	r1, #1
 80076e2:	d01c      	beq.n	800771e <GUIMONO_DispChar+0xce>
 80076e4:	f04a 0002 	orr.w	r0, sl, #2
 80076e8:	b200      	sxth	r0, r0
 80076ea:	f003 f97f 	bl	800a9ec <LCD_SetDrawMode>
 80076ee:	4a2e      	ldr	r2, [pc, #184]	; (80077a8 <GUIMONO_DispChar+0x158>)
 80076f0:	6813      	ldr	r3, [r2, #0]
 80076f2:	69d8      	ldr	r0, [r3, #28]
 80076f4:	7e81      	ldrb	r1, [r0, #26]
 80076f6:	9100      	str	r1, [sp, #0]
 80076f8:	7ec2      	ldrb	r2, [r0, #27]
 80076fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80076fc:	9201      	str	r2, [sp, #4]
 80076fe:	2001      	movs	r0, #1
 8007700:	9002      	str	r0, [sp, #8]
 8007702:	9808      	ldr	r0, [sp, #32]
 8007704:	7ca2      	ldrb	r2, [r4, #18]
 8007706:	fb00 6601 	mla	r6, r0, r1, r6
 800770a:	9203      	str	r2, [sp, #12]
 800770c:	9604      	str	r6, [sp, #16]
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	4648      	mov	r0, r9
 8007712:	9305      	str	r3, [sp, #20]
 8007714:	4639      	mov	r1, r7
 8007716:	4642      	mov	r2, r8
 8007718:	462b      	mov	r3, r5
 800771a:	f003 fc6d 	bl	800aff8 <LCD_DrawBitmap>
 800771e:	f8db 2000 	ldr.w	r2, [fp]
 8007722:	69d1      	ldr	r1, [r2, #28]
 8007724:	7e48      	ldrb	r0, [r1, #25]
 8007726:	7e0b      	ldrb	r3, [r1, #24]
 8007728:	4298      	cmp	r0, r3
 800772a:	d916      	bls.n	800775a <GUIMONO_DispChar+0x10a>
 800772c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800772e:	2a02      	cmp	r2, #2
 8007730:	d013      	beq.n	800775a <GUIMONO_DispChar+0x10a>
 8007732:	f08a 0504 	eor.w	r5, sl, #4
 8007736:	b228      	sxth	r0, r5
 8007738:	f003 f958 	bl	800a9ec <LCD_SetDrawMode>
 800773c:	491a      	ldr	r1, [pc, #104]	; (80077a8 <GUIMONO_DispChar+0x158>)
 800773e:	6808      	ldr	r0, [r1, #0]
 8007740:	69c3      	ldr	r3, [r0, #28]
 8007742:	7e1d      	ldrb	r5, [r3, #24]
 8007744:	7ed9      	ldrb	r1, [r3, #27]
 8007746:	7e9a      	ldrb	r2, [r3, #26]
 8007748:	7e5b      	ldrb	r3, [r3, #25]
 800774a:	4648      	mov	r0, r9
 800774c:	fb05 7101 	mla	r1, r5, r1, r7
 8007750:	fb02 9208 	mla	r2, r2, r8, r9
 8007754:	19db      	adds	r3, r3, r7
 8007756:	f003 f9a7 	bl	800aaa8 <LCD_FillRect>
 800775a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800775c:	b2c0      	uxtb	r0, r0
 800775e:	f003 f945 	bl	800a9ec <LCD_SetDrawMode>
 8007762:	f8db 3000 	ldr.w	r3, [fp]
 8007766:	f8b3 c022 	ldrh.w	ip, [r3, #34]	; 0x22
 800776a:	7c61      	ldrb	r1, [r4, #17]
 800776c:	eb0c 0901 	add.w	r9, ip, r1
 8007770:	f8a3 9022 	strh.w	r9, [r3, #34]	; 0x22
 8007774:	b00d      	add	sp, #52	; 0x34
 8007776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777a:	68a5      	ldr	r5, [r4, #8]
 800777c:	6866      	ldr	r6, [r4, #4]
 800777e:	2d00      	cmp	r5, #0
 8007780:	d0f3      	beq.n	800776a <GUIMONO_DispChar+0x11a>
 8007782:	882a      	ldrh	r2, [r5, #0]
 8007784:	4290      	cmp	r0, r2
 8007786:	d3f0      	bcc.n	800776a <GUIMONO_DispChar+0x11a>
 8007788:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 800778c:	4580      	cmp	r8, r0
 800778e:	d3ec      	bcc.n	800776a <GUIMONO_DispChar+0x11a>
 8007790:	686d      	ldr	r5, [r5, #4]
 8007792:	1a80      	subs	r0, r0, r2
 8007794:	b282      	uxth	r2, r0
 8007796:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 800779a:	f935 2022 	ldrsh.w	r2, [r5, r2, lsl #2]
 800779e:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 80077a2:	900a      	str	r0, [sp, #40]	; 0x28
 80077a4:	e76d      	b.n	8007682 <GUIMONO_DispChar+0x32>
 80077a6:	bf00      	nop
 80077a8:	1ffe8808 	.word	0x1ffe8808

080077ac <GUIMONO_GetCharDistX>:
 80077ac:	4b04      	ldr	r3, [pc, #16]	; (80077c0 <GUIMONO_GetCharDistX+0x14>)
 80077ae:	6818      	ldr	r0, [r3, #0]
 80077b0:	69c2      	ldr	r2, [r0, #28]
 80077b2:	69d3      	ldr	r3, [r2, #28]
 80077b4:	b109      	cbz	r1, 80077ba <GUIMONO_GetCharDistX+0xe>
 80077b6:	7c18      	ldrb	r0, [r3, #16]
 80077b8:	6008      	str	r0, [r1, #0]
 80077ba:	7c58      	ldrb	r0, [r3, #17]
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	1ffe8808 	.word	0x1ffe8808

080077c4 <GUIMONO_GetFontInfo>:
 80077c4:	2302      	movs	r3, #2
 80077c6:	800b      	strh	r3, [r1, #0]
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop

080077cc <GUIMONO_IsInFont>:
 80077cc:	69c3      	ldr	r3, [r0, #28]
 80077ce:	899a      	ldrh	r2, [r3, #12]
 80077d0:	428a      	cmp	r2, r1
 80077d2:	d802      	bhi.n	80077da <GUIMONO_IsInFont+0xe>
 80077d4:	89d8      	ldrh	r0, [r3, #14]
 80077d6:	4288      	cmp	r0, r1
 80077d8:	d20d      	bcs.n	80077f6 <GUIMONO_IsInFont+0x2a>
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	b16b      	cbz	r3, 80077fa <GUIMONO_IsInFont+0x2e>
 80077de:	881a      	ldrh	r2, [r3, #0]
 80077e0:	4291      	cmp	r1, r2
 80077e2:	d30a      	bcc.n	80077fa <GUIMONO_IsInFont+0x2e>
 80077e4:	8858      	ldrh	r0, [r3, #2]
 80077e6:	4288      	cmp	r0, r1
 80077e8:	d307      	bcc.n	80077fa <GUIMONO_IsInFont+0x2e>
 80077ea:	1a89      	subs	r1, r1, r2
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f933 2021 	ldrsh.w	r2, [r3, r1, lsl #2]
 80077f2:	2a00      	cmp	r2, #0
 80077f4:	db01      	blt.n	80077fa <GUIMONO_IsInFont+0x2e>
 80077f6:	2001      	movs	r0, #1
 80077f8:	4770      	bx	lr
 80077fa:	2000      	movs	r0, #0
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop

08007800 <_Log2VisBuffered>:
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop

08007804 <_DispLine>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	ab02      	add	r3, sp, #8
 800780a:	4c1a      	ldr	r4, [pc, #104]	; (8007874 <_DispLine+0x70>)
 800780c:	f843 1d08 	str.w	r1, [r3, #-8]!
 8007810:	4919      	ldr	r1, [pc, #100]	; (8007878 <_DispLine+0x74>)
 8007812:	9001      	str	r0, [sp, #4]
 8007814:	680d      	ldr	r5, [r1, #0]
 8007816:	4669      	mov	r1, sp
 8007818:	4616      	mov	r6, r2
 800781a:	47a8      	blx	r5
 800781c:	6822      	ldr	r2, [r4, #0]
 800781e:	9001      	str	r0, [sp, #4]
 8007820:	6950      	ldr	r0, [r2, #20]
 8007822:	b118      	cbz	r0, 800782c <_DispLine+0x28>
 8007824:	4631      	mov	r1, r6
 8007826:	f004 f8e9 	bl	800b9fc <GUI_RectsIntersect>
 800782a:	b168      	cbz	r0, 8007848 <_DispLine+0x44>
 800782c:	2001      	movs	r0, #1
 800782e:	f004 f85f 	bl	800b8f0 <GUI__ManageCache>
 8007832:	6820      	ldr	r0, [r4, #0]
 8007834:	69c3      	ldr	r3, [r0, #28]
 8007836:	6959      	ldr	r1, [r3, #20]
 8007838:	b141      	cbz	r1, 800784c <_DispLine+0x48>
 800783a:	688a      	ldr	r2, [r1, #8]
 800783c:	9801      	ldr	r0, [sp, #4]
 800783e:	9900      	ldr	r1, [sp, #0]
 8007840:	4790      	blx	r2
 8007842:	2000      	movs	r0, #0
 8007844:	f004 f854 	bl	800b8f0 <GUI__ManageCache>
 8007848:	b002      	add	sp, #8
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	4d0b      	ldr	r5, [pc, #44]	; (800787c <_DispLine+0x78>)
 800784e:	9a00      	ldr	r2, [sp, #0]
 8007850:	1e53      	subs	r3, r2, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	a801      	add	r0, sp, #4
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	dbf3      	blt.n	8007842 <_DispLine+0x3e>
 800785a:	f004 f85d 	bl	800b918 <GUI_UC__GetCharCodeInc>
 800785e:	6821      	ldr	r1, [r4, #0]
 8007860:	69ca      	ldr	r2, [r1, #28]
 8007862:	6813      	ldr	r3, [r2, #0]
 8007864:	4606      	mov	r6, r0
 8007866:	4798      	blx	r3
 8007868:	6829      	ldr	r1, [r5, #0]
 800786a:	2900      	cmp	r1, #0
 800786c:	d0ef      	beq.n	800784e <_DispLine+0x4a>
 800786e:	4630      	mov	r0, r6
 8007870:	4788      	blx	r1
 8007872:	e7ec      	b.n	800784e <_DispLine+0x4a>
 8007874:	1ffe8808 	.word	0x1ffe8808
 8007878:	1ffe880c 	.word	0x1ffe880c
 800787c:	1ffe9cf8 	.word	0x1ffe9cf8

08007880 <GUI__GetLineNumChars>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	460d      	mov	r5, r1
 8007886:	9001      	str	r0, [sp, #4]
 8007888:	4604      	mov	r4, r0
 800788a:	b140      	cbz	r0, 800789e <GUI__GetLineNumChars+0x1e>
 800788c:	4b1e      	ldr	r3, [pc, #120]	; (8007908 <GUI__GetLineNumChars+0x88>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	69d4      	ldr	r4, [r2, #28]
 8007892:	6963      	ldr	r3, [r4, #20]
 8007894:	b133      	cbz	r3, 80078a4 <GUI__GetLineNumChars+0x24>
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	b122      	cbz	r2, 80078a4 <GUI__GetLineNumChars+0x24>
 800789a:	4790      	blx	r2
 800789c:	4604      	mov	r4, r0
 800789e:	4620      	mov	r0, r4
 80078a0:	b002      	add	sp, #8
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	2400      	movs	r4, #0
 80078a6:	2d00      	cmp	r5, #0
 80078a8:	ddf9      	ble.n	800789e <GUI__GetLineNumChars+0x1e>
 80078aa:	1e69      	subs	r1, r5, #1
 80078ac:	a801      	add	r0, sp, #4
 80078ae:	f001 0601 	and.w	r6, r1, #1
 80078b2:	f004 f831 	bl	800b918 <GUI_UC__GetCharCodeInc>
 80078b6:	2400      	movs	r4, #0
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d0f0      	beq.n	800789e <GUI__GetLineNumChars+0x1e>
 80078bc:	280a      	cmp	r0, #10
 80078be:	d0ee      	beq.n	800789e <GUI__GetLineNumChars+0x1e>
 80078c0:	2401      	movs	r4, #1
 80078c2:	42ac      	cmp	r4, r5
 80078c4:	d0eb      	beq.n	800789e <GUI__GetLineNumChars+0x1e>
 80078c6:	b1b6      	cbz	r6, 80078f6 <GUI__GetLineNumChars+0x76>
 80078c8:	a801      	add	r0, sp, #4
 80078ca:	f004 f825 	bl	800b918 <GUI_UC__GetCharCodeInc>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d0e5      	beq.n	800789e <GUI__GetLineNumChars+0x1e>
 80078d2:	280a      	cmp	r0, #10
 80078d4:	d0e3      	beq.n	800789e <GUI__GetLineNumChars+0x1e>
 80078d6:	2402      	movs	r4, #2
 80078d8:	42ac      	cmp	r4, r5
 80078da:	d10c      	bne.n	80078f6 <GUI__GetLineNumChars+0x76>
 80078dc:	e7df      	b.n	800789e <GUI__GetLineNumChars+0x1e>
 80078de:	2b0a      	cmp	r3, #10
 80078e0:	d0dd      	beq.n	800789e <GUI__GetLineNumChars+0x1e>
 80078e2:	f004 f819 	bl	800b918 <GUI_UC__GetCharCodeInc>
 80078e6:	3401      	adds	r4, #1
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d0d8      	beq.n	800789e <GUI__GetLineNumChars+0x1e>
 80078ec:	280a      	cmp	r0, #10
 80078ee:	d0d6      	beq.n	800789e <GUI__GetLineNumChars+0x1e>
 80078f0:	3401      	adds	r4, #1
 80078f2:	42ac      	cmp	r4, r5
 80078f4:	d0d3      	beq.n	800789e <GUI__GetLineNumChars+0x1e>
 80078f6:	a801      	add	r0, sp, #4
 80078f8:	f004 f80e 	bl	800b918 <GUI_UC__GetCharCodeInc>
 80078fc:	4603      	mov	r3, r0
 80078fe:	a801      	add	r0, sp, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1ec      	bne.n	80078de <GUI__GetLineNumChars+0x5e>
 8007904:	e7cb      	b.n	800789e <GUI__GetLineNumChars+0x1e>
 8007906:	bf00      	nop
 8007908:	1ffe8808 	.word	0x1ffe8808

0800790c <GUI__GetLineDistX>:
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	ab04      	add	r3, sp, #16
 8007912:	4a1c      	ldr	r2, [pc, #112]	; (8007984 <GUI__GetLineDistX+0x78>)
 8007914:	f843 1d10 	str.w	r1, [r3, #-16]!
 8007918:	6814      	ldr	r4, [r2, #0]
 800791a:	9001      	str	r0, [sp, #4]
 800791c:	4669      	mov	r1, sp
 800791e:	47a0      	blx	r4
 8007920:	4604      	mov	r4, r0
 8007922:	9001      	str	r0, [sp, #4]
 8007924:	b140      	cbz	r0, 8007938 <GUI__GetLineDistX+0x2c>
 8007926:	4918      	ldr	r1, [pc, #96]	; (8007988 <GUI__GetLineDistX+0x7c>)
 8007928:	680b      	ldr	r3, [r1, #0]
 800792a:	69da      	ldr	r2, [r3, #28]
 800792c:	6951      	ldr	r1, [r2, #20]
 800792e:	b129      	cbz	r1, 800793c <GUI__GetLineDistX+0x30>
 8007930:	680b      	ldr	r3, [r1, #0]
 8007932:	b11b      	cbz	r3, 800793c <GUI__GetLineDistX+0x30>
 8007934:	9900      	ldr	r1, [sp, #0]
 8007936:	4798      	blx	r3
 8007938:	b004      	add	sp, #16
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	9800      	ldr	r0, [sp, #0]
 800793e:	1e45      	subs	r5, r0, #1
 8007940:	2400      	movs	r4, #0
 8007942:	2d00      	cmp	r5, #0
 8007944:	9500      	str	r5, [sp, #0]
 8007946:	db19      	blt.n	800797c <GUI__GetLineDistX+0x70>
 8007948:	a801      	add	r0, sp, #4
 800794a:	f003 ffe5 	bl	800b918 <GUI_UC__GetCharCodeInc>
 800794e:	4605      	mov	r5, r0
 8007950:	f000 f85c 	bl	8007a0c <GUI_GetCharDistX>
 8007954:	9e00      	ldr	r6, [sp, #0]
 8007956:	1e72      	subs	r2, r6, #1
 8007958:	2a00      	cmp	r2, #0
 800795a:	9200      	str	r2, [sp, #0]
 800795c:	4404      	add	r4, r0
 800795e:	daf3      	bge.n	8007948 <GUI__GetLineDistX+0x3c>
 8007960:	a904      	add	r1, sp, #16
 8007962:	2600      	movs	r6, #0
 8007964:	f841 6d04 	str.w	r6, [r1, #-4]!
 8007968:	4628      	mov	r0, r5
 800796a:	f000 f85b 	bl	8007a24 <GUI_GetCharDistXEx>
 800796e:	9903      	ldr	r1, [sp, #12]
 8007970:	4288      	cmp	r0, r1
 8007972:	bfb8      	it	lt
 8007974:	ebc0 0601 	rsblt	r6, r0, r1
 8007978:	19a0      	adds	r0, r4, r6
 800797a:	e7dd      	b.n	8007938 <GUI__GetLineDistX+0x2c>
 800797c:	2500      	movs	r5, #0
 800797e:	462c      	mov	r4, r5
 8007980:	e7ee      	b.n	8007960 <GUI__GetLineDistX+0x54>
 8007982:	bf00      	nop
 8007984:	1ffe880c 	.word	0x1ffe880c
 8007988:	1ffe8808 	.word	0x1ffe8808

0800798c <GUI__DispLine>:
 800798c:	b530      	push	{r4, r5, lr}
 800798e:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <GUI__DispLine+0x38>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	b083      	sub	sp, #12
 8007994:	4605      	mov	r5, r0
 8007996:	460c      	mov	r4, r1
 8007998:	b123      	cbz	r3, 80079a4 <GUI__DispLine+0x18>
 800799a:	466a      	mov	r2, sp
 800799c:	f7ff ff32 	bl	8007804 <_DispLine>
 80079a0:	b003      	add	sp, #12
 80079a2:	bd30      	pop	{r4, r5, pc}
 80079a4:	6810      	ldr	r0, [r2, #0]
 80079a6:	6851      	ldr	r1, [r2, #4]
 80079a8:	466a      	mov	r2, sp
 80079aa:	c203      	stmia	r2!, {r0, r1}
 80079ac:	4806      	ldr	r0, [pc, #24]	; (80079c8 <GUI__DispLine+0x3c>)
 80079ae:	f8bd 3000 	ldrh.w	r3, [sp]
 80079b2:	6801      	ldr	r1, [r0, #0]
 80079b4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80079b8:	844b      	strh	r3, [r1, #34]	; 0x22
 80079ba:	848a      	strh	r2, [r1, #36]	; 0x24
 80079bc:	4628      	mov	r0, r5
 80079be:	4621      	mov	r1, r4
 80079c0:	e7eb      	b.n	800799a <GUI__DispLine+0xe>
 80079c2:	bf00      	nop
 80079c4:	1ffe9ce0 	.word	0x1ffe9ce0
 80079c8:	1ffe8808 	.word	0x1ffe8808

080079cc <GUI_GetYAdjust>:
 80079cc:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <GUI_GetYAdjust+0x2c>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	8d90      	ldrh	r0, [r2, #44]	; 0x2c
 80079d2:	f000 010c 	and.w	r1, r0, #12
 80079d6:	2908      	cmp	r1, #8
 80079d8:	d005      	beq.n	80079e6 <GUI_GetYAdjust+0x1a>
 80079da:	290c      	cmp	r1, #12
 80079dc:	d003      	beq.n	80079e6 <GUI_GetYAdjust+0x1a>
 80079de:	2904      	cmp	r1, #4
 80079e0:	d005      	beq.n	80079ee <GUI_GetYAdjust+0x22>
 80079e2:	2000      	movs	r0, #0
 80079e4:	4770      	bx	lr
 80079e6:	69d0      	ldr	r0, [r2, #28]
 80079e8:	7e01      	ldrb	r1, [r0, #24]
 80079ea:	0848      	lsrs	r0, r1, #1
 80079ec:	4770      	bx	lr
 80079ee:	69d3      	ldr	r3, [r2, #28]
 80079f0:	7e1a      	ldrb	r2, [r3, #24]
 80079f2:	1e50      	subs	r0, r2, #1
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	1ffe8808 	.word	0x1ffe8808

080079fc <GUI_GetFontDistY>:
 80079fc:	f648 0308 	movw	r3, #34824	; 0x8808
 8007a00:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 8007a04:	6818      	ldr	r0, [r3, #0]
 8007a06:	69c1      	ldr	r1, [r0, #28]
 8007a08:	7e48      	ldrb	r0, [r1, #25]
 8007a0a:	4770      	bx	lr

08007a0c <GUI_GetCharDistX>:
 8007a0c:	b508      	push	{r3, lr}
 8007a0e:	f648 0308 	movw	r3, #34824	; 0x8808
 8007a12:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 8007a16:	2100      	movs	r1, #0
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	69d3      	ldr	r3, [r2, #28]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	4790      	blx	r2
 8007a20:	bd08      	pop	{r3, pc}
 8007a22:	bf00      	nop

08007a24 <GUI_GetCharDistXEx>:
 8007a24:	b508      	push	{r3, lr}
 8007a26:	f648 0308 	movw	r3, #34824	; 0x8808
 8007a2a:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	69d3      	ldr	r3, [r2, #28]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	4790      	blx	r2
 8007a36:	bd08      	pop	{r3, pc}

08007a38 <_OnExit>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	f649 5414 	movw	r4, #40212	; 0x9d14
 8007a3e:	2500      	movs	r5, #0
 8007a40:	f6c1 74fe 	movt	r4, #8190	; 0x1ffe
 8007a44:	2280      	movs	r2, #128	; 0x80
 8007a46:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 8007a50:	f7ff fa72 	bl	8006f38 <GUI__memset>
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	22c0      	movs	r2, #192	; 0xc0
 8007a5a:	f7ff fa6d 	bl	8006f38 <GUI__memset>
 8007a5e:	f648 2024 	movw	r0, #35364	; 0x8a24
 8007a62:	f6c1 70fe 	movt	r0, #8190	; 0x1ffe
 8007a66:	4629      	mov	r1, r5
 8007a68:	220c      	movs	r2, #12
 8007a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a6e:	f7ff ba63 	b.w	8006f38 <GUI__memset>
 8007a72:	bf00      	nop

08007a74 <_AddFreeMemory>:
 8007a74:	4bb3      	ldr	r3, [pc, #716]	; (8007d44 <_AddFreeMemory+0x2d0>)
 8007a76:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8007a7a:	68dc      	ldr	r4, [r3, #12]
 8007a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a7e:	1e66      	subs	r6, r4, #1
 8007a80:	1996      	adds	r6, r2, r6
 8007a82:	180c      	adds	r4, r1, r0
 8007a84:	42a6      	cmp	r6, r4
 8007a86:	460d      	mov	r5, r1
 8007a88:	d303      	bcc.n	8007a92 <_AddFreeMemory+0x1e>
 8007a8a:	580e      	ldr	r6, [r1, r0]
 8007a8c:	2e00      	cmp	r6, #0
 8007a8e:	f000 80d4 	beq.w	8007c3a <_AddFreeMemory+0x1c6>
 8007a92:	428a      	cmp	r2, r1
 8007a94:	d205      	bcs.n	8007aa2 <_AddFreeMemory+0x2e>
 8007a96:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8007a9a:	1a8c      	subs	r4, r1, r2
 8007a9c:	6826      	ldr	r6, [r4, #0]
 8007a9e:	2e00      	cmp	r6, #0
 8007aa0:	d070      	beq.n	8007b84 <_AddFreeMemory+0x110>
 8007aa2:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8007aa6:	4ea7      	ldr	r6, [pc, #668]	; (8007d44 <_AddFreeMemory+0x2d0>)
 8007aa8:	42a0      	cmp	r0, r4
 8007aaa:	f080 8115 	bcs.w	8007cd8 <_AddFreeMemory+0x264>
 8007aae:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 8007ab2:	4290      	cmp	r0, r2
 8007ab4:	f080 8112 	bcs.w	8007cdc <_AddFreeMemory+0x268>
 8007ab8:	f8d6 40a8 	ldr.w	r4, [r6, #168]	; 0xa8
 8007abc:	42a0      	cmp	r0, r4
 8007abe:	f080 810f 	bcs.w	8007ce0 <_AddFreeMemory+0x26c>
 8007ac2:	f8d6 20a0 	ldr.w	r2, [r6, #160]	; 0xa0
 8007ac6:	4290      	cmp	r0, r2
 8007ac8:	f080 810c 	bcs.w	8007ce4 <_AddFreeMemory+0x270>
 8007acc:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
 8007ad0:	42a0      	cmp	r0, r4
 8007ad2:	f080 8109 	bcs.w	8007ce8 <_AddFreeMemory+0x274>
 8007ad6:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8007ada:	4290      	cmp	r0, r2
 8007adc:	f080 8106 	bcs.w	8007cec <_AddFreeMemory+0x278>
 8007ae0:	f8d6 4088 	ldr.w	r4, [r6, #136]	; 0x88
 8007ae4:	42a0      	cmp	r0, r4
 8007ae6:	f080 8103 	bcs.w	8007cf0 <_AddFreeMemory+0x27c>
 8007aea:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 8007aee:	4290      	cmp	r0, r2
 8007af0:	f080 8100 	bcs.w	8007cf4 <_AddFreeMemory+0x280>
 8007af4:	6fb4      	ldr	r4, [r6, #120]	; 0x78
 8007af6:	42a0      	cmp	r0, r4
 8007af8:	f080 80fe 	bcs.w	8007cf8 <_AddFreeMemory+0x284>
 8007afc:	6f36      	ldr	r6, [r6, #112]	; 0x70
 8007afe:	42b0      	cmp	r0, r6
 8007b00:	f080 8107 	bcs.w	8007d12 <_AddFreeMemory+0x29e>
 8007b04:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8007b06:	4a8f      	ldr	r2, [pc, #572]	; (8007d44 <_AddFreeMemory+0x2d0>)
 8007b08:	42a0      	cmp	r0, r4
 8007b0a:	f080 8104 	bcs.w	8007d16 <_AddFreeMemory+0x2a2>
 8007b0e:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8007b10:	42b0      	cmp	r0, r6
 8007b12:	f080 8102 	bcs.w	8007d1a <_AddFreeMemory+0x2a6>
 8007b16:	6d94      	ldr	r4, [r2, #88]	; 0x58
 8007b18:	42a0      	cmp	r0, r4
 8007b1a:	f080 8100 	bcs.w	8007d1e <_AddFreeMemory+0x2aa>
 8007b1e:	6d16      	ldr	r6, [r2, #80]	; 0x50
 8007b20:	42b0      	cmp	r0, r6
 8007b22:	f080 80fe 	bcs.w	8007d22 <_AddFreeMemory+0x2ae>
 8007b26:	6c94      	ldr	r4, [r2, #72]	; 0x48
 8007b28:	42a0      	cmp	r0, r4
 8007b2a:	f080 80fc 	bcs.w	8007d26 <_AddFreeMemory+0x2b2>
 8007b2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007b30:	4290      	cmp	r0, r2
 8007b32:	bf34      	ite	cc
 8007b34:	f04f 34ff 	movcc.w	r4, #4294967295
 8007b38:	2400      	movcs	r4, #0
 8007b3a:	3408      	adds	r4, #8
 8007b3c:	eb03 06c4 	add.w	r6, r3, r4, lsl #3
 8007b40:	182d      	adds	r5, r5, r0
 8007b42:	6872      	ldr	r2, [r6, #4]
 8007b44:	6048      	str	r0, [r1, #4]
 8007b46:	2600      	movs	r6, #0
 8007b48:	600e      	str	r6, [r1, #0]
 8007b4a:	608a      	str	r2, [r1, #8]
 8007b4c:	6109      	str	r1, [r1, #16]
 8007b4e:	f101 0608 	add.w	r6, r1, #8
 8007b52:	f845 0c04 	str.w	r0, [r5, #-4]
 8007b56:	b102      	cbz	r2, 8007b5a <_AddFreeMemory+0xe6>
 8007b58:	6056      	str	r6, [r2, #4]
 8007b5a:	2500      	movs	r5, #0
 8007b5c:	60cd      	str	r5, [r1, #12]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	f893 5029 	ldrb.w	r5, [r3, #41]	; 0x29
 8007b64:	4977      	ldr	r1, [pc, #476]	; (8007d44 <_AddFreeMemory+0x2d0>)
 8007b66:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007b6a:	1882      	adds	r2, r0, r2
 8007b6c:	6066      	str	r6, [r4, #4]
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	b92d      	cbnz	r5, 8007b7e <_AddFreeMemory+0x10a>
 8007b72:	68cc      	ldr	r4, [r1, #12]
 8007b74:	688b      	ldr	r3, [r1, #8]
 8007b76:	1aa2      	subs	r2, r4, r2
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	bf88      	it	hi
 8007b7c:	608a      	strhi	r2, [r1, #8]
 8007b7e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8007b82:	4770      	bx	lr
 8007b84:	6862      	ldr	r2, [r4, #4]
 8007b86:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8007b8a:	496e      	ldr	r1, [pc, #440]	; (8007d44 <_AddFreeMemory+0x2d0>)
 8007b8c:	42aa      	cmp	r2, r5
 8007b8e:	4410      	add	r0, r2
 8007b90:	f080 80cb 	bcs.w	8007d2a <_AddFreeMemory+0x2b6>
 8007b94:	f8d1 70b0 	ldr.w	r7, [r1, #176]	; 0xb0
 8007b98:	42ba      	cmp	r2, r7
 8007b9a:	f080 80ce 	bcs.w	8007d3a <_AddFreeMemory+0x2c6>
 8007b9e:	f8d1 60a8 	ldr.w	r6, [r1, #168]	; 0xa8
 8007ba2:	42b2      	cmp	r2, r6
 8007ba4:	f080 80d5 	bcs.w	8007d52 <_AddFreeMemory+0x2de>
 8007ba8:	f8d1 50a0 	ldr.w	r5, [r1, #160]	; 0xa0
 8007bac:	42aa      	cmp	r2, r5
 8007bae:	f080 80ce 	bcs.w	8007d4e <_AddFreeMemory+0x2da>
 8007bb2:	f8d1 7098 	ldr.w	r7, [r1, #152]	; 0x98
 8007bb6:	42ba      	cmp	r2, r7
 8007bb8:	f080 80cf 	bcs.w	8007d5a <_AddFreeMemory+0x2e6>
 8007bbc:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
 8007bc0:	42b2      	cmp	r2, r6
 8007bc2:	f080 80c8 	bcs.w	8007d56 <_AddFreeMemory+0x2e2>
 8007bc6:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
 8007bca:	42aa      	cmp	r2, r5
 8007bcc:	f080 80cb 	bcs.w	8007d66 <_AddFreeMemory+0x2f2>
 8007bd0:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 8007bd4:	428a      	cmp	r2, r1
 8007bd6:	f080 80c4 	bcs.w	8007d62 <_AddFreeMemory+0x2ee>
 8007bda:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 8007bdc:	4e59      	ldr	r6, [pc, #356]	; (8007d44 <_AddFreeMemory+0x2d0>)
 8007bde:	42ba      	cmp	r2, r7
 8007be0:	f080 80bd 	bcs.w	8007d5e <_AddFreeMemory+0x2ea>
 8007be4:	6f35      	ldr	r5, [r6, #112]	; 0x70
 8007be6:	42aa      	cmp	r2, r5
 8007be8:	f080 80d7 	bcs.w	8007d9a <_AddFreeMemory+0x326>
 8007bec:	6eb1      	ldr	r1, [r6, #104]	; 0x68
 8007bee:	428a      	cmp	r2, r1
 8007bf0:	f080 80e1 	bcs.w	8007db6 <_AddFreeMemory+0x342>
 8007bf4:	6e37      	ldr	r7, [r6, #96]	; 0x60
 8007bf6:	42ba      	cmp	r2, r7
 8007bf8:	f080 80db 	bcs.w	8007db2 <_AddFreeMemory+0x33e>
 8007bfc:	6db5      	ldr	r5, [r6, #88]	; 0x58
 8007bfe:	42aa      	cmp	r2, r5
 8007c00:	f080 80d5 	bcs.w	8007dae <_AddFreeMemory+0x33a>
 8007c04:	6d31      	ldr	r1, [r6, #80]	; 0x50
 8007c06:	428a      	cmp	r2, r1
 8007c08:	f080 80cf 	bcs.w	8007daa <_AddFreeMemory+0x336>
 8007c0c:	6cb7      	ldr	r7, [r6, #72]	; 0x48
 8007c0e:	42ba      	cmp	r2, r7
 8007c10:	f080 80d6 	bcs.w	8007dc0 <_AddFreeMemory+0x34c>
 8007c14:	6c36      	ldr	r6, [r6, #64]	; 0x40
 8007c16:	42b2      	cmp	r2, r6
 8007c18:	bf34      	ite	cc
 8007c1a:	f04f 37ff 	movcc.w	r7, #4294967295
 8007c1e:	2700      	movcs	r7, #0
 8007c20:	681d      	ldr	r5, [r3, #0]
 8007c22:	68a1      	ldr	r1, [r4, #8]
 8007c24:	68e6      	ldr	r6, [r4, #12]
 8007c26:	1aaa      	subs	r2, r5, r2
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	b101      	cbz	r1, 8007c2e <_AddFreeMemory+0x1ba>
 8007c2c:	604e      	str	r6, [r1, #4]
 8007c2e:	2e00      	cmp	r6, #0
 8007c30:	d064      	beq.n	8007cfc <_AddFreeMemory+0x288>
 8007c32:	6031      	str	r1, [r6, #0]
 8007c34:	4625      	mov	r5, r4
 8007c36:	4621      	mov	r1, r4
 8007c38:	e733      	b.n	8007aa2 <_AddFreeMemory+0x2e>
 8007c3a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8007c3e:	f8d3 70b8 	ldr.w	r7, [r3, #184]	; 0xb8
 8007c42:	45bc      	cmp	ip, r7
 8007c44:	4460      	add	r0, ip
 8007c46:	d272      	bcs.n	8007d2e <_AddFreeMemory+0x2ba>
 8007c48:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 8007c4c:	45b4      	cmp	ip, r6
 8007c4e:	d27b      	bcs.n	8007d48 <_AddFreeMemory+0x2d4>
 8007c50:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 8007c54:	45bc      	cmp	ip, r7
 8007c56:	d272      	bcs.n	8007d3e <_AddFreeMemory+0x2ca>
 8007c58:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8007c5c:	45b4      	cmp	ip, r6
 8007c5e:	d269      	bcs.n	8007d34 <_AddFreeMemory+0x2c0>
 8007c60:	f8d3 7098 	ldr.w	r7, [r3, #152]	; 0x98
 8007c64:	45bc      	cmp	ip, r7
 8007c66:	f080 808c 	bcs.w	8007d82 <_AddFreeMemory+0x30e>
 8007c6a:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
 8007c6e:	45b4      	cmp	ip, r6
 8007c70:	f080 8084 	bcs.w	8007d7c <_AddFreeMemory+0x308>
 8007c74:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 8007c78:	45bc      	cmp	ip, r7
 8007c7a:	d27c      	bcs.n	8007d76 <_AddFreeMemory+0x302>
 8007c7c:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 8007c80:	45b4      	cmp	ip, r6
 8007c82:	d275      	bcs.n	8007d70 <_AddFreeMemory+0x2fc>
 8007c84:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 8007c86:	45bc      	cmp	ip, r7
 8007c88:	d26f      	bcs.n	8007d6a <_AddFreeMemory+0x2f6>
 8007c8a:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 8007c8c:	45bc      	cmp	ip, r7
 8007c8e:	f080 8089 	bcs.w	8007da4 <_AddFreeMemory+0x330>
 8007c92:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8007c94:	45bc      	cmp	ip, r7
 8007c96:	f080 8082 	bcs.w	8007d9e <_AddFreeMemory+0x32a>
 8007c9a:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 8007c9c:	45bc      	cmp	ip, r7
 8007c9e:	d279      	bcs.n	8007d94 <_AddFreeMemory+0x320>
 8007ca0:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 8007ca2:	45bc      	cmp	ip, r7
 8007ca4:	d273      	bcs.n	8007d8e <_AddFreeMemory+0x31a>
 8007ca6:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8007ca8:	45bc      	cmp	ip, r7
 8007caa:	d26d      	bcs.n	8007d88 <_AddFreeMemory+0x314>
 8007cac:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8007cae:	45bc      	cmp	ip, r7
 8007cb0:	f080 8083 	bcs.w	8007dba <_AddFreeMemory+0x346>
 8007cb4:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8007cb6:	45b4      	cmp	ip, r6
 8007cb8:	bf34      	ite	cc
 8007cba:	f04f 38ff 	movcc.w	r8, #4294967295
 8007cbe:	f04f 0800 	movcs.w	r8, #0
 8007cc2:	681e      	ldr	r6, [r3, #0]
 8007cc4:	68a7      	ldr	r7, [r4, #8]
 8007cc6:	68e4      	ldr	r4, [r4, #12]
 8007cc8:	ebcc 0606 	rsb	r6, ip, r6
 8007ccc:	601e      	str	r6, [r3, #0]
 8007cce:	b107      	cbz	r7, 8007cd2 <_AddFreeMemory+0x25e>
 8007cd0:	607c      	str	r4, [r7, #4]
 8007cd2:	b1cc      	cbz	r4, 8007d08 <_AddFreeMemory+0x294>
 8007cd4:	6027      	str	r7, [r4, #0]
 8007cd6:	e6dc      	b.n	8007a92 <_AddFreeMemory+0x1e>
 8007cd8:	240f      	movs	r4, #15
 8007cda:	e72e      	b.n	8007b3a <_AddFreeMemory+0xc6>
 8007cdc:	240e      	movs	r4, #14
 8007cde:	e72c      	b.n	8007b3a <_AddFreeMemory+0xc6>
 8007ce0:	240d      	movs	r4, #13
 8007ce2:	e72a      	b.n	8007b3a <_AddFreeMemory+0xc6>
 8007ce4:	240c      	movs	r4, #12
 8007ce6:	e728      	b.n	8007b3a <_AddFreeMemory+0xc6>
 8007ce8:	240b      	movs	r4, #11
 8007cea:	e726      	b.n	8007b3a <_AddFreeMemory+0xc6>
 8007cec:	240a      	movs	r4, #10
 8007cee:	e724      	b.n	8007b3a <_AddFreeMemory+0xc6>
 8007cf0:	2409      	movs	r4, #9
 8007cf2:	e722      	b.n	8007b3a <_AddFreeMemory+0xc6>
 8007cf4:	2408      	movs	r4, #8
 8007cf6:	e720      	b.n	8007b3a <_AddFreeMemory+0xc6>
 8007cf8:	2407      	movs	r4, #7
 8007cfa:	e71e      	b.n	8007b3a <_AddFreeMemory+0xc6>
 8007cfc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007d00:	4625      	mov	r5, r4
 8007d02:	6479      	str	r1, [r7, #68]	; 0x44
 8007d04:	4621      	mov	r1, r4
 8007d06:	e6cc      	b.n	8007aa2 <_AddFreeMemory+0x2e>
 8007d08:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007d0c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8007d10:	e6bf      	b.n	8007a92 <_AddFreeMemory+0x1e>
 8007d12:	2406      	movs	r4, #6
 8007d14:	e711      	b.n	8007b3a <_AddFreeMemory+0xc6>
 8007d16:	2405      	movs	r4, #5
 8007d18:	e70f      	b.n	8007b3a <_AddFreeMemory+0xc6>
 8007d1a:	2404      	movs	r4, #4
 8007d1c:	e70d      	b.n	8007b3a <_AddFreeMemory+0xc6>
 8007d1e:	2403      	movs	r4, #3
 8007d20:	e70b      	b.n	8007b3a <_AddFreeMemory+0xc6>
 8007d22:	2402      	movs	r4, #2
 8007d24:	e709      	b.n	8007b3a <_AddFreeMemory+0xc6>
 8007d26:	2401      	movs	r4, #1
 8007d28:	e707      	b.n	8007b3a <_AddFreeMemory+0xc6>
 8007d2a:	270f      	movs	r7, #15
 8007d2c:	e778      	b.n	8007c20 <_AddFreeMemory+0x1ac>
 8007d2e:	f04f 080f 	mov.w	r8, #15
 8007d32:	e7c6      	b.n	8007cc2 <_AddFreeMemory+0x24e>
 8007d34:	f04f 080c 	mov.w	r8, #12
 8007d38:	e7c3      	b.n	8007cc2 <_AddFreeMemory+0x24e>
 8007d3a:	270e      	movs	r7, #14
 8007d3c:	e770      	b.n	8007c20 <_AddFreeMemory+0x1ac>
 8007d3e:	f04f 080d 	mov.w	r8, #13
 8007d42:	e7be      	b.n	8007cc2 <_AddFreeMemory+0x24e>
 8007d44:	1ffe9d14 	.word	0x1ffe9d14
 8007d48:	f04f 080e 	mov.w	r8, #14
 8007d4c:	e7b9      	b.n	8007cc2 <_AddFreeMemory+0x24e>
 8007d4e:	270c      	movs	r7, #12
 8007d50:	e766      	b.n	8007c20 <_AddFreeMemory+0x1ac>
 8007d52:	270d      	movs	r7, #13
 8007d54:	e764      	b.n	8007c20 <_AddFreeMemory+0x1ac>
 8007d56:	270a      	movs	r7, #10
 8007d58:	e762      	b.n	8007c20 <_AddFreeMemory+0x1ac>
 8007d5a:	270b      	movs	r7, #11
 8007d5c:	e760      	b.n	8007c20 <_AddFreeMemory+0x1ac>
 8007d5e:	2707      	movs	r7, #7
 8007d60:	e75e      	b.n	8007c20 <_AddFreeMemory+0x1ac>
 8007d62:	2708      	movs	r7, #8
 8007d64:	e75c      	b.n	8007c20 <_AddFreeMemory+0x1ac>
 8007d66:	2709      	movs	r7, #9
 8007d68:	e75a      	b.n	8007c20 <_AddFreeMemory+0x1ac>
 8007d6a:	f04f 0807 	mov.w	r8, #7
 8007d6e:	e7a8      	b.n	8007cc2 <_AddFreeMemory+0x24e>
 8007d70:	f04f 0808 	mov.w	r8, #8
 8007d74:	e7a5      	b.n	8007cc2 <_AddFreeMemory+0x24e>
 8007d76:	f04f 0809 	mov.w	r8, #9
 8007d7a:	e7a2      	b.n	8007cc2 <_AddFreeMemory+0x24e>
 8007d7c:	f04f 080a 	mov.w	r8, #10
 8007d80:	e79f      	b.n	8007cc2 <_AddFreeMemory+0x24e>
 8007d82:	f04f 080b 	mov.w	r8, #11
 8007d86:	e79c      	b.n	8007cc2 <_AddFreeMemory+0x24e>
 8007d88:	f04f 0802 	mov.w	r8, #2
 8007d8c:	e799      	b.n	8007cc2 <_AddFreeMemory+0x24e>
 8007d8e:	f04f 0803 	mov.w	r8, #3
 8007d92:	e796      	b.n	8007cc2 <_AddFreeMemory+0x24e>
 8007d94:	f04f 0804 	mov.w	r8, #4
 8007d98:	e793      	b.n	8007cc2 <_AddFreeMemory+0x24e>
 8007d9a:	2706      	movs	r7, #6
 8007d9c:	e740      	b.n	8007c20 <_AddFreeMemory+0x1ac>
 8007d9e:	f04f 0805 	mov.w	r8, #5
 8007da2:	e78e      	b.n	8007cc2 <_AddFreeMemory+0x24e>
 8007da4:	f04f 0806 	mov.w	r8, #6
 8007da8:	e78b      	b.n	8007cc2 <_AddFreeMemory+0x24e>
 8007daa:	2702      	movs	r7, #2
 8007dac:	e738      	b.n	8007c20 <_AddFreeMemory+0x1ac>
 8007dae:	2703      	movs	r7, #3
 8007db0:	e736      	b.n	8007c20 <_AddFreeMemory+0x1ac>
 8007db2:	2704      	movs	r7, #4
 8007db4:	e734      	b.n	8007c20 <_AddFreeMemory+0x1ac>
 8007db6:	2705      	movs	r7, #5
 8007db8:	e732      	b.n	8007c20 <_AddFreeMemory+0x1ac>
 8007dba:	f04f 0801 	mov.w	r8, #1
 8007dbe:	e780      	b.n	8007cc2 <_AddFreeMemory+0x24e>
 8007dc0:	2701      	movs	r7, #1
 8007dc2:	e72d      	b.n	8007c20 <_AddFreeMemory+0x1ac>

08007dc4 <_RemoveHoles>:
 8007dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc8:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8007f9c <_RemoveHoles+0x1d8>
 8007dcc:	f8d8 4038 	ldr.w	r4, [r8, #56]	; 0x38
 8007dd0:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8007dd4:	e894 0060 	ldmia.w	r4, {r5, r6}
 8007dd8:	1e79      	subs	r1, r7, #1
 8007dda:	b083      	sub	sp, #12
 8007ddc:	4683      	mov	fp, r0
 8007dde:	190f      	adds	r7, r1, r4
 8007de0:	46c1      	mov	r9, r8
 8007de2:	b135      	cbz	r5, 8007df2 <_RemoveHoles+0x2e>
 8007de4:	19a4      	adds	r4, r4, r6
 8007de6:	42a7      	cmp	r7, r4
 8007de8:	d914      	bls.n	8007e14 <_RemoveHoles+0x50>
 8007dea:	e894 0060 	ldmia.w	r4, {r5, r6}
 8007dee:	2d00      	cmp	r5, #0
 8007df0:	d1f8      	bne.n	8007de4 <_RemoveHoles+0x20>
 8007df2:	1931      	adds	r1, r6, r4
 8007df4:	428f      	cmp	r7, r1
 8007df6:	d90d      	bls.n	8007e14 <_RemoveHoles+0x50>
 8007df8:	5935      	ldr	r5, [r6, r4]
 8007dfa:	684b      	ldr	r3, [r1, #4]
 8007dfc:	b175      	cbz	r5, 8007e1c <_RemoveHoles+0x58>
 8007dfe:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8007e02:	f812 0035 	ldrb.w	r0, [r2, r5, lsl #3]
 8007e06:	2801      	cmp	r0, #1
 8007e08:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8007e0c:	d00c      	beq.n	8007e28 <_RemoveHoles+0x64>
 8007e0e:	461e      	mov	r6, r3
 8007e10:	460c      	mov	r4, r1
 8007e12:	e7e6      	b.n	8007de2 <_RemoveHoles+0x1e>
 8007e14:	2001      	movs	r0, #1
 8007e16:	b003      	add	sp, #12
 8007e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1c:	461e      	mov	r6, r3
 8007e1e:	460c      	mov	r4, r1
 8007e20:	1931      	adds	r1, r6, r4
 8007e22:	428f      	cmp	r7, r1
 8007e24:	d8e8      	bhi.n	8007df8 <_RemoveHoles+0x34>
 8007e26:	e7f5      	b.n	8007e14 <_RemoveHoles+0x50>
 8007e28:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 8007e2c:	f8d9 a02c 	ldr.w	sl, [r9, #44]	; 0x2c
 8007e30:	42b0      	cmp	r0, r6
 8007e32:	d978      	bls.n	8007f26 <_RemoveHoles+0x162>
 8007e34:	f8d9 00b0 	ldr.w	r0, [r9, #176]	; 0xb0
 8007e38:	42b0      	cmp	r0, r6
 8007e3a:	d977      	bls.n	8007f2c <_RemoveHoles+0x168>
 8007e3c:	f8d9 00a8 	ldr.w	r0, [r9, #168]	; 0xa8
 8007e40:	42b0      	cmp	r0, r6
 8007e42:	d97d      	bls.n	8007f40 <_RemoveHoles+0x17c>
 8007e44:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 8007e48:	42b0      	cmp	r0, r6
 8007e4a:	d974      	bls.n	8007f36 <_RemoveHoles+0x172>
 8007e4c:	f8d9 0098 	ldr.w	r0, [r9, #152]	; 0x98
 8007e50:	42b0      	cmp	r0, r6
 8007e52:	f240 8085 	bls.w	8007f60 <_RemoveHoles+0x19c>
 8007e56:	f8d9 0090 	ldr.w	r0, [r9, #144]	; 0x90
 8007e5a:	42b0      	cmp	r0, r6
 8007e5c:	d97b      	bls.n	8007f56 <_RemoveHoles+0x192>
 8007e5e:	f8d8 0088 	ldr.w	r0, [r8, #136]	; 0x88
 8007e62:	42b0      	cmp	r0, r6
 8007e64:	d974      	bls.n	8007f50 <_RemoveHoles+0x18c>
 8007e66:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
 8007e6a:	4286      	cmp	r6, r0
 8007e6c:	d26b      	bcs.n	8007f46 <_RemoveHoles+0x182>
 8007e6e:	f8d9 0078 	ldr.w	r0, [r9, #120]	; 0x78
 8007e72:	4286      	cmp	r6, r0
 8007e74:	f080 8087 	bcs.w	8007f86 <_RemoveHoles+0x1c2>
 8007e78:	f8d9 0070 	ldr.w	r0, [r9, #112]	; 0x70
 8007e7c:	4286      	cmp	r6, r0
 8007e7e:	d27d      	bcs.n	8007f7c <_RemoveHoles+0x1b8>
 8007e80:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
 8007e84:	4286      	cmp	r6, r0
 8007e86:	d276      	bcs.n	8007f76 <_RemoveHoles+0x1b2>
 8007e88:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 8007e8c:	4286      	cmp	r6, r0
 8007e8e:	d26d      	bcs.n	8007f6c <_RemoveHoles+0x1a8>
 8007e90:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8007e94:	4286      	cmp	r6, r0
 8007e96:	d266      	bcs.n	8007f66 <_RemoveHoles+0x1a2>
 8007e98:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 8007e9c:	4286      	cmp	r6, r0
 8007e9e:	d278      	bcs.n	8007f92 <_RemoveHoles+0x1ce>
 8007ea0:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
 8007ea4:	4286      	cmp	r6, r0
 8007ea6:	d271      	bcs.n	8007f8c <_RemoveHoles+0x1c8>
 8007ea8:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 8007eac:	4286      	cmp	r6, r0
 8007eae:	bf34      	ite	cc
 8007eb0:	f04f 30ff 	movcc.w	r0, #4294967295
 8007eb4:	2000      	movcs	r0, #0
 8007eb6:	9001      	str	r0, [sp, #4]
 8007eb8:	f8d8 0000 	ldr.w	r0, [r8]
 8007ebc:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8007ec0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8007ec4:	1b80      	subs	r0, r0, r6
 8007ec6:	f8c8 0000 	str.w	r0, [r8]
 8007eca:	f1be 0f00 	cmp.w	lr, #0
 8007ece:	d001      	beq.n	8007ed4 <_RemoveHoles+0x110>
 8007ed0:	f8ce c004 	str.w	ip, [lr, #4]
 8007ed4:	f1bc 0f00 	cmp.w	ip, #0
 8007ed8:	d01e      	beq.n	8007f18 <_RemoveHoles+0x154>
 8007eda:	f8cc e000 	str.w	lr, [ip]
 8007ede:	6054      	str	r4, [r2, #4]
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	f005 fe00 	bl	800daea <memmove>
 8007eea:	4555      	cmp	r5, sl
 8007eec:	9900      	ldr	r1, [sp, #0]
 8007eee:	d00d      	beq.n	8007f0c <_RemoveHoles+0x148>
 8007ef0:	1864      	adds	r4, r4, r1
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	f7ff fdbd 	bl	8007a74 <_AddFreeMemory>
 8007efa:	f1bb 0f00 	cmp.w	fp, #0
 8007efe:	f43f af72 	beq.w	8007de6 <_RemoveHoles+0x22>
 8007f02:	4558      	cmp	r0, fp
 8007f04:	f4ff af6f 	bcc.w	8007de6 <_RemoveHoles+0x22>
 8007f08:	2000      	movs	r0, #0
 8007f0a:	e784      	b.n	8007e16 <_RemoveHoles+0x52>
 8007f0c:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8007f10:	1b9a      	subs	r2, r3, r6
 8007f12:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
 8007f16:	e7eb      	b.n	8007ef0 <_RemoveHoles+0x12c>
 8007f18:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007f1c:	eb08 00cc 	add.w	r0, r8, ip, lsl #3
 8007f20:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
 8007f24:	e7db      	b.n	8007ede <_RemoveHoles+0x11a>
 8007f26:	200f      	movs	r0, #15
 8007f28:	9001      	str	r0, [sp, #4]
 8007f2a:	e7c5      	b.n	8007eb8 <_RemoveHoles+0xf4>
 8007f2c:	f04f 0c0e 	mov.w	ip, #14
 8007f30:	f8cd c004 	str.w	ip, [sp, #4]
 8007f34:	e7c0      	b.n	8007eb8 <_RemoveHoles+0xf4>
 8007f36:	f04f 0e0c 	mov.w	lr, #12
 8007f3a:	f8cd e004 	str.w	lr, [sp, #4]
 8007f3e:	e7bb      	b.n	8007eb8 <_RemoveHoles+0xf4>
 8007f40:	200d      	movs	r0, #13
 8007f42:	9001      	str	r0, [sp, #4]
 8007f44:	e7b8      	b.n	8007eb8 <_RemoveHoles+0xf4>
 8007f46:	f04f 0e08 	mov.w	lr, #8
 8007f4a:	f8cd e004 	str.w	lr, [sp, #4]
 8007f4e:	e7b3      	b.n	8007eb8 <_RemoveHoles+0xf4>
 8007f50:	2009      	movs	r0, #9
 8007f52:	9001      	str	r0, [sp, #4]
 8007f54:	e7b0      	b.n	8007eb8 <_RemoveHoles+0xf4>
 8007f56:	f04f 0c0a 	mov.w	ip, #10
 8007f5a:	f8cd c004 	str.w	ip, [sp, #4]
 8007f5e:	e7ab      	b.n	8007eb8 <_RemoveHoles+0xf4>
 8007f60:	200b      	movs	r0, #11
 8007f62:	9001      	str	r0, [sp, #4]
 8007f64:	e7a8      	b.n	8007eb8 <_RemoveHoles+0xf4>
 8007f66:	2003      	movs	r0, #3
 8007f68:	9001      	str	r0, [sp, #4]
 8007f6a:	e7a5      	b.n	8007eb8 <_RemoveHoles+0xf4>
 8007f6c:	f04f 0e04 	mov.w	lr, #4
 8007f70:	f8cd e004 	str.w	lr, [sp, #4]
 8007f74:	e7a0      	b.n	8007eb8 <_RemoveHoles+0xf4>
 8007f76:	2005      	movs	r0, #5
 8007f78:	9001      	str	r0, [sp, #4]
 8007f7a:	e79d      	b.n	8007eb8 <_RemoveHoles+0xf4>
 8007f7c:	f04f 0c06 	mov.w	ip, #6
 8007f80:	f8cd c004 	str.w	ip, [sp, #4]
 8007f84:	e798      	b.n	8007eb8 <_RemoveHoles+0xf4>
 8007f86:	2007      	movs	r0, #7
 8007f88:	9001      	str	r0, [sp, #4]
 8007f8a:	e795      	b.n	8007eb8 <_RemoveHoles+0xf4>
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	9001      	str	r0, [sp, #4]
 8007f90:	e792      	b.n	8007eb8 <_RemoveHoles+0xf4>
 8007f92:	f04f 0c02 	mov.w	ip, #2
 8007f96:	f8cd c004 	str.w	ip, [sp, #4]
 8007f9a:	e78d      	b.n	8007eb8 <_RemoveHoles+0xf4>
 8007f9c:	1ffe9d14 	.word	0x1ffe9d14

08007fa0 <_Alloc>:
 8007fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa4:	4cb2      	ldr	r4, [pc, #712]	; (8008270 <_Alloc+0x2d0>)
 8007fa6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007faa:	4605      	mov	r5, r0
 8007fac:	b90b      	cbnz	r3, 8007fb2 <_Alloc+0x12>
 8007fae:	f000 f9f3 	bl	8008398 <_InitOnce.part.0>
 8007fb2:	6c26      	ldr	r6, [r4, #64]	; 0x40
 8007fb4:	42b5      	cmp	r5, r6
 8007fb6:	d302      	bcc.n	8007fbe <_Alloc+0x1e>
 8007fb8:	1ce8      	adds	r0, r5, #3
 8007fba:	f020 0603 	bic.w	r6, r0, #3
 8007fbe:	6821      	ldr	r1, [r4, #0]
 8007fc0:	4dab      	ldr	r5, [pc, #684]	; (8008270 <_Alloc+0x2d0>)
 8007fc2:	360c      	adds	r6, #12
 8007fc4:	42b1      	cmp	r1, r6
 8007fc6:	d203      	bcs.n	8007fd0 <_Alloc+0x30>
 8007fc8:	2500      	movs	r5, #0
 8007fca:	4628      	mov	r0, r5
 8007fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fd0:	6868      	ldr	r0, [r5, #4]
 8007fd2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8007fd4:	4290      	cmp	r0, r2
 8007fd6:	d971      	bls.n	80080bc <_Alloc+0x11c>
 8007fd8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007fda:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007fdc:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8007fe0:	1e43      	subs	r3, r0, #1
 8007fe2:	eb02 0108 	add.w	r1, r2, r8
 8007fe6:	6063      	str	r3, [r4, #4]
 8007fe8:	6848      	ldr	r0, [r1, #4]
 8007fea:	2301      	movs	r3, #1
 8007fec:	6260      	str	r0, [r4, #36]	; 0x24
 8007fee:	f802 3035 	strb.w	r3, [r2, r5, lsl #3]
 8007ff2:	2d00      	cmp	r5, #0
 8007ff4:	d0e8      	beq.n	8007fc8 <_Alloc+0x28>
 8007ff6:	f8df 9278 	ldr.w	r9, [pc, #632]	; 8008270 <_Alloc+0x2d0>
 8007ffa:	f8d4 70b8 	ldr.w	r7, [r4, #184]	; 0xb8
 8007ffe:	42be      	cmp	r6, r7
 8008000:	d268      	bcs.n	80080d4 <_Alloc+0x134>
 8008002:	f8d9 20b0 	ldr.w	r2, [r9, #176]	; 0xb0
 8008006:	4296      	cmp	r6, r2
 8008008:	f080 80e2 	bcs.w	80081d0 <_Alloc+0x230>
 800800c:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 8008010:	428e      	cmp	r6, r1
 8008012:	f080 80df 	bcs.w	80081d4 <_Alloc+0x234>
 8008016:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 800801a:	4286      	cmp	r6, r0
 800801c:	f080 80dc 	bcs.w	80081d8 <_Alloc+0x238>
 8008020:	f8d9 3098 	ldr.w	r3, [r9, #152]	; 0x98
 8008024:	429e      	cmp	r6, r3
 8008026:	f080 80d9 	bcs.w	80081dc <_Alloc+0x23c>
 800802a:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
 800802e:	4296      	cmp	r6, r2
 8008030:	f080 80d6 	bcs.w	80081e0 <_Alloc+0x240>
 8008034:	f8d9 1088 	ldr.w	r1, [r9, #136]	; 0x88
 8008038:	428e      	cmp	r6, r1
 800803a:	f080 80d3 	bcs.w	80081e4 <_Alloc+0x244>
 800803e:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
 8008042:	4286      	cmp	r6, r0
 8008044:	f080 80d2 	bcs.w	80081ec <_Alloc+0x24c>
 8008048:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
 800804c:	429e      	cmp	r6, r3
 800804e:	f080 80cb 	bcs.w	80081e8 <_Alloc+0x248>
 8008052:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
 8008056:	4296      	cmp	r6, r2
 8008058:	f080 80d1 	bcs.w	80081fe <_Alloc+0x25e>
 800805c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800805e:	428e      	cmp	r6, r1
 8008060:	f080 80cb 	bcs.w	80081fa <_Alloc+0x25a>
 8008064:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 8008068:	4286      	cmp	r6, r0
 800806a:	f080 80ca 	bcs.w	8008202 <_Alloc+0x262>
 800806e:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 8008072:	429e      	cmp	r6, r3
 8008074:	f080 80c7 	bcs.w	8008206 <_Alloc+0x266>
 8008078:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
 800807c:	4296      	cmp	r6, r2
 800807e:	f080 80c4 	bcs.w	800820a <_Alloc+0x26a>
 8008082:	f8d9 1048 	ldr.w	r1, [r9, #72]	; 0x48
 8008086:	428e      	cmp	r6, r1
 8008088:	f080 80c1 	bcs.w	800820e <_Alloc+0x26e>
 800808c:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 8008090:	4286      	cmp	r6, r0
 8008092:	f080 80be 	bcs.w	8008212 <_Alloc+0x272>
 8008096:	4630      	mov	r0, r6
 8008098:	f7ff fe94 	bl	8007dc4 <_RemoveHoles>
 800809c:	2800      	cmp	r0, #0
 800809e:	d0ac      	beq.n	8007ffa <_Alloc+0x5a>
 80080a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80080a2:	6860      	ldr	r0, [r4, #4]
 80080a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80080a6:	eb02 0608 	add.w	r6, r2, r8
 80080aa:	2300      	movs	r3, #0
 80080ac:	3001      	adds	r0, #1
 80080ae:	6060      	str	r0, [r4, #4]
 80080b0:	6071      	str	r1, [r6, #4]
 80080b2:	f802 3008 	strb.w	r3, [r2, r8]
 80080b6:	6265      	str	r5, [r4, #36]	; 0x24
 80080b8:	461d      	mov	r5, r3
 80080ba:	e786      	b.n	8007fca <_Alloc+0x2a>
 80080bc:	1e53      	subs	r3, r2, #1
 80080be:	632b      	str	r3, [r5, #48]	; 0x30
 80080c0:	f000 f8d8 	bl	8008274 <_EnlargeBlocks>
 80080c4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80080c6:	1c4a      	adds	r2, r1, #1
 80080c8:	632a      	str	r2, [r5, #48]	; 0x30
 80080ca:	2800      	cmp	r0, #0
 80080cc:	f47f af7c 	bne.w	8007fc8 <_Alloc+0x28>
 80080d0:	6868      	ldr	r0, [r5, #4]
 80080d2:	e781      	b.n	8007fd8 <_Alloc+0x38>
 80080d4:	200f      	movs	r0, #15
 80080d6:	eb04 0cc0 	add.w	ip, r4, r0, lsl #3
 80080da:	2100      	movs	r1, #0
 80080dc:	eb0c 0301 	add.w	r3, ip, r1
 80080e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080e2:	b162      	cbz	r2, 80080fe <_Alloc+0x15e>
 80080e4:	6893      	ldr	r3, [r2, #8]
 80080e6:	b153      	cbz	r3, 80080fe <_Alloc+0x15e>
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	4296      	cmp	r6, r2
 80080ec:	d804      	bhi.n	80080f8 <_Alloc+0x158>
 80080ee:	e00b      	b.n	8008108 <_Alloc+0x168>
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	4296      	cmp	r6, r2
 80080f6:	d907      	bls.n	8008108 <_Alloc+0x168>
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1f8      	bne.n	80080f0 <_Alloc+0x150>
 80080fe:	3001      	adds	r0, #1
 8008100:	3108      	adds	r1, #8
 8008102:	280f      	cmp	r0, #15
 8008104:	d9ea      	bls.n	80080dc <_Alloc+0x13c>
 8008106:	e7c6      	b.n	8008096 <_Alloc+0xf6>
 8008108:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800810a:	ebc6 0c02 	rsb	ip, r6, r2
 800810e:	f101 000c 	add.w	r0, r1, #12
 8008112:	4584      	cmp	ip, r0
 8008114:	bf2c      	ite	cs
 8008116:	4630      	movcs	r0, r6
 8008118:	4610      	movcc	r0, r2
 800811a:	42ba      	cmp	r2, r7
 800811c:	f080 8081 	bcs.w	8008222 <_Alloc+0x282>
 8008120:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
 8008124:	4e52      	ldr	r6, [pc, #328]	; (8008270 <_Alloc+0x2d0>)
 8008126:	42ba      	cmp	r2, r7
 8008128:	d278      	bcs.n	800821c <_Alloc+0x27c>
 800812a:	f8d6 70a8 	ldr.w	r7, [r6, #168]	; 0xa8
 800812e:	42ba      	cmp	r2, r7
 8008130:	d271      	bcs.n	8008216 <_Alloc+0x276>
 8008132:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 8008136:	42ba      	cmp	r2, r7
 8008138:	f080 8088 	bcs.w	800824c <_Alloc+0x2ac>
 800813c:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
 8008140:	42ba      	cmp	r2, r7
 8008142:	f080 808f 	bcs.w	8008264 <_Alloc+0x2c4>
 8008146:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 800814a:	42ba      	cmp	r2, r7
 800814c:	f080 8087 	bcs.w	800825e <_Alloc+0x2be>
 8008150:	f8d6 7088 	ldr.w	r7, [r6, #136]	; 0x88
 8008154:	42ba      	cmp	r2, r7
 8008156:	d27f      	bcs.n	8008258 <_Alloc+0x2b8>
 8008158:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800815c:	42ba      	cmp	r2, r7
 800815e:	d278      	bcs.n	8008252 <_Alloc+0x2b2>
 8008160:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 8008162:	42ba      	cmp	r2, r7
 8008164:	d269      	bcs.n	800823a <_Alloc+0x29a>
 8008166:	6f36      	ldr	r6, [r6, #112]	; 0x70
 8008168:	42b2      	cmp	r2, r6
 800816a:	d263      	bcs.n	8008234 <_Alloc+0x294>
 800816c:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 800816e:	4f40      	ldr	r7, [pc, #256]	; (8008270 <_Alloc+0x2d0>)
 8008170:	42b2      	cmp	r2, r6
 8008172:	d25c      	bcs.n	800822e <_Alloc+0x28e>
 8008174:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 8008176:	42b2      	cmp	r2, r6
 8008178:	d256      	bcs.n	8008228 <_Alloc+0x288>
 800817a:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 800817c:	42b2      	cmp	r2, r6
 800817e:	d262      	bcs.n	8008246 <_Alloc+0x2a6>
 8008180:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8008182:	42b2      	cmp	r2, r6
 8008184:	d25c      	bcs.n	8008240 <_Alloc+0x2a0>
 8008186:	6cbf      	ldr	r7, [r7, #72]	; 0x48
 8008188:	42ba      	cmp	r2, r7
 800818a:	d26e      	bcs.n	800826a <_Alloc+0x2ca>
 800818c:	4291      	cmp	r1, r2
 800818e:	bf8c      	ite	hi
 8008190:	f04f 3cff 	movhi.w	ip, #4294967295
 8008194:	f04f 0c00 	movls.w	ip, #0
 8008198:	6827      	ldr	r7, [r4, #0]
 800819a:	689e      	ldr	r6, [r3, #8]
 800819c:	68d9      	ldr	r1, [r3, #12]
 800819e:	1abf      	subs	r7, r7, r2
 80081a0:	6027      	str	r7, [r4, #0]
 80081a2:	b106      	cbz	r6, 80081a6 <_Alloc+0x206>
 80081a4:	6071      	str	r1, [r6, #4]
 80081a6:	b319      	cbz	r1, 80081f0 <_Alloc+0x250>
 80081a8:	600e      	str	r6, [r1, #0]
 80081aa:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80081ac:	1819      	adds	r1, r3, r0
 80081ae:	44a0      	add	r8, r4
 80081b0:	2400      	movs	r4, #0
 80081b2:	4290      	cmp	r0, r2
 80081b4:	f8c8 3004 	str.w	r3, [r8, #4]
 80081b8:	601d      	str	r5, [r3, #0]
 80081ba:	6058      	str	r0, [r3, #4]
 80081bc:	609c      	str	r4, [r3, #8]
 80081be:	611b      	str	r3, [r3, #16]
 80081c0:	f841 0c04 	str.w	r0, [r1, #-4]
 80081c4:	f6bf af01 	bge.w	8007fca <_Alloc+0x2a>
 80081c8:	1a10      	subs	r0, r2, r0
 80081ca:	f7ff fc53 	bl	8007a74 <_AddFreeMemory>
 80081ce:	e6fc      	b.n	8007fca <_Alloc+0x2a>
 80081d0:	200e      	movs	r0, #14
 80081d2:	e780      	b.n	80080d6 <_Alloc+0x136>
 80081d4:	200d      	movs	r0, #13
 80081d6:	e77e      	b.n	80080d6 <_Alloc+0x136>
 80081d8:	200c      	movs	r0, #12
 80081da:	e77c      	b.n	80080d6 <_Alloc+0x136>
 80081dc:	200b      	movs	r0, #11
 80081de:	e77a      	b.n	80080d6 <_Alloc+0x136>
 80081e0:	200a      	movs	r0, #10
 80081e2:	e778      	b.n	80080d6 <_Alloc+0x136>
 80081e4:	2009      	movs	r0, #9
 80081e6:	e776      	b.n	80080d6 <_Alloc+0x136>
 80081e8:	2007      	movs	r0, #7
 80081ea:	e774      	b.n	80080d6 <_Alloc+0x136>
 80081ec:	2008      	movs	r0, #8
 80081ee:	e772      	b.n	80080d6 <_Alloc+0x136>
 80081f0:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80081f4:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 80081f8:	e7d7      	b.n	80081aa <_Alloc+0x20a>
 80081fa:	2005      	movs	r0, #5
 80081fc:	e76b      	b.n	80080d6 <_Alloc+0x136>
 80081fe:	2006      	movs	r0, #6
 8008200:	e769      	b.n	80080d6 <_Alloc+0x136>
 8008202:	2004      	movs	r0, #4
 8008204:	e767      	b.n	80080d6 <_Alloc+0x136>
 8008206:	2003      	movs	r0, #3
 8008208:	e765      	b.n	80080d6 <_Alloc+0x136>
 800820a:	2002      	movs	r0, #2
 800820c:	e763      	b.n	80080d6 <_Alloc+0x136>
 800820e:	2001      	movs	r0, #1
 8008210:	e761      	b.n	80080d6 <_Alloc+0x136>
 8008212:	2000      	movs	r0, #0
 8008214:	e75f      	b.n	80080d6 <_Alloc+0x136>
 8008216:	f04f 0c0d 	mov.w	ip, #13
 800821a:	e7bd      	b.n	8008198 <_Alloc+0x1f8>
 800821c:	f04f 0c0e 	mov.w	ip, #14
 8008220:	e7ba      	b.n	8008198 <_Alloc+0x1f8>
 8008222:	f04f 0c0f 	mov.w	ip, #15
 8008226:	e7b7      	b.n	8008198 <_Alloc+0x1f8>
 8008228:	f04f 0c04 	mov.w	ip, #4
 800822c:	e7b4      	b.n	8008198 <_Alloc+0x1f8>
 800822e:	f04f 0c05 	mov.w	ip, #5
 8008232:	e7b1      	b.n	8008198 <_Alloc+0x1f8>
 8008234:	f04f 0c06 	mov.w	ip, #6
 8008238:	e7ae      	b.n	8008198 <_Alloc+0x1f8>
 800823a:	f04f 0c07 	mov.w	ip, #7
 800823e:	e7ab      	b.n	8008198 <_Alloc+0x1f8>
 8008240:	f04f 0c02 	mov.w	ip, #2
 8008244:	e7a8      	b.n	8008198 <_Alloc+0x1f8>
 8008246:	f04f 0c03 	mov.w	ip, #3
 800824a:	e7a5      	b.n	8008198 <_Alloc+0x1f8>
 800824c:	f04f 0c0c 	mov.w	ip, #12
 8008250:	e7a2      	b.n	8008198 <_Alloc+0x1f8>
 8008252:	f04f 0c08 	mov.w	ip, #8
 8008256:	e79f      	b.n	8008198 <_Alloc+0x1f8>
 8008258:	f04f 0c09 	mov.w	ip, #9
 800825c:	e79c      	b.n	8008198 <_Alloc+0x1f8>
 800825e:	f04f 0c0a 	mov.w	ip, #10
 8008262:	e799      	b.n	8008198 <_Alloc+0x1f8>
 8008264:	f04f 0c0b 	mov.w	ip, #11
 8008268:	e796      	b.n	8008198 <_Alloc+0x1f8>
 800826a:	f04f 0c01 	mov.w	ip, #1
 800826e:	e793      	b.n	8008198 <_Alloc+0x1f8>
 8008270:	1ffe9d14 	.word	0x1ffe9d14

08008274 <_EnlargeBlocks>:
 8008274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008278:	4c45      	ldr	r4, [pc, #276]	; (8008390 <_EnlargeBlocks+0x11c>)
 800827a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800827c:	b98b      	cbnz	r3, 80082a2 <_EnlargeBlocks+0x2e>
 800827e:	4945      	ldr	r1, [pc, #276]	; (8008394 <_EnlargeBlocks+0x120>)
 8008280:	688a      	ldr	r2, [r1, #8]
 8008282:	684d      	ldr	r5, [r1, #4]
 8008284:	f102 0308 	add.w	r3, r2, #8
 8008288:	fbb5 f0f3 	udiv	r0, r5, r3
 800828c:	f100 0802 	add.w	r8, r0, #2
 8008290:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 8008294:	f7ff fe84 	bl	8007fa0 <_Alloc>
 8008298:	4605      	mov	r5, r0
 800829a:	b970      	cbnz	r0, 80082ba <_EnlargeBlocks+0x46>
 800829c:	2001      	movs	r0, #1
 800829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a2:	6920      	ldr	r0, [r4, #16]
 80082a4:	f100 0804 	add.w	r8, r0, #4
 80082a8:	eb08 08d0 	add.w	r8, r8, r0, lsr #3
 80082ac:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 80082b0:	f7ff fe76 	bl	8007fa0 <_Alloc>
 80082b4:	4605      	mov	r5, r0
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d0f0      	beq.n	800829c <_EnlargeBlocks+0x28>
 80082ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082bc:	6926      	ldr	r6, [r4, #16]
 80082be:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 80082c2:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	f102 0908 	add.w	r9, r2, #8
 80082cc:	4648      	mov	r0, r9
 80082ce:	00f2      	lsls	r2, r6, #3
 80082d0:	f005 fc00 	bl	800dad4 <memcpy>
 80082d4:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80082d8:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 80082dc:	f108 37ff 	add.w	r7, r8, #4294967295
 80082e0:	45bc      	cmp	ip, r7
 80082e2:	62e5      	str	r5, [r4, #44]	; 0x2c
 80082e4:	d23e      	bcs.n	8008364 <_EnlargeBlocks+0xf0>
 80082e6:	f10c 0301 	add.w	r3, ip, #1
 80082ea:	eb09 06cc 	add.w	r6, r9, ip, lsl #3
 80082ee:	ea6f 010c 	mvn.w	r1, ip
 80082f2:	19cd      	adds	r5, r1, r7
 80082f4:	2208      	movs	r2, #8
 80082f6:	42bb      	cmp	r3, r7
 80082f8:	6073      	str	r3, [r6, #4]
 80082fa:	f005 0001 	and.w	r0, r5, #1
 80082fe:	d011      	beq.n	8008324 <_EnlargeBlocks+0xb0>
 8008300:	b120      	cbz	r0, 800830c <_EnlargeBlocks+0x98>
 8008302:	3301      	adds	r3, #1
 8008304:	2210      	movs	r2, #16
 8008306:	42bb      	cmp	r3, r7
 8008308:	60f3      	str	r3, [r6, #12]
 800830a:	d00b      	beq.n	8008324 <_EnlargeBlocks+0xb0>
 800830c:	f102 0108 	add.w	r1, r2, #8
 8008310:	1c5d      	adds	r5, r3, #1
 8008312:	18b2      	adds	r2, r6, r2
 8008314:	3302      	adds	r3, #2
 8008316:	1870      	adds	r0, r6, r1
 8008318:	42bb      	cmp	r3, r7
 800831a:	6055      	str	r5, [r2, #4]
 800831c:	f101 0208 	add.w	r2, r1, #8
 8008320:	6043      	str	r3, [r0, #4]
 8008322:	d1f3      	bne.n	800830c <_EnlargeBlocks+0x98>
 8008324:	eb09 06c3 	add.w	r6, r9, r3, lsl #3
 8008328:	2500      	movs	r5, #0
 800832a:	6075      	str	r5, [r6, #4]
 800832c:	6863      	ldr	r3, [r4, #4]
 800832e:	4e18      	ldr	r6, [pc, #96]	; (8008390 <_EnlargeBlocks+0x11c>)
 8008330:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
 8008334:	ebcc 0103 	rsb	r1, ip, r3
 8008338:	eb01 0208 	add.w	r2, r1, r8
 800833c:	6062      	str	r2, [r4, #4]
 800833e:	f8c4 8010 	str.w	r8, [r4, #16]
 8008342:	f1ba 0f00 	cmp.w	sl, #0
 8008346:	d102      	bne.n	800834e <_EnlargeBlocks+0xda>
 8008348:	4650      	mov	r0, sl
 800834a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834e:	f819 003a 	ldrb.w	r0, [r9, sl, lsl #3]
 8008352:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8008356:	44a1      	add	r9, r4
 8008358:	b110      	cbz	r0, 8008360 <_EnlargeBlocks+0xec>
 800835a:	2801      	cmp	r0, #1
 800835c:	d904      	bls.n	8008368 <_EnlargeBlocks+0xf4>
 800835e:	4628      	mov	r0, r5
 8008360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008364:	4663      	mov	r3, ip
 8008366:	e7dd      	b.n	8008324 <_EnlargeBlocks+0xb0>
 8008368:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800836c:	6848      	ldr	r0, [r1, #4]
 800836e:	f7ff fb81 	bl	8007a74 <_AddFreeMemory>
 8008372:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008374:	6870      	ldr	r0, [r6, #4]
 8008376:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008378:	191c      	adds	r4, r3, r4
 800837a:	1c41      	adds	r1, r0, #1
 800837c:	6071      	str	r1, [r6, #4]
 800837e:	4628      	mov	r0, r5
 8008380:	6062      	str	r2, [r4, #4]
 8008382:	f803 503a 	strb.w	r5, [r3, sl, lsl #3]
 8008386:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800838a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838e:	bf00      	nop
 8008390:	1ffe9d14 	.word	0x1ffe9d14
 8008394:	1ffe8a24 	.word	0x1ffe8a24

08008398 <_InitOnce.part.0>:
 8008398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	4fb8      	ldr	r7, [pc, #736]	; (8008680 <_InitOnce.part.0+0x2e8>)
 800839e:	4cb9      	ldr	r4, [pc, #740]	; (8008684 <_InitOnce.part.0+0x2ec>)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	683e      	ldr	r6, [r7, #0]
 80083a4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80083a8:	bf34      	ite	cc
 80083aa:	469e      	movcc	lr, r3
 80083ac:	f44f 5e20 	movcs.w	lr, #10240	; 0x2800
 80083b0:	ea4f 0c9e 	mov.w	ip, lr, lsr #2
 80083b4:	f248 0281 	movw	r2, #32897	; 0x8081
 80083b8:	2001      	movs	r0, #1
 80083ba:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 80083be:	4665      	mov	r5, ip
 80083c0:	f04f 0a00 	mov.w	sl, #0
 80083c4:	f2c8 0280 	movt	r2, #32896	; 0x8080
 80083c8:	f1bc 0f00 	cmp.w	ip, #0
 80083cc:	f000 826e 	beq.w	80088ac <_InitOnce.part.0+0x514>
 80083d0:	fba2 010a 	umull	r0, r1, r2, sl
 80083d4:	09cb      	lsrs	r3, r1, #7
 80083d6:	ebc3 2003 	rsb	r0, r3, r3, lsl #8
 80083da:	46b0      	mov	r8, r6
 80083dc:	ebc0 010a 	rsb	r1, r0, sl
 80083e0:	ebc5 030a 	rsb	r3, r5, sl
 80083e4:	43d8      	mvns	r0, r3
 80083e6:	f848 1b04 	str.w	r1, [r8], #4
 80083ea:	f10a 0301 	add.w	r3, sl, #1
 80083ee:	f248 0981 	movw	r9, #32897	; 0x8081
 80083f2:	429d      	cmp	r5, r3
 80083f4:	f000 0101 	and.w	r1, r0, #1
 80083f8:	f2c8 0980 	movt	r9, #32896	; 0x8080
 80083fc:	f108 0804 	add.w	r8, r8, #4
 8008400:	d02c      	beq.n	800845c <_InitOnce.part.0+0xc4>
 8008402:	b161      	cbz	r1, 800841e <_InitOnce.part.0+0x86>
 8008404:	fba2 0103 	umull	r0, r1, r2, r3
 8008408:	09c8      	lsrs	r0, r1, #7
 800840a:	ebc0 2100 	rsb	r1, r0, r0, lsl #8
 800840e:	1a58      	subs	r0, r3, r1
 8008410:	3301      	adds	r3, #1
 8008412:	429d      	cmp	r5, r3
 8008414:	f848 0c04 	str.w	r0, [r8, #-4]
 8008418:	f108 0804 	add.w	r8, r8, #4
 800841c:	d01e      	beq.n	800845c <_InitOnce.part.0+0xc4>
 800841e:	1c58      	adds	r0, r3, #1
 8008420:	fba2 1b03 	umull	r1, fp, r2, r3
 8008424:	fba2 1900 	umull	r1, r9, r2, r0
 8008428:	ea4f 1bdb 	mov.w	fp, fp, lsr #7
 800842c:	ea4f 19d9 	mov.w	r9, r9, lsr #7
 8008430:	4641      	mov	r1, r8
 8008432:	ebc9 2909 	rsb	r9, r9, r9, lsl #8
 8008436:	ebcb 2b0b 	rsb	fp, fp, fp, lsl #8
 800843a:	ebcb 0b03 	rsb	fp, fp, r3
 800843e:	ebc9 0300 	rsb	r3, r9, r0
 8008442:	f848 bc04 	str.w	fp, [r8, #-4]
 8008446:	f841 3b04 	str.w	r3, [r1], #4
 800844a:	1c43      	adds	r3, r0, #1
 800844c:	f248 0981 	movw	r9, #32897	; 0x8081
 8008450:	429d      	cmp	r5, r3
 8008452:	f2c8 0980 	movt	r9, #32896	; 0x8080
 8008456:	f101 0804 	add.w	r8, r1, #4
 800845a:	d1e0      	bne.n	800841e <_InitOnce.part.0+0x86>
 800845c:	fba9 300a 	umull	r3, r0, r9, sl
 8008460:	ea4f 11d0 	mov.w	r1, r0, lsr #7
 8008464:	ebc1 2901 	rsb	r9, r1, r1, lsl #8
 8008468:	6833      	ldr	r3, [r6, #0]
 800846a:	ebc9 090a 	rsb	r9, r9, sl
 800846e:	454b      	cmp	r3, r9
 8008470:	d115      	bne.n	800849e <_InitOnce.part.0+0x106>
 8008472:	f10a 0a01 	add.w	sl, sl, #1
 8008476:	ebca 0005 	rsb	r0, sl, r5
 800847a:	07c0      	lsls	r0, r0, #31
 800847c:	4631      	mov	r1, r6
 800847e:	4653      	mov	r3, sl
 8008480:	d56b      	bpl.n	800855a <_InitOnce.part.0+0x1c2>
 8008482:	fba2 b30a 	umull	fp, r3, r2, sl
 8008486:	4631      	mov	r1, r6
 8008488:	09d8      	lsrs	r0, r3, #7
 800848a:	ebc0 2300 	rsb	r3, r0, r0, lsl #8
 800848e:	f851 8f04 	ldr.w	r8, [r1, #4]!
 8008492:	ebc3 000a 	rsb	r0, r3, sl
 8008496:	4580      	cmp	r8, r0
 8008498:	f10a 0301 	add.w	r3, sl, #1
 800849c:	d05d      	beq.n	800855a <_InitOnce.part.0+0x1c2>
 800849e:	68b9      	ldr	r1, [r7, #8]
 80084a0:	4877      	ldr	r0, [pc, #476]	; (8008680 <_InitOnce.part.0+0x2e8>)
 80084a2:	b911      	cbnz	r1, 80084aa <_InitOnce.part.0+0x112>
 80084a4:	6845      	ldr	r5, [r0, #4]
 80084a6:	08ab      	lsrs	r3, r5, #2
 80084a8:	6083      	str	r3, [r0, #8]
 80084aa:	4a77      	ldr	r2, [pc, #476]	; (8008688 <_InitOnce.part.0+0x2f0>)
 80084ac:	4877      	ldr	r0, [pc, #476]	; (800868c <_InitOnce.part.0+0x2f4>)
 80084ae:	60fa      	str	r2, [r7, #12]
 80084b0:	f7ff f816 	bl	80074e0 <GUI__RegisterExit>
 80084b4:	225a      	movs	r2, #90	; 0x5a
 80084b6:	6222      	str	r2, [r4, #32]
 80084b8:	2210      	movs	r2, #16
 80084ba:	6422      	str	r2, [r4, #64]	; 0x40
 80084bc:	2220      	movs	r2, #32
 80084be:	64a2      	str	r2, [r4, #72]	; 0x48
 80084c0:	2240      	movs	r2, #64	; 0x40
 80084c2:	6522      	str	r2, [r4, #80]	; 0x50
 80084c4:	2280      	movs	r2, #128	; 0x80
 80084c6:	65a2      	str	r2, [r4, #88]	; 0x58
 80084c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084cc:	6622      	str	r2, [r4, #96]	; 0x60
 80084ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084d2:	66a2      	str	r2, [r4, #104]	; 0x68
 80084d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80084d8:	6722      	str	r2, [r4, #112]	; 0x70
 80084da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084de:	67a2      	str	r2, [r4, #120]	; 0x78
 80084e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80084e4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 80084e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80084ec:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 80084f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80084f4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80084f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 8008502:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 800850c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008510:	f1a0 0514 	sub.w	r5, r0, #20
 8008514:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
 8008518:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800851c:	194b      	adds	r3, r1, r5
 800851e:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8008522:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008526:	2501      	movs	r5, #1
 8008528:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
 800852c:	2202      	movs	r2, #2
 800852e:	6122      	str	r2, [r4, #16]
 8008530:	6363      	str	r3, [r4, #52]	; 0x34
 8008532:	63a1      	str	r1, [r4, #56]	; 0x38
 8008534:	60e0      	str	r0, [r4, #12]
 8008536:	605d      	str	r5, [r3, #4]
 8008538:	6265      	str	r5, [r4, #36]	; 0x24
 800853a:	6065      	str	r5, [r4, #4]
 800853c:	f7ff fa9a 	bl	8007a74 <_AddFreeMemory>
 8008540:	f7ff fe98 	bl	8008274 <_EnlargeBlocks>
 8008544:	6325      	str	r5, [r4, #48]	; 0x30
 8008546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854a:	f851 9f04 	ldr.w	r9, [r1, #4]!
 800854e:	45c1      	cmp	r9, r8
 8008550:	d1a5      	bne.n	800849e <_InitOnce.part.0+0x106>
 8008552:	f851 8f04 	ldr.w	r8, [r1, #4]!
 8008556:	4580      	cmp	r8, r0
 8008558:	d1a1      	bne.n	800849e <_InitOnce.part.0+0x106>
 800855a:	fba2 8003 	umull	r8, r0, r2, r3
 800855e:	09c0      	lsrs	r0, r0, #7
 8008560:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 8008564:	ebc0 0803 	rsb	r8, r0, r3
 8008568:	42ab      	cmp	r3, r5
 800856a:	f103 0301 	add.w	r3, r3, #1
 800856e:	fba2 9003 	umull	r9, r0, r2, r3
 8008572:	ea4f 10d0 	mov.w	r0, r0, lsr #7
 8008576:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 800857a:	ebc0 0003 	rsb	r0, r0, r3
 800857e:	f103 0301 	add.w	r3, r3, #1
 8008582:	d1e2      	bne.n	800854a <_InitOnce.part.0+0x1b2>
 8008584:	3501      	adds	r5, #1
 8008586:	f1ba 0f02 	cmp.w	sl, #2
 800858a:	f47f af1d 	bne.w	80083c8 <_InitOnce.part.0+0x30>
 800858e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8008592:	f248 0281 	movw	r2, #32897	; 0x8081
 8008596:	4665      	mov	r5, ip
 8008598:	f04f 0b00 	mov.w	fp, #0
 800859c:	f2c8 0280 	movt	r2, #32896	; 0x8080
 80085a0:	f1bc 0f00 	cmp.w	ip, #0
 80085a4:	f000 8185 	beq.w	80088b2 <_InitOnce.part.0+0x51a>
 80085a8:	fba2 a10b 	umull	sl, r1, r2, fp
 80085ac:	09cb      	lsrs	r3, r1, #7
 80085ae:	ebc3 2003 	rsb	r0, r3, r3, lsl #8
 80085b2:	46b2      	mov	sl, r6
 80085b4:	ebc0 010b 	rsb	r1, r0, fp
 80085b8:	ebc5 030b 	rsb	r3, r5, fp
 80085bc:	43d8      	mvns	r0, r3
 80085be:	f82a 1b02 	strh.w	r1, [sl], #2
 80085c2:	f10b 0301 	add.w	r3, fp, #1
 80085c6:	f248 0981 	movw	r9, #32897	; 0x8081
 80085ca:	429d      	cmp	r5, r3
 80085cc:	f000 0101 	and.w	r1, r0, #1
 80085d0:	f2c8 0980 	movt	r9, #32896	; 0x8080
 80085d4:	f10a 0802 	add.w	r8, sl, #2
 80085d8:	d02c      	beq.n	8008634 <_InitOnce.part.0+0x29c>
 80085da:	b161      	cbz	r1, 80085f6 <_InitOnce.part.0+0x25e>
 80085dc:	fba2 a003 	umull	sl, r0, r2, r3
 80085e0:	09c1      	lsrs	r1, r0, #7
 80085e2:	ebc1 2001 	rsb	r0, r1, r1, lsl #8
 80085e6:	1a19      	subs	r1, r3, r0
 80085e8:	3301      	adds	r3, #1
 80085ea:	429d      	cmp	r5, r3
 80085ec:	f828 1c02 	strh.w	r1, [r8, #-2]
 80085f0:	f108 0802 	add.w	r8, r8, #2
 80085f4:	d01e      	beq.n	8008634 <_InitOnce.part.0+0x29c>
 80085f6:	1c58      	adds	r0, r3, #1
 80085f8:	fba2 1a03 	umull	r1, sl, r2, r3
 80085fc:	fba2 1900 	umull	r1, r9, r2, r0
 8008600:	ea4f 1ada 	mov.w	sl, sl, lsr #7
 8008604:	ea4f 19d9 	mov.w	r9, r9, lsr #7
 8008608:	4641      	mov	r1, r8
 800860a:	ebc9 2909 	rsb	r9, r9, r9, lsl #8
 800860e:	ebca 2a0a 	rsb	sl, sl, sl, lsl #8
 8008612:	ebca 0a03 	rsb	sl, sl, r3
 8008616:	ebc9 0000 	rsb	r0, r9, r0
 800861a:	f828 ac02 	strh.w	sl, [r8, #-2]
 800861e:	3302      	adds	r3, #2
 8008620:	f821 0b02 	strh.w	r0, [r1], #2
 8008624:	f248 0981 	movw	r9, #32897	; 0x8081
 8008628:	429d      	cmp	r5, r3
 800862a:	f2c8 0980 	movt	r9, #32896	; 0x8080
 800862e:	f101 0802 	add.w	r8, r1, #2
 8008632:	d1e0      	bne.n	80085f6 <_InitOnce.part.0+0x25e>
 8008634:	fba9 310b 	umull	r3, r1, r9, fp
 8008638:	ea4f 13d1 	mov.w	r3, r1, lsr #7
 800863c:	ebc3 2903 	rsb	r9, r3, r3, lsl #8
 8008640:	ebc9 000b 	rsb	r0, r9, fp
 8008644:	8831      	ldrh	r1, [r6, #0]
 8008646:	b283      	uxth	r3, r0
 8008648:	4299      	cmp	r1, r3
 800864a:	f47f af28 	bne.w	800849e <_InitOnce.part.0+0x106>
 800864e:	f10b 0b01 	add.w	fp, fp, #1
 8008652:	ebcb 0005 	rsb	r0, fp, r5
 8008656:	07c0      	lsls	r0, r0, #31
 8008658:	4631      	mov	r1, r6
 800865a:	465b      	mov	r3, fp
 800865c:	d522      	bpl.n	80086a4 <_InitOnce.part.0+0x30c>
 800865e:	fba2 030b 	umull	r0, r3, r2, fp
 8008662:	09d8      	lsrs	r0, r3, #7
 8008664:	4631      	mov	r1, r6
 8008666:	ebc0 2300 	rsb	r3, r0, r0, lsl #8
 800866a:	ebc3 000b 	rsb	r0, r3, fp
 800866e:	f831 8f02 	ldrh.w	r8, [r1, #2]!
 8008672:	b280      	uxth	r0, r0
 8008674:	4580      	cmp	r8, r0
 8008676:	f10b 0301 	add.w	r3, fp, #1
 800867a:	d013      	beq.n	80086a4 <_InitOnce.part.0+0x30c>
 800867c:	e70f      	b.n	800849e <_InitOnce.part.0+0x106>
 800867e:	bf00      	nop
 8008680:	1ffe8a24 	.word	0x1ffe8a24
 8008684:	1ffe9d14 	.word	0x1ffe9d14
 8008688:	08007a39 	.word	0x08007a39
 800868c:	1ffe8a30 	.word	0x1ffe8a30
 8008690:	f831 9f02 	ldrh.w	r9, [r1, #2]!
 8008694:	45c1      	cmp	r9, r8
 8008696:	f47f af02 	bne.w	800849e <_InitOnce.part.0+0x106>
 800869a:	f831 8f02 	ldrh.w	r8, [r1, #2]!
 800869e:	4580      	cmp	r8, r0
 80086a0:	f47f aefd 	bne.w	800849e <_InitOnce.part.0+0x106>
 80086a4:	fba2 8003 	umull	r8, r0, r2, r3
 80086a8:	09c0      	lsrs	r0, r0, #7
 80086aa:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 80086ae:	ebc0 0803 	rsb	r8, r0, r3
 80086b2:	429d      	cmp	r5, r3
 80086b4:	f103 0301 	add.w	r3, r3, #1
 80086b8:	fba2 9003 	umull	r9, r0, r2, r3
 80086bc:	ea4f 10d0 	mov.w	r0, r0, lsr #7
 80086c0:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 80086c4:	ebc0 0003 	rsb	r0, r0, r3
 80086c8:	fa1f f888 	uxth.w	r8, r8
 80086cc:	b280      	uxth	r0, r0
 80086ce:	f103 0301 	add.w	r3, r3, #1
 80086d2:	d1dd      	bne.n	8008690 <_InitOnce.part.0+0x2f8>
 80086d4:	3501      	adds	r5, #1
 80086d6:	f1bb 0f02 	cmp.w	fp, #2
 80086da:	f47f af61 	bne.w	80085a0 <_InitOnce.part.0+0x208>
 80086de:	f248 0181 	movw	r1, #32897	; 0x8081
 80086e2:	eb0e 0206 	add.w	r2, lr, r6
 80086e6:	2500      	movs	r5, #0
 80086e8:	f2c8 0180 	movt	r1, #32896	; 0x8080
 80086ec:	f102 3cff 	add.w	ip, r2, #4294967295
 80086f0:	f1be 0f00 	cmp.w	lr, #0
 80086f4:	f000 80e5 	beq.w	80088c2 <_InitOnce.part.0+0x52a>
 80086f8:	43e8      	mvns	r0, r5
 80086fa:	eb05 0a0e 	add.w	sl, r5, lr
 80086fe:	ebc5 0806 	rsb	r8, r5, r6
 8008702:	fba1 b905 	umull	fp, r9, r1, r5
 8008706:	1c6b      	adds	r3, r5, #1
 8008708:	eb00 020a 	add.w	r2, r0, sl
 800870c:	eb05 19d9 	add.w	r9, r5, r9, lsr #7
 8008710:	f248 0081 	movw	r0, #32897	; 0x8081
 8008714:	4553      	cmp	r3, sl
 8008716:	f808 9005 	strb.w	r9, [r8, r5]
 800871a:	f002 0201 	and.w	r2, r2, #1
 800871e:	f2c8 0080 	movt	r0, #32896	; 0x8080
 8008722:	d01d      	beq.n	8008760 <_InitOnce.part.0+0x3c8>
 8008724:	b142      	cbz	r2, 8008738 <_InitOnce.part.0+0x3a0>
 8008726:	fba1 b203 	umull	fp, r2, r1, r3
 800872a:	eb03 12d2 	add.w	r2, r3, r2, lsr #7
 800872e:	f808 2003 	strb.w	r2, [r8, r3]
 8008732:	3301      	adds	r3, #1
 8008734:	4553      	cmp	r3, sl
 8008736:	d013      	beq.n	8008760 <_InitOnce.part.0+0x3c8>
 8008738:	fba1 9003 	umull	r9, r0, r1, r3
 800873c:	1c5a      	adds	r2, r3, #1
 800873e:	eb03 10d0 	add.w	r0, r3, r0, lsr #7
 8008742:	f808 0003 	strb.w	r0, [r8, r3]
 8008746:	fba1 b902 	umull	fp, r9, r1, r2
 800874a:	3302      	adds	r3, #2
 800874c:	f248 0081 	movw	r0, #32897	; 0x8081
 8008750:	eb02 19d9 	add.w	r9, r2, r9, lsr #7
 8008754:	4553      	cmp	r3, sl
 8008756:	f808 9002 	strb.w	r9, [r8, r2]
 800875a:	f2c8 0080 	movt	r0, #32896	; 0x8080
 800875e:	d1eb      	bne.n	8008738 <_InitOnce.part.0+0x3a0>
 8008760:	fba0 2305 	umull	r2, r3, r0, r5
 8008764:	eb05 10d3 	add.w	r0, r5, r3, lsr #7
 8008768:	7832      	ldrb	r2, [r6, #0]
 800876a:	f000 03ff 	and.w	r3, r0, #255	; 0xff
 800876e:	429a      	cmp	r2, r3
 8008770:	f47f ae95 	bne.w	800849e <_InitOnce.part.0+0x106>
 8008774:	ebc6 020c 	rsb	r2, r6, ip
 8008778:	07d2      	lsls	r2, r2, #31
 800877a:	4633      	mov	r3, r6
 800877c:	ebc6 0005 	rsb	r0, r6, r5
 8008780:	d528      	bpl.n	80087d4 <_InitOnce.part.0+0x43c>
 8008782:	4633      	mov	r3, r6
 8008784:	f813 8f01 	ldrb.w	r8, [r3, #1]!
 8008788:	18c2      	adds	r2, r0, r3
 800878a:	fba1 b902 	umull	fp, r9, r1, r2
 800878e:	eb02 12d9 	add.w	r2, r2, r9, lsr #7
 8008792:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 8008796:	4590      	cmp	r8, r2
 8008798:	f47f ae81 	bne.w	800849e <_InitOnce.part.0+0x106>
 800879c:	4563      	cmp	r3, ip
 800879e:	461a      	mov	r2, r3
 80087a0:	d01b      	beq.n	80087da <_InitOnce.part.0+0x442>
 80087a2:	f812 8f01 	ldrb.w	r8, [r2, #1]!
 80087a6:	4613      	mov	r3, r2
 80087a8:	1882      	adds	r2, r0, r2
 80087aa:	fba1 a902 	umull	sl, r9, r1, r2
 80087ae:	eb02 12d9 	add.w	r2, r2, r9, lsr #7
 80087b2:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 80087b6:	4590      	cmp	r8, r2
 80087b8:	f47f ae71 	bne.w	800849e <_InitOnce.part.0+0x106>
 80087bc:	f813 8f01 	ldrb.w	r8, [r3, #1]!
 80087c0:	18c2      	adds	r2, r0, r3
 80087c2:	fba1 a902 	umull	sl, r9, r1, r2
 80087c6:	eb02 12d9 	add.w	r2, r2, r9, lsr #7
 80087ca:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 80087ce:	4590      	cmp	r8, r2
 80087d0:	f47f ae65 	bne.w	800849e <_InitOnce.part.0+0x106>
 80087d4:	4563      	cmp	r3, ip
 80087d6:	461a      	mov	r2, r3
 80087d8:	d1e3      	bne.n	80087a2 <_InitOnce.part.0+0x40a>
 80087da:	3501      	adds	r5, #1
 80087dc:	2d02      	cmp	r5, #2
 80087de:	d187      	bne.n	80086f0 <_InitOnce.part.0+0x358>
 80087e0:	4271      	negs	r1, r6
 80087e2:	f001 0003 	and.w	r0, r1, #3
 80087e6:	4570      	cmp	r0, lr
 80087e8:	bf28      	it	cs
 80087ea:	4670      	movcs	r0, lr
 80087ec:	f1be 0f03 	cmp.w	lr, #3
 80087f0:	bf98      	it	ls
 80087f2:	4670      	movls	r0, lr
 80087f4:	d860      	bhi.n	80088b8 <_InitOnce.part.0+0x520>
 80087f6:	4633      	mov	r3, r6
 80087f8:	2500      	movs	r5, #0
 80087fa:	2201      	movs	r2, #1
 80087fc:	f803 5b01 	strb.w	r5, [r3], #1
 8008800:	1e41      	subs	r1, r0, #1
 8008802:	4282      	cmp	r2, r0
 8008804:	ea01 0102 	and.w	r1, r1, r2
 8008808:	469b      	mov	fp, r3
 800880a:	d20f      	bcs.n	800882c <_InitOnce.part.0+0x494>
 800880c:	b129      	cbz	r1, 800881a <_InitOnce.part.0+0x482>
 800880e:	f803 5b01 	strb.w	r5, [r3], #1
 8008812:	2202      	movs	r2, #2
 8008814:	4282      	cmp	r2, r0
 8008816:	469b      	mov	fp, r3
 8008818:	d208      	bcs.n	800882c <_InitOnce.part.0+0x494>
 800881a:	4619      	mov	r1, r3
 800881c:	3202      	adds	r2, #2
 800881e:	f801 5b01 	strb.w	r5, [r1], #1
 8008822:	705d      	strb	r5, [r3, #1]
 8008824:	1c4b      	adds	r3, r1, #1
 8008826:	4282      	cmp	r2, r0
 8008828:	469b      	mov	fp, r3
 800882a:	d3f6      	bcc.n	800881a <_InitOnce.part.0+0x482>
 800882c:	4586      	cmp	lr, r0
 800882e:	f43f ae36 	beq.w	800849e <_InitOnce.part.0+0x106>
 8008832:	ebc0 090e 	rsb	r9, r0, lr
 8008836:	ea4f 0599 	mov.w	r5, r9, lsr #2
 800883a:	ea4f 0885 	mov.w	r8, r5, lsl #2
 800883e:	b1e5      	cbz	r5, 800887a <_InitOnce.part.0+0x4e2>
 8008840:	1836      	adds	r6, r6, r0
 8008842:	2101      	movs	r1, #1
 8008844:	2000      	movs	r0, #0
 8008846:	1e6b      	subs	r3, r5, #1
 8008848:	42a9      	cmp	r1, r5
 800884a:	f846 0b04 	str.w	r0, [r6], #4
 800884e:	ea03 0301 	and.w	r3, r3, r1
 8008852:	d20d      	bcs.n	8008870 <_InitOnce.part.0+0x4d8>
 8008854:	b123      	cbz	r3, 8008860 <_InitOnce.part.0+0x4c8>
 8008856:	2102      	movs	r1, #2
 8008858:	42a9      	cmp	r1, r5
 800885a:	f846 0b04 	str.w	r0, [r6], #4
 800885e:	d207      	bcs.n	8008870 <_InitOnce.part.0+0x4d8>
 8008860:	4633      	mov	r3, r6
 8008862:	3102      	adds	r1, #2
 8008864:	f843 0b04 	str.w	r0, [r3], #4
 8008868:	6070      	str	r0, [r6, #4]
 800886a:	1d1e      	adds	r6, r3, #4
 800886c:	42a9      	cmp	r1, r5
 800886e:	d3f7      	bcc.n	8008860 <_InitOnce.part.0+0x4c8>
 8008870:	45c1      	cmp	r9, r8
 8008872:	44c3      	add	fp, r8
 8008874:	4442      	add	r2, r8
 8008876:	f43f ae12 	beq.w	800849e <_InitOnce.part.0+0x106>
 800887a:	43d5      	mvns	r5, r2
 800887c:	ebc2 010b 	rsb	r1, r2, fp
 8008880:	1c53      	adds	r3, r2, #1
 8008882:	2000      	movs	r0, #0
 8008884:	4475      	add	r5, lr
 8008886:	459e      	cmp	lr, r3
 8008888:	5488      	strb	r0, [r1, r2]
 800888a:	f005 0201 	and.w	r2, r5, #1
 800888e:	f67f ae06 	bls.w	800849e <_InitOnce.part.0+0x106>
 8008892:	b122      	cbz	r2, 800889e <_InitOnce.part.0+0x506>
 8008894:	54c8      	strb	r0, [r1, r3]
 8008896:	3301      	adds	r3, #1
 8008898:	459e      	cmp	lr, r3
 800889a:	f67f ae00 	bls.w	800849e <_InitOnce.part.0+0x106>
 800889e:	1c5d      	adds	r5, r3, #1
 80088a0:	54c8      	strb	r0, [r1, r3]
 80088a2:	3302      	adds	r3, #2
 80088a4:	459e      	cmp	lr, r3
 80088a6:	5548      	strb	r0, [r1, r5]
 80088a8:	d8f9      	bhi.n	800889e <_InitOnce.part.0+0x506>
 80088aa:	e5f8      	b.n	800849e <_InitOnce.part.0+0x106>
 80088ac:	f10a 0a01 	add.w	sl, sl, #1
 80088b0:	e668      	b.n	8008584 <_InitOnce.part.0+0x1ec>
 80088b2:	f10b 0b01 	add.w	fp, fp, #1
 80088b6:	e70d      	b.n	80086d4 <_InitOnce.part.0+0x33c>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d19c      	bne.n	80087f6 <_InitOnce.part.0+0x45e>
 80088bc:	46b3      	mov	fp, r6
 80088be:	4602      	mov	r2, r0
 80088c0:	e7b7      	b.n	8008832 <_InitOnce.part.0+0x49a>
 80088c2:	f1c5 0101 	rsb	r1, r5, #1
 80088c6:	3501      	adds	r5, #1
 80088c8:	2d02      	cmp	r5, #2
 80088ca:	f001 0301 	and.w	r3, r1, #1
 80088ce:	f43f ade6 	beq.w	800849e <_InitOnce.part.0+0x106>
 80088d2:	b11b      	cbz	r3, 80088dc <_InitOnce.part.0+0x544>
 80088d4:	3501      	adds	r5, #1
 80088d6:	2d02      	cmp	r5, #2
 80088d8:	f43f ade1 	beq.w	800849e <_InitOnce.part.0+0x106>
 80088dc:	3502      	adds	r5, #2
 80088de:	2d02      	cmp	r5, #2
 80088e0:	f43f addd 	beq.w	800849e <_InitOnce.part.0+0x106>
 80088e4:	e7fa      	b.n	80088dc <_InitOnce.part.0+0x544>
 80088e6:	bf00      	nop

080088e8 <GUI_ALLOC_FreeFixedBlock>:
 80088e8:	b128      	cbz	r0, 80088f6 <GUI_ALLOC_FreeFixedBlock+0xe>
 80088ea:	4a03      	ldr	r2, [pc, #12]	; (80088f8 <GUI_ALLOC_FreeFixedBlock+0x10>)
 80088ec:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80088ee:	6003      	str	r3, [r0, #0]
 80088f0:	b103      	cbz	r3, 80088f4 <GUI_ALLOC_FreeFixedBlock+0xc>
 80088f2:	6058      	str	r0, [r3, #4]
 80088f4:	63d0      	str	r0, [r2, #60]	; 0x3c
 80088f6:	4770      	bx	lr
 80088f8:	1ffe9d14 	.word	0x1ffe9d14

080088fc <GUI_ALLOC_GetFixedBlock>:
 80088fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008900:	4e63      	ldr	r6, [pc, #396]	; (8008a90 <GUI_ALLOC_GetFixedBlock+0x194>)
 8008902:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8008906:	4605      	mov	r5, r0
 8008908:	b90b      	cbnz	r3, 800890e <GUI_ALLOC_GetFixedBlock+0x12>
 800890a:	f7ff fd45 	bl	8008398 <_InitOnce.part.0>
 800890e:	1ce8      	adds	r0, r5, #3
 8008910:	f020 0103 	bic.w	r1, r0, #3
 8008914:	6c34      	ldr	r4, [r6, #64]	; 0x40
 8008916:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8008918:	1d0d      	adds	r5, r1, #4
 800891a:	42a5      	cmp	r5, r4
 800891c:	bf38      	it	cc
 800891e:	4625      	movcc	r5, r4
 8008920:	b160      	cbz	r0, 800893c <GUI_ALLOC_GetFixedBlock+0x40>
 8008922:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008926:	429d      	cmp	r5, r3
 8008928:	4604      	mov	r4, r0
 800892a:	d104      	bne.n	8008936 <GUI_ALLOC_GetFixedBlock+0x3a>
 800892c:	e014      	b.n	8008958 <GUI_ALLOC_GetFixedBlock+0x5c>
 800892e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008932:	428d      	cmp	r5, r1
 8008934:	d010      	beq.n	8008958 <GUI_ALLOC_GetFixedBlock+0x5c>
 8008936:	6824      	ldr	r4, [r4, #0]
 8008938:	2c00      	cmp	r4, #0
 800893a:	d1f8      	bne.n	800892e <GUI_ALLOC_GetFixedBlock+0x32>
 800893c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800893e:	68f0      	ldr	r0, [r6, #12]
 8008940:	1814      	adds	r4, r2, r0
 8008942:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008946:	1a61      	subs	r1, r4, r1
 8008948:	680b      	ldr	r3, [r1, #0]
 800894a:	b9b3      	cbnz	r3, 800897a <GUI_ALLOC_GetFixedBlock+0x7e>
 800894c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8008950:	4545      	cmp	r5, r8
 8008952:	dd1d      	ble.n	8008990 <GUI_ALLOC_GetFixedBlock+0x94>
 8008954:	2400      	movs	r4, #0
 8008956:	e008      	b.n	800896a <GUI_ALLOC_GetFixedBlock+0x6e>
 8008958:	6822      	ldr	r2, [r4, #0]
 800895a:	b10a      	cbz	r2, 8008960 <GUI_ALLOC_GetFixedBlock+0x64>
 800895c:	6863      	ldr	r3, [r4, #4]
 800895e:	6053      	str	r3, [r2, #4]
 8008960:	6861      	ldr	r1, [r4, #4]
 8008962:	b101      	cbz	r1, 8008966 <GUI_ALLOC_GetFixedBlock+0x6a>
 8008964:	600a      	str	r2, [r1, #0]
 8008966:	42a0      	cmp	r0, r4
 8008968:	d002      	beq.n	8008970 <GUI_ALLOC_GetFixedBlock+0x74>
 800896a:	4620      	mov	r0, r4
 800896c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008970:	6820      	ldr	r0, [r4, #0]
 8008972:	63f0      	str	r0, [r6, #60]	; 0x3c
 8008974:	4620      	mov	r0, r4
 8008976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800897a:	2000      	movs	r0, #0
 800897c:	f7ff fa22 	bl	8007dc4 <_RemoveHoles>
 8008980:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8008984:	1aa1      	subs	r1, r4, r2
 8008986:	6808      	ldr	r0, [r1, #0]
 8008988:	2800      	cmp	r0, #0
 800898a:	d0df      	beq.n	800894c <GUI_ALLOC_GetFixedBlock+0x50>
 800898c:	2400      	movs	r4, #0
 800898e:	e7ec      	b.n	800896a <GUI_ALLOC_GetFixedBlock+0x6e>
 8008990:	f8d6 70b8 	ldr.w	r7, [r6, #184]	; 0xb8
 8008994:	4b3e      	ldr	r3, [pc, #248]	; (8008a90 <GUI_ALLOC_GetFixedBlock+0x194>)
 8008996:	ebc5 0008 	rsb	r0, r5, r8
 800899a:	1d04      	adds	r4, r0, #4
 800899c:	45b8      	cmp	r8, r7
 800899e:	440c      	add	r4, r1
 80089a0:	d274      	bcs.n	8008a8c <GUI_ALLOC_GetFixedBlock+0x190>
 80089a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80089a6:	4590      	cmp	r8, r2
 80089a8:	d26e      	bcs.n	8008a88 <GUI_ALLOC_GetFixedBlock+0x18c>
 80089aa:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 80089ae:	45b8      	cmp	r8, r7
 80089b0:	d268      	bcs.n	8008a84 <GUI_ALLOC_GetFixedBlock+0x188>
 80089b2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80089b6:	4590      	cmp	r8, r2
 80089b8:	d262      	bcs.n	8008a80 <GUI_ALLOC_GetFixedBlock+0x184>
 80089ba:	f8d3 7098 	ldr.w	r7, [r3, #152]	; 0x98
 80089be:	45b8      	cmp	r8, r7
 80089c0:	d25c      	bcs.n	8008a7c <GUI_ALLOC_GetFixedBlock+0x180>
 80089c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80089c6:	4590      	cmp	r8, r2
 80089c8:	d256      	bcs.n	8008a78 <GUI_ALLOC_GetFixedBlock+0x17c>
 80089ca:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 80089ce:	45b8      	cmp	r8, r7
 80089d0:	d250      	bcs.n	8008a74 <GUI_ALLOC_GetFixedBlock+0x178>
 80089d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80089d6:	4590      	cmp	r8, r2
 80089d8:	d24a      	bcs.n	8008a70 <GUI_ALLOC_GetFixedBlock+0x174>
 80089da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089dc:	4598      	cmp	r8, r3
 80089de:	d245      	bcs.n	8008a6c <GUI_ALLOC_GetFixedBlock+0x170>
 80089e0:	6f37      	ldr	r7, [r6, #112]	; 0x70
 80089e2:	4a2b      	ldr	r2, [pc, #172]	; (8008a90 <GUI_ALLOC_GetFixedBlock+0x194>)
 80089e4:	45b8      	cmp	r8, r7
 80089e6:	d23f      	bcs.n	8008a68 <GUI_ALLOC_GetFixedBlock+0x16c>
 80089e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80089ea:	4598      	cmp	r8, r3
 80089ec:	d23a      	bcs.n	8008a64 <GUI_ALLOC_GetFixedBlock+0x168>
 80089ee:	6e17      	ldr	r7, [r2, #96]	; 0x60
 80089f0:	45b8      	cmp	r8, r7
 80089f2:	d235      	bcs.n	8008a60 <GUI_ALLOC_GetFixedBlock+0x164>
 80089f4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80089f6:	4598      	cmp	r8, r3
 80089f8:	d230      	bcs.n	8008a5c <GUI_ALLOC_GetFixedBlock+0x160>
 80089fa:	6d17      	ldr	r7, [r2, #80]	; 0x50
 80089fc:	45b8      	cmp	r8, r7
 80089fe:	d22b      	bcs.n	8008a58 <GUI_ALLOC_GetFixedBlock+0x15c>
 8008a00:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8008a02:	4598      	cmp	r8, r3
 8008a04:	d226      	bcs.n	8008a54 <GUI_ALLOC_GetFixedBlock+0x158>
 8008a06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008a08:	4590      	cmp	r8, r2
 8008a0a:	bf34      	ite	cc
 8008a0c:	f04f 32ff 	movcc.w	r2, #4294967295
 8008a10:	2200      	movcs	r2, #0
 8008a12:	6833      	ldr	r3, [r6, #0]
 8008a14:	688f      	ldr	r7, [r1, #8]
 8008a16:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8008a1a:	ebc8 0803 	rsb	r8, r8, r3
 8008a1e:	f8c6 8000 	str.w	r8, [r6]
 8008a22:	b10f      	cbz	r7, 8008a28 <GUI_ALLOC_GetFixedBlock+0x12c>
 8008a24:	f8c7 c004 	str.w	ip, [r7, #4]
 8008a28:	f1bc 0f00 	cmp.w	ip, #0
 8008a2c:	d00e      	beq.n	8008a4c <GUI_ALLOC_GetFixedBlock+0x150>
 8008a2e:	f8cc 7000 	str.w	r7, [ip]
 8008a32:	68f2      	ldr	r2, [r6, #12]
 8008a34:	6973      	ldr	r3, [r6, #20]
 8008a36:	1b52      	subs	r2, r2, r5
 8008a38:	18eb      	adds	r3, r5, r3
 8008a3a:	60f2      	str	r2, [r6, #12]
 8008a3c:	6173      	str	r3, [r6, #20]
 8008a3e:	b910      	cbnz	r0, 8008a46 <GUI_ALLOC_GetFixedBlock+0x14a>
 8008a40:	f844 5c04 	str.w	r5, [r4, #-4]
 8008a44:	e791      	b.n	800896a <GUI_ALLOC_GetFixedBlock+0x6e>
 8008a46:	f7ff f815 	bl	8007a74 <_AddFreeMemory>
 8008a4a:	e7f9      	b.n	8008a40 <GUI_ALLOC_GetFixedBlock+0x144>
 8008a4c:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8008a50:	6457      	str	r7, [r2, #68]	; 0x44
 8008a52:	e7ee      	b.n	8008a32 <GUI_ALLOC_GetFixedBlock+0x136>
 8008a54:	2201      	movs	r2, #1
 8008a56:	e7dc      	b.n	8008a12 <GUI_ALLOC_GetFixedBlock+0x116>
 8008a58:	2202      	movs	r2, #2
 8008a5a:	e7da      	b.n	8008a12 <GUI_ALLOC_GetFixedBlock+0x116>
 8008a5c:	2203      	movs	r2, #3
 8008a5e:	e7d8      	b.n	8008a12 <GUI_ALLOC_GetFixedBlock+0x116>
 8008a60:	2204      	movs	r2, #4
 8008a62:	e7d6      	b.n	8008a12 <GUI_ALLOC_GetFixedBlock+0x116>
 8008a64:	2205      	movs	r2, #5
 8008a66:	e7d4      	b.n	8008a12 <GUI_ALLOC_GetFixedBlock+0x116>
 8008a68:	2206      	movs	r2, #6
 8008a6a:	e7d2      	b.n	8008a12 <GUI_ALLOC_GetFixedBlock+0x116>
 8008a6c:	2207      	movs	r2, #7
 8008a6e:	e7d0      	b.n	8008a12 <GUI_ALLOC_GetFixedBlock+0x116>
 8008a70:	2208      	movs	r2, #8
 8008a72:	e7ce      	b.n	8008a12 <GUI_ALLOC_GetFixedBlock+0x116>
 8008a74:	2209      	movs	r2, #9
 8008a76:	e7cc      	b.n	8008a12 <GUI_ALLOC_GetFixedBlock+0x116>
 8008a78:	220a      	movs	r2, #10
 8008a7a:	e7ca      	b.n	8008a12 <GUI_ALLOC_GetFixedBlock+0x116>
 8008a7c:	220b      	movs	r2, #11
 8008a7e:	e7c8      	b.n	8008a12 <GUI_ALLOC_GetFixedBlock+0x116>
 8008a80:	220c      	movs	r2, #12
 8008a82:	e7c6      	b.n	8008a12 <GUI_ALLOC_GetFixedBlock+0x116>
 8008a84:	220d      	movs	r2, #13
 8008a86:	e7c4      	b.n	8008a12 <GUI_ALLOC_GetFixedBlock+0x116>
 8008a88:	220e      	movs	r2, #14
 8008a8a:	e7c2      	b.n	8008a12 <GUI_ALLOC_GetFixedBlock+0x116>
 8008a8c:	220f      	movs	r2, #15
 8008a8e:	e7c0      	b.n	8008a12 <GUI_ALLOC_GetFixedBlock+0x116>
 8008a90:	1ffe9d14 	.word	0x1ffe9d14

08008a94 <GUI_ALLOC_AllocNoInit>:
 8008a94:	b900      	cbnz	r0, 8008a98 <GUI_ALLOC_AllocNoInit+0x4>
 8008a96:	4770      	bx	lr
 8008a98:	f7ff ba82 	b.w	8007fa0 <_Alloc>

08008a9c <GUI_ALLOC_LockH>:
 8008a9c:	4a07      	ldr	r2, [pc, #28]	; (8008abc <GUI_ALLOC_LockH+0x20>)
 8008a9e:	69d1      	ldr	r1, [r2, #28]
 8008aa0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008aa2:	3101      	adds	r1, #1
 8008aa4:	61d1      	str	r1, [r2, #28]
 8008aa6:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
 8008aaa:	3201      	adds	r2, #1
 8008aac:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 8008ab0:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
 8008ab4:	b108      	cbz	r0, 8008aba <GUI_ALLOC_LockH+0x1e>
 8008ab6:	6848      	ldr	r0, [r1, #4]
 8008ab8:	3008      	adds	r0, #8
 8008aba:	4770      	bx	lr
 8008abc:	1ffe9d14 	.word	0x1ffe9d14

08008ac0 <GUI_ALLOC_UnlockH>:
 8008ac0:	b430      	push	{r4, r5}
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	4b0a      	ldr	r3, [pc, #40]	; (8008af0 <GUI_ALLOC_UnlockH+0x30>)
 8008ac6:	6800      	ldr	r0, [r0, #0]
 8008ac8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008aca:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8008ace:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
 8008ad2:	2c01      	cmp	r4, #1
 8008ad4:	d903      	bls.n	8008ade <GUI_ALLOC_UnlockH+0x1e>
 8008ad6:	69dd      	ldr	r5, [r3, #28]
 8008ad8:	b10d      	cbz	r5, 8008ade <GUI_ALLOC_UnlockH+0x1e>
 8008ada:	3d01      	subs	r5, #1
 8008adc:	61dd      	str	r5, [r3, #28]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	3c01      	subs	r4, #1
 8008ae2:	f801 4030 	strb.w	r4, [r1, r0, lsl #3]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	bc30      	pop	{r4, r5}
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	1ffe9d14 	.word	0x1ffe9d14

08008af4 <GUI_ALLOC_AssignMemory>:
 8008af4:	f648 2324 	movw	r3, #35364	; 0x8a24
 8008af8:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 8008afc:	f021 0103 	bic.w	r1, r1, #3
 8008b00:	e883 0003 	stmia.w	r3, {r0, r1}
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop

08008b08 <GUI_ALLOC_SetAvBlockSize>:
 8008b08:	2810      	cmp	r0, #16
 8008b0a:	4b06      	ldr	r3, [pc, #24]	; (8008b24 <GUI_ALLOC_SetAvBlockSize+0x1c>)
 8008b0c:	d906      	bls.n	8008b1c <GUI_ALLOC_SetAvBlockSize+0x14>
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	0851      	lsrs	r1, r2, #1
 8008b12:	4288      	cmp	r0, r1
 8008b14:	bf28      	it	cs
 8008b16:	4608      	movcs	r0, r1
 8008b18:	6098      	str	r0, [r3, #8]
 8008b1a:	4770      	bx	lr
 8008b1c:	2010      	movs	r0, #16
 8008b1e:	6098      	str	r0, [r3, #8]
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	1ffe8a24 	.word	0x1ffe8a24

08008b28 <GUI_ALLOC_Free>:
 8008b28:	b570      	push	{r4, r5, r6, lr}
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	b900      	cbnz	r0, 8008b30 <GUI_ALLOC_Free+0x8>
 8008b2e:	bd70      	pop	{r4, r5, r6, pc}
 8008b30:	4d0c      	ldr	r5, [pc, #48]	; (8008b64 <GUI_ALLOC_Free+0x3c>)
 8008b32:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008b34:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
 8008b38:	00c6      	lsls	r6, r0, #3
 8008b3a:	1998      	adds	r0, r3, r6
 8008b3c:	2a00      	cmp	r2, #0
 8008b3e:	d0f6      	beq.n	8008b2e <GUI_ALLOC_Free+0x6>
 8008b40:	2a01      	cmp	r2, #1
 8008b42:	d8f4      	bhi.n	8008b2e <GUI_ALLOC_Free+0x6>
 8008b44:	6841      	ldr	r1, [r0, #4]
 8008b46:	6848      	ldr	r0, [r1, #4]
 8008b48:	f7fe ff94 	bl	8007a74 <_AddFreeMemory>
 8008b4c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008b4e:	6869      	ldr	r1, [r5, #4]
 8008b50:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008b52:	199e      	adds	r6, r3, r6
 8008b54:	1c48      	adds	r0, r1, #1
 8008b56:	2100      	movs	r1, #0
 8008b58:	6068      	str	r0, [r5, #4]
 8008b5a:	6072      	str	r2, [r6, #4]
 8008b5c:	f803 1034 	strb.w	r1, [r3, r4, lsl #3]
 8008b60:	626c      	str	r4, [r5, #36]	; 0x24
 8008b62:	e7e4      	b.n	8008b2e <GUI_ALLOC_Free+0x6>
 8008b64:	1ffe9d14 	.word	0x1ffe9d14

08008b68 <LCD_Index2Color_M565>:
 8008b68:	f240 5370 	movw	r3, #1392	; 0x570
 8008b6c:	b410      	push	{r4}
 8008b6e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008b72:	f3c0 24c4 	ubfx	r4, r0, #11, #5
 8008b76:	f000 011f 	and.w	r1, r0, #31
 8008b7a:	f240 5230 	movw	r2, #1328	; 0x530
 8008b7e:	f3c0 1045 	ubfx	r0, r0, #5, #6
 8008b82:	f6c0 0201 	movt	r2, #2049	; 0x801
 8008b86:	5c59      	ldrb	r1, [r3, r1]
 8008b88:	5d1b      	ldrb	r3, [r3, r4]
 8008b8a:	5c12      	ldrb	r2, [r2, r0]
 8008b8c:	eb03 4001 	add.w	r0, r3, r1, lsl #16
 8008b90:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8008b94:	bc10      	pop	{r4}
 8008b96:	4770      	bx	lr

08008b98 <_Color2Index_M565>:
 8008b98:	f240 6390 	movw	r3, #1680	; 0x690
 8008b9c:	b410      	push	{r4}
 8008b9e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8008ba2:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8008ba6:	b2c1      	uxtb	r1, r0
 8008ba8:	f240 5290 	movw	r2, #1424	; 0x590
 8008bac:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8008bb0:	f6c0 0201 	movt	r2, #2049	; 0x801
 8008bb4:	5c59      	ldrb	r1, [r3, r1]
 8008bb6:	5d1b      	ldrb	r3, [r3, r4]
 8008bb8:	5c12      	ldrb	r2, [r2, r0]
 8008bba:	eb03 20c1 	add.w	r0, r3, r1, lsl #11
 8008bbe:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8008bc2:	bc10      	pop	{r4}
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop

08008bc8 <_GetIndexMask_M565>:
 8008bc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop

08008bd0 <_Color2IndexBulk>:
 8008bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd4:	4c35      	ldr	r4, [pc, #212]	; (8008cac <_Color2IndexBulk+0xdc>)
 8008bd6:	6824      	ldr	r4, [r4, #0]
 8008bd8:	460e      	mov	r6, r1
 8008bda:	4615      	mov	r5, r2
 8008bdc:	461f      	mov	r7, r3
 8008bde:	b114      	cbz	r4, 8008be6 <_Color2IndexBulk+0x16>
 8008be0:	47a0      	blx	r4
 8008be2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be6:	f850 1b04 	ldr.w	r1, [r0], #4
 8008bea:	4c31      	ldr	r4, [pc, #196]	; (8008cb0 <_Color2IndexBulk+0xe0>)
 8008bec:	4b31      	ldr	r3, [pc, #196]	; (8008cb4 <_Color2IndexBulk+0xe4>)
 8008bee:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 8008bf2:	fa5f f881 	uxtb.w	r8, r1
 8008bf6:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8008bfa:	f814 1008 	ldrb.w	r1, [r4, r8]
 8008bfe:	f814 800c 	ldrb.w	r8, [r4, ip]
 8008c02:	f813 c002 	ldrb.w	ip, [r3, r2]
 8008c06:	1e6a      	subs	r2, r5, #1
 8008c08:	eb08 25c1 	add.w	r5, r8, r1, lsl #11
 8008c0c:	eb05 114c 	add.w	r1, r5, ip, lsl #5
 8008c10:	4615      	mov	r5, r2
 8008c12:	8031      	strh	r1, [r6, #0]
 8008c14:	f002 0201 	and.w	r2, r2, #1
 8008c18:	19f1      	adds	r1, r6, r7
 8008c1a:	2d00      	cmp	r5, #0
 8008c1c:	d041      	beq.n	8008ca2 <_Color2IndexBulk+0xd2>
 8008c1e:	b1a2      	cbz	r2, 8008c4a <_Color2IndexBulk+0x7a>
 8008c20:	f850 6b04 	ldr.w	r6, [r0], #4
 8008c24:	fa5f f886 	uxtb.w	r8, r6
 8008c28:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8008c2c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8008c30:	f814 2008 	ldrb.w	r2, [r4, r8]
 8008c34:	f814 c00c 	ldrb.w	ip, [r4, ip]
 8008c38:	5d9e      	ldrb	r6, [r3, r6]
 8008c3a:	eb0c 22c2 	add.w	r2, ip, r2, lsl #11
 8008c3e:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 8008c42:	3d01      	subs	r5, #1
 8008c44:	800a      	strh	r2, [r1, #0]
 8008c46:	4439      	add	r1, r7
 8008c48:	d02d      	beq.n	8008ca6 <_Color2IndexBulk+0xd6>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	6840      	ldr	r0, [r0, #4]
 8008c4e:	f852 6b04 	ldr.w	r6, [r2], #4
 8008c52:	fa5f f886 	uxtb.w	r8, r6
 8008c56:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 8008c5a:	fa5f f980 	uxtb.w	r9, r0
 8008c5e:	f3c0 4c07 	ubfx	ip, r0, #16, #8
 8008c62:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8008c66:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8008c6a:	f814 8008 	ldrb.w	r8, [r4, r8]
 8008c6e:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8008c72:	f814 000c 	ldrb.w	r0, [r4, ip]
 8008c76:	5d9e      	ldrb	r6, [r3, r6]
 8008c78:	f814 9009 	ldrb.w	r9, [r4, r9]
 8008c7c:	f813 c00b 	ldrb.w	ip, [r3, fp]
 8008c80:	eb0a 28c8 	add.w	r8, sl, r8, lsl #11
 8008c84:	eb00 29c9 	add.w	r9, r0, r9, lsl #11
 8008c88:	eb08 1046 	add.w	r0, r8, r6, lsl #5
 8008c8c:	8008      	strh	r0, [r1, #0]
 8008c8e:	eb09 164c 	add.w	r6, r9, ip, lsl #5
 8008c92:	1d10      	adds	r0, r2, #4
 8008c94:	3d02      	subs	r5, #2
 8008c96:	53ce      	strh	r6, [r1, r7]
 8008c98:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8008c9c:	d1d5      	bne.n	8008c4a <_Color2IndexBulk+0x7a>
 8008c9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008caa:	bf00      	nop
 8008cac:	1ffe8a38 	.word	0x1ffe8a38
 8008cb0:	08010690 	.word	0x08010690
 8008cb4:	08010590 	.word	0x08010590

08008cb8 <_Index2ColorBulk>:
 8008cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cbc:	4c2a      	ldr	r4, [pc, #168]	; (8008d68 <_Index2ColorBulk+0xb0>)
 8008cbe:	6864      	ldr	r4, [r4, #4]
 8008cc0:	4607      	mov	r7, r0
 8008cc2:	460e      	mov	r6, r1
 8008cc4:	461d      	mov	r5, r3
 8008cc6:	b114      	cbz	r4, 8008cce <_Index2ColorBulk+0x16>
 8008cc8:	47a0      	blx	r4
 8008cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cce:	f102 32ff 	add.w	r2, r2, #4294967295
 8008cd2:	fb02 0003 	mla	r0, r2, r3, r0
 8008cd6:	425b      	negs	r3, r3
 8008cd8:	07d5      	lsls	r5, r2, #31
 8008cda:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008cde:	4c23      	ldr	r4, [pc, #140]	; (8008d6c <_Index2ColorBulk+0xb4>)
 8008ce0:	4e23      	ldr	r6, [pc, #140]	; (8008d70 <_Index2ColorBulk+0xb8>)
 8008ce2:	d52a      	bpl.n	8008d3a <_Index2ColorBulk+0x82>
 8008ce4:	8805      	ldrh	r5, [r0, #0]
 8008ce6:	f005 081f 	and.w	r8, r5, #31
 8008cea:	ea4f 2cd5 	mov.w	ip, r5, lsr #11
 8008cee:	f3c5 1745 	ubfx	r7, r5, #5, #6
 8008cf2:	f814 5008 	ldrb.w	r5, [r4, r8]
 8008cf6:	f814 800c 	ldrb.w	r8, [r4, ip]
 8008cfa:	5df7      	ldrb	r7, [r6, r7]
 8008cfc:	eb08 4505 	add.w	r5, r8, r5, lsl #16
 8008d00:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8008d04:	f841 7904 	str.w	r7, [r1], #-4
 8008d08:	18c0      	adds	r0, r0, r3
 8008d0a:	3a01      	subs	r2, #1
 8008d0c:	e015      	b.n	8008d3a <_Index2ColorBulk+0x82>
 8008d0e:	5ac0      	ldrh	r0, [r0, r3]
 8008d10:	ea4f 28d0 	mov.w	r8, r0, lsr #11
 8008d14:	f000 091f 	and.w	r9, r0, #31
 8008d18:	f3c0 1c45 	ubfx	ip, r0, #5, #6
 8008d1c:	f814 8008 	ldrb.w	r8, [r4, r8]
 8008d20:	f814 0009 	ldrb.w	r0, [r4, r9]
 8008d24:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8008d28:	eb08 4000 	add.w	r0, r8, r0, lsl #16
 8008d2c:	eb00 200c 	add.w	r0, r0, ip, lsl #8
 8008d30:	f841 0c04 	str.w	r0, [r1, #-4]
 8008d34:	3a02      	subs	r2, #2
 8008d36:	18f8      	adds	r0, r7, r3
 8008d38:	1f29      	subs	r1, r5, #4
 8008d3a:	8805      	ldrh	r5, [r0, #0]
 8008d3c:	f005 0c1f 	and.w	ip, r5, #31
 8008d40:	0aef      	lsrs	r7, r5, #11
 8008d42:	f3c5 1545 	ubfx	r5, r5, #5, #6
 8008d46:	f814 800c 	ldrb.w	r8, [r4, ip]
 8008d4a:	5de7      	ldrb	r7, [r4, r7]
 8008d4c:	f816 c005 	ldrb.w	ip, [r6, r5]
 8008d50:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 8008d54:	460d      	mov	r5, r1
 8008d56:	eb07 270c 	add.w	r7, r7, ip, lsl #8
 8008d5a:	f845 7904 	str.w	r7, [r5], #-4
 8008d5e:	18c7      	adds	r7, r0, r3
 8008d60:	2a00      	cmp	r2, #0
 8008d62:	d1d4      	bne.n	8008d0e <_Index2ColorBulk+0x56>
 8008d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d68:	1ffe8a38 	.word	0x1ffe8a38
 8008d6c:	08010570 	.word	0x08010570
 8008d70:	08010530 	.word	0x08010530

08008d74 <_GetDevData>:
 8008d74:	f64f 1028 	movw	r0, #63784	; 0xf928
 8008d78:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008d7c:	2901      	cmp	r1, #1
 8008d7e:	bf18      	it	ne
 8008d80:	2000      	movne	r0, #0
 8008d82:	4770      	bx	lr

08008d84 <_GetDevFunc>:
 8008d84:	f64b 30bd 	movw	r0, #48061	; 0xbbbd
 8008d88:	f6c0 0000 	movt	r0, #2048	; 0x800
 8008d8c:	2916      	cmp	r1, #22
 8008d8e:	bf18      	it	ne
 8008d90:	2000      	movne	r0, #0
 8008d92:	4770      	bx	lr

08008d94 <_SetOrg>:
 8008d94:	6800      	ldr	r0, [r0, #0]
 8008d96:	b508      	push	{r3, lr}
 8008d98:	b110      	cbz	r0, 8008da0 <_SetOrg+0xc>
 8008d9a:	68c3      	ldr	r3, [r0, #12]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	4798      	blx	r3
 8008da0:	bd08      	pop	{r3, pc}
 8008da2:	bf00      	nop

08008da4 <_GetDevProp>:
 8008da4:	6800      	ldr	r0, [r0, #0]
 8008da6:	b508      	push	{r3, lr}
 8008da8:	b118      	cbz	r0, 8008db2 <_GetDevProp+0xe>
 8008daa:	68c3      	ldr	r3, [r0, #12]
 8008dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dae:	4790      	blx	r2
 8008db0:	bd08      	pop	{r3, pc}
 8008db2:	f04f 30ff 	mov.w	r0, #4294967295
 8008db6:	bd08      	pop	{r3, pc}

08008db8 <_GetRect>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	6880      	ldr	r0, [r0, #8]
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	f7ff fe6c 	bl	8008a9c <GUI_ALLOC_LockH>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	a802      	add	r0, sp, #8
 8008dc8:	8899      	ldrh	r1, [r3, #4]
 8008dca:	88da      	ldrh	r2, [r3, #6]
 8008dcc:	891d      	ldrh	r5, [r3, #8]
 8008dce:	895e      	ldrh	r6, [r3, #10]
 8008dd0:	f840 3d04 	str.w	r3, [r0, #-4]!
 8008dd4:	194d      	adds	r5, r1, r5
 8008dd6:	1993      	adds	r3, r2, r6
 8008dd8:	3d01      	subs	r5, #1
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	8021      	strh	r1, [r4, #0]
 8008dde:	8062      	strh	r2, [r4, #2]
 8008de0:	80a5      	strh	r5, [r4, #4]
 8008de2:	80e3      	strh	r3, [r4, #6]
 8008de4:	f7ff fe6c 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 8008de8:	b002      	add	sp, #8
 8008dea:	bd70      	pop	{r4, r5, r6, pc}

08008dec <_DrawBitmap>:
 8008dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df0:	f648 0608 	movw	r6, #34824	; 0x8808
 8008df4:	f6c1 76fe 	movt	r6, #8190	; 0x1ffe
 8008df8:	b09f      	sub	sp, #124	; 0x7c
 8008dfa:	6834      	ldr	r4, [r6, #0]
 8008dfc:	9013      	str	r0, [sp, #76]	; 0x4c
 8008dfe:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008e00:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8008e02:	930a      	str	r3, [sp, #40]	; 0x28
 8008e04:	460c      	mov	r4, r1
 8008e06:	4616      	mov	r6, r2
 8008e08:	f7ff fe48 	bl	8008a9c <GUI_ALLOC_LockH>
 8008e0c:	901b      	str	r0, [sp, #108]	; 0x6c
 8008e0e:	6940      	ldr	r0, [r0, #20]
 8008e10:	2800      	cmp	r0, #0
 8008e12:	f040 8291 	bne.w	8009338 <_DrawBitmap+0x54c>
 8008e16:	af1e      	add	r7, sp, #120	; 0x78
 8008e18:	901c      	str	r0, [sp, #112]	; 0x70
 8008e1a:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8008e1e:	68d9      	ldr	r1, [r3, #12]
 8008e20:	9711      	str	r7, [sp, #68]	; 0x44
 8008e22:	4638      	mov	r0, r7
 8008e24:	910c      	str	r1, [sp, #48]	; 0x30
 8008e26:	f7ff fe4b 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 8008e2a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8008e2c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8008e2e:	18a4      	adds	r4, r4, r2
 8008e30:	9409      	str	r4, [sp, #36]	; 0x24
 8008e32:	2800      	cmp	r0, #0
 8008e34:	f000 87af 	beq.w	8009d96 <_DrawBitmap+0xfaa>
 8008e38:	f648 0e08 	movw	lr, #34824	; 0x8808
 8008e3c:	f6c1 7efe 	movt	lr, #8190	; 0x1ffe
 8008e40:	f8de 3000 	ldr.w	r3, [lr]
 8008e44:	7c1f      	ldrb	r7, [r3, #16]
 8008e46:	07bc      	lsls	r4, r7, #30
 8008e48:	f000 830c 	beq.w	8009464 <_DrawBitmap+0x678>
 8008e4c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008e4e:	f7ff fe25 	bl	8008a9c <GUI_ALLOC_LockH>
 8008e52:	4602      	mov	r2, r0
 8008e54:	a81e      	add	r0, sp, #120	; 0x78
 8008e56:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 8008e5a:	68d1      	ldr	r1, [r2, #12]
 8008e5c:	f9b2 9004 	ldrsh.w	r9, [r2, #4]
 8008e60:	f840 2d04 	str.w	r2, [r0, #-4]!
 8008e64:	f102 0718 	add.w	r7, r2, #24
 8008e68:	1b33      	subs	r3, r6, r4
 8008e6a:	fb01 7203 	mla	r2, r1, r3, r7
 8008e6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e70:	ebc9 0901 	rsb	r9, r9, r1
 8008e74:	eb02 0749 	add.w	r7, r2, r9, lsl #1
 8008e78:	9705      	str	r7, [sp, #20]
 8008e7a:	f7ff fe21 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 8008e7e:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8008e80:	2f10      	cmp	r7, #16
 8008e82:	f000 825c 	beq.w	800933e <_DrawBitmap+0x552>
 8008e86:	2f17      	cmp	r7, #23
 8008e88:	f340 8092 	ble.w	8008fb0 <_DrawBitmap+0x1c4>
 8008e8c:	2d00      	cmp	r5, #0
 8008e8e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008e90:	f340 8087 	ble.w	8008fa2 <_DrawBitmap+0x1b6>
 8008e94:	9f2b      	ldr	r7, [sp, #172]	; 0xac
 8008e96:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8008e9a:	f107 0804 	add.w	r8, r7, #4
 8008e9e:	1975      	adds	r5, r6, r5
 8008ea0:	9506      	str	r5, [sp, #24]
 8008ea2:	f8cd 8010 	str.w	r8, [sp, #16]
 8008ea6:	9a04      	ldr	r2, [sp, #16]
 8008ea8:	2a04      	cmp	r2, #4
 8008eaa:	d06b      	beq.n	8008f84 <_DrawBitmap+0x198>
 8008eac:	9805      	ldr	r0, [sp, #20]
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d068      	beq.n	8008f84 <_DrawBitmap+0x198>
 8008eb2:	2c00      	cmp	r4, #0
 8008eb4:	f000 811a 	beq.w	80090ec <_DrawBitmap+0x300>
 8008eb8:	68a7      	ldr	r7, [r4, #8]
 8008eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ebc:	687d      	ldr	r5, [r7, #4]
 8008ebe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ec0:	4632      	mov	r2, r6
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	47a8      	blx	r5
 8008ec6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8008eca:	f8dd b010 	ldr.w	fp, [sp, #16]
 8008ece:	6811      	ldr	r1, [r2, #0]
 8008ed0:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 8008ed4:	4788      	blx	r1
 8008ed6:	9d05      	ldr	r5, [sp, #20]
 8008ed8:	68a3      	ldr	r3, [r4, #8]
 8008eda:	f825 0b02 	strh.w	r0, [r5], #2
 8008ede:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ee4:	f100 37ff 	add.w	r7, r0, #4294967295
 8008ee8:	4632      	mov	r2, r6
 8008eea:	4620      	mov	r0, r4
 8008eec:	4798      	blx	r3
 8008eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ef0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008ef4:	46ba      	mov	sl, r7
 8008ef6:	f007 0b01 	and.w	fp, r7, #1
 8008efa:	f108 0804 	add.w	r8, r8, #4
 8008efe:	1c57      	adds	r7, r2, #1
 8008f00:	f1ba 0f00 	cmp.w	sl, #0
 8008f04:	d03d      	beq.n	8008f82 <_DrawBitmap+0x196>
 8008f06:	f1bb 0f00 	cmp.w	fp, #0
 8008f0a:	d013      	beq.n	8008f34 <_DrawBitmap+0x148>
 8008f0c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8008f10:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8008f14:	680b      	ldr	r3, [r1, #0]
 8008f16:	4798      	blx	r3
 8008f18:	68a2      	ldr	r2, [r4, #8]
 8008f1a:	f825 0b02 	strh.w	r0, [r5], #2
 8008f1e:	4639      	mov	r1, r7
 8008f20:	6813      	ldr	r3, [r2, #0]
 8008f22:	4620      	mov	r0, r4
 8008f24:	4632      	mov	r2, r6
 8008f26:	4798      	blx	r3
 8008f28:	3701      	adds	r7, #1
 8008f2a:	f1ba 0a01 	subs.w	sl, sl, #1
 8008f2e:	f108 0804 	add.w	r8, r8, #4
 8008f32:	d026      	beq.n	8008f82 <_DrawBitmap+0x196>
 8008f34:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8008f38:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8008f3c:	680a      	ldr	r2, [r1, #0]
 8008f3e:	4790      	blx	r2
 8008f40:	46ab      	mov	fp, r5
 8008f42:	68a3      	ldr	r3, [r4, #8]
 8008f44:	f82b 0b02 	strh.w	r0, [fp], #2
 8008f48:	4639      	mov	r1, r7
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4632      	mov	r2, r6
 8008f4e:	4620      	mov	r0, r4
 8008f50:	4798      	blx	r3
 8008f52:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8008f56:	f858 0b04 	ldr.w	r0, [r8], #4
 8008f5a:	680a      	ldr	r2, [r1, #0]
 8008f5c:	4790      	blx	r2
 8008f5e:	68a3      	ldr	r3, [r4, #8]
 8008f60:	8068      	strh	r0, [r5, #2]
 8008f62:	1c7d      	adds	r5, r7, #1
 8008f64:	4629      	mov	r1, r5
 8008f66:	681f      	ldr	r7, [r3, #0]
 8008f68:	4620      	mov	r0, r4
 8008f6a:	4632      	mov	r2, r6
 8008f6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f70:	47b8      	blx	r7
 8008f72:	1c6f      	adds	r7, r5, #1
 8008f74:	f1ba 0a01 	subs.w	sl, sl, #1
 8008f78:	f10b 0502 	add.w	r5, fp, #2
 8008f7c:	f108 0804 	add.w	r8, r8, #4
 8008f80:	d1d8      	bne.n	8008f34 <_DrawBitmap+0x148>
 8008f82:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008f84:	9805      	ldr	r0, [sp, #20]
 8008f86:	f8dd e010 	ldr.w	lr, [sp, #16]
 8008f8a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008f8c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8008f8e:	9d06      	ldr	r5, [sp, #24]
 8008f90:	3601      	adds	r6, #1
 8008f92:	19c1      	adds	r1, r0, r7
 8008f94:	eb0e 0c02 	add.w	ip, lr, r2
 8008f98:	42ae      	cmp	r6, r5
 8008f9a:	9105      	str	r1, [sp, #20]
 8008f9c:	f8cd c010 	str.w	ip, [sp, #16]
 8008fa0:	d181      	bne.n	8008ea6 <_DrawBitmap+0xba>
 8008fa2:	b114      	cbz	r4, 8008faa <_DrawBitmap+0x1be>
 8008fa4:	a81c      	add	r0, sp, #112	; 0x70
 8008fa6:	f7ff fd8b 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 8008faa:	b01f      	add	sp, #124	; 0x7c
 8008fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb0:	2f08      	cmp	r7, #8
 8008fb2:	f000 86ff 	beq.w	8009db4 <_DrawBitmap+0xfc8>
 8008fb6:	48a0      	ldr	r0, [pc, #640]	; (8009238 <_DrawBitmap+0x44c>)
 8008fb8:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8008fba:	2f00      	cmp	r7, #0
 8008fbc:	bf08      	it	eq
 8008fbe:	4607      	moveq	r7, r0
 8008fc0:	2d00      	cmp	r5, #0
 8008fc2:	970d      	str	r7, [sp, #52]	; 0x34
 8008fc4:	f340 8249 	ble.w	800945a <_DrawBitmap+0x66e>
 8008fc8:	9604      	str	r6, [sp, #16]
 8008fca:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8008fcc:	9f2b      	ldr	r7, [sp, #172]	; 0xac
 8008fce:	f8dd e010 	ldr.w	lr, [sp, #16]
 8008fd2:	0071      	lsls	r1, r6, #1
 8008fd4:	f1c6 0204 	rsb	r2, r6, #4
 8008fd8:	f1c6 0302 	rsb	r3, r6, #2
 8008fdc:	ea4f 0c86 	mov.w	ip, r6, lsl #2
 8008fe0:	9e05      	ldr	r6, [sp, #20]
 8008fe2:	9114      	str	r1, [sp, #80]	; 0x50
 8008fe4:	1c78      	adds	r0, r7, #1
 8008fe6:	1cb1      	adds	r1, r6, #2
 8008fe8:	4475      	add	r5, lr
 8008fea:	b2d2      	uxtb	r2, r2
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8008ff2:	900e      	str	r0, [sp, #56]	; 0x38
 8008ff4:	910f      	str	r1, [sp, #60]	; 0x3c
 8008ff6:	9512      	str	r5, [sp, #72]	; 0x48
 8008ff8:	9216      	str	r2, [sp, #88]	; 0x58
 8008ffa:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ffc:	e019      	b.n	8009032 <_DrawBitmap+0x246>
 8008ffe:	2804      	cmp	r0, #4
 8009000:	f000 811c 	beq.w	800923c <_DrawBitmap+0x450>
 8009004:	2801      	cmp	r0, #1
 8009006:	f000 80ab 	beq.w	8009160 <_DrawBitmap+0x374>
 800900a:	9804      	ldr	r0, [sp, #16]
 800900c:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 800900e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8009010:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009012:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	198f      	adds	r7, r1, r6
 8009018:	9304      	str	r3, [sp, #16]
 800901a:	972b      	str	r7, [sp, #172]	; 0xac
 800901c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009020:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009022:	19af      	adds	r7, r5, r6
 8009024:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009026:	970e      	str	r7, [sp, #56]	; 0x38
 8009028:	1956      	adds	r6, r2, r5
 800902a:	4584      	cmp	ip, r0
 800902c:	960f      	str	r6, [sp, #60]	; 0x3c
 800902e:	f000 8214 	beq.w	800945a <_DrawBitmap+0x66e>
 8009032:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8009034:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009036:	2802      	cmp	r0, #2
 8009038:	f1a7 0c02 	sub.w	ip, r7, #2
 800903c:	d1df      	bne.n	8008ffe <_DrawBitmap+0x212>
 800903e:	f648 0408 	movw	r4, #34824	; 0x8808
 8009042:	f6c1 74fe 	movt	r4, #8190	; 0x1ffe
 8009046:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009048:	6820      	ldr	r0, [r4, #0]
 800904a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800904e:	7c03      	ldrb	r3, [r0, #16]
 8009050:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009052:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009054:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8009056:	f003 0103 	and.w	r1, r3, #3
 800905a:	fa02 f206 	lsl.w	r2, r2, r6
 800905e:	2901      	cmp	r1, #1
 8009060:	b2d5      	uxtb	r5, r2
 8009062:	f000 8640 	beq.w	8009ce6 <_DrawBitmap+0xefa>
 8009066:	f080 8206 	bcs.w	8009476 <_DrawBitmap+0x68a>
 800906a:	9f2b      	ldr	r7, [sp, #172]	; 0xac
 800906c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800906e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8009072:	42b4      	cmp	r4, r6
 8009074:	bfc8      	it	gt
 8009076:	b2f4      	uxtbgt	r4, r6
 8009078:	09a9      	lsrs	r1, r5, #6
 800907a:	4663      	mov	r3, ip
 800907c:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8009080:	1e60      	subs	r0, r4, #1
 8009082:	00ad      	lsls	r5, r5, #2
 8009084:	f823 1b02 	strh.w	r1, [r3], #2
 8009088:	f000 0101 	and.w	r1, r0, #1
 800908c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8009090:	ebc4 0606 	rsb	r6, r4, r6
 8009094:	b2ea      	uxtb	r2, r5
 8009096:	d01e      	beq.n	80090d6 <_DrawBitmap+0x2ea>
 8009098:	b151      	cbz	r1, 80090b0 <_DrawBitmap+0x2c4>
 800909a:	0995      	lsrs	r5, r2, #6
 800909c:	3801      	subs	r0, #1
 800909e:	f858 1025 	ldr.w	r1, [r8, r5, lsl #2]
 80090a2:	0092      	lsls	r2, r2, #2
 80090a4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80090a8:	f823 1b02 	strh.w	r1, [r3], #2
 80090ac:	b2d2      	uxtb	r2, r2
 80090ae:	d012      	beq.n	80090d6 <_DrawBitmap+0x2ea>
 80090b0:	0995      	lsrs	r5, r2, #6
 80090b2:	0091      	lsls	r1, r2, #2
 80090b4:	b2ca      	uxtb	r2, r1
 80090b6:	f858 9025 	ldr.w	r9, [r8, r5, lsl #2]
 80090ba:	4619      	mov	r1, r3
 80090bc:	0995      	lsrs	r5, r2, #6
 80090be:	f821 9b02 	strh.w	r9, [r1], #2
 80090c2:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80090c6:	3802      	subs	r0, #2
 80090c8:	0092      	lsls	r2, r2, #2
 80090ca:	805d      	strh	r5, [r3, #2]
 80090cc:	1c8b      	adds	r3, r1, #2
 80090ce:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80090d2:	b2d2      	uxtb	r2, r2
 80090d4:	d1ec      	bne.n	80090b0 <_DrawBitmap+0x2c4>
 80090d6:	1e63      	subs	r3, r4, #1
 80090d8:	b2d9      	uxtb	r1, r3
 80090da:	1c4d      	adds	r5, r1, #1
 80090dc:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
 80090e0:	2e00      	cmp	r6, #0
 80090e2:	d092      	beq.n	800900a <_DrawBitmap+0x21e>
 80090e4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 80090e8:	2404      	movs	r4, #4
 80090ea:	e7c2      	b.n	8009072 <_DrawBitmap+0x286>
 80090ec:	f8d9 4010 	ldr.w	r4, [r9, #16]
 80090f0:	9d04      	ldr	r5, [sp, #16]
 80090f2:	6821      	ldr	r1, [r4, #0]
 80090f4:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80090f8:	4788      	blx	r1
 80090fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090fc:	9c05      	ldr	r4, [sp, #20]
 80090fe:	1e5f      	subs	r7, r3, #1
 8009100:	46ba      	mov	sl, r7
 8009102:	f007 0201 	and.w	r2, r7, #1
 8009106:	f824 0b02 	strh.w	r0, [r4], #2
 800910a:	1d2f      	adds	r7, r5, #4
 800910c:	f1ba 0f00 	cmp.w	sl, #0
 8009110:	f43f af37 	beq.w	8008f82 <_DrawBitmap+0x196>
 8009114:	b162      	cbz	r2, 8009130 <_DrawBitmap+0x344>
 8009116:	f8d9 5010 	ldr.w	r5, [r9, #16]
 800911a:	f857 0c04 	ldr.w	r0, [r7, #-4]
 800911e:	6829      	ldr	r1, [r5, #0]
 8009120:	4788      	blx	r1
 8009122:	3704      	adds	r7, #4
 8009124:	f1ba 0a01 	subs.w	sl, sl, #1
 8009128:	f824 0b02 	strh.w	r0, [r4], #2
 800912c:	f43f af29 	beq.w	8008f82 <_DrawBitmap+0x196>
 8009130:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009134:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	4790      	blx	r2
 800913c:	4625      	mov	r5, r4
 800913e:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8009142:	f825 0b02 	strh.w	r0, [r5], #2
 8009146:	680b      	ldr	r3, [r1, #0]
 8009148:	f857 0b04 	ldr.w	r0, [r7], #4
 800914c:	4798      	blx	r3
 800914e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009152:	8060      	strh	r0, [r4, #2]
 8009154:	3704      	adds	r7, #4
 8009156:	1cac      	adds	r4, r5, #2
 8009158:	f1ba 0a01 	subs.w	sl, sl, #1
 800915c:	d1e8      	bne.n	8009130 <_DrawBitmap+0x344>
 800915e:	e710      	b.n	8008f82 <_DrawBitmap+0x196>
 8009160:	f648 0408 	movw	r4, #34824	; 0x8808
 8009164:	f6c1 74fe 	movt	r4, #8190	; 0x1ffe
 8009168:	f240 4924 	movw	r9, #1060	; 0x424
 800916c:	6826      	ldr	r6, [r4, #0]
 800916e:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8009170:	f8cd c008 	str.w	ip, [sp, #8]
 8009174:	f7ff fc92 	bl	8008a9c <GUI_ALLOC_LockH>
 8009178:	6821      	ldr	r1, [r4, #0]
 800917a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800917c:	7c0b      	ldrb	r3, [r1, #16]
 800917e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009182:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8009184:	901b      	str	r0, [sp, #108]	; 0x6c
 8009186:	f6c0 0901 	movt	r9, #2049	; 0x801
 800918a:	f003 0003 	and.w	r0, r3, #3
 800918e:	f819 4002 	ldrb.w	r4, [r9, r2]
 8009192:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009194:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009196:	f8dd c008 	ldr.w	ip, [sp, #8]
 800919a:	2802      	cmp	r0, #2
 800919c:	f1c1 0908 	rsb	r9, r1, #8
 80091a0:	fa44 f401 	asr.w	r4, r4, r1
 80091a4:	f000 84e5 	beq.w	8009b72 <_DrawBitmap+0xd86>
 80091a8:	2803      	cmp	r0, #3
 80091aa:	f000 83d7 	beq.w	800995c <_DrawBitmap+0xb70>
 80091ae:	2801      	cmp	r0, #1
 80091b0:	f000 83d4 	beq.w	800995c <_DrawBitmap+0xb70>
 80091b4:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80091b6:	46a8      	mov	r8, r5
 80091b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80091ba:	46ce      	mov	lr, r9
 80091bc:	4637      	mov	r7, r6
 80091be:	f004 0601 	and.w	r6, r4, #1
 80091c2:	4577      	cmp	r7, lr
 80091c4:	bf38      	it	cc
 80091c6:	46be      	movcc	lr, r7
 80091c8:	f10e 33ff 	add.w	r3, lr, #4294967295
 80091cc:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 80091d0:	4662      	mov	r2, ip
 80091d2:	4619      	mov	r1, r3
 80091d4:	f003 0601 	and.w	r6, r3, #1
 80091d8:	ebce 0707 	rsb	r7, lr, r7
 80091dc:	f822 0b02 	strh.w	r0, [r2], #2
 80091e0:	0863      	lsrs	r3, r4, #1
 80091e2:	b1c9      	cbz	r1, 8009218 <_DrawBitmap+0x42c>
 80091e4:	b146      	cbz	r6, 80091f8 <_DrawBitmap+0x40c>
 80091e6:	f003 0001 	and.w	r0, r3, #1
 80091ea:	08a3      	lsrs	r3, r4, #2
 80091ec:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
 80091f0:	3901      	subs	r1, #1
 80091f2:	f822 6b02 	strh.w	r6, [r2], #2
 80091f6:	d00f      	beq.n	8009218 <_DrawBitmap+0x42c>
 80091f8:	f003 0401 	and.w	r4, r3, #1
 80091fc:	4610      	mov	r0, r2
 80091fe:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 8009202:	f3c3 0440 	ubfx	r4, r3, #1, #1
 8009206:	f820 6b02 	strh.w	r6, [r0], #2
 800920a:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 800920e:	089b      	lsrs	r3, r3, #2
 8009210:	8054      	strh	r4, [r2, #2]
 8009212:	1c82      	adds	r2, r0, #2
 8009214:	3902      	subs	r1, #2
 8009216:	d1ef      	bne.n	80091f8 <_DrawBitmap+0x40c>
 8009218:	eb0c 0c4e 	add.w	ip, ip, lr, lsl #1
 800921c:	2f00      	cmp	r7, #0
 800921e:	f000 8087 	beq.w	8009330 <_DrawBitmap+0x544>
 8009222:	f240 4324 	movw	r3, #1060	; 0x424
 8009226:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800922a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800922e:	f04f 0e08 	mov.w	lr, #8
 8009232:	5c9c      	ldrb	r4, [r3, r2]
 8009234:	e7c3      	b.n	80091be <_DrawBitmap+0x3d2>
 8009236:	bf00      	nop
 8009238:	0800f95c 	.word	0x0800f95c
 800923c:	f648 0508 	movw	r5, #34824	; 0x8808
 8009240:	f6c1 75fe 	movt	r5, #8190	; 0x1ffe
 8009244:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009246:	6828      	ldr	r0, [r5, #0]
 8009248:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800924a:	7c03      	ldrb	r3, [r0, #16]
 800924c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009250:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8009254:	f003 0603 	and.w	r6, r3, #3
 8009258:	fa02 f201 	lsl.w	r2, r2, r1
 800925c:	2e01      	cmp	r6, #1
 800925e:	fa5f f982 	uxtb.w	r9, r2
 8009262:	f000 832d 	beq.w	80098c0 <_DrawBitmap+0xad4>
 8009266:	f080 8205 	bcs.w	8009674 <_DrawBitmap+0x888>
 800926a:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 800926c:	2f00      	cmp	r7, #0
 800926e:	f040 8315 	bne.w	800989c <_DrawBitmap+0xab0>
 8009272:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009274:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8009276:	2901      	cmp	r1, #1
 8009278:	dd4f      	ble.n	800931a <_DrawBitmap+0x52e>
 800927a:	ea4f 1419 	mov.w	r4, r9, lsr #4
 800927e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009280:	4662      	mov	r2, ip
 8009282:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8009286:	f009 090f 	and.w	r9, r9, #15
 800928a:	f822 3b04 	strh.w	r3, [r2], #4
 800928e:	f857 0029 	ldr.w	r0, [r7, r9, lsl #2]
 8009292:	462b      	mov	r3, r5
 8009294:	f822 0c02 	strh.w	r0, [r2, #-2]
 8009298:	104e      	asrs	r6, r1, #1
 800929a:	f813 9f01 	ldrb.w	r9, [r3, #1]!
 800929e:	19a8      	adds	r0, r5, r6
 80092a0:	43ed      	mvns	r5, r5
 80092a2:	182c      	adds	r4, r5, r0
 80092a4:	3204      	adds	r2, #4
 80092a6:	4283      	cmp	r3, r0
 80092a8:	f001 0101 	and.w	r1, r1, #1
 80092ac:	f004 0401 	and.w	r4, r4, #1
 80092b0:	d031      	beq.n	8009316 <_DrawBitmap+0x52a>
 80092b2:	b18c      	cbz	r4, 80092d8 <_DrawBitmap+0x4ec>
 80092b4:	ea4f 1719 	mov.w	r7, r9, lsr #4
 80092b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80092ba:	f009 090f 	and.w	r9, r9, #15
 80092be:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 80092c2:	f855 7029 	ldr.w	r7, [r5, r9, lsl #2]
 80092c6:	f822 4c04 	strh.w	r4, [r2, #-4]
 80092ca:	f822 7c02 	strh.w	r7, [r2, #-2]
 80092ce:	f813 9f01 	ldrb.w	r9, [r3, #1]!
 80092d2:	3204      	adds	r2, #4
 80092d4:	4283      	cmp	r3, r0
 80092d6:	d01e      	beq.n	8009316 <_DrawBitmap+0x52a>
 80092d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80092da:	ea4f 1519 	mov.w	r5, r9, lsr #4
 80092de:	f009 090f 	and.w	r9, r9, #15
 80092e2:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
 80092e6:	f854 5029 	ldr.w	r5, [r4, r9, lsl #2]
 80092ea:	f822 7c04 	strh.w	r7, [r2, #-4]
 80092ee:	f822 5c02 	strh.w	r5, [r2, #-2]
 80092f2:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 80092f6:	092f      	lsrs	r7, r5, #4
 80092f8:	f005 050f 	and.w	r5, r5, #15
 80092fc:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8009300:	f822 7b04 	strh.w	r7, [r2], #4
 8009304:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
 8009308:	f822 7c02 	strh.w	r7, [r2, #-2]
 800930c:	f813 9f01 	ldrb.w	r9, [r3, #1]!
 8009310:	3204      	adds	r2, #4
 8009312:	4283      	cmp	r3, r0
 8009314:	d1e1      	bne.n	80092da <_DrawBitmap+0x4ee>
 8009316:	eb0c 0c86 	add.w	ip, ip, r6, lsl #2
 800931a:	2900      	cmp	r1, #0
 800931c:	f43f ae75 	beq.w	800900a <_DrawBitmap+0x21e>
 8009320:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8009324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009326:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800932a:	f8ac 0000 	strh.w	r0, [ip]
 800932e:	e66c      	b.n	800900a <_DrawBitmap+0x21e>
 8009330:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009332:	f7ff fbc5 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 8009336:	e668      	b.n	800900a <_DrawBitmap+0x21e>
 8009338:	f7ff fbb0 	bl	8008a9c <GUI_ALLOC_LockH>
 800933c:	e56b      	b.n	8008e16 <_DrawBitmap+0x2a>
 800933e:	2d00      	cmp	r5, #0
 8009340:	f340 8786 	ble.w	800a250 <_DrawBitmap+0x1464>
 8009344:	43f4      	mvns	r4, r6
 8009346:	19ad      	adds	r5, r5, r6
 8009348:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800934c:	982b      	ldr	r0, [sp, #172]	; 0xac
 800934e:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8009352:	1963      	adds	r3, r4, r5
 8009354:	f003 0701 	and.w	r7, r3, #1
 8009358:	ea4f 0449 	mov.w	r4, r9, lsl #1
 800935c:	b1a0      	cbz	r0, 8009388 <_DrawBitmap+0x59c>
 800935e:	9805      	ldr	r0, [sp, #20]
 8009360:	b190      	cbz	r0, 8009388 <_DrawBitmap+0x59c>
 8009362:	992b      	ldr	r1, [sp, #172]	; 0xac
 8009364:	4622      	mov	r2, r4
 8009366:	f004 fbb5 	bl	800dad4 <memcpy>
 800936a:	f1ba 0f00 	cmp.w	sl, #0
 800936e:	f000 8767 	beq.w	800a240 <_DrawBitmap+0x1454>
 8009372:	f8da 1008 	ldr.w	r1, [sl, #8]
 8009376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009378:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800937c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800937e:	4650      	mov	r0, sl
 8009380:	4632      	mov	r2, r6
 8009382:	47c0      	blx	r8
 8009384:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8009388:	f106 0801 	add.w	r8, r6, #1
 800938c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800938e:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8009390:	9b05      	ldr	r3, [sp, #20]
 8009392:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009394:	45a8      	cmp	r8, r5
 8009396:	4416      	add	r6, r2
 8009398:	eb03 0900 	add.w	r9, r3, r0
 800939c:	d058      	beq.n	8009450 <_DrawBitmap+0x664>
 800939e:	2f00      	cmp	r7, #0
 80093a0:	f000 8504 	beq.w	8009dac <_DrawBitmap+0xfc0>
 80093a4:	b1ae      	cbz	r6, 80093d2 <_DrawBitmap+0x5e6>
 80093a6:	f1b9 0f00 	cmp.w	r9, #0
 80093aa:	d012      	beq.n	80093d2 <_DrawBitmap+0x5e6>
 80093ac:	4648      	mov	r0, r9
 80093ae:	4631      	mov	r1, r6
 80093b0:	4622      	mov	r2, r4
 80093b2:	f004 fb8f 	bl	800dad4 <memcpy>
 80093b6:	f1ba 0f00 	cmp.w	sl, #0
 80093ba:	f000 8745 	beq.w	800a248 <_DrawBitmap+0x145c>
 80093be:	f8da 7008 	ldr.w	r7, [sl, #8]
 80093c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093c4:	687f      	ldr	r7, [r7, #4]
 80093c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c8:	4650      	mov	r0, sl
 80093ca:	4642      	mov	r2, r8
 80093cc:	47b8      	blx	r7
 80093ce:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80093d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093d4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80093d6:	f108 0801 	add.w	r8, r8, #1
 80093da:	45a8      	cmp	r8, r5
 80093dc:	440e      	add	r6, r1
 80093de:	4491      	add	r9, r2
 80093e0:	bf18      	it	ne
 80093e2:	4693      	movne	fp, r2
 80093e4:	d034      	beq.n	8009450 <_DrawBitmap+0x664>
 80093e6:	4643      	mov	r3, r8
 80093e8:	464f      	mov	r7, r9
 80093ea:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
 80093ee:	46a8      	mov	r8, r5
 80093f0:	4655      	mov	r5, sl
 80093f2:	469a      	mov	sl, r3
 80093f4:	b176      	cbz	r6, 8009414 <_DrawBitmap+0x628>
 80093f6:	b16f      	cbz	r7, 8009414 <_DrawBitmap+0x628>
 80093f8:	4638      	mov	r0, r7
 80093fa:	4631      	mov	r1, r6
 80093fc:	4622      	mov	r2, r4
 80093fe:	f004 fb69 	bl	800dad4 <memcpy>
 8009402:	b135      	cbz	r5, 8009412 <_DrawBitmap+0x626>
 8009404:	68a9      	ldr	r1, [r5, #8]
 8009406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009408:	4628      	mov	r0, r5
 800940a:	4652      	mov	r2, sl
 800940c:	684d      	ldr	r5, [r1, #4]
 800940e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009410:	47a8      	blx	r5
 8009412:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009414:	eb16 0609 	adds.w	r6, r6, r9
 8009418:	445f      	add	r7, fp
 800941a:	f10a 0a01 	add.w	sl, sl, #1
 800941e:	d010      	beq.n	8009442 <_DrawBitmap+0x656>
 8009420:	b17f      	cbz	r7, 8009442 <_DrawBitmap+0x656>
 8009422:	4638      	mov	r0, r7
 8009424:	4631      	mov	r1, r6
 8009426:	4622      	mov	r2, r4
 8009428:	f004 fb54 	bl	800dad4 <memcpy>
 800942c:	2d00      	cmp	r5, #0
 800942e:	f000 8245 	beq.w	80098bc <_DrawBitmap+0xad0>
 8009432:	68aa      	ldr	r2, [r5, #8]
 8009434:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009438:	4628      	mov	r0, r5
 800943a:	6855      	ldr	r5, [r2, #4]
 800943c:	4652      	mov	r2, sl
 800943e:	47a8      	blx	r5
 8009440:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009442:	f10a 0a01 	add.w	sl, sl, #1
 8009446:	45c2      	cmp	sl, r8
 8009448:	444e      	add	r6, r9
 800944a:	445f      	add	r7, fp
 800944c:	d1d2      	bne.n	80093f4 <_DrawBitmap+0x608>
 800944e:	46aa      	mov	sl, r5
 8009450:	f1ba 0f00 	cmp.w	sl, #0
 8009454:	f47f ada6 	bne.w	8008fa4 <_DrawBitmap+0x1b8>
 8009458:	e5a7      	b.n	8008faa <_DrawBitmap+0x1be>
 800945a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800945c:	2b00      	cmp	r3, #0
 800945e:	f47f ada1 	bne.w	8008fa4 <_DrawBitmap+0x1b8>
 8009462:	e5a2      	b.n	8008faa <_DrawBitmap+0x1be>
 8009464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009466:	9500      	str	r5, [sp, #0]
 8009468:	9909      	ldr	r1, [sp, #36]	; 0x24
 800946a:	4632      	mov	r2, r6
 800946c:	f003 fb3c 	bl	800cae8 <GUI_USAGE_AddRect>
 8009470:	487f      	ldr	r0, [pc, #508]	; (8009670 <_DrawBitmap+0x884>)
 8009472:	6803      	ldr	r3, [r0, #0]
 8009474:	e4ea      	b.n	8008e4c <_DrawBitmap+0x60>
 8009476:	2902      	cmp	r1, #2
 8009478:	f47f adc7 	bne.w	800900a <_DrawBitmap+0x21e>
 800947c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009480:	982b      	ldr	r0, [sp, #172]	; 0xac
 8009482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009484:	9007      	str	r0, [sp, #28]
 8009486:	4554      	cmp	r4, sl
 8009488:	bfc8      	it	gt
 800948a:	fa5f f48a 	uxtbgt.w	r4, sl
 800948e:	9205      	str	r2, [sp, #20]
 8009490:	f8cd c018 	str.w	ip, [sp, #24]
 8009494:	ebc4 0a0a 	rsb	sl, r4, sl
 8009498:	2f00      	cmp	r7, #0
 800949a:	f000 8096 	beq.w	80095ca <_DrawBitmap+0x7de>
 800949e:	9b06      	ldr	r3, [sp, #24]
 80094a0:	f104 3bff 	add.w	fp, r4, #4294967295
 80094a4:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80094a8:	f103 0802 	add.w	r8, r3, #2
 80094ac:	f00b 0b01 	and.w	fp, fp, #1
 80094b0:	d00b      	beq.n	80094ca <_DrawBitmap+0x6de>
 80094b2:	09a9      	lsrs	r1, r5, #6
 80094b4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80094b6:	68b8      	ldr	r0, [r7, #8]
 80094b8:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
 80094bc:	6803      	ldr	r3, [r0, #0]
 80094be:	9905      	ldr	r1, [sp, #20]
 80094c0:	f828 2c02 	strh.w	r2, [r8, #-2]
 80094c4:	4638      	mov	r0, r7
 80094c6:	9a04      	ldr	r2, [sp, #16]
 80094c8:	4798      	blx	r3
 80094ca:	9905      	ldr	r1, [sp, #20]
 80094cc:	f104 3cff 	add.w	ip, r4, #4294967295
 80094d0:	00ad      	lsls	r5, r5, #2
 80094d2:	1c4e      	adds	r6, r1, #1
 80094d4:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 80094d8:	b2ed      	uxtb	r5, r5
 80094da:	f108 0802 	add.w	r8, r8, #2
 80094de:	d057      	beq.n	8009590 <_DrawBitmap+0x7a4>
 80094e0:	f1bb 0f00 	cmp.w	fp, #0
 80094e4:	d019      	beq.n	800951a <_DrawBitmap+0x72e>
 80094e6:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80094ea:	d00c      	beq.n	8009506 <_DrawBitmap+0x71a>
 80094ec:	09a8      	lsrs	r0, r5, #6
 80094ee:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	f85e 2020 	ldr.w	r2, [lr, r0, lsl #2]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f828 2c02 	strh.w	r2, [r8, #-2]
 80094fe:	4638      	mov	r0, r7
 8009500:	4631      	mov	r1, r6
 8009502:	9a04      	ldr	r2, [sp, #16]
 8009504:	4798      	blx	r3
 8009506:	f109 39ff 	add.w	r9, r9, #4294967295
 800950a:	00ad      	lsls	r5, r5, #2
 800950c:	3601      	adds	r6, #1
 800950e:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8009512:	b2ed      	uxtb	r5, r5
 8009514:	f108 0802 	add.w	r8, r8, #2
 8009518:	d03a      	beq.n	8009590 <_DrawBitmap+0x7a4>
 800951a:	4631      	mov	r1, r6
 800951c:	9e04      	ldr	r6, [sp, #16]
 800951e:	9410      	str	r4, [sp, #64]	; 0x40
 8009520:	464c      	mov	r4, r9
 8009522:	09ab      	lsrs	r3, r5, #6
 8009524:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8009528:	f101 0901 	add.w	r9, r1, #1
 800952c:	f108 0b02 	add.w	fp, r8, #2
 8009530:	4638      	mov	r0, r7
 8009532:	4632      	mov	r2, r6
 8009534:	d00a      	beq.n	800954c <_DrawBitmap+0x760>
 8009536:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800953a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 800953e:	f828 ec02 	strh.w	lr, [r8, #-2]
 8009542:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8009546:	f8d8 3000 	ldr.w	r3, [r8]
 800954a:	4798      	blx	r3
 800954c:	00a9      	lsls	r1, r5, #2
 800954e:	b2cd      	uxtb	r5, r1
 8009550:	f104 34ff 	add.w	r4, r4, #4294967295
 8009554:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8009558:	fa5f f884 	uxtb.w	r8, r4
 800955c:	d00c      	beq.n	8009578 <_DrawBitmap+0x78c>
 800955e:	09a8      	lsrs	r0, r5, #6
 8009560:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 800956a:	681c      	ldr	r4, [r3, #0]
 800956c:	f82b 2c02 	strh.w	r2, [fp, #-2]
 8009570:	4638      	mov	r0, r7
 8009572:	4649      	mov	r1, r9
 8009574:	4632      	mov	r2, r6
 8009576:	47a0      	blx	r4
 8009578:	f108 30ff 	add.w	r0, r8, #4294967295
 800957c:	00ad      	lsls	r5, r5, #2
 800957e:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 8009582:	f109 0101 	add.w	r1, r9, #1
 8009586:	b2ed      	uxtb	r5, r5
 8009588:	f10b 0802 	add.w	r8, fp, #2
 800958c:	d1c9      	bne.n	8009522 <_DrawBitmap+0x736>
 800958e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009590:	1e66      	subs	r6, r4, #1
 8009592:	9b05      	ldr	r3, [sp, #20]
 8009594:	9806      	ldr	r0, [sp, #24]
 8009596:	b2f4      	uxtb	r4, r6
 8009598:	1c61      	adds	r1, r4, #1
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 80095a0:	1916      	adds	r6, r2, r4
 80095a2:	9506      	str	r5, [sp, #24]
 80095a4:	9605      	str	r6, [sp, #20]
 80095a6:	f1ba 0f00 	cmp.w	sl, #0
 80095aa:	f43f ad2e 	beq.w	800900a <_DrawBitmap+0x21e>
 80095ae:	9c07      	ldr	r4, [sp, #28]
 80095b0:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80095b4:	9407      	str	r4, [sp, #28]
 80095b6:	2404      	movs	r4, #4
 80095b8:	4554      	cmp	r4, sl
 80095ba:	bfc8      	it	gt
 80095bc:	fa5f f48a 	uxtbgt.w	r4, sl
 80095c0:	ebc4 0a0a 	rsb	sl, r4, sl
 80095c4:	2f00      	cmp	r7, #0
 80095c6:	f47f af6a 	bne.w	800949e <_DrawBitmap+0x6b2>
 80095ca:	9b06      	ldr	r3, [sp, #24]
 80095cc:	1e61      	subs	r1, r4, #1
 80095ce:	1c98      	adds	r0, r3, #2
 80095d0:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80095d4:	f001 0101 	and.w	r1, r1, #1
 80095d8:	d005      	beq.n	80095e6 <_DrawBitmap+0x7fa>
 80095da:	09aa      	lsrs	r2, r5, #6
 80095dc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80095de:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
 80095e2:	f820 3c02 	strh.w	r3, [r0, #-2]
 80095e6:	1e62      	subs	r2, r4, #1
 80095e8:	00ad      	lsls	r5, r5, #2
 80095ea:	1c83      	adds	r3, r0, #2
 80095ec:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80095f0:	b2ed      	uxtb	r5, r5
 80095f2:	d031      	beq.n	8009658 <_DrawBitmap+0x86c>
 80095f4:	b181      	cbz	r1, 8009618 <_DrawBitmap+0x82c>
 80095f6:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80095fa:	d006      	beq.n	800960a <_DrawBitmap+0x81e>
 80095fc:	09a8      	lsrs	r0, r5, #6
 80095fe:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8009602:	f85c 1020 	ldr.w	r1, [ip, r0, lsl #2]
 8009606:	f823 1c02 	strh.w	r1, [r3, #-2]
 800960a:	3a01      	subs	r2, #1
 800960c:	00ae      	lsls	r6, r5, #2
 800960e:	3302      	adds	r3, #2
 8009610:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8009614:	b2f5      	uxtb	r5, r6
 8009616:	d01f      	beq.n	8009658 <_DrawBitmap+0x86c>
 8009618:	00a8      	lsls	r0, r5, #2
 800961a:	3a01      	subs	r2, #1
 800961c:	09ae      	lsrs	r6, r5, #6
 800961e:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8009622:	b2c1      	uxtb	r1, r0
 8009624:	b2d2      	uxtb	r2, r2
 8009626:	f103 0002 	add.w	r0, r3, #2
 800962a:	d005      	beq.n	8009638 <_DrawBitmap+0x84c>
 800962c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8009630:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
 8009634:	f823 5c02 	strh.w	r5, [r3, #-2]
 8009638:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 800963c:	d005      	beq.n	800964a <_DrawBitmap+0x85e>
 800963e:	098b      	lsrs	r3, r1, #6
 8009640:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8009642:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
 8009646:	f820 5c02 	strh.w	r5, [r0, #-2]
 800964a:	3a01      	subs	r2, #1
 800964c:	0089      	lsls	r1, r1, #2
 800964e:	1c83      	adds	r3, r0, #2
 8009650:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8009654:	b2cd      	uxtb	r5, r1
 8009656:	d1df      	bne.n	8009618 <_DrawBitmap+0x82c>
 8009658:	1e60      	subs	r0, r4, #1
 800965a:	9d05      	ldr	r5, [sp, #20]
 800965c:	9a06      	ldr	r2, [sp, #24]
 800965e:	b2c6      	uxtb	r6, r0
 8009660:	1c71      	adds	r1, r6, #1
 8009662:	1c6b      	adds	r3, r5, #1
 8009664:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8009668:	199e      	adds	r6, r3, r6
 800966a:	9006      	str	r0, [sp, #24]
 800966c:	9605      	str	r6, [sp, #20]
 800966e:	e79a      	b.n	80095a6 <_DrawBitmap+0x7ba>
 8009670:	1ffe8808 	.word	0x1ffe8808
 8009674:	2e02      	cmp	r6, #2
 8009676:	f47f acc8 	bne.w	800900a <_DrawBitmap+0x21e>
 800967a:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 800967c:	2f00      	cmp	r7, #0
 800967e:	f000 84b3 	beq.w	8009fe8 <_DrawBitmap+0x11fc>
 8009682:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8009686:	f040 8526 	bne.w	800a0d6 <_DrawBitmap+0x12ea>
 800968a:	982b      	ldr	r0, [sp, #172]	; 0xac
 800968c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800968e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009690:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8009694:	f890 9001 	ldrb.w	r9, [r0, #1]
 8009698:	f101 0b01 	add.w	fp, r1, #1
 800969c:	1e79      	subs	r1, r7, #1
 800969e:	2901      	cmp	r1, #1
 80096a0:	f340 80e3 	ble.w	800986a <_DrawBitmap+0xa7e>
 80096a4:	1e8e      	subs	r6, r1, #2
 80096a6:	f1ba 0f00 	cmp.w	sl, #0
 80096aa:	f000 8559 	beq.w	800a160 <_DrawBitmap+0x1374>
 80096ae:	0874      	lsrs	r4, r6, #1
 80096b0:	0062      	lsls	r2, r4, #1
 80096b2:	eb02 030b 	add.w	r3, r2, fp
 80096b6:	1c9f      	adds	r7, r3, #2
 80096b8:	ebcb 0103 	rsb	r1, fp, r3
 80096bc:	f019 0ff0 	tst.w	r9, #240	; 0xf0
 80096c0:	9610      	str	r6, [sp, #64]	; 0x40
 80096c2:	9705      	str	r7, [sp, #20]
 80096c4:	9407      	str	r4, [sp, #28]
 80096c6:	9208      	str	r2, [sp, #32]
 80096c8:	f10c 0604 	add.w	r6, ip, #4
 80096cc:	f3c1 0740 	ubfx	r7, r1, #1, #1
 80096d0:	d012      	beq.n	80096f8 <_DrawBitmap+0x90c>
 80096d2:	ea4f 1019 	mov.w	r0, r9, lsr #4
 80096d6:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 80096da:	f8da 4008 	ldr.w	r4, [sl, #8]
 80096de:	f85e 2020 	ldr.w	r2, [lr, r0, lsl #2]
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	f826 2c04 	strh.w	r2, [r6, #-4]
 80096e8:	4650      	mov	r0, sl
 80096ea:	f8cd c008 	str.w	ip, [sp, #8]
 80096ee:	4659      	mov	r1, fp
 80096f0:	9a04      	ldr	r2, [sp, #16]
 80096f2:	4798      	blx	r3
 80096f4:	f8dd c008 	ldr.w	ip, [sp, #8]
 80096f8:	f019 090f 	ands.w	r9, r9, #15
 80096fc:	d010      	beq.n	8009720 <_DrawBitmap+0x934>
 80096fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009700:	f8da 4008 	ldr.w	r4, [sl, #8]
 8009704:	f851 0029 	ldr.w	r0, [r1, r9, lsl #2]
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	f826 0c02 	strh.w	r0, [r6, #-2]
 800970e:	f10b 0101 	add.w	r1, fp, #1
 8009712:	f8cd c008 	str.w	ip, [sp, #8]
 8009716:	4650      	mov	r0, sl
 8009718:	9a04      	ldr	r2, [sp, #16]
 800971a:	4798      	blx	r3
 800971c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009720:	9a05      	ldr	r2, [sp, #20]
 8009722:	f815 9f01 	ldrb.w	r9, [r5, #1]!
 8009726:	f10b 0402 	add.w	r4, fp, #2
 800972a:	3604      	adds	r6, #4
 800972c:	4294      	cmp	r4, r2
 800972e:	f000 808f 	beq.w	8009850 <_DrawBitmap+0xa64>
 8009732:	b377      	cbz	r7, 8009792 <_DrawBitmap+0x9a6>
 8009734:	f019 0ff0 	tst.w	r9, #240	; 0xf0
 8009738:	d011      	beq.n	800975e <_DrawBitmap+0x972>
 800973a:	ea4f 1119 	mov.w	r1, r9, lsr #4
 800973e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009740:	f8da 0008 	ldr.w	r0, [sl, #8]
 8009744:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
 8009748:	6803      	ldr	r3, [r0, #0]
 800974a:	f826 2c04 	strh.w	r2, [r6, #-4]
 800974e:	4650      	mov	r0, sl
 8009750:	f8cd c008 	str.w	ip, [sp, #8]
 8009754:	4621      	mov	r1, r4
 8009756:	9a04      	ldr	r2, [sp, #16]
 8009758:	4798      	blx	r3
 800975a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800975e:	f019 090f 	ands.w	r9, r9, #15
 8009762:	d00f      	beq.n	8009784 <_DrawBitmap+0x998>
 8009764:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009766:	f8da 7008 	ldr.w	r7, [sl, #8]
 800976a:	f851 0029 	ldr.w	r0, [r1, r9, lsl #2]
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	f826 0c02 	strh.w	r0, [r6, #-2]
 8009774:	1c61      	adds	r1, r4, #1
 8009776:	f8cd c008 	str.w	ip, [sp, #8]
 800977a:	4650      	mov	r0, sl
 800977c:	9a04      	ldr	r2, [sp, #16]
 800977e:	4798      	blx	r3
 8009780:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009784:	9a05      	ldr	r2, [sp, #20]
 8009786:	f815 9f01 	ldrb.w	r9, [r5, #1]!
 800978a:	3402      	adds	r4, #2
 800978c:	3604      	adds	r6, #4
 800978e:	4294      	cmp	r4, r2
 8009790:	d05e      	beq.n	8009850 <_DrawBitmap+0xa64>
 8009792:	9f04      	ldr	r7, [sp, #16]
 8009794:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8009798:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
 800979c:	f8cd b064 	str.w	fp, [sp, #100]	; 0x64
 80097a0:	46cc      	mov	ip, r9
 80097a2:	f01c 0ff0 	tst.w	ip, #240	; 0xf0
 80097a6:	ea4f 131c 	mov.w	r3, ip, lsr #4
 80097aa:	f104 0902 	add.w	r9, r4, #2
 80097ae:	f106 0b04 	add.w	fp, r6, #4
 80097b2:	4621      	mov	r1, r4
 80097b4:	4650      	mov	r0, sl
 80097b6:	463a      	mov	r2, r7
 80097b8:	d00c      	beq.n	80097d4 <_DrawBitmap+0x9e8>
 80097ba:	f858 e023 	ldr.w	lr, [r8, r3, lsl #2]
 80097be:	f826 ec04 	strh.w	lr, [r6, #-4]
 80097c2:	f8da e008 	ldr.w	lr, [sl, #8]
 80097c6:	f8de 3000 	ldr.w	r3, [lr]
 80097ca:	f8cd c008 	str.w	ip, [sp, #8]
 80097ce:	4798      	blx	r3
 80097d0:	f8dd c008 	ldr.w	ip, [sp, #8]
 80097d4:	f01c 0c0f 	ands.w	ip, ip, #15
 80097d8:	f104 0101 	add.w	r1, r4, #1
 80097dc:	4650      	mov	r0, sl
 80097de:	463a      	mov	r2, r7
 80097e0:	d007      	beq.n	80097f2 <_DrawBitmap+0xa06>
 80097e2:	f8da 3008 	ldr.w	r3, [sl, #8]
 80097e6:	f858 402c 	ldr.w	r4, [r8, ip, lsl #2]
 80097ea:	f826 4c02 	strh.w	r4, [r6, #-2]
 80097ee:	681e      	ldr	r6, [r3, #0]
 80097f0:	47b0      	blx	r6
 80097f2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80097f6:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 80097fa:	d00b      	beq.n	8009814 <_DrawBitmap+0xa28>
 80097fc:	0931      	lsrs	r1, r6, #4
 80097fe:	f8da 0008 	ldr.w	r0, [sl, #8]
 8009802:	f858 2021 	ldr.w	r2, [r8, r1, lsl #2]
 8009806:	6804      	ldr	r4, [r0, #0]
 8009808:	f82b 2c04 	strh.w	r2, [fp, #-4]
 800980c:	4650      	mov	r0, sl
 800980e:	4649      	mov	r1, r9
 8009810:	463a      	mov	r2, r7
 8009812:	47a0      	blx	r4
 8009814:	f016 030f 	ands.w	r3, r6, #15
 8009818:	f109 0402 	add.w	r4, r9, #2
 800981c:	f10b 0604 	add.w	r6, fp, #4
 8009820:	4650      	mov	r0, sl
 8009822:	f109 0101 	add.w	r1, r9, #1
 8009826:	463a      	mov	r2, r7
 8009828:	d008      	beq.n	800983c <_DrawBitmap+0xa50>
 800982a:	f858 9023 	ldr.w	r9, [r8, r3, lsl #2]
 800982e:	f82b 9c02 	strh.w	r9, [fp, #-2]
 8009832:	f8da b008 	ldr.w	fp, [sl, #8]
 8009836:	f8db 3000 	ldr.w	r3, [fp]
 800983a:	4798      	blx	r3
 800983c:	9905      	ldr	r1, [sp, #20]
 800983e:	f815 cf01 	ldrb.w	ip, [r5, #1]!
 8009842:	428c      	cmp	r4, r1
 8009844:	d1ad      	bne.n	80097a2 <_DrawBitmap+0x9b6>
 8009846:	46e1      	mov	r9, ip
 8009848:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 800984c:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8009850:	9d07      	ldr	r5, [sp, #28]
 8009852:	9a08      	ldr	r2, [sp, #32]
 8009854:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8009856:	9b07      	ldr	r3, [sp, #28]
 8009858:	1c6f      	adds	r7, r5, #1
 800985a:	f10b 0002 	add.w	r0, fp, #2
 800985e:	eb0c 0c87 	add.w	ip, ip, r7, lsl #2
 8009862:	eb00 0b02 	add.w	fp, r0, r2
 8009866:	eba6 0143 	sub.w	r1, r6, r3, lsl #1
 800986a:	2900      	cmp	r1, #0
 800986c:	f43f abcd 	beq.w	800900a <_DrawBitmap+0x21e>
 8009870:	ea5f 1919 	movs.w	r9, r9, lsr #4
 8009874:	f43f abc9 	beq.w	800900a <_DrawBitmap+0x21e>
 8009878:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800987a:	f856 0029 	ldr.w	r0, [r6, r9, lsl #2]
 800987e:	f8ac 0000 	strh.w	r0, [ip]
 8009882:	f1ba 0f00 	cmp.w	sl, #0
 8009886:	f43f abc0 	beq.w	800900a <_DrawBitmap+0x21e>
 800988a:	f8da 2008 	ldr.w	r2, [sl, #8]
 800988e:	4650      	mov	r0, sl
 8009890:	6813      	ldr	r3, [r2, #0]
 8009892:	9a04      	ldr	r2, [sp, #16]
 8009894:	4659      	mov	r1, fp
 8009896:	4798      	blx	r3
 8009898:	f7ff bbb7 	b.w	800900a <_DrawBitmap+0x21e>
 800989c:	ea4f 1919 	mov.w	r9, r9, lsr #4
 80098a0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80098a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80098a4:	f856 0029 	ldr.w	r0, [r6, r9, lsl #2]
 80098a8:	f8ac 0000 	strh.w	r0, [ip]
 80098ac:	f8dd c0ac 	ldr.w	ip, [sp, #172]	; 0xac
 80098b0:	3901      	subs	r1, #1
 80098b2:	f89c 9001 	ldrb.w	r9, [ip, #1]
 80098b6:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 80098ba:	e4dc      	b.n	8009276 <_DrawBitmap+0x48a>
 80098bc:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80098be:	e5c0      	b.n	8009442 <_DrawBitmap+0x656>
 80098c0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80098c2:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80098c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80098c6:	42a1      	cmp	r1, r4
 80098c8:	bfc8      	it	gt
 80098ca:	b2e1      	uxtbgt	r1, r4
 80098cc:	1e4a      	subs	r2, r1, #1
 80098ce:	f019 0fc0 	tst.w	r9, #192	; 0xc0
 80098d2:	ebc1 0404 	rsb	r4, r1, r4
 80098d6:	f10c 0702 	add.w	r7, ip, #2
 80098da:	f002 0601 	and.w	r6, r2, #1
 80098de:	d005      	beq.n	80098ec <_DrawBitmap+0xb00>
 80098e0:	f837 3c02 	ldrh.w	r3, [r7, #-2]
 80098e4:	f083 00ff 	eor.w	r0, r3, #255	; 0xff
 80098e8:	f827 0c02 	strh.w	r0, [r7, #-2]
 80098ec:	1e48      	subs	r0, r1, #1
 80098ee:	ea4f 1209 	mov.w	r2, r9, lsl #4
 80098f2:	1cbb      	adds	r3, r7, #2
 80098f4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80098f8:	b2d2      	uxtb	r2, r2
 80098fa:	d023      	beq.n	8009944 <_DrawBitmap+0xb58>
 80098fc:	b17e      	cbz	r6, 800991e <_DrawBitmap+0xb32>
 80098fe:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8009902:	d005      	beq.n	8009910 <_DrawBitmap+0xb24>
 8009904:	f833 7c02 	ldrh.w	r7, [r3, #-2]
 8009908:	f087 06ff 	eor.w	r6, r7, #255	; 0xff
 800990c:	f823 6c02 	strh.w	r6, [r3, #-2]
 8009910:	3801      	subs	r0, #1
 8009912:	0112      	lsls	r2, r2, #4
 8009914:	3302      	adds	r3, #2
 8009916:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800991a:	b2d2      	uxtb	r2, r2
 800991c:	d012      	beq.n	8009944 <_DrawBitmap+0xb58>
 800991e:	1e47      	subs	r7, r0, #1
 8009920:	b2f8      	uxtb	r0, r7
 8009922:	1c9e      	adds	r6, r3, #2
 8009924:	3801      	subs	r0, #1
 8009926:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800992a:	f04f 0200 	mov.w	r2, #0
 800992e:	d005      	beq.n	800993c <_DrawBitmap+0xb50>
 8009930:	f833 7c02 	ldrh.w	r7, [r3, #-2]
 8009934:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 8009938:	f823 7c02 	strh.w	r7, [r3, #-2]
 800993c:	1cb3      	adds	r3, r6, #2
 800993e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8009942:	d1ec      	bne.n	800991e <_DrawBitmap+0xb32>
 8009944:	3901      	subs	r1, #1
 8009946:	b2ca      	uxtb	r2, r1
 8009948:	1c53      	adds	r3, r2, #1
 800994a:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
 800994e:	2c00      	cmp	r4, #0
 8009950:	f43f ab5b 	beq.w	800900a <_DrawBitmap+0x21e>
 8009954:	f815 9f01 	ldrb.w	r9, [r5, #1]!
 8009958:	2102      	movs	r1, #2
 800995a:	e7b4      	b.n	80098c6 <_DrawBitmap+0xada>
 800995c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800995e:	690d      	ldr	r5, [r1, #16]
 8009960:	68a8      	ldr	r0, [r5, #8]
 8009962:	f8cd c008 	str.w	ip, [sp, #8]
 8009966:	4780      	blx	r0
 8009968:	f8dd c008 	ldr.w	ip, [sp, #8]
 800996c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800996e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009970:	f8cd c014 	str.w	ip, [sp, #20]
 8009974:	b283      	uxth	r3, r0
 8009976:	46b4      	mov	ip, r6
 8009978:	9308      	str	r3, [sp, #32]
 800997a:	45cc      	cmp	ip, r9
 800997c:	bf38      	it	cc
 800997e:	46e1      	movcc	r9, ip
 8009980:	463b      	mov	r3, r7
 8009982:	9206      	str	r2, [sp, #24]
 8009984:	9107      	str	r1, [sp, #28]
 8009986:	ebc9 0c0c 	rsb	ip, r9, ip
 800998a:	2b00      	cmp	r3, #0
 800998c:	d07b      	beq.n	8009a86 <_DrawBitmap+0xc9a>
 800998e:	9905      	ldr	r1, [sp, #20]
 8009990:	f109 32ff 	add.w	r2, r9, #4294967295
 8009994:	1c8d      	adds	r5, r1, #2
 8009996:	07e7      	lsls	r7, r4, #31
 8009998:	f002 0601 	and.w	r6, r2, #1
 800999c:	f100 80c0 	bmi.w	8009b20 <_DrawBitmap+0xd34>
 80099a0:	9a07      	ldr	r2, [sp, #28]
 80099a2:	0864      	lsrs	r4, r4, #1
 80099a4:	3502      	adds	r5, #2
 80099a6:	f1b9 0a01 	subs.w	sl, r9, #1
 80099aa:	f102 0801 	add.w	r8, r2, #1
 80099ae:	d04b      	beq.n	8009a48 <_DrawBitmap+0xc5c>
 80099b0:	b14e      	cbz	r6, 80099c6 <_DrawBitmap+0xbda>
 80099b2:	07e6      	lsls	r6, r4, #31
 80099b4:	f100 80c9 	bmi.w	8009b4a <_DrawBitmap+0xd5e>
 80099b8:	0864      	lsrs	r4, r4, #1
 80099ba:	3502      	adds	r5, #2
 80099bc:	f1ba 0a01 	subs.w	sl, sl, #1
 80099c0:	f108 0801 	add.w	r8, r8, #1
 80099c4:	d040      	beq.n	8009a48 <_DrawBitmap+0xc5c>
 80099c6:	4641      	mov	r1, r8
 80099c8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80099cc:	4698      	mov	r8, r3
 80099ce:	e008      	b.n	80099e2 <_DrawBitmap+0xbf6>
 80099d0:	07f0      	lsls	r0, r6, #31
 80099d2:	d420      	bmi.n	8009a16 <_DrawBitmap+0xc2a>
 80099d4:	0874      	lsrs	r4, r6, #1
 80099d6:	1cbd      	adds	r5, r7, #2
 80099d8:	f1ba 0a01 	subs.w	sl, sl, #1
 80099dc:	f10b 0101 	add.w	r1, fp, #1
 80099e0:	d02f      	beq.n	8009a42 <_DrawBitmap+0xc56>
 80099e2:	0866      	lsrs	r6, r4, #1
 80099e4:	f014 0f01 	tst.w	r4, #1
 80099e8:	f101 0b01 	add.w	fp, r1, #1
 80099ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099f0:	f105 0702 	add.w	r7, r5, #2
 80099f4:	d0ec      	beq.n	80099d0 <_DrawBitmap+0xbe4>
 80099f6:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099fa:	9a04      	ldr	r2, [sp, #16]
 80099fc:	6823      	ldr	r3, [r4, #0]
 80099fe:	4640      	mov	r0, r8
 8009a00:	4798      	blx	r3
 8009a02:	f835 2c02 	ldrh.w	r2, [r5, #-2]
 8009a06:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009a0a:	07f0      	lsls	r0, r6, #31
 8009a0c:	ea8c 0102 	eor.w	r1, ip, r2
 8009a10:	f825 1c02 	strh.w	r1, [r5, #-2]
 8009a14:	d5de      	bpl.n	80099d4 <_DrawBitmap+0xbe8>
 8009a16:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8009a1a:	9a04      	ldr	r2, [sp, #16]
 8009a1c:	682c      	ldr	r4, [r5, #0]
 8009a1e:	4640      	mov	r0, r8
 8009a20:	4659      	mov	r1, fp
 8009a22:	47a0      	blx	r4
 8009a24:	f837 0c02 	ldrh.w	r0, [r7, #-2]
 8009a28:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009a2c:	0874      	lsrs	r4, r6, #1
 8009a2e:	ea8c 0300 	eor.w	r3, ip, r0
 8009a32:	1cbd      	adds	r5, r7, #2
 8009a34:	f1ba 0a01 	subs.w	sl, sl, #1
 8009a38:	f827 3c02 	strh.w	r3, [r7, #-2]
 8009a3c:	f10b 0101 	add.w	r1, fp, #1
 8009a40:	d1cf      	bne.n	80099e2 <_DrawBitmap+0xbf6>
 8009a42:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8009a46:	4643      	mov	r3, r8
 8009a48:	9e05      	ldr	r6, [sp, #20]
 8009a4a:	9a07      	ldr	r2, [sp, #28]
 8009a4c:	eb06 0749 	add.w	r7, r6, r9, lsl #1
 8009a50:	eb09 0102 	add.w	r1, r9, r2
 8009a54:	9705      	str	r7, [sp, #20]
 8009a56:	9107      	str	r1, [sp, #28]
 8009a58:	f1bc 0f00 	cmp.w	ip, #0
 8009a5c:	f43f ac68 	beq.w	8009330 <_DrawBitmap+0x544>
 8009a60:	9806      	ldr	r0, [sp, #24]
 8009a62:	f240 4924 	movw	r9, #1060	; 0x424
 8009a66:	7804      	ldrb	r4, [r0, #0]
 8009a68:	f6c0 0901 	movt	r9, #2049	; 0x801
 8009a6c:	f819 4004 	ldrb.w	r4, [r9, r4]
 8009a70:	f04f 0908 	mov.w	r9, #8
 8009a74:	1c45      	adds	r5, r0, #1
 8009a76:	45cc      	cmp	ip, r9
 8009a78:	bf38      	it	cc
 8009a7a:	46e1      	movcc	r9, ip
 8009a7c:	9506      	str	r5, [sp, #24]
 8009a7e:	ebc9 0c0c 	rsb	ip, r9, ip
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d183      	bne.n	800998e <_DrawBitmap+0xba2>
 8009a86:	9e05      	ldr	r6, [sp, #20]
 8009a88:	f109 37ff 	add.w	r7, r9, #4294967295
 8009a8c:	1cb2      	adds	r2, r6, #2
 8009a8e:	07e1      	lsls	r1, r4, #31
 8009a90:	f007 0001 	and.w	r0, r7, #1
 8009a94:	d506      	bpl.n	8009aa4 <_DrawBitmap+0xcb8>
 8009a96:	f832 1c02 	ldrh.w	r1, [r2, #-2]
 8009a9a:	9d08      	ldr	r5, [sp, #32]
 8009a9c:	ea85 0701 	eor.w	r7, r5, r1
 8009aa0:	f822 7c02 	strh.w	r7, [r2, #-2]
 8009aa4:	0864      	lsrs	r4, r4, #1
 8009aa6:	3202      	adds	r2, #2
 8009aa8:	f1b9 0101 	subs.w	r1, r9, #1
 8009aac:	d028      	beq.n	8009b00 <_DrawBitmap+0xd14>
 8009aae:	b160      	cbz	r0, 8009aca <_DrawBitmap+0xcde>
 8009ab0:	07e0      	lsls	r0, r4, #31
 8009ab2:	d506      	bpl.n	8009ac2 <_DrawBitmap+0xcd6>
 8009ab4:	f832 0c02 	ldrh.w	r0, [r2, #-2]
 8009ab8:	9e08      	ldr	r6, [sp, #32]
 8009aba:	ea86 0500 	eor.w	r5, r6, r0
 8009abe:	f822 5c02 	strh.w	r5, [r2, #-2]
 8009ac2:	0864      	lsrs	r4, r4, #1
 8009ac4:	3202      	adds	r2, #2
 8009ac6:	3901      	subs	r1, #1
 8009ac8:	d01a      	beq.n	8009b00 <_DrawBitmap+0xd14>
 8009aca:	9f08      	ldr	r7, [sp, #32]
 8009acc:	0866      	lsrs	r6, r4, #1
 8009ace:	f014 0f01 	tst.w	r4, #1
 8009ad2:	f101 31ff 	add.w	r1, r1, #4294967295
 8009ad6:	f102 0002 	add.w	r0, r2, #2
 8009ada:	d005      	beq.n	8009ae8 <_DrawBitmap+0xcfc>
 8009adc:	f832 4c02 	ldrh.w	r4, [r2, #-2]
 8009ae0:	ea87 0504 	eor.w	r5, r7, r4
 8009ae4:	f822 5c02 	strh.w	r5, [r2, #-2]
 8009ae8:	07f2      	lsls	r2, r6, #31
 8009aea:	d505      	bpl.n	8009af8 <_DrawBitmap+0xd0c>
 8009aec:	f830 2c02 	ldrh.w	r2, [r0, #-2]
 8009af0:	ea87 0402 	eor.w	r4, r7, r2
 8009af4:	f820 4c02 	strh.w	r4, [r0, #-2]
 8009af8:	0874      	lsrs	r4, r6, #1
 8009afa:	1c82      	adds	r2, r0, #2
 8009afc:	3901      	subs	r1, #1
 8009afe:	d1e5      	bne.n	8009acc <_DrawBitmap+0xce0>
 8009b00:	9f05      	ldr	r7, [sp, #20]
 8009b02:	eb07 0649 	add.w	r6, r7, r9, lsl #1
 8009b06:	9605      	str	r6, [sp, #20]
 8009b08:	f1bc 0f00 	cmp.w	ip, #0
 8009b0c:	f43f ac10 	beq.w	8009330 <_DrawBitmap+0x544>
 8009b10:	9806      	ldr	r0, [sp, #24]
 8009b12:	f240 4424 	movw	r4, #1060	; 0x424
 8009b16:	7805      	ldrb	r5, [r0, #0]
 8009b18:	f6c0 0401 	movt	r4, #2049	; 0x801
 8009b1c:	5d64      	ldrb	r4, [r4, r5]
 8009b1e:	e7a7      	b.n	8009a70 <_DrawBitmap+0xc84>
 8009b20:	689f      	ldr	r7, [r3, #8]
 8009b22:	9907      	ldr	r1, [sp, #28]
 8009b24:	683f      	ldr	r7, [r7, #0]
 8009b26:	9a04      	ldr	r2, [sp, #16]
 8009b28:	9303      	str	r3, [sp, #12]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f8cd c008 	str.w	ip, [sp, #8]
 8009b30:	47b8      	blx	r7
 8009b32:	f835 3c02 	ldrh.w	r3, [r5, #-2]
 8009b36:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b3a:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009b3e:	ea88 0003 	eor.w	r0, r8, r3
 8009b42:	f825 0c02 	strh.w	r0, [r5, #-2]
 8009b46:	9b03      	ldr	r3, [sp, #12]
 8009b48:	e72a      	b.n	80099a0 <_DrawBitmap+0xbb4>
 8009b4a:	6899      	ldr	r1, [r3, #8]
 8009b4c:	9a04      	ldr	r2, [sp, #16]
 8009b4e:	680e      	ldr	r6, [r1, #0]
 8009b50:	9303      	str	r3, [sp, #12]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f8cd c008 	str.w	ip, [sp, #8]
 8009b58:	4641      	mov	r1, r8
 8009b5a:	47b0      	blx	r6
 8009b5c:	f835 7c02 	ldrh.w	r7, [r5, #-2]
 8009b60:	9b08      	ldr	r3, [sp, #32]
 8009b62:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009b66:	ea83 0007 	eor.w	r0, r3, r7
 8009b6a:	f825 0c02 	strh.w	r0, [r5, #-2]
 8009b6e:	9b03      	ldr	r3, [sp, #12]
 8009b70:	e722      	b.n	80099b8 <_DrawBitmap+0xbcc>
 8009b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b74:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009b76:	f8b3 b004 	ldrh.w	fp, [r3, #4]
 8009b7a:	9206      	str	r2, [sp, #24]
 8009b7c:	464d      	mov	r5, r9
 8009b7e:	42ae      	cmp	r6, r5
 8009b80:	bf38      	it	cc
 8009b82:	4635      	movcc	r5, r6
 8009b84:	46ba      	mov	sl, r7
 8009b86:	f8cd b014 	str.w	fp, [sp, #20]
 8009b8a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8009b8e:	46e3      	mov	fp, ip
 8009b90:	1b76      	subs	r6, r6, r5
 8009b92:	f1ba 0f00 	cmp.w	sl, #0
 8009b96:	d055      	beq.n	8009c44 <_DrawBitmap+0xe58>
 8009b98:	2c00      	cmp	r4, #0
 8009b9a:	f000 8094 	beq.w	8009cc6 <_DrawBitmap+0xeda>
 8009b9e:	07e9      	lsls	r1, r5, #31
 8009ba0:	f10b 0902 	add.w	r9, fp, #2
 8009ba4:	d40b      	bmi.n	8009bbe <_DrawBitmap+0xdd2>
 8009ba6:	07e3      	lsls	r3, r4, #31
 8009ba8:	f100 8091 	bmi.w	8009cce <_DrawBitmap+0xee2>
 8009bac:	3d01      	subs	r5, #1
 8009bae:	0864      	lsrs	r4, r4, #1
 8009bb0:	46cb      	mov	fp, r9
 8009bb2:	f108 0801 	add.w	r8, r8, #1
 8009bb6:	f109 0902 	add.w	r9, r9, #2
 8009bba:	f000 8084 	beq.w	8009cc6 <_DrawBitmap+0xeda>
 8009bbe:	4657      	mov	r7, sl
 8009bc0:	9607      	str	r6, [sp, #28]
 8009bc2:	e013      	b.n	8009bec <_DrawBitmap+0xe00>
 8009bc4:	f108 0801 	add.w	r8, r8, #1
 8009bc8:	3d01      	subs	r5, #1
 8009bca:	46cb      	mov	fp, r9
 8009bcc:	4646      	mov	r6, r8
 8009bce:	b315      	cbz	r5, 8009c16 <_DrawBitmap+0xe2a>
 8009bd0:	0864      	lsrs	r4, r4, #1
 8009bd2:	d076      	beq.n	8009cc2 <_DrawBitmap+0xed6>
 8009bd4:	f014 0f01 	tst.w	r4, #1
 8009bd8:	46d3      	mov	fp, sl
 8009bda:	f105 35ff 	add.w	r5, r5, #4294967295
 8009bde:	f10a 0902 	add.w	r9, sl, #2
 8009be2:	d161      	bne.n	8009ca8 <_DrawBitmap+0xebc>
 8009be4:	0864      	lsrs	r4, r4, #1
 8009be6:	f106 0801 	add.w	r8, r6, #1
 8009bea:	d06a      	beq.n	8009cc2 <_DrawBitmap+0xed6>
 8009bec:	f014 0f01 	tst.w	r4, #1
 8009bf0:	f109 0a02 	add.w	sl, r9, #2
 8009bf4:	d0e6      	beq.n	8009bc4 <_DrawBitmap+0xdd8>
 8009bf6:	68be      	ldr	r6, [r7, #8]
 8009bf8:	9a04      	ldr	r2, [sp, #16]
 8009bfa:	6833      	ldr	r3, [r6, #0]
 8009bfc:	4641      	mov	r1, r8
 8009bfe:	4638      	mov	r0, r7
 8009c00:	4798      	blx	r3
 8009c02:	9905      	ldr	r1, [sp, #20]
 8009c04:	f108 0801 	add.w	r8, r8, #1
 8009c08:	3d01      	subs	r5, #1
 8009c0a:	f829 1c02 	strh.w	r1, [r9, #-2]
 8009c0e:	46cb      	mov	fp, r9
 8009c10:	4646      	mov	r6, r8
 8009c12:	2d00      	cmp	r5, #0
 8009c14:	d1dc      	bne.n	8009bd0 <_DrawBitmap+0xde4>
 8009c16:	9e07      	ldr	r6, [sp, #28]
 8009c18:	46ba      	mov	sl, r7
 8009c1a:	2e00      	cmp	r6, #0
 8009c1c:	f43f ab88 	beq.w	8009330 <_DrawBitmap+0x544>
 8009c20:	9c06      	ldr	r4, [sp, #24]
 8009c22:	f240 4c24 	movw	ip, #1060	; 0x424
 8009c26:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8009c2a:	2508      	movs	r5, #8
 8009c2c:	f6c0 0c01 	movt	ip, #2049	; 0x801
 8009c30:	42ae      	cmp	r6, r5
 8009c32:	bf38      	it	cc
 8009c34:	4635      	movcc	r5, r6
 8009c36:	9406      	str	r4, [sp, #24]
 8009c38:	1b76      	subs	r6, r6, r5
 8009c3a:	f81c 4007 	ldrb.w	r4, [ip, r7]
 8009c3e:	f1ba 0f00 	cmp.w	sl, #0
 8009c42:	d1a9      	bne.n	8009b98 <_DrawBitmap+0xdac>
 8009c44:	2c00      	cmp	r4, #0
 8009c46:	f000 80ae 	beq.w	8009da6 <_DrawBitmap+0xfba>
 8009c4a:	07ea      	lsls	r2, r5, #31
 8009c4c:	f10b 0302 	add.w	r3, fp, #2
 8009c50:	d40c      	bmi.n	8009c6c <_DrawBitmap+0xe80>
 8009c52:	07e7      	lsls	r7, r4, #31
 8009c54:	bf48      	it	mi
 8009c56:	f8dd c014 	ldrmi.w	ip, [sp, #20]
 8009c5a:	469b      	mov	fp, r3
 8009c5c:	bf48      	it	mi
 8009c5e:	f823 cc02 	strhmi.w	ip, [r3, #-2]
 8009c62:	3d01      	subs	r5, #1
 8009c64:	3302      	adds	r3, #2
 8009c66:	0864      	lsrs	r4, r4, #1
 8009c68:	f000 809d 	beq.w	8009da6 <_DrawBitmap+0xfba>
 8009c6c:	9f05      	ldr	r7, [sp, #20]
 8009c6e:	e00f      	b.n	8009c90 <_DrawBitmap+0xea4>
 8009c70:	0864      	lsrs	r4, r4, #1
 8009c72:	f000 8098 	beq.w	8009da6 <_DrawBitmap+0xfba>
 8009c76:	f014 0f01 	tst.w	r4, #1
 8009c7a:	bf18      	it	ne
 8009c7c:	f821 7c02 	strhne.w	r7, [r1, #-2]
 8009c80:	0864      	lsrs	r4, r4, #1
 8009c82:	468b      	mov	fp, r1
 8009c84:	f105 35ff 	add.w	r5, r5, #4294967295
 8009c88:	f101 0302 	add.w	r3, r1, #2
 8009c8c:	f000 808b 	beq.w	8009da6 <_DrawBitmap+0xfba>
 8009c90:	f014 0f01 	tst.w	r4, #1
 8009c94:	bf18      	it	ne
 8009c96:	f823 7c02 	strhne.w	r7, [r3, #-2]
 8009c9a:	3d01      	subs	r5, #1
 8009c9c:	f103 0102 	add.w	r1, r3, #2
 8009ca0:	469b      	mov	fp, r3
 8009ca2:	2d00      	cmp	r5, #0
 8009ca4:	d1e4      	bne.n	8009c70 <_DrawBitmap+0xe84>
 8009ca6:	e7b8      	b.n	8009c1a <_DrawBitmap+0xe2e>
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	4641      	mov	r1, r8
 8009cac:	6813      	ldr	r3, [r2, #0]
 8009cae:	9a04      	ldr	r2, [sp, #16]
 8009cb0:	4638      	mov	r0, r7
 8009cb2:	4798      	blx	r3
 8009cb4:	9905      	ldr	r1, [sp, #20]
 8009cb6:	0864      	lsrs	r4, r4, #1
 8009cb8:	f82a 1c02 	strh.w	r1, [sl, #-2]
 8009cbc:	f106 0801 	add.w	r8, r6, #1
 8009cc0:	d194      	bne.n	8009bec <_DrawBitmap+0xe00>
 8009cc2:	9e07      	ldr	r6, [sp, #28]
 8009cc4:	46ba      	mov	sl, r7
 8009cc6:	eb0b 0b45 	add.w	fp, fp, r5, lsl #1
 8009cca:	44a8      	add	r8, r5
 8009ccc:	e7a5      	b.n	8009c1a <_DrawBitmap+0xe2e>
 8009cce:	f8da 2008 	ldr.w	r2, [sl, #8]
 8009cd2:	4650      	mov	r0, sl
 8009cd4:	6817      	ldr	r7, [r2, #0]
 8009cd6:	9a04      	ldr	r2, [sp, #16]
 8009cd8:	4641      	mov	r1, r8
 8009cda:	47b8      	blx	r7
 8009cdc:	f8dd c014 	ldr.w	ip, [sp, #20]
 8009ce0:	f829 cc02 	strh.w	ip, [r9, #-2]
 8009ce4:	e762      	b.n	8009bac <_DrawBitmap+0xdc0>
 8009ce6:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8009ce8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009cea:	4284      	cmp	r4, r0
 8009cec:	bfc8      	it	gt
 8009cee:	b2c4      	uxtbgt	r4, r0
 8009cf0:	1e67      	subs	r7, r4, #1
 8009cf2:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8009cf6:	ebc4 0000 	rsb	r0, r4, r0
 8009cfa:	f10c 0302 	add.w	r3, ip, #2
 8009cfe:	f007 0701 	and.w	r7, r7, #1
 8009d02:	d005      	beq.n	8009d10 <_DrawBitmap+0xf24>
 8009d04:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8009d08:	f082 01ff 	eor.w	r1, r2, #255	; 0xff
 8009d0c:	f823 1c02 	strh.w	r1, [r3, #-2]
 8009d10:	1e61      	subs	r1, r4, #1
 8009d12:	00ad      	lsls	r5, r5, #2
 8009d14:	3302      	adds	r3, #2
 8009d16:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8009d1a:	b2ea      	uxtb	r2, r5
 8009d1c:	d02f      	beq.n	8009d7e <_DrawBitmap+0xf92>
 8009d1e:	b17f      	cbz	r7, 8009d40 <_DrawBitmap+0xf54>
 8009d20:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8009d24:	d005      	beq.n	8009d32 <_DrawBitmap+0xf46>
 8009d26:	f833 7c02 	ldrh.w	r7, [r3, #-2]
 8009d2a:	f087 05ff 	eor.w	r5, r7, #255	; 0xff
 8009d2e:	f823 5c02 	strh.w	r5, [r3, #-2]
 8009d32:	3901      	subs	r1, #1
 8009d34:	0092      	lsls	r2, r2, #2
 8009d36:	3302      	adds	r3, #2
 8009d38:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8009d3c:	b2d2      	uxtb	r2, r2
 8009d3e:	d01e      	beq.n	8009d7e <_DrawBitmap+0xf92>
 8009d40:	0097      	lsls	r7, r2, #2
 8009d42:	3901      	subs	r1, #1
 8009d44:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8009d48:	b2fd      	uxtb	r5, r7
 8009d4a:	b2c9      	uxtb	r1, r1
 8009d4c:	f103 0702 	add.w	r7, r3, #2
 8009d50:	d005      	beq.n	8009d5e <_DrawBitmap+0xf72>
 8009d52:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8009d56:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 8009d5a:	f823 2c02 	strh.w	r2, [r3, #-2]
 8009d5e:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8009d62:	d005      	beq.n	8009d70 <_DrawBitmap+0xf84>
 8009d64:	f837 3c02 	ldrh.w	r3, [r7, #-2]
 8009d68:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 8009d6c:	f827 2c02 	strh.w	r2, [r7, #-2]
 8009d70:	3901      	subs	r1, #1
 8009d72:	00ad      	lsls	r5, r5, #2
 8009d74:	1cbb      	adds	r3, r7, #2
 8009d76:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8009d7a:	b2ea      	uxtb	r2, r5
 8009d7c:	d1e0      	bne.n	8009d40 <_DrawBitmap+0xf54>
 8009d7e:	1e67      	subs	r7, r4, #1
 8009d80:	b2fd      	uxtb	r5, r7
 8009d82:	1c6a      	adds	r2, r5, #1
 8009d84:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	f43f a93e 	beq.w	800900a <_DrawBitmap+0x21e>
 8009d8e:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 8009d92:	2404      	movs	r4, #4
 8009d94:	e7a9      	b.n	8009cea <_DrawBitmap+0xefe>
 8009d96:	f648 0c08 	movw	ip, #34824	; 0x8808
 8009d9a:	f6c1 7cfe 	movt	ip, #8190	; 0x1ffe
 8009d9e:	f8dc 3000 	ldr.w	r3, [ip]
 8009da2:	f7ff b853 	b.w	8008e4c <_DrawBitmap+0x60>
 8009da6:	eb0b 0b45 	add.w	fp, fp, r5, lsl #1
 8009daa:	e736      	b.n	8009c1a <_DrawBitmap+0xe2e>
 8009dac:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8009db0:	f7ff bb19 	b.w	80093e6 <_DrawBitmap+0x5fa>
 8009db4:	2d00      	cmp	r5, #0
 8009db6:	f340 8253 	ble.w	800a260 <_DrawBitmap+0x1474>
 8009dba:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8009dbe:	982b      	ldr	r0, [sp, #172]	; 0xac
 8009dc0:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8009dc4:	9905      	ldr	r1, [sp, #20]
 8009dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dc8:	ea4f 044b 	mov.w	r4, fp, lsl #1
 8009dcc:	eb00 0e0b 	add.w	lr, r0, fp
 8009dd0:	1973      	adds	r3, r6, r5
 8009dd2:	1ea5      	subs	r5, r4, #2
 8009dd4:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8009dd6:	9507      	str	r5, [sp, #28]
 8009dd8:	4657      	mov	r7, sl
 8009dda:	f101 0902 	add.w	r9, r1, #2
 8009dde:	ebc2 0b00 	rsb	fp, r2, r0
 8009de2:	9305      	str	r3, [sp, #20]
 8009de4:	f8cd e010 	str.w	lr, [sp, #16]
 8009de8:	46d0      	mov	r8, sl
 8009dea:	4605      	mov	r5, r0
 8009dec:	f1a9 0002 	sub.w	r0, r9, #2
 8009df0:	2c00      	cmp	r4, #0
 8009df2:	f000 80b1 	beq.w	8009f58 <_DrawBitmap+0x116c>
 8009df6:	f648 0308 	movw	r3, #34824	; 0x8808
 8009dfa:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 8009dfe:	6819      	ldr	r1, [r3, #0]
 8009e00:	7c0a      	ldrb	r2, [r1, #16]
 8009e02:	f012 0303 	ands.w	r3, r2, #3
 8009e06:	d13a      	bne.n	8009e7e <_DrawBitmap+0x1092>
 8009e08:	9b07      	ldr	r3, [sp, #28]
 8009e0a:	7829      	ldrb	r1, [r5, #0]
 8009e0c:	eb03 0c09 	add.w	ip, r3, r9
 8009e10:	ebc0 030c 	rsb	r3, r0, ip
 8009e14:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8009e18:	1e99      	subs	r1, r3, #2
 8009e1a:	45e1      	cmp	r9, ip
 8009e1c:	8002      	strh	r2, [r0, #0]
 8009e1e:	464b      	mov	r3, r9
 8009e20:	f3c1 0040 	ubfx	r0, r1, #1, #1
 8009e24:	4629      	mov	r1, r5
 8009e26:	d017      	beq.n	8009e58 <_DrawBitmap+0x106c>
 8009e28:	b140      	cbz	r0, 8009e3c <_DrawBitmap+0x1050>
 8009e2a:	786a      	ldrb	r2, [r5, #1]
 8009e2c:	464b      	mov	r3, r9
 8009e2e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 8009e32:	f823 1b02 	strh.w	r1, [r3], #2
 8009e36:	1c69      	adds	r1, r5, #1
 8009e38:	4563      	cmp	r3, ip
 8009e3a:	d00d      	beq.n	8009e58 <_DrawBitmap+0x106c>
 8009e3c:	7848      	ldrb	r0, [r1, #1]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8009e44:	f822 0b02 	strh.w	r0, [r2], #2
 8009e48:	7888      	ldrb	r0, [r1, #2]
 8009e4a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8009e4e:	8058      	strh	r0, [r3, #2]
 8009e50:	1c93      	adds	r3, r2, #2
 8009e52:	3102      	adds	r1, #2
 8009e54:	4563      	cmp	r3, ip
 8009e56:	d1f1      	bne.n	8009e3c <_DrawBitmap+0x1050>
 8009e58:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8009e5a:	9b04      	ldr	r3, [sp, #16]
 8009e5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009e5e:	185a      	adds	r2, r3, r1
 8009e60:	9b05      	ldr	r3, [sp, #20]
 8009e62:	9204      	str	r2, [sp, #16]
 8009e64:	3601      	adds	r6, #1
 8009e66:	186d      	adds	r5, r5, r1
 8009e68:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8009e6a:	429e      	cmp	r6, r3
 8009e6c:	4481      	add	r9, r0
 8009e6e:	448b      	add	fp, r1
 8009e70:	d1bc      	bne.n	8009dec <_DrawBitmap+0x1000>
 8009e72:	4647      	mov	r7, r8
 8009e74:	2f00      	cmp	r7, #0
 8009e76:	f47f a895 	bne.w	8008fa4 <_DrawBitmap+0x1b8>
 8009e7a:	f7ff b896 	b.w	8008faa <_DrawBitmap+0x1be>
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d1ea      	bne.n	8009e58 <_DrawBitmap+0x106c>
 8009e82:	2f00      	cmp	r7, #0
 8009e84:	d078      	beq.n	8009f78 <_DrawBitmap+0x118c>
 8009e86:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009e8a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8009e8e:	f81b 000a 	ldrb.w	r0, [fp, sl]
 8009e92:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009e96:	f001 0a01 	and.w	sl, r1, #1
 8009e9a:	b148      	cbz	r0, 8009eb0 <_DrawBitmap+0x10c4>
 8009e9c:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ea4:	f829 2c02 	strh.w	r2, [r9, #-2]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4638      	mov	r0, r7
 8009eac:	4632      	mov	r2, r6
 8009eae:	4798      	blx	r3
 8009eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eb2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009eb4:	1c43      	adds	r3, r0, #1
 8009eb6:	f1b1 0c01 	subs.w	ip, r1, #1
 8009eba:	f109 0802 	add.w	r8, r9, #2
 8009ebe:	d048      	beq.n	8009f52 <_DrawBitmap+0x1166>
 8009ec0:	f1ba 0f00 	cmp.w	sl, #0
 8009ec4:	d019      	beq.n	8009efa <_DrawBitmap+0x110e>
 8009ec6:	f81b 2003 	ldrb.w	r2, [fp, r3]
 8009eca:	b182      	cbz	r2, 8009eee <_DrawBitmap+0x1102>
 8009ecc:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 8009ed0:	68b9      	ldr	r1, [r7, #8]
 8009ed2:	f828 0c02 	strh.w	r0, [r8, #-2]
 8009ed6:	f8d1 a000 	ldr.w	sl, [r1]
 8009eda:	9303      	str	r3, [sp, #12]
 8009edc:	4619      	mov	r1, r3
 8009ede:	f8cd c008 	str.w	ip, [sp, #8]
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	4632      	mov	r2, r6
 8009ee6:	47d0      	blx	sl
 8009ee8:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009eec:	9b03      	ldr	r3, [sp, #12]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	f1bc 0c01 	subs.w	ip, ip, #1
 8009ef4:	f108 0802 	add.w	r8, r8, #2
 8009ef8:	d02b      	beq.n	8009f52 <_DrawBitmap+0x1166>
 8009efa:	950b      	str	r5, [sp, #44]	; 0x2c
 8009efc:	4635      	mov	r5, r6
 8009efe:	4666      	mov	r6, ip
 8009f00:	f103 0a01 	add.w	sl, r3, #1
 8009f04:	4619      	mov	r1, r3
 8009f06:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	462a      	mov	r2, r5
 8009f0e:	b143      	cbz	r3, 8009f22 <_DrawBitmap+0x1136>
 8009f10:	f854 e023 	ldr.w	lr, [r4, r3, lsl #2]
 8009f14:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8009f18:	f828 ec02 	strh.w	lr, [r8, #-2]
 8009f1c:	f8dc 3000 	ldr.w	r3, [ip]
 8009f20:	4798      	blx	r3
 8009f22:	f81b 200a 	ldrb.w	r2, [fp, sl]
 8009f26:	3e01      	subs	r6, #1
 8009f28:	f108 0802 	add.w	r8, r8, #2
 8009f2c:	b14a      	cbz	r2, 8009f42 <_DrawBitmap+0x1156>
 8009f2e:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 8009f32:	68b9      	ldr	r1, [r7, #8]
 8009f34:	f828 0c02 	strh.w	r0, [r8, #-2]
 8009f38:	680b      	ldr	r3, [r1, #0]
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	4651      	mov	r1, sl
 8009f3e:	462a      	mov	r2, r5
 8009f40:	4798      	blx	r3
 8009f42:	3e01      	subs	r6, #1
 8009f44:	f10a 0301 	add.w	r3, sl, #1
 8009f48:	f108 0802 	add.w	r8, r8, #2
 8009f4c:	d1d8      	bne.n	8009f00 <_DrawBitmap+0x1114>
 8009f4e:	462e      	mov	r6, r5
 8009f50:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009f52:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009f54:	46b8      	mov	r8, r7
 8009f56:	e77f      	b.n	8009e58 <_DrawBitmap+0x106c>
 8009f58:	f648 0108 	movw	r1, #34824	; 0x8808
 8009f5c:	f6c1 71fe 	movt	r1, #8190	; 0x1ffe
 8009f60:	680a      	ldr	r2, [r1, #0]
 8009f62:	7c13      	ldrb	r3, [r2, #16]
 8009f64:	f013 0103 	ands.w	r1, r3, #3
 8009f68:	d144      	bne.n	8009ff4 <_DrawBitmap+0x1208>
 8009f6a:	4629      	mov	r1, r5
 8009f6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f6e:	f003 fdb1 	bl	800dad4 <memcpy>
 8009f72:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009f74:	46b8      	mov	r8, r7
 8009f76:	e76f      	b.n	8009e58 <_DrawBitmap+0x106c>
 8009f78:	462b      	mov	r3, r5
 8009f7a:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f82:	43e8      	mvns	r0, r5
 8009f84:	eb00 010c 	add.w	r1, r0, ip
 8009f88:	f001 0001 	and.w	r0, r1, #1
 8009f8c:	bb2a      	cbnz	r2, 8009fda <_DrawBitmap+0x11ee>
 8009f8e:	4563      	cmp	r3, ip
 8009f90:	f109 0202 	add.w	r2, r9, #2
 8009f94:	d0de      	beq.n	8009f54 <_DrawBitmap+0x1168>
 8009f96:	b158      	cbz	r0, 8009fb0 <_DrawBitmap+0x11c4>
 8009f98:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009f9c:	b119      	cbz	r1, 8009fa6 <_DrawBitmap+0x11ba>
 8009f9e:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8009fa2:	f822 0c02 	strh.w	r0, [r2, #-2]
 8009fa6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009faa:	3202      	adds	r2, #2
 8009fac:	4543      	cmp	r3, r8
 8009fae:	d0d1      	beq.n	8009f54 <_DrawBitmap+0x1168>
 8009fb0:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009fb4:	1c90      	adds	r0, r2, #2
 8009fb6:	b119      	cbz	r1, 8009fc0 <_DrawBitmap+0x11d4>
 8009fb8:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8009fbc:	f822 1c02 	strh.w	r1, [r2, #-2]
 8009fc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fc4:	b11a      	cbz	r2, 8009fce <_DrawBitmap+0x11e2>
 8009fc6:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 8009fca:	f820 1c02 	strh.w	r1, [r0, #-2]
 8009fce:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009fd2:	1c82      	adds	r2, r0, #2
 8009fd4:	4563      	cmp	r3, ip
 8009fd6:	d1eb      	bne.n	8009fb0 <_DrawBitmap+0x11c4>
 8009fd8:	e7bc      	b.n	8009f54 <_DrawBitmap+0x1168>
 8009fda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fde:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009fe2:	f829 2c02 	strh.w	r2, [r9, #-2]
 8009fe6:	e7d2      	b.n	8009f8e <_DrawBitmap+0x11a2>
 8009fe8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009fea:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8009fec:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8009ff0:	f7ff bb55 	b.w	800969e <_DrawBitmap+0x8b2>
 8009ff4:	2902      	cmp	r1, #2
 8009ff6:	f47f af2f 	bne.w	8009e58 <_DrawBitmap+0x106c>
 8009ffa:	2f00      	cmp	r7, #0
 8009ffc:	d07f      	beq.n	800a0fe <_DrawBitmap+0x1312>
 8009ffe:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800a002:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800a006:	f81b 000a 	ldrb.w	r0, [fp, sl]
 800a00a:	f108 32ff 	add.w	r2, r8, #4294967295
 800a00e:	f002 0a01 	and.w	sl, r2, #1
 800a012:	b138      	cbz	r0, 800a024 <_DrawBitmap+0x1238>
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a018:	f829 0c02 	strh.w	r0, [r9, #-2]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4638      	mov	r0, r7
 800a020:	4632      	mov	r2, r6
 800a022:	4798      	blx	r3
 800a024:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a026:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800a02a:	1e48      	subs	r0, r1, #1
 800a02c:	f10c 0801 	add.w	r8, ip, #1
 800a030:	9006      	str	r0, [sp, #24]
 800a032:	f109 0c02 	add.w	ip, r9, #2
 800a036:	d08c      	beq.n	8009f52 <_DrawBitmap+0x1166>
 800a038:	f1ba 0f00 	cmp.w	sl, #0
 800a03c:	d017      	beq.n	800a06e <_DrawBitmap+0x1282>
 800a03e:	f81b 3008 	ldrb.w	r3, [fp, r8]
 800a042:	b15b      	cbz	r3, 800a05c <_DrawBitmap+0x1270>
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	f82c 3c02 	strh.w	r3, [ip, #-2]
 800a04a:	4638      	mov	r0, r7
 800a04c:	6813      	ldr	r3, [r2, #0]
 800a04e:	f8cd c008 	str.w	ip, [sp, #8]
 800a052:	4641      	mov	r1, r8
 800a054:	4632      	mov	r2, r6
 800a056:	4798      	blx	r3
 800a058:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a05c:	9906      	ldr	r1, [sp, #24]
 800a05e:	1e48      	subs	r0, r1, #1
 800a060:	f108 0801 	add.w	r8, r8, #1
 800a064:	f10c 0c02 	add.w	ip, ip, #2
 800a068:	9006      	str	r0, [sp, #24]
 800a06a:	f43f af72 	beq.w	8009f52 <_DrawBitmap+0x1166>
 800a06e:	9508      	str	r5, [sp, #32]
 800a070:	4645      	mov	r5, r8
 800a072:	46b0      	mov	r8, r6
 800a074:	4626      	mov	r6, r4
 800a076:	4664      	mov	r4, ip
 800a078:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a07c:	f105 0a01 	add.w	sl, r5, #1
 800a080:	4629      	mov	r1, r5
 800a082:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800a086:	4638      	mov	r0, r7
 800a088:	4642      	mov	r2, r8
 800a08a:	b145      	cbz	r5, 800a09e <_DrawBitmap+0x12b2>
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	f824 5c02 	strh.w	r5, [r4, #-2]
 800a092:	681d      	ldr	r5, [r3, #0]
 800a094:	f8cd c008 	str.w	ip, [sp, #8]
 800a098:	47a8      	blx	r5
 800a09a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a09e:	f81b 100a 	ldrb.w	r1, [fp, sl]
 800a0a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a0a6:	3402      	adds	r4, #2
 800a0a8:	b159      	cbz	r1, 800a0c2 <_DrawBitmap+0x12d6>
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	f824 1c02 	strh.w	r1, [r4, #-2]
 800a0b0:	6813      	ldr	r3, [r2, #0]
 800a0b2:	f8cd c008 	str.w	ip, [sp, #8]
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	4651      	mov	r1, sl
 800a0ba:	4642      	mov	r2, r8
 800a0bc:	4798      	blx	r3
 800a0be:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a0c2:	3402      	adds	r4, #2
 800a0c4:	f1bc 0c01 	subs.w	ip, ip, #1
 800a0c8:	f10a 0501 	add.w	r5, sl, #1
 800a0cc:	d1d6      	bne.n	800a07c <_DrawBitmap+0x1290>
 800a0ce:	4634      	mov	r4, r6
 800a0d0:	9d08      	ldr	r5, [sp, #32]
 800a0d2:	4646      	mov	r6, r8
 800a0d4:	e73d      	b.n	8009f52 <_DrawBitmap+0x1166>
 800a0d6:	ea4f 1919 	mov.w	r9, r9, lsr #4
 800a0da:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a0dc:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 800a0e0:	f8ac 2000 	strh.w	r2, [ip]
 800a0e4:	f1ba 0f00 	cmp.w	sl, #0
 800a0e8:	f43f aacf 	beq.w	800968a <_DrawBitmap+0x89e>
 800a0ec:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a0f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0f2:	681e      	ldr	r6, [r3, #0]
 800a0f4:	9a04      	ldr	r2, [sp, #16]
 800a0f6:	4650      	mov	r0, sl
 800a0f8:	47b0      	blx	r6
 800a0fa:	f7ff bac6 	b.w	800968a <_DrawBitmap+0x89e>
 800a0fe:	462b      	mov	r3, r5
 800a100:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a104:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a108:	ebc8 0005 	rsb	r0, r8, r5
 800a10c:	43c1      	mvns	r1, r0
 800a10e:	f001 0001 	and.w	r0, r1, #1
 800a112:	b11a      	cbz	r2, 800a11c <_DrawBitmap+0x1330>
 800a114:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a118:	f829 2c02 	strh.w	r2, [r9, #-2]
 800a11c:	4598      	cmp	r8, r3
 800a11e:	f109 0202 	add.w	r2, r9, #2
 800a122:	f43f af17 	beq.w	8009f54 <_DrawBitmap+0x1168>
 800a126:	b150      	cbz	r0, 800a13e <_DrawBitmap+0x1352>
 800a128:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a12c:	b109      	cbz	r1, 800a132 <_DrawBitmap+0x1346>
 800a12e:	f822 1c02 	strh.w	r1, [r2, #-2]
 800a132:	f8dd c010 	ldr.w	ip, [sp, #16]
 800a136:	3202      	adds	r2, #2
 800a138:	459c      	cmp	ip, r3
 800a13a:	f43f af0b 	beq.w	8009f54 <_DrawBitmap+0x1168>
 800a13e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a142:	1c91      	adds	r1, r2, #2
 800a144:	b108      	cbz	r0, 800a14a <_DrawBitmap+0x135e>
 800a146:	f822 0c02 	strh.w	r0, [r2, #-2]
 800a14a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a14e:	b10a      	cbz	r2, 800a154 <_DrawBitmap+0x1368>
 800a150:	f821 2c02 	strh.w	r2, [r1, #-2]
 800a154:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a158:	1c8a      	adds	r2, r1, #2
 800a15a:	4598      	cmp	r8, r3
 800a15c:	d1ef      	bne.n	800a13e <_DrawBitmap+0x1352>
 800a15e:	e6f9      	b.n	8009f54 <_DrawBitmap+0x1168>
 800a160:	0874      	lsrs	r4, r6, #1
 800a162:	1c6f      	adds	r7, r5, #1
 800a164:	43ea      	mvns	r2, r5
 800a166:	1938      	adds	r0, r7, r4
 800a168:	1811      	adds	r1, r2, r0
 800a16a:	f019 0ff0 	tst.w	r9, #240	; 0xf0
 800a16e:	f10c 0304 	add.w	r3, ip, #4
 800a172:	f001 0201 	and.w	r2, r1, #1
 800a176:	d006      	beq.n	800a186 <_DrawBitmap+0x139a>
 800a178:	ea4f 1119 	mov.w	r1, r9, lsr #4
 800a17c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a17e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a182:	f823 1c04 	strh.w	r1, [r3, #-4]
 800a186:	f019 090f 	ands.w	r9, r9, #15
 800a18a:	d004      	beq.n	800a196 <_DrawBitmap+0x13aa>
 800a18c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a18e:	f857 1029 	ldr.w	r1, [r7, r9, lsl #2]
 800a192:	f823 1c02 	strh.w	r1, [r3, #-2]
 800a196:	f815 9f01 	ldrb.w	r9, [r5, #1]!
 800a19a:	3304      	adds	r3, #4
 800a19c:	4285      	cmp	r5, r0
 800a19e:	d044      	beq.n	800a22a <_DrawBitmap+0x143e>
 800a1a0:	b1b2      	cbz	r2, 800a1d0 <_DrawBitmap+0x13e4>
 800a1a2:	f019 0ff0 	tst.w	r9, #240	; 0xf0
 800a1a6:	d006      	beq.n	800a1b6 <_DrawBitmap+0x13ca>
 800a1a8:	ea4f 1219 	mov.w	r2, r9, lsr #4
 800a1ac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a1ae:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
 800a1b2:	f823 1c04 	strh.w	r1, [r3, #-4]
 800a1b6:	f019 090f 	ands.w	r9, r9, #15
 800a1ba:	d004      	beq.n	800a1c6 <_DrawBitmap+0x13da>
 800a1bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1be:	f852 7029 	ldr.w	r7, [r2, r9, lsl #2]
 800a1c2:	f823 7c02 	strh.w	r7, [r3, #-2]
 800a1c6:	f815 9f01 	ldrb.w	r9, [r5, #1]!
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	4285      	cmp	r5, r0
 800a1ce:	d02c      	beq.n	800a22a <_DrawBitmap+0x143e>
 800a1d0:	f019 0ff0 	tst.w	r9, #240	; 0xf0
 800a1d4:	ea4f 1119 	mov.w	r1, r9, lsr #4
 800a1d8:	f103 0204 	add.w	r2, r3, #4
 800a1dc:	d004      	beq.n	800a1e8 <_DrawBitmap+0x13fc>
 800a1de:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a1e0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a1e4:	f823 1c04 	strh.w	r1, [r3, #-4]
 800a1e8:	f019 090f 	ands.w	r9, r9, #15
 800a1ec:	d004      	beq.n	800a1f8 <_DrawBitmap+0x140c>
 800a1ee:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a1f0:	f857 1029 	ldr.w	r1, [r7, r9, lsl #2]
 800a1f4:	f823 1c02 	strh.w	r1, [r3, #-2]
 800a1f8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800a1fc:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800a200:	d005      	beq.n	800a20e <_DrawBitmap+0x1422>
 800a202:	0919      	lsrs	r1, r3, #4
 800a204:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a206:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a20a:	f822 1c04 	strh.w	r1, [r2, #-4]
 800a20e:	f013 010f 	ands.w	r1, r3, #15
 800a212:	f102 0304 	add.w	r3, r2, #4
 800a216:	d004      	beq.n	800a222 <_DrawBitmap+0x1436>
 800a218:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a21a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a21e:	f822 1c02 	strh.w	r1, [r2, #-2]
 800a222:	f815 9f01 	ldrb.w	r9, [r5, #1]!
 800a226:	4285      	cmp	r5, r0
 800a228:	d1d2      	bne.n	800a1d0 <_DrawBitmap+0x13e4>
 800a22a:	1c65      	adds	r5, r4, #1
 800a22c:	f10b 0b02 	add.w	fp, fp, #2
 800a230:	eb0c 0c85 	add.w	ip, ip, r5, lsl #2
 800a234:	eb0b 0b44 	add.w	fp, fp, r4, lsl #1
 800a238:	eba6 0144 	sub.w	r1, r6, r4, lsl #1
 800a23c:	f7ff bb15 	b.w	800986a <_DrawBitmap+0xa7e>
 800a240:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800a244:	f7ff b8a0 	b.w	8009388 <_DrawBitmap+0x59c>
 800a248:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800a24c:	f7ff b8c1 	b.w	80093d2 <_DrawBitmap+0x5e6>
 800a250:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800a254:	f1ba 0f00 	cmp.w	sl, #0
 800a258:	f47e aea4 	bne.w	8008fa4 <_DrawBitmap+0x1b8>
 800a25c:	f7fe bea5 	b.w	8008faa <_DrawBitmap+0x1be>
 800a260:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a262:	2f00      	cmp	r7, #0
 800a264:	f47e ae9e 	bne.w	8008fa4 <_DrawBitmap+0x1b8>
 800a268:	f7fe be9f 	b.w	8008faa <_DrawBitmap+0x1be>

0800a26c <_XorPixel>:
 800a26c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a270:	4c1e      	ldr	r4, [pc, #120]	; (800a2ec <_XorPixel+0x80>)
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	b083      	sub	sp, #12
 800a276:	4681      	mov	r9, r0
 800a278:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a27a:	4617      	mov	r7, r2
 800a27c:	4688      	mov	r8, r1
 800a27e:	f7fe fc0d 	bl	8008a9c <GUI_ALLOC_LockH>
 800a282:	6821      	ldr	r1, [r4, #0]
 800a284:	9000      	str	r0, [sp, #0]
 800a286:	6c88      	ldr	r0, [r1, #72]	; 0x48
 800a288:	f7fe fc08 	bl	8008a9c <GUI_ALLOC_LockH>
 800a28c:	ac02      	add	r4, sp, #8
 800a28e:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 800a292:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a296:	68c2      	ldr	r2, [r0, #12]
 800a298:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 800a29c:	f100 0318 	add.w	r3, r0, #24
 800a2a0:	1b79      	subs	r1, r7, r5
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	fb02 3501 	mla	r5, r2, r1, r3
 800a2a8:	f7fe fc0a 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800a2ac:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a2b0:	ebc6 0608 	rsb	r6, r6, r8
 800a2b4:	6882      	ldr	r2, [r0, #8]
 800a2b6:	4790      	blx	r2
 800a2b8:	9b00      	ldr	r3, [sp, #0]
 800a2ba:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 800a2be:	695a      	ldr	r2, [r3, #20]
 800a2c0:	4048      	eors	r0, r1
 800a2c2:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
 800a2c6:	b15a      	cbz	r2, 800a2e0 <_XorPixel+0x74>
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	f7fe fbe7 	bl	8008a9c <GUI_ALLOC_LockH>
 800a2ce:	9001      	str	r0, [sp, #4]
 800a2d0:	6883      	ldr	r3, [r0, #8]
 800a2d2:	4641      	mov	r1, r8
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	463a      	mov	r2, r7
 800a2d8:	4798      	blx	r3
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f7fe fbf0 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800a2e0:	4668      	mov	r0, sp
 800a2e2:	f7fe fbed 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800a2e6:	b003      	add	sp, #12
 800a2e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2ec:	1ffe8808 	.word	0x1ffe8808

0800a2f0 <_GetPixelIndex>:
 800a2f0:	b570      	push	{r4, r5, r6, lr}
 800a2f2:	f648 0308 	movw	r3, #34824	; 0x8808
 800a2f6:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	6818      	ldr	r0, [r3, #0]
 800a2fe:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800a300:	460c      	mov	r4, r1
 800a302:	4616      	mov	r6, r2
 800a304:	f7fe fbca 	bl	8008a9c <GUI_ALLOC_LockH>
 800a308:	ab02      	add	r3, sp, #8
 800a30a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800a30e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800a312:	68c5      	ldr	r5, [r0, #12]
 800a314:	f843 0d04 	str.w	r0, [r3, #-4]!
 800a318:	1a76      	subs	r6, r6, r1
 800a31a:	3018      	adds	r0, #24
 800a31c:	fb05 0506 	mla	r5, r5, r6, r0
 800a320:	1aa4      	subs	r4, r4, r2
 800a322:	4618      	mov	r0, r3
 800a324:	f7fe fbcc 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800a328:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
 800a32c:	b002      	add	sp, #8
 800a32e:	bd70      	pop	{r4, r5, r6, pc}

0800a330 <_SetPixelIndex>:
 800a330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a334:	4c1a      	ldr	r4, [pc, #104]	; (800a3a0 <_SetPixelIndex+0x70>)
 800a336:	6820      	ldr	r0, [r4, #0]
 800a338:	b083      	sub	sp, #12
 800a33a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800a33c:	460e      	mov	r6, r1
 800a33e:	4615      	mov	r5, r2
 800a340:	4699      	mov	r9, r3
 800a342:	f7fe fbab 	bl	8008a9c <GUI_ALLOC_LockH>
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	9000      	str	r0, [sp, #0]
 800a34a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a34c:	f7fe fba6 	bl	8008a9c <GUI_ALLOC_LockH>
 800a350:	ac02      	add	r4, sp, #8
 800a352:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 800a356:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a35a:	68c2      	ldr	r2, [r0, #12]
 800a35c:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 800a360:	f100 0118 	add.w	r1, r0, #24
 800a364:	1beb      	subs	r3, r5, r7
 800a366:	4620      	mov	r0, r4
 800a368:	fb02 1703 	mla	r7, r2, r3, r1
 800a36c:	f7fe fba8 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800a370:	9800      	ldr	r0, [sp, #0]
 800a372:	ebc8 0806 	rsb	r8, r8, r6
 800a376:	6940      	ldr	r0, [r0, #20]
 800a378:	f827 9018 	strh.w	r9, [r7, r8, lsl #1]
 800a37c:	b150      	cbz	r0, 800a394 <_SetPixelIndex+0x64>
 800a37e:	f7fe fb8d 	bl	8008a9c <GUI_ALLOC_LockH>
 800a382:	9001      	str	r0, [sp, #4]
 800a384:	6883      	ldr	r3, [r0, #8]
 800a386:	4631      	mov	r1, r6
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	462a      	mov	r2, r5
 800a38c:	4798      	blx	r3
 800a38e:	4620      	mov	r0, r4
 800a390:	f7fe fb96 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800a394:	4668      	mov	r0, sp
 800a396:	f7fe fb93 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800a39a:	b003      	add	sp, #12
 800a39c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3a0:	1ffe8808 	.word	0x1ffe8808

0800a3a4 <_DrawVLine>:
 800a3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a8:	4f6a      	ldr	r7, [pc, #424]	; (800a554 <_DrawVLine+0x1b0>)
 800a3aa:	683c      	ldr	r4, [r7, #0]
 800a3ac:	b084      	sub	sp, #16
 800a3ae:	4681      	mov	r9, r0
 800a3b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a3b2:	460e      	mov	r6, r1
 800a3b4:	4614      	mov	r4, r2
 800a3b6:	4698      	mov	r8, r3
 800a3b8:	f7fe fb70 	bl	8008a9c <GUI_ALLOC_LockH>
 800a3bc:	9000      	str	r0, [sp, #0]
 800a3be:	6940      	ldr	r0, [r0, #20]
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d15a      	bne.n	800a47a <_DrawVLine+0xd6>
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	9002      	str	r0, [sp, #8]
 800a3c8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a3ca:	f7fe fb67 	bl	8008a9c <GUI_ALLOC_LockH>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	a804      	add	r0, sp, #16
 800a3d2:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 800a3d6:	68d1      	ldr	r1, [r2, #12]
 800a3d8:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800a3dc:	f840 2d04 	str.w	r2, [r0, #-4]!
 800a3e0:	f102 0318 	add.w	r3, r2, #24
 800a3e4:	ebce 0204 	rsb	r2, lr, r4
 800a3e8:	fb01 3102 	mla	r1, r1, r2, r3
 800a3ec:	1b75      	subs	r5, r6, r5
 800a3ee:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 800a3f2:	f7fe fb65 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800a3f6:	6838      	ldr	r0, [r7, #0]
 800a3f8:	9f00      	ldr	r7, [sp, #0]
 800a3fa:	7c03      	ldrb	r3, [r0, #16]
 800a3fc:	68ff      	ldr	r7, [r7, #12]
 800a3fe:	07da      	lsls	r2, r3, #31
 800a400:	d43e      	bmi.n	800a480 <_DrawVLine+0xdc>
 800a402:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a404:	9802      	ldr	r0, [sp, #8]
 800a406:	6811      	ldr	r1, [r2, #0]
 800a408:	2800      	cmp	r0, #0
 800a40a:	f000 808c 	beq.w	800a526 <_DrawVLine+0x182>
 800a40e:	ebc4 0208 	rsb	r2, r4, r8
 800a412:	07d3      	lsls	r3, r2, #31
 800a414:	fa1f f981 	uxth.w	r9, r1
 800a418:	d518      	bpl.n	800a44c <_DrawVLine+0xa8>
 800a41a:	6881      	ldr	r1, [r0, #8]
 800a41c:	4622      	mov	r2, r4
 800a41e:	680b      	ldr	r3, [r1, #0]
 800a420:	3401      	adds	r4, #1
 800a422:	4631      	mov	r1, r6
 800a424:	4798      	blx	r3
 800a426:	45a0      	cmp	r8, r4
 800a428:	f8a5 9000 	strh.w	r9, [r5]
 800a42c:	443d      	add	r5, r7
 800a42e:	db19      	blt.n	800a464 <_DrawVLine+0xc0>
 800a430:	9802      	ldr	r0, [sp, #8]
 800a432:	e00b      	b.n	800a44c <_DrawVLine+0xa8>
 800a434:	9802      	ldr	r0, [sp, #8]
 800a436:	6882      	ldr	r2, [r0, #8]
 800a438:	4631      	mov	r1, r6
 800a43a:	6813      	ldr	r3, [r2, #0]
 800a43c:	4622      	mov	r2, r4
 800a43e:	4798      	blx	r3
 800a440:	9802      	ldr	r0, [sp, #8]
 800a442:	f825 9007 	strh.w	r9, [r5, r7]
 800a446:	3401      	adds	r4, #1
 800a448:	eb0a 0507 	add.w	r5, sl, r7
 800a44c:	6883      	ldr	r3, [r0, #8]
 800a44e:	4622      	mov	r2, r4
 800a450:	4631      	mov	r1, r6
 800a452:	3401      	adds	r4, #1
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4798      	blx	r3
 800a458:	45a0      	cmp	r8, r4
 800a45a:	eb05 0a07 	add.w	sl, r5, r7
 800a45e:	f8a5 9000 	strh.w	r9, [r5]
 800a462:	dae7      	bge.n	800a434 <_DrawVLine+0x90>
 800a464:	4668      	mov	r0, sp
 800a466:	f7fe fb2b 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800a46a:	9b02      	ldr	r3, [sp, #8]
 800a46c:	b113      	cbz	r3, 800a474 <_DrawVLine+0xd0>
 800a46e:	a802      	add	r0, sp, #8
 800a470:	f7fe fb26 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800a474:	b004      	add	sp, #16
 800a476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a47a:	f7fe fb0f 	bl	8008a9c <GUI_ALLOC_LockH>
 800a47e:	e7a1      	b.n	800a3c4 <_DrawVLine+0x20>
 800a480:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a484:	68b8      	ldr	r0, [r7, #8]
 800a486:	4780      	blx	r0
 800a488:	9902      	ldr	r1, [sp, #8]
 800a48a:	ebc4 0208 	rsb	r2, r4, r8
 800a48e:	fa1f f980 	uxth.w	r9, r0
 800a492:	f002 0701 	and.w	r7, r2, #1
 800a496:	b129      	cbz	r1, 800a4a4 <_DrawVLine+0x100>
 800a498:	688b      	ldr	r3, [r1, #8]
 800a49a:	4608      	mov	r0, r1
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4631      	mov	r1, r6
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	4798      	blx	r3
 800a4a4:	9900      	ldr	r1, [sp, #0]
 800a4a6:	8828      	ldrh	r0, [r5, #0]
 800a4a8:	68cb      	ldr	r3, [r1, #12]
 800a4aa:	3401      	adds	r4, #1
 800a4ac:	ea89 0200 	eor.w	r2, r9, r0
 800a4b0:	4544      	cmp	r4, r8
 800a4b2:	802a      	strh	r2, [r5, #0]
 800a4b4:	441d      	add	r5, r3
 800a4b6:	dcd5      	bgt.n	800a464 <_DrawVLine+0xc0>
 800a4b8:	b187      	cbz	r7, 800a4dc <_DrawVLine+0x138>
 800a4ba:	9802      	ldr	r0, [sp, #8]
 800a4bc:	b120      	cbz	r0, 800a4c8 <_DrawVLine+0x124>
 800a4be:	6881      	ldr	r1, [r0, #8]
 800a4c0:	4622      	mov	r2, r4
 800a4c2:	680b      	ldr	r3, [r1, #0]
 800a4c4:	4631      	mov	r1, r6
 800a4c6:	4798      	blx	r3
 800a4c8:	9a00      	ldr	r2, [sp, #0]
 800a4ca:	8828      	ldrh	r0, [r5, #0]
 800a4cc:	68d1      	ldr	r1, [r2, #12]
 800a4ce:	3401      	adds	r4, #1
 800a4d0:	ea89 0300 	eor.w	r3, r9, r0
 800a4d4:	4544      	cmp	r4, r8
 800a4d6:	802b      	strh	r3, [r5, #0]
 800a4d8:	440d      	add	r5, r1
 800a4da:	dcc3      	bgt.n	800a464 <_DrawVLine+0xc0>
 800a4dc:	9b02      	ldr	r3, [sp, #8]
 800a4de:	4622      	mov	r2, r4
 800a4e0:	4631      	mov	r1, r6
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	b11b      	cbz	r3, 800a4ee <_DrawVLine+0x14a>
 800a4e6:	689f      	ldr	r7, [r3, #8]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	4798      	blx	r3
 800a4ec:	9b02      	ldr	r3, [sp, #8]
 800a4ee:	9800      	ldr	r0, [sp, #0]
 800a4f0:	f8b5 c000 	ldrh.w	ip, [r5]
 800a4f4:	68c7      	ldr	r7, [r0, #12]
 800a4f6:	ea89 020c 	eor.w	r2, r9, ip
 800a4fa:	3401      	adds	r4, #1
 800a4fc:	802a      	strh	r2, [r5, #0]
 800a4fe:	4618      	mov	r0, r3
 800a500:	4631      	mov	r1, r6
 800a502:	19ef      	adds	r7, r5, r7
 800a504:	4622      	mov	r2, r4
 800a506:	b113      	cbz	r3, 800a50e <_DrawVLine+0x16a>
 800a508:	689d      	ldr	r5, [r3, #8]
 800a50a:	682b      	ldr	r3, [r5, #0]
 800a50c:	4798      	blx	r3
 800a50e:	9800      	ldr	r0, [sp, #0]
 800a510:	8839      	ldrh	r1, [r7, #0]
 800a512:	68c2      	ldr	r2, [r0, #12]
 800a514:	3401      	adds	r4, #1
 800a516:	ea89 0501 	eor.w	r5, r9, r1
 800a51a:	4544      	cmp	r4, r8
 800a51c:	803d      	strh	r5, [r7, #0]
 800a51e:	eb07 0502 	add.w	r5, r7, r2
 800a522:	dddb      	ble.n	800a4dc <_DrawVLine+0x138>
 800a524:	e79e      	b.n	800a464 <_DrawVLine+0xc0>
 800a526:	ebc4 0408 	rsb	r4, r4, r8
 800a52a:	b288      	uxth	r0, r1
 800a52c:	4623      	mov	r3, r4
 800a52e:	8028      	strh	r0, [r5, #0]
 800a530:	f004 0401 	and.w	r4, r4, #1
 800a534:	19ed      	adds	r5, r5, r7
 800a536:	2b00      	cmp	r3, #0
 800a538:	d094      	beq.n	800a464 <_DrawVLine+0xc0>
 800a53a:	b11c      	cbz	r4, 800a544 <_DrawVLine+0x1a0>
 800a53c:	3b01      	subs	r3, #1
 800a53e:	8028      	strh	r0, [r5, #0]
 800a540:	443d      	add	r5, r7
 800a542:	d08f      	beq.n	800a464 <_DrawVLine+0xc0>
 800a544:	3b02      	subs	r3, #2
 800a546:	8028      	strh	r0, [r5, #0]
 800a548:	53e8      	strh	r0, [r5, r7]
 800a54a:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 800a54e:	d1f9      	bne.n	800a544 <_DrawVLine+0x1a0>
 800a550:	e788      	b.n	800a464 <_DrawVLine+0xc0>
 800a552:	bf00      	nop
 800a554:	1ffe8808 	.word	0x1ffe8808

0800a558 <_FillRect>:
 800a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	f648 0508 	movw	r5, #34824	; 0x8808
 800a560:	f6c1 75fe 	movt	r5, #8190	; 0x1ffe
 800a564:	b08b      	sub	sp, #44	; 0x2c
 800a566:	682c      	ldr	r4, [r5, #0]
 800a568:	9006      	str	r0, [sp, #24]
 800a56a:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800a56c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a56e:	6835      	ldr	r5, [r6, #0]
 800a570:	460c      	mov	r4, r1
 800a572:	469b      	mov	fp, r3
 800a574:	4690      	mov	r8, r2
 800a576:	f7fe fa91 	bl	8008a9c <GUI_ALLOC_LockH>
 800a57a:	f648 0208 	movw	r2, #34824	; 0x8808
 800a57e:	f6c1 72fe 	movt	r2, #8190	; 0x1ffe
 800a582:	9008      	str	r0, [sp, #32]
 800a584:	6813      	ldr	r3, [r2, #0]
 800a586:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a588:	f7fe fa88 	bl	8008a9c <GUI_ALLOC_LockH>
 800a58c:	af0a      	add	r7, sp, #40	; 0x28
 800a58e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800a592:	68c2      	ldr	r2, [r0, #12]
 800a594:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 800a598:	f847 0d04 	str.w	r0, [r7, #-4]!
 800a59c:	ebc1 0308 	rsb	r3, r1, r8
 800a5a0:	3018      	adds	r0, #24
 800a5a2:	fb02 0103 	mla	r1, r2, r3, r0
 800a5a6:	1ba2      	subs	r2, r4, r6
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	eb01 0642 	add.w	r6, r1, r2, lsl #1
 800a5ae:	f7fe fa87 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800a5b2:	9b08      	ldr	r3, [sp, #32]
 800a5b4:	68d9      	ldr	r1, [r3, #12]
 800a5b6:	6958      	ldr	r0, [r3, #20]
 800a5b8:	9105      	str	r1, [sp, #20]
 800a5ba:	ebc4 0c0b 	rsb	ip, r4, fp
 800a5be:	f10c 0b01 	add.w	fp, ip, #1
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	f040 80c6 	bne.w	800a754 <_FillRect+0x1fc>
 800a5c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800a5ca:	45a0      	cmp	r8, r4
 800a5cc:	f300 80b6 	bgt.w	800a73c <_FillRect+0x1e4>
 800a5d0:	b2a8      	uxth	r0, r5
 800a5d2:	9007      	str	r0, [sp, #28]
 800a5d4:	f648 0508 	movw	r5, #34824	; 0x8808
 800a5d8:	f6c1 75fe 	movt	r5, #8190	; 0x1ffe
 800a5dc:	682c      	ldr	r4, [r5, #0]
 800a5de:	7c22      	ldrb	r2, [r4, #16]
 800a5e0:	07d1      	lsls	r1, r2, #31
 800a5e2:	f140 80b1 	bpl.w	800a748 <_FillRect+0x1f0>
 800a5e6:	9b06      	ldr	r3, [sp, #24]
 800a5e8:	6919      	ldr	r1, [r3, #16]
 800a5ea:	6888      	ldr	r0, [r1, #8]
 800a5ec:	4780      	blx	r0
 800a5ee:	f3c6 0140 	ubfx	r1, r6, #1, #1
 800a5f2:	4559      	cmp	r1, fp
 800a5f4:	bf28      	it	cs
 800a5f6:	4659      	movcs	r1, fp
 800a5f8:	f1bb 0f01 	cmp.w	fp, #1
 800a5fc:	bf98      	it	ls
 800a5fe:	4659      	movls	r1, fp
 800a600:	b283      	uxth	r3, r0
 800a602:	2900      	cmp	r1, #0
 800a604:	f000 80b7 	beq.w	800a776 <_FillRect+0x21e>
 800a608:	4632      	mov	r2, r6
 800a60a:	2401      	movs	r4, #1
 800a60c:	f832 5b02 	ldrh.w	r5, [r2], #2
 800a610:	1e4f      	subs	r7, r1, #1
 800a612:	405d      	eors	r5, r3
 800a614:	42a1      	cmp	r1, r4
 800a616:	f822 5c02 	strh.w	r5, [r2, #-2]
 800a61a:	ea07 0704 	and.w	r7, r7, r4
 800a61e:	4610      	mov	r0, r2
 800a620:	f10b 35ff 	add.w	r5, fp, #4294967295
 800a624:	d91a      	bls.n	800a65c <_FillRect+0x104>
 800a626:	b14f      	cbz	r7, 800a63c <_FillRect+0xe4>
 800a628:	f832 0b02 	ldrh.w	r0, [r2], #2
 800a62c:	2402      	movs	r4, #2
 800a62e:	4058      	eors	r0, r3
 800a630:	3d01      	subs	r5, #1
 800a632:	42a1      	cmp	r1, r4
 800a634:	f822 0c02 	strh.w	r0, [r2, #-2]
 800a638:	4610      	mov	r0, r2
 800a63a:	d90f      	bls.n	800a65c <_FillRect+0x104>
 800a63c:	8817      	ldrh	r7, [r2, #0]
 800a63e:	4610      	mov	r0, r2
 800a640:	405f      	eors	r7, r3
 800a642:	f820 7b02 	strh.w	r7, [r0], #2
 800a646:	8857      	ldrh	r7, [r2, #2]
 800a648:	3402      	adds	r4, #2
 800a64a:	1c82      	adds	r2, r0, #2
 800a64c:	3d02      	subs	r5, #2
 800a64e:	ea87 0003 	eor.w	r0, r7, r3
 800a652:	42a1      	cmp	r1, r4
 800a654:	f822 0c02 	strh.w	r0, [r2, #-2]
 800a658:	4610      	mov	r0, r2
 800a65a:	d8ef      	bhi.n	800a63c <_FillRect+0xe4>
 800a65c:	458b      	cmp	fp, r1
 800a65e:	d065      	beq.n	800a72c <_FillRect+0x1d4>
 800a660:	ebc1 020b 	rsb	r2, r1, fp
 800a664:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800a668:	9204      	str	r2, [sp, #16]
 800a66a:	ea4f 0a4e 	mov.w	sl, lr, lsl #1
 800a66e:	f1be 0f00 	cmp.w	lr, #0
 800a672:	d03a      	beq.n	800a6ea <_FillRect+0x192>
 800a674:	2700      	movs	r7, #0
 800a676:	f856 4011 	ldr.w	r4, [r6, r1, lsl #1]
 800a67a:	f363 070f 	bfi	r7, r3, #0, #16
 800a67e:	f363 471f 	bfi	r7, r3, #16, #16
 800a682:	ea87 0204 	eor.w	r2, r7, r4
 800a686:	2401      	movs	r4, #1
 800a688:	f10e 39ff 	add.w	r9, lr, #4294967295
 800a68c:	eb06 0c41 	add.w	ip, r6, r1, lsl #1
 800a690:	4574      	cmp	r4, lr
 800a692:	f846 2011 	str.w	r2, [r6, r1, lsl #1]
 800a696:	ea09 0204 	and.w	r2, r9, r4
 800a69a:	f10c 0104 	add.w	r1, ip, #4
 800a69e:	d21d      	bcs.n	800a6dc <_FillRect+0x184>
 800a6a0:	b13a      	cbz	r2, 800a6b2 <_FillRect+0x15a>
 800a6a2:	680a      	ldr	r2, [r1, #0]
 800a6a4:	2402      	movs	r4, #2
 800a6a6:	407a      	eors	r2, r7
 800a6a8:	4574      	cmp	r4, lr
 800a6aa:	468c      	mov	ip, r1
 800a6ac:	f841 2b04 	str.w	r2, [r1], #4
 800a6b0:	d214      	bcs.n	800a6dc <_FillRect+0x184>
 800a6b2:	9303      	str	r3, [sp, #12]
 800a6b4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800a6b8:	460a      	mov	r2, r1
 800a6ba:	ea87 0903 	eor.w	r9, r7, r3
 800a6be:	f842 9b04 	str.w	r9, [r2], #4
 800a6c2:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800a6c6:	3402      	adds	r4, #2
 800a6c8:	ea87 0903 	eor.w	r9, r7, r3
 800a6cc:	f8c1 9004 	str.w	r9, [r1, #4]
 800a6d0:	1d11      	adds	r1, r2, #4
 800a6d2:	4574      	cmp	r4, lr
 800a6d4:	f10c 0c08 	add.w	ip, ip, #8
 800a6d8:	d3ec      	bcc.n	800a6b4 <_FillRect+0x15c>
 800a6da:	9b03      	ldr	r3, [sp, #12]
 800a6dc:	9904      	ldr	r1, [sp, #16]
 800a6de:	4551      	cmp	r1, sl
 800a6e0:	ebca 0505 	rsb	r5, sl, r5
 800a6e4:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 800a6e8:	d020      	beq.n	800a72c <_FillRect+0x1d4>
 800a6ea:	8804      	ldrh	r4, [r0, #0]
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	405c      	eors	r4, r3
 800a6f0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a6f4:	f822 4b02 	strh.w	r4, [r2], #2
 800a6f8:	1a28      	subs	r0, r5, r0
 800a6fa:	1e81      	subs	r1, r0, #2
 800a6fc:	42aa      	cmp	r2, r5
 800a6fe:	f3c1 0440 	ubfx	r4, r1, #1, #1
 800a702:	d013      	beq.n	800a72c <_FillRect+0x1d4>
 800a704:	b12c      	cbz	r4, 800a712 <_FillRect+0x1ba>
 800a706:	8810      	ldrh	r0, [r2, #0]
 800a708:	4058      	eors	r0, r3
 800a70a:	f822 0b02 	strh.w	r0, [r2], #2
 800a70e:	42aa      	cmp	r2, r5
 800a710:	d00c      	beq.n	800a72c <_FillRect+0x1d4>
 800a712:	8814      	ldrh	r4, [r2, #0]
 800a714:	4611      	mov	r1, r2
 800a716:	405c      	eors	r4, r3
 800a718:	f821 4b02 	strh.w	r4, [r1], #2
 800a71c:	8850      	ldrh	r0, [r2, #2]
 800a71e:	460a      	mov	r2, r1
 800a720:	ea80 0403 	eor.w	r4, r0, r3
 800a724:	f822 4b02 	strh.w	r4, [r2], #2
 800a728:	42aa      	cmp	r2, r5
 800a72a:	d1f2      	bne.n	800a712 <_FillRect+0x1ba>
 800a72c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800a72e:	9d05      	ldr	r5, [sp, #20]
 800a730:	f108 0801 	add.w	r8, r8, #1
 800a734:	4544      	cmp	r4, r8
 800a736:	442e      	add	r6, r5
 800a738:	f6bf af4c 	bge.w	800a5d4 <_FillRect+0x7c>
 800a73c:	a808      	add	r0, sp, #32
 800a73e:	f7fe f9bf 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800a742:	b00b      	add	sp, #44	; 0x2c
 800a744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a748:	4630      	mov	r0, r6
 800a74a:	9907      	ldr	r1, [sp, #28]
 800a74c:	465a      	mov	r2, fp
 800a74e:	f001 f813 	bl	800b778 <GUI__memset16>
 800a752:	e7eb      	b.n	800a72c <_FillRect+0x1d4>
 800a754:	f7fe f9a2 	bl	8008a9c <GUI_ALLOC_LockH>
 800a758:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a75a:	9009      	str	r0, [sp, #36]	; 0x24
 800a75c:	ebc8 0302 	rsb	r3, r8, r2
 800a760:	1c59      	adds	r1, r3, #1
 800a762:	9100      	str	r1, [sp, #0]
 800a764:	4642      	mov	r2, r8
 800a766:	4621      	mov	r1, r4
 800a768:	465b      	mov	r3, fp
 800a76a:	f002 f9bd 	bl	800cae8 <GUI_USAGE_AddRect>
 800a76e:	4638      	mov	r0, r7
 800a770:	f7fe f9a6 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800a774:	e728      	b.n	800a5c8 <_FillRect+0x70>
 800a776:	4630      	mov	r0, r6
 800a778:	465d      	mov	r5, fp
 800a77a:	e771      	b.n	800a660 <_FillRect+0x108>

0800a77c <_DrawHLine>:
 800a77c:	b500      	push	{lr}
 800a77e:	b083      	sub	sp, #12
 800a780:	9200      	str	r2, [sp, #0]
 800a782:	f7ff fee9 	bl	800a558 <_FillRect>
 800a786:	b003      	add	sp, #12
 800a788:	bd00      	pop	{pc}
 800a78a:	bf00      	nop

0800a78c <_OnExit>:
 800a78c:	b510      	push	{r4, lr}
 800a78e:	f649 54d4 	movw	r4, #40404	; 0x9dd4
 800a792:	f6c1 74fe 	movt	r4, #8190	; 0x1ffe
 800a796:	6820      	ldr	r0, [r4, #0]
 800a798:	f7fe f8a6 	bl	80088e8 <GUI_ALLOC_FreeFixedBlock>
 800a79c:	2300      	movs	r3, #0
 800a79e:	6023      	str	r3, [r4, #0]
 800a7a0:	bd10      	pop	{r4, pc}
 800a7a2:	bf00      	nop

0800a7a4 <LCD_InitColors>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	4c0b      	ldr	r4, [pc, #44]	; (800a7d4 <LCD_InitColors+0x30>)
 800a7a8:	6825      	ldr	r5, [r4, #0]
 800a7aa:	b10d      	cbz	r5, 800a7b0 <LCD_InitColors+0xc>
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <LCD_InitColors+0x34>)
 800a7b2:	6818      	ldr	r0, [r3, #0]
 800a7b4:	0080      	lsls	r0, r0, #2
 800a7b6:	f7fe f8a1 	bl	80088fc <GUI_ALLOC_GetFixedBlock>
 800a7ba:	6020      	str	r0, [r4, #0]
 800a7bc:	b138      	cbz	r0, 800a7ce <LCD_InitColors+0x2a>
 800a7be:	4907      	ldr	r1, [pc, #28]	; (800a7dc <LCD_InitColors+0x38>)
 800a7c0:	4a07      	ldr	r2, [pc, #28]	; (800a7e0 <LCD_InitColors+0x3c>)
 800a7c2:	4608      	mov	r0, r1
 800a7c4:	600a      	str	r2, [r1, #0]
 800a7c6:	f7fc fe8b 	bl	80074e0 <GUI__RegisterExit>
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	bd38      	pop	{r3, r4, r5, pc}
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	bd38      	pop	{r3, r4, r5, pc}
 800a7d2:	bf00      	nop
 800a7d4:	1ffe9dd4 	.word	0x1ffe9dd4
 800a7d8:	1ffe8810 	.word	0x1ffe8810
 800a7dc:	1ffe8a40 	.word	0x1ffe8a40
 800a7e0:	0800a78d 	.word	0x0800a78d

0800a7e4 <LCD_GetpPalConvTableBM>:
 800a7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d03a      	beq.n	800a862 <LCD_GetpPalConvTableBM+0x7e>
 800a7ec:	f8d0 8008 	ldr.w	r8, [r0, #8]
 800a7f0:	f1b8 0f00 	cmp.w	r8, #0
 800a7f4:	d037      	beq.n	800a866 <LCD_GetpPalConvTableBM+0x82>
 800a7f6:	4f1d      	ldr	r7, [pc, #116]	; (800a86c <LCD_GetpPalConvTableBM+0x88>)
 800a7f8:	683d      	ldr	r5, [r7, #0]
 800a7fa:	b36d      	cbz	r5, 800a858 <LCD_GetpPalConvTableBM+0x74>
 800a7fc:	6803      	ldr	r3, [r0, #0]
 800a7fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a802:	dc2c      	bgt.n	800a85e <LCD_GetpPalConvTableBM+0x7a>
 800a804:	4a1a      	ldr	r2, [pc, #104]	; (800a870 <LCD_GetpPalConvTableBM+0x8c>)
 800a806:	6810      	ldr	r0, [r2, #0]
 800a808:	4298      	cmp	r0, r3
 800a80a:	bfb4      	ite	lt
 800a80c:	4681      	movlt	r9, r0
 800a80e:	4699      	movge	r9, r3
 800a810:	f1b9 0f00 	cmp.w	r9, #0
 800a814:	dd20      	ble.n	800a858 <LCD_GetpPalConvTableBM+0x74>
 800a816:	2400      	movs	r4, #0
 800a818:	f019 0f01 	tst.w	r9, #1
 800a81c:	4626      	mov	r6, r4
 800a81e:	d111      	bne.n	800a844 <LCD_GetpPalConvTableBM+0x60>
 800a820:	f8d8 0000 	ldr.w	r0, [r8]
 800a824:	f000 ff50 	bl	800b6c8 <LCD_Color2Index>
 800a828:	2601      	movs	r6, #1
 800a82a:	6028      	str	r0, [r5, #0]
 800a82c:	2404      	movs	r4, #4
 800a82e:	683d      	ldr	r5, [r7, #0]
 800a830:	e008      	b.n	800a844 <LCD_GetpPalConvTableBM+0x60>
 800a832:	f858 0004 	ldr.w	r0, [r8, r4]
 800a836:	683d      	ldr	r5, [r7, #0]
 800a838:	f000 ff46 	bl	800b6c8 <LCD_Color2Index>
 800a83c:	5128      	str	r0, [r5, r4]
 800a83e:	683d      	ldr	r5, [r7, #0]
 800a840:	3601      	adds	r6, #1
 800a842:	3404      	adds	r4, #4
 800a844:	f858 0004 	ldr.w	r0, [r8, r4]
 800a848:	f000 ff3e 	bl	800b6c8 <LCD_Color2Index>
 800a84c:	3601      	adds	r6, #1
 800a84e:	5128      	str	r0, [r5, r4]
 800a850:	3404      	adds	r4, #4
 800a852:	454e      	cmp	r6, r9
 800a854:	d1ed      	bne.n	800a832 <LCD_GetpPalConvTableBM+0x4e>
 800a856:	683d      	ldr	r5, [r7, #0]
 800a858:	4628      	mov	r0, r5
 800a85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a85e:	2500      	movs	r5, #0
 800a860:	e7fa      	b.n	800a858 <LCD_GetpPalConvTableBM+0x74>
 800a862:	4605      	mov	r5, r0
 800a864:	e7f8      	b.n	800a858 <LCD_GetpPalConvTableBM+0x74>
 800a866:	4645      	mov	r5, r8
 800a868:	e7f6      	b.n	800a858 <LCD_GetpPalConvTableBM+0x74>
 800a86a:	bf00      	nop
 800a86c:	1ffe9dd4 	.word	0x1ffe9dd4
 800a870:	1ffe8810 	.word	0x1ffe8810

0800a874 <LCD_InitLUT>:
 800a874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a878:	b083      	sub	sp, #12
 800a87a:	f002 f9a5 	bl	800cbc8 <LCD_GetNumLayers>
 800a87e:	1e07      	subs	r7, r0, #0
 800a880:	dd5c      	ble.n	800a93c <LCD_InitLUT+0xc8>
 800a882:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 800a944 <LCD_InitLUT+0xd0>
 800a886:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 800a948 <LCD_InitLUT+0xd4>
 800a88a:	2400      	movs	r4, #0
 800a88c:	4620      	mov	r0, r4
 800a88e:	f7fc fcef 	bl	8007270 <GUI_DEVICE__GetpDriver>
 800a892:	2800      	cmp	r0, #0
 800a894:	d04f      	beq.n	800a936 <LCD_InitLUT+0xc2>
 800a896:	f8d9 3000 	ldr.w	r3, [r9]
 800a89a:	4620      	mov	r0, r4
 800a89c:	f893 a011 	ldrb.w	sl, [r3, #17]
 800a8a0:	745c      	strb	r4, [r3, #17]
 800a8a2:	f002 f999 	bl	800cbd8 <LCD_GetBitsPerPixelEx>
 800a8a6:	2808      	cmp	r0, #8
 800a8a8:	dc41      	bgt.n	800a92e <LCD_InitLUT+0xba>
 800a8aa:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 800a8ae:	f240 72a0 	movw	r2, #1952	; 0x7a0
 800a8b2:	6901      	ldr	r1, [r0, #16]
 800a8b4:	f6c0 0201 	movt	r2, #2049	; 0x801
 800a8b8:	4291      	cmp	r1, r2
 800a8ba:	d038      	beq.n	800a92e <LCD_InitLUT+0xba>
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f002 f999 	bl	800cbf4 <LCD_GetNumColorsEx>
 800a8c2:	f1b0 0800 	subs.w	r8, r0, #0
 800a8c6:	dd32      	ble.n	800a92e <LCD_InitLUT+0xba>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	9301      	str	r3, [sp, #4]
 800a8ce:	f000 ff0d 	bl	800b6ec <LCD_Index2Color>
 800a8d2:	2501      	movs	r5, #1
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	9901      	ldr	r1, [sp, #4]
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f108 36ff 	add.w	r6, r8, #4294967295
 800a8de:	f7fc fb13 	bl	8006f08 <LCD_SetLUTEntryEx>
 800a8e2:	45a8      	cmp	r8, r5
 800a8e4:	f006 0601 	and.w	r6, r6, #1
 800a8e8:	d021      	beq.n	800a92e <LCD_InitLUT+0xba>
 800a8ea:	b156      	cbz	r6, 800a902 <LCD_InitLUT+0x8e>
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	f000 fefd 	bl	800b6ec <LCD_Index2Color>
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	2502      	movs	r5, #2
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f7fc fb05 	bl	8006f08 <LCD_SetLUTEntryEx>
 800a8fe:	45a8      	cmp	r8, r5
 800a900:	d015      	beq.n	800a92e <LCD_InitLUT+0xba>
 800a902:	b2ee      	uxtb	r6, r5
 800a904:	4630      	mov	r0, r6
 800a906:	f000 fef1 	bl	800b6ec <LCD_Index2Color>
 800a90a:	3501      	adds	r5, #1
 800a90c:	4602      	mov	r2, r0
 800a90e:	4631      	mov	r1, r6
 800a910:	4620      	mov	r0, r4
 800a912:	b2ee      	uxtb	r6, r5
 800a914:	f7fc faf8 	bl	8006f08 <LCD_SetLUTEntryEx>
 800a918:	4630      	mov	r0, r6
 800a91a:	f000 fee7 	bl	800b6ec <LCD_Index2Color>
 800a91e:	3501      	adds	r5, #1
 800a920:	4602      	mov	r2, r0
 800a922:	4631      	mov	r1, r6
 800a924:	4620      	mov	r0, r4
 800a926:	f7fc faef 	bl	8006f08 <LCD_SetLUTEntryEx>
 800a92a:	45a8      	cmp	r8, r5
 800a92c:	d1e9      	bne.n	800a902 <LCD_InitLUT+0x8e>
 800a92e:	f8d9 0000 	ldr.w	r0, [r9]
 800a932:	f880 a011 	strb.w	sl, [r0, #17]
 800a936:	3401      	adds	r4, #1
 800a938:	42bc      	cmp	r4, r7
 800a93a:	d1a7      	bne.n	800a88c <LCD_InitLUT+0x18>
 800a93c:	b003      	add	sp, #12
 800a93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a942:	bf00      	nop
 800a944:	1ffe8808 	.word	0x1ffe8808
 800a948:	1ffe9d08 	.word	0x1ffe9d08

0800a94c <_SetBkColor>:
 800a94c:	b510      	push	{r4, lr}
 800a94e:	4c0c      	ldr	r4, [pc, #48]	; (800a980 <_SetBkColor+0x34>)
 800a950:	6823      	ldr	r3, [r4, #0]
 800a952:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a954:	4281      	cmp	r1, r0
 800a956:	d00f      	beq.n	800a978 <_SetBkColor+0x2c>
 800a958:	7c59      	ldrb	r1, [r3, #17]
 800a95a:	6358      	str	r0, [r3, #52]	; 0x34
 800a95c:	4b09      	ldr	r3, [pc, #36]	; (800a984 <_SetBkColor+0x38>)
 800a95e:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800a962:	6911      	ldr	r1, [r2, #16]
 800a964:	680b      	ldr	r3, [r1, #0]
 800a966:	4798      	blx	r3
 800a968:	6821      	ldr	r1, [r4, #0]
 800a96a:	7c0a      	ldrb	r2, [r1, #16]
 800a96c:	f002 0304 	and.w	r3, r2, #4
 800a970:	b2da      	uxtb	r2, r3
 800a972:	b912      	cbnz	r2, 800a97a <_SetBkColor+0x2e>
 800a974:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800a976:	6008      	str	r0, [r1, #0]
 800a978:	bd10      	pop	{r4, pc}
 800a97a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a97c:	6018      	str	r0, [r3, #0]
 800a97e:	bd10      	pop	{r4, pc}
 800a980:	1ffe8808 	.word	0x1ffe8808
 800a984:	1ffe9d08 	.word	0x1ffe9d08

0800a988 <_SetColor>:
 800a988:	b510      	push	{r4, lr}
 800a98a:	4c0c      	ldr	r4, [pc, #48]	; (800a9bc <_SetColor+0x34>)
 800a98c:	6823      	ldr	r3, [r4, #0]
 800a98e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a990:	4281      	cmp	r1, r0
 800a992:	d00f      	beq.n	800a9b4 <_SetColor+0x2c>
 800a994:	7c59      	ldrb	r1, [r3, #17]
 800a996:	6318      	str	r0, [r3, #48]	; 0x30
 800a998:	4b09      	ldr	r3, [pc, #36]	; (800a9c0 <_SetColor+0x38>)
 800a99a:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800a99e:	6911      	ldr	r1, [r2, #16]
 800a9a0:	680b      	ldr	r3, [r1, #0]
 800a9a2:	4798      	blx	r3
 800a9a4:	6821      	ldr	r1, [r4, #0]
 800a9a6:	7c0a      	ldrb	r2, [r1, #16]
 800a9a8:	f002 0304 	and.w	r3, r2, #4
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	b912      	cbnz	r2, 800a9b6 <_SetColor+0x2e>
 800a9b0:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800a9b2:	6008      	str	r0, [r1, #0]
 800a9b4:	bd10      	pop	{r4, pc}
 800a9b6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800a9b8:	6018      	str	r0, [r3, #0]
 800a9ba:	bd10      	pop	{r4, pc}
 800a9bc:	1ffe8808 	.word	0x1ffe8808
 800a9c0:	1ffe9d08 	.word	0x1ffe9d08

0800a9c4 <_SetDrawMode>:
 800a9c4:	b470      	push	{r4, r5, r6}
 800a9c6:	4b08      	ldr	r3, [pc, #32]	; (800a9e8 <_SetDrawMode+0x24>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	7c1a      	ldrb	r2, [r3, #16]
 800a9cc:	ea80 0102 	eor.w	r1, r0, r2
 800a9d0:	0749      	lsls	r1, r1, #29
 800a9d2:	d505      	bpl.n	800a9e0 <_SetDrawMode+0x1c>
 800a9d4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800a9d6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a9d8:	6826      	ldr	r6, [r4, #0]
 800a9da:	680d      	ldr	r5, [r1, #0]
 800a9dc:	6025      	str	r5, [r4, #0]
 800a9de:	600e      	str	r6, [r1, #0]
 800a9e0:	7418      	strb	r0, [r3, #16]
 800a9e2:	4610      	mov	r0, r2
 800a9e4:	bc70      	pop	{r4, r5, r6}
 800a9e6:	4770      	bx	lr
 800a9e8:	1ffe8808 	.word	0x1ffe8808

0800a9ec <LCD_SetDrawMode>:
 800a9ec:	b508      	push	{r3, lr}
 800a9ee:	f648 0314 	movw	r3, #34836	; 0x8814
 800a9f2:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800a9f6:	6819      	ldr	r1, [r3, #0]
 800a9f8:	688a      	ldr	r2, [r1, #8]
 800a9fa:	4790      	blx	r2
 800a9fc:	bd08      	pop	{r3, pc}
 800a9fe:	bf00      	nop

0800aa00 <LCD_DrawPixel>:
 800aa00:	4b14      	ldr	r3, [pc, #80]	; (800aa54 <LCD_DrawPixel+0x54>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	b510      	push	{r4, lr}
 800aa06:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 800aa0a:	460a      	mov	r2, r1
 800aa0c:	4294      	cmp	r4, r2
 800aa0e:	4601      	mov	r1, r0
 800aa10:	dc17      	bgt.n	800aa42 <LCD_DrawPixel+0x42>
 800aa12:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800aa16:	4282      	cmp	r2, r0
 800aa18:	dc13      	bgt.n	800aa42 <LCD_DrawPixel+0x42>
 800aa1a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800aa1e:	4288      	cmp	r0, r1
 800aa20:	dc0f      	bgt.n	800aa42 <LCD_DrawPixel+0x42>
 800aa22:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800aa26:	4281      	cmp	r1, r0
 800aa28:	dc0b      	bgt.n	800aa42 <LCD_DrawPixel+0x42>
 800aa2a:	7c18      	ldrb	r0, [r3, #16]
 800aa2c:	07c0      	lsls	r0, r0, #31
 800aa2e:	d409      	bmi.n	800aa44 <LCD_DrawPixel+0x44>
 800aa30:	7c5c      	ldrb	r4, [r3, #17]
 800aa32:	4809      	ldr	r0, [pc, #36]	; (800aa58 <LCD_DrawPixel+0x58>)
 800aa34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa36:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68c4      	ldr	r4, [r0, #12]
 800aa3e:	69a4      	ldr	r4, [r4, #24]
 800aa40:	47a0      	blx	r4
 800aa42:	bd10      	pop	{r4, pc}
 800aa44:	7c58      	ldrb	r0, [r3, #17]
 800aa46:	4b04      	ldr	r3, [pc, #16]	; (800aa58 <LCD_DrawPixel+0x58>)
 800aa48:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800aa4c:	68c3      	ldr	r3, [r0, #12]
 800aa4e:	69db      	ldr	r3, [r3, #28]
 800aa50:	4798      	blx	r3
 800aa52:	bd10      	pop	{r4, pc}
 800aa54:	1ffe8808 	.word	0x1ffe8808
 800aa58:	1ffe9d08 	.word	0x1ffe9d08

0800aa5c <LCD_DrawHLine>:
 800aa5c:	4b10      	ldr	r3, [pc, #64]	; (800aaa0 <LCD_DrawHLine+0x44>)
 800aa5e:	b570      	push	{r4, r5, r6, lr}
 800aa60:	681c      	ldr	r4, [r3, #0]
 800aa62:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
 800aa66:	428e      	cmp	r6, r1
 800aa68:	460d      	mov	r5, r1
 800aa6a:	dc0f      	bgt.n	800aa8c <LCD_DrawHLine+0x30>
 800aa6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa70:	428d      	cmp	r5, r1
 800aa72:	dc0b      	bgt.n	800aa8c <LCD_DrawHLine+0x30>
 800aa74:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800aa78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa7c:	4288      	cmp	r0, r1
 800aa7e:	bfa8      	it	ge
 800aa80:	4601      	movge	r1, r0
 800aa82:	429a      	cmp	r2, r3
 800aa84:	bfb8      	it	lt
 800aa86:	4613      	movlt	r3, r2
 800aa88:	4299      	cmp	r1, r3
 800aa8a:	dd00      	ble.n	800aa8e <LCD_DrawHLine+0x32>
 800aa8c:	bd70      	pop	{r4, r5, r6, pc}
 800aa8e:	7c60      	ldrb	r0, [r4, #17]
 800aa90:	4a04      	ldr	r2, [pc, #16]	; (800aaa4 <LCD_DrawHLine+0x48>)
 800aa92:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800aa96:	68c4      	ldr	r4, [r0, #12]
 800aa98:	462a      	mov	r2, r5
 800aa9a:	68a4      	ldr	r4, [r4, #8]
 800aa9c:	47a0      	blx	r4
 800aa9e:	bd70      	pop	{r4, r5, r6, pc}
 800aaa0:	1ffe8808 	.word	0x1ffe8808
 800aaa4:	1ffe9d08 	.word	0x1ffe9d08

0800aaa8 <LCD_FillRect>:
 800aaa8:	b570      	push	{r4, r5, r6, lr}
 800aaaa:	4c14      	ldr	r4, [pc, #80]	; (800aafc <LCD_FillRect+0x54>)
 800aaac:	6824      	ldr	r4, [r4, #0]
 800aaae:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 800aab2:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aab6:	42b0      	cmp	r0, r6
 800aab8:	bfa8      	it	ge
 800aaba:	4606      	movge	r6, r0
 800aabc:	42aa      	cmp	r2, r5
 800aabe:	bfb8      	it	lt
 800aac0:	4615      	movlt	r5, r2
 800aac2:	42b5      	cmp	r5, r6
 800aac4:	b082      	sub	sp, #8
 800aac6:	db0b      	blt.n	800aae0 <LCD_FillRect+0x38>
 800aac8:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800aacc:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800aad0:	4291      	cmp	r1, r2
 800aad2:	bfa8      	it	ge
 800aad4:	460a      	movge	r2, r1
 800aad6:	4283      	cmp	r3, r0
 800aad8:	bfa8      	it	ge
 800aada:	4603      	movge	r3, r0
 800aadc:	429a      	cmp	r2, r3
 800aade:	dd01      	ble.n	800aae4 <LCD_FillRect+0x3c>
 800aae0:	b002      	add	sp, #8
 800aae2:	bd70      	pop	{r4, r5, r6, pc}
 800aae4:	7c64      	ldrb	r4, [r4, #17]
 800aae6:	4906      	ldr	r1, [pc, #24]	; (800ab00 <LCD_FillRect+0x58>)
 800aae8:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800aaec:	68c4      	ldr	r4, [r0, #12]
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	6924      	ldr	r4, [r4, #16]
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	462b      	mov	r3, r5
 800aaf6:	47a0      	blx	r4
 800aaf8:	e7f2      	b.n	800aae0 <LCD_FillRect+0x38>
 800aafa:	bf00      	nop
 800aafc:	1ffe8808 	.word	0x1ffe8808
 800ab00:	1ffe9d08 	.word	0x1ffe9d08

0800ab04 <LCD__DrawBitmap_1bpp>:
 800ab04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab08:	4c0d      	ldr	r4, [pc, #52]	; (800ab40 <LCD__DrawBitmap_1bpp+0x3c>)
 800ab0a:	b091      	sub	sp, #68	; 0x44
 800ab0c:	6825      	ldr	r5, [r4, #0]
 800ab0e:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 800ab12:	920d      	str	r2, [sp, #52]	; 0x34
 800ab14:	4604      	mov	r4, r0
 800ab16:	460e      	mov	r6, r1
 800ab18:	930e      	str	r3, [sp, #56]	; 0x38
 800ab1a:	b19d      	cbz	r5, 800ab44 <LCD__DrawBitmap_1bpp+0x40>
 800ab1c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800ab1e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ab20:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800ab22:	9702      	str	r7, [sp, #8]
 800ab24:	9604      	str	r6, [sp, #16]
 800ab26:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800ab28:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800ab2a:	f8cd b000 	str.w	fp, [sp]
 800ab2e:	9401      	str	r4, [sp, #4]
 800ab30:	9703      	str	r7, [sp, #12]
 800ab32:	9605      	str	r6, [sp, #20]
 800ab34:	682c      	ldr	r4, [r5, #0]
 800ab36:	47a0      	blx	r4
 800ab38:	b011      	add	sp, #68	; 0x44
 800ab3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3e:	bf00      	nop
 800ab40:	1ffe9ce0 	.word	0x1ffe9ce0
 800ab44:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800ab46:	ea47 030b 	orr.w	r3, r7, fp
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	f000 81e9 	beq.w	800af22 <LCD__DrawBitmap_1bpp+0x41e>
 800ab50:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800ab52:	f1c7 0a08 	rsb	sl, r7, #8
 800ab56:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ab58:	2f00      	cmp	r7, #0
 800ab5a:	dded      	ble.n	800ab38 <LCD__DrawBitmap_1bpp+0x34>
 800ab5c:	f648 0c08 	movw	ip, #34824	; 0x8808
 800ab60:	f6c1 7cfe 	movt	ip, #8190	; 0x1ffe
 800ab64:	4458      	add	r0, fp
 800ab66:	f8dc 9000 	ldr.w	r9, [ip]
 800ab6a:	900f      	str	r0, [sp, #60]	; 0x3c
 800ab6c:	9108      	str	r1, [sp, #32]
 800ab6e:	950a      	str	r5, [sp, #40]	; 0x28
 800ab70:	4648      	mov	r0, r9
 800ab72:	9d08      	ldr	r5, [sp, #32]
 800ab74:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ab76:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 800ab7a:	186a      	adds	r2, r5, r1
 800ab7c:	1e56      	subs	r6, r2, #1
 800ab7e:	42b4      	cmp	r4, r6
 800ab80:	920b      	str	r2, [sp, #44]	; 0x2c
 800ab82:	9609      	str	r6, [sp, #36]	; 0x24
 800ab84:	f300 8122 	bgt.w	800adcc <LCD__DrawBitmap_1bpp+0x2c8>
 800ab88:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800ab8c:	42ab      	cmp	r3, r5
 800ab8e:	f2c0 811d 	blt.w	800adcc <LCD__DrawBitmap_1bpp+0x2c8>
 800ab92:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ab94:	2f00      	cmp	r7, #0
 800ab96:	f340 8119 	ble.w	800adcc <LCD__DrawBitmap_1bpp+0x2c8>
 800ab9a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800ab9c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ab9e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800aba2:	4629      	mov	r1, r5
 800aba4:	f107 38ff 	add.w	r8, r7, #4294967295
 800aba8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abac:	fa44 f60a 	asr.w	r6, r4, sl
 800abb0:	f016 0fff 	tst.w	r6, #255	; 0xff
 800abb4:	fa04 f402 	lsl.w	r4, r4, r2
 800abb8:	f008 0901 	and.w	r9, r8, #1
 800abbc:	910c      	str	r1, [sp, #48]	; 0x30
 800abbe:	ebcb 020c 	rsb	r2, fp, ip
 800abc2:	46d0      	mov	r8, sl
 800abc4:	b2e4      	uxtb	r4, r4
 800abc6:	f040 8110 	bne.w	800adea <LCD__DrawBitmap_1bpp+0x2e6>
 800abca:	7c03      	ldrb	r3, [r0, #16]
 800abcc:	f003 0702 	and.w	r7, r3, #2
 800abd0:	b2fd      	uxtb	r5, r7
 800abd2:	2d00      	cmp	r5, #0
 800abd4:	f000 8109 	beq.w	800adea <LCD__DrawBitmap_1bpp+0x2e6>
 800abd8:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800abdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abde:	2601      	movs	r6, #1
 800abe0:	4566      	cmp	r6, ip
 800abe2:	eb03 050b 	add.w	r5, r3, fp
 800abe6:	f000 80f1 	beq.w	800adcc <LCD__DrawBitmap_1bpp+0x2c8>
 800abea:	f1b9 0f00 	cmp.w	r9, #0
 800abee:	d021      	beq.n	800ac34 <LCD__DrawBitmap_1bpp+0x130>
 800abf0:	ebcb 0c05 	rsb	ip, fp, r5
 800abf4:	f1b8 0f00 	cmp.w	r8, #0
 800abf8:	f040 8167 	bne.w	800aeca <LCD__DrawBitmap_1bpp+0x3c6>
 800abfc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800abfe:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800ac00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac04:	46d0      	mov	r8, sl
 800ac06:	910c      	str	r1, [sp, #48]	; 0x30
 800ac08:	fa44 f20a 	asr.w	r2, r4, sl
 800ac0c:	f012 0fff 	tst.w	r2, #255	; 0xff
 800ac10:	fa04 f407 	lsl.w	r4, r4, r7
 800ac14:	b2e4      	uxtb	r4, r4
 800ac16:	f040 8114 	bne.w	800ae42 <LCD__DrawBitmap_1bpp+0x33e>
 800ac1a:	7c03      	ldrb	r3, [r0, #16]
 800ac1c:	f003 0702 	and.w	r7, r3, #2
 800ac20:	b2f9      	uxtb	r1, r7
 800ac22:	2900      	cmp	r1, #0
 800ac24:	f000 810d 	beq.w	800ae42 <LCD__DrawBitmap_1bpp+0x33e>
 800ac28:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ac2a:	3601      	adds	r6, #1
 800ac2c:	428e      	cmp	r6, r1
 800ac2e:	445d      	add	r5, fp
 800ac30:	f000 80cc 	beq.w	800adcc <LCD__DrawBitmap_1bpp+0x2c8>
 800ac34:	ebcb 0205 	rsb	r2, fp, r5
 800ac38:	f1b8 0f00 	cmp.w	r8, #0
 800ac3c:	f000 8139 	beq.w	800aeb2 <LCD__DrawBitmap_1bpp+0x3ae>
 800ac40:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800ac42:	ebc7 0808 	rsb	r8, r7, r8
 800ac46:	463b      	mov	r3, r7
 800ac48:	fa44 f90a 	asr.w	r9, r4, sl
 800ac4c:	fa04 f103 	lsl.w	r1, r4, r3
 800ac50:	f019 0fff 	tst.w	r9, #255	; 0xff
 800ac54:	b2cf      	uxtb	r7, r1
 800ac56:	d105      	bne.n	800ac64 <LCD__DrawBitmap_1bpp+0x160>
 800ac58:	7c04      	ldrb	r4, [r0, #16]
 800ac5a:	f004 0302 	and.w	r3, r4, #2
 800ac5e:	b2d9      	uxtb	r1, r3
 800ac60:	2900      	cmp	r1, #0
 800ac62:	d143      	bne.n	800acec <LCD__DrawBitmap_1bpp+0x1e8>
 800ac64:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 800ac68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ac6a:	f8dc 4000 	ldr.w	r4, [ip]
 800ac6e:	fa5f f989 	uxtb.w	r9, r9
 800ac72:	b10b      	cbz	r3, 800ac78 <LCD__DrawBitmap_1bpp+0x174>
 800ac74:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 800ac78:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800ac7c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800ac80:	f8cc 9000 	str.w	r9, [ip]
 800ac84:	f105 39ff 	add.w	r9, r5, #4294967295
 800ac88:	428a      	cmp	r2, r1
 800ac8a:	bfa8      	it	ge
 800ac8c:	4611      	movge	r1, r2
 800ac8e:	4599      	cmp	r9, r3
 800ac90:	bfb8      	it	lt
 800ac92:	464b      	movlt	r3, r9
 800ac94:	4299      	cmp	r1, r3
 800ac96:	dc27      	bgt.n	800ace8 <LCD__DrawBitmap_1bpp+0x1e4>
 800ac98:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 800ac9c:	f9b0 900a 	ldrsh.w	r9, [r0, #10]
 800aca0:	9206      	str	r2, [sp, #24]
 800aca2:	9a08      	ldr	r2, [sp, #32]
 800aca4:	454a      	cmp	r2, r9
 800aca6:	bfb8      	it	lt
 800aca8:	464a      	movlt	r2, r9
 800acaa:	9207      	str	r2, [sp, #28]
 800acac:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800acb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acb2:	4591      	cmp	r9, r2
 800acb4:	bfa8      	it	ge
 800acb6:	4691      	movge	r9, r2
 800acb8:	9a07      	ldr	r2, [sp, #28]
 800acba:	454a      	cmp	r2, r9
 800acbc:	dc14      	bgt.n	800ace8 <LCD__DrawBitmap_1bpp+0x1e4>
 800acbe:	f649 5c08 	movw	ip, #40200	; 0x9d08
 800acc2:	7c40      	ldrb	r0, [r0, #17]
 800acc4:	f6c1 7cfe 	movt	ip, #8190	; 0x1ffe
 800acc8:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 800accc:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800acd0:	f8cd 9000 	str.w	r9, [sp]
 800acd4:	f8de 9010 	ldr.w	r9, [lr, #16]
 800acd8:	47c8      	blx	r9
 800acda:	f648 0108 	movw	r1, #34824	; 0x8808
 800acde:	f6c1 71fe 	movt	r1, #8190	; 0x1ffe
 800ace2:	6808      	ldr	r0, [r1, #0]
 800ace4:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 800ace8:	f8cc 4000 	str.w	r4, [ip]
 800acec:	445d      	add	r5, fp
 800acee:	3601      	adds	r6, #1
 800acf0:	ebcb 0205 	rsb	r2, fp, r5
 800acf4:	f1b8 0f00 	cmp.w	r8, #0
 800acf8:	f040 80d6 	bne.w	800aea8 <LCD__DrawBitmap_1bpp+0x3a4>
 800acfc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800ad00:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ad02:	f818 7b01 	ldrb.w	r7, [r8], #1
 800ad06:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800ad0a:	46d0      	mov	r8, sl
 800ad0c:	fa47 f90a 	asr.w	r9, r7, sl
 800ad10:	fa07 f103 	lsl.w	r1, r7, r3
 800ad14:	f019 0fff 	tst.w	r9, #255	; 0xff
 800ad18:	b2cc      	uxtb	r4, r1
 800ad1a:	d106      	bne.n	800ad2a <LCD__DrawBitmap_1bpp+0x226>
 800ad1c:	7c07      	ldrb	r7, [r0, #16]
 800ad1e:	f007 0302 	and.w	r3, r7, #2
 800ad22:	b2d9      	uxtb	r1, r3
 800ad24:	2900      	cmp	r1, #0
 800ad26:	f47f af7f 	bne.w	800ac28 <LCD__DrawBitmap_1bpp+0x124>
 800ad2a:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 800ad2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ad30:	f8dc 7000 	ldr.w	r7, [ip]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f000 80c5 	beq.w	800aec4 <LCD__DrawBitmap_1bpp+0x3c0>
 800ad3a:	fa5f f989 	uxtb.w	r9, r9
 800ad3e:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 800ad42:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800ad46:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800ad4a:	f8cc 9000 	str.w	r9, [ip]
 800ad4e:	f105 39ff 	add.w	r9, r5, #4294967295
 800ad52:	428a      	cmp	r2, r1
 800ad54:	bfa8      	it	ge
 800ad56:	4611      	movge	r1, r2
 800ad58:	4599      	cmp	r9, r3
 800ad5a:	bfb8      	it	lt
 800ad5c:	464b      	movlt	r3, r9
 800ad5e:	4299      	cmp	r1, r3
 800ad60:	dc2c      	bgt.n	800adbc <LCD__DrawBitmap_1bpp+0x2b8>
 800ad62:	f9b0 900e 	ldrsh.w	r9, [r0, #14]
 800ad66:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800ad6a:	f8cd 901c 	str.w	r9, [sp, #28]
 800ad6e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad72:	4591      	cmp	r9, r2
 800ad74:	bfb8      	it	lt
 800ad76:	4691      	movlt	r9, r2
 800ad78:	f8cd 9018 	str.w	r9, [sp, #24]
 800ad7c:	9a07      	ldr	r2, [sp, #28]
 800ad7e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ad82:	454a      	cmp	r2, r9
 800ad84:	bfa8      	it	ge
 800ad86:	464a      	movge	r2, r9
 800ad88:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800ad8c:	9207      	str	r2, [sp, #28]
 800ad8e:	4591      	cmp	r9, r2
 800ad90:	dc14      	bgt.n	800adbc <LCD__DrawBitmap_1bpp+0x2b8>
 800ad92:	f649 5e08 	movw	lr, #40200	; 0x9d08
 800ad96:	7c40      	ldrb	r0, [r0, #17]
 800ad98:	f6c1 7efe 	movt	lr, #8190	; 0x1ffe
 800ad9c:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 800ada0:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800ada4:	9200      	str	r2, [sp, #0]
 800ada6:	f8dc c010 	ldr.w	ip, [ip, #16]
 800adaa:	464a      	mov	r2, r9
 800adac:	47e0      	blx	ip
 800adae:	f648 0108 	movw	r1, #34824	; 0x8808
 800adb2:	f6c1 71fe 	movt	r1, #8190	; 0x1ffe
 800adb6:	6808      	ldr	r0, [r1, #0]
 800adb8:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 800adbc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800adbe:	f8cc 7000 	str.w	r7, [ip]
 800adc2:	3601      	adds	r6, #1
 800adc4:	428e      	cmp	r6, r1
 800adc6:	445d      	add	r5, fp
 800adc8:	f47f af34 	bne.w	800ac34 <LCD__DrawBitmap_1bpp+0x130>
 800adcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800adce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800add0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800add2:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800add6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800add8:	3401      	adds	r4, #1
 800adda:	1995      	adds	r5, r2, r6
 800addc:	454c      	cmp	r4, r9
 800adde:	940a      	str	r4, [sp, #40]	; 0x28
 800ade0:	951e      	str	r5, [sp, #120]	; 0x78
 800ade2:	9708      	str	r7, [sp, #32]
 800ade4:	f47f aec5 	bne.w	800ab72 <LCD__DrawBitmap_1bpp+0x6e>
 800ade8:	e6a6      	b.n	800ab38 <LCD__DrawBitmap_1bpp+0x34>
 800adea:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800adec:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800adee:	682f      	ldr	r7, [r5, #0]
 800adf0:	2900      	cmp	r1, #0
 800adf2:	f000 80e4 	beq.w	800afbe <LCD__DrawBitmap_1bpp+0x4ba>
 800adf6:	b2f6      	uxtb	r6, r6
 800adf8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800adfc:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800ae00:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800ae04:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800ae08:	602e      	str	r6, [r5, #0]
 800ae0a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800ae0e:	428a      	cmp	r2, r1
 800ae10:	bfa8      	it	ge
 800ae12:	4611      	movge	r1, r2
 800ae14:	429e      	cmp	r6, r3
 800ae16:	bfb8      	it	lt
 800ae18:	4633      	movlt	r3, r6
 800ae1a:	4299      	cmp	r1, r3
 800ae1c:	dc0f      	bgt.n	800ae3e <LCD__DrawBitmap_1bpp+0x33a>
 800ae1e:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ae22:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800ae26:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800ae2a:	4594      	cmp	ip, r2
 800ae2c:	bfa8      	it	ge
 800ae2e:	4662      	movge	r2, ip
 800ae30:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800ae34:	4566      	cmp	r6, ip
 800ae36:	bfa8      	it	ge
 800ae38:	4666      	movge	r6, ip
 800ae3a:	42b2      	cmp	r2, r6
 800ae3c:	dd49      	ble.n	800aed2 <LCD__DrawBitmap_1bpp+0x3ce>
 800ae3e:	602f      	str	r7, [r5, #0]
 800ae40:	e6ca      	b.n	800abd8 <LCD__DrawBitmap_1bpp+0xd4>
 800ae42:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800ae44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ae46:	f8d7 9000 	ldr.w	r9, [r7]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f000 80b9 	beq.w	800afc2 <LCD__DrawBitmap_1bpp+0x4be>
 800ae50:	b2d2      	uxtb	r2, r2
 800ae52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae56:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800ae5a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800ae5e:	603a      	str	r2, [r7, #0]
 800ae60:	1e6a      	subs	r2, r5, #1
 800ae62:	458c      	cmp	ip, r1
 800ae64:	bfa8      	it	ge
 800ae66:	4661      	movge	r1, ip
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	bfb8      	it	lt
 800ae6c:	4613      	movlt	r3, r2
 800ae6e:	4299      	cmp	r1, r3
 800ae70:	dc17      	bgt.n	800aea2 <LCD__DrawBitmap_1bpp+0x39e>
 800ae72:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 800ae76:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800ae7a:	f8cd c01c 	str.w	ip, [sp, #28]
 800ae7e:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ae82:	4594      	cmp	ip, r2
 800ae84:	bfb8      	it	lt
 800ae86:	4694      	movlt	ip, r2
 800ae88:	f8cd c018 	str.w	ip, [sp, #24]
 800ae8c:	9a07      	ldr	r2, [sp, #28]
 800ae8e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800ae92:	4562      	cmp	r2, ip
 800ae94:	bfa8      	it	ge
 800ae96:	4662      	movge	r2, ip
 800ae98:	f8dd c018 	ldr.w	ip, [sp, #24]
 800ae9c:	9207      	str	r2, [sp, #28]
 800ae9e:	4594      	cmp	ip, r2
 800aea0:	dd2a      	ble.n	800aef8 <LCD__DrawBitmap_1bpp+0x3f4>
 800aea2:	f8c7 9000 	str.w	r9, [r7]
 800aea6:	e6bf      	b.n	800ac28 <LCD__DrawBitmap_1bpp+0x124>
 800aea8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800aeaa:	ebc4 0808 	rsb	r8, r4, r8
 800aeae:	4623      	mov	r3, r4
 800aeb0:	e72c      	b.n	800ad0c <LCD__DrawBitmap_1bpp+0x208>
 800aeb2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800aeb6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800aeb8:	f818 4b01 	ldrb.w	r4, [r8], #1
 800aebc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800aec0:	46d0      	mov	r8, sl
 800aec2:	e6c1      	b.n	800ac48 <LCD__DrawBitmap_1bpp+0x144>
 800aec4:	fa5f f989 	uxtb.w	r9, r9
 800aec8:	e73b      	b.n	800ad42 <LCD__DrawBitmap_1bpp+0x23e>
 800aeca:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800aecc:	ebc7 0808 	rsb	r8, r7, r8
 800aed0:	e69a      	b.n	800ac08 <LCD__DrawBitmap_1bpp+0x104>
 800aed2:	f649 5e08 	movw	lr, #40200	; 0x9d08
 800aed6:	7c40      	ldrb	r0, [r0, #17]
 800aed8:	f6c1 7efe 	movt	lr, #8190	; 0x1ffe
 800aedc:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 800aee0:	68c5      	ldr	r5, [r0, #12]
 800aee2:	9600      	str	r6, [sp, #0]
 800aee4:	692e      	ldr	r6, [r5, #16]
 800aee6:	47b0      	blx	r6
 800aee8:	f648 0208 	movw	r2, #34824	; 0x8808
 800aeec:	f6c1 72fe 	movt	r2, #8190	; 0x1ffe
 800aef0:	6810      	ldr	r0, [r2, #0]
 800aef2:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800aef4:	602f      	str	r7, [r5, #0]
 800aef6:	e66f      	b.n	800abd8 <LCD__DrawBitmap_1bpp+0xd4>
 800aef8:	f649 5e08 	movw	lr, #40200	; 0x9d08
 800aefc:	7c40      	ldrb	r0, [r0, #17]
 800aefe:	f6c1 7efe 	movt	lr, #8190	; 0x1ffe
 800af02:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 800af06:	68c7      	ldr	r7, [r0, #12]
 800af08:	9200      	str	r2, [sp, #0]
 800af0a:	693f      	ldr	r7, [r7, #16]
 800af0c:	4662      	mov	r2, ip
 800af0e:	47b8      	blx	r7
 800af10:	f648 0308 	movw	r3, #34824	; 0x8808
 800af14:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800af18:	6818      	ldr	r0, [r3, #0]
 800af1a:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800af1c:	f8c7 9000 	str.w	r9, [r7]
 800af20:	e682      	b.n	800ac28 <LCD__DrawBitmap_1bpp+0x124>
 800af22:	4d33      	ldr	r5, [pc, #204]	; (800aff0 <LCD__DrawBitmap_1bpp+0x4ec>)
 800af24:	682b      	ldr	r3, [r5, #0]
 800af26:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800af2a:	1a51      	subs	r1, r2, r1
 800af2c:	2900      	cmp	r1, #0
 800af2e:	dd5b      	ble.n	800afe8 <LCD__DrawBitmap_1bpp+0x4e4>
 800af30:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800af34:	ebc1 0509 	rsb	r5, r1, r9
 800af38:	2d00      	cmp	r5, #0
 800af3a:	f77f adfd 	ble.w	800ab38 <LCD__DrawBitmap_1bpp+0x34>
 800af3e:	981e      	ldr	r0, [sp, #120]	; 0x78
 800af40:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800af42:	fb01 0107 	mla	r1, r1, r7, r0
 800af46:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800af48:	911e      	str	r1, [sp, #120]	; 0x78
 800af4a:	19f0      	adds	r0, r6, r7
 800af4c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800af50:	3801      	subs	r0, #1
 800af52:	1a41      	subs	r1, r0, r1
 800af54:	2900      	cmp	r1, #0
 800af56:	dd03      	ble.n	800af60 <LCD__DrawBitmap_1bpp+0x45c>
 800af58:	1a6d      	subs	r5, r5, r1
 800af5a:	2d00      	cmp	r5, #0
 800af5c:	f77f adec 	ble.w	800ab38 <LCD__DrawBitmap_1bpp+0x34>
 800af60:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800af64:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800af68:	f8dd c080 	ldr.w	ip, [sp, #128]	; 0x80
 800af6c:	eb04 0609 	add.w	r6, r4, r9
 800af70:	1e70      	subs	r0, r6, #1
 800af72:	1a46      	subs	r6, r0, r1
 800af74:	2e00      	cmp	r6, #0
 800af76:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800af7a:	bfc8      	it	gt
 800af7c:	ebc6 0909 	rsbgt	r9, r6, r9
 800af80:	ebcc 0104 	rsb	r1, ip, r4
 800af84:	bfc8      	it	gt
 800af86:	f8cd 9034 	strgt.w	r9, [sp, #52]	; 0x34
 800af8a:	4281      	cmp	r1, r0
 800af8c:	db1b      	blt.n	800afc6 <LCD__DrawBitmap_1bpp+0x4c2>
 800af8e:	4664      	mov	r4, ip
 800af90:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800af92:	2e00      	cmp	r6, #0
 800af94:	f77f add0 	ble.w	800ab38 <LCD__DrawBitmap_1bpp+0x34>
 800af98:	7c5e      	ldrb	r6, [r3, #17]
 800af9a:	4b16      	ldr	r3, [pc, #88]	; (800aff4 <LCD__DrawBitmap_1bpp+0x4f0>)
 800af9c:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800af9e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800afa2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800afa4:	68c3      	ldr	r3, [r0, #12]
 800afa6:	9500      	str	r5, [sp, #0]
 800afa8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800afaa:	9603      	str	r6, [sp, #12]
 800afac:	9501      	str	r5, [sp, #4]
 800afae:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800afb0:	9404      	str	r4, [sp, #16]
 800afb2:	9502      	str	r5, [sp, #8]
 800afb4:	9705      	str	r7, [sp, #20]
 800afb6:	685c      	ldr	r4, [r3, #4]
 800afb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afba:	47a0      	blx	r4
 800afbc:	e5bc      	b.n	800ab38 <LCD__DrawBitmap_1bpp+0x34>
 800afbe:	b2f6      	uxtb	r6, r6
 800afc0:	e71c      	b.n	800adfc <LCD__DrawBitmap_1bpp+0x2f8>
 800afc2:	b2d2      	uxtb	r2, r2
 800afc4:	e747      	b.n	800ae56 <LCD__DrawBitmap_1bpp+0x352>
 800afc6:	1a47      	subs	r7, r0, r1
 800afc8:	eb0c 0407 	add.w	r4, ip, r7
 800afcc:	f027 0607 	bic.w	r6, r7, #7
 800afd0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800afd2:	1a08      	subs	r0, r1, r0
 800afd4:	1838      	adds	r0, r7, r0
 800afd6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800afd8:	900d      	str	r0, [sp, #52]	; 0x34
 800afda:	eb07 07e4 	add.w	r7, r7, r4, asr #3
 800afde:	971e      	str	r7, [sp, #120]	; 0x78
 800afe0:	1989      	adds	r1, r1, r6
 800afe2:	f004 0407 	and.w	r4, r4, #7
 800afe6:	e7d3      	b.n	800af90 <LCD__DrawBitmap_1bpp+0x48c>
 800afe8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800afea:	4632      	mov	r2, r6
 800afec:	462f      	mov	r7, r5
 800afee:	e7ac      	b.n	800af4a <LCD__DrawBitmap_1bpp+0x446>
 800aff0:	1ffe8808 	.word	0x1ffe8808
 800aff4:	1ffe9d08 	.word	0x1ffe9d08

0800aff8 <LCD_DrawBitmap>:
 800aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affc:	4c0d      	ldr	r4, [pc, #52]	; (800b034 <LCD_DrawBitmap+0x3c>)
 800affe:	b091      	sub	sp, #68	; 0x44
 800b000:	6825      	ldr	r5, [r4, #0]
 800b002:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 800b006:	920d      	str	r2, [sp, #52]	; 0x34
 800b008:	4604      	mov	r4, r0
 800b00a:	460e      	mov	r6, r1
 800b00c:	930e      	str	r3, [sp, #56]	; 0x38
 800b00e:	b19d      	cbz	r5, 800b038 <LCD_DrawBitmap+0x40>
 800b010:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b012:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b014:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800b016:	9702      	str	r7, [sp, #8]
 800b018:	9604      	str	r6, [sp, #16]
 800b01a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800b01c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800b01e:	f8cd b000 	str.w	fp, [sp]
 800b022:	9401      	str	r4, [sp, #4]
 800b024:	9703      	str	r7, [sp, #12]
 800b026:	9605      	str	r6, [sp, #20]
 800b028:	682c      	ldr	r4, [r5, #0]
 800b02a:	47a0      	blx	r4
 800b02c:	b011      	add	sp, #68	; 0x44
 800b02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b032:	bf00      	nop
 800b034:	1ffe9ce0 	.word	0x1ffe9ce0
 800b038:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b03a:	ea47 030b 	orr.w	r3, r7, fp
 800b03e:	2b01      	cmp	r3, #1
 800b040:	f000 81e9 	beq.w	800b416 <LCD_DrawBitmap+0x41e>
 800b044:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b046:	f1c7 0a08 	rsb	sl, r7, #8
 800b04a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b04c:	2f00      	cmp	r7, #0
 800b04e:	dded      	ble.n	800b02c <LCD_DrawBitmap+0x34>
 800b050:	f648 0c08 	movw	ip, #34824	; 0x8808
 800b054:	f6c1 7cfe 	movt	ip, #8190	; 0x1ffe
 800b058:	4458      	add	r0, fp
 800b05a:	f8dc 9000 	ldr.w	r9, [ip]
 800b05e:	900f      	str	r0, [sp, #60]	; 0x3c
 800b060:	9108      	str	r1, [sp, #32]
 800b062:	950a      	str	r5, [sp, #40]	; 0x28
 800b064:	4648      	mov	r0, r9
 800b066:	9d08      	ldr	r5, [sp, #32]
 800b068:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800b06a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 800b06e:	186a      	adds	r2, r5, r1
 800b070:	1e56      	subs	r6, r2, #1
 800b072:	42b4      	cmp	r4, r6
 800b074:	920b      	str	r2, [sp, #44]	; 0x2c
 800b076:	9609      	str	r6, [sp, #36]	; 0x24
 800b078:	f300 8122 	bgt.w	800b2c0 <LCD_DrawBitmap+0x2c8>
 800b07c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800b080:	42ab      	cmp	r3, r5
 800b082:	f2c0 811d 	blt.w	800b2c0 <LCD_DrawBitmap+0x2c8>
 800b086:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b088:	2f00      	cmp	r7, #0
 800b08a:	f340 8119 	ble.w	800b2c0 <LCD_DrawBitmap+0x2c8>
 800b08e:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800b090:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b092:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800b096:	4629      	mov	r1, r5
 800b098:	f107 38ff 	add.w	r8, r7, #4294967295
 800b09c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0a0:	fa44 f60a 	asr.w	r6, r4, sl
 800b0a4:	f016 0fff 	tst.w	r6, #255	; 0xff
 800b0a8:	fa04 f402 	lsl.w	r4, r4, r2
 800b0ac:	f008 0901 	and.w	r9, r8, #1
 800b0b0:	910c      	str	r1, [sp, #48]	; 0x30
 800b0b2:	ebcb 020c 	rsb	r2, fp, ip
 800b0b6:	46d0      	mov	r8, sl
 800b0b8:	b2e4      	uxtb	r4, r4
 800b0ba:	f040 8110 	bne.w	800b2de <LCD_DrawBitmap+0x2e6>
 800b0be:	7c03      	ldrb	r3, [r0, #16]
 800b0c0:	f003 0702 	and.w	r7, r3, #2
 800b0c4:	b2fd      	uxtb	r5, r7
 800b0c6:	2d00      	cmp	r5, #0
 800b0c8:	f000 8109 	beq.w	800b2de <LCD_DrawBitmap+0x2e6>
 800b0cc:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800b0d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0d2:	2601      	movs	r6, #1
 800b0d4:	4566      	cmp	r6, ip
 800b0d6:	eb03 050b 	add.w	r5, r3, fp
 800b0da:	f000 80f1 	beq.w	800b2c0 <LCD_DrawBitmap+0x2c8>
 800b0de:	f1b9 0f00 	cmp.w	r9, #0
 800b0e2:	d021      	beq.n	800b128 <LCD_DrawBitmap+0x130>
 800b0e4:	ebcb 0c05 	rsb	ip, fp, r5
 800b0e8:	f1b8 0f00 	cmp.w	r8, #0
 800b0ec:	f040 8167 	bne.w	800b3be <LCD_DrawBitmap+0x3c6>
 800b0f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b0f2:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b0f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0f8:	46d0      	mov	r8, sl
 800b0fa:	910c      	str	r1, [sp, #48]	; 0x30
 800b0fc:	fa44 f20a 	asr.w	r2, r4, sl
 800b100:	f012 0fff 	tst.w	r2, #255	; 0xff
 800b104:	fa04 f407 	lsl.w	r4, r4, r7
 800b108:	b2e4      	uxtb	r4, r4
 800b10a:	f040 8114 	bne.w	800b336 <LCD_DrawBitmap+0x33e>
 800b10e:	7c03      	ldrb	r3, [r0, #16]
 800b110:	f003 0702 	and.w	r7, r3, #2
 800b114:	b2f9      	uxtb	r1, r7
 800b116:	2900      	cmp	r1, #0
 800b118:	f000 810d 	beq.w	800b336 <LCD_DrawBitmap+0x33e>
 800b11c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b11e:	3601      	adds	r6, #1
 800b120:	428e      	cmp	r6, r1
 800b122:	445d      	add	r5, fp
 800b124:	f000 80cc 	beq.w	800b2c0 <LCD_DrawBitmap+0x2c8>
 800b128:	ebcb 0205 	rsb	r2, fp, r5
 800b12c:	f1b8 0f00 	cmp.w	r8, #0
 800b130:	f000 8139 	beq.w	800b3a6 <LCD_DrawBitmap+0x3ae>
 800b134:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b136:	ebc7 0808 	rsb	r8, r7, r8
 800b13a:	463b      	mov	r3, r7
 800b13c:	fa44 f90a 	asr.w	r9, r4, sl
 800b140:	fa04 f103 	lsl.w	r1, r4, r3
 800b144:	f019 0fff 	tst.w	r9, #255	; 0xff
 800b148:	b2cf      	uxtb	r7, r1
 800b14a:	d105      	bne.n	800b158 <LCD_DrawBitmap+0x160>
 800b14c:	7c04      	ldrb	r4, [r0, #16]
 800b14e:	f004 0302 	and.w	r3, r4, #2
 800b152:	b2d9      	uxtb	r1, r3
 800b154:	2900      	cmp	r1, #0
 800b156:	d143      	bne.n	800b1e0 <LCD_DrawBitmap+0x1e8>
 800b158:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 800b15c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b15e:	f8dc 4000 	ldr.w	r4, [ip]
 800b162:	fa5f f989 	uxtb.w	r9, r9
 800b166:	b10b      	cbz	r3, 800b16c <LCD_DrawBitmap+0x174>
 800b168:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 800b16c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800b170:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800b174:	f8cc 9000 	str.w	r9, [ip]
 800b178:	f105 39ff 	add.w	r9, r5, #4294967295
 800b17c:	428a      	cmp	r2, r1
 800b17e:	bfa8      	it	ge
 800b180:	4611      	movge	r1, r2
 800b182:	4599      	cmp	r9, r3
 800b184:	bfb8      	it	lt
 800b186:	464b      	movlt	r3, r9
 800b188:	4299      	cmp	r1, r3
 800b18a:	dc27      	bgt.n	800b1dc <LCD_DrawBitmap+0x1e4>
 800b18c:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 800b190:	f9b0 900a 	ldrsh.w	r9, [r0, #10]
 800b194:	9206      	str	r2, [sp, #24]
 800b196:	9a08      	ldr	r2, [sp, #32]
 800b198:	454a      	cmp	r2, r9
 800b19a:	bfb8      	it	lt
 800b19c:	464a      	movlt	r2, r9
 800b19e:	9207      	str	r2, [sp, #28]
 800b1a0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800b1a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1a6:	4591      	cmp	r9, r2
 800b1a8:	bfa8      	it	ge
 800b1aa:	4691      	movge	r9, r2
 800b1ac:	9a07      	ldr	r2, [sp, #28]
 800b1ae:	4591      	cmp	r9, r2
 800b1b0:	db14      	blt.n	800b1dc <LCD_DrawBitmap+0x1e4>
 800b1b2:	f649 5c08 	movw	ip, #40200	; 0x9d08
 800b1b6:	7c40      	ldrb	r0, [r0, #17]
 800b1b8:	f6c1 7cfe 	movt	ip, #8190	; 0x1ffe
 800b1bc:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 800b1c0:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800b1c4:	f8cd 9000 	str.w	r9, [sp]
 800b1c8:	f8de 9010 	ldr.w	r9, [lr, #16]
 800b1cc:	47c8      	blx	r9
 800b1ce:	f648 0108 	movw	r1, #34824	; 0x8808
 800b1d2:	f6c1 71fe 	movt	r1, #8190	; 0x1ffe
 800b1d6:	6808      	ldr	r0, [r1, #0]
 800b1d8:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 800b1dc:	f8cc 4000 	str.w	r4, [ip]
 800b1e0:	445d      	add	r5, fp
 800b1e2:	3601      	adds	r6, #1
 800b1e4:	ebcb 0205 	rsb	r2, fp, r5
 800b1e8:	f1b8 0f00 	cmp.w	r8, #0
 800b1ec:	f040 80d6 	bne.w	800b39c <LCD_DrawBitmap+0x3a4>
 800b1f0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800b1f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b1f6:	f818 7b01 	ldrb.w	r7, [r8], #1
 800b1fa:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800b1fe:	46d0      	mov	r8, sl
 800b200:	fa47 f90a 	asr.w	r9, r7, sl
 800b204:	fa07 f103 	lsl.w	r1, r7, r3
 800b208:	f019 0fff 	tst.w	r9, #255	; 0xff
 800b20c:	b2cc      	uxtb	r4, r1
 800b20e:	d106      	bne.n	800b21e <LCD_DrawBitmap+0x226>
 800b210:	7c07      	ldrb	r7, [r0, #16]
 800b212:	f007 0302 	and.w	r3, r7, #2
 800b216:	b2d9      	uxtb	r1, r3
 800b218:	2900      	cmp	r1, #0
 800b21a:	f47f af7f 	bne.w	800b11c <LCD_DrawBitmap+0x124>
 800b21e:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 800b222:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b224:	f8dc 7000 	ldr.w	r7, [ip]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 80c5 	beq.w	800b3b8 <LCD_DrawBitmap+0x3c0>
 800b22e:	fa5f f989 	uxtb.w	r9, r9
 800b232:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 800b236:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800b23a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800b23e:	f8cc 9000 	str.w	r9, [ip]
 800b242:	f105 39ff 	add.w	r9, r5, #4294967295
 800b246:	428a      	cmp	r2, r1
 800b248:	bfa8      	it	ge
 800b24a:	4611      	movge	r1, r2
 800b24c:	4599      	cmp	r9, r3
 800b24e:	bfb8      	it	lt
 800b250:	464b      	movlt	r3, r9
 800b252:	4299      	cmp	r1, r3
 800b254:	dc2c      	bgt.n	800b2b0 <LCD_DrawBitmap+0x2b8>
 800b256:	f9b0 900e 	ldrsh.w	r9, [r0, #14]
 800b25a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b25e:	f8cd 901c 	str.w	r9, [sp, #28]
 800b262:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b266:	4591      	cmp	r9, r2
 800b268:	bfb8      	it	lt
 800b26a:	4691      	movlt	r9, r2
 800b26c:	f8cd 9018 	str.w	r9, [sp, #24]
 800b270:	9a07      	ldr	r2, [sp, #28]
 800b272:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b276:	454a      	cmp	r2, r9
 800b278:	bfa8      	it	ge
 800b27a:	464a      	movge	r2, r9
 800b27c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800b280:	9207      	str	r2, [sp, #28]
 800b282:	454a      	cmp	r2, r9
 800b284:	db14      	blt.n	800b2b0 <LCD_DrawBitmap+0x2b8>
 800b286:	f649 5e08 	movw	lr, #40200	; 0x9d08
 800b28a:	7c40      	ldrb	r0, [r0, #17]
 800b28c:	f6c1 7efe 	movt	lr, #8190	; 0x1ffe
 800b290:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 800b294:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800b298:	9200      	str	r2, [sp, #0]
 800b29a:	f8dc c010 	ldr.w	ip, [ip, #16]
 800b29e:	464a      	mov	r2, r9
 800b2a0:	47e0      	blx	ip
 800b2a2:	f648 0108 	movw	r1, #34824	; 0x8808
 800b2a6:	f6c1 71fe 	movt	r1, #8190	; 0x1ffe
 800b2aa:	6808      	ldr	r0, [r1, #0]
 800b2ac:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 800b2b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b2b2:	f8cc 7000 	str.w	r7, [ip]
 800b2b6:	3601      	adds	r6, #1
 800b2b8:	428e      	cmp	r6, r1
 800b2ba:	445d      	add	r5, fp
 800b2bc:	f47f af34 	bne.w	800b128 <LCD_DrawBitmap+0x130>
 800b2c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b2c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b2c4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b2c6:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800b2ca:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b2cc:	3401      	adds	r4, #1
 800b2ce:	1995      	adds	r5, r2, r6
 800b2d0:	454c      	cmp	r4, r9
 800b2d2:	940a      	str	r4, [sp, #40]	; 0x28
 800b2d4:	951e      	str	r5, [sp, #120]	; 0x78
 800b2d6:	9708      	str	r7, [sp, #32]
 800b2d8:	f47f aec5 	bne.w	800b066 <LCD_DrawBitmap+0x6e>
 800b2dc:	e6a6      	b.n	800b02c <LCD_DrawBitmap+0x34>
 800b2de:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800b2e0:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800b2e2:	682f      	ldr	r7, [r5, #0]
 800b2e4:	2900      	cmp	r1, #0
 800b2e6:	f000 80e3 	beq.w	800b4b0 <LCD_DrawBitmap+0x4b8>
 800b2ea:	b2f6      	uxtb	r6, r6
 800b2ec:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b2f0:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800b2f4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800b2f8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800b2fc:	602e      	str	r6, [r5, #0]
 800b2fe:	f10c 36ff 	add.w	r6, ip, #4294967295
 800b302:	428a      	cmp	r2, r1
 800b304:	bfa8      	it	ge
 800b306:	4611      	movge	r1, r2
 800b308:	429e      	cmp	r6, r3
 800b30a:	bfb8      	it	lt
 800b30c:	4633      	movlt	r3, r6
 800b30e:	4299      	cmp	r1, r3
 800b310:	dc0f      	bgt.n	800b332 <LCD_DrawBitmap+0x33a>
 800b312:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b316:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b31a:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800b31e:	4594      	cmp	ip, r2
 800b320:	bfa8      	it	ge
 800b322:	4662      	movge	r2, ip
 800b324:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800b328:	4566      	cmp	r6, ip
 800b32a:	bfa8      	it	ge
 800b32c:	4666      	movge	r6, ip
 800b32e:	4296      	cmp	r6, r2
 800b330:	da49      	bge.n	800b3c6 <LCD_DrawBitmap+0x3ce>
 800b332:	602f      	str	r7, [r5, #0]
 800b334:	e6ca      	b.n	800b0cc <LCD_DrawBitmap+0xd4>
 800b336:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800b338:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b33a:	f8d7 9000 	ldr.w	r9, [r7]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	f000 80b8 	beq.w	800b4b4 <LCD_DrawBitmap+0x4bc>
 800b344:	b2d2      	uxtb	r2, r2
 800b346:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b34a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800b34e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800b352:	603a      	str	r2, [r7, #0]
 800b354:	1e6a      	subs	r2, r5, #1
 800b356:	458c      	cmp	ip, r1
 800b358:	bfa8      	it	ge
 800b35a:	4661      	movge	r1, ip
 800b35c:	429a      	cmp	r2, r3
 800b35e:	bfb8      	it	lt
 800b360:	4613      	movlt	r3, r2
 800b362:	4299      	cmp	r1, r3
 800b364:	dc17      	bgt.n	800b396 <LCD_DrawBitmap+0x39e>
 800b366:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 800b36a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b36e:	f8cd c01c 	str.w	ip, [sp, #28]
 800b372:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b376:	4594      	cmp	ip, r2
 800b378:	bfb8      	it	lt
 800b37a:	4694      	movlt	ip, r2
 800b37c:	f8cd c018 	str.w	ip, [sp, #24]
 800b380:	9a07      	ldr	r2, [sp, #28]
 800b382:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800b386:	4562      	cmp	r2, ip
 800b388:	bfa8      	it	ge
 800b38a:	4662      	movge	r2, ip
 800b38c:	f8dd c018 	ldr.w	ip, [sp, #24]
 800b390:	9207      	str	r2, [sp, #28]
 800b392:	4562      	cmp	r2, ip
 800b394:	da2a      	bge.n	800b3ec <LCD_DrawBitmap+0x3f4>
 800b396:	f8c7 9000 	str.w	r9, [r7]
 800b39a:	e6bf      	b.n	800b11c <LCD_DrawBitmap+0x124>
 800b39c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b39e:	ebc4 0808 	rsb	r8, r4, r8
 800b3a2:	4623      	mov	r3, r4
 800b3a4:	e72c      	b.n	800b200 <LCD_DrawBitmap+0x208>
 800b3a6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800b3aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b3ac:	f818 4b01 	ldrb.w	r4, [r8], #1
 800b3b0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800b3b4:	46d0      	mov	r8, sl
 800b3b6:	e6c1      	b.n	800b13c <LCD_DrawBitmap+0x144>
 800b3b8:	fa5f f989 	uxtb.w	r9, r9
 800b3bc:	e73b      	b.n	800b236 <LCD_DrawBitmap+0x23e>
 800b3be:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b3c0:	ebc7 0808 	rsb	r8, r7, r8
 800b3c4:	e69a      	b.n	800b0fc <LCD_DrawBitmap+0x104>
 800b3c6:	f649 5e08 	movw	lr, #40200	; 0x9d08
 800b3ca:	7c40      	ldrb	r0, [r0, #17]
 800b3cc:	f6c1 7efe 	movt	lr, #8190	; 0x1ffe
 800b3d0:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 800b3d4:	68c5      	ldr	r5, [r0, #12]
 800b3d6:	9600      	str	r6, [sp, #0]
 800b3d8:	692e      	ldr	r6, [r5, #16]
 800b3da:	47b0      	blx	r6
 800b3dc:	f648 0208 	movw	r2, #34824	; 0x8808
 800b3e0:	f6c1 72fe 	movt	r2, #8190	; 0x1ffe
 800b3e4:	6810      	ldr	r0, [r2, #0]
 800b3e6:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800b3e8:	602f      	str	r7, [r5, #0]
 800b3ea:	e66f      	b.n	800b0cc <LCD_DrawBitmap+0xd4>
 800b3ec:	f649 5e08 	movw	lr, #40200	; 0x9d08
 800b3f0:	7c40      	ldrb	r0, [r0, #17]
 800b3f2:	f6c1 7efe 	movt	lr, #8190	; 0x1ffe
 800b3f6:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 800b3fa:	68c7      	ldr	r7, [r0, #12]
 800b3fc:	9200      	str	r2, [sp, #0]
 800b3fe:	693f      	ldr	r7, [r7, #16]
 800b400:	4662      	mov	r2, ip
 800b402:	47b8      	blx	r7
 800b404:	f648 0308 	movw	r3, #34824	; 0x8808
 800b408:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800b40c:	6818      	ldr	r0, [r3, #0]
 800b40e:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800b410:	f8c7 9000 	str.w	r9, [r7]
 800b414:	e682      	b.n	800b11c <LCD_DrawBitmap+0x124>
 800b416:	4b6b      	ldr	r3, [pc, #428]	; (800b5c4 <LCD_DrawBitmap+0x5cc>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800b41e:	1a50      	subs	r0, r2, r1
 800b420:	2800      	cmp	r0, #0
 800b422:	f340 80cb 	ble.w	800b5bc <LCD_DrawBitmap+0x5c4>
 800b426:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800b42a:	ebc0 0109 	rsb	r1, r0, r9
 800b42e:	2900      	cmp	r1, #0
 800b430:	f77f adfc 	ble.w	800b02c <LCD_DrawBitmap+0x34>
 800b434:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b436:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b438:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800b43c:	fb00 7705 	mla	r7, r0, r5, r7
 800b440:	971e      	str	r7, [sp, #120]	; 0x78
 800b442:	eb06 0509 	add.w	r5, r6, r9
 800b446:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800b44a:	3d01      	subs	r5, #1
 800b44c:	1a28      	subs	r0, r5, r0
 800b44e:	2800      	cmp	r0, #0
 800b450:	dd03      	ble.n	800b45a <LCD_DrawBitmap+0x462>
 800b452:	1a09      	subs	r1, r1, r0
 800b454:	2900      	cmp	r1, #0
 800b456:	f77f ade9 	ble.w	800b02c <LCD_DrawBitmap+0x34>
 800b45a:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800b45e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800b462:	eb04 070c 	add.w	r7, r4, ip
 800b466:	1e7d      	subs	r5, r7, #1
 800b468:	1a2f      	subs	r7, r5, r0
 800b46a:	2f00      	cmp	r7, #0
 800b46c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800b470:	bfc4      	itt	gt
 800b472:	ebc7 0c0c 	rsbgt	ip, r7, ip
 800b476:	f8cd c034 	strgt.w	ip, [sp, #52]	; 0x34
 800b47a:	4284      	cmp	r4, r0
 800b47c:	db1c      	blt.n	800b4b8 <LCD_DrawBitmap+0x4c0>
 800b47e:	2500      	movs	r5, #0
 800b480:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b482:	2f00      	cmp	r7, #0
 800b484:	f77f add2 	ble.w	800b02c <LCD_DrawBitmap+0x34>
 800b488:	7c5f      	ldrb	r7, [r3, #17]
 800b48a:	4b4f      	ldr	r3, [pc, #316]	; (800b5c8 <LCD_DrawBitmap+0x5d0>)
 800b48c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b48e:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b492:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b494:	68c3      	ldr	r3, [r0, #12]
 800b496:	9100      	str	r1, [sp, #0]
 800b498:	9602      	str	r6, [sp, #8]
 800b49a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b49c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b49e:	9101      	str	r1, [sp, #4]
 800b4a0:	9603      	str	r6, [sp, #12]
 800b4a2:	9504      	str	r5, [sp, #16]
 800b4a4:	9705      	str	r7, [sp, #20]
 800b4a6:	685d      	ldr	r5, [r3, #4]
 800b4a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	47a8      	blx	r5
 800b4ae:	e5bd      	b.n	800b02c <LCD_DrawBitmap+0x34>
 800b4b0:	b2f6      	uxtb	r6, r6
 800b4b2:	e71d      	b.n	800b2f0 <LCD_DrawBitmap+0x2f8>
 800b4b4:	b2d2      	uxtb	r2, r2
 800b4b6:	e748      	b.n	800b34a <LCD_DrawBitmap+0x352>
 800b4b8:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 800b4bc:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800b4be:	1b05      	subs	r5, r0, r4
 800b4c0:	ebc5 0909 	rsb	r9, r5, r9
 800b4c4:	3e01      	subs	r6, #1
 800b4c6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800b4ca:	2e1f      	cmp	r6, #31
 800b4cc:	d8d8      	bhi.n	800b480 <LCD_DrawBitmap+0x488>
 800b4ce:	f20f 0c08 	addw	ip, pc, #8
 800b4d2:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 800b4d6:	bf00      	nop
 800b4d8:	0800b5a9 	.word	0x0800b5a9
 800b4dc:	0800b595 	.word	0x0800b595
 800b4e0:	0800b481 	.word	0x0800b481
 800b4e4:	0800b581 	.word	0x0800b581
 800b4e8:	0800b481 	.word	0x0800b481
 800b4ec:	0800b481 	.word	0x0800b481
 800b4f0:	0800b481 	.word	0x0800b481
 800b4f4:	0800b575 	.word	0x0800b575
 800b4f8:	0800b481 	.word	0x0800b481
 800b4fc:	0800b481 	.word	0x0800b481
 800b500:	0800b481 	.word	0x0800b481
 800b504:	0800b481 	.word	0x0800b481
 800b508:	0800b481 	.word	0x0800b481
 800b50c:	0800b481 	.word	0x0800b481
 800b510:	0800b481 	.word	0x0800b481
 800b514:	0800b567 	.word	0x0800b567
 800b518:	0800b481 	.word	0x0800b481
 800b51c:	0800b481 	.word	0x0800b481
 800b520:	0800b481 	.word	0x0800b481
 800b524:	0800b481 	.word	0x0800b481
 800b528:	0800b481 	.word	0x0800b481
 800b52c:	0800b481 	.word	0x0800b481
 800b530:	0800b481 	.word	0x0800b481
 800b534:	0800b559 	.word	0x0800b559
 800b538:	0800b481 	.word	0x0800b481
 800b53c:	0800b481 	.word	0x0800b481
 800b540:	0800b481 	.word	0x0800b481
 800b544:	0800b481 	.word	0x0800b481
 800b548:	0800b481 	.word	0x0800b481
 800b54c:	0800b481 	.word	0x0800b481
 800b550:	0800b481 	.word	0x0800b481
 800b554:	0800b559 	.word	0x0800b559
 800b558:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b55a:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 800b55e:	961e      	str	r6, [sp, #120]	; 0x78
 800b560:	4604      	mov	r4, r0
 800b562:	2500      	movs	r5, #0
 800b564:	e78c      	b.n	800b480 <LCD_DrawBitmap+0x488>
 800b566:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b568:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 800b56c:	951e      	str	r5, [sp, #120]	; 0x78
 800b56e:	4604      	mov	r4, r0
 800b570:	2500      	movs	r5, #0
 800b572:	e785      	b.n	800b480 <LCD_DrawBitmap+0x488>
 800b574:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b576:	1967      	adds	r7, r4, r5
 800b578:	971e      	str	r7, [sp, #120]	; 0x78
 800b57a:	4604      	mov	r4, r0
 800b57c:	2500      	movs	r5, #0
 800b57e:	e77f      	b.n	800b480 <LCD_DrawBitmap+0x488>
 800b580:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b582:	f025 0001 	bic.w	r0, r5, #1
 800b586:	eb06 0665 	add.w	r6, r6, r5, asr #1
 800b58a:	961e      	str	r6, [sp, #120]	; 0x78
 800b58c:	1824      	adds	r4, r4, r0
 800b58e:	f005 0501 	and.w	r5, r5, #1
 800b592:	e775      	b.n	800b480 <LCD_DrawBitmap+0x488>
 800b594:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b596:	f025 0003 	bic.w	r0, r5, #3
 800b59a:	eb07 07a5 	add.w	r7, r7, r5, asr #2
 800b59e:	971e      	str	r7, [sp, #120]	; 0x78
 800b5a0:	1824      	adds	r4, r4, r0
 800b5a2:	f005 0503 	and.w	r5, r5, #3
 800b5a6:	e76b      	b.n	800b480 <LCD_DrawBitmap+0x488>
 800b5a8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b5aa:	f025 0007 	bic.w	r0, r5, #7
 800b5ae:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 800b5b2:	961e      	str	r6, [sp, #120]	; 0x78
 800b5b4:	1824      	adds	r4, r4, r0
 800b5b6:	f005 0507 	and.w	r5, r5, #7
 800b5ba:	e761      	b.n	800b480 <LCD_DrawBitmap+0x488>
 800b5bc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b5be:	4632      	mov	r2, r6
 800b5c0:	4689      	mov	r9, r1
 800b5c2:	e73e      	b.n	800b442 <LCD_DrawBitmap+0x44a>
 800b5c4:	1ffe8808 	.word	0x1ffe8808
 800b5c8:	1ffe9d08 	.word	0x1ffe9d08

0800b5cc <LCD_SetClipRectMax>:
 800b5cc:	b508      	push	{r3, lr}
 800b5ce:	f648 0208 	movw	r2, #34824	; 0x8808
 800b5d2:	f6c1 72fe 	movt	r2, #8190	; 0x1ffe
 800b5d6:	f649 5308 	movw	r3, #40200	; 0x9d08
 800b5da:	6811      	ldr	r1, [r2, #0]
 800b5dc:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800b5e0:	7c48      	ldrb	r0, [r1, #17]
 800b5e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b5e6:	68c2      	ldr	r2, [r0, #12]
 800b5e8:	3108      	adds	r1, #8
 800b5ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b5ec:	4798      	blx	r3
 800b5ee:	bd08      	pop	{r3, pc}

0800b5f0 <LCD_Init>:
 800b5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5f2:	4d32      	ldr	r5, [pc, #200]	; (800b6bc <LCD_Init+0xcc>)
 800b5f4:	4e32      	ldr	r6, [pc, #200]	; (800b6c0 <LCD_Init+0xd0>)
 800b5f6:	6829      	ldr	r1, [r5, #0]
 800b5f8:	7c4b      	ldrb	r3, [r1, #17]
 800b5fa:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 800b5fe:	68c2      	ldr	r2, [r0, #12]
 800b600:	b085      	sub	sp, #20
 800b602:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800b604:	3108      	adds	r1, #8
 800b606:	47a0      	blx	r4
 800b608:	f7ff f8cc 	bl	800a7a4 <LCD_InitColors>
 800b60c:	4604      	mov	r4, r0
 800b60e:	b978      	cbnz	r0, 800b630 <LCD_Init+0x40>
 800b610:	f7fb fe2e 	bl	8007270 <GUI_DEVICE__GetpDriver>
 800b614:	9003      	str	r0, [sp, #12]
 800b616:	b170      	cbz	r0, 800b636 <LCD_Init+0x46>
 800b618:	68c1      	ldr	r1, [r0, #12]
 800b61a:	a803      	add	r0, sp, #12
 800b61c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800b61e:	210c      	movs	r1, #12
 800b620:	4798      	blx	r3
 800b622:	4602      	mov	r2, r0
 800b624:	2800      	cmp	r0, #0
 800b626:	d047      	beq.n	800b6b8 <LCD_Init+0xc8>
 800b628:	9803      	ldr	r0, [sp, #12]
 800b62a:	4790      	blx	r2
 800b62c:	b118      	cbz	r0, 800b636 <LCD_Init+0x46>
 800b62e:	4604      	mov	r4, r0
 800b630:	4620      	mov	r0, r4
 800b632:	b005      	add	sp, #20
 800b634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b636:	f7ff f91d 	bl	800a874 <LCD_InitLUT>
 800b63a:	2000      	movs	r0, #0
 800b63c:	f7fb fe18 	bl	8007270 <GUI_DEVICE__GetpDriver>
 800b640:	9003      	str	r0, [sp, #12]
 800b642:	2800      	cmp	r0, #0
 800b644:	d0f4      	beq.n	800b630 <LCD_Init+0x40>
 800b646:	4f1f      	ldr	r7, [pc, #124]	; (800b6c4 <LCD_Init+0xd4>)
 800b648:	2000      	movs	r0, #0
 800b64a:	f000 f9cb 	bl	800b9e4 <GUI_SelectLayer>
 800b64e:	6839      	ldr	r1, [r7, #0]
 800b650:	2004      	movs	r0, #4
 800b652:	688b      	ldr	r3, [r1, #8]
 800b654:	4798      	blx	r3
 800b656:	6828      	ldr	r0, [r5, #0]
 800b658:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800b65c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800b660:	f643 75ff 	movw	r5, #16383	; 0x3fff
 800b664:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
 800b668:	42ab      	cmp	r3, r5
 800b66a:	bfa8      	it	ge
 800b66c:	462b      	movge	r3, r5
 800b66e:	4299      	cmp	r1, r3
 800b670:	dc11      	bgt.n	800b696 <LCD_Init+0xa6>
 800b672:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b676:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 800b67a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800b67e:	45ae      	cmp	lr, r5
 800b680:	bfb8      	it	lt
 800b682:	4675      	movlt	r5, lr
 800b684:	42aa      	cmp	r2, r5
 800b686:	dc06      	bgt.n	800b696 <LCD_Init+0xa6>
 800b688:	7c40      	ldrb	r0, [r0, #17]
 800b68a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800b68e:	68c6      	ldr	r6, [r0, #12]
 800b690:	9500      	str	r5, [sp, #0]
 800b692:	6935      	ldr	r5, [r6, #16]
 800b694:	47a8      	blx	r5
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	2000      	movs	r0, #0
 800b69a:	688b      	ldr	r3, [r1, #8]
 800b69c:	4798      	blx	r3
 800b69e:	a804      	add	r0, sp, #16
 800b6a0:	210e      	movs	r1, #14
 800b6a2:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 800b6a6:	68d3      	ldr	r3, [r2, #12]
 800b6a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6aa:	4790      	blx	r2
 800b6ac:	4601      	mov	r1, r0
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d0be      	beq.n	800b630 <LCD_Init+0x40>
 800b6b2:	9803      	ldr	r0, [sp, #12]
 800b6b4:	4788      	blx	r1
 800b6b6:	e7bb      	b.n	800b630 <LCD_Init+0x40>
 800b6b8:	2401      	movs	r4, #1
 800b6ba:	e7b9      	b.n	800b630 <LCD_Init+0x40>
 800b6bc:	1ffe8808 	.word	0x1ffe8808
 800b6c0:	1ffe9d08 	.word	0x1ffe9d08
 800b6c4:	1ffe8814 	.word	0x1ffe8814

0800b6c8 <LCD_Color2Index>:
 800b6c8:	b508      	push	{r3, lr}
 800b6ca:	f648 0208 	movw	r2, #34824	; 0x8808
 800b6ce:	f6c1 72fe 	movt	r2, #8190	; 0x1ffe
 800b6d2:	f649 5308 	movw	r3, #40200	; 0x9d08
 800b6d6:	6811      	ldr	r1, [r2, #0]
 800b6d8:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800b6dc:	7c4a      	ldrb	r2, [r1, #17]
 800b6de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6e2:	6919      	ldr	r1, [r3, #16]
 800b6e4:	680a      	ldr	r2, [r1, #0]
 800b6e6:	4790      	blx	r2
 800b6e8:	bd08      	pop	{r3, pc}
 800b6ea:	bf00      	nop

0800b6ec <LCD_Index2Color>:
 800b6ec:	b508      	push	{r3, lr}
 800b6ee:	f648 0208 	movw	r2, #34824	; 0x8808
 800b6f2:	f6c1 72fe 	movt	r2, #8190	; 0x1ffe
 800b6f6:	f649 5308 	movw	r3, #40200	; 0x9d08
 800b6fa:	6811      	ldr	r1, [r2, #0]
 800b6fc:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800b700:	7c4a      	ldrb	r2, [r1, #17]
 800b702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b706:	6919      	ldr	r1, [r3, #16]
 800b708:	684a      	ldr	r2, [r1, #4]
 800b70a:	4790      	blx	r2
 800b70c:	bd08      	pop	{r3, pc}
 800b70e:	bf00      	nop

0800b710 <LCD_SetColorIndex>:
 800b710:	4b06      	ldr	r3, [pc, #24]	; (800b72c <LCD_SetColorIndex+0x1c>)
 800b712:	6819      	ldr	r1, [r3, #0]
 800b714:	7c0a      	ldrb	r2, [r1, #16]
 800b716:	f002 0304 	and.w	r3, r2, #4
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	b912      	cbnz	r2, 800b724 <LCD_SetColorIndex+0x14>
 800b71e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800b720:	6008      	str	r0, [r1, #0]
 800b722:	4770      	bx	lr
 800b724:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800b726:	6018      	str	r0, [r3, #0]
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	1ffe8808 	.word	0x1ffe8808

0800b730 <LCD_SetBkColorIndex>:
 800b730:	4b06      	ldr	r3, [pc, #24]	; (800b74c <LCD_SetBkColorIndex+0x1c>)
 800b732:	6819      	ldr	r1, [r3, #0]
 800b734:	7c0a      	ldrb	r2, [r1, #16]
 800b736:	f002 0304 	and.w	r3, r2, #4
 800b73a:	b2da      	uxtb	r2, r3
 800b73c:	b912      	cbnz	r2, 800b744 <LCD_SetBkColorIndex+0x14>
 800b73e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800b740:	6008      	str	r0, [r1, #0]
 800b742:	4770      	bx	lr
 800b744:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800b746:	6018      	str	r0, [r3, #0]
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	1ffe8808 	.word	0x1ffe8808

0800b750 <LCD_SetBkColor>:
 800b750:	b508      	push	{r3, lr}
 800b752:	f648 0314 	movw	r3, #34836	; 0x8814
 800b756:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800b75a:	6819      	ldr	r1, [r3, #0]
 800b75c:	684a      	ldr	r2, [r1, #4]
 800b75e:	4790      	blx	r2
 800b760:	bd08      	pop	{r3, pc}
 800b762:	bf00      	nop

0800b764 <LCD_SetColor>:
 800b764:	b508      	push	{r3, lr}
 800b766:	f648 0314 	movw	r3, #34836	; 0x8814
 800b76a:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800b76e:	6819      	ldr	r1, [r3, #0]
 800b770:	680a      	ldr	r2, [r1, #0]
 800b772:	4790      	blx	r2
 800b774:	bd08      	pop	{r3, pc}
 800b776:	bf00      	nop

0800b778 <GUI__memset16>:
 800b778:	b4f0      	push	{r4, r5, r6, r7}
 800b77a:	0787      	lsls	r7, r0, #30
 800b77c:	bf44      	itt	mi
 800b77e:	f820 1b02 	strhmi.w	r1, [r0], #2
 800b782:	3a01      	submi	r2, #1
 800b784:	0857      	lsrs	r7, r2, #1
 800b786:	d019      	beq.n	800b7bc <GUI__memset16+0x44>
 800b788:	2f03      	cmp	r7, #3
 800b78a:	eb01 4301 	add.w	r3, r1, r1, lsl #16
 800b78e:	dc1a      	bgt.n	800b7c6 <GUI__memset16+0x4e>
 800b790:	1e7e      	subs	r6, r7, #1
 800b792:	4604      	mov	r4, r0
 800b794:	4635      	mov	r5, r6
 800b796:	f844 3b04 	str.w	r3, [r4], #4
 800b79a:	f006 0601 	and.w	r6, r6, #1
 800b79e:	b15d      	cbz	r5, 800b7b8 <GUI__memset16+0x40>
 800b7a0:	b11e      	cbz	r6, 800b7aa <GUI__memset16+0x32>
 800b7a2:	3d01      	subs	r5, #1
 800b7a4:	f844 3b04 	str.w	r3, [r4], #4
 800b7a8:	d006      	beq.n	800b7b8 <GUI__memset16+0x40>
 800b7aa:	4626      	mov	r6, r4
 800b7ac:	f846 3b04 	str.w	r3, [r6], #4
 800b7b0:	6063      	str	r3, [r4, #4]
 800b7b2:	1d34      	adds	r4, r6, #4
 800b7b4:	3d02      	subs	r5, #2
 800b7b6:	d1f8      	bne.n	800b7aa <GUI__memset16+0x32>
 800b7b8:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 800b7bc:	07d3      	lsls	r3, r2, #31
 800b7be:	bf48      	it	mi
 800b7c0:	8001      	strhmi	r1, [r0, #0]
 800b7c2:	bcf0      	pop	{r4, r5, r6, r7}
 800b7c4:	4770      	bx	lr
 800b7c6:	1f3c      	subs	r4, r7, #4
 800b7c8:	4626      	mov	r6, r4
 800b7ca:	2e03      	cmp	r6, #3
 800b7cc:	f3c4 0580 	ubfx	r5, r4, #2, #1
 800b7d0:	6003      	str	r3, [r0, #0]
 800b7d2:	6043      	str	r3, [r0, #4]
 800b7d4:	6083      	str	r3, [r0, #8]
 800b7d6:	60c3      	str	r3, [r0, #12]
 800b7d8:	f100 0410 	add.w	r4, r0, #16
 800b7dc:	dd14      	ble.n	800b808 <GUI__memset16+0x90>
 800b7de:	b13d      	cbz	r5, 800b7f0 <GUI__memset16+0x78>
 800b7e0:	3e04      	subs	r6, #4
 800b7e2:	6023      	str	r3, [r4, #0]
 800b7e4:	6063      	str	r3, [r4, #4]
 800b7e6:	60a3      	str	r3, [r4, #8]
 800b7e8:	60e3      	str	r3, [r4, #12]
 800b7ea:	3410      	adds	r4, #16
 800b7ec:	2e03      	cmp	r6, #3
 800b7ee:	dd0b      	ble.n	800b808 <GUI__memset16+0x90>
 800b7f0:	3e08      	subs	r6, #8
 800b7f2:	6023      	str	r3, [r4, #0]
 800b7f4:	6063      	str	r3, [r4, #4]
 800b7f6:	60a3      	str	r3, [r4, #8]
 800b7f8:	60e3      	str	r3, [r4, #12]
 800b7fa:	6123      	str	r3, [r4, #16]
 800b7fc:	6163      	str	r3, [r4, #20]
 800b7fe:	61a3      	str	r3, [r4, #24]
 800b800:	61e3      	str	r3, [r4, #28]
 800b802:	3420      	adds	r4, #32
 800b804:	2e03      	cmp	r6, #3
 800b806:	dcf3      	bgt.n	800b7f0 <GUI__memset16+0x78>
 800b808:	3f04      	subs	r7, #4
 800b80a:	08bc      	lsrs	r4, r7, #2
 800b80c:	1c65      	adds	r5, r4, #1
 800b80e:	ebb7 0784 	subs.w	r7, r7, r4, lsl #2
 800b812:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800b816:	d1bb      	bne.n	800b790 <GUI__memset16+0x18>
 800b818:	e7d0      	b.n	800b7bc <GUI__memset16+0x44>
 800b81a:	bf00      	nop

0800b81c <GUI__ManageCacheEx>:
 800b81c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b81e:	1e03      	subs	r3, r0, #0
 800b820:	b083      	sub	sp, #12
 800b822:	460c      	mov	r4, r1
 800b824:	dd02      	ble.n	800b82c <GUI__ManageCacheEx+0x10>
 800b826:	2001      	movs	r0, #1
 800b828:	b003      	add	sp, #12
 800b82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b82c:	2901      	cmp	r1, #1
 800b82e:	d026      	beq.n	800b87e <GUI__ManageCacheEx+0x62>
 800b830:	2902      	cmp	r1, #2
 800b832:	d00e      	beq.n	800b852 <GUI__ManageCacheEx+0x36>
 800b834:	2900      	cmp	r1, #0
 800b836:	d1f6      	bne.n	800b826 <GUI__ManageCacheEx+0xa>
 800b838:	4c2c      	ldr	r4, [pc, #176]	; (800b8ec <GUI__ManageCacheEx+0xd0>)
 800b83a:	009d      	lsls	r5, r3, #2
 800b83c:	1966      	adds	r6, r4, r5
 800b83e:	6872      	ldr	r2, [r6, #4]
 800b840:	2a01      	cmp	r2, #1
 800b842:	d03a      	beq.n	800b8ba <GUI__ManageCacheEx+0x9e>
 800b844:	2001      	movs	r0, #1
 800b846:	1964      	adds	r4, r4, r5
 800b848:	2a00      	cmp	r2, #0
 800b84a:	bf18      	it	ne
 800b84c:	3a01      	subne	r2, #1
 800b84e:	6062      	str	r2, [r4, #4]
 800b850:	e7ea      	b.n	800b828 <GUI__ManageCacheEx+0xc>
 800b852:	f7fb fd0d 	bl	8007270 <GUI_DEVICE__GetpDriver>
 800b856:	9001      	str	r0, [sp, #4]
 800b858:	2800      	cmp	r0, #0
 800b85a:	d0e4      	beq.n	800b826 <GUI__ManageCacheEx+0xa>
 800b85c:	68c4      	ldr	r4, [r0, #12]
 800b85e:	210d      	movs	r1, #13
 800b860:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b862:	a801      	add	r0, sp, #4
 800b864:	4790      	blx	r2
 800b866:	4604      	mov	r4, r0
 800b868:	2800      	cmp	r0, #0
 800b86a:	d0dc      	beq.n	800b826 <GUI__ManageCacheEx+0xa>
 800b86c:	491f      	ldr	r1, [pc, #124]	; (800b8ec <GUI__ManageCacheEx+0xd0>)
 800b86e:	6808      	ldr	r0, [r1, #0]
 800b870:	b100      	cbz	r0, 800b874 <GUI__ManageCacheEx+0x58>
 800b872:	4780      	blx	r0
 800b874:	9801      	ldr	r0, [sp, #4]
 800b876:	2102      	movs	r1, #2
 800b878:	47a0      	blx	r4
 800b87a:	2000      	movs	r0, #0
 800b87c:	e7d4      	b.n	800b828 <GUI__ManageCacheEx+0xc>
 800b87e:	4d1b      	ldr	r5, [pc, #108]	; (800b8ec <GUI__ManageCacheEx+0xd0>)
 800b880:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800b884:	686e      	ldr	r6, [r5, #4]
 800b886:	b11e      	cbz	r6, 800b890 <GUI__ManageCacheEx+0x74>
 800b888:	3601      	adds	r6, #1
 800b88a:	606e      	str	r6, [r5, #4]
 800b88c:	4608      	mov	r0, r1
 800b88e:	e7cb      	b.n	800b828 <GUI__ManageCacheEx+0xc>
 800b890:	f7fb fcee 	bl	8007270 <GUI_DEVICE__GetpDriver>
 800b894:	9001      	str	r0, [sp, #4]
 800b896:	2800      	cmp	r0, #0
 800b898:	d0c5      	beq.n	800b826 <GUI__ManageCacheEx+0xa>
 800b89a:	68c3      	ldr	r3, [r0, #12]
 800b89c:	210d      	movs	r1, #13
 800b89e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8a0:	a801      	add	r0, sp, #4
 800b8a2:	4790      	blx	r2
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	d0bd      	beq.n	800b826 <GUI__ManageCacheEx+0xa>
 800b8aa:	4621      	mov	r1, r4
 800b8ac:	9801      	ldr	r0, [sp, #4]
 800b8ae:	4798      	blx	r3
 800b8b0:	6869      	ldr	r1, [r5, #4]
 800b8b2:	1c48      	adds	r0, r1, #1
 800b8b4:	6068      	str	r0, [r5, #4]
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	e7b6      	b.n	800b828 <GUI__ManageCacheEx+0xc>
 800b8ba:	f7fb fcd9 	bl	8007270 <GUI_DEVICE__GetpDriver>
 800b8be:	9001      	str	r0, [sp, #4]
 800b8c0:	b180      	cbz	r0, 800b8e4 <GUI__ManageCacheEx+0xc8>
 800b8c2:	68c1      	ldr	r1, [r0, #12]
 800b8c4:	a801      	add	r0, sp, #4
 800b8c6:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 800b8c8:	210d      	movs	r1, #13
 800b8ca:	47b8      	blx	r7
 800b8cc:	4607      	mov	r7, r0
 800b8ce:	b148      	cbz	r0, 800b8e4 <GUI__ManageCacheEx+0xc8>
 800b8d0:	6820      	ldr	r0, [r4, #0]
 800b8d2:	b100      	cbz	r0, 800b8d6 <GUI__ManageCacheEx+0xba>
 800b8d4:	4780      	blx	r0
 800b8d6:	9801      	ldr	r0, [sp, #4]
 800b8d8:	2100      	movs	r1, #0
 800b8da:	47b8      	blx	r7
 800b8dc:	1963      	adds	r3, r4, r5
 800b8de:	2000      	movs	r0, #0
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	e7b0      	b.n	800b846 <GUI__ManageCacheEx+0x2a>
 800b8e4:	6872      	ldr	r2, [r6, #4]
 800b8e6:	2001      	movs	r0, #1
 800b8e8:	e7ad      	b.n	800b846 <GUI__ManageCacheEx+0x2a>
 800b8ea:	bf00      	nop
 800b8ec:	1ffe8a48 	.word	0x1ffe8a48

0800b8f0 <GUI__ManageCache>:
 800b8f0:	f648 0308 	movw	r3, #34824	; 0x8808
 800b8f4:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800b8f8:	4601      	mov	r1, r0
 800b8fa:	6818      	ldr	r0, [r3, #0]
 800b8fc:	7c40      	ldrb	r0, [r0, #17]
 800b8fe:	f7ff bf8d 	b.w	800b81c <GUI__ManageCacheEx>
 800b902:	bf00      	nop

0800b904 <_GetCharCode>:
 800b904:	7800      	ldrb	r0, [r0, #0]
 800b906:	4770      	bx	lr

0800b908 <_GetCharSize>:
 800b908:	2001      	movs	r0, #1
 800b90a:	4770      	bx	lr

0800b90c <_CalcSizeOfChar>:
 800b90c:	2001      	movs	r0, #1
 800b90e:	4770      	bx	lr

0800b910 <_Encode>:
 800b910:	7001      	strb	r1, [r0, #0]
 800b912:	2001      	movs	r0, #1
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop

0800b918 <GUI_UC__GetCharCodeInc>:
 800b918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b91a:	f649 5400 	movw	r4, #40192	; 0x9d00
 800b91e:	f6c1 74fe 	movt	r4, #8190	; 0x1ffe
 800b922:	6805      	ldr	r5, [r0, #0]
 800b924:	6823      	ldr	r3, [r4, #0]
 800b926:	4606      	mov	r6, r0
 800b928:	6819      	ldr	r1, [r3, #0]
 800b92a:	4628      	mov	r0, r5
 800b92c:	4788      	blx	r1
 800b92e:	6822      	ldr	r2, [r4, #0]
 800b930:	4607      	mov	r7, r0
 800b932:	6853      	ldr	r3, [r2, #4]
 800b934:	4628      	mov	r0, r5
 800b936:	4798      	blx	r3
 800b938:	1828      	adds	r0, r5, r0
 800b93a:	6030      	str	r0, [r6, #0]
 800b93c:	4638      	mov	r0, r7
 800b93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b940 <GUI_UC__NumChars2NumBytes>:
 800b940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b944:	4604      	mov	r4, r0
 800b946:	2900      	cmp	r1, #0
 800b948:	d027      	beq.n	800b99a <GUI_UC__NumChars2NumBytes+0x5a>
 800b94a:	4f15      	ldr	r7, [pc, #84]	; (800b9a0 <GUI_UC__NumChars2NumBytes+0x60>)
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	f101 38ff 	add.w	r8, r1, #4294967295
 800b952:	6859      	ldr	r1, [r3, #4]
 800b954:	4788      	blx	r1
 800b956:	4645      	mov	r5, r8
 800b958:	f008 0201 	and.w	r2, r8, #1
 800b95c:	1824      	adds	r4, r4, r0
 800b95e:	4606      	mov	r6, r0
 800b960:	b1c5      	cbz	r5, 800b994 <GUI_UC__NumChars2NumBytes+0x54>
 800b962:	b13a      	cbz	r2, 800b974 <GUI_UC__NumChars2NumBytes+0x34>
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	4620      	mov	r0, r4
 800b968:	6859      	ldr	r1, [r3, #4]
 800b96a:	4788      	blx	r1
 800b96c:	3d01      	subs	r5, #1
 800b96e:	4404      	add	r4, r0
 800b970:	4406      	add	r6, r0
 800b972:	d00f      	beq.n	800b994 <GUI_UC__NumChars2NumBytes+0x54>
 800b974:	683a      	ldr	r2, [r7, #0]
 800b976:	4620      	mov	r0, r4
 800b978:	6853      	ldr	r3, [r2, #4]
 800b97a:	4798      	blx	r3
 800b97c:	4601      	mov	r1, r0
 800b97e:	6838      	ldr	r0, [r7, #0]
 800b980:	1864      	adds	r4, r4, r1
 800b982:	6842      	ldr	r2, [r0, #4]
 800b984:	4620      	mov	r0, r4
 800b986:	1876      	adds	r6, r6, r1
 800b988:	4790      	blx	r2
 800b98a:	3d01      	subs	r5, #1
 800b98c:	3d01      	subs	r5, #1
 800b98e:	4404      	add	r4, r0
 800b990:	4406      	add	r6, r0
 800b992:	d1ef      	bne.n	800b974 <GUI_UC__NumChars2NumBytes+0x34>
 800b994:	4630      	mov	r0, r6
 800b996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b99a:	460e      	mov	r6, r1
 800b99c:	e7fa      	b.n	800b994 <GUI_UC__NumChars2NumBytes+0x54>
 800b99e:	bf00      	nop
 800b9a0:	1ffe9d00 	.word	0x1ffe9d00

0800b9a4 <GUI_SetOrg>:
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a6:	f648 0208 	movw	r2, #34824	; 0x8808
 800b9aa:	f6c1 72fe 	movt	r2, #8190	; 0x1ffe
 800b9ae:	f649 5308 	movw	r3, #40200	; 0x9d08
 800b9b2:	6814      	ldr	r4, [r2, #0]
 800b9b4:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800b9b8:	7c65      	ldrb	r5, [r4, #17]
 800b9ba:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b9be:	f649 44f4 	movw	r4, #40180	; 0x9cf4
 800b9c2:	f649 43e8 	movw	r3, #40168	; 0x9ce8
 800b9c6:	f6c1 74fe 	movt	r4, #8190	; 0x1ffe
 800b9ca:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800b9ce:	68f7      	ldr	r7, [r6, #12]
 800b9d0:	8020      	strh	r0, [r4, #0]
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	460a      	mov	r2, r1
 800b9d6:	8019      	strh	r1, [r3, #0]
 800b9d8:	4630      	mov	r0, r6
 800b9da:	6a3b      	ldr	r3, [r7, #32]
 800b9dc:	4629      	mov	r1, r5
 800b9de:	4798      	blx	r3
 800b9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9e2:	bf00      	nop

0800b9e4 <GUI_SelectLayer>:
 800b9e4:	b510      	push	{r4, lr}
 800b9e6:	4b04      	ldr	r3, [pc, #16]	; (800b9f8 <GUI_SelectLayer+0x14>)
 800b9e8:	6819      	ldr	r1, [r3, #0]
 800b9ea:	7c4c      	ldrb	r4, [r1, #17]
 800b9ec:	b910      	cbnz	r0, 800b9f4 <GUI_SelectLayer+0x10>
 800b9ee:	7448      	strb	r0, [r1, #17]
 800b9f0:	f001 faba 	bl	800cf68 <GUI_SelectLCD>
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	bd10      	pop	{r4, pc}
 800b9f8:	1ffe8808 	.word	0x1ffe8808

0800b9fc <GUI_RectsIntersect>:
 800b9fc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ba00:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	dc14      	bgt.n	800ba32 <GUI_RectsIntersect+0x36>
 800ba08:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800ba0c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	dc0e      	bgt.n	800ba32 <GUI_RectsIntersect+0x36>
 800ba14:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ba18:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	dc08      	bgt.n	800ba32 <GUI_RectsIntersect+0x36>
 800ba20:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800ba24:	f9b1 1000 	ldrsh.w	r1, [r1]
 800ba28:	4291      	cmp	r1, r2
 800ba2a:	bfcc      	ite	gt
 800ba2c:	2000      	movgt	r0, #0
 800ba2e:	2001      	movle	r0, #1
 800ba30:	4770      	bx	lr
 800ba32:	2000      	movs	r0, #0
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop

0800ba38 <GUI_GotoXY>:
 800ba38:	f648 0308 	movw	r3, #34824	; 0x8808
 800ba3c:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	8450      	strh	r0, [r2, #34]	; 0x22
 800ba44:	8491      	strh	r1, [r2, #36]	; 0x24
 800ba46:	2000      	movs	r0, #0
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop

0800ba4c <GUI_GetBkColor>:
 800ba4c:	b508      	push	{r3, lr}
 800ba4e:	f001 f953 	bl	800ccf8 <LCD_GetBkColorIndex>
 800ba52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ba56:	f7ff be49 	b.w	800b6ec <LCD_Index2Color>
 800ba5a:	bf00      	nop

0800ba5c <GUI_GetColor>:
 800ba5c:	b508      	push	{r3, lr}
 800ba5e:	f001 f953 	bl	800cd08 <LCD_GetColorIndex>
 800ba62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ba66:	f7ff be41 	b.w	800b6ec <LCD_Index2Color>
 800ba6a:	bf00      	nop

0800ba6c <_GetIndexMask_0>:
 800ba6c:	b508      	push	{r3, lr}
 800ba6e:	f001 f8cf 	bl	800cc10 <LCD_GetNumColors>
 800ba72:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800ba76:	d014      	beq.n	800baa2 <_GetIndexMask_0+0x36>
 800ba78:	287f      	cmp	r0, #127	; 0x7f
 800ba7a:	d80e      	bhi.n	800ba9a <_GetIndexMask_0+0x2e>
 800ba7c:	283f      	cmp	r0, #63	; 0x3f
 800ba7e:	d812      	bhi.n	800baa6 <_GetIndexMask_0+0x3a>
 800ba80:	281f      	cmp	r0, #31
 800ba82:	d80c      	bhi.n	800ba9e <_GetIndexMask_0+0x32>
 800ba84:	280f      	cmp	r0, #15
 800ba86:	d810      	bhi.n	800baaa <_GetIndexMask_0+0x3e>
 800ba88:	2807      	cmp	r0, #7
 800ba8a:	d812      	bhi.n	800bab2 <_GetIndexMask_0+0x46>
 800ba8c:	2803      	cmp	r0, #3
 800ba8e:	d80e      	bhi.n	800baae <_GetIndexMask_0+0x42>
 800ba90:	2801      	cmp	r0, #1
 800ba92:	bf94      	ite	ls
 800ba94:	2000      	movls	r0, #0
 800ba96:	2001      	movhi	r0, #1
 800ba98:	bd08      	pop	{r3, pc}
 800ba9a:	207f      	movs	r0, #127	; 0x7f
 800ba9c:	bd08      	pop	{r3, pc}
 800ba9e:	201f      	movs	r0, #31
 800baa0:	bd08      	pop	{r3, pc}
 800baa2:	20ff      	movs	r0, #255	; 0xff
 800baa4:	bd08      	pop	{r3, pc}
 800baa6:	203f      	movs	r0, #63	; 0x3f
 800baa8:	bd08      	pop	{r3, pc}
 800baaa:	200f      	movs	r0, #15
 800baac:	bd08      	pop	{r3, pc}
 800baae:	2003      	movs	r0, #3
 800bab0:	bd08      	pop	{r3, pc}
 800bab2:	2007      	movs	r0, #7
 800bab4:	bd08      	pop	{r3, pc}
 800bab6:	bf00      	nop

0800bab8 <_Index2Color_0>:
 800bab8:	b538      	push	{r3, r4, r5, lr}
 800baba:	4604      	mov	r4, r0
 800babc:	f001 f8a8 	bl	800cc10 <LCD_GetNumColors>
 800bac0:	4605      	mov	r5, r0
 800bac2:	f001 f8c3 	bl	800cc4c <LCD_GetPalette>
 800bac6:	42a5      	cmp	r5, r4
 800bac8:	d903      	bls.n	800bad2 <_Index2Color_0+0x1a>
 800baca:	b118      	cbz	r0, 800bad4 <_Index2Color_0+0x1c>
 800bacc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800bad0:	bd38      	pop	{r3, r4, r5, pc}
 800bad2:	2000      	movs	r0, #0
 800bad4:	bd38      	pop	{r3, r4, r5, pc}
 800bad6:	bf00      	nop

0800bad8 <_Color2Index_0>:
 800bad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800badc:	4604      	mov	r4, r0
 800bade:	f001 f897 	bl	800cc10 <LCD_GetNumColors>
 800bae2:	4606      	mov	r6, r0
 800bae4:	f001 f8b2 	bl	800cc4c <LCD_GetPalette>
 800bae8:	2800      	cmp	r0, #0
 800baea:	d061      	beq.n	800bbb0 <_Color2Index_0+0xd8>
 800baec:	6803      	ldr	r3, [r0, #0]
 800baee:	1e71      	subs	r1, r6, #1
 800baf0:	4602      	mov	r2, r0
 800baf2:	f1a0 0c04 	sub.w	ip, r0, #4
 800baf6:	2000      	movs	r0, #0
 800baf8:	42a3      	cmp	r3, r4
 800bafa:	f001 0101 	and.w	r1, r1, #1
 800bafe:	d05b      	beq.n	800bbb8 <_Color2Index_0+0xe0>
 800bb00:	2301      	movs	r3, #1
 800bb02:	429e      	cmp	r6, r3
 800bb04:	dd17      	ble.n	800bb36 <_Color2Index_0+0x5e>
 800bb06:	b139      	cbz	r1, 800bb18 <_Color2Index_0+0x40>
 800bb08:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800bb0c:	42a1      	cmp	r1, r4
 800bb0e:	4618      	mov	r0, r3
 800bb10:	d04e      	beq.n	800bbb0 <_Color2Index_0+0xd8>
 800bb12:	2302      	movs	r3, #2
 800bb14:	429e      	cmp	r6, r3
 800bb16:	dd0e      	ble.n	800bb36 <_Color2Index_0+0x5e>
 800bb18:	6857      	ldr	r7, [r2, #4]
 800bb1a:	1c59      	adds	r1, r3, #1
 800bb1c:	1d15      	adds	r5, r2, #4
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3302      	adds	r3, #2
 800bb22:	42a7      	cmp	r7, r4
 800bb24:	f102 0208 	add.w	r2, r2, #8
 800bb28:	d042      	beq.n	800bbb0 <_Color2Index_0+0xd8>
 800bb2a:	686d      	ldr	r5, [r5, #4]
 800bb2c:	42a5      	cmp	r5, r4
 800bb2e:	4608      	mov	r0, r1
 800bb30:	d040      	beq.n	800bbb4 <_Color2Index_0+0xdc>
 800bb32:	429e      	cmp	r6, r3
 800bb34:	dcf0      	bgt.n	800bb18 <_Color2Index_0+0x40>
 800bb36:	4667      	mov	r7, ip
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800bb3e:	f001 fa1b 	bl	800cf78 <GUI_CalcColorDist>
 800bb42:	1e75      	subs	r5, r6, #1
 800bb44:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 800bb48:	f005 0901 	and.w	r9, r5, #1
 800bb4c:	2501      	movs	r5, #1
 800bb4e:	4580      	cmp	r8, r0
 800bb50:	bf28      	it	cs
 800bb52:	4680      	movcs	r8, r0
 800bb54:	42ae      	cmp	r6, r5
 800bb56:	f04f 0a00 	mov.w	sl, #0
 800bb5a:	dd28      	ble.n	800bbae <_Color2Index_0+0xd6>
 800bb5c:	f1b9 0f00 	cmp.w	r9, #0
 800bb60:	d00b      	beq.n	800bb7a <_Color2Index_0+0xa2>
 800bb62:	4620      	mov	r0, r4
 800bb64:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800bb68:	f001 fa06 	bl	800cf78 <GUI_CalcColorDist>
 800bb6c:	4580      	cmp	r8, r0
 800bb6e:	bf84      	itt	hi
 800bb70:	4680      	movhi	r8, r0
 800bb72:	46aa      	movhi	sl, r5
 800bb74:	3501      	adds	r5, #1
 800bb76:	42ae      	cmp	r6, r5
 800bb78:	dd19      	ble.n	800bbae <_Color2Index_0+0xd6>
 800bb7a:	6879      	ldr	r1, [r7, #4]
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f001 f9fb 	bl	800cf78 <GUI_CalcColorDist>
 800bb82:	1d39      	adds	r1, r7, #4
 800bb84:	4602      	mov	r2, r0
 800bb86:	4590      	cmp	r8, r2
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f101 0704 	add.w	r7, r1, #4
 800bb8e:	6849      	ldr	r1, [r1, #4]
 800bb90:	bf84      	itt	hi
 800bb92:	4690      	movhi	r8, r2
 800bb94:	46aa      	movhi	sl, r5
 800bb96:	f001 f9ef 	bl	800cf78 <GUI_CalcColorDist>
 800bb9a:	4580      	cmp	r8, r0
 800bb9c:	f105 0901 	add.w	r9, r5, #1
 800bba0:	d901      	bls.n	800bba6 <_Color2Index_0+0xce>
 800bba2:	4680      	mov	r8, r0
 800bba4:	46ca      	mov	sl, r9
 800bba6:	f109 0501 	add.w	r5, r9, #1
 800bbaa:	42ae      	cmp	r6, r5
 800bbac:	dce5      	bgt.n	800bb7a <_Color2Index_0+0xa2>
 800bbae:	4650      	mov	r0, sl
 800bbb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bbbc <GUI_MEMDEV__WriteToActiveOpaque>:
 800bbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc0:	b0a1      	sub	sp, #132	; 0x84
 800bbc2:	4607      	mov	r7, r0
 800bbc4:	9112      	str	r1, [sp, #72]	; 0x48
 800bbc6:	920e      	str	r2, [sp, #56]	; 0x38
 800bbc8:	f7fc ff68 	bl	8008a9c <GUI_ALLOC_LockH>
 800bbcc:	ab20      	add	r3, sp, #128	; 0x80
 800bbce:	6944      	ldr	r4, [r0, #20]
 800bbd0:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7fc ff73 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800bbda:	4638      	mov	r0, r7
 800bbdc:	f000 ffca 	bl	800cb74 <GUI_MEMDEV_GetBitsPerPixel>
 800bbe0:	2808      	cmp	r0, #8
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	dd02      	ble.n	800bbec <GUI_MEMDEV__WriteToActiveOpaque+0x30>
 800bbe6:	2c00      	cmp	r4, #0
 800bbe8:	f000 80ad 	beq.w	800bd46 <GUI_MEMDEV__WriteToActiveOpaque+0x18a>
 800bbec:	f04f 0800 	mov.w	r8, #0
 800bbf0:	f04f 0901 	mov.w	r9, #1
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
 800bbfa:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 800bbfe:	f7fc ff4d 	bl	8008a9c <GUI_ALLOC_LockH>
 800bc02:	ad20      	add	r5, sp, #128	; 0x80
 800bc04:	4e84      	ldr	r6, [pc, #528]	; (800be18 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>)
 800bc06:	f845 0d10 	str.w	r0, [r5, #-16]!
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	6803      	ldr	r3, [r0, #0]
 800bc0e:	6830      	ldr	r0, [r6, #0]
 800bc10:	6919      	ldr	r1, [r3, #16]
 800bc12:	6922      	ldr	r2, [r4, #16]
 800bc14:	68e3      	ldr	r3, [r4, #12]
 800bc16:	f9b4 a008 	ldrsh.w	sl, [r4, #8]
 800bc1a:	f8d4 b014 	ldr.w	fp, [r4, #20]
 800bc1e:	f9b4 400a 	ldrsh.w	r4, [r4, #10]
 800bc22:	7c40      	ldrb	r0, [r0, #17]
 800bc24:	920c      	str	r2, [sp, #48]	; 0x30
 800bc26:	9316      	str	r3, [sp, #88]	; 0x58
 800bc28:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 800bc2c:	9415      	str	r4, [sp, #84]	; 0x54
 800bc2e:	684c      	ldr	r4, [r1, #4]
 800bc30:	f001 f800 	bl	800cc34 <GUI_GetBitsPerPixelEx>
 800bc34:	900a      	str	r0, [sp, #40]	; 0x28
 800bc36:	6830      	ldr	r0, [r6, #0]
 800bc38:	7c40      	ldrb	r0, [r0, #17]
 800bc3a:	f001 f817 	bl	800cc6c <GUI_GetpfIndex2ColorEx>
 800bc3e:	4682      	mov	sl, r0
 800bc40:	4628      	mov	r0, r5
 800bc42:	f7fc ff3d 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800bc46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc48:	2d08      	cmp	r5, #8
 800bc4a:	d918      	bls.n	800bc7e <GUI_MEMDEV__WriteToActiveOpaque+0xc2>
 800bc4c:	2d10      	cmp	r5, #16
 800bc4e:	bf8c      	ite	hi
 800bc50:	2504      	movhi	r5, #4
 800bc52:	2502      	movls	r5, #2
 800bc54:	9511      	str	r5, [sp, #68]	; 0x44
 800bc56:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800bc5a:	4554      	cmp	r4, sl
 800bc5c:	d017      	beq.n	800bc8e <GUI_MEMDEV__WriteToActiveOpaque+0xd2>
 800bc5e:	6835      	ldr	r5, [r6, #0]
 800bc60:	7c68      	ldrb	r0, [r5, #17]
 800bc62:	f001 f80d 	bl	800cc80 <GUI_GetpfColor2IndexEx>
 800bc66:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800bc68:	4606      	mov	r6, r0
 800bc6a:	00a8      	lsls	r0, r5, #2
 800bc6c:	f7fc ff12 	bl	8008a94 <GUI_ALLOC_AllocNoInit>
 800bc70:	9013      	str	r0, [sp, #76]	; 0x4c
 800bc72:	2800      	cmp	r0, #0
 800bc74:	f040 80d4 	bne.w	800be20 <GUI_MEMDEV__WriteToActiveOpaque+0x264>
 800bc78:	b021      	add	sp, #132	; 0x84
 800bc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7e:	2d01      	cmp	r5, #1
 800bc80:	f040 8168 	bne.w	800bf54 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 800bc84:	9511      	str	r5, [sp, #68]	; 0x44
 800bc86:	4554      	cmp	r4, sl
 800bc88:	ad1e      	add	r5, sp, #120	; 0x78
 800bc8a:	950d      	str	r5, [sp, #52]	; 0x34
 800bc8c:	d1e7      	bne.n	800bc5e <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 800bc8e:	4638      	mov	r0, r7
 800bc90:	f000 ff60 	bl	800cb54 <GUI_MEMDEV_GetDataPtr>
 800bc94:	4680      	mov	r8, r0
 800bc96:	f1bb 0f00 	cmp.w	fp, #0
 800bc9a:	f000 8280 	beq.w	800c19e <GUI_MEMDEV__WriteToActiveOpaque+0x5e2>
 800bc9e:	4658      	mov	r0, fp
 800bca0:	f7fc fefc 	bl	8008a9c <GUI_ALLOC_LockH>
 800bca4:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800bca6:	901d      	str	r0, [sp, #116]	; 0x74
 800bca8:	2e00      	cmp	r6, #0
 800bcaa:	dd48      	ble.n	800bd3e <GUI_MEMDEV__WriteToActiveOpaque+0x182>
 800bcac:	2600      	movs	r6, #0
 800bcae:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 800bcb2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800bcb6:	46b2      	mov	sl, r6
 800bcb8:	2501      	movs	r5, #1
 800bcba:	981d      	ldr	r0, [sp, #116]	; 0x74
 800bcbc:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 800bcc0:	6887      	ldr	r7, [r0, #8]
 800bcc2:	a91a      	add	r1, sp, #104	; 0x68
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	4632      	mov	r2, r6
 800bcc8:	4798      	blx	r3
 800bcca:	9914      	ldr	r1, [sp, #80]	; 0x50
 800bccc:	4281      	cmp	r1, r0
 800bcce:	4604      	mov	r4, r0
 800bcd0:	f000 8276 	beq.w	800c1c0 <GUI_MEMDEV__WriteToActiveOpaque+0x604>
 800bcd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcd6:	2a01      	cmp	r2, #1
 800bcd8:	f000 829a 	beq.w	800c210 <GUI_MEMDEV__WriteToActiveOpaque+0x654>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d029      	beq.n	800bd34 <GUI_MEMDEV__WriteToActiveOpaque+0x178>
 800bce0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 800bce4:	4627      	mov	r7, r4
 800bce6:	eb0e 0006 	add.w	r0, lr, r6
 800bcea:	464c      	mov	r4, r9
 800bcec:	900a      	str	r0, [sp, #40]	; 0x28
 800bcee:	46b9      	mov	r9, r7
 800bcf0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800bcf2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bcf4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bcf6:	9702      	str	r7, [sp, #8]
 800bcf8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bcfa:	9500      	str	r5, [sp, #0]
 800bcfc:	fb03 8c01 	mla	ip, r3, r1, r8
 800bd00:	464a      	mov	r2, r9
 800bd02:	eb0b 0003 	add.w	r0, fp, r3
 800bd06:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bd08:	f8cd c010 	str.w	ip, [sp, #16]
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	9705      	str	r7, [sp, #20]
 800bd10:	9501      	str	r5, [sp, #4]
 800bd12:	9403      	str	r4, [sp, #12]
 800bd14:	f7ff f970 	bl	800aff8 <LCD_DrawBitmap>
 800bd18:	981d      	ldr	r0, [sp, #116]	; 0x74
 800bd1a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bd1c:	6883      	ldr	r3, [r0, #8]
 800bd1e:	eb02 0109 	add.w	r1, r2, r9
 800bd22:	911a      	str	r1, [sp, #104]	; 0x68
 800bd24:	695f      	ldr	r7, [r3, #20]
 800bd26:	a91a      	add	r1, sp, #104	; 0x68
 800bd28:	4632      	mov	r2, r6
 800bd2a:	47b8      	blx	r7
 800bd2c:	4681      	mov	r9, r0
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d1de      	bne.n	800bcf0 <GUI_MEMDEV__WriteToActiveOpaque+0x134>
 800bd32:	46a1      	mov	r9, r4
 800bd34:	44c8      	add	r8, r9
 800bd36:	3601      	adds	r6, #1
 800bd38:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800bd3a:	42b7      	cmp	r7, r6
 800bd3c:	dcbd      	bgt.n	800bcba <GUI_MEMDEV__WriteToActiveOpaque+0xfe>
 800bd3e:	a81d      	add	r0, sp, #116	; 0x74
 800bd40:	f7fc febe 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800bd44:	e798      	b.n	800bc78 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800bd46:	4638      	mov	r0, r7
 800bd48:	f7fc fea8 	bl	8008a9c <GUI_ALLOC_LockH>
 800bd4c:	f10d 0b80 	add.w	fp, sp, #128	; 0x80
 800bd50:	f9b0 a008 	ldrsh.w	sl, [r0, #8]
 800bd54:	f84b 0d14 	str.w	r0, [fp, #-20]!
 800bd58:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 800bd5c:	6802      	ldr	r2, [r0, #0]
 800bd5e:	68c1      	ldr	r1, [r0, #12]
 800bd60:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800bd64:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800bd68:	4605      	mov	r5, r0
 800bd6a:	4658      	mov	r0, fp
 800bd6c:	910d      	str	r1, [sp, #52]	; 0x34
 800bd6e:	f7fc fea7 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800bd72:	4829      	ldr	r0, [pc, #164]	; (800be18 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>)
 800bd74:	4a29      	ldr	r2, [pc, #164]	; (800be1c <GUI_MEMDEV__WriteToActiveOpaque+0x260>)
 800bd76:	6804      	ldr	r4, [r0, #0]
 800bd78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd7c:	7c60      	ldrb	r0, [r4, #17]
 800bd7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd80:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 800bd84:	690c      	ldr	r4, [r1, #16]
 800bd86:	6823      	ldr	r3, [r4, #0]
 800bd88:	930c      	str	r3, [sp, #48]	; 0x30
 800bd8a:	f000 ff53 	bl	800cc34 <GUI_GetBitsPerPixelEx>
 800bd8e:	2808      	cmp	r0, #8
 800bd90:	f240 80db 	bls.w	800bf4a <GUI_MEMDEV__WriteToActiveOpaque+0x38e>
 800bd94:	2810      	cmp	r0, #16
 800bd96:	bf8c      	ite	hi
 800bd98:	2020      	movhi	r0, #32
 800bd9a:	2010      	movls	r0, #16
 800bd9c:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd9e:	bf8c      	ite	hi
 800bda0:	f04f 0904 	movhi.w	r9, #4
 800bda4:	f04f 0902 	movls.w	r9, #2
 800bda8:	45a0      	cmp	r8, r4
 800bdaa:	f000 82c1 	beq.w	800c330 <GUI_MEMDEV__WriteToActiveOpaque+0x774>
 800bdae:	2e20      	cmp	r6, #32
 800bdb0:	f000 8261 	beq.w	800c276 <GUI_MEMDEV__WriteToActiveOpaque+0x6ba>
 800bdb4:	2e10      	cmp	r6, #16
 800bdb6:	f47f af5f 	bne.w	800bc78 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800bdba:	fb0a f009 	mul.w	r0, sl, r9
 800bdbe:	f7fc fe69 	bl	8008a94 <GUI_ALLOC_AllocNoInit>
 800bdc2:	9011      	str	r0, [sp, #68]	; 0x44
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	f43f af57 	beq.w	800bc78 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800bdca:	f7fc fe67 	bl	8008a9c <GUI_ALLOC_LockH>
 800bdce:	901d      	str	r0, [sp, #116]	; 0x74
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	f7fc fe63 	bl	8008a9c <GUI_ALLOC_LockH>
 800bdd6:	901b      	str	r0, [sp, #108]	; 0x6c
 800bdd8:	6921      	ldr	r1, [r4, #16]
 800bdda:	f100 0518 	add.w	r5, r0, #24
 800bdde:	2900      	cmp	r1, #0
 800bde0:	f000 82b8 	beq.w	800c354 <GUI_MEMDEV__WriteToActiveOpaque+0x798>
 800bde4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	f000 82b3 	beq.w	800c354 <GUI_MEMDEV__WriteToActiveOpaque+0x798>
 800bdee:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800bdf2:	0088      	lsls	r0, r1, #2
 800bdf4:	f7fc fe4e 	bl	8008a94 <GUI_ALLOC_AllocNoInit>
 800bdf8:	900c      	str	r0, [sp, #48]	; 0x30
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	f040 85a3 	bne.w	800c946 <GUI_MEMDEV__WriteToActiveOpaque+0xd8a>
 800be00:	4607      	mov	r7, r0
 800be02:	901c      	str	r0, [sp, #112]	; 0x70
 800be04:	4658      	mov	r0, fp
 800be06:	f7fc fe5b 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800be0a:	a81d      	add	r0, sp, #116	; 0x74
 800be0c:	f7fc fe58 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800be10:	9811      	ldr	r0, [sp, #68]	; 0x44
 800be12:	f7fc fe89 	bl	8008b28 <GUI_ALLOC_Free>
 800be16:	e72f      	b.n	800bc78 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800be18:	1ffe8808 	.word	0x1ffe8808
 800be1c:	1ffe9d08 	.word	0x1ffe9d08
 800be20:	4638      	mov	r0, r7
 800be22:	f000 fe97 	bl	800cb54 <GUI_MEMDEV_GetDataPtr>
 800be26:	900b      	str	r0, [sp, #44]	; 0x2c
 800be28:	f1bb 0f00 	cmp.w	fp, #0
 800be2c:	f000 80df 	beq.w	800bfee <GUI_MEMDEV__WriteToActiveOpaque+0x432>
 800be30:	4658      	mov	r0, fp
 800be32:	f7fc fe33 	bl	8008a9c <GUI_ALLOC_LockH>
 800be36:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800be38:	901d      	str	r0, [sp, #116]	; 0x74
 800be3a:	2f00      	cmp	r7, #0
 800be3c:	f340 80d3 	ble.w	800bfe6 <GUI_MEMDEV__WriteToActiveOpaque+0x42a>
 800be40:	2200      	movs	r2, #0
 800be42:	920f      	str	r2, [sp, #60]	; 0x3c
 800be44:	981d      	ldr	r0, [sp, #116]	; 0x74
 800be46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be48:	6885      	ldr	r5, [r0, #8]
 800be4a:	2700      	movs	r7, #0
 800be4c:	696b      	ldr	r3, [r5, #20]
 800be4e:	971a      	str	r7, [sp, #104]	; 0x68
 800be50:	a91a      	add	r1, sp, #104	; 0x68
 800be52:	4798      	blx	r3
 800be54:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 800be58:	4586      	cmp	lr, r0
 800be5a:	4605      	mov	r5, r0
 800be5c:	f000 8113 	beq.w	800c086 <GUI_MEMDEV__WriteToActiveOpaque+0x4ca>
 800be60:	990c      	ldr	r1, [sp, #48]	; 0x30
 800be62:	2901      	cmp	r1, #1
 800be64:	d07b      	beq.n	800bf5e <GUI_MEMDEV__WriteToActiveOpaque+0x3a2>
 800be66:	2d00      	cmp	r5, #0
 800be68:	f000 80ae 	beq.w	800bfc8 <GUI_MEMDEV__WriteToActiveOpaque+0x40c>
 800be6c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800be6e:	f7fc fe15 	bl	8008a9c <GUI_ALLOC_LockH>
 800be72:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800be74:	901b      	str	r0, [sp, #108]	; 0x6c
 800be76:	4680      	mov	r8, r0
 800be78:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800be7a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800be7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be7e:	fb02 f307 	mul.w	r3, r2, r7
 800be82:	2808      	cmp	r0, #8
 800be84:	eb01 0203 	add.w	r2, r1, r3
 800be88:	f240 80c6 	bls.w	800c018 <GUI_MEMDEV__WriteToActiveOpaque+0x45c>
 800be8c:	5ac8      	ldrh	r0, [r1, r3]
 800be8e:	9209      	str	r2, [sp, #36]	; 0x24
 800be90:	47a0      	blx	r4
 800be92:	47b0      	blx	r6
 800be94:	4647      	mov	r7, r8
 800be96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be98:	f847 0b04 	str.w	r0, [r7], #4
 800be9c:	1e6b      	subs	r3, r5, #1
 800be9e:	469a      	mov	sl, r3
 800bea0:	f003 0101 	and.w	r1, r3, #1
 800bea4:	f102 0b02 	add.w	fp, r2, #2
 800bea8:	b32b      	cbz	r3, 800bef6 <GUI_MEMDEV__WriteToActiveOpaque+0x33a>
 800beaa:	b151      	cbz	r1, 800bec2 <GUI_MEMDEV__WriteToActiveOpaque+0x306>
 800beac:	8850      	ldrh	r0, [r2, #2]
 800beae:	47a0      	blx	r4
 800beb0:	47b0      	blx	r6
 800beb2:	3704      	adds	r7, #4
 800beb4:	f1ba 0a01 	subs.w	sl, sl, #1
 800beb8:	f10b 0b02 	add.w	fp, fp, #2
 800bebc:	f8c8 0004 	str.w	r0, [r8, #4]
 800bec0:	d019      	beq.n	800bef6 <GUI_MEMDEV__WriteToActiveOpaque+0x33a>
 800bec2:	9510      	str	r5, [sp, #64]	; 0x40
 800bec4:	4655      	mov	r5, sl
 800bec6:	46ba      	mov	sl, r7
 800bec8:	465f      	mov	r7, fp
 800beca:	46d1      	mov	r9, sl
 800becc:	f837 0b02 	ldrh.w	r0, [r7], #2
 800bed0:	47a0      	blx	r4
 800bed2:	47b0      	blx	r6
 800bed4:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 800bed8:	f849 0b04 	str.w	r0, [r9], #4
 800bedc:	4618      	mov	r0, r3
 800bede:	47a0      	blx	r4
 800bee0:	47b0      	blx	r6
 800bee2:	3d01      	subs	r5, #1
 800bee4:	3d01      	subs	r5, #1
 800bee6:	f8ca 0004 	str.w	r0, [sl, #4]
 800beea:	f107 0b02 	add.w	fp, r7, #2
 800beee:	f109 0a04 	add.w	sl, r9, #4
 800bef2:	d1e9      	bne.n	800bec8 <GUI_MEMDEV__WriteToActiveOpaque+0x30c>
 800bef4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bef6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800bef8:	2f1f      	cmp	r7, #31
 800befa:	d805      	bhi.n	800bf08 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800befc:	463a      	mov	r2, r7
 800befe:	4640      	mov	r0, r8
 800bf00:	4629      	mov	r1, r5
 800bf02:	f000 ff09 	bl	800cd18 <GUI__CompactPixelIndices>
 800bf06:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800bf08:	2001      	movs	r0, #1
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	9000      	str	r0, [sp, #0]
 800bf0e:	9001      	str	r0, [sp, #4]
 800bf10:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bf12:	9702      	str	r7, [sp, #8]
 800bf14:	2700      	movs	r7, #0
 800bf16:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 800bf1a:	9703      	str	r7, [sp, #12]
 800bf1c:	9004      	str	r0, [sp, #16]
 800bf1e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bf20:	981a      	ldr	r0, [sp, #104]	; 0x68
 800bf22:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bf24:	9705      	str	r7, [sp, #20]
 800bf26:	462a      	mov	r2, r5
 800bf28:	4460      	add	r0, ip
 800bf2a:	f7ff f865 	bl	800aff8 <LCD_DrawBitmap>
 800bf2e:	a81b      	add	r0, sp, #108	; 0x6c
 800bf30:	f7fc fdc6 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800bf34:	981d      	ldr	r0, [sp, #116]	; 0x74
 800bf36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bf38:	6881      	ldr	r1, [r0, #8]
 800bf3a:	1953      	adds	r3, r2, r5
 800bf3c:	931a      	str	r3, [sp, #104]	; 0x68
 800bf3e:	694d      	ldr	r5, [r1, #20]
 800bf40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf42:	a91a      	add	r1, sp, #104	; 0x68
 800bf44:	47a8      	blx	r5
 800bf46:	4605      	mov	r5, r0
 800bf48:	e78d      	b.n	800be66 <GUI_MEMDEV__WriteToActiveOpaque+0x2aa>
 800bf4a:	2208      	movs	r2, #8
 800bf4c:	920b      	str	r2, [sp, #44]	; 0x2c
 800bf4e:	f04f 0901 	mov.w	r9, #1
 800bf52:	e729      	b.n	800bda8 <GUI_MEMDEV__WriteToActiveOpaque+0x1ec>
 800bf54:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 800bf58:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800bf5c:	e67d      	b.n	800bc5a <GUI_MEMDEV__WriteToActiveOpaque+0x9e>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	d032      	beq.n	800bfc8 <GUI_MEMDEV__WriteToActiveOpaque+0x40c>
 800bf62:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bf64:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800bf68:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800bf6c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800bf70:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800bf74:	9410      	str	r4, [sp, #64]	; 0x40
 800bf76:	9617      	str	r6, [sp, #92]	; 0x5c
 800bf78:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800bf7a:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800bf7c:	9705      	str	r7, [sp, #20]
 800bf7e:	2301      	movs	r3, #1
 800bf80:	2c00      	cmp	r4, #0
 800bf82:	46a6      	mov	lr, r4
 800bf84:	bfb8      	it	lt
 800bf86:	f104 0e07 	addlt.w	lr, r4, #7
 800bf8a:	f004 0c07 	and.w	ip, r4, #7
 800bf8e:	eb0b 0004 	add.w	r0, fp, r4
 800bf92:	eb09 04ee 	add.w	r4, r9, lr, asr #3
 800bf96:	462a      	mov	r2, r5
 800bf98:	4651      	mov	r1, sl
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	9301      	str	r3, [sp, #4]
 800bf9e:	9302      	str	r3, [sp, #8]
 800bfa0:	f8cd c018 	str.w	ip, [sp, #24]
 800bfa4:	9603      	str	r6, [sp, #12]
 800bfa6:	9404      	str	r4, [sp, #16]
 800bfa8:	f7fe fdac 	bl	800ab04 <LCD__DrawBitmap_1bpp>
 800bfac:	981d      	ldr	r0, [sp, #116]	; 0x74
 800bfae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bfb0:	6881      	ldr	r1, [r0, #8]
 800bfb2:	1953      	adds	r3, r2, r5
 800bfb4:	931a      	str	r3, [sp, #104]	; 0x68
 800bfb6:	694d      	ldr	r5, [r1, #20]
 800bfb8:	4642      	mov	r2, r8
 800bfba:	a91a      	add	r1, sp, #104	; 0x68
 800bfbc:	47a8      	blx	r5
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	d1d9      	bne.n	800bf78 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 800bfc4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800bfc6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bfc8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bfca:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800bfcc:	19c1      	adds	r1, r0, r7
 800bfce:	910b      	str	r1, [sp, #44]	; 0x2c
 800bfd0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bfd2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800bfd4:	1c6f      	adds	r7, r5, #1
 800bfd6:	970f      	str	r7, [sp, #60]	; 0x3c
 800bfd8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bfda:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800bfdc:	1c41      	adds	r1, r0, #1
 800bfde:	42af      	cmp	r7, r5
 800bfe0:	910e      	str	r1, [sp, #56]	; 0x38
 800bfe2:	f73f af2f 	bgt.w	800be44 <GUI_MEMDEV__WriteToActiveOpaque+0x288>
 800bfe6:	a81d      	add	r0, sp, #116	; 0x74
 800bfe8:	f7fc fd6a 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800bfec:	e010      	b.n	800c010 <GUI_MEMDEV__WriteToActiveOpaque+0x454>
 800bfee:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bff0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bff2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bff4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bff6:	9102      	str	r1, [sp, #8]
 800bff8:	2301      	movs	r3, #1
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	9003      	str	r0, [sp, #12]
 800c000:	9604      	str	r6, [sp, #16]
 800c002:	9505      	str	r5, [sp, #20]
 800c004:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c006:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c008:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c00a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c00c:	f7fe fff4 	bl	800aff8 <LCD_DrawBitmap>
 800c010:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c012:	f7fc fd89 	bl	8008b28 <GUI_ALLOC_Free>
 800c016:	e62f      	b.n	800bc78 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800c018:	5cc8      	ldrb	r0, [r1, r3]
 800c01a:	9209      	str	r2, [sp, #36]	; 0x24
 800c01c:	47a0      	blx	r4
 800c01e:	47b0      	blx	r6
 800c020:	4647      	mov	r7, r8
 800c022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c024:	f847 0b04 	str.w	r0, [r7], #4
 800c028:	1e6b      	subs	r3, r5, #1
 800c02a:	469b      	mov	fp, r3
 800c02c:	f003 0101 	and.w	r1, r3, #1
 800c030:	f102 0a01 	add.w	sl, r2, #1
 800c034:	2b00      	cmp	r3, #0
 800c036:	f43f af5e 	beq.w	800bef6 <GUI_MEMDEV__WriteToActiveOpaque+0x33a>
 800c03a:	b159      	cbz	r1, 800c054 <GUI_MEMDEV__WriteToActiveOpaque+0x498>
 800c03c:	7850      	ldrb	r0, [r2, #1]
 800c03e:	47a0      	blx	r4
 800c040:	47b0      	blx	r6
 800c042:	3704      	adds	r7, #4
 800c044:	f1bb 0b01 	subs.w	fp, fp, #1
 800c048:	f10a 0a01 	add.w	sl, sl, #1
 800c04c:	f8c8 0004 	str.w	r0, [r8, #4]
 800c050:	f43f af51 	beq.w	800bef6 <GUI_MEMDEV__WriteToActiveOpaque+0x33a>
 800c054:	9510      	str	r5, [sp, #64]	; 0x40
 800c056:	465d      	mov	r5, fp
 800c058:	46bb      	mov	fp, r7
 800c05a:	4657      	mov	r7, sl
 800c05c:	46d9      	mov	r9, fp
 800c05e:	f817 0b01 	ldrb.w	r0, [r7], #1
 800c062:	47a0      	blx	r4
 800c064:	47b0      	blx	r6
 800c066:	f849 0b04 	str.w	r0, [r9], #4
 800c06a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800c06e:	47a0      	blx	r4
 800c070:	47b0      	blx	r6
 800c072:	3d01      	subs	r5, #1
 800c074:	3d01      	subs	r5, #1
 800c076:	f8cb 0004 	str.w	r0, [fp, #4]
 800c07a:	f107 0a01 	add.w	sl, r7, #1
 800c07e:	f109 0b04 	add.w	fp, r9, #4
 800c082:	d1ea      	bne.n	800c05a <GUI_MEMDEV__WriteToActiveOpaque+0x49e>
 800c084:	e736      	b.n	800bef4 <GUI_MEMDEV__WriteToActiveOpaque+0x338>
 800c086:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c088:	f7fc fd08 	bl	8008a9c <GUI_ALLOC_LockH>
 800c08c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c08e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c090:	901b      	str	r0, [sp, #108]	; 0x6c
 800c092:	2a08      	cmp	r2, #8
 800c094:	4683      	mov	fp, r0
 800c096:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800c098:	f103 38ff 	add.w	r8, r3, #4294967295
 800c09c:	d94f      	bls.n	800c13e <GUI_MEMDEV__WriteToActiveOpaque+0x582>
 800c09e:	f837 0b02 	ldrh.w	r0, [r7], #2
 800c0a2:	47a0      	blx	r4
 800c0a4:	47b0      	blx	r6
 800c0a6:	465d      	mov	r5, fp
 800c0a8:	4642      	mov	r2, r8
 800c0aa:	f008 0101 	and.w	r1, r8, #1
 800c0ae:	f845 0b04 	str.w	r0, [r5], #4
 800c0b2:	3702      	adds	r7, #2
 800c0b4:	b312      	cbz	r2, 800c0fc <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 800c0b6:	b161      	cbz	r1, 800c0d2 <GUI_MEMDEV__WriteToActiveOpaque+0x516>
 800c0b8:	f837 0c02 	ldrh.w	r0, [r7, #-2]
 800c0bc:	f8cd 8020 	str.w	r8, [sp, #32]
 800c0c0:	47a0      	blx	r4
 800c0c2:	47b0      	blx	r6
 800c0c4:	f8cb 0004 	str.w	r0, [fp, #4]
 800c0c8:	9808      	ldr	r0, [sp, #32]
 800c0ca:	3504      	adds	r5, #4
 800c0cc:	3702      	adds	r7, #2
 800c0ce:	1e42      	subs	r2, r0, #1
 800c0d0:	d014      	beq.n	800c0fc <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 800c0d2:	4691      	mov	r9, r2
 800c0d4:	f837 0c02 	ldrh.w	r0, [r7, #-2]
 800c0d8:	47a0      	blx	r4
 800c0da:	47b0      	blx	r6
 800c0dc:	46a8      	mov	r8, r5
 800c0de:	f848 0b04 	str.w	r0, [r8], #4
 800c0e2:	f837 0b02 	ldrh.w	r0, [r7], #2
 800c0e6:	47a0      	blx	r4
 800c0e8:	47b0      	blx	r6
 800c0ea:	f109 33ff 	add.w	r3, r9, #4294967295
 800c0ee:	3702      	adds	r7, #2
 800c0f0:	f1b3 0901 	subs.w	r9, r3, #1
 800c0f4:	6068      	str	r0, [r5, #4]
 800c0f6:	f108 0504 	add.w	r5, r8, #4
 800c0fa:	d1eb      	bne.n	800c0d4 <GUI_MEMDEV__WriteToActiveOpaque+0x518>
 800c0fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c0fe:	2d1f      	cmp	r5, #31
 800c100:	d804      	bhi.n	800c10c <GUI_MEMDEV__WriteToActiveOpaque+0x550>
 800c102:	4658      	mov	r0, fp
 800c104:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c106:	462a      	mov	r2, r5
 800c108:	f000 fe06 	bl	800cd18 <GUI__CompactPixelIndices>
 800c10c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c10e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c110:	9002      	str	r0, [sp, #8]
 800c112:	2701      	movs	r7, #1
 800c114:	463b      	mov	r3, r7
 800c116:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c118:	9700      	str	r7, [sp, #0]
 800c11a:	9701      	str	r7, [sp, #4]
 800c11c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800c11e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c120:	9005      	str	r0, [sp, #20]
 800c122:	2500      	movs	r5, #0
 800c124:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c126:	9503      	str	r5, [sp, #12]
 800c128:	9704      	str	r7, [sp, #16]
 800c12a:	f7fe ff65 	bl	800aff8 <LCD_DrawBitmap>
 800c12e:	a81b      	add	r0, sp, #108	; 0x6c
 800c130:	f7fc fcc6 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800c134:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c136:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c138:	188b      	adds	r3, r1, r2
 800c13a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c13c:	e748      	b.n	800bfd0 <GUI_MEMDEV__WriteToActiveOpaque+0x414>
 800c13e:	f817 0b01 	ldrb.w	r0, [r7], #1
 800c142:	47a0      	blx	r4
 800c144:	47b0      	blx	r6
 800c146:	465d      	mov	r5, fp
 800c148:	4642      	mov	r2, r8
 800c14a:	f008 0101 	and.w	r1, r8, #1
 800c14e:	f845 0b04 	str.w	r0, [r5], #4
 800c152:	2a00      	cmp	r2, #0
 800c154:	d0d2      	beq.n	800c0fc <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 800c156:	b159      	cbz	r1, 800c170 <GUI_MEMDEV__WriteToActiveOpaque+0x5b4>
 800c158:	f817 0b01 	ldrb.w	r0, [r7], #1
 800c15c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800c160:	47a0      	blx	r4
 800c162:	47b0      	blx	r6
 800c164:	f8cb 0004 	str.w	r0, [fp, #4]
 800c168:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c16a:	3504      	adds	r5, #4
 800c16c:	1e42      	subs	r2, r0, #1
 800c16e:	d0c5      	beq.n	800c0fc <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 800c170:	4692      	mov	sl, r2
 800c172:	46b9      	mov	r9, r7
 800c174:	46a8      	mov	r8, r5
 800c176:	f819 0b01 	ldrb.w	r0, [r9], #1
 800c17a:	47a0      	blx	r4
 800c17c:	47b0      	blx	r6
 800c17e:	f848 0b04 	str.w	r0, [r8], #4
 800c182:	7878      	ldrb	r0, [r7, #1]
 800c184:	47a0      	blx	r4
 800c186:	47b0      	blx	r6
 800c188:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c18c:	f1b3 0a01 	subs.w	sl, r3, #1
 800c190:	6068      	str	r0, [r5, #4]
 800c192:	f109 0701 	add.w	r7, r9, #1
 800c196:	f108 0504 	add.w	r5, r8, #4
 800c19a:	d1ea      	bne.n	800c172 <GUI_MEMDEV__WriteToActiveOpaque+0x5b6>
 800c19c:	e7ae      	b.n	800c0fc <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 800c19e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c1a0:	9004      	str	r0, [sp, #16]
 800c1a2:	2501      	movs	r5, #1
 800c1a4:	9500      	str	r5, [sp, #0]
 800c1a6:	9501      	str	r5, [sp, #4]
 800c1a8:	9602      	str	r6, [sp, #8]
 800c1aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c1ac:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800c1ae:	9505      	str	r5, [sp, #20]
 800c1b0:	9603      	str	r6, [sp, #12]
 800c1b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c1b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c1b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c1b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1ba:	f7fe ff1d 	bl	800aff8 <LCD_DrawBitmap>
 800c1be:	e55b      	b.n	800bc78 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800c1c0:	4637      	mov	r7, r6
 800c1c2:	960a      	str	r6, [sp, #40]	; 0x28
 800c1c4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c1c6:	e000      	b.n	800c1ca <GUI_MEMDEV__WriteToActiveOpaque+0x60e>
 800c1c8:	4627      	mov	r7, r4
 800c1ca:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c1cc:	6882      	ldr	r2, [r0, #8]
 800c1ce:	1c7c      	adds	r4, r7, #1
 800c1d0:	6953      	ldr	r3, [r2, #20]
 800c1d2:	a91a      	add	r1, sp, #104	; 0x68
 800c1d4:	4622      	mov	r2, r4
 800c1d6:	4798      	blx	r3
 800c1d8:	4286      	cmp	r6, r0
 800c1da:	d0f5      	beq.n	800c1c8 <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 800c1dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c1de:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c1e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1e2:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800c1e6:	f8cd 8010 	str.w	r8, [sp, #16]
 800c1ea:	1bb9      	subs	r1, r7, r6
 800c1ec:	1c4f      	adds	r7, r1, #1
 800c1ee:	9002      	str	r0, [sp, #8]
 800c1f0:	eb0c 0106 	add.w	r1, ip, r6
 800c1f4:	9205      	str	r2, [sp, #20]
 800c1f6:	9500      	str	r5, [sp, #0]
 800c1f8:	9501      	str	r5, [sp, #4]
 800c1fa:	f8cd 900c 	str.w	r9, [sp, #12]
 800c1fe:	4658      	mov	r0, fp
 800c200:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c202:	463b      	mov	r3, r7
 800c204:	f7fe fef8 	bl	800aff8 <LCD_DrawBitmap>
 800c208:	fb09 8807 	mla	r8, r9, r7, r8
 800c20c:	4626      	mov	r6, r4
 800c20e:	e593      	b.n	800bd38 <GUI_MEMDEV__WriteToActiveOpaque+0x17c>
 800c210:	2800      	cmp	r0, #0
 800c212:	f43f ad8f 	beq.w	800bd34 <GUI_MEMDEV__WriteToActiveOpaque+0x178>
 800c216:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c218:	4632      	mov	r2, r6
 800c21a:	1983      	adds	r3, r0, r6
 800c21c:	930a      	str	r3, [sp, #40]	; 0x28
 800c21e:	464e      	mov	r6, r9
 800c220:	4691      	mov	r9, r2
 800c222:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c224:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c226:	9500      	str	r5, [sp, #0]
 800c228:	2301      	movs	r3, #1
 800c22a:	2f00      	cmp	r7, #0
 800c22c:	46be      	mov	lr, r7
 800c22e:	bfb8      	it	lt
 800c230:	f107 0e07 	addlt.w	lr, r7, #7
 800c234:	f007 0c07 	and.w	ip, r7, #7
 800c238:	eb0b 0007 	add.w	r0, fp, r7
 800c23c:	eb08 07ee 	add.w	r7, r8, lr, asr #3
 800c240:	9704      	str	r7, [sp, #16]
 800c242:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c244:	f8cd c018 	str.w	ip, [sp, #24]
 800c248:	4622      	mov	r2, r4
 800c24a:	9705      	str	r7, [sp, #20]
 800c24c:	9501      	str	r5, [sp, #4]
 800c24e:	9502      	str	r5, [sp, #8]
 800c250:	9603      	str	r6, [sp, #12]
 800c252:	f7fe fc57 	bl	800ab04 <LCD__DrawBitmap_1bpp>
 800c256:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c258:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c25a:	6881      	ldr	r1, [r0, #8]
 800c25c:	191c      	adds	r4, r3, r4
 800c25e:	941a      	str	r4, [sp, #104]	; 0x68
 800c260:	694f      	ldr	r7, [r1, #20]
 800c262:	464a      	mov	r2, r9
 800c264:	a91a      	add	r1, sp, #104	; 0x68
 800c266:	47b8      	blx	r7
 800c268:	4604      	mov	r4, r0
 800c26a:	2800      	cmp	r0, #0
 800c26c:	d1d9      	bne.n	800c222 <GUI_MEMDEV__WriteToActiveOpaque+0x666>
 800c26e:	4648      	mov	r0, r9
 800c270:	46b1      	mov	r9, r6
 800c272:	4606      	mov	r6, r0
 800c274:	e55e      	b.n	800bd34 <GUI_MEMDEV__WriteToActiveOpaque+0x178>
 800c276:	fb0a f009 	mul.w	r0, sl, r9
 800c27a:	f7fc fc0b 	bl	8008a94 <GUI_ALLOC_AllocNoInit>
 800c27e:	900f      	str	r0, [sp, #60]	; 0x3c
 800c280:	2800      	cmp	r0, #0
 800c282:	f43f acf9 	beq.w	800bc78 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800c286:	f7fc fc09 	bl	8008a9c <GUI_ALLOC_LockH>
 800c28a:	901d      	str	r0, [sp, #116]	; 0x74
 800c28c:	4638      	mov	r0, r7
 800c28e:	f7fc fc05 	bl	8008a9c <GUI_ALLOC_LockH>
 800c292:	901b      	str	r0, [sp, #108]	; 0x6c
 800c294:	6925      	ldr	r5, [r4, #16]
 800c296:	f100 0818 	add.w	r8, r0, #24
 800c29a:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800c29e:	2d00      	cmp	r5, #0
 800c2a0:	f000 81c4 	beq.w	800c62c <GUI_MEMDEV__WriteToActiveOpaque+0xa70>
 800c2a4:	970c      	str	r7, [sp, #48]	; 0x30
 800c2a6:	2601      	movs	r6, #1
 800c2a8:	2700      	movs	r7, #0
 800c2aa:	f1b9 0f02 	cmp.w	r9, #2
 800c2ae:	f000 82e1 	beq.w	800c874 <GUI_MEMDEV__WriteToActiveOpaque+0xcb8>
 800c2b2:	f1b9 0f04 	cmp.w	r9, #4
 800c2b6:	f000 8279 	beq.w	800c7ac <GUI_MEMDEV__WriteToActiveOpaque+0xbf0>
 800c2ba:	f1b9 0f01 	cmp.w	r9, #1
 800c2be:	f000 8155 	beq.w	800c56c <GUI_MEMDEV__WriteToActiveOpaque+0x9b0>
 800c2c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c2c4:	1e44      	subs	r4, r0, #1
 800c2c6:	07e3      	lsls	r3, r4, #31
 800c2c8:	f100 8139 	bmi.w	800c53e <GUI_MEMDEV__WriteToActiveOpaque+0x982>
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c2d0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800c2d4:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800c2d8:	e00f      	b.n	800c2fa <GUI_MEMDEV__WriteToActiveOpaque+0x73e>
 800c2da:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c2dc:	9600      	str	r6, [sp, #0]
 800c2de:	9104      	str	r1, [sp, #16]
 800c2e0:	9601      	str	r6, [sp, #4]
 800c2e2:	9502      	str	r5, [sp, #8]
 800c2e4:	9703      	str	r7, [sp, #12]
 800c2e6:	9705      	str	r7, [sp, #20]
 800c2e8:	4648      	mov	r0, r9
 800c2ea:	4641      	mov	r1, r8
 800c2ec:	4652      	mov	r2, sl
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	f7fe fe82 	bl	800aff8 <LCD_DrawBitmap>
 800c2f4:	3c01      	subs	r4, #1
 800c2f6:	f108 0c01 	add.w	ip, r8, #1
 800c2fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c2fc:	9600      	str	r6, [sp, #0]
 800c2fe:	9304      	str	r3, [sp, #16]
 800c300:	4648      	mov	r0, r9
 800c302:	2301      	movs	r3, #1
 800c304:	4661      	mov	r1, ip
 800c306:	4652      	mov	r2, sl
 800c308:	9601      	str	r6, [sp, #4]
 800c30a:	9502      	str	r5, [sp, #8]
 800c30c:	9703      	str	r7, [sp, #12]
 800c30e:	9705      	str	r7, [sp, #20]
 800c310:	eb0c 0803 	add.w	r8, ip, r3
 800c314:	f7fe fe70 	bl	800aff8 <LCD_DrawBitmap>
 800c318:	3c01      	subs	r4, #1
 800c31a:	d1de      	bne.n	800c2da <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800c31c:	4658      	mov	r0, fp
 800c31e:	f7fc fbcf 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800c322:	a81d      	add	r0, sp, #116	; 0x74
 800c324:	f7fc fbcc 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800c328:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c32a:	f7fc fbfd 	bl	8008b28 <GUI_ALLOC_Free>
 800c32e:	e4a3      	b.n	800bc78 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800c330:	f105 0118 	add.w	r1, r5, #24
 800c334:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c336:	9104      	str	r1, [sp, #16]
 800c338:	2001      	movs	r0, #1
 800c33a:	2200      	movs	r2, #0
 800c33c:	9000      	str	r0, [sp, #0]
 800c33e:	9001      	str	r0, [sp, #4]
 800c340:	9205      	str	r2, [sp, #20]
 800c342:	9602      	str	r6, [sp, #8]
 800c344:	9503      	str	r5, [sp, #12]
 800c346:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c348:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c34c:	4652      	mov	r2, sl
 800c34e:	f7fe fe53 	bl	800aff8 <LCD_DrawBitmap>
 800c352:	e491      	b.n	800bc78 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800c354:	ea4f 064a 	mov.w	r6, sl, lsl #1
 800c358:	960d      	str	r6, [sp, #52]	; 0x34
 800c35a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800c35c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c35e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800c362:	e01d      	b.n	800c3a0 <GUI_MEMDEV__WriteToActiveOpaque+0x7e4>
 800c364:	f1b9 0f04 	cmp.w	r9, #4
 800c368:	f000 80a2 	beq.w	800c4b0 <GUI_MEMDEV__WriteToActiveOpaque+0x8f4>
 800c36c:	f1b9 0f01 	cmp.w	r9, #1
 800c370:	d05c      	beq.n	800c42c <GUI_MEMDEV__WriteToActiveOpaque+0x870>
 800c372:	2100      	movs	r1, #0
 800c374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c376:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c378:	9103      	str	r1, [sp, #12]
 800c37a:	2701      	movs	r7, #1
 800c37c:	9105      	str	r1, [sp, #20]
 800c37e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c380:	9700      	str	r7, [sp, #0]
 800c382:	9701      	str	r7, [sp, #4]
 800c384:	9202      	str	r2, [sp, #8]
 800c386:	9304      	str	r3, [sp, #16]
 800c388:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c38a:	2301      	movs	r3, #1
 800c38c:	4652      	mov	r2, sl
 800c38e:	18cf      	adds	r7, r1, r3
 800c390:	f7fe fe32 	bl	800aff8 <LCD_DrawBitmap>
 800c394:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c396:	1e42      	subs	r2, r0, #1
 800c398:	920a      	str	r2, [sp, #40]	; 0x28
 800c39a:	f000 80cd 	beq.w	800c538 <GUI_MEMDEV__WriteToActiveOpaque+0x97c>
 800c39e:	970e      	str	r7, [sp, #56]	; 0x38
 800c3a0:	f1b9 0f02 	cmp.w	r9, #2
 800c3a4:	d1de      	bne.n	800c364 <GUI_MEMDEV__WriteToActiveOpaque+0x7a8>
 800c3a6:	462f      	mov	r7, r5
 800c3a8:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800c3ac:	f837 0b02 	ldrh.w	r0, [r7], #2
 800c3b0:	9709      	str	r7, [sp, #36]	; 0x24
 800c3b2:	47a0      	blx	r4
 800c3b4:	47b0      	blx	r6
 800c3b6:	46c3      	mov	fp, r8
 800c3b8:	f10a 3eff 	add.w	lr, sl, #4294967295
 800c3bc:	4677      	mov	r7, lr
 800c3be:	f00e 0301 	and.w	r3, lr, #1
 800c3c2:	f82b 0b02 	strh.w	r0, [fp], #2
 800c3c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3c8:	2f00      	cmp	r7, #0
 800c3ca:	d02c      	beq.n	800c426 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800c3cc:	b15b      	cbz	r3, 800c3e6 <GUI_MEMDEV__WriteToActiveOpaque+0x82a>
 800c3ce:	f832 0b02 	ldrh.w	r0, [r2], #2
 800c3d2:	9209      	str	r2, [sp, #36]	; 0x24
 800c3d4:	47a0      	blx	r4
 800c3d6:	47b0      	blx	r6
 800c3d8:	3f01      	subs	r7, #1
 800c3da:	f10b 0b02 	add.w	fp, fp, #2
 800c3de:	f8a8 0002 	strh.w	r0, [r8, #2]
 800c3e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3e4:	d01f      	beq.n	800c426 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800c3e6:	462b      	mov	r3, r5
 800c3e8:	4651      	mov	r1, sl
 800c3ea:	4615      	mov	r5, r2
 800c3ec:	46ca      	mov	sl, r9
 800c3ee:	46a1      	mov	r9, r4
 800c3f0:	462c      	mov	r4, r5
 800c3f2:	46d8      	mov	r8, fp
 800c3f4:	f834 0b02 	ldrh.w	r0, [r4], #2
 800c3f8:	9109      	str	r1, [sp, #36]	; 0x24
 800c3fa:	9308      	str	r3, [sp, #32]
 800c3fc:	47c8      	blx	r9
 800c3fe:	47b0      	blx	r6
 800c400:	f828 0b02 	strh.w	r0, [r8], #2
 800c404:	8868      	ldrh	r0, [r5, #2]
 800c406:	47c8      	blx	r9
 800c408:	47b0      	blx	r6
 800c40a:	1e79      	subs	r1, r7, #1
 800c40c:	1ca5      	adds	r5, r4, #2
 800c40e:	1e4f      	subs	r7, r1, #1
 800c410:	f8ab 0002 	strh.w	r0, [fp, #2]
 800c414:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c416:	9b08      	ldr	r3, [sp, #32]
 800c418:	f108 0b02 	add.w	fp, r8, #2
 800c41c:	d1e8      	bne.n	800c3f0 <GUI_MEMDEV__WriteToActiveOpaque+0x834>
 800c41e:	464c      	mov	r4, r9
 800c420:	461d      	mov	r5, r3
 800c422:	46d1      	mov	r9, sl
 800c424:	468a      	mov	sl, r1
 800c426:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c428:	182d      	adds	r5, r5, r0
 800c42a:	e7a2      	b.n	800c372 <GUI_MEMDEV__WriteToActiveOpaque+0x7b6>
 800c42c:	46ab      	mov	fp, r5
 800c42e:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800c432:	f83b 0b02 	ldrh.w	r0, [fp], #2
 800c436:	47a0      	blx	r4
 800c438:	47b0      	blx	r6
 800c43a:	4647      	mov	r7, r8
 800c43c:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c440:	4662      	mov	r2, ip
 800c442:	f00c 0101 	and.w	r1, ip, #1
 800c446:	f807 0b01 	strb.w	r0, [r7], #1
 800c44a:	2a00      	cmp	r2, #0
 800c44c:	d0eb      	beq.n	800c426 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800c44e:	b159      	cbz	r1, 800c468 <GUI_MEMDEV__WriteToActiveOpaque+0x8ac>
 800c450:	f83b 0b02 	ldrh.w	r0, [fp], #2
 800c454:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800c458:	47a0      	blx	r4
 800c45a:	47b0      	blx	r6
 800c45c:	f888 0001 	strb.w	r0, [r8, #1]
 800c460:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c462:	3701      	adds	r7, #1
 800c464:	1e42      	subs	r2, r0, #1
 800c466:	d0de      	beq.n	800c426 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800c468:	462b      	mov	r3, r5
 800c46a:	4651      	mov	r1, sl
 800c46c:	4625      	mov	r5, r4
 800c46e:	46ca      	mov	sl, r9
 800c470:	4691      	mov	r9, r2
 800c472:	465c      	mov	r4, fp
 800c474:	46b8      	mov	r8, r7
 800c476:	f834 0b02 	ldrh.w	r0, [r4], #2
 800c47a:	9109      	str	r1, [sp, #36]	; 0x24
 800c47c:	9308      	str	r3, [sp, #32]
 800c47e:	47a8      	blx	r5
 800c480:	47b0      	blx	r6
 800c482:	f808 0b01 	strb.w	r0, [r8], #1
 800c486:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 800c48a:	47a8      	blx	r5
 800c48c:	47b0      	blx	r6
 800c48e:	f109 33ff 	add.w	r3, r9, #4294967295
 800c492:	7078      	strb	r0, [r7, #1]
 800c494:	f1b3 0901 	subs.w	r9, r3, #1
 800c498:	f104 0b02 	add.w	fp, r4, #2
 800c49c:	f108 0701 	add.w	r7, r8, #1
 800c4a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4a2:	9b08      	ldr	r3, [sp, #32]
 800c4a4:	d1e5      	bne.n	800c472 <GUI_MEMDEV__WriteToActiveOpaque+0x8b6>
 800c4a6:	462c      	mov	r4, r5
 800c4a8:	46d1      	mov	r9, sl
 800c4aa:	461d      	mov	r5, r3
 800c4ac:	468a      	mov	sl, r1
 800c4ae:	e7ba      	b.n	800c426 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800c4b0:	462f      	mov	r7, r5
 800c4b2:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800c4b6:	f837 0b02 	ldrh.w	r0, [r7], #2
 800c4ba:	9709      	str	r7, [sp, #36]	; 0x24
 800c4bc:	47a0      	blx	r4
 800c4be:	47b0      	blx	r6
 800c4c0:	46c3      	mov	fp, r8
 800c4c2:	f10a 3eff 	add.w	lr, sl, #4294967295
 800c4c6:	4677      	mov	r7, lr
 800c4c8:	f00e 0101 	and.w	r1, lr, #1
 800c4cc:	f84b 0b04 	str.w	r0, [fp], #4
 800c4d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4d2:	2f00      	cmp	r7, #0
 800c4d4:	d0a7      	beq.n	800c426 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800c4d6:	b159      	cbz	r1, 800c4f0 <GUI_MEMDEV__WriteToActiveOpaque+0x934>
 800c4d8:	f832 0b02 	ldrh.w	r0, [r2], #2
 800c4dc:	9209      	str	r2, [sp, #36]	; 0x24
 800c4de:	47a0      	blx	r4
 800c4e0:	47b0      	blx	r6
 800c4e2:	3f01      	subs	r7, #1
 800c4e4:	f10b 0b04 	add.w	fp, fp, #4
 800c4e8:	f8c8 0004 	str.w	r0, [r8, #4]
 800c4ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4ee:	d09a      	beq.n	800c426 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	46d4      	mov	ip, sl
 800c4f4:	4615      	mov	r5, r2
 800c4f6:	46ca      	mov	sl, r9
 800c4f8:	46a1      	mov	r9, r4
 800c4fa:	462c      	mov	r4, r5
 800c4fc:	46d8      	mov	r8, fp
 800c4fe:	f834 0b02 	ldrh.w	r0, [r4], #2
 800c502:	9109      	str	r1, [sp, #36]	; 0x24
 800c504:	f8cd c020 	str.w	ip, [sp, #32]
 800c508:	47c8      	blx	r9
 800c50a:	47b0      	blx	r6
 800c50c:	886d      	ldrh	r5, [r5, #2]
 800c50e:	f848 0b04 	str.w	r0, [r8], #4
 800c512:	4628      	mov	r0, r5
 800c514:	47c8      	blx	r9
 800c516:	47b0      	blx	r6
 800c518:	1e7b      	subs	r3, r7, #1
 800c51a:	1ca5      	adds	r5, r4, #2
 800c51c:	1e5f      	subs	r7, r3, #1
 800c51e:	f8cb 0004 	str.w	r0, [fp, #4]
 800c522:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c524:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c528:	f108 0b04 	add.w	fp, r8, #4
 800c52c:	d1e5      	bne.n	800c4fa <GUI_MEMDEV__WriteToActiveOpaque+0x93e>
 800c52e:	464c      	mov	r4, r9
 800c530:	460d      	mov	r5, r1
 800c532:	46d1      	mov	r9, sl
 800c534:	46e2      	mov	sl, ip
 800c536:	e776      	b.n	800c426 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800c538:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800c53c:	e462      	b.n	800be04 <GUI_MEMDEV__WriteToActiveOpaque+0x248>
 800c53e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c540:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c542:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c544:	9202      	str	r2, [sp, #8]
 800c546:	1c4d      	adds	r5, r1, #1
 800c548:	9004      	str	r0, [sp, #16]
 800c54a:	9600      	str	r6, [sp, #0]
 800c54c:	9601      	str	r6, [sp, #4]
 800c54e:	9703      	str	r7, [sp, #12]
 800c550:	9705      	str	r7, [sp, #20]
 800c552:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c554:	4652      	mov	r2, sl
 800c556:	4633      	mov	r3, r6
 800c558:	f7fe fd4e 	bl	800aff8 <LCD_DrawBitmap>
 800c55c:	950e      	str	r5, [sp, #56]	; 0x38
 800c55e:	940a      	str	r4, [sp, #40]	; 0x28
 800c560:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c562:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800c566:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800c56a:	e6c6      	b.n	800c2fa <GUI_MEMDEV__WriteToActiveOpaque+0x73e>
 800c56c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800c570:	f109 39ff 	add.w	r9, r9, #4294967295
 800c574:	f019 0f01 	tst.w	r9, #1
 800c578:	f000 82a2 	beq.w	800cac0 <GUI_MEMDEV__WriteToActiveOpaque+0xf04>
 800c57c:	4640      	mov	r0, r8
 800c57e:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c580:	4652      	mov	r2, sl
 800c582:	4633      	mov	r3, r6
 800c584:	47a8      	blx	r5
 800c586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c588:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c58a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c58c:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800c590:	9202      	str	r2, [sp, #8]
 800c592:	1c4d      	adds	r5, r1, #1
 800c594:	9004      	str	r0, [sp, #16]
 800c596:	9600      	str	r6, [sp, #0]
 800c598:	9601      	str	r6, [sp, #4]
 800c59a:	9703      	str	r7, [sp, #12]
 800c59c:	9705      	str	r7, [sp, #20]
 800c59e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c5a0:	4652      	mov	r2, sl
 800c5a2:	4633      	mov	r3, r6
 800c5a4:	44f0      	add	r8, lr
 800c5a6:	f7fe fd27 	bl	800aff8 <LCD_DrawBitmap>
 800c5aa:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800c5ae:	950e      	str	r5, [sp, #56]	; 0x38
 800c5b0:	46a9      	mov	r9, r5
 800c5b2:	e01c      	b.n	800c5ee <GUI_MEMDEV__WriteToActiveOpaque+0xa32>
 800c5b4:	f8cd c020 	str.w	ip, [sp, #32]
 800c5b8:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c5ba:	6925      	ldr	r5, [r4, #16]
 800c5bc:	47a8      	blx	r5
 800c5be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c5c0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c5c2:	9102      	str	r1, [sp, #8]
 800c5c4:	9204      	str	r2, [sp, #16]
 800c5c6:	4649      	mov	r1, r9
 800c5c8:	9600      	str	r6, [sp, #0]
 800c5ca:	9601      	str	r6, [sp, #4]
 800c5cc:	9703      	str	r7, [sp, #12]
 800c5ce:	9705      	str	r7, [sp, #20]
 800c5d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c5d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5d4:	4652      	mov	r2, sl
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	f7fe fd0e 	bl	800aff8 <LCD_DrawBitmap>
 800c5dc:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c5e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c5e4:	44a8      	add	r8, r5
 800c5e6:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800c5ea:	f109 0901 	add.w	r9, r9, #1
 800c5ee:	4640      	mov	r0, r8
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c5f4:	6925      	ldr	r5, [r4, #16]
 800c5f6:	4652      	mov	r2, sl
 800c5f8:	47a8      	blx	r5
 800c5fa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c5fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5fe:	9504      	str	r5, [sp, #16]
 800c600:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c602:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c604:	9302      	str	r3, [sp, #8]
 800c606:	4649      	mov	r1, r9
 800c608:	2301      	movs	r3, #1
 800c60a:	4652      	mov	r2, sl
 800c60c:	9600      	str	r6, [sp, #0]
 800c60e:	9601      	str	r6, [sp, #4]
 800c610:	9703      	str	r7, [sp, #12]
 800c612:	9705      	str	r7, [sp, #20]
 800c614:	44a8      	add	r8, r5
 800c616:	4499      	add	r9, r3
 800c618:	f7fe fcee 	bl	800aff8 <LCD_DrawBitmap>
 800c61c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c61e:	2301      	movs	r3, #1
 800c620:	f1b5 0c01 	subs.w	ip, r5, #1
 800c624:	4640      	mov	r0, r8
 800c626:	4652      	mov	r2, sl
 800c628:	d1c4      	bne.n	800c5b4 <GUI_MEMDEV__WriteToActiveOpaque+0x9f8>
 800c62a:	e677      	b.n	800c31c <GUI_MEMDEV__WriteToActiveOpaque+0x760>
 800c62c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c62e:	970d      	str	r7, [sp, #52]	; 0x34
 800c630:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800c634:	e01d      	b.n	800c672 <GUI_MEMDEV__WriteToActiveOpaque+0xab6>
 800c636:	f1b9 0f04 	cmp.w	r9, #4
 800c63a:	f000 8082 	beq.w	800c742 <GUI_MEMDEV__WriteToActiveOpaque+0xb86>
 800c63e:	f1b9 0f01 	cmp.w	r9, #1
 800c642:	d04c      	beq.n	800c6de <GUI_MEMDEV__WriteToActiveOpaque+0xb22>
 800c644:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c646:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c648:	9104      	str	r1, [sp, #16]
 800c64a:	2701      	movs	r7, #1
 800c64c:	2500      	movs	r5, #0
 800c64e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c650:	9602      	str	r6, [sp, #8]
 800c652:	9503      	str	r5, [sp, #12]
 800c654:	9505      	str	r5, [sp, #20]
 800c656:	4652      	mov	r2, sl
 800c658:	9700      	str	r7, [sp, #0]
 800c65a:	9701      	str	r7, [sp, #4]
 800c65c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c65e:	463b      	mov	r3, r7
 800c660:	19ce      	adds	r6, r1, r7
 800c662:	f7fe fcc9 	bl	800aff8 <LCD_DrawBitmap>
 800c666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c668:	1e55      	subs	r5, r2, #1
 800c66a:	950a      	str	r5, [sp, #40]	; 0x28
 800c66c:	f000 809b 	beq.w	800c7a6 <GUI_MEMDEV__WriteToActiveOpaque+0xbea>
 800c670:	960e      	str	r6, [sp, #56]	; 0x38
 800c672:	f1b9 0f02 	cmp.w	r9, #2
 800c676:	d1de      	bne.n	800c636 <GUI_MEMDEV__WriteToActiveOpaque+0xa7a>
 800c678:	46c3      	mov	fp, r8
 800c67a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c67c:	f85b 0b04 	ldr.w	r0, [fp], #4
 800c680:	47a0      	blx	r4
 800c682:	463e      	mov	r6, r7
 800c684:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c688:	4665      	mov	r5, ip
 800c68a:	f00c 0301 	and.w	r3, ip, #1
 800c68e:	f826 0b02 	strh.w	r0, [r6], #2
 800c692:	b30d      	cbz	r5, 800c6d8 <GUI_MEMDEV__WriteToActiveOpaque+0xb1c>
 800c694:	b133      	cbz	r3, 800c6a4 <GUI_MEMDEV__WriteToActiveOpaque+0xae8>
 800c696:	f85b 0b04 	ldr.w	r0, [fp], #4
 800c69a:	47a0      	blx	r4
 800c69c:	3602      	adds	r6, #2
 800c69e:	3d01      	subs	r5, #1
 800c6a0:	8078      	strh	r0, [r7, #2]
 800c6a2:	d019      	beq.n	800c6d8 <GUI_MEMDEV__WriteToActiveOpaque+0xb1c>
 800c6a4:	4653      	mov	r3, sl
 800c6a6:	46c2      	mov	sl, r8
 800c6a8:	46a0      	mov	r8, r4
 800c6aa:	465c      	mov	r4, fp
 800c6ac:	4637      	mov	r7, r6
 800c6ae:	f854 0b04 	ldr.w	r0, [r4], #4
 800c6b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b4:	47c0      	blx	r8
 800c6b6:	f8db 1004 	ldr.w	r1, [fp, #4]
 800c6ba:	f827 0b02 	strh.w	r0, [r7], #2
 800c6be:	4608      	mov	r0, r1
 800c6c0:	47c0      	blx	r8
 800c6c2:	1e6a      	subs	r2, r5, #1
 800c6c4:	8070      	strh	r0, [r6, #2]
 800c6c6:	1cbe      	adds	r6, r7, #2
 800c6c8:	1e55      	subs	r5, r2, #1
 800c6ca:	f104 0b04 	add.w	fp, r4, #4
 800c6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6d0:	d1eb      	bne.n	800c6aa <GUI_MEMDEV__WriteToActiveOpaque+0xaee>
 800c6d2:	4644      	mov	r4, r8
 800c6d4:	46d0      	mov	r8, sl
 800c6d6:	469a      	mov	sl, r3
 800c6d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c6da:	4480      	add	r8, r0
 800c6dc:	e7b2      	b.n	800c644 <GUI_MEMDEV__WriteToActiveOpaque+0xa88>
 800c6de:	46c3      	mov	fp, r8
 800c6e0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c6e2:	f85b 0b04 	ldr.w	r0, [fp], #4
 800c6e6:	47a0      	blx	r4
 800c6e8:	463e      	mov	r6, r7
 800c6ea:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c6ee:	4665      	mov	r5, ip
 800c6f0:	f00c 0301 	and.w	r3, ip, #1
 800c6f4:	f806 0b01 	strb.w	r0, [r6], #1
 800c6f8:	b305      	cbz	r5, 800c73c <GUI_MEMDEV__WriteToActiveOpaque+0xb80>
 800c6fa:	b133      	cbz	r3, 800c70a <GUI_MEMDEV__WriteToActiveOpaque+0xb4e>
 800c6fc:	f85b 0b04 	ldr.w	r0, [fp], #4
 800c700:	47a0      	blx	r4
 800c702:	3601      	adds	r6, #1
 800c704:	3d01      	subs	r5, #1
 800c706:	7078      	strb	r0, [r7, #1]
 800c708:	d018      	beq.n	800c73c <GUI_MEMDEV__WriteToActiveOpaque+0xb80>
 800c70a:	4652      	mov	r2, sl
 800c70c:	46c2      	mov	sl, r8
 800c70e:	46a0      	mov	r8, r4
 800c710:	465c      	mov	r4, fp
 800c712:	4637      	mov	r7, r6
 800c714:	f854 0b04 	ldr.w	r0, [r4], #4
 800c718:	9208      	str	r2, [sp, #32]
 800c71a:	47c0      	blx	r8
 800c71c:	f807 0b01 	strb.w	r0, [r7], #1
 800c720:	f8db 0004 	ldr.w	r0, [fp, #4]
 800c724:	47c0      	blx	r8
 800c726:	1e69      	subs	r1, r5, #1
 800c728:	7070      	strb	r0, [r6, #1]
 800c72a:	1c7e      	adds	r6, r7, #1
 800c72c:	1e4d      	subs	r5, r1, #1
 800c72e:	f104 0b04 	add.w	fp, r4, #4
 800c732:	9a08      	ldr	r2, [sp, #32]
 800c734:	d1ec      	bne.n	800c710 <GUI_MEMDEV__WriteToActiveOpaque+0xb54>
 800c736:	4644      	mov	r4, r8
 800c738:	46d0      	mov	r8, sl
 800c73a:	4692      	mov	sl, r2
 800c73c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c73e:	4480      	add	r8, r0
 800c740:	e780      	b.n	800c644 <GUI_MEMDEV__WriteToActiveOpaque+0xa88>
 800c742:	46c3      	mov	fp, r8
 800c744:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800c746:	f85b 0b04 	ldr.w	r0, [fp], #4
 800c74a:	47a0      	blx	r4
 800c74c:	463e      	mov	r6, r7
 800c74e:	f10a 3eff 	add.w	lr, sl, #4294967295
 800c752:	4675      	mov	r5, lr
 800c754:	f00e 0301 	and.w	r3, lr, #1
 800c758:	f846 0b04 	str.w	r0, [r6], #4
 800c75c:	b305      	cbz	r5, 800c7a0 <GUI_MEMDEV__WriteToActiveOpaque+0xbe4>
 800c75e:	b133      	cbz	r3, 800c76e <GUI_MEMDEV__WriteToActiveOpaque+0xbb2>
 800c760:	f85b 0b04 	ldr.w	r0, [fp], #4
 800c764:	47a0      	blx	r4
 800c766:	3604      	adds	r6, #4
 800c768:	3d01      	subs	r5, #1
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	d018      	beq.n	800c7a0 <GUI_MEMDEV__WriteToActiveOpaque+0xbe4>
 800c76e:	4652      	mov	r2, sl
 800c770:	46c2      	mov	sl, r8
 800c772:	46a0      	mov	r8, r4
 800c774:	465c      	mov	r4, fp
 800c776:	4637      	mov	r7, r6
 800c778:	f854 0b04 	ldr.w	r0, [r4], #4
 800c77c:	9208      	str	r2, [sp, #32]
 800c77e:	47c0      	blx	r8
 800c780:	f847 0b04 	str.w	r0, [r7], #4
 800c784:	f8db 0004 	ldr.w	r0, [fp, #4]
 800c788:	47c0      	blx	r8
 800c78a:	1e69      	subs	r1, r5, #1
 800c78c:	6070      	str	r0, [r6, #4]
 800c78e:	1d3e      	adds	r6, r7, #4
 800c790:	1e4d      	subs	r5, r1, #1
 800c792:	f104 0b04 	add.w	fp, r4, #4
 800c796:	9a08      	ldr	r2, [sp, #32]
 800c798:	d1ec      	bne.n	800c774 <GUI_MEMDEV__WriteToActiveOpaque+0xbb8>
 800c79a:	4644      	mov	r4, r8
 800c79c:	46d0      	mov	r8, sl
 800c79e:	4692      	mov	sl, r2
 800c7a0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c7a2:	4480      	add	r8, r0
 800c7a4:	e74e      	b.n	800c644 <GUI_MEMDEV__WriteToActiveOpaque+0xa88>
 800c7a6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800c7aa:	e5b7      	b.n	800c31c <GUI_MEMDEV__WriteToActiveOpaque+0x760>
 800c7ac:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800c7b0:	f10e 3cff 	add.w	ip, lr, #4294967295
 800c7b4:	f01c 0f01 	tst.w	ip, #1
 800c7b8:	f000 80c2 	beq.w	800c940 <GUI_MEMDEV__WriteToActiveOpaque+0xd84>
 800c7bc:	4640      	mov	r0, r8
 800c7be:	464b      	mov	r3, r9
 800c7c0:	f8cd c020 	str.w	ip, [sp, #32]
 800c7c4:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c7c6:	4652      	mov	r2, sl
 800c7c8:	47a8      	blx	r5
 800c7ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c7ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c7d0:	9302      	str	r3, [sp, #8]
 800c7d2:	9204      	str	r2, [sp, #16]
 800c7d4:	9600      	str	r6, [sp, #0]
 800c7d6:	9601      	str	r6, [sp, #4]
 800c7d8:	9703      	str	r7, [sp, #12]
 800c7da:	9705      	str	r7, [sp, #20]
 800c7dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c7de:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800c7e2:	4652      	mov	r2, sl
 800c7e4:	4633      	mov	r3, r6
 800c7e6:	1c4d      	adds	r5, r1, #1
 800c7e8:	f7fe fc06 	bl	800aff8 <LCD_DrawBitmap>
 800c7ec:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c7f0:	950e      	str	r5, [sp, #56]	; 0x38
 800c7f2:	44c8      	add	r8, r9
 800c7f4:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800c7f8:	46a9      	mov	r9, r5
 800c7fa:	e01c      	b.n	800c836 <GUI_MEMDEV__WriteToActiveOpaque+0xc7a>
 800c7fc:	f8cd c020 	str.w	ip, [sp, #32]
 800c800:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c802:	6925      	ldr	r5, [r4, #16]
 800c804:	47a8      	blx	r5
 800c806:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c808:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c80a:	9102      	str	r1, [sp, #8]
 800c80c:	9004      	str	r0, [sp, #16]
 800c80e:	4649      	mov	r1, r9
 800c810:	9600      	str	r6, [sp, #0]
 800c812:	9601      	str	r6, [sp, #4]
 800c814:	9703      	str	r7, [sp, #12]
 800c816:	9705      	str	r7, [sp, #20]
 800c818:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c81a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c81c:	4652      	mov	r2, sl
 800c81e:	2301      	movs	r3, #1
 800c820:	f7fe fbea 	bl	800aff8 <LCD_DrawBitmap>
 800c824:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c828:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c82c:	44a8      	add	r8, r5
 800c82e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800c832:	f109 0901 	add.w	r9, r9, #1
 800c836:	4640      	mov	r0, r8
 800c838:	2304      	movs	r3, #4
 800c83a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c83c:	6925      	ldr	r5, [r4, #16]
 800c83e:	4652      	mov	r2, sl
 800c840:	47a8      	blx	r5
 800c842:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c846:	9504      	str	r5, [sp, #16]
 800c848:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c84a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c84c:	9302      	str	r3, [sp, #8]
 800c84e:	4649      	mov	r1, r9
 800c850:	2301      	movs	r3, #1
 800c852:	4652      	mov	r2, sl
 800c854:	9600      	str	r6, [sp, #0]
 800c856:	9601      	str	r6, [sp, #4]
 800c858:	9703      	str	r7, [sp, #12]
 800c85a:	9705      	str	r7, [sp, #20]
 800c85c:	44a8      	add	r8, r5
 800c85e:	4499      	add	r9, r3
 800c860:	f7fe fbca 	bl	800aff8 <LCD_DrawBitmap>
 800c864:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c866:	2304      	movs	r3, #4
 800c868:	f1b5 0c01 	subs.w	ip, r5, #1
 800c86c:	4640      	mov	r0, r8
 800c86e:	4652      	mov	r2, sl
 800c870:	d1c4      	bne.n	800c7fc <GUI_MEMDEV__WriteToActiveOpaque+0xc40>
 800c872:	e553      	b.n	800c31c <GUI_MEMDEV__WriteToActiveOpaque+0x760>
 800c874:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800c878:	f10e 3cff 	add.w	ip, lr, #4294967295
 800c87c:	f01c 0f01 	tst.w	ip, #1
 800c880:	d13e      	bne.n	800c900 <GUI_MEMDEV__WriteToActiveOpaque+0xd44>
 800c882:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800c886:	e01c      	b.n	800c8c2 <GUI_MEMDEV__WriteToActiveOpaque+0xd06>
 800c888:	f8cd c020 	str.w	ip, [sp, #32]
 800c88c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c88e:	6925      	ldr	r5, [r4, #16]
 800c890:	47a8      	blx	r5
 800c892:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c894:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c896:	9102      	str	r1, [sp, #8]
 800c898:	9204      	str	r2, [sp, #16]
 800c89a:	4649      	mov	r1, r9
 800c89c:	2301      	movs	r3, #1
 800c89e:	9600      	str	r6, [sp, #0]
 800c8a0:	9601      	str	r6, [sp, #4]
 800c8a2:	9703      	str	r7, [sp, #12]
 800c8a4:	9705      	str	r7, [sp, #20]
 800c8a6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c8a8:	4652      	mov	r2, sl
 800c8aa:	f7fe fba5 	bl	800aff8 <LCD_DrawBitmap>
 800c8ae:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c8b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c8b8:	4498      	add	r8, r3
 800c8ba:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800c8be:	f109 0901 	add.w	r9, r9, #1
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	2302      	movs	r3, #2
 800c8c6:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c8c8:	6925      	ldr	r5, [r4, #16]
 800c8ca:	4652      	mov	r2, sl
 800c8cc:	47a8      	blx	r5
 800c8ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c8d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c8d2:	9502      	str	r5, [sp, #8]
 800c8d4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c8d6:	9600      	str	r6, [sp, #0]
 800c8d8:	9504      	str	r5, [sp, #16]
 800c8da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8dc:	9601      	str	r6, [sp, #4]
 800c8de:	2301      	movs	r3, #1
 800c8e0:	4649      	mov	r1, r9
 800c8e2:	4652      	mov	r2, sl
 800c8e4:	9703      	str	r7, [sp, #12]
 800c8e6:	9705      	str	r7, [sp, #20]
 800c8e8:	44a8      	add	r8, r5
 800c8ea:	4499      	add	r9, r3
 800c8ec:	f7fe fb84 	bl	800aff8 <LCD_DrawBitmap>
 800c8f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c8f2:	2302      	movs	r3, #2
 800c8f4:	f1b5 0c01 	subs.w	ip, r5, #1
 800c8f8:	4640      	mov	r0, r8
 800c8fa:	4652      	mov	r2, sl
 800c8fc:	d1c4      	bne.n	800c888 <GUI_MEMDEV__WriteToActiveOpaque+0xccc>
 800c8fe:	e50d      	b.n	800c31c <GUI_MEMDEV__WriteToActiveOpaque+0x760>
 800c900:	4640      	mov	r0, r8
 800c902:	464b      	mov	r3, r9
 800c904:	f8cd c020 	str.w	ip, [sp, #32]
 800c908:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c90a:	4652      	mov	r2, sl
 800c90c:	47a8      	blx	r5
 800c90e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c910:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c912:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c914:	9302      	str	r3, [sp, #8]
 800c916:	9004      	str	r0, [sp, #16]
 800c918:	9600      	str	r6, [sp, #0]
 800c91a:	9601      	str	r6, [sp, #4]
 800c91c:	9703      	str	r7, [sp, #12]
 800c91e:	9705      	str	r7, [sp, #20]
 800c920:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c922:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800c926:	4652      	mov	r2, sl
 800c928:	4633      	mov	r3, r6
 800c92a:	1c4d      	adds	r5, r1, #1
 800c92c:	f7fe fb64 	bl	800aff8 <LCD_DrawBitmap>
 800c930:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c934:	950e      	str	r5, [sp, #56]	; 0x38
 800c936:	44c8      	add	r8, r9
 800c938:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800c93c:	46a9      	mov	r9, r5
 800c93e:	e7c0      	b.n	800c8c2 <GUI_MEMDEV__WriteToActiveOpaque+0xd06>
 800c940:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800c944:	e777      	b.n	800c836 <GUI_MEMDEV__WriteToActiveOpaque+0xc7a>
 800c946:	f7fc f8a9 	bl	8008a9c <GUI_ALLOC_LockH>
 800c94a:	901c      	str	r0, [sp, #112]	; 0x70
 800c94c:	2800      	cmp	r0, #0
 800c94e:	f43f aa59 	beq.w	800be04 <GUI_MEMDEV__WriteToActiveOpaque+0x248>
 800c952:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c954:	07f2      	lsls	r2, r6, #31
 800c956:	ea4f 074a 	mov.w	r7, sl, lsl #1
 800c95a:	d576      	bpl.n	800ca4a <GUI_MEMDEV__WriteToActiveOpaque+0xe8e>
 800c95c:	462e      	mov	r6, r5
 800c95e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800c962:	f1b9 0f02 	cmp.w	r9, #2
 800c966:	d03d      	beq.n	800c9e4 <GUI_MEMDEV__WriteToActiveOpaque+0xe28>
 800c968:	f1b9 0f04 	cmp.w	r9, #4
 800c96c:	d04b      	beq.n	800ca06 <GUI_MEMDEV__WriteToActiveOpaque+0xe4a>
 800c96e:	f1b9 0f01 	cmp.w	r9, #1
 800c972:	d048      	beq.n	800ca06 <GUI_MEMDEV__WriteToActiveOpaque+0xe4a>
 800c974:	2100      	movs	r1, #0
 800c976:	2301      	movs	r3, #1
 800c978:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c97a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c97c:	9103      	str	r1, [sp, #12]
 800c97e:	9105      	str	r1, [sp, #20]
 800c980:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	9301      	str	r3, [sp, #4]
 800c986:	2301      	movs	r3, #1
 800c988:	18cd      	adds	r5, r1, r3
 800c98a:	9002      	str	r0, [sp, #8]
 800c98c:	9204      	str	r2, [sp, #16]
 800c98e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c990:	950e      	str	r5, [sp, #56]	; 0x38
 800c992:	4652      	mov	r2, sl
 800c994:	f7fe fb30 	bl	800aff8 <LCD_DrawBitmap>
 800c998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c99a:	1e5d      	subs	r5, r3, #1
 800c99c:	950a      	str	r5, [sp, #40]	; 0x28
 800c99e:	d04a      	beq.n	800ca36 <GUI_MEMDEV__WriteToActiveOpaque+0xe7a>
 800c9a0:	f1b9 0f02 	cmp.w	r9, #2
 800c9a4:	d074      	beq.n	800ca90 <GUI_MEMDEV__WriteToActiveOpaque+0xed4>
 800c9a6:	f1b9 0f04 	cmp.w	r9, #4
 800c9aa:	d033      	beq.n	800ca14 <GUI_MEMDEV__WriteToActiveOpaque+0xe58>
 800c9ac:	f1b9 0f01 	cmp.w	r9, #1
 800c9b0:	d030      	beq.n	800ca14 <GUI_MEMDEV__WriteToActiveOpaque+0xe58>
 800c9b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c9b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c9b6:	9102      	str	r1, [sp, #8]
 800c9b8:	2001      	movs	r0, #1
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	9000      	str	r0, [sp, #0]
 800c9be:	9001      	str	r0, [sp, #4]
 800c9c0:	9203      	str	r2, [sp, #12]
 800c9c2:	9304      	str	r3, [sp, #16]
 800c9c4:	9205      	str	r2, [sp, #20]
 800c9c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c9c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c9ca:	4652      	mov	r2, sl
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	f7fe fb13 	bl	800aff8 <LCD_DrawBitmap>
 800c9d2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c9d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c9d6:	1e68      	subs	r0, r5, #1
 800c9d8:	1c4a      	adds	r2, r1, #1
 800c9da:	f1b9 0f02 	cmp.w	r9, #2
 800c9de:	900a      	str	r0, [sp, #40]	; 0x28
 800c9e0:	920e      	str	r2, [sp, #56]	; 0x38
 800c9e2:	d1c1      	bne.n	800c968 <GUI_MEMDEV__WriteToActiveOpaque+0xdac>
 800c9e4:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800c9e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	4652      	mov	r2, sl
 800c9ee:	464b      	mov	r3, r9
 800c9f0:	f8d8 5014 	ldr.w	r5, [r8, #20]
 800c9f4:	47a8      	blx	r5
 800c9f6:	981c      	ldr	r0, [sp, #112]	; 0x70
 800c9f8:	6925      	ldr	r5, [r4, #16]
 800c9fa:	4659      	mov	r1, fp
 800c9fc:	4652      	mov	r2, sl
 800c9fe:	464b      	mov	r3, r9
 800ca00:	47a8      	blx	r5
 800ca02:	19f6      	adds	r6, r6, r7
 800ca04:	e7b6      	b.n	800c974 <GUI_MEMDEV__WriteToActiveOpaque+0xdb8>
 800ca06:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800ca0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	4652      	mov	r2, sl
 800ca10:	2302      	movs	r3, #2
 800ca12:	e7ed      	b.n	800c9f0 <GUI_MEMDEV__WriteToActiveOpaque+0xe34>
 800ca14:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800ca18:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	4652      	mov	r2, sl
 800ca1e:	2302      	movs	r3, #2
 800ca20:	f8d8 5014 	ldr.w	r5, [r8, #20]
 800ca24:	47a8      	blx	r5
 800ca26:	981c      	ldr	r0, [sp, #112]	; 0x70
 800ca28:	6925      	ldr	r5, [r4, #16]
 800ca2a:	4659      	mov	r1, fp
 800ca2c:	4652      	mov	r2, sl
 800ca2e:	464b      	mov	r3, r9
 800ca30:	47a8      	blx	r5
 800ca32:	19f6      	adds	r6, r6, r7
 800ca34:	e7bd      	b.n	800c9b2 <GUI_MEMDEV__WriteToActiveOpaque+0xdf6>
 800ca36:	a81c      	add	r0, sp, #112	; 0x70
 800ca38:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800ca3c:	f7fc f840 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800ca40:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ca42:	f7fc f871 	bl	8008b28 <GUI_ALLOC_Free>
 800ca46:	f7ff b9dd 	b.w	800be04 <GUI_MEMDEV__WriteToActiveOpaque+0x248>
 800ca4a:	f1b9 0f02 	cmp.w	r9, #2
 800ca4e:	d03a      	beq.n	800cac6 <GUI_MEMDEV__WriteToActiveOpaque+0xf0a>
 800ca50:	f1b9 0f04 	cmp.w	r9, #4
 800ca54:	d023      	beq.n	800ca9e <GUI_MEMDEV__WriteToActiveOpaque+0xee2>
 800ca56:	f1b9 0f01 	cmp.w	r9, #1
 800ca5a:	d020      	beq.n	800ca9e <GUI_MEMDEV__WriteToActiveOpaque+0xee2>
 800ca5c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ca5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ca60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca62:	9002      	str	r0, [sp, #8]
 800ca64:	2201      	movs	r2, #1
 800ca66:	188e      	adds	r6, r1, r2
 800ca68:	9200      	str	r2, [sp, #0]
 800ca6a:	9201      	str	r2, [sp, #4]
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	2200      	movs	r2, #0
 800ca70:	9203      	str	r2, [sp, #12]
 800ca72:	9304      	str	r3, [sp, #16]
 800ca74:	9005      	str	r0, [sp, #20]
 800ca76:	4652      	mov	r2, sl
 800ca78:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	f7fe fabc 	bl	800aff8 <LCD_DrawBitmap>
 800ca80:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ca82:	960e      	str	r6, [sp, #56]	; 0x38
 800ca84:	1e4a      	subs	r2, r1, #1
 800ca86:	920a      	str	r2, [sp, #40]	; 0x28
 800ca88:	462e      	mov	r6, r5
 800ca8a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800ca8e:	e768      	b.n	800c962 <GUI_MEMDEV__WriteToActiveOpaque+0xda6>
 800ca90:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800ca94:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ca96:	4630      	mov	r0, r6
 800ca98:	4652      	mov	r2, sl
 800ca9a:	464b      	mov	r3, r9
 800ca9c:	e7c0      	b.n	800ca20 <GUI_MEMDEV__WriteToActiveOpaque+0xe64>
 800ca9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800caa0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800caa2:	930d      	str	r3, [sp, #52]	; 0x34
 800caa4:	4628      	mov	r0, r5
 800caa6:	4652      	mov	r2, sl
 800caa8:	2302      	movs	r3, #2
 800caaa:	f8d8 6014 	ldr.w	r6, [r8, #20]
 800caae:	47b0      	blx	r6
 800cab0:	981c      	ldr	r0, [sp, #112]	; 0x70
 800cab2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cab4:	6926      	ldr	r6, [r4, #16]
 800cab6:	4652      	mov	r2, sl
 800cab8:	464b      	mov	r3, r9
 800caba:	47b0      	blx	r6
 800cabc:	19ed      	adds	r5, r5, r7
 800cabe:	e7cd      	b.n	800ca5c <GUI_MEMDEV__WriteToActiveOpaque+0xea0>
 800cac0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800cac4:	e593      	b.n	800c5ee <GUI_MEMDEV__WriteToActiveOpaque+0xa32>
 800cac6:	981d      	ldr	r0, [sp, #116]	; 0x74
 800cac8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800caca:	900d      	str	r0, [sp, #52]	; 0x34
 800cacc:	4652      	mov	r2, sl
 800cace:	4628      	mov	r0, r5
 800cad0:	2302      	movs	r3, #2
 800cad2:	f8d8 6014 	ldr.w	r6, [r8, #20]
 800cad6:	47b0      	blx	r6
 800cad8:	981c      	ldr	r0, [sp, #112]	; 0x70
 800cada:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cadc:	6926      	ldr	r6, [r4, #16]
 800cade:	4652      	mov	r2, sl
 800cae0:	2302      	movs	r3, #2
 800cae2:	47b0      	blx	r6
 800cae4:	19ed      	adds	r5, r5, r7
 800cae6:	e7b9      	b.n	800ca5c <GUI_MEMDEV__WriteToActiveOpaque+0xea0>

0800cae8 <GUI_USAGE_AddRect>:
 800cae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caec:	9f08      	ldr	r7, [sp, #32]
 800caee:	6886      	ldr	r6, [r0, #8]
 800caf0:	3f01      	subs	r7, #1
 800caf2:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800caf6:	463e      	mov	r6, r7
 800caf8:	4604      	mov	r4, r0
 800cafa:	1c55      	adds	r5, r2, #1
 800cafc:	4689      	mov	r9, r1
 800cafe:	4698      	mov	r8, r3
 800cb00:	f007 0701 	and.w	r7, r7, #1
 800cb04:	47e0      	blx	ip
 800cb06:	b306      	cbz	r6, 800cb4a <GUI_USAGE_AddRect+0x62>
 800cb08:	b157      	cbz	r7, 800cb20 <GUI_USAGE_AddRect+0x38>
 800cb0a:	68a3      	ldr	r3, [r4, #8]
 800cb0c:	1c6f      	adds	r7, r5, #1
 800cb0e:	462a      	mov	r2, r5
 800cb10:	4620      	mov	r0, r4
 800cb12:	685d      	ldr	r5, [r3, #4]
 800cb14:	4649      	mov	r1, r9
 800cb16:	4643      	mov	r3, r8
 800cb18:	47a8      	blx	r5
 800cb1a:	3e01      	subs	r6, #1
 800cb1c:	463d      	mov	r5, r7
 800cb1e:	d016      	beq.n	800cb4e <GUI_USAGE_AddRect+0x66>
 800cb20:	68a7      	ldr	r7, [r4, #8]
 800cb22:	462a      	mov	r2, r5
 800cb24:	4620      	mov	r0, r4
 800cb26:	4649      	mov	r1, r9
 800cb28:	4643      	mov	r3, r8
 800cb2a:	687f      	ldr	r7, [r7, #4]
 800cb2c:	47b8      	blx	r7
 800cb2e:	68a1      	ldr	r1, [r4, #8]
 800cb30:	3501      	adds	r5, #1
 800cb32:	684f      	ldr	r7, [r1, #4]
 800cb34:	462a      	mov	r2, r5
 800cb36:	4620      	mov	r0, r4
 800cb38:	4649      	mov	r1, r9
 800cb3a:	4643      	mov	r3, r8
 800cb3c:	3e01      	subs	r6, #1
 800cb3e:	47b8      	blx	r7
 800cb40:	3501      	adds	r5, #1
 800cb42:	3e01      	subs	r6, #1
 800cb44:	d1ec      	bne.n	800cb20 <GUI_USAGE_AddRect+0x38>
 800cb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb52:	bf00      	nop

0800cb54 <GUI_MEMDEV_GetDataPtr>:
 800cb54:	b510      	push	{r4, lr}
 800cb56:	4604      	mov	r4, r0
 800cb58:	b082      	sub	sp, #8
 800cb5a:	b148      	cbz	r0, 800cb70 <GUI_MEMDEV_GetDataPtr+0x1c>
 800cb5c:	f7fb ff9e 	bl	8008a9c <GUI_ALLOC_LockH>
 800cb60:	4604      	mov	r4, r0
 800cb62:	a802      	add	r0, sp, #8
 800cb64:	f840 4d04 	str.w	r4, [r0, #-4]!
 800cb68:	f7fb ffaa 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800cb6c:	f104 0018 	add.w	r0, r4, #24
 800cb70:	b002      	add	sp, #8
 800cb72:	bd10      	pop	{r4, pc}

0800cb74 <GUI_MEMDEV_GetBitsPerPixel>:
 800cb74:	b530      	push	{r4, r5, lr}
 800cb76:	4604      	mov	r4, r0
 800cb78:	b083      	sub	sp, #12
 800cb7a:	b170      	cbz	r0, 800cb9a <GUI_MEMDEV_GetBitsPerPixel+0x26>
 800cb7c:	f7fb ff8e 	bl	8008a9c <GUI_ALLOC_LockH>
 800cb80:	ad02      	add	r5, sp, #8
 800cb82:	6803      	ldr	r3, [r0, #0]
 800cb84:	f845 0d04 	str.w	r0, [r5, #-4]!
 800cb88:	6918      	ldr	r0, [r3, #16]
 800cb8a:	6881      	ldr	r1, [r0, #8]
 800cb8c:	4788      	blx	r1
 800cb8e:	f000 f881 	bl	800cc94 <LCD__GetBPPDevice>
 800cb92:	4604      	mov	r4, r0
 800cb94:	4628      	mov	r0, r5
 800cb96:	f7fb ff93 	bl	8008ac0 <GUI_ALLOC_UnlockH>
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	b003      	add	sp, #12
 800cb9e:	bd30      	pop	{r4, r5, pc}

0800cba0 <LCD_UpdateColorIndices>:
 800cba0:	b510      	push	{r4, lr}
 800cba2:	f648 0408 	movw	r4, #34824	; 0x8808
 800cba6:	f6c1 74fe 	movt	r4, #8190	; 0x1ffe
 800cbaa:	6823      	ldr	r3, [r4, #0]
 800cbac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cbae:	f7fe fd8b 	bl	800b6c8 <LCD_Color2Index>
 800cbb2:	f7fe fdad 	bl	800b710 <LCD_SetColorIndex>
 800cbb6:	6820      	ldr	r0, [r4, #0]
 800cbb8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800cbba:	f7fe fd85 	bl	800b6c8 <LCD_Color2Index>
 800cbbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbc2:	f7fe bdb5 	b.w	800b730 <LCD_SetBkColorIndex>
 800cbc6:	bf00      	nop

0800cbc8 <LCD_GetNumLayers>:
 800cbc8:	b508      	push	{r3, lr}
 800cbca:	2000      	movs	r0, #0
 800cbcc:	f7fa fb50 	bl	8007270 <GUI_DEVICE__GetpDriver>
 800cbd0:	3000      	adds	r0, #0
 800cbd2:	bf18      	it	ne
 800cbd4:	2001      	movne	r0, #1
 800cbd6:	bd08      	pop	{r3, pc}

0800cbd8 <LCD_GetBitsPerPixelEx>:
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	b508      	push	{r3, lr}
 800cbdc:	dd01      	ble.n	800cbe2 <LCD_GetBitsPerPixelEx+0xa>
 800cbde:	2000      	movs	r0, #0
 800cbe0:	bd08      	pop	{r3, pc}
 800cbe2:	f7fa fb45 	bl	8007270 <GUI_DEVICE__GetpDriver>
 800cbe6:	b120      	cbz	r0, 800cbf2 <LCD_GetBitsPerPixelEx+0x1a>
 800cbe8:	68c2      	ldr	r2, [r0, #12]
 800cbea:	2108      	movs	r1, #8
 800cbec:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800cbee:	4798      	blx	r3
 800cbf0:	bd08      	pop	{r3, pc}
 800cbf2:	bd08      	pop	{r3, pc}

0800cbf4 <LCD_GetNumColorsEx>:
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	b508      	push	{r3, lr}
 800cbf8:	dd01      	ble.n	800cbfe <LCD_GetNumColorsEx+0xa>
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	bd08      	pop	{r3, pc}
 800cbfe:	f7fa fb37 	bl	8007270 <GUI_DEVICE__GetpDriver>
 800cc02:	b120      	cbz	r0, 800cc0e <LCD_GetNumColorsEx+0x1a>
 800cc04:	68c2      	ldr	r2, [r0, #12]
 800cc06:	2109      	movs	r1, #9
 800cc08:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800cc0a:	4798      	blx	r3
 800cc0c:	bd08      	pop	{r3, pc}
 800cc0e:	bd08      	pop	{r3, pc}

0800cc10 <LCD_GetNumColors>:
 800cc10:	b508      	push	{r3, lr}
 800cc12:	4b07      	ldr	r3, [pc, #28]	; (800cc30 <LCD_GetNumColors+0x20>)
 800cc14:	6818      	ldr	r0, [r3, #0]
 800cc16:	7c40      	ldrb	r0, [r0, #17]
 800cc18:	b108      	cbz	r0, 800cc1e <LCD_GetNumColors+0xe>
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	bd08      	pop	{r3, pc}
 800cc1e:	f7fa fb27 	bl	8007270 <GUI_DEVICE__GetpDriver>
 800cc22:	b120      	cbz	r0, 800cc2e <LCD_GetNumColors+0x1e>
 800cc24:	68c2      	ldr	r2, [r0, #12]
 800cc26:	2109      	movs	r1, #9
 800cc28:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800cc2a:	4798      	blx	r3
 800cc2c:	bd08      	pop	{r3, pc}
 800cc2e:	bd08      	pop	{r3, pc}
 800cc30:	1ffe8808 	.word	0x1ffe8808

0800cc34 <GUI_GetBitsPerPixelEx>:
 800cc34:	b508      	push	{r3, lr}
 800cc36:	f649 5308 	movw	r3, #40200	; 0x9d08
 800cc3a:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800cc3e:	2108      	movs	r1, #8
 800cc40:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800cc44:	68c2      	ldr	r2, [r0, #12]
 800cc46:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800cc48:	4798      	blx	r3
 800cc4a:	bd08      	pop	{r3, pc}

0800cc4c <LCD_GetPalette>:
 800cc4c:	b508      	push	{r3, lr}
 800cc4e:	4b06      	ldr	r3, [pc, #24]	; (800cc68 <LCD_GetPalette+0x1c>)
 800cc50:	6818      	ldr	r0, [r3, #0]
 800cc52:	7c40      	ldrb	r0, [r0, #17]
 800cc54:	f7fa fb0c 	bl	8007270 <GUI_DEVICE__GetpDriver>
 800cc58:	b120      	cbz	r0, 800cc64 <LCD_GetPalette+0x18>
 800cc5a:	68c2      	ldr	r2, [r0, #12]
 800cc5c:	2102      	movs	r1, #2
 800cc5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cc60:	4798      	blx	r3
 800cc62:	bd08      	pop	{r3, pc}
 800cc64:	bd08      	pop	{r3, pc}
 800cc66:	bf00      	nop
 800cc68:	1ffe8808 	.word	0x1ffe8808

0800cc6c <GUI_GetpfIndex2ColorEx>:
 800cc6c:	f649 5308 	movw	r3, #40200	; 0x9d08
 800cc70:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800cc74:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800cc78:	6901      	ldr	r1, [r0, #16]
 800cc7a:	6848      	ldr	r0, [r1, #4]
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop

0800cc80 <GUI_GetpfColor2IndexEx>:
 800cc80:	f649 5308 	movw	r3, #40200	; 0x9d08
 800cc84:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800cc88:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800cc8c:	6901      	ldr	r1, [r0, #16]
 800cc8e:	6808      	ldr	r0, [r1, #0]
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop

0800cc94 <LCD__GetBPPDevice>:
 800cc94:	b1c8      	cbz	r0, 800ccca <LCD__GetBPPDevice+0x36>
 800cc96:	f030 0301 	bics.w	r3, r0, #1
 800cc9a:	d017      	beq.n	800cccc <LCD__GetBPPDevice+0x38>
 800cc9c:	f030 0303 	bics.w	r3, r0, #3
 800cca0:	d101      	bne.n	800cca6 <LCD__GetBPPDevice+0x12>
 800cca2:	2008      	movs	r0, #8
 800cca4:	4770      	bx	lr
 800cca6:	f030 0307 	bics.w	r3, r0, #7
 800ccaa:	d0fa      	beq.n	800cca2 <LCD__GetBPPDevice+0xe>
 800ccac:	f030 030f 	bics.w	r3, r0, #15
 800ccb0:	d0f7      	beq.n	800cca2 <LCD__GetBPPDevice+0xe>
 800ccb2:	f030 031f 	bics.w	r3, r0, #31
 800ccb6:	d0f4      	beq.n	800cca2 <LCD__GetBPPDevice+0xe>
 800ccb8:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800ccbc:	d0f1      	beq.n	800cca2 <LCD__GetBPPDevice+0xe>
 800ccbe:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800ccc2:	f023 0101 	bic.w	r1, r3, #1
 800ccc6:	b919      	cbnz	r1, 800ccd0 <LCD__GetBPPDevice+0x3c>
 800ccc8:	2010      	movs	r0, #16
 800ccca:	4770      	bx	lr
 800cccc:	2001      	movs	r0, #1
 800ccce:	4770      	bx	lr
 800ccd0:	f420 627f 	bic.w	r2, r0, #4080	; 0xff0
 800ccd4:	f022 030f 	bic.w	r3, r2, #15
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d0f5      	beq.n	800ccc8 <LCD__GetBPPDevice+0x34>
 800ccdc:	f420 41ff 	bic.w	r1, r0, #32640	; 0x7f80
 800cce0:	f021 027f 	bic.w	r2, r1, #127	; 0x7f
 800cce4:	2a00      	cmp	r2, #0
 800cce6:	d0ef      	beq.n	800ccc8 <LCD__GetBPPDevice+0x34>
 800cce8:	0c00      	lsrs	r0, r0, #16
 800ccea:	0403      	lsls	r3, r0, #16
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	bf0c      	ite	eq
 800ccf0:	2010      	moveq	r0, #16
 800ccf2:	2020      	movne	r0, #32
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop

0800ccf8 <LCD_GetBkColorIndex>:
 800ccf8:	f648 0308 	movw	r3, #34824	; 0x8808
 800ccfc:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800cd00:	6818      	ldr	r0, [r3, #0]
 800cd02:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800cd04:	6808      	ldr	r0, [r1, #0]
 800cd06:	4770      	bx	lr

0800cd08 <LCD_GetColorIndex>:
 800cd08:	f648 0308 	movw	r3, #34824	; 0x8808
 800cd0c:	f6c1 73fe 	movt	r3, #8190	; 0x1ffe
 800cd10:	6818      	ldr	r0, [r3, #0]
 800cd12:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800cd14:	6808      	ldr	r0, [r1, #0]
 800cd16:	4770      	bx	lr

0800cd18 <GUI__CompactPixelIndices>:
 800cd18:	2a08      	cmp	r2, #8
 800cd1a:	b470      	push	{r4, r5, r6}
 800cd1c:	dd21      	ble.n	800cd62 <GUI__CompactPixelIndices+0x4a>
 800cd1e:	2a10      	cmp	r2, #16
 800cd20:	dc44      	bgt.n	800cdac <GUI__CompactPixelIndices+0x94>
 800cd22:	4603      	mov	r3, r0
 800cd24:	6804      	ldr	r4, [r0, #0]
 800cd26:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800cd2a:	f823 4b02 	strh.w	r4, [r3], #2
 800cd2e:	4602      	mov	r2, r0
 800cd30:	1a08      	subs	r0, r1, r0
 800cd32:	3802      	subs	r0, #2
 800cd34:	428b      	cmp	r3, r1
 800cd36:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800cd3a:	d010      	beq.n	800cd5e <GUI__CompactPixelIndices+0x46>
 800cd3c:	b128      	cbz	r0, 800cd4a <GUI__CompactPixelIndices+0x32>
 800cd3e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800cd42:	f823 0b02 	strh.w	r0, [r3], #2
 800cd46:	428b      	cmp	r3, r1
 800cd48:	d009      	beq.n	800cd5e <GUI__CompactPixelIndices+0x46>
 800cd4a:	6855      	ldr	r5, [r2, #4]
 800cd4c:	6894      	ldr	r4, [r2, #8]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3208      	adds	r2, #8
 800cd52:	f820 5b02 	strh.w	r5, [r0], #2
 800cd56:	805c      	strh	r4, [r3, #2]
 800cd58:	1c83      	adds	r3, r0, #2
 800cd5a:	428b      	cmp	r3, r1
 800cd5c:	d1f5      	bne.n	800cd4a <GUI__CompactPixelIndices+0x32>
 800cd5e:	2001      	movs	r0, #1
 800cd60:	e025      	b.n	800cdae <GUI__CompactPixelIndices+0x96>
 800cd62:	2a02      	cmp	r2, #2
 800cd64:	d025      	beq.n	800cdb2 <GUI__CompactPixelIndices+0x9a>
 800cd66:	2a04      	cmp	r2, #4
 800cd68:	f000 80ca 	beq.w	800cf00 <GUI__CompactPixelIndices+0x1e8>
 800cd6c:	2a01      	cmp	r2, #1
 800cd6e:	d079      	beq.n	800ce64 <GUI__CompactPixelIndices+0x14c>
 800cd70:	4603      	mov	r3, r0
 800cd72:	6804      	ldr	r4, [r0, #0]
 800cd74:	f803 4b01 	strb.w	r4, [r3], #1
 800cd78:	1841      	adds	r1, r0, r1
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	43c0      	mvns	r0, r0
 800cd7e:	1808      	adds	r0, r1, r0
 800cd80:	428b      	cmp	r3, r1
 800cd82:	f000 0001 	and.w	r0, r0, #1
 800cd86:	d0ea      	beq.n	800cd5e <GUI__CompactPixelIndices+0x46>
 800cd88:	b128      	cbz	r0, 800cd96 <GUI__CompactPixelIndices+0x7e>
 800cd8a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800cd8e:	f803 0b01 	strb.w	r0, [r3], #1
 800cd92:	428b      	cmp	r3, r1
 800cd94:	d0e3      	beq.n	800cd5e <GUI__CompactPixelIndices+0x46>
 800cd96:	6854      	ldr	r4, [r2, #4]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f800 4b01 	strb.w	r4, [r0], #1
 800cd9e:	6894      	ldr	r4, [r2, #8]
 800cda0:	705c      	strb	r4, [r3, #1]
 800cda2:	1c43      	adds	r3, r0, #1
 800cda4:	3208      	adds	r2, #8
 800cda6:	428b      	cmp	r3, r1
 800cda8:	d1f5      	bne.n	800cd96 <GUI__CompactPixelIndices+0x7e>
 800cdaa:	e7d8      	b.n	800cd5e <GUI__CompactPixelIndices+0x46>
 800cdac:	2000      	movs	r0, #0
 800cdae:	bc70      	pop	{r4, r5, r6}
 800cdb0:	4770      	bx	lr
 800cdb2:	1e4b      	subs	r3, r1, #1
 800cdb4:	075c      	lsls	r4, r3, #29
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	d51b      	bpl.n	800cdf2 <GUI__CompactPixelIndices+0xda>
 800cdba:	e890 0018 	ldmia.w	r0, {r3, r4}
 800cdbe:	019b      	lsls	r3, r3, #6
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	f004 0403 	and.w	r4, r4, #3
 800cdc6:	2902      	cmp	r1, #2
 800cdc8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800cdcc:	f000 8095 	beq.w	800cefa <GUI__CompactPixelIndices+0x1e2>
 800cdd0:	6884      	ldr	r4, [r0, #8]
 800cdd2:	2903      	cmp	r1, #3
 800cdd4:	f004 0403 	and.w	r4, r4, #3
 800cdd8:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 800cddc:	f000 808d 	beq.w	800cefa <GUI__CompactPixelIndices+0x1e2>
 800cde0:	68c4      	ldr	r4, [r0, #12]
 800cde2:	f004 0403 	and.w	r4, r4, #3
 800cde6:	4323      	orrs	r3, r4
 800cde8:	3010      	adds	r0, #16
 800cdea:	3904      	subs	r1, #4
 800cdec:	f802 3b01 	strb.w	r3, [r2], #1
 800cdf0:	d0b5      	beq.n	800cd5e <GUI__CompactPixelIndices+0x46>
 800cdf2:	6803      	ldr	r3, [r0, #0]
 800cdf4:	019c      	lsls	r4, r3, #6
 800cdf6:	2901      	cmp	r1, #1
 800cdf8:	b2e3      	uxtb	r3, r4
 800cdfa:	f100 0410 	add.w	r4, r0, #16
 800cdfe:	d07c      	beq.n	800cefa <GUI__CompactPixelIndices+0x1e2>
 800ce00:	6845      	ldr	r5, [r0, #4]
 800ce02:	2902      	cmp	r1, #2
 800ce04:	f005 0503 	and.w	r5, r5, #3
 800ce08:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800ce0c:	d075      	beq.n	800cefa <GUI__CompactPixelIndices+0x1e2>
 800ce0e:	6885      	ldr	r5, [r0, #8]
 800ce10:	2903      	cmp	r1, #3
 800ce12:	f005 0503 	and.w	r5, r5, #3
 800ce16:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 800ce1a:	d06e      	beq.n	800cefa <GUI__CompactPixelIndices+0x1e2>
 800ce1c:	68c5      	ldr	r5, [r0, #12]
 800ce1e:	f005 0503 	and.w	r5, r5, #3
 800ce22:	432b      	orrs	r3, r5
 800ce24:	3904      	subs	r1, #4
 800ce26:	f802 3b01 	strb.w	r3, [r2], #1
 800ce2a:	d098      	beq.n	800cd5e <GUI__CompactPixelIndices+0x46>
 800ce2c:	6903      	ldr	r3, [r0, #16]
 800ce2e:	6860      	ldr	r0, [r4, #4]
 800ce30:	019b      	lsls	r3, r3, #6
 800ce32:	f000 0003 	and.w	r0, r0, #3
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	2902      	cmp	r1, #2
 800ce3a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800ce3e:	f104 0010 	add.w	r0, r4, #16
 800ce42:	d05a      	beq.n	800cefa <GUI__CompactPixelIndices+0x1e2>
 800ce44:	68a5      	ldr	r5, [r4, #8]
 800ce46:	2903      	cmp	r1, #3
 800ce48:	f005 0503 	and.w	r5, r5, #3
 800ce4c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 800ce50:	d053      	beq.n	800cefa <GUI__CompactPixelIndices+0x1e2>
 800ce52:	68e4      	ldr	r4, [r4, #12]
 800ce54:	f004 0403 	and.w	r4, r4, #3
 800ce58:	4323      	orrs	r3, r4
 800ce5a:	3904      	subs	r1, #4
 800ce5c:	f802 3b01 	strb.w	r3, [r2], #1
 800ce60:	d1c7      	bne.n	800cdf2 <GUI__CompactPixelIndices+0xda>
 800ce62:	e77c      	b.n	800cd5e <GUI__CompactPixelIndices+0x46>
 800ce64:	6802      	ldr	r2, [r0, #0]
 800ce66:	01d3      	lsls	r3, r2, #7
 800ce68:	2901      	cmp	r1, #1
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	d042      	beq.n	800cef4 <GUI__CompactPixelIndices+0x1dc>
 800ce6e:	6842      	ldr	r2, [r0, #4]
 800ce70:	3902      	subs	r1, #2
 800ce72:	f002 0201 	and.w	r2, r2, #1
 800ce76:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800ce7a:	f100 0208 	add.w	r2, r0, #8
 800ce7e:	d039      	beq.n	800cef4 <GUI__CompactPixelIndices+0x1dc>
 800ce80:	4604      	mov	r4, r0
 800ce82:	6815      	ldr	r5, [r2, #0]
 800ce84:	2901      	cmp	r1, #1
 800ce86:	f005 0501 	and.w	r5, r5, #1
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800ce90:	d030      	beq.n	800cef4 <GUI__CompactPixelIndices+0x1dc>
 800ce92:	6855      	ldr	r5, [r2, #4]
 800ce94:	f005 0501 	and.w	r5, r5, #1
 800ce98:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800ce9c:	2902      	cmp	r1, #2
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	d028      	beq.n	800cef4 <GUI__CompactPixelIndices+0x1dc>
 800cea2:	6895      	ldr	r5, [r2, #8]
 800cea4:	2903      	cmp	r1, #3
 800cea6:	f005 0501 	and.w	r5, r5, #1
 800ceaa:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
 800ceae:	d021      	beq.n	800cef4 <GUI__CompactPixelIndices+0x1dc>
 800ceb0:	68d5      	ldr	r5, [r2, #12]
 800ceb2:	2904      	cmp	r1, #4
 800ceb4:	f005 0501 	and.w	r5, r5, #1
 800ceb8:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 800cebc:	d01a      	beq.n	800cef4 <GUI__CompactPixelIndices+0x1dc>
 800cebe:	6915      	ldr	r5, [r2, #16]
 800cec0:	2905      	cmp	r1, #5
 800cec2:	f005 0501 	and.w	r5, r5, #1
 800cec6:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 800ceca:	d013      	beq.n	800cef4 <GUI__CompactPixelIndices+0x1dc>
 800cecc:	6950      	ldr	r0, [r2, #20]
 800cece:	f000 0001 	and.w	r0, r0, #1
 800ced2:	4303      	orrs	r3, r0
 800ced4:	f804 3b01 	strb.w	r3, [r4], #1
 800ced8:	6993      	ldr	r3, [r2, #24]
 800ceda:	01d8      	lsls	r0, r3, #7
 800cedc:	2906      	cmp	r1, #6
 800cede:	b2c3      	uxtb	r3, r0
 800cee0:	4620      	mov	r0, r4
 800cee2:	d007      	beq.n	800cef4 <GUI__CompactPixelIndices+0x1dc>
 800cee4:	69d5      	ldr	r5, [r2, #28]
 800cee6:	3220      	adds	r2, #32
 800cee8:	f005 0501 	and.w	r5, r5, #1
 800ceec:	3907      	subs	r1, #7
 800ceee:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800cef2:	d1c6      	bne.n	800ce82 <GUI__CompactPixelIndices+0x16a>
 800cef4:	7003      	strb	r3, [r0, #0]
 800cef6:	2001      	movs	r0, #1
 800cef8:	e759      	b.n	800cdae <GUI__CompactPixelIndices+0x96>
 800cefa:	7013      	strb	r3, [r2, #0]
 800cefc:	2001      	movs	r0, #1
 800cefe:	e756      	b.n	800cdae <GUI__CompactPixelIndices+0x96>
 800cf00:	1e4c      	subs	r4, r1, #1
 800cf02:	07a2      	lsls	r2, r4, #30
 800cf04:	f100 0308 	add.w	r3, r0, #8
 800cf08:	d50b      	bpl.n	800cf22 <GUI__CompactPixelIndices+0x20a>
 800cf0a:	e913 0014 	ldmdb	r3, {r2, r4}
 800cf0e:	f004 040f 	and.w	r4, r4, #15
 800cf12:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
 800cf16:	3308      	adds	r3, #8
 800cf18:	3902      	subs	r1, #2
 800cf1a:	f800 2b01 	strb.w	r2, [r0], #1
 800cf1e:	f43f af1e 	beq.w	800cd5e <GUI__CompactPixelIndices+0x46>
 800cf22:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800cf26:	012c      	lsls	r4, r5, #4
 800cf28:	2901      	cmp	r1, #1
 800cf2a:	b2e5      	uxtb	r5, r4
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	f103 0408 	add.w	r4, r3, #8
 800cf32:	d016      	beq.n	800cf62 <GUI__CompactPixelIndices+0x24a>
 800cf34:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800cf38:	f003 030f 	and.w	r3, r3, #15
 800cf3c:	431d      	orrs	r5, r3
 800cf3e:	3902      	subs	r1, #2
 800cf40:	f802 5b01 	strb.w	r5, [r2], #1
 800cf44:	f104 0308 	add.w	r3, r4, #8
 800cf48:	f43f af09 	beq.w	800cd5e <GUI__CompactPixelIndices+0x46>
 800cf4c:	e914 0060 	ldmdb	r4, {r5, r6}
 800cf50:	f006 040f 	and.w	r4, r6, #15
 800cf54:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 800cf58:	7044      	strb	r4, [r0, #1]
 800cf5a:	1c50      	adds	r0, r2, #1
 800cf5c:	3902      	subs	r1, #2
 800cf5e:	d1e0      	bne.n	800cf22 <GUI__CompactPixelIndices+0x20a>
 800cf60:	e6fd      	b.n	800cd5e <GUI__CompactPixelIndices+0x46>
 800cf62:	7005      	strb	r5, [r0, #0]
 800cf64:	4608      	mov	r0, r1
 800cf66:	e722      	b.n	800cdae <GUI__CompactPixelIndices+0x96>

0800cf68 <GUI_SelectLCD>:
 800cf68:	b508      	push	{r3, lr}
 800cf6a:	f000 f82f 	bl	800cfcc <LCD_SelectLCD>
 800cf6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cf72:	f7ff be15 	b.w	800cba0 <LCD_UpdateColorIndices>
 800cf76:	bf00      	nop

0800cf78 <GUI_CalcColorDist>:
 800cf78:	b2c2      	uxtb	r2, r0
 800cf7a:	b2cb      	uxtb	r3, r1
 800cf7c:	b410      	push	{r4}
 800cf7e:	1ad4      	subs	r4, r2, r3
 800cf80:	b2a3      	uxth	r3, r4
 800cf82:	b29a      	uxth	r2, r3
 800cf84:	0414      	lsls	r4, r2, #16
 800cf86:	d41d      	bmi.n	800cfc4 <GUI_CalcColorDist+0x4c>
 800cf88:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800cf8c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800cf90:	1ae4      	subs	r4, r4, r3
 800cf92:	b2a4      	uxth	r4, r4
 800cf94:	b2a3      	uxth	r3, r4
 800cf96:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800cf9a:	fb02 f202 	mul.w	r2, r2, r2
 800cf9e:	d10e      	bne.n	800cfbe <GUI_CalcColorDist+0x46>
 800cfa0:	0c09      	lsrs	r1, r1, #16
 800cfa2:	ebc1 4010 	rsb	r0, r1, r0, lsr #16
 800cfa6:	b281      	uxth	r1, r0
 800cfa8:	b288      	uxth	r0, r1
 800cfaa:	fb03 2303 	mla	r3, r3, r3, r2
 800cfae:	0402      	lsls	r2, r0, #16
 800cfb0:	d501      	bpl.n	800cfb6 <GUI_CalcColorDist+0x3e>
 800cfb2:	424a      	negs	r2, r1
 800cfb4:	b290      	uxth	r0, r2
 800cfb6:	fb00 3000 	mla	r0, r0, r0, r3
 800cfba:	bc10      	pop	{r4}
 800cfbc:	4770      	bx	lr
 800cfbe:	4263      	negs	r3, r4
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	e7ed      	b.n	800cfa0 <GUI_CalcColorDist+0x28>
 800cfc4:	425a      	negs	r2, r3
 800cfc6:	b292      	uxth	r2, r2
 800cfc8:	e7de      	b.n	800cf88 <GUI_CalcColorDist+0x10>
 800cfca:	bf00      	nop

0800cfcc <LCD_SelectLCD>:
 800cfcc:	b510      	push	{r4, lr}
 800cfce:	4c0d      	ldr	r4, [pc, #52]	; (800d004 <LCD_SelectLCD+0x38>)
 800cfd0:	4b0d      	ldr	r3, [pc, #52]	; (800d008 <LCD_SelectLCD+0x3c>)
 800cfd2:	6822      	ldr	r2, [r4, #0]
 800cfd4:	7c51      	ldrb	r1, [r2, #17]
 800cfd6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800cfda:	b910      	cbnz	r0, 800cfe2 <LCD_SelectLCD+0x16>
 800cfdc:	e008      	b.n	800cff0 <LCD_SelectLCD+0x24>
 800cfde:	6800      	ldr	r0, [r0, #0]
 800cfe0:	b130      	cbz	r0, 800cff0 <LCD_SelectLCD+0x24>
 800cfe2:	68c1      	ldr	r1, [r0, #12]
 800cfe4:	680b      	ldr	r3, [r1, #0]
 800cfe6:	2b04      	cmp	r3, #4
 800cfe8:	d1f9      	bne.n	800cfde <LCD_SelectLCD+0x12>
 800cfea:	f7fa f957 	bl	800729c <GUI_DEVICE_Unlink>
 800cfee:	6822      	ldr	r2, [r4, #0]
 800cff0:	f102 0008 	add.w	r0, r2, #8
 800cff4:	2100      	movs	r1, #0
 800cff6:	6491      	str	r1, [r2, #72]	; 0x48
 800cff8:	6150      	str	r0, [r2, #20]
 800cffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cffe:	f7fe bae5 	b.w	800b5cc <LCD_SetClipRectMax>
 800d002:	bf00      	nop
 800d004:	1ffe8808 	.word	0x1ffe8808
 800d008:	1ffe9d08 	.word	0x1ffe9d08

0800d00c <__aeabi_drsub>:
 800d00c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800d010:	e002      	b.n	800d018 <__adddf3>
 800d012:	bf00      	nop

0800d014 <__aeabi_dsub>:
 800d014:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800d018 <__adddf3>:
 800d018:	b530      	push	{r4, r5, lr}
 800d01a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800d01e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800d022:	ea94 0f05 	teq	r4, r5
 800d026:	bf08      	it	eq
 800d028:	ea90 0f02 	teqeq	r0, r2
 800d02c:	bf1f      	itttt	ne
 800d02e:	ea54 0c00 	orrsne.w	ip, r4, r0
 800d032:	ea55 0c02 	orrsne.w	ip, r5, r2
 800d036:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800d03a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800d03e:	f000 80e2 	beq.w	800d206 <__adddf3+0x1ee>
 800d042:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800d046:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800d04a:	bfb8      	it	lt
 800d04c:	426d      	neglt	r5, r5
 800d04e:	dd0c      	ble.n	800d06a <__adddf3+0x52>
 800d050:	442c      	add	r4, r5
 800d052:	ea80 0202 	eor.w	r2, r0, r2
 800d056:	ea81 0303 	eor.w	r3, r1, r3
 800d05a:	ea82 0000 	eor.w	r0, r2, r0
 800d05e:	ea83 0101 	eor.w	r1, r3, r1
 800d062:	ea80 0202 	eor.w	r2, r0, r2
 800d066:	ea81 0303 	eor.w	r3, r1, r3
 800d06a:	2d36      	cmp	r5, #54	; 0x36
 800d06c:	bf88      	it	hi
 800d06e:	bd30      	pophi	{r4, r5, pc}
 800d070:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800d074:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800d078:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800d07c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800d080:	d002      	beq.n	800d088 <__adddf3+0x70>
 800d082:	4240      	negs	r0, r0
 800d084:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d088:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800d08c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d090:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800d094:	d002      	beq.n	800d09c <__adddf3+0x84>
 800d096:	4252      	negs	r2, r2
 800d098:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800d09c:	ea94 0f05 	teq	r4, r5
 800d0a0:	f000 80a7 	beq.w	800d1f2 <__adddf3+0x1da>
 800d0a4:	f1a4 0401 	sub.w	r4, r4, #1
 800d0a8:	f1d5 0e20 	rsbs	lr, r5, #32
 800d0ac:	db0d      	blt.n	800d0ca <__adddf3+0xb2>
 800d0ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 800d0b2:	fa22 f205 	lsr.w	r2, r2, r5
 800d0b6:	1880      	adds	r0, r0, r2
 800d0b8:	f141 0100 	adc.w	r1, r1, #0
 800d0bc:	fa03 f20e 	lsl.w	r2, r3, lr
 800d0c0:	1880      	adds	r0, r0, r2
 800d0c2:	fa43 f305 	asr.w	r3, r3, r5
 800d0c6:	4159      	adcs	r1, r3
 800d0c8:	e00e      	b.n	800d0e8 <__adddf3+0xd0>
 800d0ca:	f1a5 0520 	sub.w	r5, r5, #32
 800d0ce:	f10e 0e20 	add.w	lr, lr, #32
 800d0d2:	2a01      	cmp	r2, #1
 800d0d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 800d0d8:	bf28      	it	cs
 800d0da:	f04c 0c02 	orrcs.w	ip, ip, #2
 800d0de:	fa43 f305 	asr.w	r3, r3, r5
 800d0e2:	18c0      	adds	r0, r0, r3
 800d0e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800d0e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d0ec:	d507      	bpl.n	800d0fe <__adddf3+0xe6>
 800d0ee:	f04f 0e00 	mov.w	lr, #0
 800d0f2:	f1dc 0c00 	rsbs	ip, ip, #0
 800d0f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 800d0fa:	eb6e 0101 	sbc.w	r1, lr, r1
 800d0fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d102:	d31b      	bcc.n	800d13c <__adddf3+0x124>
 800d104:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800d108:	d30c      	bcc.n	800d124 <__adddf3+0x10c>
 800d10a:	0849      	lsrs	r1, r1, #1
 800d10c:	ea5f 0030 	movs.w	r0, r0, rrx
 800d110:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800d114:	f104 0401 	add.w	r4, r4, #1
 800d118:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800d11c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800d120:	f080 809a 	bcs.w	800d258 <__adddf3+0x240>
 800d124:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800d128:	bf08      	it	eq
 800d12a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800d12e:	f150 0000 	adcs.w	r0, r0, #0
 800d132:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800d136:	ea41 0105 	orr.w	r1, r1, r5
 800d13a:	bd30      	pop	{r4, r5, pc}
 800d13c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800d140:	4140      	adcs	r0, r0
 800d142:	eb41 0101 	adc.w	r1, r1, r1
 800d146:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800d14a:	f1a4 0401 	sub.w	r4, r4, #1
 800d14e:	d1e9      	bne.n	800d124 <__adddf3+0x10c>
 800d150:	f091 0f00 	teq	r1, #0
 800d154:	bf04      	itt	eq
 800d156:	4601      	moveq	r1, r0
 800d158:	2000      	moveq	r0, #0
 800d15a:	fab1 f381 	clz	r3, r1
 800d15e:	bf08      	it	eq
 800d160:	3320      	addeq	r3, #32
 800d162:	f1a3 030b 	sub.w	r3, r3, #11
 800d166:	f1b3 0220 	subs.w	r2, r3, #32
 800d16a:	da0c      	bge.n	800d186 <__adddf3+0x16e>
 800d16c:	320c      	adds	r2, #12
 800d16e:	dd08      	ble.n	800d182 <__adddf3+0x16a>
 800d170:	f102 0c14 	add.w	ip, r2, #20
 800d174:	f1c2 020c 	rsb	r2, r2, #12
 800d178:	fa01 f00c 	lsl.w	r0, r1, ip
 800d17c:	fa21 f102 	lsr.w	r1, r1, r2
 800d180:	e00c      	b.n	800d19c <__adddf3+0x184>
 800d182:	f102 0214 	add.w	r2, r2, #20
 800d186:	bfd8      	it	le
 800d188:	f1c2 0c20 	rsble	ip, r2, #32
 800d18c:	fa01 f102 	lsl.w	r1, r1, r2
 800d190:	fa20 fc0c 	lsr.w	ip, r0, ip
 800d194:	bfdc      	itt	le
 800d196:	ea41 010c 	orrle.w	r1, r1, ip
 800d19a:	4090      	lslle	r0, r2
 800d19c:	1ae4      	subs	r4, r4, r3
 800d19e:	bfa2      	ittt	ge
 800d1a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800d1a4:	4329      	orrge	r1, r5
 800d1a6:	bd30      	popge	{r4, r5, pc}
 800d1a8:	ea6f 0404 	mvn.w	r4, r4
 800d1ac:	3c1f      	subs	r4, #31
 800d1ae:	da1c      	bge.n	800d1ea <__adddf3+0x1d2>
 800d1b0:	340c      	adds	r4, #12
 800d1b2:	dc0e      	bgt.n	800d1d2 <__adddf3+0x1ba>
 800d1b4:	f104 0414 	add.w	r4, r4, #20
 800d1b8:	f1c4 0220 	rsb	r2, r4, #32
 800d1bc:	fa20 f004 	lsr.w	r0, r0, r4
 800d1c0:	fa01 f302 	lsl.w	r3, r1, r2
 800d1c4:	ea40 0003 	orr.w	r0, r0, r3
 800d1c8:	fa21 f304 	lsr.w	r3, r1, r4
 800d1cc:	ea45 0103 	orr.w	r1, r5, r3
 800d1d0:	bd30      	pop	{r4, r5, pc}
 800d1d2:	f1c4 040c 	rsb	r4, r4, #12
 800d1d6:	f1c4 0220 	rsb	r2, r4, #32
 800d1da:	fa20 f002 	lsr.w	r0, r0, r2
 800d1de:	fa01 f304 	lsl.w	r3, r1, r4
 800d1e2:	ea40 0003 	orr.w	r0, r0, r3
 800d1e6:	4629      	mov	r1, r5
 800d1e8:	bd30      	pop	{r4, r5, pc}
 800d1ea:	fa21 f004 	lsr.w	r0, r1, r4
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	bd30      	pop	{r4, r5, pc}
 800d1f2:	f094 0f00 	teq	r4, #0
 800d1f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800d1fa:	bf06      	itte	eq
 800d1fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800d200:	3401      	addeq	r4, #1
 800d202:	3d01      	subne	r5, #1
 800d204:	e74e      	b.n	800d0a4 <__adddf3+0x8c>
 800d206:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800d20a:	bf18      	it	ne
 800d20c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800d210:	d029      	beq.n	800d266 <__adddf3+0x24e>
 800d212:	ea94 0f05 	teq	r4, r5
 800d216:	bf08      	it	eq
 800d218:	ea90 0f02 	teqeq	r0, r2
 800d21c:	d005      	beq.n	800d22a <__adddf3+0x212>
 800d21e:	ea54 0c00 	orrs.w	ip, r4, r0
 800d222:	bf04      	itt	eq
 800d224:	4619      	moveq	r1, r3
 800d226:	4610      	moveq	r0, r2
 800d228:	bd30      	pop	{r4, r5, pc}
 800d22a:	ea91 0f03 	teq	r1, r3
 800d22e:	bf1e      	ittt	ne
 800d230:	2100      	movne	r1, #0
 800d232:	2000      	movne	r0, #0
 800d234:	bd30      	popne	{r4, r5, pc}
 800d236:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800d23a:	d105      	bne.n	800d248 <__adddf3+0x230>
 800d23c:	0040      	lsls	r0, r0, #1
 800d23e:	4149      	adcs	r1, r1
 800d240:	bf28      	it	cs
 800d242:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800d246:	bd30      	pop	{r4, r5, pc}
 800d248:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800d24c:	bf3c      	itt	cc
 800d24e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800d252:	bd30      	popcc	{r4, r5, pc}
 800d254:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d258:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800d25c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d260:	f04f 0000 	mov.w	r0, #0
 800d264:	bd30      	pop	{r4, r5, pc}
 800d266:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800d26a:	bf1a      	itte	ne
 800d26c:	4619      	movne	r1, r3
 800d26e:	4610      	movne	r0, r2
 800d270:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800d274:	bf1c      	itt	ne
 800d276:	460b      	movne	r3, r1
 800d278:	4602      	movne	r2, r0
 800d27a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800d27e:	bf06      	itte	eq
 800d280:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800d284:	ea91 0f03 	teqeq	r1, r3
 800d288:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800d28c:	bd30      	pop	{r4, r5, pc}
 800d28e:	bf00      	nop

0800d290 <__aeabi_ui2d>:
 800d290:	f090 0f00 	teq	r0, #0
 800d294:	bf04      	itt	eq
 800d296:	2100      	moveq	r1, #0
 800d298:	4770      	bxeq	lr
 800d29a:	b530      	push	{r4, r5, lr}
 800d29c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d2a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800d2a4:	f04f 0500 	mov.w	r5, #0
 800d2a8:	f04f 0100 	mov.w	r1, #0
 800d2ac:	e750      	b.n	800d150 <__adddf3+0x138>
 800d2ae:	bf00      	nop

0800d2b0 <__aeabi_i2d>:
 800d2b0:	f090 0f00 	teq	r0, #0
 800d2b4:	bf04      	itt	eq
 800d2b6:	2100      	moveq	r1, #0
 800d2b8:	4770      	bxeq	lr
 800d2ba:	b530      	push	{r4, r5, lr}
 800d2bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d2c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800d2c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800d2c8:	bf48      	it	mi
 800d2ca:	4240      	negmi	r0, r0
 800d2cc:	f04f 0100 	mov.w	r1, #0
 800d2d0:	e73e      	b.n	800d150 <__adddf3+0x138>
 800d2d2:	bf00      	nop

0800d2d4 <__aeabi_f2d>:
 800d2d4:	0042      	lsls	r2, r0, #1
 800d2d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800d2da:	ea4f 0131 	mov.w	r1, r1, rrx
 800d2de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800d2e2:	bf1f      	itttt	ne
 800d2e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800d2e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800d2ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800d2f0:	4770      	bxne	lr
 800d2f2:	f092 0f00 	teq	r2, #0
 800d2f6:	bf14      	ite	ne
 800d2f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800d2fc:	4770      	bxeq	lr
 800d2fe:	b530      	push	{r4, r5, lr}
 800d300:	f44f 7460 	mov.w	r4, #896	; 0x380
 800d304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d30c:	e720      	b.n	800d150 <__adddf3+0x138>
 800d30e:	bf00      	nop

0800d310 <__aeabi_ul2d>:
 800d310:	ea50 0201 	orrs.w	r2, r0, r1
 800d314:	bf08      	it	eq
 800d316:	4770      	bxeq	lr
 800d318:	b530      	push	{r4, r5, lr}
 800d31a:	f04f 0500 	mov.w	r5, #0
 800d31e:	e00a      	b.n	800d336 <__aeabi_l2d+0x16>

0800d320 <__aeabi_l2d>:
 800d320:	ea50 0201 	orrs.w	r2, r0, r1
 800d324:	bf08      	it	eq
 800d326:	4770      	bxeq	lr
 800d328:	b530      	push	{r4, r5, lr}
 800d32a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800d32e:	d502      	bpl.n	800d336 <__aeabi_l2d+0x16>
 800d330:	4240      	negs	r0, r0
 800d332:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d336:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800d33a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800d33e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800d342:	f43f aedc 	beq.w	800d0fe <__adddf3+0xe6>
 800d346:	f04f 0203 	mov.w	r2, #3
 800d34a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d34e:	bf18      	it	ne
 800d350:	3203      	addne	r2, #3
 800d352:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d356:	bf18      	it	ne
 800d358:	3203      	addne	r2, #3
 800d35a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800d35e:	f1c2 0320 	rsb	r3, r2, #32
 800d362:	fa00 fc03 	lsl.w	ip, r0, r3
 800d366:	fa20 f002 	lsr.w	r0, r0, r2
 800d36a:	fa01 fe03 	lsl.w	lr, r1, r3
 800d36e:	ea40 000e 	orr.w	r0, r0, lr
 800d372:	fa21 f102 	lsr.w	r1, r1, r2
 800d376:	4414      	add	r4, r2
 800d378:	e6c1      	b.n	800d0fe <__adddf3+0xe6>
 800d37a:	bf00      	nop

0800d37c <__aeabi_dmul>:
 800d37c:	b570      	push	{r4, r5, r6, lr}
 800d37e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800d382:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800d386:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800d38a:	bf1d      	ittte	ne
 800d38c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800d390:	ea94 0f0c 	teqne	r4, ip
 800d394:	ea95 0f0c 	teqne	r5, ip
 800d398:	f000 f8de 	bleq	800d558 <__aeabi_dmul+0x1dc>
 800d39c:	442c      	add	r4, r5
 800d39e:	ea81 0603 	eor.w	r6, r1, r3
 800d3a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800d3a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800d3aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800d3ae:	bf18      	it	ne
 800d3b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800d3b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d3b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d3bc:	d038      	beq.n	800d430 <__aeabi_dmul+0xb4>
 800d3be:	fba0 ce02 	umull	ip, lr, r0, r2
 800d3c2:	f04f 0500 	mov.w	r5, #0
 800d3c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 800d3ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800d3ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 800d3d2:	f04f 0600 	mov.w	r6, #0
 800d3d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 800d3da:	f09c 0f00 	teq	ip, #0
 800d3de:	bf18      	it	ne
 800d3e0:	f04e 0e01 	orrne.w	lr, lr, #1
 800d3e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800d3e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800d3ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800d3f0:	d204      	bcs.n	800d3fc <__aeabi_dmul+0x80>
 800d3f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800d3f6:	416d      	adcs	r5, r5
 800d3f8:	eb46 0606 	adc.w	r6, r6, r6
 800d3fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800d400:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800d404:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800d408:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800d40c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800d410:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800d414:	bf88      	it	hi
 800d416:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800d41a:	d81e      	bhi.n	800d45a <__aeabi_dmul+0xde>
 800d41c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800d420:	bf08      	it	eq
 800d422:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800d426:	f150 0000 	adcs.w	r0, r0, #0
 800d42a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800d42e:	bd70      	pop	{r4, r5, r6, pc}
 800d430:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800d434:	ea46 0101 	orr.w	r1, r6, r1
 800d438:	ea40 0002 	orr.w	r0, r0, r2
 800d43c:	ea81 0103 	eor.w	r1, r1, r3
 800d440:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800d444:	bfc2      	ittt	gt
 800d446:	ebd4 050c 	rsbsgt	r5, r4, ip
 800d44a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800d44e:	bd70      	popgt	{r4, r5, r6, pc}
 800d450:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d454:	f04f 0e00 	mov.w	lr, #0
 800d458:	3c01      	subs	r4, #1
 800d45a:	f300 80ab 	bgt.w	800d5b4 <__aeabi_dmul+0x238>
 800d45e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800d462:	bfde      	ittt	le
 800d464:	2000      	movle	r0, #0
 800d466:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800d46a:	bd70      	pople	{r4, r5, r6, pc}
 800d46c:	f1c4 0400 	rsb	r4, r4, #0
 800d470:	3c20      	subs	r4, #32
 800d472:	da35      	bge.n	800d4e0 <__aeabi_dmul+0x164>
 800d474:	340c      	adds	r4, #12
 800d476:	dc1b      	bgt.n	800d4b0 <__aeabi_dmul+0x134>
 800d478:	f104 0414 	add.w	r4, r4, #20
 800d47c:	f1c4 0520 	rsb	r5, r4, #32
 800d480:	fa00 f305 	lsl.w	r3, r0, r5
 800d484:	fa20 f004 	lsr.w	r0, r0, r4
 800d488:	fa01 f205 	lsl.w	r2, r1, r5
 800d48c:	ea40 0002 	orr.w	r0, r0, r2
 800d490:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800d494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d498:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800d49c:	fa21 f604 	lsr.w	r6, r1, r4
 800d4a0:	eb42 0106 	adc.w	r1, r2, r6
 800d4a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800d4a8:	bf08      	it	eq
 800d4aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}
 800d4b0:	f1c4 040c 	rsb	r4, r4, #12
 800d4b4:	f1c4 0520 	rsb	r5, r4, #32
 800d4b8:	fa00 f304 	lsl.w	r3, r0, r4
 800d4bc:	fa20 f005 	lsr.w	r0, r0, r5
 800d4c0:	fa01 f204 	lsl.w	r2, r1, r4
 800d4c4:	ea40 0002 	orr.w	r0, r0, r2
 800d4c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800d4cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800d4d0:	f141 0100 	adc.w	r1, r1, #0
 800d4d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800d4d8:	bf08      	it	eq
 800d4da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800d4de:	bd70      	pop	{r4, r5, r6, pc}
 800d4e0:	f1c4 0520 	rsb	r5, r4, #32
 800d4e4:	fa00 f205 	lsl.w	r2, r0, r5
 800d4e8:	ea4e 0e02 	orr.w	lr, lr, r2
 800d4ec:	fa20 f304 	lsr.w	r3, r0, r4
 800d4f0:	fa01 f205 	lsl.w	r2, r1, r5
 800d4f4:	ea43 0302 	orr.w	r3, r3, r2
 800d4f8:	fa21 f004 	lsr.w	r0, r1, r4
 800d4fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800d500:	fa21 f204 	lsr.w	r2, r1, r4
 800d504:	ea20 0002 	bic.w	r0, r0, r2
 800d508:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800d50c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800d510:	bf08      	it	eq
 800d512:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800d516:	bd70      	pop	{r4, r5, r6, pc}
 800d518:	f094 0f00 	teq	r4, #0
 800d51c:	d10f      	bne.n	800d53e <__aeabi_dmul+0x1c2>
 800d51e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800d522:	0040      	lsls	r0, r0, #1
 800d524:	eb41 0101 	adc.w	r1, r1, r1
 800d528:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800d52c:	bf08      	it	eq
 800d52e:	3c01      	subeq	r4, #1
 800d530:	d0f7      	beq.n	800d522 <__aeabi_dmul+0x1a6>
 800d532:	ea41 0106 	orr.w	r1, r1, r6
 800d536:	f095 0f00 	teq	r5, #0
 800d53a:	bf18      	it	ne
 800d53c:	4770      	bxne	lr
 800d53e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800d542:	0052      	lsls	r2, r2, #1
 800d544:	eb43 0303 	adc.w	r3, r3, r3
 800d548:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800d54c:	bf08      	it	eq
 800d54e:	3d01      	subeq	r5, #1
 800d550:	d0f7      	beq.n	800d542 <__aeabi_dmul+0x1c6>
 800d552:	ea43 0306 	orr.w	r3, r3, r6
 800d556:	4770      	bx	lr
 800d558:	ea94 0f0c 	teq	r4, ip
 800d55c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800d560:	bf18      	it	ne
 800d562:	ea95 0f0c 	teqne	r5, ip
 800d566:	d00c      	beq.n	800d582 <__aeabi_dmul+0x206>
 800d568:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800d56c:	bf18      	it	ne
 800d56e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800d572:	d1d1      	bne.n	800d518 <__aeabi_dmul+0x19c>
 800d574:	ea81 0103 	eor.w	r1, r1, r3
 800d578:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800d57c:	f04f 0000 	mov.w	r0, #0
 800d580:	bd70      	pop	{r4, r5, r6, pc}
 800d582:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800d586:	bf06      	itte	eq
 800d588:	4610      	moveq	r0, r2
 800d58a:	4619      	moveq	r1, r3
 800d58c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800d590:	d019      	beq.n	800d5c6 <__aeabi_dmul+0x24a>
 800d592:	ea94 0f0c 	teq	r4, ip
 800d596:	d102      	bne.n	800d59e <__aeabi_dmul+0x222>
 800d598:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800d59c:	d113      	bne.n	800d5c6 <__aeabi_dmul+0x24a>
 800d59e:	ea95 0f0c 	teq	r5, ip
 800d5a2:	d105      	bne.n	800d5b0 <__aeabi_dmul+0x234>
 800d5a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800d5a8:	bf1c      	itt	ne
 800d5aa:	4610      	movne	r0, r2
 800d5ac:	4619      	movne	r1, r3
 800d5ae:	d10a      	bne.n	800d5c6 <__aeabi_dmul+0x24a>
 800d5b0:	ea81 0103 	eor.w	r1, r1, r3
 800d5b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800d5b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800d5bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d5c0:	f04f 0000 	mov.w	r0, #0
 800d5c4:	bd70      	pop	{r4, r5, r6, pc}
 800d5c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800d5ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800d5ce:	bd70      	pop	{r4, r5, r6, pc}

0800d5d0 <__aeabi_ddiv>:
 800d5d0:	b570      	push	{r4, r5, r6, lr}
 800d5d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800d5d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800d5da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800d5de:	bf1d      	ittte	ne
 800d5e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800d5e4:	ea94 0f0c 	teqne	r4, ip
 800d5e8:	ea95 0f0c 	teqne	r5, ip
 800d5ec:	f000 f8a7 	bleq	800d73e <__aeabi_ddiv+0x16e>
 800d5f0:	eba4 0405 	sub.w	r4, r4, r5
 800d5f4:	ea81 0e03 	eor.w	lr, r1, r3
 800d5f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800d5fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800d600:	f000 8088 	beq.w	800d714 <__aeabi_ddiv+0x144>
 800d604:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d608:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800d60c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800d610:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800d614:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d618:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800d61c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800d620:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800d624:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800d628:	429d      	cmp	r5, r3
 800d62a:	bf08      	it	eq
 800d62c:	4296      	cmpeq	r6, r2
 800d62e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800d632:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800d636:	d202      	bcs.n	800d63e <__aeabi_ddiv+0x6e>
 800d638:	085b      	lsrs	r3, r3, #1
 800d63a:	ea4f 0232 	mov.w	r2, r2, rrx
 800d63e:	1ab6      	subs	r6, r6, r2
 800d640:	eb65 0503 	sbc.w	r5, r5, r3
 800d644:	085b      	lsrs	r3, r3, #1
 800d646:	ea4f 0232 	mov.w	r2, r2, rrx
 800d64a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d64e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800d652:	ebb6 0e02 	subs.w	lr, r6, r2
 800d656:	eb75 0e03 	sbcs.w	lr, r5, r3
 800d65a:	bf22      	ittt	cs
 800d65c:	1ab6      	subcs	r6, r6, r2
 800d65e:	4675      	movcs	r5, lr
 800d660:	ea40 000c 	orrcs.w	r0, r0, ip
 800d664:	085b      	lsrs	r3, r3, #1
 800d666:	ea4f 0232 	mov.w	r2, r2, rrx
 800d66a:	ebb6 0e02 	subs.w	lr, r6, r2
 800d66e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800d672:	bf22      	ittt	cs
 800d674:	1ab6      	subcs	r6, r6, r2
 800d676:	4675      	movcs	r5, lr
 800d678:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800d67c:	085b      	lsrs	r3, r3, #1
 800d67e:	ea4f 0232 	mov.w	r2, r2, rrx
 800d682:	ebb6 0e02 	subs.w	lr, r6, r2
 800d686:	eb75 0e03 	sbcs.w	lr, r5, r3
 800d68a:	bf22      	ittt	cs
 800d68c:	1ab6      	subcs	r6, r6, r2
 800d68e:	4675      	movcs	r5, lr
 800d690:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800d694:	085b      	lsrs	r3, r3, #1
 800d696:	ea4f 0232 	mov.w	r2, r2, rrx
 800d69a:	ebb6 0e02 	subs.w	lr, r6, r2
 800d69e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800d6a2:	bf22      	ittt	cs
 800d6a4:	1ab6      	subcs	r6, r6, r2
 800d6a6:	4675      	movcs	r5, lr
 800d6a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800d6ac:	ea55 0e06 	orrs.w	lr, r5, r6
 800d6b0:	d018      	beq.n	800d6e4 <__aeabi_ddiv+0x114>
 800d6b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800d6b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800d6ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800d6be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800d6c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800d6c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d6ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800d6ce:	d1c0      	bne.n	800d652 <__aeabi_ddiv+0x82>
 800d6d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800d6d4:	d10b      	bne.n	800d6ee <__aeabi_ddiv+0x11e>
 800d6d6:	ea41 0100 	orr.w	r1, r1, r0
 800d6da:	f04f 0000 	mov.w	r0, #0
 800d6de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800d6e2:	e7b6      	b.n	800d652 <__aeabi_ddiv+0x82>
 800d6e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800d6e8:	bf04      	itt	eq
 800d6ea:	4301      	orreq	r1, r0
 800d6ec:	2000      	moveq	r0, #0
 800d6ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800d6f2:	bf88      	it	hi
 800d6f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800d6f8:	f63f aeaf 	bhi.w	800d45a <__aeabi_dmul+0xde>
 800d6fc:	ebb5 0c03 	subs.w	ip, r5, r3
 800d700:	bf04      	itt	eq
 800d702:	ebb6 0c02 	subseq.w	ip, r6, r2
 800d706:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800d70a:	f150 0000 	adcs.w	r0, r0, #0
 800d70e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800d712:	bd70      	pop	{r4, r5, r6, pc}
 800d714:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800d718:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800d71c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800d720:	bfc2      	ittt	gt
 800d722:	ebd4 050c 	rsbsgt	r5, r4, ip
 800d726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800d72a:	bd70      	popgt	{r4, r5, r6, pc}
 800d72c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d730:	f04f 0e00 	mov.w	lr, #0
 800d734:	3c01      	subs	r4, #1
 800d736:	e690      	b.n	800d45a <__aeabi_dmul+0xde>
 800d738:	ea45 0e06 	orr.w	lr, r5, r6
 800d73c:	e68d      	b.n	800d45a <__aeabi_dmul+0xde>
 800d73e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800d742:	ea94 0f0c 	teq	r4, ip
 800d746:	bf08      	it	eq
 800d748:	ea95 0f0c 	teqeq	r5, ip
 800d74c:	f43f af3b 	beq.w	800d5c6 <__aeabi_dmul+0x24a>
 800d750:	ea94 0f0c 	teq	r4, ip
 800d754:	d10a      	bne.n	800d76c <__aeabi_ddiv+0x19c>
 800d756:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800d75a:	f47f af34 	bne.w	800d5c6 <__aeabi_dmul+0x24a>
 800d75e:	ea95 0f0c 	teq	r5, ip
 800d762:	f47f af25 	bne.w	800d5b0 <__aeabi_dmul+0x234>
 800d766:	4610      	mov	r0, r2
 800d768:	4619      	mov	r1, r3
 800d76a:	e72c      	b.n	800d5c6 <__aeabi_dmul+0x24a>
 800d76c:	ea95 0f0c 	teq	r5, ip
 800d770:	d106      	bne.n	800d780 <__aeabi_ddiv+0x1b0>
 800d772:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800d776:	f43f aefd 	beq.w	800d574 <__aeabi_dmul+0x1f8>
 800d77a:	4610      	mov	r0, r2
 800d77c:	4619      	mov	r1, r3
 800d77e:	e722      	b.n	800d5c6 <__aeabi_dmul+0x24a>
 800d780:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800d784:	bf18      	it	ne
 800d786:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800d78a:	f47f aec5 	bne.w	800d518 <__aeabi_dmul+0x19c>
 800d78e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800d792:	f47f af0d 	bne.w	800d5b0 <__aeabi_dmul+0x234>
 800d796:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800d79a:	f47f aeeb 	bne.w	800d574 <__aeabi_dmul+0x1f8>
 800d79e:	e712      	b.n	800d5c6 <__aeabi_dmul+0x24a>

0800d7a0 <__aeabi_d2f>:
 800d7a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800d7a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800d7a8:	bf24      	itt	cs
 800d7aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800d7ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800d7b2:	d90d      	bls.n	800d7d0 <__aeabi_d2f+0x30>
 800d7b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800d7b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800d7bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800d7c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800d7c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800d7c8:	bf08      	it	eq
 800d7ca:	f020 0001 	biceq.w	r0, r0, #1
 800d7ce:	4770      	bx	lr
 800d7d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800d7d4:	d121      	bne.n	800d81a <__aeabi_d2f+0x7a>
 800d7d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800d7da:	bfbc      	itt	lt
 800d7dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800d7e0:	4770      	bxlt	lr
 800d7e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d7e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800d7ea:	f1c2 0218 	rsb	r2, r2, #24
 800d7ee:	f1c2 0c20 	rsb	ip, r2, #32
 800d7f2:	fa10 f30c 	lsls.w	r3, r0, ip
 800d7f6:	fa20 f002 	lsr.w	r0, r0, r2
 800d7fa:	bf18      	it	ne
 800d7fc:	f040 0001 	orrne.w	r0, r0, #1
 800d800:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800d804:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800d808:	fa03 fc0c 	lsl.w	ip, r3, ip
 800d80c:	ea40 000c 	orr.w	r0, r0, ip
 800d810:	fa23 f302 	lsr.w	r3, r3, r2
 800d814:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d818:	e7cc      	b.n	800d7b4 <__aeabi_d2f+0x14>
 800d81a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800d81e:	d107      	bne.n	800d830 <__aeabi_d2f+0x90>
 800d820:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800d824:	bf1e      	ittt	ne
 800d826:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800d82a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800d82e:	4770      	bxne	lr
 800d830:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800d834:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800d838:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop

0800d840 <__aeabi_frsub>:
 800d840:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800d844:	e002      	b.n	800d84c <__addsf3>
 800d846:	bf00      	nop

0800d848 <__aeabi_fsub>:
 800d848:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800d84c <__addsf3>:
 800d84c:	0042      	lsls	r2, r0, #1
 800d84e:	bf1f      	itttt	ne
 800d850:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800d854:	ea92 0f03 	teqne	r2, r3
 800d858:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800d85c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800d860:	d06a      	beq.n	800d938 <__addsf3+0xec>
 800d862:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800d866:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800d86a:	bfc1      	itttt	gt
 800d86c:	18d2      	addgt	r2, r2, r3
 800d86e:	4041      	eorgt	r1, r0
 800d870:	4048      	eorgt	r0, r1
 800d872:	4041      	eorgt	r1, r0
 800d874:	bfb8      	it	lt
 800d876:	425b      	neglt	r3, r3
 800d878:	2b19      	cmp	r3, #25
 800d87a:	bf88      	it	hi
 800d87c:	4770      	bxhi	lr
 800d87e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800d882:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d886:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800d88a:	bf18      	it	ne
 800d88c:	4240      	negne	r0, r0
 800d88e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800d892:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800d896:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800d89a:	bf18      	it	ne
 800d89c:	4249      	negne	r1, r1
 800d89e:	ea92 0f03 	teq	r2, r3
 800d8a2:	d03f      	beq.n	800d924 <__addsf3+0xd8>
 800d8a4:	f1a2 0201 	sub.w	r2, r2, #1
 800d8a8:	fa41 fc03 	asr.w	ip, r1, r3
 800d8ac:	eb10 000c 	adds.w	r0, r0, ip
 800d8b0:	f1c3 0320 	rsb	r3, r3, #32
 800d8b4:	fa01 f103 	lsl.w	r1, r1, r3
 800d8b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d8bc:	d502      	bpl.n	800d8c4 <__addsf3+0x78>
 800d8be:	4249      	negs	r1, r1
 800d8c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800d8c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800d8c8:	d313      	bcc.n	800d8f2 <__addsf3+0xa6>
 800d8ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800d8ce:	d306      	bcc.n	800d8de <__addsf3+0x92>
 800d8d0:	0840      	lsrs	r0, r0, #1
 800d8d2:	ea4f 0131 	mov.w	r1, r1, rrx
 800d8d6:	f102 0201 	add.w	r2, r2, #1
 800d8da:	2afe      	cmp	r2, #254	; 0xfe
 800d8dc:	d251      	bcs.n	800d982 <__addsf3+0x136>
 800d8de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800d8e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800d8e6:	bf08      	it	eq
 800d8e8:	f020 0001 	biceq.w	r0, r0, #1
 800d8ec:	ea40 0003 	orr.w	r0, r0, r3
 800d8f0:	4770      	bx	lr
 800d8f2:	0049      	lsls	r1, r1, #1
 800d8f4:	eb40 0000 	adc.w	r0, r0, r0
 800d8f8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800d8fc:	f1a2 0201 	sub.w	r2, r2, #1
 800d900:	d1ed      	bne.n	800d8de <__addsf3+0x92>
 800d902:	fab0 fc80 	clz	ip, r0
 800d906:	f1ac 0c08 	sub.w	ip, ip, #8
 800d90a:	ebb2 020c 	subs.w	r2, r2, ip
 800d90e:	fa00 f00c 	lsl.w	r0, r0, ip
 800d912:	bfaa      	itet	ge
 800d914:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800d918:	4252      	neglt	r2, r2
 800d91a:	4318      	orrge	r0, r3
 800d91c:	bfbc      	itt	lt
 800d91e:	40d0      	lsrlt	r0, r2
 800d920:	4318      	orrlt	r0, r3
 800d922:	4770      	bx	lr
 800d924:	f092 0f00 	teq	r2, #0
 800d928:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800d92c:	bf06      	itte	eq
 800d92e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800d932:	3201      	addeq	r2, #1
 800d934:	3b01      	subne	r3, #1
 800d936:	e7b5      	b.n	800d8a4 <__addsf3+0x58>
 800d938:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800d93c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800d940:	bf18      	it	ne
 800d942:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800d946:	d021      	beq.n	800d98c <__addsf3+0x140>
 800d948:	ea92 0f03 	teq	r2, r3
 800d94c:	d004      	beq.n	800d958 <__addsf3+0x10c>
 800d94e:	f092 0f00 	teq	r2, #0
 800d952:	bf08      	it	eq
 800d954:	4608      	moveq	r0, r1
 800d956:	4770      	bx	lr
 800d958:	ea90 0f01 	teq	r0, r1
 800d95c:	bf1c      	itt	ne
 800d95e:	2000      	movne	r0, #0
 800d960:	4770      	bxne	lr
 800d962:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800d966:	d104      	bne.n	800d972 <__addsf3+0x126>
 800d968:	0040      	lsls	r0, r0, #1
 800d96a:	bf28      	it	cs
 800d96c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800d970:	4770      	bx	lr
 800d972:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800d976:	bf3c      	itt	cc
 800d978:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800d97c:	4770      	bxcc	lr
 800d97e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d982:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800d986:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d98a:	4770      	bx	lr
 800d98c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800d990:	bf16      	itet	ne
 800d992:	4608      	movne	r0, r1
 800d994:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800d998:	4601      	movne	r1, r0
 800d99a:	0242      	lsls	r2, r0, #9
 800d99c:	bf06      	itte	eq
 800d99e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800d9a2:	ea90 0f01 	teqeq	r0, r1
 800d9a6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800d9aa:	4770      	bx	lr

0800d9ac <__aeabi_ui2f>:
 800d9ac:	f04f 0300 	mov.w	r3, #0
 800d9b0:	e004      	b.n	800d9bc <__aeabi_i2f+0x8>
 800d9b2:	bf00      	nop

0800d9b4 <__aeabi_i2f>:
 800d9b4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800d9b8:	bf48      	it	mi
 800d9ba:	4240      	negmi	r0, r0
 800d9bc:	ea5f 0c00 	movs.w	ip, r0
 800d9c0:	bf08      	it	eq
 800d9c2:	4770      	bxeq	lr
 800d9c4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800d9c8:	4601      	mov	r1, r0
 800d9ca:	f04f 0000 	mov.w	r0, #0
 800d9ce:	e01c      	b.n	800da0a <__aeabi_l2f+0x2a>

0800d9d0 <__aeabi_ul2f>:
 800d9d0:	ea50 0201 	orrs.w	r2, r0, r1
 800d9d4:	bf08      	it	eq
 800d9d6:	4770      	bxeq	lr
 800d9d8:	f04f 0300 	mov.w	r3, #0
 800d9dc:	e00a      	b.n	800d9f4 <__aeabi_l2f+0x14>
 800d9de:	bf00      	nop

0800d9e0 <__aeabi_l2f>:
 800d9e0:	ea50 0201 	orrs.w	r2, r0, r1
 800d9e4:	bf08      	it	eq
 800d9e6:	4770      	bxeq	lr
 800d9e8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800d9ec:	d502      	bpl.n	800d9f4 <__aeabi_l2f+0x14>
 800d9ee:	4240      	negs	r0, r0
 800d9f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d9f4:	ea5f 0c01 	movs.w	ip, r1
 800d9f8:	bf02      	ittt	eq
 800d9fa:	4684      	moveq	ip, r0
 800d9fc:	4601      	moveq	r1, r0
 800d9fe:	2000      	moveq	r0, #0
 800da00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800da04:	bf08      	it	eq
 800da06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800da0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800da0e:	fabc f28c 	clz	r2, ip
 800da12:	3a08      	subs	r2, #8
 800da14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800da18:	db10      	blt.n	800da3c <__aeabi_l2f+0x5c>
 800da1a:	fa01 fc02 	lsl.w	ip, r1, r2
 800da1e:	4463      	add	r3, ip
 800da20:	fa00 fc02 	lsl.w	ip, r0, r2
 800da24:	f1c2 0220 	rsb	r2, r2, #32
 800da28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800da2c:	fa20 f202 	lsr.w	r2, r0, r2
 800da30:	eb43 0002 	adc.w	r0, r3, r2
 800da34:	bf08      	it	eq
 800da36:	f020 0001 	biceq.w	r0, r0, #1
 800da3a:	4770      	bx	lr
 800da3c:	f102 0220 	add.w	r2, r2, #32
 800da40:	fa01 fc02 	lsl.w	ip, r1, r2
 800da44:	f1c2 0220 	rsb	r2, r2, #32
 800da48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800da4c:	fa21 f202 	lsr.w	r2, r1, r2
 800da50:	eb43 0002 	adc.w	r0, r3, r2
 800da54:	bf08      	it	eq
 800da56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800da5a:	4770      	bx	lr

0800da5c <__errno>:
 800da5c:	4b01      	ldr	r3, [pc, #4]	; (800da64 <__errno+0x8>)
 800da5e:	6818      	ldr	r0, [r3, #0]
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop
 800da64:	1ffe8998 	.word	0x1ffe8998

0800da68 <__libc_init_array>:
 800da68:	b570      	push	{r4, r5, r6, lr}
 800da6a:	4b0e      	ldr	r3, [pc, #56]	; (800daa4 <__libc_init_array+0x3c>)
 800da6c:	4c0e      	ldr	r4, [pc, #56]	; (800daa8 <__libc_init_array+0x40>)
 800da6e:	1ae4      	subs	r4, r4, r3
 800da70:	10a4      	asrs	r4, r4, #2
 800da72:	2500      	movs	r5, #0
 800da74:	461e      	mov	r6, r3
 800da76:	42a5      	cmp	r5, r4
 800da78:	d004      	beq.n	800da84 <__libc_init_array+0x1c>
 800da7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da7e:	4798      	blx	r3
 800da80:	3501      	adds	r5, #1
 800da82:	e7f8      	b.n	800da76 <__libc_init_array+0xe>
 800da84:	f7f3 fa72 	bl	8000f6c <_init>
 800da88:	4c08      	ldr	r4, [pc, #32]	; (800daac <__libc_init_array+0x44>)
 800da8a:	4b09      	ldr	r3, [pc, #36]	; (800dab0 <__libc_init_array+0x48>)
 800da8c:	1ae4      	subs	r4, r4, r3
 800da8e:	10a4      	asrs	r4, r4, #2
 800da90:	2500      	movs	r5, #0
 800da92:	461e      	mov	r6, r3
 800da94:	42a5      	cmp	r5, r4
 800da96:	d004      	beq.n	800daa2 <__libc_init_array+0x3a>
 800da98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da9c:	4798      	blx	r3
 800da9e:	3501      	adds	r5, #1
 800daa0:	e7f8      	b.n	800da94 <__libc_init_array+0x2c>
 800daa2:	bd70      	pop	{r4, r5, r6, pc}
 800daa4:	1ffe899c 	.word	0x1ffe899c
 800daa8:	1ffe899c 	.word	0x1ffe899c
 800daac:	1ffe899c 	.word	0x1ffe899c
 800dab0:	1ffe899c 	.word	0x1ffe899c

0800dab4 <malloc>:
 800dab4:	4b02      	ldr	r3, [pc, #8]	; (800dac0 <malloc+0xc>)
 800dab6:	4601      	mov	r1, r0
 800dab8:	6818      	ldr	r0, [r3, #0]
 800daba:	f000 b87d 	b.w	800dbb8 <_malloc_r>
 800dabe:	bf00      	nop
 800dac0:	1ffe8998 	.word	0x1ffe8998

0800dac4 <free>:
 800dac4:	4b02      	ldr	r3, [pc, #8]	; (800dad0 <free+0xc>)
 800dac6:	4601      	mov	r1, r0
 800dac8:	6818      	ldr	r0, [r3, #0]
 800daca:	f000 b831 	b.w	800db30 <_free_r>
 800dace:	bf00      	nop
 800dad0:	1ffe8998 	.word	0x1ffe8998

0800dad4 <memcpy>:
 800dad4:	b510      	push	{r4, lr}
 800dad6:	1e43      	subs	r3, r0, #1
 800dad8:	440a      	add	r2, r1
 800dada:	4291      	cmp	r1, r2
 800dadc:	d004      	beq.n	800dae8 <memcpy+0x14>
 800dade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dae6:	e7f8      	b.n	800dada <memcpy+0x6>
 800dae8:	bd10      	pop	{r4, pc}

0800daea <memmove>:
 800daea:	4281      	cmp	r1, r0
 800daec:	b510      	push	{r4, lr}
 800daee:	eb01 0302 	add.w	r3, r1, r2
 800daf2:	d301      	bcc.n	800daf8 <memmove+0xe>
 800daf4:	1e42      	subs	r2, r0, #1
 800daf6:	e00b      	b.n	800db10 <memmove+0x26>
 800daf8:	4298      	cmp	r0, r3
 800dafa:	d2fb      	bcs.n	800daf4 <memmove+0xa>
 800dafc:	1881      	adds	r1, r0, r2
 800dafe:	1ad2      	subs	r2, r2, r3
 800db00:	42d3      	cmn	r3, r2
 800db02:	d004      	beq.n	800db0e <memmove+0x24>
 800db04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800db0c:	e7f8      	b.n	800db00 <memmove+0x16>
 800db0e:	bd10      	pop	{r4, pc}
 800db10:	4299      	cmp	r1, r3
 800db12:	d004      	beq.n	800db1e <memmove+0x34>
 800db14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db18:	f802 4f01 	strb.w	r4, [r2, #1]!
 800db1c:	e7f8      	b.n	800db10 <memmove+0x26>
 800db1e:	bd10      	pop	{r4, pc}

0800db20 <memset>:
 800db20:	4402      	add	r2, r0
 800db22:	4603      	mov	r3, r0
 800db24:	4293      	cmp	r3, r2
 800db26:	d002      	beq.n	800db2e <memset+0xe>
 800db28:	f803 1b01 	strb.w	r1, [r3], #1
 800db2c:	e7fa      	b.n	800db24 <memset+0x4>
 800db2e:	4770      	bx	lr

0800db30 <_free_r>:
 800db30:	b530      	push	{r4, r5, lr}
 800db32:	2900      	cmp	r1, #0
 800db34:	d03d      	beq.n	800dbb2 <_free_r+0x82>
 800db36:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800db3a:	1f0b      	subs	r3, r1, #4
 800db3c:	491d      	ldr	r1, [pc, #116]	; (800dbb4 <_free_r+0x84>)
 800db3e:	2a00      	cmp	r2, #0
 800db40:	bfb8      	it	lt
 800db42:	189b      	addlt	r3, r3, r2
 800db44:	680a      	ldr	r2, [r1, #0]
 800db46:	460c      	mov	r4, r1
 800db48:	b912      	cbnz	r2, 800db50 <_free_r+0x20>
 800db4a:	605a      	str	r2, [r3, #4]
 800db4c:	600b      	str	r3, [r1, #0]
 800db4e:	bd30      	pop	{r4, r5, pc}
 800db50:	4293      	cmp	r3, r2
 800db52:	d20d      	bcs.n	800db70 <_free_r+0x40>
 800db54:	6819      	ldr	r1, [r3, #0]
 800db56:	1858      	adds	r0, r3, r1
 800db58:	4290      	cmp	r0, r2
 800db5a:	bf01      	itttt	eq
 800db5c:	585a      	ldreq	r2, [r3, r1]
 800db5e:	1852      	addeq	r2, r2, r1
 800db60:	601a      	streq	r2, [r3, #0]
 800db62:	6842      	ldreq	r2, [r0, #4]
 800db64:	605a      	str	r2, [r3, #4]
 800db66:	6023      	str	r3, [r4, #0]
 800db68:	bd30      	pop	{r4, r5, pc}
 800db6a:	4299      	cmp	r1, r3
 800db6c:	d803      	bhi.n	800db76 <_free_r+0x46>
 800db6e:	460a      	mov	r2, r1
 800db70:	6851      	ldr	r1, [r2, #4]
 800db72:	2900      	cmp	r1, #0
 800db74:	d1f9      	bne.n	800db6a <_free_r+0x3a>
 800db76:	6814      	ldr	r4, [r2, #0]
 800db78:	1915      	adds	r5, r2, r4
 800db7a:	429d      	cmp	r5, r3
 800db7c:	d10a      	bne.n	800db94 <_free_r+0x64>
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4423      	add	r3, r4
 800db82:	18d0      	adds	r0, r2, r3
 800db84:	4288      	cmp	r0, r1
 800db86:	6013      	str	r3, [r2, #0]
 800db88:	d113      	bne.n	800dbb2 <_free_r+0x82>
 800db8a:	6808      	ldr	r0, [r1, #0]
 800db8c:	4403      	add	r3, r0
 800db8e:	6013      	str	r3, [r2, #0]
 800db90:	684b      	ldr	r3, [r1, #4]
 800db92:	e00d      	b.n	800dbb0 <_free_r+0x80>
 800db94:	d902      	bls.n	800db9c <_free_r+0x6c>
 800db96:	230c      	movs	r3, #12
 800db98:	6003      	str	r3, [r0, #0]
 800db9a:	bd30      	pop	{r4, r5, pc}
 800db9c:	681c      	ldr	r4, [r3, #0]
 800db9e:	1918      	adds	r0, r3, r4
 800dba0:	4288      	cmp	r0, r1
 800dba2:	bf04      	itt	eq
 800dba4:	6808      	ldreq	r0, [r1, #0]
 800dba6:	6849      	ldreq	r1, [r1, #4]
 800dba8:	6059      	str	r1, [r3, #4]
 800dbaa:	bf04      	itt	eq
 800dbac:	1900      	addeq	r0, r0, r4
 800dbae:	6018      	streq	r0, [r3, #0]
 800dbb0:	6053      	str	r3, [r2, #4]
 800dbb2:	bd30      	pop	{r4, r5, pc}
 800dbb4:	1ffe9c40 	.word	0x1ffe9c40

0800dbb8 <_malloc_r>:
 800dbb8:	b570      	push	{r4, r5, r6, lr}
 800dbba:	1ccc      	adds	r4, r1, #3
 800dbbc:	f024 0403 	bic.w	r4, r4, #3
 800dbc0:	3408      	adds	r4, #8
 800dbc2:	2c0c      	cmp	r4, #12
 800dbc4:	bf38      	it	cc
 800dbc6:	240c      	movcc	r4, #12
 800dbc8:	2c00      	cmp	r4, #0
 800dbca:	4606      	mov	r6, r0
 800dbcc:	da03      	bge.n	800dbd6 <_malloc_r+0x1e>
 800dbce:	230c      	movs	r3, #12
 800dbd0:	6033      	str	r3, [r6, #0]
 800dbd2:	2000      	movs	r0, #0
 800dbd4:	bd70      	pop	{r4, r5, r6, pc}
 800dbd6:	428c      	cmp	r4, r1
 800dbd8:	d3f9      	bcc.n	800dbce <_malloc_r+0x16>
 800dbda:	4a20      	ldr	r2, [pc, #128]	; (800dc5c <_malloc_r+0xa4>)
 800dbdc:	6813      	ldr	r3, [r2, #0]
 800dbde:	4610      	mov	r0, r2
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	b1a1      	cbz	r1, 800dc0e <_malloc_r+0x56>
 800dbe4:	680a      	ldr	r2, [r1, #0]
 800dbe6:	1b12      	subs	r2, r2, r4
 800dbe8:	d40e      	bmi.n	800dc08 <_malloc_r+0x50>
 800dbea:	2a0b      	cmp	r2, #11
 800dbec:	d903      	bls.n	800dbf6 <_malloc_r+0x3e>
 800dbee:	600a      	str	r2, [r1, #0]
 800dbf0:	188b      	adds	r3, r1, r2
 800dbf2:	508c      	str	r4, [r1, r2]
 800dbf4:	e01f      	b.n	800dc36 <_malloc_r+0x7e>
 800dbf6:	428b      	cmp	r3, r1
 800dbf8:	bf0d      	iteet	eq
 800dbfa:	685a      	ldreq	r2, [r3, #4]
 800dbfc:	684a      	ldrne	r2, [r1, #4]
 800dbfe:	605a      	strne	r2, [r3, #4]
 800dc00:	6002      	streq	r2, [r0, #0]
 800dc02:	bf18      	it	ne
 800dc04:	460b      	movne	r3, r1
 800dc06:	e016      	b.n	800dc36 <_malloc_r+0x7e>
 800dc08:	460b      	mov	r3, r1
 800dc0a:	6849      	ldr	r1, [r1, #4]
 800dc0c:	e7e9      	b.n	800dbe2 <_malloc_r+0x2a>
 800dc0e:	4d14      	ldr	r5, [pc, #80]	; (800dc60 <_malloc_r+0xa8>)
 800dc10:	682b      	ldr	r3, [r5, #0]
 800dc12:	b91b      	cbnz	r3, 800dc1c <_malloc_r+0x64>
 800dc14:	4630      	mov	r0, r6
 800dc16:	f000 f825 	bl	800dc64 <_sbrk_r>
 800dc1a:	6028      	str	r0, [r5, #0]
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	4621      	mov	r1, r4
 800dc20:	f000 f820 	bl	800dc64 <_sbrk_r>
 800dc24:	1c42      	adds	r2, r0, #1
 800dc26:	4603      	mov	r3, r0
 800dc28:	d0d1      	beq.n	800dbce <_malloc_r+0x16>
 800dc2a:	1cc5      	adds	r5, r0, #3
 800dc2c:	f025 0503 	bic.w	r5, r5, #3
 800dc30:	4285      	cmp	r5, r0
 800dc32:	d10a      	bne.n	800dc4a <_malloc_r+0x92>
 800dc34:	601c      	str	r4, [r3, #0]
 800dc36:	f103 000b 	add.w	r0, r3, #11
 800dc3a:	1d1a      	adds	r2, r3, #4
 800dc3c:	f020 0007 	bic.w	r0, r0, #7
 800dc40:	1a82      	subs	r2, r0, r2
 800dc42:	d00a      	beq.n	800dc5a <_malloc_r+0xa2>
 800dc44:	4251      	negs	r1, r2
 800dc46:	5099      	str	r1, [r3, r2]
 800dc48:	bd70      	pop	{r4, r5, r6, pc}
 800dc4a:	4630      	mov	r0, r6
 800dc4c:	1ae9      	subs	r1, r5, r3
 800dc4e:	f000 f809 	bl	800dc64 <_sbrk_r>
 800dc52:	3001      	adds	r0, #1
 800dc54:	d0bb      	beq.n	800dbce <_malloc_r+0x16>
 800dc56:	462b      	mov	r3, r5
 800dc58:	e7ec      	b.n	800dc34 <_malloc_r+0x7c>
 800dc5a:	bd70      	pop	{r4, r5, r6, pc}
 800dc5c:	1ffe9c40 	.word	0x1ffe9c40
 800dc60:	1ffe9c3c 	.word	0x1ffe9c3c

0800dc64 <_sbrk_r>:
 800dc64:	b538      	push	{r3, r4, r5, lr}
 800dc66:	4c06      	ldr	r4, [pc, #24]	; (800dc80 <_sbrk_r+0x1c>)
 800dc68:	2300      	movs	r3, #0
 800dc6a:	4605      	mov	r5, r0
 800dc6c:	4608      	mov	r0, r1
 800dc6e:	6023      	str	r3, [r4, #0]
 800dc70:	f7f3 f95c 	bl	8000f2c <_sbrk>
 800dc74:	1c43      	adds	r3, r0, #1
 800dc76:	d102      	bne.n	800dc7e <_sbrk_r+0x1a>
 800dc78:	6823      	ldr	r3, [r4, #0]
 800dc7a:	b103      	cbz	r3, 800dc7e <_sbrk_r+0x1a>
 800dc7c:	602b      	str	r3, [r5, #0]
 800dc7e:	bd38      	pop	{r3, r4, r5, pc}
 800dc80:	1ffe9dd8 	.word	0x1ffe9dd8

0800dc84 <siprintf>:
 800dc84:	b40e      	push	{r1, r2, r3}
 800dc86:	b500      	push	{lr}
 800dc88:	b09c      	sub	sp, #112	; 0x70
 800dc8a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800dc8e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800dc92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dc96:	9104      	str	r1, [sp, #16]
 800dc98:	9107      	str	r1, [sp, #28]
 800dc9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dc9e:	ab1d      	add	r3, sp, #116	; 0x74
 800dca0:	f8ad 1016 	strh.w	r1, [sp, #22]
 800dca4:	4908      	ldr	r1, [pc, #32]	; (800dcc8 <siprintf+0x44>)
 800dca6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcaa:	9002      	str	r0, [sp, #8]
 800dcac:	9006      	str	r0, [sp, #24]
 800dcae:	6808      	ldr	r0, [r1, #0]
 800dcb0:	9301      	str	r3, [sp, #4]
 800dcb2:	a902      	add	r1, sp, #8
 800dcb4:	f000 f864 	bl	800dd80 <_svfiprintf_r>
 800dcb8:	9b02      	ldr	r3, [sp, #8]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	701a      	strb	r2, [r3, #0]
 800dcbe:	b01c      	add	sp, #112	; 0x70
 800dcc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcc4:	b003      	add	sp, #12
 800dcc6:	4770      	bx	lr
 800dcc8:	1ffe8998 	.word	0x1ffe8998

0800dccc <__ssputs_r>:
 800dccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcd0:	688e      	ldr	r6, [r1, #8]
 800dcd2:	42b3      	cmp	r3, r6
 800dcd4:	4682      	mov	sl, r0
 800dcd6:	460c      	mov	r4, r1
 800dcd8:	4690      	mov	r8, r2
 800dcda:	4699      	mov	r9, r3
 800dcdc:	d340      	bcc.n	800dd60 <__ssputs_r+0x94>
 800dcde:	898a      	ldrh	r2, [r1, #12]
 800dce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dce4:	d03a      	beq.n	800dd5c <__ssputs_r+0x90>
 800dce6:	6825      	ldr	r5, [r4, #0]
 800dce8:	6909      	ldr	r1, [r1, #16]
 800dcea:	1a6f      	subs	r7, r5, r1
 800dcec:	6965      	ldr	r5, [r4, #20]
 800dcee:	2302      	movs	r3, #2
 800dcf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dcf4:	fb95 f5f3 	sdiv	r5, r5, r3
 800dcf8:	1c7b      	adds	r3, r7, #1
 800dcfa:	444b      	add	r3, r9
 800dcfc:	429d      	cmp	r5, r3
 800dcfe:	bf38      	it	cc
 800dd00:	461d      	movcc	r5, r3
 800dd02:	0553      	lsls	r3, r2, #21
 800dd04:	d50f      	bpl.n	800dd26 <__ssputs_r+0x5a>
 800dd06:	4629      	mov	r1, r5
 800dd08:	f7ff ff56 	bl	800dbb8 <_malloc_r>
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	b198      	cbz	r0, 800dd38 <__ssputs_r+0x6c>
 800dd10:	6921      	ldr	r1, [r4, #16]
 800dd12:	463a      	mov	r2, r7
 800dd14:	f7ff fede 	bl	800dad4 <memcpy>
 800dd18:	89a3      	ldrh	r3, [r4, #12]
 800dd1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd22:	81a3      	strh	r3, [r4, #12]
 800dd24:	e013      	b.n	800dd4e <__ssputs_r+0x82>
 800dd26:	462a      	mov	r2, r5
 800dd28:	f000 fabb 	bl	800e2a2 <_realloc_r>
 800dd2c:	4606      	mov	r6, r0
 800dd2e:	b970      	cbnz	r0, 800dd4e <__ssputs_r+0x82>
 800dd30:	4650      	mov	r0, sl
 800dd32:	6921      	ldr	r1, [r4, #16]
 800dd34:	f7ff fefc 	bl	800db30 <_free_r>
 800dd38:	230c      	movs	r3, #12
 800dd3a:	f8ca 3000 	str.w	r3, [sl]
 800dd3e:	89a3      	ldrh	r3, [r4, #12]
 800dd40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd44:	81a3      	strh	r3, [r4, #12]
 800dd46:	f04f 30ff 	mov.w	r0, #4294967295
 800dd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd4e:	6126      	str	r6, [r4, #16]
 800dd50:	6165      	str	r5, [r4, #20]
 800dd52:	443e      	add	r6, r7
 800dd54:	1bed      	subs	r5, r5, r7
 800dd56:	6026      	str	r6, [r4, #0]
 800dd58:	60a5      	str	r5, [r4, #8]
 800dd5a:	464e      	mov	r6, r9
 800dd5c:	45b1      	cmp	r9, r6
 800dd5e:	d200      	bcs.n	800dd62 <__ssputs_r+0x96>
 800dd60:	464e      	mov	r6, r9
 800dd62:	4632      	mov	r2, r6
 800dd64:	6820      	ldr	r0, [r4, #0]
 800dd66:	4641      	mov	r1, r8
 800dd68:	f7ff febf 	bl	800daea <memmove>
 800dd6c:	68a3      	ldr	r3, [r4, #8]
 800dd6e:	1b9b      	subs	r3, r3, r6
 800dd70:	60a3      	str	r3, [r4, #8]
 800dd72:	6823      	ldr	r3, [r4, #0]
 800dd74:	441e      	add	r6, r3
 800dd76:	6026      	str	r6, [r4, #0]
 800dd78:	2000      	movs	r0, #0
 800dd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800dd80 <_svfiprintf_r>:
 800dd80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd84:	b09d      	sub	sp, #116	; 0x74
 800dd86:	4606      	mov	r6, r0
 800dd88:	9303      	str	r3, [sp, #12]
 800dd8a:	898b      	ldrh	r3, [r1, #12]
 800dd8c:	061c      	lsls	r4, r3, #24
 800dd8e:	460d      	mov	r5, r1
 800dd90:	4690      	mov	r8, r2
 800dd92:	d50c      	bpl.n	800ddae <_svfiprintf_r+0x2e>
 800dd94:	690b      	ldr	r3, [r1, #16]
 800dd96:	b953      	cbnz	r3, 800ddae <_svfiprintf_r+0x2e>
 800dd98:	2140      	movs	r1, #64	; 0x40
 800dd9a:	f7ff ff0d 	bl	800dbb8 <_malloc_r>
 800dd9e:	6028      	str	r0, [r5, #0]
 800dda0:	6128      	str	r0, [r5, #16]
 800dda2:	b910      	cbnz	r0, 800ddaa <_svfiprintf_r+0x2a>
 800dda4:	230c      	movs	r3, #12
 800dda6:	6033      	str	r3, [r6, #0]
 800dda8:	e0cc      	b.n	800df44 <_svfiprintf_r+0x1c4>
 800ddaa:	2340      	movs	r3, #64	; 0x40
 800ddac:	616b      	str	r3, [r5, #20]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	9309      	str	r3, [sp, #36]	; 0x24
 800ddb2:	2320      	movs	r3, #32
 800ddb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddb8:	2330      	movs	r3, #48	; 0x30
 800ddba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddbe:	4643      	mov	r3, r8
 800ddc0:	461c      	mov	r4, r3
 800ddc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddc6:	b91a      	cbnz	r2, 800ddd0 <_svfiprintf_r+0x50>
 800ddc8:	ebb4 0908 	subs.w	r9, r4, r8
 800ddcc:	d00f      	beq.n	800ddee <_svfiprintf_r+0x6e>
 800ddce:	e002      	b.n	800ddd6 <_svfiprintf_r+0x56>
 800ddd0:	2a25      	cmp	r2, #37	; 0x25
 800ddd2:	d1f5      	bne.n	800ddc0 <_svfiprintf_r+0x40>
 800ddd4:	e7f8      	b.n	800ddc8 <_svfiprintf_r+0x48>
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	4629      	mov	r1, r5
 800ddda:	4642      	mov	r2, r8
 800dddc:	464b      	mov	r3, r9
 800ddde:	f7ff ff75 	bl	800dccc <__ssputs_r>
 800dde2:	3001      	adds	r0, #1
 800dde4:	f000 80a9 	beq.w	800df3a <_svfiprintf_r+0x1ba>
 800dde8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddea:	444b      	add	r3, r9
 800ddec:	9309      	str	r3, [sp, #36]	; 0x24
 800ddee:	7823      	ldrb	r3, [r4, #0]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	f000 80a2 	beq.w	800df3a <_svfiprintf_r+0x1ba>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	f04f 32ff 	mov.w	r2, #4294967295
 800ddfc:	9304      	str	r3, [sp, #16]
 800ddfe:	9307      	str	r3, [sp, #28]
 800de00:	9205      	str	r2, [sp, #20]
 800de02:	9306      	str	r3, [sp, #24]
 800de04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de08:	931a      	str	r3, [sp, #104]	; 0x68
 800de0a:	f104 0801 	add.w	r8, r4, #1
 800de0e:	4644      	mov	r4, r8
 800de10:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800df5c <_svfiprintf_r+0x1dc>
 800de14:	7821      	ldrb	r1, [r4, #0]
 800de16:	4648      	mov	r0, r9
 800de18:	2205      	movs	r2, #5
 800de1a:	f000 fa33 	bl	800e284 <memchr>
 800de1e:	f108 0801 	add.w	r8, r8, #1
 800de22:	9b04      	ldr	r3, [sp, #16]
 800de24:	b130      	cbz	r0, 800de34 <_svfiprintf_r+0xb4>
 800de26:	ebc9 0000 	rsb	r0, r9, r0
 800de2a:	2201      	movs	r2, #1
 800de2c:	4082      	lsls	r2, r0
 800de2e:	4313      	orrs	r3, r2
 800de30:	9304      	str	r3, [sp, #16]
 800de32:	e7ec      	b.n	800de0e <_svfiprintf_r+0x8e>
 800de34:	06d8      	lsls	r0, r3, #27
 800de36:	bf44      	itt	mi
 800de38:	2220      	movmi	r2, #32
 800de3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800de3e:	0719      	lsls	r1, r3, #28
 800de40:	bf44      	itt	mi
 800de42:	222b      	movmi	r2, #43	; 0x2b
 800de44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800de48:	7822      	ldrb	r2, [r4, #0]
 800de4a:	2a2a      	cmp	r2, #42	; 0x2a
 800de4c:	d002      	beq.n	800de54 <_svfiprintf_r+0xd4>
 800de4e:	9907      	ldr	r1, [sp, #28]
 800de50:	4623      	mov	r3, r4
 800de52:	e00e      	b.n	800de72 <_svfiprintf_r+0xf2>
 800de54:	9a03      	ldr	r2, [sp, #12]
 800de56:	1d11      	adds	r1, r2, #4
 800de58:	6812      	ldr	r2, [r2, #0]
 800de5a:	9103      	str	r1, [sp, #12]
 800de5c:	2a00      	cmp	r2, #0
 800de5e:	bfbb      	ittet	lt
 800de60:	4252      	neglt	r2, r2
 800de62:	f043 0302 	orrlt.w	r3, r3, #2
 800de66:	9207      	strge	r2, [sp, #28]
 800de68:	9207      	strlt	r2, [sp, #28]
 800de6a:	bfb8      	it	lt
 800de6c:	9304      	strlt	r3, [sp, #16]
 800de6e:	3401      	adds	r4, #1
 800de70:	e00a      	b.n	800de88 <_svfiprintf_r+0x108>
 800de72:	461c      	mov	r4, r3
 800de74:	3301      	adds	r3, #1
 800de76:	7822      	ldrb	r2, [r4, #0]
 800de78:	3a30      	subs	r2, #48	; 0x30
 800de7a:	2a09      	cmp	r2, #9
 800de7c:	d803      	bhi.n	800de86 <_svfiprintf_r+0x106>
 800de7e:	200a      	movs	r0, #10
 800de80:	fb00 2101 	mla	r1, r0, r1, r2
 800de84:	e7f5      	b.n	800de72 <_svfiprintf_r+0xf2>
 800de86:	9107      	str	r1, [sp, #28]
 800de88:	7823      	ldrb	r3, [r4, #0]
 800de8a:	2b2e      	cmp	r3, #46	; 0x2e
 800de8c:	d11a      	bne.n	800dec4 <_svfiprintf_r+0x144>
 800de8e:	7863      	ldrb	r3, [r4, #1]
 800de90:	2b2a      	cmp	r3, #42	; 0x2a
 800de92:	d10a      	bne.n	800deaa <_svfiprintf_r+0x12a>
 800de94:	9b03      	ldr	r3, [sp, #12]
 800de96:	1d1a      	adds	r2, r3, #4
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	9203      	str	r2, [sp, #12]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	bfb8      	it	lt
 800dea0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dea4:	3402      	adds	r4, #2
 800dea6:	9305      	str	r3, [sp, #20]
 800dea8:	e00c      	b.n	800dec4 <_svfiprintf_r+0x144>
 800deaa:	1c61      	adds	r1, r4, #1
 800deac:	2200      	movs	r2, #0
 800deae:	460c      	mov	r4, r1
 800deb0:	3101      	adds	r1, #1
 800deb2:	7823      	ldrb	r3, [r4, #0]
 800deb4:	3b30      	subs	r3, #48	; 0x30
 800deb6:	2b09      	cmp	r3, #9
 800deb8:	d803      	bhi.n	800dec2 <_svfiprintf_r+0x142>
 800deba:	200a      	movs	r0, #10
 800debc:	fb00 3202 	mla	r2, r0, r2, r3
 800dec0:	e7f5      	b.n	800deae <_svfiprintf_r+0x12e>
 800dec2:	9205      	str	r2, [sp, #20]
 800dec4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800df60 <_svfiprintf_r+0x1e0>
 800dec8:	7821      	ldrb	r1, [r4, #0]
 800deca:	4640      	mov	r0, r8
 800decc:	2203      	movs	r2, #3
 800dece:	f000 f9d9 	bl	800e284 <memchr>
 800ded2:	b138      	cbz	r0, 800dee4 <_svfiprintf_r+0x164>
 800ded4:	9a04      	ldr	r2, [sp, #16]
 800ded6:	ebc8 0000 	rsb	r0, r8, r0
 800deda:	2340      	movs	r3, #64	; 0x40
 800dedc:	4083      	lsls	r3, r0
 800dede:	4313      	orrs	r3, r2
 800dee0:	9304      	str	r3, [sp, #16]
 800dee2:	3401      	adds	r4, #1
 800dee4:	7821      	ldrb	r1, [r4, #0]
 800dee6:	481a      	ldr	r0, [pc, #104]	; (800df50 <_svfiprintf_r+0x1d0>)
 800dee8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800deec:	2206      	movs	r2, #6
 800deee:	f104 0801 	add.w	r8, r4, #1
 800def2:	f000 f9c7 	bl	800e284 <memchr>
 800def6:	b188      	cbz	r0, 800df1c <_svfiprintf_r+0x19c>
 800def8:	4b16      	ldr	r3, [pc, #88]	; (800df54 <_svfiprintf_r+0x1d4>)
 800defa:	b933      	cbnz	r3, 800df0a <_svfiprintf_r+0x18a>
 800defc:	9b03      	ldr	r3, [sp, #12]
 800defe:	3307      	adds	r3, #7
 800df00:	f023 0307 	bic.w	r3, r3, #7
 800df04:	3308      	adds	r3, #8
 800df06:	9303      	str	r3, [sp, #12]
 800df08:	e013      	b.n	800df32 <_svfiprintf_r+0x1b2>
 800df0a:	ab03      	add	r3, sp, #12
 800df0c:	9300      	str	r3, [sp, #0]
 800df0e:	4630      	mov	r0, r6
 800df10:	a904      	add	r1, sp, #16
 800df12:	462a      	mov	r2, r5
 800df14:	4b10      	ldr	r3, [pc, #64]	; (800df58 <_svfiprintf_r+0x1d8>)
 800df16:	f3af 8000 	nop.w
 800df1a:	e007      	b.n	800df2c <_svfiprintf_r+0x1ac>
 800df1c:	ab03      	add	r3, sp, #12
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	4630      	mov	r0, r6
 800df22:	a904      	add	r1, sp, #16
 800df24:	462a      	mov	r2, r5
 800df26:	4b0c      	ldr	r3, [pc, #48]	; (800df58 <_svfiprintf_r+0x1d8>)
 800df28:	f000 f892 	bl	800e050 <_printf_i>
 800df2c:	1c42      	adds	r2, r0, #1
 800df2e:	4607      	mov	r7, r0
 800df30:	d003      	beq.n	800df3a <_svfiprintf_r+0x1ba>
 800df32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df34:	443b      	add	r3, r7
 800df36:	9309      	str	r3, [sp, #36]	; 0x24
 800df38:	e741      	b.n	800ddbe <_svfiprintf_r+0x3e>
 800df3a:	89ab      	ldrh	r3, [r5, #12]
 800df3c:	065b      	lsls	r3, r3, #25
 800df3e:	d401      	bmi.n	800df44 <_svfiprintf_r+0x1c4>
 800df40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df42:	e001      	b.n	800df48 <_svfiprintf_r+0x1c8>
 800df44:	f04f 30ff 	mov.w	r0, #4294967295
 800df48:	b01d      	add	sp, #116	; 0x74
 800df4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df4e:	bf00      	nop
 800df50:	080107c4 	.word	0x080107c4
 800df54:	00000000 	.word	0x00000000
 800df58:	0800dccd 	.word	0x0800dccd
 800df5c:	080107ba 	.word	0x080107ba
 800df60:	080107c0 	.word	0x080107c0

0800df64 <_printf_common>:
 800df64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df68:	4691      	mov	r9, r2
 800df6a:	461f      	mov	r7, r3
 800df6c:	688a      	ldr	r2, [r1, #8]
 800df6e:	690b      	ldr	r3, [r1, #16]
 800df70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800df74:	4293      	cmp	r3, r2
 800df76:	bfb8      	it	lt
 800df78:	4613      	movlt	r3, r2
 800df7a:	f8c9 3000 	str.w	r3, [r9]
 800df7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800df82:	4606      	mov	r6, r0
 800df84:	460c      	mov	r4, r1
 800df86:	b112      	cbz	r2, 800df8e <_printf_common+0x2a>
 800df88:	3301      	adds	r3, #1
 800df8a:	f8c9 3000 	str.w	r3, [r9]
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	0699      	lsls	r1, r3, #26
 800df92:	bf42      	ittt	mi
 800df94:	f8d9 3000 	ldrmi.w	r3, [r9]
 800df98:	3302      	addmi	r3, #2
 800df9a:	f8c9 3000 	strmi.w	r3, [r9]
 800df9e:	6825      	ldr	r5, [r4, #0]
 800dfa0:	f015 0506 	ands.w	r5, r5, #6
 800dfa4:	d01c      	beq.n	800dfe0 <_printf_common+0x7c>
 800dfa6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dfaa:	6822      	ldr	r2, [r4, #0]
 800dfac:	3300      	adds	r3, #0
 800dfae:	bf18      	it	ne
 800dfb0:	2301      	movne	r3, #1
 800dfb2:	0692      	lsls	r2, r2, #26
 800dfb4:	d51f      	bpl.n	800dff6 <_printf_common+0x92>
 800dfb6:	18e1      	adds	r1, r4, r3
 800dfb8:	1c5a      	adds	r2, r3, #1
 800dfba:	2030      	movs	r0, #48	; 0x30
 800dfbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dfc0:	4422      	add	r2, r4
 800dfc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dfc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dfca:	3302      	adds	r3, #2
 800dfcc:	e013      	b.n	800dff6 <_printf_common+0x92>
 800dfce:	4630      	mov	r0, r6
 800dfd0:	4639      	mov	r1, r7
 800dfd2:	f104 0219 	add.w	r2, r4, #25
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	47c0      	blx	r8
 800dfda:	3001      	adds	r0, #1
 800dfdc:	d007      	beq.n	800dfee <_printf_common+0x8a>
 800dfde:	3501      	adds	r5, #1
 800dfe0:	68e3      	ldr	r3, [r4, #12]
 800dfe2:	f8d9 2000 	ldr.w	r2, [r9]
 800dfe6:	1a9b      	subs	r3, r3, r2
 800dfe8:	429d      	cmp	r5, r3
 800dfea:	dbf0      	blt.n	800dfce <_printf_common+0x6a>
 800dfec:	e7db      	b.n	800dfa6 <_printf_common+0x42>
 800dfee:	f04f 30ff 	mov.w	r0, #4294967295
 800dff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dff6:	4630      	mov	r0, r6
 800dff8:	4639      	mov	r1, r7
 800dffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dffe:	47c0      	blx	r8
 800e000:	3001      	adds	r0, #1
 800e002:	d0f4      	beq.n	800dfee <_printf_common+0x8a>
 800e004:	6822      	ldr	r2, [r4, #0]
 800e006:	f8d9 5000 	ldr.w	r5, [r9]
 800e00a:	68e3      	ldr	r3, [r4, #12]
 800e00c:	f002 0206 	and.w	r2, r2, #6
 800e010:	2a04      	cmp	r2, #4
 800e012:	bf08      	it	eq
 800e014:	1b5d      	subeq	r5, r3, r5
 800e016:	6922      	ldr	r2, [r4, #16]
 800e018:	68a3      	ldr	r3, [r4, #8]
 800e01a:	bf0c      	ite	eq
 800e01c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e020:	2500      	movne	r5, #0
 800e022:	4293      	cmp	r3, r2
 800e024:	bfc4      	itt	gt
 800e026:	1a9b      	subgt	r3, r3, r2
 800e028:	18ed      	addgt	r5, r5, r3
 800e02a:	f04f 0900 	mov.w	r9, #0
 800e02e:	45a9      	cmp	r9, r5
 800e030:	da0a      	bge.n	800e048 <_printf_common+0xe4>
 800e032:	4630      	mov	r0, r6
 800e034:	4639      	mov	r1, r7
 800e036:	f104 021a 	add.w	r2, r4, #26
 800e03a:	2301      	movs	r3, #1
 800e03c:	47c0      	blx	r8
 800e03e:	3001      	adds	r0, #1
 800e040:	d0d5      	beq.n	800dfee <_printf_common+0x8a>
 800e042:	f109 0901 	add.w	r9, r9, #1
 800e046:	e7f2      	b.n	800e02e <_printf_common+0xca>
 800e048:	2000      	movs	r0, #0
 800e04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800e050 <_printf_i>:
 800e050:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e054:	460c      	mov	r4, r1
 800e056:	4617      	mov	r7, r2
 800e058:	7e22      	ldrb	r2, [r4, #24]
 800e05a:	2a6e      	cmp	r2, #110	; 0x6e
 800e05c:	4698      	mov	r8, r3
 800e05e:	4606      	mov	r6, r0
 800e060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e062:	f101 0143 	add.w	r1, r1, #67	; 0x43
 800e066:	f000 80a9 	beq.w	800e1bc <_printf_i+0x16c>
 800e06a:	d812      	bhi.n	800e092 <_printf_i+0x42>
 800e06c:	2a63      	cmp	r2, #99	; 0x63
 800e06e:	d023      	beq.n	800e0b8 <_printf_i+0x68>
 800e070:	d80a      	bhi.n	800e088 <_printf_i+0x38>
 800e072:	2a00      	cmp	r2, #0
 800e074:	f000 80b6 	beq.w	800e1e4 <_printf_i+0x194>
 800e078:	2a58      	cmp	r2, #88	; 0x58
 800e07a:	f040 80c5 	bne.w	800e208 <_printf_i+0x1b8>
 800e07e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800e082:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 800e27c <_printf_i+0x22c>
 800e086:	e051      	b.n	800e12c <_printf_i+0xdc>
 800e088:	2a64      	cmp	r2, #100	; 0x64
 800e08a:	d01e      	beq.n	800e0ca <_printf_i+0x7a>
 800e08c:	2a69      	cmp	r2, #105	; 0x69
 800e08e:	d01c      	beq.n	800e0ca <_printf_i+0x7a>
 800e090:	e0ba      	b.n	800e208 <_printf_i+0x1b8>
 800e092:	2a73      	cmp	r2, #115	; 0x73
 800e094:	f000 80aa 	beq.w	800e1ec <_printf_i+0x19c>
 800e098:	d809      	bhi.n	800e0ae <_printf_i+0x5e>
 800e09a:	2a6f      	cmp	r2, #111	; 0x6f
 800e09c:	d02b      	beq.n	800e0f6 <_printf_i+0xa6>
 800e09e:	2a70      	cmp	r2, #112	; 0x70
 800e0a0:	f040 80b2 	bne.w	800e208 <_printf_i+0x1b8>
 800e0a4:	6822      	ldr	r2, [r4, #0]
 800e0a6:	f042 0220 	orr.w	r2, r2, #32
 800e0aa:	6022      	str	r2, [r4, #0]
 800e0ac:	e039      	b.n	800e122 <_printf_i+0xd2>
 800e0ae:	2a75      	cmp	r2, #117	; 0x75
 800e0b0:	d021      	beq.n	800e0f6 <_printf_i+0xa6>
 800e0b2:	2a78      	cmp	r2, #120	; 0x78
 800e0b4:	d035      	beq.n	800e122 <_printf_i+0xd2>
 800e0b6:	e0a7      	b.n	800e208 <_printf_i+0x1b8>
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	1d11      	adds	r1, r2, #4
 800e0bc:	6019      	str	r1, [r3, #0]
 800e0be:	6813      	ldr	r3, [r2, #0]
 800e0c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e0c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0c8:	e0a2      	b.n	800e210 <_printf_i+0x1c0>
 800e0ca:	6820      	ldr	r0, [r4, #0]
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	f010 0f80 	tst.w	r0, #128	; 0x80
 800e0d2:	d003      	beq.n	800e0dc <_printf_i+0x8c>
 800e0d4:	1d10      	adds	r0, r2, #4
 800e0d6:	6018      	str	r0, [r3, #0]
 800e0d8:	6813      	ldr	r3, [r2, #0]
 800e0da:	e005      	b.n	800e0e8 <_printf_i+0x98>
 800e0dc:	0645      	lsls	r5, r0, #25
 800e0de:	d5f9      	bpl.n	800e0d4 <_printf_i+0x84>
 800e0e0:	1d10      	adds	r0, r2, #4
 800e0e2:	6018      	str	r0, [r3, #0]
 800e0e4:	f9b2 3000 	ldrsh.w	r3, [r2]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	da3b      	bge.n	800e164 <_printf_i+0x114>
 800e0ec:	222d      	movs	r2, #45	; 0x2d
 800e0ee:	425b      	negs	r3, r3
 800e0f0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e0f4:	e036      	b.n	800e164 <_printf_i+0x114>
 800e0f6:	6820      	ldr	r0, [r4, #0]
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	f010 0f80 	tst.w	r0, #128	; 0x80
 800e0fe:	d003      	beq.n	800e108 <_printf_i+0xb8>
 800e100:	1d10      	adds	r0, r2, #4
 800e102:	6018      	str	r0, [r3, #0]
 800e104:	6813      	ldr	r3, [r2, #0]
 800e106:	e004      	b.n	800e112 <_printf_i+0xc2>
 800e108:	0640      	lsls	r0, r0, #25
 800e10a:	d5f9      	bpl.n	800e100 <_printf_i+0xb0>
 800e10c:	1d10      	adds	r0, r2, #4
 800e10e:	6018      	str	r0, [r3, #0]
 800e110:	8813      	ldrh	r3, [r2, #0]
 800e112:	7e22      	ldrb	r2, [r4, #24]
 800e114:	f8df e164 	ldr.w	lr, [pc, #356]	; 800e27c <_printf_i+0x22c>
 800e118:	2a6f      	cmp	r2, #111	; 0x6f
 800e11a:	bf0c      	ite	eq
 800e11c:	2208      	moveq	r2, #8
 800e11e:	220a      	movne	r2, #10
 800e120:	e01c      	b.n	800e15c <_printf_i+0x10c>
 800e122:	2278      	movs	r2, #120	; 0x78
 800e124:	f8df e158 	ldr.w	lr, [pc, #344]	; 800e280 <_printf_i+0x230>
 800e128:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800e12c:	6822      	ldr	r2, [r4, #0]
 800e12e:	6818      	ldr	r0, [r3, #0]
 800e130:	f012 0f80 	tst.w	r2, #128	; 0x80
 800e134:	f100 0504 	add.w	r5, r0, #4
 800e138:	601d      	str	r5, [r3, #0]
 800e13a:	d001      	beq.n	800e140 <_printf_i+0xf0>
 800e13c:	6803      	ldr	r3, [r0, #0]
 800e13e:	e002      	b.n	800e146 <_printf_i+0xf6>
 800e140:	0655      	lsls	r5, r2, #25
 800e142:	d5fb      	bpl.n	800e13c <_printf_i+0xec>
 800e144:	8803      	ldrh	r3, [r0, #0]
 800e146:	07d0      	lsls	r0, r2, #31
 800e148:	bf44      	itt	mi
 800e14a:	f042 0220 	orrmi.w	r2, r2, #32
 800e14e:	6022      	strmi	r2, [r4, #0]
 800e150:	b91b      	cbnz	r3, 800e15a <_printf_i+0x10a>
 800e152:	6822      	ldr	r2, [r4, #0]
 800e154:	f022 0220 	bic.w	r2, r2, #32
 800e158:	6022      	str	r2, [r4, #0]
 800e15a:	2210      	movs	r2, #16
 800e15c:	2000      	movs	r0, #0
 800e15e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800e162:	e002      	b.n	800e16a <_printf_i+0x11a>
 800e164:	f8df e114 	ldr.w	lr, [pc, #276]	; 800e27c <_printf_i+0x22c>
 800e168:	220a      	movs	r2, #10
 800e16a:	6865      	ldr	r5, [r4, #4]
 800e16c:	60a5      	str	r5, [r4, #8]
 800e16e:	2d00      	cmp	r5, #0
 800e170:	bfa2      	ittt	ge
 800e172:	6820      	ldrge	r0, [r4, #0]
 800e174:	f020 0004 	bicge.w	r0, r0, #4
 800e178:	6020      	strge	r0, [r4, #0]
 800e17a:	b903      	cbnz	r3, 800e17e <_printf_i+0x12e>
 800e17c:	b165      	cbz	r5, 800e198 <_printf_i+0x148>
 800e17e:	460d      	mov	r5, r1
 800e180:	fbb3 f0f2 	udiv	r0, r3, r2
 800e184:	fb02 3310 	mls	r3, r2, r0, r3
 800e188:	f81e 3003 	ldrb.w	r3, [lr, r3]
 800e18c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e190:	4603      	mov	r3, r0
 800e192:	2800      	cmp	r0, #0
 800e194:	d1f4      	bne.n	800e180 <_printf_i+0x130>
 800e196:	e000      	b.n	800e19a <_printf_i+0x14a>
 800e198:	460d      	mov	r5, r1
 800e19a:	2a08      	cmp	r2, #8
 800e19c:	d10b      	bne.n	800e1b6 <_printf_i+0x166>
 800e19e:	6823      	ldr	r3, [r4, #0]
 800e1a0:	07da      	lsls	r2, r3, #31
 800e1a2:	d508      	bpl.n	800e1b6 <_printf_i+0x166>
 800e1a4:	6923      	ldr	r3, [r4, #16]
 800e1a6:	6862      	ldr	r2, [r4, #4]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	bfde      	ittt	le
 800e1ac:	2330      	movle	r3, #48	; 0x30
 800e1ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e1b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e1b6:	1b49      	subs	r1, r1, r5
 800e1b8:	6121      	str	r1, [r4, #16]
 800e1ba:	e02e      	b.n	800e21a <_printf_i+0x1ca>
 800e1bc:	6825      	ldr	r5, [r4, #0]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	6960      	ldr	r0, [r4, #20]
 800e1c2:	f015 0f80 	tst.w	r5, #128	; 0x80
 800e1c6:	d003      	beq.n	800e1d0 <_printf_i+0x180>
 800e1c8:	1d15      	adds	r5, r2, #4
 800e1ca:	601d      	str	r5, [r3, #0]
 800e1cc:	6813      	ldr	r3, [r2, #0]
 800e1ce:	e008      	b.n	800e1e2 <_printf_i+0x192>
 800e1d0:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e1d4:	f102 0504 	add.w	r5, r2, #4
 800e1d8:	601d      	str	r5, [r3, #0]
 800e1da:	6813      	ldr	r3, [r2, #0]
 800e1dc:	d001      	beq.n	800e1e2 <_printf_i+0x192>
 800e1de:	8018      	strh	r0, [r3, #0]
 800e1e0:	e000      	b.n	800e1e4 <_printf_i+0x194>
 800e1e2:	6018      	str	r0, [r3, #0]
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	6123      	str	r3, [r4, #16]
 800e1e8:	460d      	mov	r5, r1
 800e1ea:	e016      	b.n	800e21a <_printf_i+0x1ca>
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	1d11      	adds	r1, r2, #4
 800e1f0:	6019      	str	r1, [r3, #0]
 800e1f2:	6815      	ldr	r5, [r2, #0]
 800e1f4:	6862      	ldr	r2, [r4, #4]
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	f000 f843 	bl	800e284 <memchr>
 800e1fe:	b108      	cbz	r0, 800e204 <_printf_i+0x1b4>
 800e200:	1b40      	subs	r0, r0, r5
 800e202:	6060      	str	r0, [r4, #4]
 800e204:	6863      	ldr	r3, [r4, #4]
 800e206:	e004      	b.n	800e212 <_printf_i+0x1c2>
 800e208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e20c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800e210:	2301      	movs	r3, #1
 800e212:	6123      	str	r3, [r4, #16]
 800e214:	2300      	movs	r3, #0
 800e216:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e21a:	f8cd 8000 	str.w	r8, [sp]
 800e21e:	4630      	mov	r0, r6
 800e220:	4621      	mov	r1, r4
 800e222:	aa03      	add	r2, sp, #12
 800e224:	463b      	mov	r3, r7
 800e226:	f7ff fe9d 	bl	800df64 <_printf_common>
 800e22a:	3001      	adds	r0, #1
 800e22c:	d102      	bne.n	800e234 <_printf_i+0x1e4>
 800e22e:	f04f 30ff 	mov.w	r0, #4294967295
 800e232:	e01f      	b.n	800e274 <_printf_i+0x224>
 800e234:	4630      	mov	r0, r6
 800e236:	4639      	mov	r1, r7
 800e238:	462a      	mov	r2, r5
 800e23a:	6923      	ldr	r3, [r4, #16]
 800e23c:	47c0      	blx	r8
 800e23e:	3001      	adds	r0, #1
 800e240:	d0f5      	beq.n	800e22e <_printf_i+0x1de>
 800e242:	6823      	ldr	r3, [r4, #0]
 800e244:	079b      	lsls	r3, r3, #30
 800e246:	d405      	bmi.n	800e254 <_printf_i+0x204>
 800e248:	68e0      	ldr	r0, [r4, #12]
 800e24a:	9b03      	ldr	r3, [sp, #12]
 800e24c:	4298      	cmp	r0, r3
 800e24e:	bfb8      	it	lt
 800e250:	4618      	movlt	r0, r3
 800e252:	e00f      	b.n	800e274 <_printf_i+0x224>
 800e254:	2500      	movs	r5, #0
 800e256:	68e3      	ldr	r3, [r4, #12]
 800e258:	9a03      	ldr	r2, [sp, #12]
 800e25a:	1a9b      	subs	r3, r3, r2
 800e25c:	429d      	cmp	r5, r3
 800e25e:	daf3      	bge.n	800e248 <_printf_i+0x1f8>
 800e260:	4630      	mov	r0, r6
 800e262:	4639      	mov	r1, r7
 800e264:	f104 0219 	add.w	r2, r4, #25
 800e268:	2301      	movs	r3, #1
 800e26a:	47c0      	blx	r8
 800e26c:	3001      	adds	r0, #1
 800e26e:	d0de      	beq.n	800e22e <_printf_i+0x1de>
 800e270:	3501      	adds	r5, #1
 800e272:	e7f0      	b.n	800e256 <_printf_i+0x206>
 800e274:	b004      	add	sp, #16
 800e276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e27a:	bf00      	nop
 800e27c:	080107cb 	.word	0x080107cb
 800e280:	080107dc 	.word	0x080107dc

0800e284 <memchr>:
 800e284:	b510      	push	{r4, lr}
 800e286:	b2c9      	uxtb	r1, r1
 800e288:	4402      	add	r2, r0
 800e28a:	4290      	cmp	r0, r2
 800e28c:	4603      	mov	r3, r0
 800e28e:	d006      	beq.n	800e29e <memchr+0x1a>
 800e290:	781c      	ldrb	r4, [r3, #0]
 800e292:	428c      	cmp	r4, r1
 800e294:	f100 0001 	add.w	r0, r0, #1
 800e298:	d1f7      	bne.n	800e28a <memchr+0x6>
 800e29a:	4618      	mov	r0, r3
 800e29c:	bd10      	pop	{r4, pc}
 800e29e:	2000      	movs	r0, #0
 800e2a0:	bd10      	pop	{r4, pc}

0800e2a2 <_realloc_r>:
 800e2a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2a4:	4607      	mov	r7, r0
 800e2a6:	4615      	mov	r5, r2
 800e2a8:	460e      	mov	r6, r1
 800e2aa:	b921      	cbnz	r1, 800e2b6 <_realloc_r+0x14>
 800e2ac:	4611      	mov	r1, r2
 800e2ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e2b2:	f7ff bc81 	b.w	800dbb8 <_malloc_r>
 800e2b6:	b91a      	cbnz	r2, 800e2c0 <_realloc_r+0x1e>
 800e2b8:	f7ff fc3a 	bl	800db30 <_free_r>
 800e2bc:	4628      	mov	r0, r5
 800e2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2c0:	f000 f815 	bl	800e2ee <_malloc_usable_size_r>
 800e2c4:	42a8      	cmp	r0, r5
 800e2c6:	d20e      	bcs.n	800e2e6 <_realloc_r+0x44>
 800e2c8:	4638      	mov	r0, r7
 800e2ca:	4629      	mov	r1, r5
 800e2cc:	f7ff fc74 	bl	800dbb8 <_malloc_r>
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	b150      	cbz	r0, 800e2ea <_realloc_r+0x48>
 800e2d4:	4631      	mov	r1, r6
 800e2d6:	462a      	mov	r2, r5
 800e2d8:	f7ff fbfc 	bl	800dad4 <memcpy>
 800e2dc:	4638      	mov	r0, r7
 800e2de:	4631      	mov	r1, r6
 800e2e0:	f7ff fc26 	bl	800db30 <_free_r>
 800e2e4:	e001      	b.n	800e2ea <_realloc_r+0x48>
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e2ee <_malloc_usable_size_r>:
 800e2ee:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	bfbe      	ittt	lt
 800e2f6:	1809      	addlt	r1, r1, r0
 800e2f8:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 800e2fc:	18c0      	addlt	r0, r0, r3
 800e2fe:	3804      	subs	r0, #4
 800e300:	4770      	bx	lr
	...

0800e304 <CSWTCH.37>:
	...
 800e30c:	0002 0000 0002 0000 000c 0000 000c 0000     ................
 800e31c:	000c 0000 000c 0000 0008 0000 000a 0000     ................

0800e32c <CSWTCH.38>:
 800e32c:	0003 0000 0003 0000 000c 0000 000c 0000     ................
 800e33c:	3000 0000 3000 0000 3000 0000 3000 0000     .0...0...0...0..
 800e34c:	0300 0000 0c00 0000                         ........

0800e354 <CSWTCH.43>:
 800e354:	0003 0000 0003 0000 000c 0000 000c 0000     ................
 800e364:	0030 0000 0030 0000 3000 0000 3000 0000     0...0....0...0..
 800e374:	0300 0000 0c00 0000                         ........

0800e37c <CSWTCH.44>:
	...
 800e384:	0002 0000 0002 0000 0004 0000 0004 0000     ................
 800e394:	000c 0000 000c 0000 0008 0000 000a 0000     ................

0800e3a4 <SPI_MASTER_1_SS_0>:
 800e3a4:	8300 4802 000b 0000                         ...H....

0800e3ac <SPI_MASTER_1_SS_0_Config>:
 800e3ac:	0090 0000 0001 0000 0001 0000 0000 0000     ................
 800e3bc:	0000 0004                                   ....

0800e3c0 <SPI_MASTER_1_MOSI>:
 800e3c0:	8300 4802 000d 0000                         ...H....

0800e3c8 <SPI_MASTER_1_SCLKOUT_Config>:
 800e3c8:	0090 0000 0001 0000 0001 0000 0000 0000     ................
 800e3d8:	0000 0000                                   ....

0800e3dc <SPI_MASTER_1_SCLKOUT>:
 800e3dc:	8600 4802 0002 0000                         ...H....

0800e3e4 <SPI_MASTER_1_MISO>:
 800e3e4:	8600 4802 0003 0000                         ...H....

0800e3ec <SPI_MASTER_1_Config>:
 800e3ec:	8888 1ffe 144d 0800 e3c0 0800 8874 1ffe     ....M.......t...
 800e3fc:	e3e4 0800 8a64 1ffe 0000 0000 0000 0000     ....d...........
	...
 800e414:	e3dc 0800 e3c8 0800 e3a4 0800 0000 0000     ................
	...
 800e43c:	e3ac 0800 0000 0000 0000 0000 0000 0000     ................
	...
 800e468:	0404 0000 0000 8000 0000 0100 0302 0005     ................

0800e478 <PWM_CCU8_0_event1_config>:
 800e478:	0000 0001                                   ....

0800e47c <PWM_CCU8_0_timer_handle>:
	...
 800e484:	0014 0000 0001 0000                         ........

0800e48c <PWM_CCU8_0_event2_config>:
 800e48c:	0000 0001                                   ....

0800e490 <PWM_CCU8_0_ch1_out0_config>:
 800e490:	0098 0000 0000 0001 0004 0000               ............

0800e49c <PWM_CCU8_0_ch1_out1_config>:
 800e49c:	0098 0000 0000 0001 0004 0000               ............

0800e4a8 <PWM_CCU8_0_config_handle>:
 800e4a8:	0000 0cc7 0664 0664 0000 0000 0000 0000     ....d.d.........
	...
 800e4c4:	e544 0800 e478 0800 e48c 0800 0000 0000     D...x...........
	...
 800e4e0:	0001 0000 0000 1000 e538 0800 0001 0000     ........8.......
 800e4f0:	e47c 0800 0001 0000 8000 4802 0003 0000     |..........H....
 800e500:	e490 0800 0001 0000 8000 4802 0000 0000     ...........H....
 800e510:	e49c 0800 0000 0000 0000 0000 0000 0000     ................
	...
 800e534:	88d0 1ffe                                   ....

0800e538 <PWM_CCU8_0_dt_config>:
	...

0800e544 <PWM_CCU8_0_event0_config>:
 800e544:	0000 0001                                   ....

0800e548 <ENCODER_INTERRUPT>:
 800e548:	3f39 0100                                   9?..

0800e54c <GUI_SEGGERLIBRARY_0_config>:
 800e54c:	e558 0800 8000 4802 000c 0000               X......H....

0800e558 <GUI_SEGGERLIBRARY_0_gpio_pin_config>:
 800e558:	0080 0000 0001 0000 0004 0000 4449 454c     ............IDLE
 800e568:	0000 0000 2509 0963 7525 2509 0975 7525     .....%c.%u.%u.%u
 800e578:	0a0d 0000 6d54 5172 0000 0000 6d54 2072     ....TmrQ....Tmr 
 800e588:	7653 0063                                   Svc.

0800e58c <TEST_PIN>:
 800e58c:	8500 4802 0080 0000 0000 0001 0000 0000     ...H............
 800e59c:	000a 0000                                   ....

0800e5a0 <LED1>:
 800e5a0:	8500 4802 0080 0000 0000 0001 0000 0000     ...H............
 800e5b0:	0009 0000                                   ....

0800e5b4 <LED2>:
 800e5b4:	8500 4802 0080 0000 0000 0001 0000 0000     ...H............
 800e5c4:	0008 0000                                   ....

0800e5c8 <INH_2>:
 800e5c8:	8000 4802 0080 0000 0000 0001 0000 0000     ...H............
 800e5d8:	000a 0000                                   ....

0800e5dc <ENC_A>:
 800e5dc:	8000 4802 0000 0000 0000 0000 0000 0000     ...H............
 800e5ec:	0005 0000                                   ....

0800e5f0 <ENC_B>:
 800e5f0:	8000 4802 0000 0000 0000 0000 0000 0000     ...H............
 800e600:	0006 0000                                   ....

0800e604 <INH_1>:
 800e604:	8000 4802 0080 0000 0000 0001 0000 0000     ...H............
 800e614:	0001 0000 0230 0101 0000 0001 0000 0000     ....0...........
 800e624:	0000 0001 0102 0101 6f50 6973 6974 6e6f     ........Position
 800e634:	003a 0000 7053 6565 3a64 0000 5750 3a4d     :...Speed:..PWM:
 800e644:	0000 0000 6c25 2e64 6c25 2064 2020 0020     ....%ld.%ld    .
 800e654:	6f43 746e 6f72 206c 6154 6b73 0000 0000     Control Task....
 800e664:	434c 2044 6154 6b73 0000 0000               LCD Task....

0800e670 <GUI_Font6x9>:
 800e670:	7651 0800 77ad 0800 77c5 0800 77cd 0800     Qv...w...w...w..
	...
 800e688:	0908 0101 e6b8 0800 0507 0007               ............

0800e694 <GUI_Font6x8>:
 800e694:	7651 0800 77ad 0800 77c5 0800 77cd 0800     Qv...w...w...w..
	...
 800e6ac:	0808 0101 e6b8 0800 0507 0007               ............

0800e6b8 <GUI_F6x8_Mono>:
 800e6b8:	e6cc 0800 e6cc 0800 ebe4 0800 0020 007e     ............ .~.
 800e6c8:	0606 0001                                   ....

0800e6cc <GUI_acFont6x8>:
	...
 800e6d4:	2020 2020 0020 0020 4848 0048 0000 0000          . .HHH.....
 800e6e4:	5050 50f8 50f8 0050 7820 70a0 f028 0020     PP.P.PP. x.p(. .
 800e6f4:	c8c0 2010 9840 0018 9060 40a0 90a8 0068     ... @...`..@..h.
 800e704:	2060 0040 0000 0000 2010 4040 2040 0010     ` @...... @@@ ..
 800e714:	2040 1010 2010 0040 5000 f820 5020 0000     @ ... @..P . P..
 800e724:	2000 f820 2020 0000 0000 0000 6000 4020     .  .  .......` @
 800e734:	0000 f800 0000 0000 0000 0000 6000 0060     .............``.
 800e744:	0800 2010 8040 0000 8870 a898 88c8 0070     ... @...p.....p.
 800e754:	6020 2020 2020 0070 8870 3008 8040 00f8      `    p.p..0@...
 800e764:	8870 3008 8808 0070 3010 9050 10f8 0010     p..0..p..0P.....
 800e774:	80f8 08f0 8808 0070 4030 f080 8888 0070     ......p.0@....p.
 800e784:	08f8 2010 4040 0040 8870 7088 8888 0070     ... @@@.p..p..p.
 800e794:	8870 7888 1008 0060 6000 0060 6060 0000     p..x..`..``.``..
 800e7a4:	0000 6060 6000 4020 2010 8040 2040 0010     ..``.` @. @.@ ..
 800e7b4:	0000 00f8 00f8 0000 4080 1020 4020 0080     .........@ . @..
 800e7c4:	8870 1008 0020 0020 8870 6808 a8a8 0070     p... . .p..h..p.
 800e7d4:	8870 f888 8888 0088 88f0 f088 8888 00f0     p...............
 800e7e4:	8870 8080 8880 0070 90e0 8888 9088 00e0     p.....p.........
 800e7f4:	80f8 f080 8080 00f8 80f8 f080 8080 0080     ................
 800e804:	8870 8080 8898 0078 8888 f888 8888 0088     p.....x.........
 800e814:	2070 2020 2020 0070 1038 1010 9010 0060     p     p.8.....`.
 800e824:	9088 c0a0 90a0 0088 8080 8080 8080 00f8     ................
 800e834:	d888 a8a8 8888 0088 8888 a8c8 8898 0088     ................
 800e844:	8870 8888 8888 0070 88f0 f088 8080 0080     p.....p.........
 800e854:	8870 8888 90a8 0068 88f0 f088 90a0 0088     p.....h.........
 800e864:	8870 7080 8808 0070 20f8 2020 2020 0020     p..p..p..      .
 800e874:	8888 8888 8888 0070 8888 8888 5088 0020     ......p......P .
 800e884:	8888 a888 a8a8 0050 8888 2050 8850 0088     ......P...P P...
 800e894:	8888 5088 2020 0020 08f8 2010 8040 00f8     ...P   .... @...
 800e8a4:	4070 4040 4040 0070 8000 2040 0810 0000     p@@@@@p...@ ....
 800e8b4:	1070 1010 1010 0070 5020 0088 0000 0000     p.....p. P......
 800e8c4:	0000 0000 0000 f800 2040 0010 0000 0000     ........@ ......
 800e8d4:	0000 0870 8878 0078 8080 c8b0 8888 00f0     ..p.x.x.........
 800e8e4:	0000 8070 8880 0070 0808 9868 8888 0078     ..p...p...h...x.
 800e8f4:	0000 8870 80f8 0070 4830 e040 4040 0040     ..p...p.0H@.@@@.
 800e904:	0000 8878 7888 7008 8080 c8b0 8888 0088     ..x..x.p........
 800e914:	0020 2060 2020 0070 0010 1030 1010 6090      .`   p...0....`
 800e924:	8080 a090 a0c0 0090 2060 2020 2020 0070     ........`     p.
 800e934:	0000 a8d0 8888 0088 0000 c8b0 8888 0088     ................
 800e944:	0000 8870 8888 0070 0000 88f0 f088 8080     ..p...p.........
 800e954:	0000 8878 7888 0808 0000 c8b0 8080 0080     ..x..x..........
 800e964:	0000 8078 0870 00f0 4040 40e0 4840 0030     ..x.p...@@.@@H0.
 800e974:	0000 8888 9888 0068 0000 8888 5088 0020     ......h......P .
 800e984:	0000 8888 a8a8 0050 0000 5088 5020 0088     ......P....P P..
 800e994:	0000 8888 7888 7008 0000 10f8 4020 00f8     .....x.p.... @..
 800e9a4:	2010 4020 2020 0010 2020 2020 2020 0020     .  @  ..       .
 800e9b4:	2040 1020 2020 0040 9068 0000 0000 0000     @  .  @.h.......
 800e9c4:	2018 0000 0000 0000 20c0 0000 0000 0000     . ....... ......
 800e9d4:	8870 0000 0000 0000 0050 0000 0000 0000     p.......P.......
 800e9e4:	9068 0000 0000 0000 0000 6000 2020 0070     h..........`  p.
 800e9f4:	6000 f090 8888 80b0 0020 8870 88f8 0088     .`...... .p.....
 800ea04:	0020 0870 8878 0078 6038 b8a0 a0e0 00b8      .p.x.x.8`......
 800ea14:	4870 e848 4848 0070 40e0 4870 7048 e040     pHH.HHp..@pHHp@.
 800ea24:	0000 28d0 a078 0058 40a0 10a0 8878 0070     ...(x.X..@..x.p.
 800ea34:	2060 2830 2030 0070 8870 a898 88c8 0070     ` 0(0 p.p.....p.
 800ea44:	0000 9870 c8a8 0070 0000 8870 88f8 0088     ..p...p...p.....
 800ea54:	0000 80f8 80e0 00f8 0000 2070 2020 0070     ..........p   p.
 800ea64:	0000 8870 8888 0070 0000 8888 8888 0070     ..p...p.......p.
 800ea74:	0000 c888 98a8 0088 0020 2020 2020 0020     ........ .     .
 800ea84:	0020 4020 8880 0070 2018 0000 0000 0000      . @..p.. ......
 800ea94:	20c0 0000 0000 0000 5020 0000 0000 0000     . ...... P......
 800eaa4:	0050 0000 0000 0000 9068 0000 0000 0000     P.......h.......
 800eab4:	0000 0000 0000 2000 0000 0000 0000 0000     ....... ........
 800eac4:	2000 a070 a8a0 2070 4030 e040 4840 00b0     . p...p 0@@.@H..
 800ead4:	0000 7088 7050 0088 5088 20f8 20f8 0020     ...pPp...P. .  .
 800eae4:	2020 0020 2020 0020 4830 5020 9020 0060        .   .0H P .`.
 800eaf4:	0088 0000 0000 0000 88f8 b8a8 88a8 00f8     ................
 800eb04:	0870 8878 0070 0000 2800 a050 2850 0000     p.x.p....(P.P(..
 800eb14:	0000 f800 0808 0000 0000 7000 0000 0000     ...........p....
 800eb24:	88f8 88a8 a898 00f8 00f8 0000 0000 0000     ................
 800eb34:	5020 0020 0000 0000 2000 2070 7000 0000      P ...... p .p..
 800eb44:	9060 4020 00f0 0000 10e0 1060 00e0 0000     `. @......`.....
 800eb54:	2018 0000 0000 0000 0000 8888 c888 80b0     . ..............
 800eb64:	9878 7898 1818 0018 0000 3000 0030 0000     x..x.......00...
 800eb74:	c040 4040 00e0 0000 8870 8888 0070 0000     @.@@....p...p...
 800eb84:	a000 2850 a050 0000 9088 50a0 50b0 1078     ..P(P......P.Px.
 800eb94:	9088 40a0 08b8 3810 40c0 48c0 28d8 0838     ...@...8.@.H.(8.
 800eba4:	8800 2050 8850 0000 2000 f800 2000 0000     ..P P.... ... ..
 800ebb4:	3010 fc70 3070 0010 3020 fc38 3038 0020     .0p.p0.. 08.80 .
 800ebc4:	2000 f870 2020 0000 2000 f820 2070 0000     . p.  ...  .p ..
 800ebd4:	0800 6828 60f8 0020 0400 0804 9008 2050     ..(h.` .......P 

0800ebe4 <GUI_F6x8_TI8859_1>:
 800ebe4:	0090 00ff ebec 0800                         ........

0800ebec <GUI_F6x8_TL8859_1>:
 800ebec:	009d ffff 009e ffff 009f ffff 00a0 ffff     ................
 800ebfc:	00a1 ffff 00a2 ffff ffff ffff ffff ffff     ................
 800ec0c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 800ec1c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 800ec2c:	007e ffff 0076 ffff 007f ffff 0080 ffff     ~...v...........
 800ec3c:	0081 ffff 0082 ffff 0083 ffff 0084 ffff     ................
 800ec4c:	0085 ffff 0086 ffff 0087 ffff 0088 ffff     ................
 800ec5c:	0089 ffff 008a ffff 008b ffff 008c ffff     ................
 800ec6c:	008d ffff 008e ffff 008f ffff 0090 ffff     ................
 800ec7c:	0091 ffff 0092 ffff 0093 ffff 0094 ffff     ................
 800ec8c:	007d ffff 0095 ffff 0096 ffff 0097 ffff     }...............
 800ec9c:	0098 ffff 0099 ffff 009a ffff 0077 ffff     ............w...
 800ecac:	0070 0079 0070 0078 0070 007a 0070 007c     p.y.p.x.p.z.p.|.
 800ecbc:	0070 007b 0066 ffff 0068 ffff 0023 007d     p.{.f...h...#.}.
 800eccc:	0071 0079 0071 0078 0071 007a 0071 007b     q.y.q.x.q.z.q.{.
 800ecdc:	0072 0079 0072 0078 0072 007a 0072 007b     r.y.r.x.r.z.r.{.
 800ecec:	0069 ffff 0075 007c 0073 0079 0073 0078     i...u.|.s.y.s.x.
 800ecfc:	0073 007a 0073 007c 0073 007b 009b ffff     s.z.s.|.s.{.....
 800ed0c:	006e ffff 0074 0079 0074 0078 0074 007a     n...t.y.t.x.t.z.
 800ed1c:	0074 007b 0039 0078 006a ffff 0065 ffff     t.{.9.x.j...e...
 800ed2c:	0041 0060 0041 005f 0041 0061 0041 0063     A.`.A._.A.a.A.c.
 800ed3c:	0041 0062 0067 ffff 006b ffff 0043 007d     A.b.g...k...C.}.
 800ed4c:	0045 0060 0045 005f 0045 0061 0045 0062     E.`.E._.E.a.E.b.
 800ed5c:	0064 0060 0064 005f 0064 0061 0064 0062     d.`.d._.d.a.d.b.
 800ed6c:	006c ffff 004e 0063 004f 0060 004f 005f     l...N.c.O.`.O._.
 800ed7c:	004f 0061 004f 0063 004f 0062 009c ffff     O.a.O.c.O.b.....
 800ed8c:	006f ffff 0055 0060 0055 005f 0055 0061     o...U.`.U._.U.a.
 800ed9c:	0055 0062 0059 005f 006d ffff 0059 0062     U.b.Y._.m...Y.b.

0800edac <GUI_Font16B_1>:
 800edac:	74f1 0800 75e5 0800 762d 0800 7635 0800     .t...u..-v..5v..
	...
 800edc4:	1010 0101 edd0 0800 070d 000a               ............

0800edd0 <GUI_Font16B_1_Prop1>:
 800edd0:	00a0 00ff eddc 0800 f9c0 0800               ............

0800eddc <GUI_Font16B_1_CharInfo>:
 800eddc:	0404 0001 f0dc 0800 0404 0001 f0ec 0800     ................
 800edec:	0707 0001 f0fc 0800 0707 0001 f10c 0800     ................
 800edfc:	0707 0001 f11c 0800 0707 0001 f12c 0800     ............,...
 800ee0c:	0303 0001 f13c 0800 0707 0001 f14c 0800     ....<.......L...
 800ee1c:	0404 0001 f15c 0800 0a0a 0002 f16c 0800     ....\.......l...
 800ee2c:	0505 0001 f18c 0800 0707 0001 f19c 0800     ................
 800ee3c:	0808 0001 f1ac 0800 0404 0001 f1bc 0800     ................
 800ee4c:	0a0a 0002 f1cc 0800 0707 0001 f1ec 0800     ................
 800ee5c:	0505 0001 f1fc 0800 0707 0001 f20c 0800     ................
 800ee6c:	0404 0001 f21c 0800 0404 0001 f22c 0800     ............,...
 800ee7c:	0404 0001 f23c 0800 0707 0001 f24c 0800     ....<.......L...
 800ee8c:	0707 0001 f25c 0800 0404 0001 f26c 0800     ....\.......l...
 800ee9c:	0404 0001 f27c 0800 0404 0001 f28c 0800     ....|...........
 800eeac:	0505 0001 f29c 0800 0707 0001 f2ac 0800     ................
 800eebc:	0b0b 0002 f2bc 0800 0b0b 0002 f2dc 0800     ................
 800eecc:	0b0b 0002 f2fc 0800 0808 0001 f31c 0800     ................
 800eedc:	0909 0002 f32c 0800 0909 0002 f34c 0800     ....,.......L...
 800eeec:	0909 0002 f36c 0800 0909 0002 f38c 0800     ....l...........
 800eefc:	0909 0002 f3ac 0800 0909 0002 f3cc 0800     ................
 800ef0c:	0d0d 0002 f3ec 0800 0909 0002 f40c 0800     ................
 800ef1c:	0808 0001 f42c 0800 0808 0001 f43c 0800     ....,.......<...
 800ef2c:	0808 0001 f44c 0800 0808 0001 f45c 0800     ....L.......\...
 800ef3c:	0404 0001 f46c 0800 0404 0001 f47c 0800     ....l.......|...
 800ef4c:	0404 0001 f48c 0800 0404 0001 f49c 0800     ................
 800ef5c:	0909 0002 f4ac 0800 0909 0002 f4cc 0800     ................
 800ef6c:	0a0a 0002 f4ec 0800 0a0a 0002 f50c 0800     ................
 800ef7c:	0a0a 0002 f52c 0800 0a0a 0002 f54c 0800     ....,.......L...
 800ef8c:	0a0a 0002 f56c 0800 0808 0001 f58c 0800     ....l...........
 800ef9c:	0a0a 0002 f59c 0800 0909 0002 f5bc 0800     ................
 800efac:	0909 0002 f5dc 0800 0909 0002 f5fc 0800     ................
 800efbc:	0909 0002 f61c 0800 0808 0001 f63c 0800     ............<...
 800efcc:	0909 0002 f64c 0800 0808 0001 f66c 0800     ....L.......l...
 800efdc:	0808 0001 f67c 0800 0808 0001 f68c 0800     ....|...........
 800efec:	0808 0001 f69c 0800 0808 0001 f6ac 0800     ................
 800effc:	0808 0001 f6bc 0800 0808 0001 f6cc 0800     ................
 800f00c:	0c0c 0002 f6dc 0800 0707 0001 f6fc 0800     ................
 800f01c:	0808 0001 f70c 0800 0808 0001 f71c 0800     ................
 800f02c:	0808 0001 f72c 0800 0808 0001 f73c 0800     ....,.......<...
 800f03c:	0404 0001 f74c 0800 0404 0001 f75c 0800     ....L.......\...
 800f04c:	0404 0001 f76c 0800 0404 0001 f77c 0800     ....l.......|...
 800f05c:	0808 0001 f78c 0800 0808 0001 f79c 0800     ................
 800f06c:	0808 0001 f7ac 0800 0808 0001 f7bc 0800     ................
 800f07c:	0808 0001 f7cc 0800 0808 0001 f7dc 0800     ................
 800f08c:	0808 0001 f7ec 0800 0707 0001 f7fc 0800     ................
 800f09c:	0808 0001 f80c 0800 0808 0001 f81c 0800     ................
 800f0ac:	0808 0001 f82c 0800 0808 0001 f83c 0800     ....,.......<...
 800f0bc:	0808 0001 f84c 0800 0707 0001 f85c 0800     ....L.......\...
 800f0cc:	0808 0001 f86c 0800 0707 0001 f87c 0800     ....l.......|...

0800f0dc <acFont16B_1_00A0>:
	...

0800f0ec <acFont16B_1_00A1>:
 800f0ec:	0000 0000 0000 6060 6000 6060 6060 6060     ......``.```````

0800f0fc <acFont16B_1_00A2>:
 800f0fc:	0000 0800 1008 dc78 d0d0 e4d0 2078 4040     ......x.....x @@

0800f10c <acFont16B_1_00A3>:
 800f10c:	0000 3c00 6066 6060 30fc fa70 004e 0000     ...<f```.0p.N...

0800f11c <acFont16B_1_00A4>:
 800f11c:	0000 0000 8400 ccfe 8484 fecc 0084 0000     ................

0800f12c <acFont16B_1_00A5>:
 800f12c:	0000 cc00 78cc fc78 fc30 3030 0030 0000     .....xx.0.000...

0800f13c <acFont16B_1_00A6>:
 800f13c:	0000 4000 4040 4040 0000 4040 4040 0040     ...@@@@@..@@@@@.

0800f14c <acFont16B_1_00A7>:
 800f14c:	0000 3800 606c f870 ccdc 78ec 1838 70d8     ...8l`p....x8..p

0800f15c <acFont16B_1_00A8>:
 800f15c:	0000 9000 0000 0000 0000 0000 0000 0000     ................

0800f16c <acFont16B_1_00A9>:
 800f16c:	0000 0000 0000 001e 8061 804c 4092 4090     ........a.L..@.@
 800f17c:	4090 4092 804c 8061 001e 0000 0000 0000     .@.@L.a.........

0800f18c <acFont16B_1_00AA>:
 800f18c:	0000 7000 7090 f090 0000 0000 0000 0000     ...p.p..........

0800f19c <acFont16B_1_00AB>:
 800f19c:	0000 0000 0000 2400 d86c 6cd8 0024 0000     .......$l..l$...

0800f1ac <acFont16B_1_00AC>:
 800f1ac:	0000 0000 0000 06fe 0606 0000 0000 0000     ................

0800f1bc <acFont16B_1_00AD>:
	...
 800f1c4:	0000 0070 0000 0000                         ..p.....

0800f1cc <acFont16B_1_00AE>:
 800f1cc:	0000 0000 0000 001e 8061 805c 4092 4092     ........a.\..@.@
 800f1dc:	409c 4094 8052 8061 001e 0000 0000 0000     .@.@R.a.........

0800f1ec <acFont16B_1_00AF>:
 800f1ec:	0000 00fe 0000 0000 0000 0000 0000 0000     ................

0800f1fc <acFont16B_1_00B0>:
 800f1fc:	0000 6000 9090 0060 0000 0000 0000 0000     ...`..`.........

0800f20c <acFont16B_1_00B1>:
 800f20c:	0000 0000 0000 3030 30fc 0030 00fc 0000     ......00.00.....

0800f21c <acFont16B_1_00B2>:
 800f21c:	0000 7000 2090 f040 0000 0000 0000 0000     ...p. @.........

0800f22c <acFont16B_1_00B3>:
 800f22c:	0000 6000 2090 6090 0000 0000 0000 0000     ...`. .`........

0800f23c <acFont16B_1_00B4>:
 800f23c:	0000 3000 0060 0000 0000 0000 0000 0000     ...0`...........

0800f24c <acFont16B_1_00B5>:
 800f24c:	0000 0000 0000 cccc cccc cccc c0fc c0c0     ................

0800f25c <acFont16B_1_00B6>:
 800f25c:	0000 7e00 f4f4 74f4 1414 1414 1414 0014     ...~...t........

0800f26c <acFont16B_1_00B7>:
 800f26c:	0000 0000 0000 6000 0060 0000 0000 0000     .......``.......

0800f27c <acFont16B_1_00B8>:
	...
 800f288:	6000 c020                                   .` .

0800f28c <acFont16B_1_00B9>:
 800f28c:	0000 2000 2060 2020 0000 0000 0000 0000     ... `   ........

0800f29c <acFont16B_1_00BA>:
 800f29c:	0000 3000 4848 3048 0000 0000 0000 0000     ...0HHH0........

0800f2ac <acFont16B_1_00BB>:
 800f2ac:	0000 0000 0000 4800 366c 6c36 0048 0000     .......Hl66lH...

0800f2bc <acFont16B_1_00BC>:
 800f2bc:	0000 0000 0000 0041 00c2 0044 0044 0048     ......A...D.D.H.
 800f2cc:	8008 8011 8022 c023 8040 0000 0000 0000     ....".#.@.......

0800f2dc <acFont16B_1_00BD>:
 800f2dc:	0000 0000 0000 0041 00c2 0042 0044 0048     ......A...B.D.H.
 800f2ec:	c009 4012 8010 0021 c043 0000 0000 0000     ...@..!.C.......

0800f2fc <acFont16B_1_00BE>:
 800f2fc:	0000 0000 0000 8060 0091 0021 0092 0062     ......`...!...b.
 800f30c:	4004 c008 4009 e011 4010 0000 0000 0000     .@...@...@......

0800f31c <acFont16B_1_00BF>:
 800f31c:	0000 0000 0000 1818 1800 6030 c0c0 7cc6     ..........0`...|

0800f32c <acFont16B_1_00C0>:
 800f32c:	0018 000c 0000 001c 001c 0036 0036 0036     ..........6.6.6.
 800f33c:	0063 0063 007f 80c1 80c1 0000 0000 0000     c.c.............

0800f34c <acFont16B_1_00C1>:
 800f34c:	0006 000c 0000 001c 001c 0036 0036 0036     ..........6.6.6.
 800f35c:	0063 0063 007f 80c1 80c1 0000 0000 0000     c.c.............

0800f36c <acFont16B_1_00C2>:
 800f36c:	0008 0014 0000 001c 001c 0036 0036 0036     ..........6.6.6.
 800f37c:	0063 0063 007f 80c1 80c1 0000 0000 0000     c.c.............

0800f38c <acFont16B_1_00C3>:
 800f38c:	001a 0016 0000 001c 001c 0036 0036 0036     ..........6.6.6.
 800f39c:	0063 0063 007f 80c1 80c1 0000 0000 0000     c.c.............

0800f3ac <acFont16B_1_00C4>:
 800f3ac:	0000 0012 0000 001c 001c 0036 0036 0036     ..........6.6.6.
 800f3bc:	0063 0063 007f 80c1 80c1 0000 0000 0000     c.c.............

0800f3cc <acFont16B_1_00C5>:
 800f3cc:	000c 0012 0012 001c 001c 0036 0036 0036     ..........6.6.6.
 800f3dc:	0063 0063 007f 80c1 80c1 0000 0000 0000     c.c.............

0800f3ec <acFont16B_1_00C6>:
 800f3ec:	0000 0000 0000 f00f 001b 001b 001b f033     ..............3.
 800f3fc:	0033 0063 007f 0063 f0c3 0000 0000 0000     3.c...c.........

0800f40c <acFont16B_1_00C7>:
 800f40c:	0000 0000 0000 001f 8031 0060 0060 0060     ........1.`.`.`.
 800f41c:	0060 0060 0060 8031 001f 000c 0004 0018     `.`.`.1.........

0800f42c <acFont16B_1_00C8>:
 800f42c:	1830 7e00 6060 7e60 6060 6060 007e 0000     0..~```~````~...

0800f43c <acFont16B_1_00C9>:
 800f43c:	0c06 7e00 6060 7e60 6060 6060 007e 0000     ...~```~````~...

0800f44c <acFont16B_1_00CA>:
 800f44c:	1408 7e00 6060 7e60 6060 6060 007e 0000     ...~```~````~...

0800f45c <acFont16B_1_00CB>:
 800f45c:	2400 7e00 6060 7e60 6060 6060 007e 0000     .$.~```~````~...

0800f46c <acFont16B_1_00CC>:
 800f46c:	60c0 6000 6060 6060 6060 6060 0060 0000     .`.``````````...

0800f47c <acFont16B_1_00CD>:
 800f47c:	6030 6000 6060 6060 6060 6060 0060 0000     0`.``````````...

0800f48c <acFont16B_1_00CE>:
 800f48c:	5020 6000 6060 6060 6060 6060 0060 0000      P.``````````...

0800f49c <acFont16B_1_00CF>:
 800f49c:	9000 6000 6060 6060 6060 6060 0060 0000     ...``````````...

0800f4ac <acFont16B_1_00D0>:
 800f4ac:	0000 0000 0000 007c 0066 0063 0063 00fb     ......|.f.c.c...
 800f4bc:	0063 0063 0063 0066 007c 0000 0000 0000     c.c.c.f.|.......

0800f4cc <acFont16B_1_00D1>:
 800f4cc:	001a 0016 0000 0063 0073 0073 007b 006b     ......c.s.s.{.k.
 800f4dc:	006f 0067 0067 0063 0063 0000 0000 0000     o.g.g.c.c.......

0800f4ec <acFont16B_1_00D2>:
 800f4ec:	0018 000c 0000 001e 0033 8061 8061 8061     ........3.a.a.a.
 800f4fc:	8061 8061 8061 0033 001e 0000 0000 0000     a.a.a.3.........

0800f50c <acFont16B_1_00D3>:
 800f50c:	0006 000c 0000 001e 0033 8061 8061 8061     ........3.a.a.a.
 800f51c:	8061 8061 8061 0033 001e 0000 0000 0000     a.a.a.3.........

0800f52c <acFont16B_1_00D4>:
 800f52c:	0004 000a 0000 001e 0033 8061 8061 8061     ........3.a.a.a.
 800f53c:	8061 8061 8061 0033 001e 0000 0000 0000     a.a.a.3.........

0800f54c <acFont16B_1_00D5>:
 800f54c:	001a 0016 0000 001e 0033 8061 8061 8061     ........3.a.a.a.
 800f55c:	8061 8061 8061 0033 001e 0000 0000 0000     a.a.a.3.........

0800f56c <acFont16B_1_00D6>:
 800f56c:	0000 0012 0000 001e 0033 8061 8061 8061     ........3.a.a.a.
 800f57c:	8061 8061 8061 0033 001e 0000 0000 0000     a.a.a.3.........

0800f58c <acFont16B_1_00D7>:
 800f58c:	0000 0000 0000 6c44 3838 446c 0000 0000     ......Dl88lD....

0800f59c <acFont16B_1_00D8>:
 800f59c:	0000 0000 8000 c01e 8033 8063 8067 8065     ........3.c.g.e.
 800f5ac:	8069 8079 8071 0073 00de 0040 0000 0000     i.y.q.s...@.....

0800f5bc <acFont16B_1_00D9>:
 800f5bc:	0018 000c 0000 0063 0063 0063 0063 0063     ......c.c.c.c.c.
 800f5cc:	0063 0063 0063 0063 003e 0000 0000 0000     c.c.c.c.>.......

0800f5dc <acFont16B_1_00DA>:
 800f5dc:	000c 0018 0000 0063 0063 0063 0063 0063     ......c.c.c.c.c.
 800f5ec:	0063 0063 0063 0063 003e 0000 0000 0000     c.c.c.c.>.......

0800f5fc <acFont16B_1_00DB>:
 800f5fc:	0008 0014 0000 0063 0063 0063 0063 0063     ......c.c.c.c.c.
 800f60c:	0063 0063 0063 0063 003e 0000 0000 0000     c.c.c.c.>.......

0800f61c <acFont16B_1_00DC>:
 800f61c:	0000 0012 0000 0063 0063 0063 0063 0063     ......c.c.c.c.c.
 800f62c:	0063 0063 0063 0063 003e 0000 0000 0000     c.c.c.c.>.......

0800f63c <acFont16B_1_00DD>:
 800f63c:	180c c300 66c3 3c3c 1818 1818 0018 0000     .....f<<........

0800f64c <acFont16B_1_00DE>:
 800f64c:	0000 0000 0000 0060 0060 007e 0063 0063     ......`.`.~.c.c.
 800f65c:	0063 0063 007e 0060 0060 0000 0000 0000     c.c.~.`.`.......

0800f66c <acFont16B_1_00DF>:
 800f66c:	0000 3800 6c6c 7868 6e7c 6666 006c 0000     ...8llhx|nffl...

0800f67c <acFont16B_1_00E0>:
 800f67c:	0000 3000 0018 463c 361e 6666 003e 0000     ...0..<F.6ff>...

0800f68c <acFont16B_1_00E1>:
 800f68c:	0000 0c00 0018 463c 361e 6666 003e 0000     ......<F.6ff>...

0800f69c <acFont16B_1_00E2>:
 800f69c:	0000 0800 0014 463c 361e 6666 003e 0000     ......<F.6ff>...

0800f6ac <acFont16B_1_00E3>:
 800f6ac:	0000 3400 002c 463c 361e 6666 003e 0000     ...4,.<F.6ff>...

0800f6bc <acFont16B_1_00E4>:
 800f6bc:	0000 0000 0024 463c 361e 6666 003e 0000     ....$.<F.6ff>...

0800f6cc <acFont16B_1_00E5>:
 800f6cc:	1800 2424 0018 463c 361e 6666 003e 0000     ..$$..<F.6ff>...

0800f6dc <acFont16B_1_00E6>:
	...
 800f6e8:	c03d 6046 601e e037 0066 6066 c03b 0000     =.F`.`7.f.f`;...
 800f6f8:	0000 0000                                   ....

0800f6fc <acFont16B_1_00E7>:
 800f6fc:	0000 0000 0000 663c 6060 6660 183c 3008     ......<f```f<..0

0800f70c <acFont16B_1_00E8>:
 800f70c:	0000 3000 0018 663c 7e66 6660 003c 0000     ...0..<ff~`f<...

0800f71c <acFont16B_1_00E9>:
 800f71c:	0000 0c00 0018 663c 7e66 6660 003c 0000     ......<ff~`f<...

0800f72c <acFont16B_1_00EA>:
 800f72c:	0000 0800 0014 663c 7e66 6660 003c 0000     ......<ff~`f<...

0800f73c <acFont16B_1_00EB>:
 800f73c:	0000 0000 0024 663c 7e66 6660 003c 0000     ....$.<ff~`f<...

0800f74c <acFont16B_1_00EC>:
 800f74c:	0000 c000 0060 6060 6060 6060 0060 0000     ....`.```````...

0800f75c <acFont16B_1_00ED>:
 800f75c:	0000 3000 0060 6060 6060 6060 0060 0000     ...0`.```````...

0800f76c <acFont16B_1_00EE>:
 800f76c:	0000 2000 0050 6060 6060 6060 0060 0000     ... P.```````...

0800f77c <acFont16B_1_00EF>:
 800f77c:	0000 0000 0090 6060 6060 6060 0060 0000     ......```````...

0800f78c <acFont16B_1_00F0>:
 800f78c:	0000 1400 1408 663e 6666 6666 003c 0000     ......>fffff<...

0800f79c <acFont16B_1_00F1>:
 800f79c:	0000 3400 002c 766c 6666 6666 0066 0000     ...4,.lvfffff...

0800f7ac <acFont16B_1_00F2>:
 800f7ac:	0000 1800 000c 663c 6666 6666 003c 0000     ......<fffff<...

0800f7bc <acFont16B_1_00F3>:
 800f7bc:	0000 0c00 0018 663c 6666 6666 003c 0000     ......<fffff<...

0800f7cc <acFont16B_1_00F4>:
 800f7cc:	0000 0800 0014 663c 6666 6666 003c 0000     ......<fffff<...

0800f7dc <acFont16B_1_00F5>:
 800f7dc:	0000 3400 002c 663c 6666 6666 003c 0000     ...4,.<fffff<...

0800f7ec <acFont16B_1_00F6>:
 800f7ec:	0000 0000 0024 663c 6666 6666 003c 0000     ....$.<fffff<...

0800f7fc <acFont16B_1_00F7>:
 800f7fc:	0000 0000 3000 0030 00fc 3030 0000 0000     .....00...00....

0800f80c <acFont16B_1_00F8>:
 800f80c:	0000 0000 0400 6c3e 7e6e 3676 207c 0000     ......>ln~v6| ..

0800f81c <acFont16B_1_00F9>:
 800f81c:	0000 3000 0018 6666 6666 6e66 0036 0000     ...0..fffffn6...

0800f82c <acFont16B_1_00FA>:
 800f82c:	0000 0c00 0018 6666 6666 6e66 0036 0000     ......fffffn6...

0800f83c <acFont16B_1_00FB>:
 800f83c:	0000 0800 0014 6666 6666 6e66 0036 0000     ......fffffn6...

0800f84c <acFont16B_1_00FC>:
 800f84c:	0000 0000 0024 6666 6666 6e66 0036 0000     ....$.fffffn6...

0800f85c <acFont16B_1_00FD>:
 800f85c:	0000 0c00 0018 c6c6 6c6c 386c 3838 f030     ........lll8880.

0800f86c <acFont16B_1_00FE>:
 800f86c:	0000 6000 6060 667c 6666 6666 607c 6060     ...```|fffff|```

0800f87c <acFont16B_1_00FF>:
 800f87c:	0000 0000 0024 c6c6 6c6c 386c 3838 f030     ....$...lll8880.
 800f88c:	0206 0004 0307 0105 6745 0800 6749 0800     ........Eg..Ig..
 800f89c:	6751 0800 6755 0800 675d 0800 6761 0800     Qg..Ug..]g..ag..
 800f8ac:	6769 0800 676d 0800 6775 0800 6779 0800     ig..mg..ug..yg..
 800f8bc:	677d 0800 6785 0800 678d 0800 6791 0800     }g...g...g...g..
 800f8cc:	6795 0800 679d 0800                         .g...g..

0800f8d4 <GUIDRV_FlexColor_API>:
 800f8d4:	0000 0000 6829 0800 67ed 0800 6801 0800     ....)h...g...h..
 800f8e4:	6815 0800 67b1 0800 67a5 0800 67bd 0800     .h...g...g...g..
 800f8f4:	6a79 0800 6935 0800 69a1 0800 6a05 0800     yj..5i...i...j..
 800f904:	6a11 0800                                   .j..

0800f908 <_HL_APIList>:
 800f908:	aa5d 0800 aa01 0800                         ].......

0800f910 <LCD_API_ColorConv_M565>:
 800f910:	8b99 0800 8b69 0800 8bc9 0800 0001 0000     ....i...........
 800f920:	8bd1 0800 8cb9 0800                         ........

0800f928 <GUI_MEMDEV_DEVICE_16>:
 800f928:	0004 0000 8ded 0800 a77d 0800 a3a5 0800     ........}.......
 800f938:	a559 0800 a2f1 0800 a331 0800 a26d 0800     Y.......1...m...
 800f948:	8d95 0800 8d85 0800 8da5 0800 8d75 0800     ............u...
 800f958:	8db9 0800                                   ....

0800f95c <_aID>:
 800f95c:	0000 0000 0001 0000 0002 0000 0003 0000     ................
 800f96c:	0004 0000 0005 0000 0006 0000 0007 0000     ................
 800f97c:	0008 0000 0009 0000 000a 0000 000b 0000     ................
 800f98c:	000c 0000 000d 0000 000e 0000 000f 0000     ................

0800f99c <GUI_Font16B_ASCII>:
 800f99c:	74f1 0800 75e5 0800 762d 0800 7635 0800     .t...u..-v..5v..
	...
 800f9b4:	1010 0101 f9c0 0800 070d 000a               ............

0800f9c0 <GUI_Font16B_ASCII_Prop1>:
 800f9c0:	0020 007e f9cc 0800 0000 0000                .~.........

0800f9cc <GUI_Font16B_ASCII_CharInfo>:
 800f9cc:	0404 0001 fcc4 0800 0404 0001 fcd4 0800     ................
 800f9dc:	0606 0001 fce4 0800 0707 0001 fcf4 0800     ................
 800f9ec:	0707 0001 fd04 0800 0a0a 0002 fd14 0800     ................
 800f9fc:	0909 0002 fd34 0800 0303 0001 fd54 0800     ....4.......T...
 800fa0c:	0404 0001 fd64 0800 0404 0001 fd74 0800     ....d.......t...
 800fa1c:	0505 0001 fd84 0800 0808 0001 fd94 0800     ................
 800fa2c:	0404 0001 fda4 0800 0404 0001 fdb4 0800     ................
 800fa3c:	0404 0001 fdc4 0800 0404 0001 fdd4 0800     ................
 800fa4c:	0707 0001 fde4 0800 0707 0001 fdf4 0800     ................
 800fa5c:	0707 0001 fe04 0800 0707 0001 fe14 0800     ................
 800fa6c:	0707 0001 fe24 0800 0707 0001 fe34 0800     ....$.......4...
 800fa7c:	0707 0001 fe44 0800 0707 0001 fe54 0800     ....D.......T...
 800fa8c:	0707 0001 fe64 0800 0707 0001 fe74 0800     ....d.......t...
 800fa9c:	0404 0001 fe84 0800 0404 0001 fe94 0800     ................
 800faac:	0808 0001 fea4 0800 0808 0001 feb4 0800     ................
 800fabc:	0808 0001 fec4 0800 0808 0001 fed4 0800     ................
 800facc:	0d0d 0002 fee4 0800 0909 0002 ff04 0800     ................
 800fadc:	0909 0002 ff24 0800 0909 0002 ff44 0800     ....$.......D...
 800faec:	0909 0002 ff64 0800 0808 0001 ff84 0800     ....d...........
 800fafc:	0808 0001 ff94 0800 0a0a 0002 ffa4 0800     ................
 800fb0c:	0909 0002 ffc4 0800 0404 0001 ffe4 0800     ................
 800fb1c:	0707 0001 fff4 0800 0909 0002 0004 0801     ................
 800fb2c:	0808 0001 0024 0801 0b0b 0002 0034 0801     ....$.......4...
 800fb3c:	0909 0002 0054 0801 0a0a 0002 0074 0801     ....T.......t...
 800fb4c:	0909 0002 0094 0801 0a0a 0002 00b4 0801     ................
 800fb5c:	0909 0002 00d4 0801 0909 0002 00f4 0801     ................
 800fb6c:	0808 0001 0114 0801 0909 0002 0124 0801     ............$...
 800fb7c:	0909 0002 0144 0801 0d0d 0002 0164 0801     ....D.......d...
 800fb8c:	0909 0002 0184 0801 0808 0001 01a4 0801     ................
 800fb9c:	0707 0001 01b4 0801 0404 0001 01c4 0801     ................
 800fbac:	0404 0001 01d4 0801 0404 0001 01e4 0801     ................
 800fbbc:	0808 0001 01f4 0801 0707 0001 0204 0801     ................
 800fbcc:	0404 0001 0214 0801 0808 0001 0224 0801     ............$...
 800fbdc:	0808 0001 0234 0801 0707 0001 0244 0801     ....4.......D...
 800fbec:	0808 0001 0254 0801 0808 0001 0264 0801     ....T.......d...
 800fbfc:	0404 0001 0274 0801 0808 0001 0284 0801     ....t...........
 800fc0c:	0808 0001 0294 0801 0404 0001 02a4 0801     ................
 800fc1c:	0404 0001 02b4 0801 0707 0001 02c4 0801     ................
 800fc2c:	0404 0001 02d4 0801 0c0c 0002 02e4 0801     ................
 800fc3c:	0808 0001 0304 0801 0808 0001 0314 0801     ................
 800fc4c:	0808 0001 0324 0801 0808 0001 0334 0801     ....$.......4...
 800fc5c:	0505 0001 0344 0801 0606 0001 0354 0801     ....D.......T...
 800fc6c:	0404 0001 0364 0801 0808 0001 0374 0801     ....d.......t...
 800fc7c:	0707 0001 0384 0801 0b0b 0002 0394 0801     ................
 800fc8c:	0808 0001 03b4 0801 0707 0001 03c4 0801     ................
 800fc9c:	0707 0001 03d4 0801 0505 0001 03e4 0801     ................
 800fcac:	0303 0001 03f4 0801 0505 0001 0404 0801     ................
 800fcbc:	0808 0001 0414 0801                         ........

0800fcc4 <acFont16B_ASCII_0020>:
	...

0800fcd4 <acFont16B_ASCII_0021>:
 800fcd4:	0000 6000 6060 6060 6060 6000 0060 0000     ...```````.``...

0800fce4 <acFont16B_ASCII_0022>:
 800fce4:	0000 6c00 6c6c 0000 0000 0000 0000 0000     ...lll..........

0800fcf4 <acFont16B_ASCII_0023>:
 800fcf4:	0000 2400 2424 48fc fc48 9090 0090 0000     ...$$$.HH.......

0800fd04 <acFont16B_ASCII_0024>:
 800fd04:	0000 3810 5054 7870 1c3c 5414 1038 0000     ...8TPpx<..T8...

0800fd14 <acFont16B_ASCII_0025>:
 800fd14:	0000 0000 0000 0072 0052 0052 0054 0074     ......r.R.R.T.t.
 800fd24:	800b 800a 800a 8012 8013 0000 0000 0000     ................

0800fd34 <acFont16B_ASCII_0026>:
 800fd34:	0000 0000 0000 001c 0036 0036 001e 0018     ........6.6.....
 800fd44:	003d 006d 0067 0067 803d 0000 0000 0000     =.m.g.g.=.......

0800fd54 <acFont16B_ASCII_0027>:
 800fd54:	0000 6000 6060 0000 0000 0000 0000 0000     ...```..........

0800fd64 <acFont16B_ASCII_0028>:
 800fd64:	0000 1000 2030 6060 6060 6060 2060 1030     ....0 ``````` 0.

0800fd74 <acFont16B_ASCII_0029>:
 800fd74:	0000 8000 40c0 6060 6060 6060 4060 80c0     .....@```````@..

0800fd84 <acFont16B_ASCII_002A>:
 800fd84:	0000 2000 20f8 00d8 0000 0000 0000 0000     ... . ..........

0800fd94 <acFont16B_ASCII_002B>:
 800fd94:	0000 0000 0000 1800 7e18 1818 0000 0000     .........~......

0800fda4 <acFont16B_ASCII_002C>:
	...
 800fdac:	0000 6000 2060 0040                         ...`` @.

0800fdb4 <acFont16B_ASCII_002D>:
	...
 800fdbc:	0000 0070 0000 0000                         ..p.....

0800fdc4 <acFont16B_ASCII_002E>:
	...
 800fdcc:	0000 6000 0060 0000                         ...``...

0800fdd4 <acFont16B_ASCII_002F>:
 800fdd4:	0000 1000 2010 2020 4040 8040 0080 0000     .....   @@@.....

0800fde4 <acFont16B_ASCII_0030>:
 800fde4:	0000 7800 cccc cccc cccc cccc 0078 0000     ...x........x...

0800fdf4 <acFont16B_ASCII_0031>:
 800fdf4:	0000 1800 7838 1858 1818 1818 0018 0000     ....8xX.........

0800fe04 <acFont16B_ASCII_0032>:
 800fe04:	0000 7800 0ccc 180c 3038 c060 00fc 0000     ...x....80`.....

0800fe14 <acFont16B_ASCII_0033>:
 800fe14:	0000 7800 0ccc 380c 0c0c cc0c 0078 0000     ...x...8....x...

0800fe24 <acFont16B_ASCII_0034>:
 800fe24:	0000 1800 3818 5838 9858 18fc 0018 0000     .....88XX.......

0800fe34 <acFont16B_ASCII_0035>:
 800fe34:	0000 7c00 c060 ccf8 0c0c cc0c 0078 0000     ...|`.......x...

0800fe44 <acFont16B_ASCII_0036>:
 800fe44:	0000 3800 c04c f8c0 cccc cccc 0078 0000     ...8L.......x...

0800fe54 <acFont16B_ASCII_0037>:
 800fe54:	0000 fc00 180c 3018 3030 6060 0060 0000     .......000```...

0800fe64 <acFont16B_ASCII_0038>:
 800fe64:	0000 7800 cccc 78cc cccc cccc 0078 0000     ...x...x....x...

0800fe74 <acFont16B_ASCII_0039>:
 800fe74:	0000 7800 cccc cccc 0c7c c80c 0070 0000     ...x....|...p...

0800fe84 <acFont16B_ASCII_003A>:
 800fe84:	0000 0000 0000 6060 0000 6000 0060 0000     ......``...``...

0800fe94 <acFont16B_ASCII_003B>:
 800fe94:	0000 0000 0000 6060 0000 6000 2060 0040     ......``...`` @.

0800fea4 <acFont16B_ASCII_003C>:
 800fea4:	0000 0000 0400 701c 70c0 041c 0000 0000     .......p.p......

0800feb4 <acFont16B_ASCII_003D>:
 800feb4:	0000 0000 0000 fe00 fe00 0000 0000 0000     ................

0800fec4 <acFont16B_ASCII_003E>:
 800fec4:	0000 0000 4000 1c70 1c06 4070 0000 0000     .....@p...p@....

0800fed4 <acFont16B_ASCII_003F>:
 800fed4:	0000 7c00 06c6 0c06 3018 3000 0030 0000     ...|.....0.00...

0800fee4 <acFont16B_ASCII_0040>:
 800fee4:	0000 0000 0000 c00f 2030 1060 c84e c89f     ........0 `.N...
 800fef4:	c8b9 88b1 90b3 b0bf c05d 0840 3030 c00f     ........].@.00..

0800ff04 <acFont16B_ASCII_0041>:
 800ff04:	0000 0000 0000 001c 001c 0036 0036 0036     ..........6.6.6.
 800ff14:	0063 0063 007f 80c1 80c1 0000 0000 0000     c.c.............

0800ff24 <acFont16B_ASCII_0042>:
 800ff24:	0000 0000 0000 007e 0063 0063 0063 007e     ......~.c.c.c.~.
 800ff34:	0063 0063 0063 0063 007e 0000 0000 0000     c.c.c.c.~.......

0800ff44 <acFont16B_ASCII_0043>:
 800ff44:	0000 0000 0000 001f 8031 0060 0060 0060     ........1.`.`.`.
 800ff54:	0060 0060 0060 8031 001f 0000 0000 0000     `.`.`.1.........

0800ff64 <acFont16B_ASCII_0044>:
 800ff64:	0000 0000 0000 007c 0066 0063 0063 0063     ......|.f.c.c.c.
 800ff74:	0063 0063 0063 0066 007c 0000 0000 0000     c.c.c.f.|.......

0800ff84 <acFont16B_ASCII_0045>:
 800ff84:	0000 7e00 6060 7e60 6060 6060 007e 0000     ...~```~````~...

0800ff94 <acFont16B_ASCII_0046>:
 800ff94:	0000 7e00 6060 6060 607e 6060 0060 0000     ...~````~````...

0800ffa4 <acFont16B_ASCII_0047>:
 800ffa4:	0000 0000 0000 001f 8031 0060 0060 0060     ........1.`.`.`.
 800ffb4:	8067 8061 8061 8031 001f 0000 0000 0000     g.a.a.1.........

0800ffc4 <acFont16B_ASCII_0048>:
 800ffc4:	0000 0000 0000 0063 0063 0063 0063 007f     ......c.c.c.c...
 800ffd4:	0063 0063 0063 0063 0063 0000 0000 0000     c.c.c.c.c.......

0800ffe4 <acFont16B_ASCII_0049>:
 800ffe4:	0000 6000 6060 6060 6060 6060 0060 0000     ...``````````...

0800fff4 <acFont16B_ASCII_004A>:
 800fff4:	0000 0c00 0c0c 0c0c 0c0c cccc 0078 0000     ............x...

08010004 <acFont16B_ASCII_004B>:
 8010004:	0000 0000 0000 0063 0066 006c 006c 007c     ......c.f.l.l.|.
 8010014:	0076 0066 0066 0063 0063 0000 0000 0000     v.f.f.c.c.......

08010024 <acFont16B_ASCII_004C>:
 8010024:	0000 6000 6060 6060 6060 6060 007e 0000     ...`````````~...

08010034 <acFont16B_ASCII_004D>:
 8010034:	0000 0000 0000 c071 c071 c07b c07b c06a     ......q.q.{.{.j.
 8010044:	c06a c06a c06e c06e c064 0000 0000 0000     j.j.n.n.d.......

08010054 <acFont16B_ASCII_004E>:
 8010054:	0000 0000 0000 0063 0073 0073 007b 006b     ......c.s.s.{.k.
 8010064:	006f 0067 0067 0063 0063 0000 0000 0000     o.g.g.c.c.......

08010074 <acFont16B_ASCII_004F>:
 8010074:	0000 0000 0000 001e 0033 8061 8061 8061     ........3.a.a.a.
 8010084:	8061 8061 8061 0033 001e 0000 0000 0000     a.a.a.3.........

08010094 <acFont16B_ASCII_0050>:
 8010094:	0000 0000 0000 007e 0063 0063 0063 0063     ......~.c.c.c.c.
 80100a4:	007e 0060 0060 0060 0060 0000 0000 0000     ~.`.`.`.`.......

080100b4 <acFont16B_ASCII_0051>:
 80100b4:	0000 0000 0000 001e 0033 8061 8061 8061     ........3.a.a.a.
 80100c4:	8061 8061 8065 0033 001f 8000 0000 0000     a.a.e.3.........

080100d4 <acFont16B_ASCII_0052>:
 80100d4:	0000 0000 0000 007e 0063 0063 0063 0063     ......~.c.c.c.c.
 80100e4:	007e 0066 0063 0063 8061 0000 0000 0000     ~.f.c.c.a.......

080100f4 <acFont16B_ASCII_0053>:
 80100f4:	0000 0000 0000 003e 0063 0060 0070 003c     ......>.c.`.p.<.
 8010104:	001e 0007 0003 0063 003e 0000 0000 0000     ......c.>.......

08010114 <acFont16B_ASCII_0054>:
 8010114:	0000 ff00 1818 1818 1818 1818 0018 0000     ................

08010124 <acFont16B_ASCII_0055>:
 8010124:	0000 0000 0000 0063 0063 0063 0063 0063     ......c.c.c.c.c.
 8010134:	0063 0063 0063 0063 003e 0000 0000 0000     c.c.c.c.>.......

08010144 <acFont16B_ASCII_0056>:
 8010144:	0000 0000 0000 80c1 80c1 0063 0063 0063     ..........c.c.c.
 8010154:	0036 0036 0036 001c 001c 0000 0000 0000     6.6.6...........

08010164 <acFont16B_ASCII_0057>:
 8010164:	0000 0000 0000 18c7 18c7 3067 b06d b06d     ..........g0m.m.
 8010174:	b06d b06d e038 e038 e038 0000 0000 0000     m.m.8.8.8.......

08010184 <acFont16B_ASCII_0058>:
 8010184:	0000 0000 0000 0063 0063 0036 001c 001c     ......c.c.6.....
 8010194:	001c 001c 0036 0063 0063 0000 0000 0000     ....6.c.c.......

080101a4 <acFont16B_ASCII_0059>:
 80101a4:	0000 c300 66c3 3c3c 1818 1818 0018 0000     .....f<<........

080101b4 <acFont16B_ASCII_005A>:
 80101b4:	0000 fe00 0c06 1818 3030 c060 00fe 0000     ........00`.....

080101c4 <acFont16B_ASCII_005B>:
 80101c4:	0000 7000 6060 6060 6060 6060 6060 7060     ...p```````````p

080101d4 <acFont16B_ASCII_005C>:
 80101d4:	0000 8000 4080 4040 2020 1020 0010 0000     .....@@@   .....

080101e4 <acFont16B_ASCII_005D>:
 80101e4:	0000 e000 6060 6060 6060 6060 6060 e060     ....```````````.

080101f4 <acFont16B_ASCII_005E>:
 80101f4:	0000 0000 3030 4878 00cc 0000 0000 0000     ....00xH........

08010204 <acFont16B_ASCII_005F>:
	...
 8010210:	0000 fe00                                   ....

08010214 <acFont16B_ASCII_0060>:
 8010214:	0000 c000 0060 0000 0000 0000 0000 0000     ....`...........

08010224 <acFont16B_ASCII_0061>:
 8010224:	0000 0000 0000 463c 361e 6666 003e 0000     ......<F.6ff>...

08010234 <acFont16B_ASCII_0062>:
 8010234:	0000 6000 6060 766c 6666 7666 006c 0000     ...```lvfffvl...

08010244 <acFont16B_ASCII_0063>:
 8010244:	0000 0000 0000 663c 6060 6660 003c 0000     ......<f```f<...

08010254 <acFont16B_ASCII_0064>:
 8010254:	0000 0600 0606 6e36 6666 6e66 0036 0000     ......6nfffn6...

08010264 <acFont16B_ASCII_0065>:
 8010264:	0000 0000 0000 663c 7e66 6660 003c 0000     ......<ff~`f<...

08010274 <acFont16B_ASCII_0066>:
 8010274:	0000 3000 6060 60f0 6060 6060 0060 0000     ...0``.``````...

08010284 <acFont16B_ASCII_0067>:
 8010284:	0000 0000 0000 6e36 6666 6e66 0636 3c46     ......6nfffn6.F<

08010294 <acFont16B_ASCII_0068>:
 8010294:	0000 6000 6060 766c 6666 6666 0066 0000     ...```lvfffff...

080102a4 <acFont16B_ASCII_0069>:
 80102a4:	0000 6000 0060 6060 6060 6060 0060 0000     ...``.```````...

080102b4 <acFont16B_ASCII_006A>:
 80102b4:	0000 6000 0060 6060 6060 6060 6060 c060     ...``.`````````.

080102c4 <acFont16B_ASCII_006B>:
 80102c4:	0000 6000 6060 6c66 7878 6c6c 0066 0000     ...```flxxllf...

080102d4 <acFont16B_ASCII_006C>:
 80102d4:	0000 6000 6060 6060 6060 6060 0060 0000     ...``````````...

080102e4 <acFont16B_ASCII_006D>:
	...
 80102f0:	c06e 6077 6066 6066 6066 6066 6066 0000     n.w`f`f`f`f`f`..
 8010300:	0000 0000                                   ....

08010304 <acFont16B_ASCII_006E>:
 8010304:	0000 0000 0000 766c 6666 6666 0066 0000     ......lvfffff...

08010314 <acFont16B_ASCII_006F>:
 8010314:	0000 0000 0000 663c 6666 6666 003c 0000     ......<fffff<...

08010324 <acFont16B_ASCII_0070>:
 8010324:	0000 0000 0000 766c 6666 7666 606c 6060     ......lvfffvl```

08010334 <acFont16B_ASCII_0071>:
 8010334:	0000 0000 0000 6e36 6666 6e66 0636 0606     ......6nfffn6...

08010344 <acFont16B_ASCII_0072>:
 8010344:	0000 0000 0000 6078 6060 6060 0060 0000     ......x``````...

08010354 <acFont16B_ASCII_0073>:
 8010354:	0000 0000 0000 cc78 78e0 cc1c 0078 0000     ......x..x..x...

08010364 <acFont16B_ASCII_0074>:
 8010364:	0000 0000 6020 60f0 6060 6060 0030 0000     .... `.`````0...

08010374 <acFont16B_ASCII_0075>:
 8010374:	0000 0000 0000 6666 6666 6e66 0036 0000     ......fffffn6...

08010384 <acFont16B_ASCII_0076>:
 8010384:	0000 0000 0000 c6c6 6c6c 386c 0038 0000     ........lll88...

08010394 <acFont16B_ASCII_0077>:
	...
 80103a0:	60c4 60ce c06e c06a c07b 803b 8031 0000     .`.`n.j.{.;.1...
 80103b0:	0000 0000                                   ....

080103b4 <acFont16B_ASCII_0078>:
 80103b4:	0000 0000 0000 6666 183c 663c 0066 0000     ......ff<.<ff...

080103c4 <acFont16B_ASCII_0079>:
 80103c4:	0000 0000 0000 c6c6 6c6c 386c 3838 f030     ........lll8880.

080103d4 <acFont16B_ASCII_007A>:
 80103d4:	0000 0000 0000 0c7c 3018 6030 007c 0000     ......|..00`|...

080103e4 <acFont16B_ASCII_007B>:
 80103e4:	0000 3800 6060 6060 c060 6060 6060 3860     ...8`````.`````8

080103f4 <acFont16B_ASCII_007C>:
 80103f4:	0000 4000 4040 4040 4040 4040 4040 0040     ...@@@@@@@@@@@@.

08010404 <acFont16B_ASCII_007D>:
 8010404:	0000 e000 3030 3030 1830 3030 3030 e030     ....00000.00000.

08010414 <acFont16B_ASCII_007E>:
	...
 801041c:	9c72 0000 0000 0000                         r.......

08010424 <LCD_aMirror>:
 8010424:	8000 c040 a020 e060 9010 d050 b030 f070     ..@. .`...P.0.p.
 8010434:	8808 c848 a828 e868 9818 d858 b838 f878     ..H.(.h...X.8.x.
 8010444:	8404 c444 a424 e464 9414 d454 b434 f474     ..D.$.d...T.4.t.
 8010454:	8c0c cc4c ac2c ec6c 9c1c dc5c bc3c fc7c     ..L.,.l...\.<.|.
 8010464:	8202 c242 a222 e262 9212 d252 b232 f272     ..B.".b...R.2.r.
 8010474:	8a0a ca4a aa2a ea6a 9a1a da5a ba3a fa7a     ..J.*.j...Z.:.z.
 8010484:	8606 c646 a626 e666 9616 d656 b636 f676     ..F.&.f...V.6.v.
 8010494:	8e0e ce4e ae2e ee6e 9e1e de5e be3e fe7e     ..N...n...^.>.~.
 80104a4:	8101 c141 a121 e161 9111 d151 b131 f171     ..A.!.a...Q.1.q.
 80104b4:	8909 c949 a929 e969 9919 d959 b939 f979     ..I.).i...Y.9.y.
 80104c4:	8505 c545 a525 e565 9515 d555 b535 f575     ..E.%.e...U.5.u.
 80104d4:	8d0d cd4d ad2d ed6d 9d1d dd5d bd3d fd7d     ..M.-.m...].=.}.
 80104e4:	8303 c343 a323 e363 9313 d353 b333 f373     ..C.#.c...S.3.s.
 80104f4:	8b0b cb4b ab2b eb6b 9b1b db5b bb3b fb7b     ..K.+.k...[.;.{.
 8010504:	8707 c747 a727 e767 9717 d757 b737 f777     ..G.'.g...W.7.w.
 8010514:	8f0f cf4f af2f ef6f 9f1f df5f bf3f ff7f     ..O./.o..._.?...

08010524 <_SetColorAPI>:
 8010524:	a989 0800 a94d 0800 a9c5 0800               ....M.......

08010530 <GUI__aConvert_63_255>:
 8010530:	0400 0c08 1410 1c18 2420 2d28 3531 3d39     ........ $(-159=
 8010540:	4541 4d49 5551 5d59 6561 6d69 7571 7d79     AEIMQUY]aeimquy}
 8010550:	8682 8e8a 9692 9e9a a6a2 aeaa b6b2 beba     ................
 8010560:	c6c2 ceca d7d2 dfdb e7e3 efeb f7f3 fffb     ................

08010570 <GUI__aConvert_31_255>:
 8010570:	0800 1910 2921 3a31 4a42 5b52 6b63 7b73     ....!)1:BJR[cks{
 8010580:	8c84 9c94 ada5 bdb5 cec5 ded6 efe6 fff7     ................

08010590 <GUI__aConvert_255_63>:
 8010590:	0000 0100 0101 0201 0202 0302 0303 0403     ................
 80105a0:	0404 0504 0505 0605 0606 0706 0707 0807     ................
 80105b0:	0808 0908 0909 0a09 0a0a 0b0a 0b0b 0c0b     ................
 80105c0:	0c0c 0d0c 0d0d 0e0d 0e0e 0f0e 0f0f 100f     ................
 80105d0:	1010 1110 1111 1211 1212 1312 1313 1413     ................
 80105e0:	1414 1514 1515 1515 1616 1616 1717 1717     ................
 80105f0:	1818 1818 1919 1919 1a1a 1a1a 1b1b 1b1b     ................
 8010600:	1c1c 1c1c 1d1d 1d1d 1e1e 1e1e 1f1f 1f1f     ................
 8010610:	2020 2020 2121 2121 2222 2222 2323 2323         !!!!""""####
 8010620:	2424 2424 2525 2525 2626 2626 2727 2727     $$$$%%%%&&&&''''
 8010630:	2828 2828 2929 2929 2a2a 2a2a 2b2a 2b2b     (((())))*****+++
 8010640:	2c2b 2c2c 2d2c 2d2d 2e2d 2e2e 2f2e 2f2f     +,,,,----....///
 8010650:	302f 3030 3130 3131 3231 3232 3332 3333     /000011112222333
 8010660:	3433 3434 3534 3535 3635 3636 3736 3737     3444455556666777
 8010670:	3837 3838 3938 3939 3a39 3a3a 3b3a 3b3b     788889999::::;;;
 8010680:	3c3b 3c3c 3d3c 3d3d 3e3d 3e3e 3f3e 3f3f     ;<<<<====>>>>???

08010690 <GUI__aConvert_255_31>:
 8010690:	0000 0000 0100 0101 0101 0101 0201 0202     ................
 80106a0:	0202 0202 0302 0303 0303 0303 0403 0404     ................
 80106b0:	0404 0404 0504 0505 0505 0505 0505 0606     ................
 80106c0:	0606 0606 0606 0707 0707 0707 0707 0808     ................
 80106d0:	0808 0808 0808 0909 0909 0909 0909 0a09     ................
 80106e0:	0a0a 0a0a 0a0a 0b0a 0b0b 0b0b 0b0b 0c0b     ................
 80106f0:	0c0c 0c0c 0c0c 0d0c 0d0d 0d0d 0d0d 0d0d     ................
 8010700:	0e0e 0e0e 0e0e 0e0e 0f0f 0f0f 0f0f 0f0f     ................
 8010710:	1010 1010 1010 1010 1111 1111 1111 1111     ................
 8010720:	1212 1212 1212 1212 1312 1313 1313 1313     ................
 8010730:	1413 1414 1414 1414 1514 1515 1515 1515     ................
 8010740:	1615 1616 1616 1616 1616 1717 1717 1717     ................
 8010750:	1717 1818 1818 1818 1818 1919 1919 1919     ................
 8010760:	1919 1a1a 1a1a 1a1a 1a1a 1b1b 1b1b 1b1b     ................
 8010770:	1b1b 1c1b 1c1c 1c1c 1c1c 1d1c 1d1d 1d1d     ................
 8010780:	1d1d 1e1d 1e1e 1e1e 1e1e 1f1e 1f1f 1f1f     ................

08010790 <GUI_UC_None>:
 8010790:	b905 0800 b909 0800 b90d 0800 b911 0800     ................

080107a0 <LCD_API_ColorConv_0>:
 80107a0:	bad9 0800 bab9 0800 ba6d 0800 0000 0000     ........m.......
	...
 80107b8:	0043 2d23 2b30 0020 6c68 004c 6665 4567     C.#-0+ .hlL.efgE
 80107c8:	4746 3000 3231 3433 3635 3837 4139 4342     FG.0123456789ABC
 80107d8:	4544 0046 3130 3332 3534 3736 3938 6261     DEF.0123456789ab
 80107e8:	6463 6665 0000 0000                         cdef....
